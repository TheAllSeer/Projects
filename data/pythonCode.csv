,python
0,pandas
1,pandas
2,import pandas as pd
3,"df = pd.DataFrame({'user': ['Bob', 'Jane', 'Alice'], "
4,"                   'income': [40000, 50000, 42000]})"
5,datetime
6,expand.grid()
7,dput()
8,df.head(N).to_dict()
9,N
10,from pandas import Timestamp
11,"In [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])"
12,pd.read_clipboard(sep='\s\s+')
13,In [2]: df
14,Out[2]:
15,   A  B
16,0  1  2
17,1  1  3
18,2  4  6
19,pd.read_clipboard(sep='\s\s+')
20,df = df.head()
21,"df = pd.DataFrame(np.random.randn(100000000, 10))"
22,np.random.seed
23,In [3]: iwantthis
24,Out[3]:
25,   A  B
26,0  1  5
27,1  4  6
28,In [4]: df.groupby('A').sum()
29,Out[4]:
30,   B
31,A
32,1  5
33,4  6
34,"df.groupby('A', as_index=False).sum()"
35,pd.to_datetime
36,df['date'] = pd.to_datetime(df['date']) # this column ought to be date..
37,In [11]: df
38,Out[11]:
39,     C
40,A B
41,1 2  3
42,  2  6
43,set_index
44,"In [12]: df = pd.DataFrame([[1, 2, 3], [1, 2, 6]], columns=['A', 'B', 'C']).set_index(['A', 'B'])"
45,
46,In [13]: df
47,Out[13]:
48,     C
49,A B
50,1 2  3
51,  2  6
52,   B
53,A
54,1  1
55,5  0
56,df = pd.read_csv('my_secret_file.csv')  # ideally with lots of parsing options
57,pd.read_clipboard(sep='\s\s+')
58,pd.read_clipboard(sep='\s\s+')
59,pd.read_clipboard(sep='\s\s+')
60,pd.read_clipboard()
61,‘s+’
62,pd.read_clipboard()
63,"pd.read_clipboard(sep='\s+{2,}', engine='python')"
64,import numpy as np
65,import pandas as pd
66,
67,np.random.seed(123)
68,df = pd.DataFrame({
69,
70,    # some ways to create random data
71,"    'a':np.random.randn(6),"
72,"    'b':np.random.choice( [5,7,np.nan], 6),"
73,"    'c':np.random.choice( ['panda','python','shark'], 6),"
74,
75,    # some ways to create systematic groups for indexing or groupby
76,"    # this is similar to R's expand.grid(), see note 2 below"
77,"    'd':np.repeat( range(3), 2 ),"
78,"    'e':np.tile(   range(2), 3 ),"
79,
80,    # a date range and set of random dates
81,"    'f':pd.date_range('1/1/2011', periods=6, freq='D'),"
82,"    'g':np.random.choice( pd.date_range('1/1/2011', periods=365,"
83,"                          freq='D'), 6, replace=False)"
84,    })
85,          a   b       c  d  e          f          g
86,0 -1.085631 NaN   panda  0  0 2011-01-01 2011-08-12
87,1  0.997345   7   shark  0  1 2011-01-02 2011-11-10
88,2  0.282978   5   panda  1  0 2011-01-03 2011-10-30
89,3 -1.506295   7  python  1  1 2011-01-04 2011-09-07
90,4 -0.578600 NaN   shark  2  0 2011-01-05 2011-02-27
91,5  1.651437   7  python  2  1 2011-01-06 2011-02-03
92,np.repeat
93,np.tile
94,d
95,e
96,expand.grid()
97,expand.grid()
98,itertools
99,np.meshgrid
100,np.random.choice
101,g
102,replace=False
103,np.tile
104,date_range
105,stocks = pd.DataFrame({
106,"    'ticker':np.repeat( ['aapl','goog','yhoo','msft'], 25 ),"
107,"    'date':np.tile( pd.date_range('1/1/2011', periods=25, freq='D'), 4 ),"
108,    'price':(np.random.randn(100).cumsum() + 10) })
109,>>> stocks.head(5)
110,
111,        date      price ticker
112,0 2011-01-01   9.497412   aapl
113,1 2011-01-02  10.261908   aapl
114,2 2011-01-03   9.438538   aapl
115,3 2011-01-04   9.515958   aapl
116,4 2011-01-05   7.554070   aapl
117,
118,>>> stocks.groupby('ticker').head(2)
119,
120,         date      price ticker
121,0  2011-01-01   9.497412   aapl
122,1  2011-01-02  10.261908   aapl
123,25 2011-01-01   8.277772   goog
124,26 2011-01-02   7.714916   goog
125,50 2011-01-01   5.613023   yhoo
126,51 2011-01-02   6.397686   yhoo
127,75 2011-01-01  11.736584   msft
128,76 2011-01-02  11.944519   msft
129,expand.grid()
130,expand_grid()
131,"df = pd.DataFrame({'A': [...], 'B': [...], ...})"
132,stocks = pd.DataFrame({ 
133,"    'ticker':np.repeat( ['aapl','goog','yhoo','msft'], 25 ),"
134,"    'date':np.tile( pd.date_range('1/1/2011', periods=25, freq='D'), 4 ),"
135,    'price':(np.random.randn(100).cumsum() + 10) })
136,>>> stocks.head(5).to_dict()
137,"{'date': {0: Timestamp('2011-01-01 00:00:00'),"
138,"  1: Timestamp('2011-01-01 00:00:00'),"
139,"  2: Timestamp('2011-01-01 00:00:00'),"
140,"  3: Timestamp('2011-01-01 00:00:00'),"
141,"  4: Timestamp('2011-01-02 00:00:00')},"
142," 'price': {0: 10.284260107718254,"
143,"  1: 11.930300761831457,"
144,"  2: 10.93741046217319,"
145,"  3: 10.884574289565609,"
146,"  4: 11.78005850418319},"
147," 'ticker': {0: 'aapl', 1: 'aapl', 2: 'aapl', 3: 'aapl', 4: 'aapl'}}"
148,
149,">>> pd.concat([stocks.head(), stocks.tail()], ignore_index=True).to_dict()"
150,"{'date': {0: Timestamp('2011-01-01 00:00:00'),"
151,"  1: Timestamp('2011-01-01 00:00:00'),"
152,"  2: Timestamp('2011-01-01 00:00:00'),"
153,"  3: Timestamp('2011-01-01 00:00:00'),"
154,"  4: Timestamp('2011-01-02 00:00:00'),"
155,"  5: Timestamp('2011-01-24 00:00:00'),"
156,"  6: Timestamp('2011-01-25 00:00:00'),"
157,"  7: Timestamp('2011-01-25 00:00:00'),"
158,"  8: Timestamp('2011-01-25 00:00:00'),"
159,"  9: Timestamp('2011-01-25 00:00:00')},"
160," 'price': {0: 10.284260107718254,"
161,"  1: 11.930300761831457,"
162,"  2: 10.93741046217319,"
163,"  3: 10.884574289565609,"
164,"  4: 11.78005850418319,"
165,"  5: 10.017209045035006,"
166,"  6: 10.57090128181566,"
167,"  7: 11.442792747870204,"
168,"  8: 11.592953372130493,"
169,"  9: 12.864146419530938},"
170," 'ticker': {0: 'aapl',"
171,"  1: 'aapl',"
172,"  2: 'aapl',"
173,"  3: 'aapl',"
174,"  4: 'aapl',"
175,"  5: 'msft',"
176,"  6: 'msft',"
177,"  7: 'msft',"
178,"  8: 'msft',"
179,  9: 'msft'}}
180,stocks.info()
181,<class 'pandas.core.frame.DataFrame'>
182,"Int64Index: 100 entries, 0 to 99"
183,Data columns (total 3 columns):
184,date      100 non-null datetime64[ns]
185,price     100 non-null float64
186,ticker    100 non-null object
187,"dtypes: datetime64[ns](1), float64(1), object(1)"
188,to_dict
189,set_index
190,# MultiIndex example.  First create a MultiIndex DataFrame.
191,"df = stocks.set_index(['date', 'ticker'])"
192,>>> df
193,                       price
194,date       ticker           
195,2011-01-01 aapl    10.284260
196,           aapl    11.930301
197,           aapl    10.937410
198,           aapl    10.884574
199,2011-01-02 aapl    11.780059
200,...
201,
202,"# After resetting the index and passing the DataFrame to `to_dict`, make sure to use "
203,# `set_index` to restore the original MultiIndex.  This DataFrame can then be restored.
204,
205,d = df.reset_index().to_dict()
206,"df_new = pd.DataFrame(d).set_index(['date', 'ticker'])"
207,>>> df_new.head()
208,                       price
209,date       ticker           
210,2011-01-01 aapl    10.284260
211,           aapl    11.930301
212,           aapl    10.937410
213,           aapl    10.884574
214,2011-01-02 aapl    11.780059
215,dput
216,DataFrame
217,import pandas as pd
218,def dput(x):
219,"    if isinstance(x,pd.Series):"
220,"        return ""pd.Series(%s,dtype='%s',index=pd.%s)"" % (list(x),x.dtype,x.index)"
221,"    if isinstance(x,pd.DataFrame):"
222,"        return ""pd.DataFrame({"" + "", "".join(["
223,"            ""'%s': %s"" % (c,dput(x[c])) for c in x.columns]) + ("
224,"                ""}, index=pd.%s)"" % (x.index))"
225,"    raise NotImplementedError(""dput"",type(x),x)"
226,"df = pd.DataFrame({'a':[1,2,3,4,2,1,3,1]})"
227,assert df.equals(eval(dput(df)))
228,"du = pd.get_dummies(df.a,""foo"")"
229,assert du.equals(eval(dput(du)))
230,di = df
231,di.index = list('abcdefgh')
232,assert di.equals(eval(dput(di)))
233,DataFrame.to_dict
234,pd.DataFrame({
235,"  'foo_1':pd.Series([1, 0, 0, 0, 0, 1, 0, 1],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1)),"
236,"  'foo_2':pd.Series([0, 1, 0, 0, 1, 0, 0, 0],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1)),"
237,"  'foo_3':pd.Series([0, 0, 1, 0, 0, 0, 1, 0],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1)),"
238,"  'foo_4':pd.Series([0, 0, 0, 1, 0, 0, 0, 0],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1))},"
239,"  index=pd.RangeIndex(start=0, stop=8, step=1))"
240,"{'foo_1': {0: 1, 1: 0, 2: 0, 3: 0, 4: 0, 5: 1, 6: 0, 7: 1}, "
241," 'foo_2': {0: 0, 1: 1, 2: 0, 3: 0, 4: 1, 5: 0, 6: 0, 7: 0}, "
242," 'foo_3': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 0, 6: 1, 7: 0}, "
243," 'foo_4': {0: 0, 1: 0, 2: 0, 3: 1, 4: 0, 5: 0, 6: 0, 7: 0}}"
244,du
245,du.equals(pd.DataFrame(du.to_dict()))
246,==> False
247,du.dtypes
248,uint8
249,pd.DataFrame(du.to_dict()).dtypes
250,int64
251,to_dict
252,du.equals(eval(dput(df)))
253,"def dput(x):     indent = ""    ""     if isinstance(x,pd.Series):         return f""pd.Series({list(x)},dtype='{x.dtype}',index=pd.{x.index}),\r\n""     if isinstance(x,pd.DataFrame):         temp =  ""pd.DataFrame({\r\n"" + indent         temp += indent.join([             f""'{c}': {dput(x[c])}"" for c in x.columns])          temp += (f""}}, index=pd.{x.index})"")         return temp.replace(""nan"", ""float(\'NaN\')"")     raise NotImplementedError(""dput"",type(x),x)"
254,x = 0
255,y = 1
256,z = 3
257,mylist = []
258,
259,if x or y or z == 0:
260,"    mylist.append(""c"")"
261,if x or y or z == 1:
262,"    mylist.append(""d"")"
263,if x or y or z == 2:
264,"    mylist.append(""e"")"
265,if x or y or z == 3: 
266,"    mylist.append(""f"")"
267,"[""c"", ""d"", ""f""]"
268,1
269,any
270,all
271,"all([1, 2, 3, 4, False])"
272,"all([True, 1, 2, 3])"
273,"any([False, 0, 0, False])"
274,"any([False, 0, True, False])"
275,if x == 0 or 1:
276,if x or y == 0:
277,x == 0 or 1
278,0
279,0.0
280,False
281,if x == 1 or y == 1 or z == 1:
282,x
283,y
284,False
285,0
286,True
287,"if 1 in (x, y, z):"
288,"if 1 in {x, y, z}:"
289,set
290,in
291,or
292,x or y == 1
293,x
294,y == 1
295,or
296,==
297,x or y or z == 1
298,(x or y or z) == 1
299,x or y or z
300,False
301,x = 2; y = 1; z = 0
302,x or y or z
303,2
304,2 == 1
305,False
306,y == 1
307,True
308,x == 1 or 2 or 3
309,x == 1 or x == 2 or x == 3
310,"x in {1, 2, 3}"
311,set
312,"timeit.timeit('0 in {seq}'.format(seq=tuple(range(9, -1, -1))))"
313,set
314,set
315,"if 1 in {x, y, z}:"
316,set
317,x
318,y
319,z
320,tuple
321,set
322,set
323,in [...]
324,in {...}
325,x = 0
326,y = 1
327,z = 3
328,"d = {0: 'c', 1:'d', 2:'e', 3:'f'}"
329,"mylist = [d[k] for k in [x, y, z]]"
330,"d = ""cdef"""
331,"MyList = [""cdef""[k] for k in [x, y, z]]"
332,"map(lambda i: 'cdef'[i], [x, y, z])"
333,"if 1 in {x, y, z}:"
334,True
335,False
336,"if 0 in {x, y, z}:"
337,"    mylist.append(""c"")"
338,"if 1 in {x, y, z}:"
339,"    mylist.append(""d"")"
340,"if 2 in {x, y, z}:"
341,"    mylist.append(""e"")"
342,...
343,"num_to_letters = {0: ""c"", 1: ""d"", 2: ""e"", 3: ""f""}"
344,for number in num_to_letters:
345,"    if number in {x, y, z}:"
346,        mylist.append(num_to_letters[number])
347,for number in num_to_letters
348,.keys()
349,"for i, c in enumerate('cdef'): if i in {x, y, z}: mylist.append(c)"
350,"s = 'cdef'; mylist = [s[i] for i in [x, y, z]]"
351,x or y or z == 0
352,"if any(map((lambda value: value == 0), (x,y,z))):"
353,    pass # write your logic.
354,"0 in (x, y, z)"
355,if
356,my_cases = {
357,"    0: Mylist.append(""c""),"
358,"    1: Mylist.append(""d"")"
359,    # ..
360,}
361,
362,for key in my_cases:
363,"    if key in (x,y,z):"
364,        my_cases[key]()
365,        break
366,dict
367,.append
368,None
369,None
370,AttributeError
371,filter
372,map
373,"any(v == 0 for v in (x, y, z))"
374,list = []
375,list.append(x)
376,list.append(y)
377,list.append(z)
378,nums = [add numbers here]
379,letters = [add corresponding letters here]
380,for index in range(len(nums)):
381,    for obj in list:
382,        if obj == num[index]:
383,            MyList.append(letters[index])
384,            break
385,if x or y or z == 0:
386,if b
387,if bool(b)
388,"if any([x==0, y==0, z==0])"
389,list
390,xyz
391,"xyz = [x, y, z]"
392,"any(v == 0 for v in (x, y, z))"
393,itertools
394,operator
395,from itertools import repeat
396,from operator import contains
397,x = 0
398,y = 1
399,z = 3
400,"check_values = (0, 1, 3)"
401,itertools
402,"check_vars = repeat((x, y, z))"
403,map
404,"checker = map(contains, check_vars, check_values)"
405,next()
406,if next(checker)  # Checks for 0
407,    # Do something
408,    pass
409,elif next(checker)  # Checks for 1
410,    # Do something
411,    pass
412,lambda x: x in (variables)
413,operator
414,lambda
415,not (x and y and z)
416,"not all((x, y, z))"
417,"{z,y,x}"
418,"{0,1,3}"
419,">>> [""cdef""[i] for i in {z,x,y}]"
420,"['c', 'd', 'f']"
421,"my_dict = {0: ""c"", 1: ""d"", 2: ""e"", 3: ""f""}"
422,
423,"def validate(x, y, z):"
424,"    for ele in [x, y, z]:"
425,        if ele in my_dict.keys():
426,            return my_dict[ele]
427,"print validate(0, 8, 9)"
428,c
429,"print validate(9, 8, 9)"
430,None
431,"print validate(9, 8, 2)"
432,e
433,myList = []
434,"aList = [0, 1, 3]"
435,
436,for l in aList:
437,    if l==0: myList.append('c')
438,    elif l==1: myList.append('d')
439,    elif l==2: myList.append('e')
440,    elif l==3: myList.append('f')
441,
442,print(myList)
443,"if 1 in {x,y,z}"
444,">>> x = ""Wild things"""
445,">>> y = ""throttle it back"""
446,">>> z = ""in the beginning"""
447,">>> if ""Wild"" in {x, y, z}: print (True)"
448,... 
449,">>> x = ""Wild things"""
450,">>> y = ""throttle it back"""
451,">>> z = ""in the beginning"""
452,">>> if ""Wild"" in [x, y, z]: print (True)"
453,... 
454,">>> [x, y, z]"
455,"['Wild things', 'throttle it back', 'in the beginning']"
456,">>> {x, y, z}"
457,"{'in the beginning', 'throttle it back', 'Wild things'}"
458,>>> 
459,
460,">>> if ""Wild"" in str([x, y, z]): print (True)"
461,... 
462,True
463,">>> if ""Wild"" in str({x, y, z}): print (True)"
464,... 
465,True
466,@codeforester
467,">>> x=['Wild things', 'throttle it back', 'in the beginning']"
468,">>> if ""rot"" in str(x): print(True)"
469,... 
470,True
471,rot
472,"d = {0:'c', 1:'d', 2:'e', 3: 'f'}"
473,"x, y, z = (0, 1, 3)"
474,"print [v for (k,v) in d.items() if x==k or y==k or z==k]"
475,"L ={x, y, z}"
476,"T= ((0,""c""),(1,""d""),(2,""e""),(3,""f""),)"
477,List2=[]
478,for t in T :
479,if t[0] in L :
480,    List2.append(t[1])
481,    break;
482,"mydict = {0:""c"", 1:""d"", 2:""e"", 3:""f""}"
483,mylist= []
484,
485,"num_var = int(raw_input(""How many variables? "")) #Enter 3 when asked for input."
486,
487,for i in range(num_var): 
488,"    ''' Enter 0 as first input, 1 as second input and 3 as third input.'''"
489,"    globals()['var'+str('i').zfill(3)] = int(raw_input(""Enter an integer between 0 and 3 ""))"
490,    mylist += mydict[globals()['var'+str('i').zfill(3)]]
491,
492,print mylist
493,">>> ['c', 'd', 'f']"
494,"mylist = [{0: 'c', 1: 'd', 2: 'e', 3: 'f'}[i] for i in [0, 1, 2, 3] if i in (x, y, z)]"
495,"mylist = ['cdef'[i] for i in range(4) if i in (x, y, z)]"
496,x=0 or y=0 or z=0   is equivalent to x*y*z = 0
497,
498,x=1 or y=1 or z=1   is equivalent to (x-1)*(y-1)*(z-1)=0
499,
500,x=2 or y=2 or z=2   is equivalent to (x-2)*(y-2)*(z-2)=0
501,'c':1 'd':0xb10 'e':0xb100 'f':0xb1000
502,if xyz=0 then isc=1 else isc=0
503,(xyz=0 and isc=1) or (((xyz=0 and isc=1) or (isc=0)) and (isc=0))
504,((x-1)(y-1)(z-1)=0 and isc=2) or (((xyz=0 and isd=2) or (isc=0)) and (isc=0))
505,and
506,or
507,array[sum]
508,x = 0
509,y = 1
510,z = 3
511,mylist = []
512,
513,"if any(v == 0 for v in (x, y, z)):"
514,"    mylist.append(""c"")"
515,"if any(v == 1 for v in (x, y, z)):"
516,"    mylist.append(""d"")"
517,"if any(v == 2 for v in (x, y, z)):"
518,"    mylist.append(""e"")"
519,"if any(v == 3 for v in (x, y, z)):"
520,"    mylist.append(""f"")"
521,"if any(v >= 42 for v in (x, y, z)):"
522,"2 in {x,y,z}"
523,"2 in (x,y,z)"
524,"any(_v == 2 for _v in (x,y,z))"
525,"for value in [var1,var2,var3]:"
526,"     li.append(""targetValue"")"
527,"if 1 in {a,b,c}:"
528,"if a in {1, 2, 3}:"
529,"input_values = (0, 1, 3)"
530,origo = ord('c')
531,[chr(val + origo) for val in inputs]
532,"['c', 'd', 'f']"
533,sorted([chr(val + origo) for val in inputs])
534,x = 0
535,y = 1
536,z = 3
537,list=[]
538,"dict = {0: 'c', 1: 'd', 2: 'e', 3: 'f'}"
539,if x in dict:
540,    list.append(dict[x])
541,else:
542,    pass
543,
544,if y in dict:
545,    list.append(dict[y])
546,else:
547,    pass
548,if z in dict:
549,    list.append(dict[z])
550,else:
551,    pass
552,
553,print list
554,"x, y, z = 0, 1, 3    "
555,offset = ord('c')
556,"[chr(i + offset) for i in (x,y,z)]"
557,"['c', 'd', 'f']"
558,def test_fun(val):
559,    x = 0
560,    y = 1
561,    z = 2
562,    myList = []
563,"    if val in (x, y, z) and val == 0:"
564,"        myList.append(""C"")"
565,"    if val in (x, y, z) and val == 1:"
566,"        myList.append(""D"")"
567,"    if val in (x, y, z) and val == 2:"
568,"        myList.append(""E"")"
569,
570,test_fun(2);
571,x = 0
572,y = 1
573,z = 3
574,"In [1]: xyz = (0,1,3,) "
575,In [2]: mylist = []
576,In [3]: if 0 in xyz: 
577,"    ...:     mylist.append(""c"") "
578,    ...: if 1 in xyz: 
579,"    ...:     mylist.append(""d"") "
580,    ...: if 2 in xyz: 
581,"    ...:     mylist.append(""e"") "
582,    ...: if 3 in xyz:  
583,"    ...:     mylist.append(""f"") "
584,In [21]: mylist                                                                                
585,"Out[21]: ['c', 'd', 'f']"
586,"    def compareVariables(x,y,z):"
587,        mylist = []
588,        if x==0 or y==0 or z==0:
589,            mylist.append('c')
590,        if  x==1 or y==1 or z==1:
591,            mylist.append('d')
592,        if  x==2 or y==2 or z==2:
593,            mylist.append('e')
594,        if  x==3 or y==3 or z==3:
595,            mylist.append('f')
596,        else:
597,"            print(""wrong input value!"")"
598,"        print('first:',mylist)"
599,
600,"        compareVariables(1, 3, 2)"
601,"    def compareVariables(x,y,z):"
602,        mylist = []
603,"        if 0 in (x,y,z):"
604,             mylist.append('c')
605,"        if 1 in (x,y,z):"
606,             mylist.append('d')
607,"        if 2 in (x,y,z):"
608,             mylist.append('e')
609,"        if 3 in (x,y,z):"
610,             mylist.append('f')
611,        else:
612,"             print(""wrong input value!"")"
613,"        print('second:',mylist)"
614,
615,"        compareVariables(1, 3, 2)"
616,or
617,"if 0 in (x, y, z):"
618,    ...
619,"values = {x, y, z}"
620,
621,if 0 in values:
622,"    mylist.append(""c"")"
623,
624,if 1 in values:
625,"    mylist.append(""d"")"
626,"mappings = {0: ""c"", 1: ""d"", ...}"
627,for k in mappings:
628,    if k in values:
629,        mylist.append(mappings[k])
630,mylist
631,"mappings = {0: ""c"", 1: ""d"", ...}"
632,"for v in (x, y, z):"
633,    if v in mappings:
634,        mylist.append(mappings[v])
635,">>> 2 in {1, 2, 3}"
636,True
637,">>> 5 in {1, 2, 3}"
638,False
639,">>> 0 in {True, False}"
640,True
641,>>> (0 is True) or (0 is False)
642,False
643,">>> any([0 is True, 0 is False])"
644,False
645,">>> any(0 is item for item in (True, False))"
646,False
647,x = 0
648,y = 1
649,z = 3
650,mylist = []
651,
652,"if any(i in [0] for i in[x,y,z]):"
653,"    mylist.append(""c"")"
654,"if any(i in [1] for i in[x,y,z]):"
655,"    mylist.append(""d"")"
656,"if any(i in [2] for i in[x,y,z]):"
657,"    mylist.append(""e"")"
658,"if any(i in [3] for i in[x,y,z]):"
659,"    mylist.append(""f"")"
660,i in [0]
661,i == 0
662,"x,y,z = 0,1,3"
663,"values = {0:""c"",1:""d"",2:""e"",3:""f""} # => as if usage"
664,"my_list = [values[i] for i in (x,y,z)]"
665,
666,print(my_list)
667,OR
668,if x == 0 or y == 0 or z == 0:
669,x
670,y
671,"z == 0   // or 1, 2, 3 depending on the if statement"
672,if x
673,if y
674,True
675,True
676,x
677,y
678,y = 1
679,OR
680,True
681,OR
682,OR
683,OR
684,if x == 0
685,if y == 0
686,if z == 0
687,OR
688,if x == 0 or y == 0 or z == 0
689,"def func(x, y, z):"
690,
691,    result = []
692,
693,"    for integer, letter in zip([0, 1, 2, 3], ['c', 'd', 'e', 'f']):"
694,        if x == integer or y == integer or z == integer:
695,            result.append(letter)
696,            
697,    return result
698,        
699,"def func(x, y, z):"
700,
701,    return [ 
702,                letter 
703,"                for integer, letter in zip([0, 1, 2, 3], ['c', 'd', 'e', 'f'])"
704,                if x == integer or y == integer or z == integer
705,           ]
706,    
707,    
708,#selection
709,": a=np.array([0,1,3])                                                                                                                                                 "
710,
711,#options
712,": np.diag(['c','d','e','f']) "
713,"array([['c', '', '', ''],"
714,"       ['', 'd', '', ''],"
715,"       ['', '', 'e', ''],"
716,"       ['', '', '', 'f']], dtype='<U1')"
717,"#list of options[sel,sel]"
718,": np.diag(['c','d','e','f'])[a,a]                                                                                                                                     "
719,
720," array(['c', 'd', 'f'], dtype='<U1')"
721,"#note: Python 2.7 users should use `raw_input`, the equivalent of 3.X's `input`"
722,"age = int(input(""Please enter your age: ""))"
723,if age >= 18: 
724,"    print(""You are able to vote in the United States!"")"
725,else:
726,"    print(""You are not able to vote in the United States."")"
727,Please enter your age: 23
728,You are able to vote in the United States!
729,Please enter your age: dickety six
730,Traceback (most recent call last):
731,"  File ""canyouvote.py"", line 1, in <module>"
732,"    age = int(input(""Please enter your age: ""))"
733,ValueError: invalid literal for int() with base 10: 'dickety six'
734,Please enter your age: dickety six
735,"Sorry, I didn't understand that."
736,Please enter your age: 26
737,You are able to vote in the United States!
738,-1
739,input
740,continue
741,break
742,try
743,except
744,while True:
745,    try:
746,"        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input"
747,"        age = int(input(""Please enter your age: ""))"
748,    except ValueError:
749,"        print(""Sorry, I didn't understand that."")"
750,        #better try again... Return to the start of the loop
751,        continue
752,    else:
753,        #age was successfully parsed!
754,        #we're ready to exit the loop.
755,        break
756,if age >= 18: 
757,"    print(""You are able to vote in the United States!"")"
758,else:
759,"    print(""You are not able to vote in the United States."")"
760,while True:
761,"    data = input(""Please enter a loud message (must be all caps): "")"
762,    if not data.isupper():
763,"        print(""Sorry, your response was not loud enough."")"
764,        continue
765,    else:
766,        #we're happy with the value given.
767,        #we're ready to exit the loop.
768,        break
769,
770,while True:
771,"    data = input(""Pick an answer from A to D:"")"
772,"    if data.lower() not in ('a', 'b', 'c', 'd'):"
773,"        print(""Not an appropriate choice."")"
774,    else:
775,        break
776,while True:
777,    try:
778,"        age = int(input(""Please enter your age: ""))"
779,    except ValueError:
780,"        print(""Sorry, I didn't understand that."")"
781,        continue
782,
783,    if age < 0:
784,"        print(""Sorry, your response must not be negative."")"
785,        continue
786,    else:
787,"        #age was successfully parsed, and we're happy with its value."
788,        #we're ready to exit the loop.
789,        break
790,if age >= 18: 
791,"    print(""You are able to vote in the United States!"")"
792,else:
793,"    print(""You are not able to vote in the United States."")"
794,def get_non_negative_int(prompt):
795,    while True:
796,        try:
797,            value = int(input(prompt))
798,        except ValueError:
799,"            print(""Sorry, I didn't understand that."")"
800,            continue
801,
802,        if value < 0:
803,"            print(""Sorry, your response must not be negative."")"
804,            continue
805,        else:
806,            break
807,    return value
808,
809,"age = get_non_negative_int(""Please enter your age: "")"
810,"kids = get_non_negative_int(""Please enter the number of children you have: "")"
811,"salary = get_non_negative_int(""Please enter your yearly earnings, in dollars: "")"
812,"def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):"
813,    if min_ is not None and max_ is not None and max_ < min_:
814,"        raise ValueError(""min_ must be less than or equal to max_."")"
815,    while True:
816,        ui = input(prompt)
817,        if type_ is not None:
818,            try:
819,                ui = type_(ui)
820,            except ValueError:
821,"                print(""Input type must be {0}."".format(type_.__name__))"
822,                continue
823,        if max_ is not None and ui > max_:
824,"            print(""Input must be less than or equal to {0}."".format(max_))"
825,        elif min_ is not None and ui < min_:
826,"            print(""Input must be greater than or equal to {0}."".format(min_))"
827,        elif range_ is not None and ui not in range_:
828,"            if isinstance(range_, range):"
829,"                template = ""Input must be between {0.start} and {0.stop}."""
830,                print(template.format(range_))
831,            else:
832,"                template = ""Input must be {0}."""
833,                if len(range_) == 1:
834,                    print(template.format(*range_))
835,                else:
836,"                    expected = "" or "".join(("
837,"                        "", "".join(str(x) for x in range_[:-1]),"
838,                        str(range_[-1])
839,                    ))
840,                    print(template.format(expected))
841,        else:
842,            return ui
843,"age = sanitised_input(""Enter your age: "", int, 1, 101)"
844,"answer = sanitised_input(""Enter your answer: "", str.lower, range_=('a', 'b', 'c', 'd'))"
845,input
846,"data = input(""Please enter a loud message (must be all caps): "")"
847,while not data.isupper():
848,"    print(""Sorry, your response was not loud enough."")"
849,"    data = input(""Please enter a loud message (must be all caps): "")"
850,while True
851,input
852,raw_input
853,input
854,SyntaxError
855,get_non_negative_int
856,def get_non_negative_int(prompt):
857,    try:
858,        value = int(input(prompt))
859,    except ValueError:
860,"        print(""Sorry, I didn't understand that."")"
861,        return get_non_negative_int(prompt)
862,
863,    if value < 0:
864,"        print(""Sorry, your response must not be negative."")"
865,        return get_non_negative_int(prompt)
866,    else:
867,        return value
868,RuntimeError: maximum recursion depth exceeded
869,input
870,while True
871,age = None
872,while age is None:
873,"    input_value = input(""Please enter your age: "")"
874,    try:
875,        # try and convert the string input to a number
876,        age = int(input_value)
877,    except ValueError:
878,        # tell the user off
879,"        print(""{input} is not a number, please enter a number only"".format(input=input_value))"
880,if age >= 18:
881,"    print(""You are able to vote in the United States!"")"
882,else:
883,"    print(""You are not able to vote in the United States."")"
884,Please enter your age: *potato*
885,"potato is not a number, please enter a number only"
886,Please enter your age: *5*
887,You are not able to vote in the United States.
888,while True
889,"f=lambda age: (age.isdigit() and ((int(age)>=18  and ""Can vote"" ) or ""Cannot vote"")) or \"
890,"f(input(""invalid input. Try again\nPlease enter your age: ""))"
891,"print(f(input(""Please enter your age: "")))"
892,def
893,def f(age):
894,f = lambda age:
895,"from itertools import chain, repeat"
896,
897,"prompts = chain([""Enter a number: ""], repeat(""Not a number! Try again: ""))"
898,"replies = map(input, prompts)"
899,"valid_response = next(filter(str.isdigit, replies))"
900,print(valid_response)
901,Enter a number:  a
902,Not a number! Try again:  b
903,Not a number! Try again:  1
904,1
905,"prompt_msg = ""Enter a number: """
906,"bad_input_msg = ""Sorry, I didn't understand that."""
907,"prompts = chain([prompt_msg], repeat('\n'.join([bad_input_msg, prompt_msg])))"
908,"replies = map(input, prompts)"
909,"valid_response = next(filter(str.isdigit, replies))"
910,print(valid_response)
911,Enter a number:  a
912,"Sorry, I didn't understand that."
913,Enter a number:  b
914,"Sorry, I didn't understand that."
915,Enter a number:  1
916,1
917,"prompts = chain([""Enter a number: ""], repeat(""Not a number! Try again: ""))"
918,itertools.chain
919,itertools.repeat
920,"""Enter a number: """
921,"""Not a number! Try again: """
922,for prompt in prompts:
923,    print(prompt)
924,Enter a number: 
925,Not a number! Try again: 
926,Not a number! Try again: 
927,Not a number! Try again: 
928,# ... and so on
929,"replies = map(input, prompts)"
930,map
931,prompts
932,input
933,for reply in replies:
934,    print(reply)
935,Enter a number:  a
936,a
937,Not a number! Try again:  1
938,1
939,Not a number! Try again:  it doesn't care now
940,it doesn't care now
941,# and so on...
942,filter
943,str.isdigit
944,"only_digits = filter(str.isdigit, replies)"
945,for reply in only_digits:
946,    print(reply)
947,Enter a number:  a
948,Not a number! Try again:  1
949,1
950,Not a number! Try again:  2
951,2
952,Not a number! Try again:  b
953,Not a number! Try again: # and so on...
954,next
955,str.isalpha
956,str.isupper
957,__contains__
958,"from itertools import chain, repeat"
959,
960,"fruits = {'apple', 'orange', 'peach'}"
961,"prompts = chain([""Enter a fruit: ""], repeat(""I don't know this one! Try again: ""))"
962,"replies = map(input, prompts)"
963,"valid_response = next(filter(fruits.__contains__, replies))"
964,print(valid_response)
965,Enter a fruit:  1
966,I don't know this one! Try again:  foo
967,I don't know this one! Try again:  apple
968,apple
969,__lt__
970,<
971,"from itertools import chain, repeat"
972,
973,"prompts = chain([""Enter a positive number:""], repeat(""I need a positive number! Try again:""))"
974,"replies = map(input, prompts)"
975,"numeric_strings = filter(str.isnumeric, replies)"
976,"numbers = map(float, numeric_strings)"
977,is_positive = (0.).__lt__
978,"valid_response = next(filter(is_positive, numbers))"
979,print(valid_response)
980,Enter a positive number: a
981,I need a positive number! Try again: -5
982,I need a positive number! Try again: 0
983,I need a positive number! Try again: 5
984,5.0
985,operator
986,pathlib
987,Path.exists
988,"from itertools import chain, repeat"
989,from pathlib import Path
990,
991,"prompts = chain([""Enter a path: ""], repeat(""This path doesn't exist! Try again: ""))"
992,"replies = map(input, prompts)"
993,"paths = map(Path, replies)"
994,"valid_response = next(filter(Path.exists, paths))"
995,print(valid_response)
996,Enter a path:  a b c
997,This path doesn't exist! Try again:  1
998,This path doesn't exist! Try again:  existing_file.txt
999,existing_file.txt
1000,itertools.repeat
1001,next
1002,"from itertools import chain, repeat"
1003,
1004,"prompts = chain([""Enter a number:""], repeat(""Not a number! Try again:"", 2))"
1005,"replies = map(input, prompts)"
1006,"valid_response = next(filter(str.isdigit, replies), None)"
1007,"print(""You've failed miserably!"" if valid_response is None else 'Well done!')"
1008,Enter a number: a
1009,Not a number! Try again: b
1010,Not a number! Try again: c
1011,You've failed miserably!
1012,str.lower
1013,str.strip
1014,"from itertools import chain, repeat"
1015,
1016,"fruits = {'apple', 'orange', 'peach'}"
1017,"prompts = chain([""Enter a fruit: ""], repeat(""I don't know this one! Try again: ""))"
1018,"replies = map(input, prompts)"
1019,"lowercased_replies = map(str.lower, replies)"
1020,"stripped_replies = map(str.strip, lowercased_replies)"
1021,"valid_response = next(filter(fruits.__contains__, stripped_replies))"
1022,print(valid_response)
1023,Enter a fruit:  duck
1024,I don't know this one! Try again:     Orange
1025,orange
1026,"from itertools import chain, repeat"
1027,
1028,from lz.functional import compose
1029,
1030,"fruits = {'apple', 'orange', 'peach'}"
1031,"prompts = chain([""Enter a fruit: ""], repeat(""I don't know this one! Try again: ""))"
1032,"replies = map(input, prompts)"
1033,"process = compose(str.strip, str.lower)  # you can add more functions here"
1034,"processed_replies = map(process, replies)"
1035,"valid_response = next(filter(fruits.__contains__, processed_replies))"
1036,print(valid_response)
1037,Enter a fruit:  potato
1038,I don't know this one! Try again:   PEACH
1039,peach
1040,filter
1041,"from itertools import chain, repeat"
1042,
1043,"prompt_msg = ""Enter your age (1-120): """
1044,"bad_input_msg = ""Wrong input."""
1045,"prompts = chain([prompt_msg], repeat('\n'.join([bad_input_msg, prompt_msg])))"
1046,"replies = map(input, prompts)"
1047,"numeric_replies = filter(str.isdigit, replies)"
1048,"ages = map(int, numeric_replies)"
1049,"positive_ages = filter((0).__lt__, ages)"
1050,"not_too_big_ages = filter((120).__ge__, positive_ages)"
1051,valid_response = next(not_too_big_ages)
1052,print(valid_response)
1053,from functools import partial
1054,"from itertools import chain, repeat"
1055,
1056,from lz.logical import conjoin
1057,
1058,
1059,def is_one_letter(string: str) -> bool:
1060,    return len(string) == 1
1061,
1062,
1063,"rules = [str.isalpha, str.isupper, is_one_letter, 'C'.__le__, 'P'.__ge__]"
1064,
1065,"prompt_msg = ""Enter a letter (C-P): """
1066,"bad_input_msg = ""Wrong input."""
1067,"prompts = chain([prompt_msg], repeat('\n'.join([bad_input_msg, prompt_msg])))"
1068,"replies = map(input, prompts)"
1069,"valid_response = next(filter(conjoin(*rules), replies))"
1070,print(valid_response)
1071,Enter a letter (C-P):  5
1072,Wrong input.
1073,Enter a letter (C-P):  f
1074,Wrong input.
1075,Enter a letter (C-P):  CDE
1076,Wrong input.
1077,Enter a letter (C-P):  Q
1078,Wrong input.
1079,Enter a letter (C-P):  N
1080,N
1081,import click
1082,
1083,"number = click.prompt('Please enter a number', type=float)"
1084,print(number)
1085,Please enter a number: 
1086, a
1087,Error: a is not a valid floating point value
1088,Please enter a number: 
1089, 10
1090,10.0
1091,IntRange
1092,"age = click.prompt(""What's your age?"", type=click.IntRange(1, 120))"
1093,print(age)
1094,What's your age?: 
1095, a
1096,Error: a is not a valid integer
1097,What's your age?: 
1098, 0
1099,Error: 0 is not in the valid range of 1 to 120.
1100,What's your age?: 
1101, 5
1102,5
1103,min
1104,max
1105,"age = click.prompt(""What's your age?"", type=click.IntRange(min=14))"
1106,print(age)
1107,What's your age?: 
1108, 0
1109,Error: 0 is smaller than the minimum valid value 14.
1110,What's your age?: 
1111, 18
1112,18
1113,click.Choice
1114,"choices = {'apple', 'orange', 'peach'}"
1115,"choice = click.prompt('Provide a fruit', type=click.Choice(choices, case_sensitive=False))"
1116,print(choice)
1117,"Provide a fruit (apple, peach, orange): "
1118, banana
1119,"Error: invalid choice: banana. (choose from apple, peach, orange)"
1120,"Provide a fruit (apple, peach, orange): "
1121, OrAnGe
1122,orange
1123,click.Path
1124,"path = click.prompt('Provide path', type=click.Path(exists=True, resolve_path=True))"
1125,print(path)
1126,Provide path: 
1127, nonexistent
1128,"Error: Path ""nonexistent"" does not exist."
1129,Provide path: 
1130, existing_folder
1131,'/path/to/existing_folder
1132,click.File
1133,"file = click.prompt('In which file to write data?', type=click.File('w'))"
1134,with file.open():
1135,    file.write('Hello!')
1136,# More info about `lazy=True` at:
1137,# https://click.palletsprojects.com/en/7.x/arguments/#file-opening-safety
1138,"file = click.prompt('Which file you wanna read?', type=click.File(lazy=True))"
1139,with file.open():
1140,    print(file.read())
1141,In which file to write data?: 
1142,"         # <-- provided an empty string, which is an illegal name for a file"
1143,In which file to write data?: 
1144, some_file.txt
1145,Which file you wanna read?: 
1146, nonexistent.txt
1147,Error: Could not open file: nonexistent.txt: No such file or directory
1148,Which file you wanna read?: 
1149, some_file.txt
1150,Hello!
1151,"password = click.prompt('Enter password', hide_input=True, confirmation_prompt=True)"
1152,print(password)
1153,Enter password: 
1154, ······
1155,Repeat for confirmation: 
1156, ·
1157,Error: the two entered values do not match
1158,Enter password: 
1159, ······
1160,Repeat for confirmation: 
1161, ······
1162,qwerty
1163,"number = click.prompt('Please enter a number', type=int, default=42)"
1164,print(number)
1165,Please enter a number [42]: 
1166, a
1167,Error: a is not a valid integer
1168,Please enter a number [42]: 
1169, 
1170,42
1171,get_input
1172,validator
1173,get_input
1174,def get_input(
1175,"    prompt=""Enter a value: "","
1176,"    validator=lambda x: True,"
1177,"    error_message=""Invalid input. Please try again."","
1178,):
1179,    while not validator(value := input(prompt)):
1180,        print(error_message)
1181,    return value
1182,
1183,def is_positive_int(value):
1184,    try:
1185,        return int(value) >= 0
1186,    except ValueError:
1187,        return False
1188,
1189,"if __name__ == ""__main__"":"
1190,"    val = get_input(""Give a positive number: "", is_positive_int)"
1191,"    print(f""OK, thanks for {val}"")"
1192,Give a positive number: -5
1193,Invalid input. Please try again.
1194,Give a positive number: asdf
1195,Invalid input. Please try again.
1196,Give a positive number:
1197,Invalid input. Please try again.
1198,Give a positive number: 42
1199,"OK, thanks for 42"
1200,get_input
1201,def get_input(
1202,"    prompt=""Enter a value: "","
1203,"    validator=lambda x: True,"
1204,"    error_message=""Invalid input. Please try again."","
1205,):
1206,    while True:
1207,        value = input(prompt)
1208,        if validator(value):
1209,            return value
1210,        print(error_message)
1211,KeyboardInterrupt
1212,read_single_keypress()
1213,def read_single_keypress() -> str:
1214,"    """"""Waits for a single keypress on stdin."
1215,    -- from :: https://stackoverflow.com/a/6599441/4532996
1216,"    """""""
1217,
1218,"    import termios, fcntl, sys, os"
1219,    fd = sys.stdin.fileno()
1220,    # save old state
1221,"    flags_save = fcntl.fcntl(fd, fcntl.F_GETFL)"
1222,    attrs_save = termios.tcgetattr(fd)
1223,    # make raw - the way to do this comes from the termios(3) man page.
1224,    attrs = list(attrs_save) # copy the stored version to update
1225,    # iflag
1226,    attrs[0] &= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK
1227,                  | termios.ISTRIP | termios.INLCR | termios. IGNCR
1228,                  | termios.ICRNL | termios.IXON )
1229,    # oflag
1230,    attrs[1] &= ~termios.OPOST
1231,    # cflag
1232,    attrs[2] &= ~(termios.CSIZE | termios. PARENB)
1233,    attrs[2] |= termios.CS8
1234,    # lflag
1235,    attrs[3] &= ~(termios.ECHONL | termios.ECHO | termios.ICANON
1236,                  | termios.ISIG | termios.IEXTEN)
1237,"    termios.tcsetattr(fd, termios.TCSANOW, attrs)"
1238,    # turn off non-blocking
1239,"    fcntl.fcntl(fd, fcntl.F_SETFL, flags_save & ~os.O_NONBLOCK)"
1240,    # read a single keystroke
1241,    try:
1242,        ret = sys.stdin.read(1) # returns a single character
1243,    except KeyboardInterrupt:
1244,        ret = 0
1245,    finally:
1246,        # restore old state
1247,"        termios.tcsetattr(fd, termios.TCSAFLUSH, attrs_save)"
1248,"        fcntl.fcntl(fd, fcntl.F_SETFL, flags_save)"
1249,    return ret
1250,
1251,def until_not_multi(chars) -> str:
1252,"    """"""read stdin until !(chars)"""""""
1253,    import sys
1254,    chars = list(chars)
1255,"    y = """""
1256,    sys.stdout.flush()
1257,    while True:
1258,        i = read_single_keypress()
1259,        _ = sys.stdout.write(i)
1260,        sys.stdout.flush()
1261,        if i not in chars:
1262,            break
1263,        y += i
1264,    return y
1265,
1266,def _can_you_vote() -> str:
1267,"    """"""a practical example:"
1268,"    test if a user can vote based purely on keypresses"""""""
1269,"    print(""can you vote? age : "", end="""")"
1270,"    x = int(""0"" + until_not_multi(""0123456789""))"
1271,    if not x:
1272,"        print(""\nsorry, age can only consist of digits."")"
1273,        return
1274,"    print(""your age is"", x, ""\nYou can vote!"" if x >= 18 else ""Sorry! you can't vote"")"
1275,
1276,_can_you_vote()
1277,$ ./input_constrain.py
1278,can you vote? age : a
1279,"sorry, age can only consist of digits."
1280,$ ./input_constrain.py 
1281,can you vote? age : 23<RETURN>
1282,your age is 23
1283,You can vote!
1284,$ _
1285,a
1286,thismany()
1287,while True:
1288,    try:
1289,"        age = int(input(""Please enter your age: ""))"
1290,        if age >= 18:
1291,"            print(""You are able to vote in the United States!"")"
1292,        else:
1293,"            print(""You are not able to vote in the United States."")"
1294,    except Exception as e:
1295,"        print(""please enter number"")"
1296,break
1297,"print(""please enter number"")"
1298,# Assuming Python3
1299,import sys
1300,
1301,class ValidationError(ValueError):  # thanks Patrick Artner
1302,    pass
1303,
1304,"def validate_input(prompt, cast=str, cond=(lambda x: True), onerror=None):"
1305,    if onerror==None: onerror = {}
1306,    while True:
1307,        try:
1308,            data = cast(input(prompt))
1309,            if not cond(data): raise ValidationError
1310,            return data
1311,        except tuple(onerror.keys()) as e:  # thanks Daniel Q
1312,"            print(onerror[type(e)], file=sys.stderr)"
1313,if
1314,raise
1315,assert
1316,"# No validation, equivalent to simple input:"
1317,"anystr = validate_input(""Enter any string: "")"
1318,
1319,# Get a string containing only letters:
1320,"letters = validate_input(""Enter letters: "","
1321,"    cond=str.isalpha,"
1322,"    onerror={ValidationError: ""Only letters, please!""})"
1323,
1324,"# Get a float in [0, 100]:"
1325,"percentage = validate_input(""Percentage? "","
1326,"    cast=float, cond=lambda x: 0.0<=x<=100.0,"
1327,"    onerror={ValidationError: ""Must be between 0 and 100!"","
1328,"             ValueError: ""Not a number!""})"
1329,"age = validate_input(""Please enter your age: "","
1330,"        cast=int, cond=lambda a:0<=a<150,"
1331,"        onerror={ValidationError: ""Enter a plausible age, please!"","
1332,"                 ValueError: ""Enter an integer, please!""})"
1333,if age >= 18: 
1334,"    print(""You are able to vote in the United States!"")"
1335,else:
1336,"    print(""You are not able to vote in the United States."")"
1337,def validate_age(age):
1338,    if age >=0 :
1339,        return True
1340,    return False
1341,
1342,while True:
1343,    try:
1344,"        age = int(raw_input(""Please enter your age:""))"
1345,        if validate_age(age): break
1346,    except ValueError:
1347,"        print ""Error: Invalid age."""
1348,def takeInput(required):
1349,  print 'ooo or OOO to exit'
1350,  ans = raw_input('Enter: ')
1351,
1352,  if not ans:
1353,"      print ""You entered nothing...!"""
1354,      return takeInput(required) 
1355,
1356,      ##  FOR Exit  ## 
1357,"  elif ans in ['ooo', 'OOO']:"
1358,"    print ""Closing instance."""
1359,    exit()
1360,
1361,  else:
1362,    if ans.isdigit():
1363,      current = 'int'
1364,"    elif set('[~!@#$%^&*()_+{}"":/\']+$').intersection(ans):"
1365,      current = 'other'
1366,"    elif isinstance(ans,basestring):"
1367,      current = 'str'        
1368,    else:
1369,      current = 'none'
1370,
1371,  if required == current :
1372,    return ans
1373,  else:
1374,    return takeInput(required)
1375,
1376,## pass the value in which type you want [str/int/special character(as other )]
1377,"print ""input: "", takeInput('str')"
1378,age
1379,age
1380,age
1381,float
1382,int
1383,age>=18
1384,age>=18
1385,0<age<18
1386,0<age<18
1387,age<=0
1388,age
1389,float
1390,int
1391,from ast import literal_eval
1392,
1393,''' This function is used to identify the data type of input data.'''
1394,def input_type(input_data):
1395,    try:
1396,        return type(literal_eval(input_data))
1397,"    except (ValueError, SyntaxError):"
1398,        return str
1399,
1400,flag = True
1401,
1402,while(flag):
1403,"    age = raw_input(""Please enter your age: "")"
1404,
1405,    if input_type(age)==float or input_type(age)==int:
1406,        if eval(age)>=18: 
1407,"            print(""You are able to vote in the United States!"") "
1408,            flag = False 
1409,        elif eval(age)>0 and eval(age)<18: 
1410,"            print(""You are not able to vote in the United States."") "
1411,            flag = False
1412,"        else: print(""Please enter a valid number as your age."")"
1413,
1414,"    else: print(""Sorry, I didn't understand that."") "
1415,"# If your input value is only a number then use ""Value.isdigit() == False""."
1416,"# If you need an input that is a text, you should remove ""Value.isdigit() == False""."
1417,def Input(Message):
1418,    Value = None
1419,    while Value == None or Value.isdigit() == False:
1420,        try:        
1421,            Value = str(input(Message)).strip()
1422,        except Exception:
1423,            Value = None
1424,    return Value
1425,
1426,# Example:
1427,age = 0
1428,"# If we suppose that our age is between 1 and 150 then input value accepted,"
1429,# else it's a wrong value.
1430,while age <=0 or age >150:
1431,"    age = int(Input(""Please enter your age: ""))"
1432,"    # For terminating program, the user can use 0 key and enter it as an a value."
1433,    if age == 0:
1434,"        print(""Terminating ..."")"
1435,        exit(0)
1436,        
1437,if age >= 18 and age <=150: 
1438,"    print(""You are able to vote in the United States!"")"
1439,else:
1440,"    print(""You are not able to vote in the United States."")"
1441,if
1442,for
1443,while True:
1444,"     age = int(input(""Please enter your age: ""))"
1445,     if (age >= 18)  : 
1446,"         print(""You are able to vote in the United States!"")"
1447,     if (age < 18) & (age > 0):
1448,"         print(""You are not able to vote in the United States."")"
1449,     else:
1450,"         print(""Wrong characters, the input must be numeric"")"
1451,         continue
1452,try
1453,except
1454,str.isdigit()
1455,while True:
1456,"    age = input(""Please enter your age: "")"
1457,    if age.isdigit():
1458,        age = int(age)
1459,        break
1460,    else:
1461,"        print(""Invalid number '{age}'. Try again."".format(age=age))"
1462,
1463,if age >= 18: 
1464,"    print(""You are able to vote in the United States!"")"
1465,else:
1466,"    print(""You are not able to vote in the United States."")"
1467,def getValidInt(iMaxAttemps = None):
1468,  iCount = 0
1469,  while True:
1470,    # exit when maximum attempt limit has expired
1471,    if iCount != None and iCount > iMaxAttemps:
1472,       return 0     # return as default value
1473,
1474,"    i = raw_input(""Enter no"")"
1475,    try:
1476,       i = int(i)
1477,    except ValueError as e:
1478,"       print ""Enter valid int value"""
1479,    else:
1480,       break
1481,
1482,    return i
1483,
1484,age = getValidInt()
1485,# do whatever you want to do.
1486,while True:
1487,
1488,    var = True
1489,
1490,    try:
1491,"        age = int(input(""Please enter your age: ""))"
1492,
1493,    except ValueError:
1494,"        print(""Invalid input."")"
1495,        var = False
1496,
1497,    if var == True:
1498,        if age >= 18:
1499,"                print(""You are able to vote in the United States."")"
1500,                break
1501,        else:
1502,"            print(""You are not able to vote in the United States."")"
1503,ValidationError
1504,class ValidationError(ValueError): 
1505,"    """"""Special validation error - its message is supposed to be printed"""""""
1506,    pass
1507,
1508,"def RangeValidator(text,num,r):"
1509,"    """"""Generic validator - raises 'text' as ValidationError if 'num' not in range 'r'."""""""
1510,    if num in r:
1511,        return num
1512,    raise ValidationError(text)
1513,
1514,def ValidCol(c): 
1515,"    """"""Specialized column validator providing text and range."""""""
1516,"    return RangeValidator(""Columns must be in the range of 0 to 3 (inclusive)"", "
1517,"                          c, range(4))"
1518,
1519,def ValidRow(r): 
1520,"    """"""Specialized row validator providing text and range."""""""
1521,"    return RangeValidator(""Rows must be in the range of 5 to 15(exclusive)"","
1522,"                          r, range(5,15))"
1523,"def GetInt(text, validator=None):"
1524,"    """"""Aks user for integer input until a valid integer is given. If provided, "
1525,    a 'validator' function takes the integer and either raises a 
1526,    ValidationError to be printed or returns the valid number. 
1527,"    Non integers display a simple error message."""""""
1528,    print()
1529,    while True:
1530,        n = input(text)
1531,        try:
1532,            n = int(n)
1533,
1534,            return n if validator is None else validator(n)
1535,
1536,        except ValueError as ve:
1537,            # prints ValidationErrors directly - else generic message:
1538,"            if isinstance(ve, ValidationError):"
1539,                print(ve)
1540,            else:
1541,"                print(""Invalid input: "", n)"
1542,
1543,
1544,"column = GetInt(""Pleased enter column: "", ValidCol)"
1545,"row = GetInt(""Pleased enter row: "", ValidRow)"
1546,"print( row, column)"
1547,Pleased enter column: 22
1548,Columns must be in the range of 0 to 3 (inclusive)
1549,Pleased enter column: -2
1550,Columns must be in the range of 0 to 3 (inclusive)
1551,Pleased enter column: 2
1552,Pleased enter row: a
1553,Invalid input:  a
1554,Pleased enter row: 72
1555,Rows must be in the range of 5 to 15(exclusive)
1556,Pleased enter row: 9  
1557,
1558,"9, 2"
1559,def askName():
1560,"    return input(""Write your name: "").strip() or askName()"
1561,
1562,name = askName()
1563,def askAge():
1564,"    try: return int(input(""Enter your age: ""))"
1565,    except ValueError: return askAge()
1566,
1567,age = askAge()
1568,def askAge():
1569,"    try: return int(input(""Enter your age: ""))"
1570,    except ValueError: return askAge()
1571,
1572,age = askAge()
1573,
1574,responseAge = [
1575,"    ""You are able to vote in the United States!"","
1576,"    ""You are not able to vote in the United States."","
1577,][int(age < 18)]
1578,
1579,print(responseAge)
1580,while True:
1581,    age = input('Please enter your age: ')
1582,    try:
1583,        age_int = int(age)
1584,        if age_int >= 18:
1585,            print('You can vote in the United States!')
1586,        else:
1587,            print('You cannot vote in the United States.')
1588,        break
1589,    except:
1590,        print('Please enter a meaningful answer.')
1591,        
1592,isdigit()
1593,def ask():
1594,"    answer = input(""Please enter amount to convert: "")"
1595,    if not answer.isdigit():
1596,"        print(""Invalid"")"
1597,        return ask()
1598,
1599,    return int(answer)
1600,
1601,Gdp = ask()
1602,while True:
1603,"    answer = input(""Please enter amount to convert: "")"
1604,    if not answer.isdigit():
1605,"        print(""Invalid"")"
1606,        continue
1607,
1608,    Gbp = int(answer)
1609,return
1610,return
1611,None
1612,while
1613,Gbp = int(answer)
1614,return int(answer)
1615,break
1616,"age=(lambda i,f: f(i,f))(input(""Please enter your age: ""),lambda i,f: i if i.isdigit() else f(input(""Please enter your age: ""),f))"
1617,"print(""You are able to vote in the united states"" if int(age)>=18 else ""You are not able to vote in the united states"",end='')"
1618,"age=(lambda i,n,f: f(i,n,f))(input(""Please enter your age: ""),1,lambda i,n,f: i if i.isdigit() else (None if n==3 else f(input(""Please enter your age: ""),n+1,f)))"
1619,"print(""You are able to vote in the united states"" if age and int(age)>=18 else ""You are not able to vote in the united states"",end='')"
1620,locals
1621,">>> dct = {'x': 1, 'y': 2, 'z': 3}"
1622,>>> dct
1623,"{'y': 2, 'x': 1, 'z': 3}"
1624,">>> dct[""y""]"
1625,2
1626,">>> x = ""spam"""
1627,">>> z = {x: ""eggs""}"
1628,">>> z[""spam""]"
1629,'eggs'
1630,var1 = 'foo'
1631,var2 = 'bar'
1632,var3 = 'baz'
1633,...
1634,"lst = ['foo', 'bar', 'baz']"
1635,"print(lst[1])           # prints bar, because indices start at 0"
1636,"lst.append('potatoes')  # lst is now ['foo', 'bar', 'baz', 'potatoes']"
1637,append
1638,getattr
1639,obj.spam = 'eggs'
1640,name = 'spam'
1641,"getattr(obj, name)  # returns 'eggs'"
1642,globals()
1643,>>> a = 10
1644,>>> globals()['a']
1645,10
1646,locals()
1647,getattr
1648,"x = ""foo"""
1649,"locals()[""x""] = ""bar"""
1650,print x
1651,bar
1652,locals()
1653,dict
1654,locals()
1655,dict
1656,dict
1657,locals()
1658,dict
1659,"my_calculator.button_0 = tkinter.Button(root, text=0)"
1660,"my_calculator.button_1 = tkinter.Button(root, text=1)"
1661,"my_calculator.button_2 = tkinter.Button(root, text=2)"
1662,...
1663,for i in range(10):
1664,"    my_calculator.('button_%d' % i) = tkinter.Button(root, text=i)"
1665,list
1666,my_calculator.buttons = []
1667,for i in range(10):
1668,"    my_calculator.buttons.append(tkinter.Button(root, text=i))"
1669,list
1670,"my_calculator.buttons = [tkinter.Button(root, text=i) for i in range(10)]"
1671,list
1672,my_calculator.buttons[0]
1673,my_calculator.buttons[1]
1674,list
1675,set
1676,keyword_1 = 'apple'
1677,keyword_2 = 'banana'
1678,
1679,if query == keyword_1 or query == keyword_2:
1680,    print('Match.')
1681,"keywords = {'apple', 'banana'}"
1682,if query in keywords:
1683,    print('Match.')
1684,list
1685,set
1686,dict
1687,"$foo = ""bar"""
1688,"$$foo = ""baz"""
1689,mydict = {}
1690,"foo = ""bar"""
1691,"mydict[foo] = ""baz"""
1692,globals()
1693,i_1
1694,i_2
1695,i_10
1696,for i in range(10):
1697,    globals()['i_{}'.format(i)] = 'a'
1698,>>> i_5
1699,'a'
1700,namedtuple
1701,# using dictionary
1702,variables = {}
1703,"variables[""first""] = 34"
1704,"variables[""second""] = 45"
1705,"print(variables[""first""], variables[""second""])"
1706,
1707,# using namedtuple
1708,"Variables = namedtuple('Variables', ['first', 'second'])"
1709,"vars = Variables(34, 45)"
1710,"print(vars.first, vars.second)"
1711,namedtuple
1712,SimpleNamespace
1713,setattr
1714,SimpleNamespace
1715,from types import SimpleNamespace
1716,
1717,"variables = {""b"":""B"",""c"":""C""}"
1718,a = SimpleNamespace(**variables)
1719,"setattr(a,""g"",""G"")"
1720,"a.g = ""G+"""
1721,something = a.a
1722,setattr()
1723,import sys
1724,"current_module = module = sys.modules[__name__]  # i.e the ""file"" where your code is written"
1725,"setattr(current_module, 'variable_name', 15)  # 15 is the value you assign to the var"
1726,"print(variable_name)  # >>> 15, created from a string"
1727,__dict__
1728,globals()
1729,globals()
1730,"def var_of_var(k, v):"
1731,    globals()[k] = v
1732,
1733,print variable_name # NameError: name 'variable_name' is not defined
1734,some_name = 'variable_name'
1735,globals()[some_name] = 123
1736,print(variable_name) # 123
1737,
1738,some_name = 'variable_name2'
1739,"var_of_var(some_name, 456)"
1740,print(variable_name2) # 456
1741,hasattr
1742,getattr
1743,setattr
1744,class Variables(object):
1745,    def __init__(self):
1746,"        self.foo = ""initial_variable"""
1747,"    def create_new_var(self,name,value):"
1748,"        setattr(self,name,value)"
1749,"    def get_var(self,name):"
1750,"        if hasattr(self,name):"
1751,"            return getattr(self,name)"
1752,        else:
1753,"            raise(""Class does not have a variable named: ""+name)"
1754,v = Variables()
1755,"v.get_var(""foo"")"
1756,"v.create_new_var(v.foo,""is actually not initial"")"
1757,v.initial_variable
1758,"# Python 3.8.2 (default, Feb 26 2020, 02:56:10)"
1759,""""""""
1760,<?php
1761,$a = 'hello';
1762,$e = 'wow'
1763,?>
1764,<?php
1765,$$a = 'world';
1766,?>
1767,<?php
1768,"echo ""$a ${$a}\n"";"
1769,"echo ""$a ${$a[1]}\n"";"
1770,?>
1771,<?php
1772,"echo ""$a $hello"";"
1773,?>
1774,""""""""
1775,
1776,a = 'hello'  #<?php $a = 'hello'; ?>
1777,e = 'wow'   #<?php $e = 'wow'; ?>
1778,vars()[a] = 'world' #<?php $$a = 'world'; ?>
1779,"print(a, vars()[a]) #<?php echo ""$a ${$a}\n""; ?>"
1780,"print(a, vars()[vars()['a'][1]]) #<?php echo ""$a ${$a[1]}\n""; ?>"
1781,"print(a, hello) #<?php echo ""$a $hello""; ?>"
1782,hello world
1783,hello wow
1784,hello world
1785,"# Python 3.8.2 (default, Feb 26 2020, 02:56:10)"
1786,
1787,#<?php $a = 'hello'; ?>
1788,#<?php $e = 'wow'; ?>
1789,#<?php $$a = 'world'; ?>
1790,"#<?php echo ""$a ${$a}\n""; ?>"
1791,"#<?php echo ""$a ${$a[1]}\n""; ?>"
1792,"#<?php echo ""$a $hello""; ?>"
1793,
1794,print('locals():\n')
1795,a = 'hello'
1796,e = 'wow'
1797,locals()[a] = 'world'
1798,"print(a, locals()[a])"
1799,"print(a, locals()[locals()['a'][1]])"
1800,"print(a, hello)"
1801,
1802,print('\n\nglobals():\n')
1803,a = 'hello'
1804,e = 'wow'
1805,globals()[a] = 'world'
1806,"print(a, globals()[a])"
1807,"print(a, globals()[globals()['a'][1]])"
1808,"print(a, hello)"
1809,locals():
1810,
1811,hello world
1812,hello wow
1813,hello world
1814,
1815,
1816,globals():
1817,
1818,hello world
1819,hello wow
1820,hello world
1821,"# Python 2.7.16 (default, Jul 13 2019, 16:01:51)"
1822,# [GCC 8.3.0] on linux2
1823,g = globals()
1824,listB = []
1825,for i in range(10):
1826,"    g[""num%s"" % i] = i ** 10"
1827,"    listB.append(""num{0}"".format(i))"
1828,
1829,def printNum():
1830,"    print ""Printing num0 to num9:"""
1831,    for i in range(10):
1832,"        print ""num%s = "" % i, "
1833,"        print g[""num%s"" % i]"
1834,
1835,printNum()
1836,
1837,listA = []
1838,for i in range(10):
1839,    listA.append(i)
1840,
1841,listA = tuple(listA)
1842,"print listA, '""Tuple to unpack""'"
1843,
1844,"listB = str(str(listB).strip(""[]"").replace(""'"", """") + "" = listA"")"
1845,
1846,print listB
1847,
1848,exec listB
1849,
1850,printNum()
1851,Printing num0 to num9:
1852,num0 =  0
1853,num1 =  1
1854,num2 =  1024
1855,num3 =  59049
1856,num4 =  1048576
1857,num5 =  9765625
1858,num6 =  60466176
1859,num7 =  282475249
1860,num8 =  1073741824
1861,num9 =  3486784401
1862,"(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) ""Tuple to unpack"""
1863,"num0, num1, num2, num3, num4, num5, num6, num7, num8, num9 = listA"
1864,Printing num0 to num9:
1865,num0 =  0
1866,num1 =  1
1867,num2 =  2
1868,num3 =  3
1869,num4 =  4
1870,num5 =  5
1871,num6 =  6
1872,num7 =  7
1873,num8 =  8
1874,num9 =  9
1875,>>> food #Error
1876,>>> milkshake #Error
1877,">>> food=""bread"""
1878,">>> drink=""milkshake"""
1879,">>> globals()[food] = ""strawberry flavor"""
1880,">>> vars()[drink] = ""chocolate flavor"""
1881,>>> bread
1882,'strawberry flavor'
1883,>>> milkshake
1884,'chocolate flavor'
1885,>>> globals()[drink]
1886,'chocolate flavor'
1887,>>> vars()[food]
1888,'strawberry flavor'
1889,from variableVariablesManager import VariableVariablesManager
1890,
1891,myVars = VariableVariablesManager()
1892,myVars['test'] = 25
1893,print(myVars['test'])
1894,
1895,# define a const variable
1896,"myVars.defineConstVariable('myconst', 13)"
1897,try:
1898,"    myVars['myconst'] = 14 # <- this raises an error, since 'myconst' must not be changed"
1899,"    print(""not allowed"")"
1900,except AttributeError as e:
1901,    pass
1902,
1903,# rename a variable
1904,"myVars.renameVariable('myconst', 'myconstOther')"
1905,
1906,# preserve locality
1907,def testLocalVar():
1908,    myVars = VariableVariablesManager()
1909,    myVars['test'] = 13
1910,"    print(""inside function myVars['test']:"", myVars['test'])"
1911,testLocalVar()
1912,"print(""outside function myVars['test']:"", myVars['test'])"
1913,
1914,# define a global variable
1915,"myVars.defineGlobalVariable('globalVar', 12)"
1916,def testGlobalVar():
1917,    myVars = VariableVariablesManager()
1918,"    print(""inside function myVars['globalVar']:"", myVars['globalVar'])"
1919,    myVars['globalVar'] = 13
1920,"    print(""inside function myVars['globalVar'] (having been changed):"", myVars['globalVar'])"
1921,testGlobalVar()
1922,"print(""outside function myVars['globalVar']:"", myVars['globalVar'])"
1923,myVars = VariableVariablesManager(enforceSameTypeOnOverride = True)
1924,myVars['test'] = 25
1925,"myVars['test'] = ""Cat"" # <- raises Exception (different type on overwriting)"
1926,# some list of variable names
1927,"L = ['a', 'b', 'c']"
1928,
1929,class Variables:
1930,"    def __init__(self, L):"
1931,        for item in L:
1932,            self.__dict__[item] = 100
1933,
1934,v = Variables(L)
1935,"print(v.a, v.b, v.c)"
1936,#will produce 100 100 100
1937,a = 'b=5'
1938,exec(a)
1939,c = b*2
1940,print (c)
1941,locals()['b'] = 5
1942,"setattr(object, name, value)"
1943,Example –
1944,
1945,"setattr(self,id,123)"
1946,self.id = 123
1947,import sys
1948,"x = ""pikachu"""
1949,value = 46
1950,thismodule = sys.modules[__name__]
1951,"setattr(thismodule, x, value)"
1952,print(pikachu)
1953,a[start:stop]  # items start through stop-1
1954,a[start:]      # items start through the rest of the array
1955,a[:stop]       # items from the beginning through stop-1
1956,a[:]           # a copy of the whole array
1957,step
1958,"a[start:stop:step] # start through not past stop, by step"
1959,:stop
1960,stop
1961,start
1962,step
1963,start
1964,stop
1965,a[-1]    # last item in the array
1966,a[-2:]   # last two items in the array
1967,a[:-2]   # everything except the last two items
1968,step
1969,"a[::-1]    # all items in the array, reversed"
1970,"a[1::-1]   # the first two items, reversed"
1971,"a[:-3:-1]  # the last two items, reversed"
1972,"a[-3::-1]  # everything except the last two items, reversed"
1973,a[:-2]
1974,a
1975,slice
1976,slice
1977,a[start:stop:step]
1978,"a[slice(start, stop, step)]"
1979,range()
1980,slice(stop)
1981,"slice(start, stop[, step])"
1982,None
1983,a[start:]
1984,"a[slice(start, None)]"
1985,a[::-1]
1986,"a[slice(None, None, -1)]"
1987,:
1988,slice()
1989,None
1990,[None:None]
1991, +---+---+---+---+---+---+
1992, | P | y | t | h | o | n |
1993, +---+---+---+---+---+---+
1994, 0   1   2   3   4   5   6
1995,-6  -5  -4  -3  -2  -1
1996,"a[-4,-6,-1]"
1997,yP
1998,ty
1999,x[:0]
2000,x
2001,">>> x[:]                # [x[0],   x[1],          ..., x[-1]    ]"
2002,">>> x[low:]             # [x[low], x[low+1],      ..., x[-1]    ]"
2003,">>> x[:high]            # [x[0],   x[1],          ..., x[high-1]]"
2004,">>> x[low:high]         # [x[low], x[low+1],      ..., x[high-1]]"
2005,">>> x[::stride]         # [x[0],   x[stride],     ..., x[-1]    ]"
2006,">>> x[low::stride]      # [x[low], x[low+stride], ..., x[-1]    ]"
2007,">>> x[:high:stride]     # [x[0],   x[stride],     ..., x[high-1]]"
2008,">>> x[low:high:stride]  # [x[low], x[low+stride], ..., x[high-1]]"
2009,(high-low)%stride != 0
2010,high-1
2011,stride
2012,">>> x[::-stride]        # [x[-1],   x[-1-stride],   ..., x[0]    ]"
2013,">>> x[high::-stride]    # [x[high], x[high-stride], ..., x[0]    ]"
2014,">>> x[:low:-stride]     # [x[-1],   x[-1-stride],   ..., x[low+1]]"
2015,">>> x[high:low:-stride] # [x[high], x[high-stride], ..., x[low+1]]"
2016,>>> class slicee:
2017,"...     def __getitem__(self, item):"
2018,...         return repr(item)
2019,...
2020,">>> slicee()[0, 1:2, ::5, ...]"
2021,"'(0, slice(1, 2, None), slice(None, None, 5), Ellipsis)'"
2022,repr
2023,__getitem__
2024,"apple[slice(4, -4, -1)]"
2025,                +---+---+---+---+---+---+
2026,                | P | y | t | h | o | n |
2027,                +---+---+---+---+---+---+
2028,Slice position: 0   1   2   3   4   5   6
2029,Index position:   0   1   2   3   4   5
2030,
2031,">>> p = ['P','y','t','h','o','n']"
2032,# Why the two sets of numbers:
2033,"# indexing gives items, not lists"
2034,>>> p[0]
2035, 'P'
2036,>>> p[5]
2037, 'n'
2038,
2039,# Slicing gives lists
2040,>>> p[0:1]
2041, ['P']
2042,>>> p[0:2]
2043," ['P','y']"
2044,">>> p[5] # the last of six items, indexed from zero"
2045, 'n'
2046,>>> p[0:5] # does NOT include the last item!
2047," ['P','y','t','h','o']"
2048,>>> p[0:6] # not p[0:5]!!!
2049," ['P','y','t','h','o','n']"
2050,>>> p[0:4] # Start at the beginning and count out 4 items
2051," ['P','y','t','h']"
2052,>>> p[1:4] # Take one item off the front
2053," ['y','t','h']"
2054,>>> p[2:4] # Take two items off the front
2055," ['t','h']"
2056,# etc.
2057,>>> p[2:3]
2058, ['t']
2059,>>> p[2:3] = ['T']
2060,>>> p
2061," ['P','y','T','h','o','n']"
2062,>>> p[2:3] = 't'
2063,Traceback (most recent call last):
2064,"  File ""<stdin>"", line 1, in <module>"
2065,TypeError: can only assign an iterable
2066,>>> p[2:4]
2067," ['T','h']"
2068,">>> p[2:4] = ['t','r']"
2069,>>> p
2070," ['P','y','t','r','o','n']"
2071,">>> p = ['P','y','t','h','o','n'] # Start over"
2072,">>> p[2:4] = ['s','p','a','m']"
2073,>>> p
2074," ['P','y','s','p','a','m','o','n']"
2075,">>> p = ['P','y','t','h','o','n']"
2076,>>> p[0:4]
2077," ['P','y','t','h']"
2078,>>> p[1:4]
2079," ['y','t','h']"
2080,>>> p[2:4]
2081," ['t','h']"
2082,>>> p[3:4]
2083, ['h']
2084,>>> p[4:4]
2085, []
2086,">>> p = ['P','y','t','h','o','n']"
2087,">>> p[2:4] = ['x','y'] # Assigned list is same length as slice"
2088,>>> p
2089," ['P','y','x','y','o','n'] # Result is same length"
2090,">>> p = ['P','y','t','h','o','n']"
2091,">>> p[3:4] = ['x','y'] # Assigned list is longer than slice"
2092,>>> p
2093," ['P','y','t','x','y','o','n'] # The result is longer"
2094,">>> p = ['P','y','t','h','o','n']"
2095,">>> p[4:4] = ['x','y']"
2096,>>> p
2097," ['P','y','t','h','x','y','o','n'] # The result is longer still"
2098,">>> p = ['P','y','t','h','o','n']"
2099,>>> p[0:4]
2100," ['P','y','t','h']"
2101,>>> p[1:4]
2102," ['y','t','h']"
2103,>>> p[2:4]
2104," ['t','h']"
2105,>>> p[3:4]
2106, ['h']
2107,>>> p[4:4]
2108, []
2109,>>> p[5:4]
2110, []
2111,>>> p[6:4]
2112, []
2113,>>> p[5:3:-1]
2114," ['n','o']"
2115,>>> p[4:4]
2116, []
2117,>>> p[5:4]
2118, []
2119,>>> p[6:4]
2120, []
2121,>>> p[6]
2122,Traceback (most recent call last):
2123,"  File ""<stdin>"", line 1, in <module>"
2124,IndexError: list index out of range
2125,>>> p[100:200]
2126, []
2127,>>> p[int(2e99):int(1e99)]
2128, []
2129,>>> p
2130," ['P', 'y', 't', 'h', 'o', 'n']"
2131,">>> p[int(2e99):int(1e99)] = ['p','o','w','e','r']"
2132,>>> p
2133," ['P', 'y', 't', 'h', 'o', 'n', 'p', 'o', 'w', 'e', 'r']"
2134,">>> r=[1,2,3,4]"
2135,>>> r[1:1]
2136,[]
2137,">>> r[1:1]=[9,8]"
2138,>>> r
2139,"[1, 9, 8, 2, 3, 4]"
2140,>>> r[1:1]=['blah']
2141,>>> r
2142,"[1, 'blah', 9, 8, 2, 3, 4]"
2143,l = l[6:]
2144,l[:] = l[6:]
2145,r[1:1]=['blah']
2146,:
2147,subscriptable[subscriptarg]
2148,start
2149,stop
2150,step
2151,sliceable[start:stop:step]
2152,start
2153,n
2154,stop
2155,step
2156, +---+---+---+---+---+---+
2157, | P | y | t | h | o | n |
2158, +---+---+---+---+---+---+
2159,   0   1   2   3   4   5 
2160,  -6  -5  -4  -3  -2  -1
2161,__getitem__
2162,sequence[start:stop:step]
2163,my_list[-9:]
2164,my_list[-9:None:None]
2165,step
2166,stop
2167,-len(my_list) - 1
2168,None
2169,my_list[-9:len(my_list):1]
2170,:
2171,list_copy = sequence[:]
2172,del my_list[:]
2173,list.copy
2174,list.clear
2175,step
2176,start
2177,stop
2178,step
2179,None
2180,+1
2181,start
2182,stop
2183,step
2184,step_is_negative = step_sign < 0;
2185,-1
2186,-1
2187,-1
2188,if (step_is_negative) {
2189,    lower = PyLong_FromLong(-1L);
2190,    if (lower == NULL)
2191,        goto error;
2192,
2193,"    upper = PyNumber_Add(length, lower);"
2194,    if (upper == NULL)
2195,        goto error;
2196,}
2197,step
2198,else {
2199,    lower = _PyLong_Zero;
2200,    Py_INCREF(lower);
2201,    upper = length;
2202,    Py_INCREF(upper);
2203,}
2204,start
2205,stop
2206,start
2207,step
2208,if (self->start == Py_None) {
2209,    start = step_is_negative ? upper : lower;
2210,    Py_INCREF(start);
2211,}
2212,stop
2213,if (self->stop == Py_None) {
2214,    stop = step_is_negative ? lower : upper;
2215,    Py_INCREF(stop);
2216,}
2217,list.__getitem__
2218,"last_nine_slice = slice(-9, None)"
2219,None
2220,start
2221,stop
2222,>>> list(range(100))[last_nine_slice]
2223,"[91, 92, 93, 94, 95, 96, 97, 98, 99]"
2224,>>> range(100)[last_nine_slice]
2225,"range(91, 100)"
2226,itertools.islice
2227,islice
2228,start
2229,stop
2230,step
2231,length = 100
2232,"last_nine_iter = itertools.islice(list(range(length)), length-9, None, 1)"
2233,list_last_nine = list(last_nine_iter)
2234,>>> list_last_nine
2235,"[91, 92, 93, 94, 95, 96, 97, 98, 99]"
2236,(start:stop)
2237,(start_at:stop_before)
2238,">>> x = [1,2,3,4,5,6]"
2239,>>> x[::-1]
2240,"[6,5,4,3,2,1]"
2241,">>> x = [1,2,3,4,5,6]"
2242,>>> x[::-2]
2243,"[6,4,2]"
2244,[a:b:c]
2245,
2246,"len = length of string, tuple or list"
2247,
2248,"c -- default is +1. The sign of c indicates forward or backward, absolute value of c indicates steps. Default is forward with step size 1. Positive means forward, negative means backward."
2249,
2250,"a --  When c is positive or blank, default is 0. When c is negative, default is -1."
2251,
2252,"b --  When c is positive or blank, default is len. When c is negative, default is -(len+1)."
2253,"In forward direction, starts at 0 and ends at len-1"
2254,
2255,"In backward direction, starts at -1 and ends at -len"
2256,"-len, -len+1, -len+2, ..., 0, 1, 2,3,4 , len -1"
2257,"...,-len -2 ,-len-1,-len, -len+1, -len+2, ..., 0, 1, 2,3,4 , len -1, len, len +1, len+2 , ...."
2258,             0    1    2   3    4   5   6   7   8   9   10   11
2259,             a    s    t   r    i   n   g
2260,    -9  -8  -7   -6   -5  -4   -3  -2  -1
2261,>>> l1
2262,"[2, 3, 4]"
2263,
2264,>>> l1[:]
2265,"[2, 3, 4]"
2266,
2267,">>> l1[::-1] # a default is -1 , b default is -(len+1)"
2268,"[4, 3, 2]"
2269,
2270,>>> l1[:-4:-1] # a default is -1
2271,"[4, 3, 2]"
2272,
2273,>>> l1[:-3:-1] # a default is -1
2274,"[4, 3]"
2275,
2276,">>> l1[::] # c default is +1, so a default is 0, b default is len"
2277,"[2, 3, 4]"
2278,
2279,">>> l1[::-1] # c is -1 , so a default is -1 and b default is -(len+1)"
2280,"[4, 3, 2]"
2281,
2282,
2283,>>> l1[-100:-200:-1] # Interesting
2284,[]
2285,
2286,>>> l1[-1:-200:-1] # Interesting
2287,"[4, 3, 2]"
2288,
2289,
2290,>>> l1[-1:-1:1]
2291,[]
2292,
2293,
2294,>>> l1[-1:5:1] # Interesting
2295,[4]
2296,
2297,
2298,>>> l1[1:-7:1]
2299,[]
2300,
2301,>>> l1[1:-7:-1] # Interesting
2302,"[3, 2]"
2303,
2304,">>> l1[:-2:-2] # a default is -1, stop(b) at -2 , step(c) by 2 in reverse direction"
2305,[4]
2306,"a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]; a[:-2:-2]"
2307,[9]
2308,Python indexes and slices for a six-element list.
2309,"Indexes enumerate the elements, slices enumerate the spaces between the elements."
2310,
2311,"Index from rear:    -6  -5  -4  -3  -2  -1      a=[0,1,2,3,4,5]    a[1:]==[1,2,3,4,5]"
2312,"Index from front:    0   1   2   3   4   5      len(a)==6          a[:5]==[0,1,2,3,4]"
2313,"                   +---+---+---+---+---+---+    a[0]==0            a[:-2]==[0,1,2,3]"
2314,                   | a | b | c | d | e | f |    a[5]==5            a[1:2]==[1]
2315,"                   +---+---+---+---+---+---+    a[-1]==5           a[1:-1]==[1,2,3,4]"
2316,Slice from front:  :   1   2   3   4   5   :    a[-2]==4
2317,Slice from rear:   :  -5  -4  -3  -2  -1   :
2318,                                                b=a[:]
2319,"                                                b==[0,1,2,3,4,5] (shallow copy of a)"
2320,for
2321,(from:to:step)
2322,(:to:step)
2323,(from::step)
2324,(from:to)
2325,range()
2326,"def range(start=0, stop, step=1):  # Illegal syntax, but that's the effect"
2327,    i = start
2328,    while (i < stop if step > 0 else i > stop):
2329,        yield i
2330,        i += step
2331,start
2332,step
2333,stop
2334,stop
2335,'abcde'[1:-2][::-1]
2336,reversed()
2337,"def this_is_how_slicing_works(seq, start=None, stop=None, step=1):"
2338,    if start is None:
2339,        start = (0 if step > 0 else len(seq)-1)
2340,    elif start < 0:
2341,        start += len(seq)
2342,    if not 0 <= start < len(seq):  # clip if still outside bounds
2343,        start = (0 if step > 0 else len(seq)-1)
2344,    if stop is None:
2345,"        stop = (len(seq) if step > 0 else -1)  # really -1, not last element"
2346,    elif stop < 0:
2347,        stop += len(seq)
2348,"    for i in range(start, stop, step):"
2349,        if 0 <= i < len(seq):
2350,            yield seq[i]
2351,is None
2352,start
2353,stop
2354,'abcde'[1:-2] == 'abcde'[1:3] == 'bc'
2355,"range(1,-2) == []"
2356,'abcde'[-53:42]
2357,this_is_how_slicing_works
2358,"[0, 1, 2][-5:3:3]"
2359,"list(this_is_how_slicing_works([0, 1, 2], -5, 3, 3))"
2360,"range(4)[-200:200:3] == [0, 3]"
2361,"list(this_is_how_slicing_works([0, 1, 2, 3], -200, 200, 3)) == [2]"
2362,if 0 <= i < len(seq):
2363,mylist[X:Y]
2364,Index:
2365,      ------------>
2366,  0   1   2   3   4
2367,+---+---+---+---+---+
2368,| a | b | c | d | e |
2369,+---+---+---+---+---+
2370,  0  -4  -3  -2  -1
2371,      <------------
2372,
2373,Slice:
2374,    <---------------|
2375,|--------------->
2376,:   1   2   3   4   :
2377,+---+---+---+---+---+
2378,| a | b | c | d | e |
2379,+---+---+---+---+---+
2380,:  -4  -3  -2  -1   :
2381,|--------------->
2382,    <---------------|
2383,"In [122]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']"
2384,
2385,In [123]: alpha
2386,"Out[123]: ['a', 'b', 'c', 'd', 'e', 'f']"
2387,
2388,In [124]: alpha[0]
2389,Out[124]: 'a'
2390,
2391,In [127]: alpha[0] = 'A'
2392,
2393,In [128]: alpha
2394,"Out[128]: ['A', 'b', 'c', 'd', 'e', 'f']"
2395,
2396,"In [129]: alpha[0,1]"
2397,---------------------------------------------------------------------------
2398,TypeError                                 Traceback (most recent call last)
2399,<ipython-input-129-c7eb16585371> in <module>()
2400,"----> 1 alpha[0,1]"
2401,
2402,"TypeError: list indices must be integers, not tuple"
2403,In [130]: alpha[0:1]
2404,Out[130]: ['A']
2405,
2406,In [131]: alpha[0:1] = 'a'
2407,
2408,In [132]: alpha
2409,"Out[132]: ['a', 'b', 'c', 'd', 'e', 'f']"
2410,
2411,"In [133]: alpha[0:2] = ['A', 'B']"
2412,
2413,In [134]: alpha
2414,"Out[134]: ['A', 'B', 'c', 'd', 'e', 'f']"
2415,
2416,"In [135]: alpha[2:2] = ['x', 'xx']"
2417,
2418,In [136]: alpha
2419,"Out[136]: ['A', 'B', 'x', 'xx', 'c', 'd', 'e', 'f']"
2420,"In [137]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']"
2421,
2422,In [142]: alpha[1:5:2]
2423,"Out[142]: ['b', 'd']"
2424,
2425,In [143]: alpha[-1:-5:-2]
2426,"Out[143]: ['f', 'd']"
2427,
2428,In [144]: alpha[1:5:-2]
2429,Out[144]: []
2430,
2431,In [145]: alpha[-1:-5:2]
2432,Out[145]: []
2433,"def py_slice_get_indices_ex(obj, start=None, stop=None, step=None):"
2434,
2435,    length = len(obj)
2436,
2437,    if step is None:
2438,        step = 1
2439,    if step == 0:
2440,"        raise Exception(""Step cannot be zero."")"
2441,
2442,    if start is None:
2443,        start = 0 if step > 0 else length - 1
2444,    else:
2445,        if start < 0:
2446,            start += length
2447,        if start < 0:
2448,            start = 0 if step > 0 else -1
2449,        if start >= length:
2450,            start = length if step > 0 else length - 1
2451,
2452,    if stop is None:
2453,        stop = length if step > 0 else -1
2454,    else:
2455,        if stop < 0:
2456,            stop += length
2457,        if stop < 0:
2458,            stop = 0 if step > 0 else -1
2459,        if stop >= length:
2460,            stop = length if step > 0 else length - 1
2461,
2462,    if (step < 0 and stop >= start) or (step > 0 and start >= stop):
2463,        slice_length = 0
2464,    elif step < 0:
2465,        slice_length = (stop - start + 1)/(step) + 1
2466,    else:
2467,        slice_length = (stop - start - 1)/(step) + 1
2468,
2469,"    return (start, stop, step, slice_length)"
2470,"In [21]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']"
2471,
2472,"In [22]: s = slice(None, None, None)"
2473,
2474,In [23]: s
2475,"Out[23]: slice(None, None, None)"
2476,
2477,In [24]: s.indices(len(alpha))
2478,"Out[24]: (0, 6, 1)"
2479,
2480,In [25]: range(*s.indices(len(alpha)))
2481,"Out[25]: [0, 1, 2, 3, 4, 5]"
2482,
2483,"In [26]: s = slice(None, None, -1)"
2484,
2485,In [27]: range(*s.indices(len(alpha)))
2486,"Out[27]: [5, 4, 3, 2, 1, 0]"
2487,
2488,"In [28]: s = slice(None, 3, -1)"
2489,
2490,In [29]: range(*s.indices(len(alpha)))
2491,"Out[29]: [5, 4]"
2492,start
2493,stop
2494,a[start:end:step]
2495,start
2496,end
2497,end
2498,[+0:-0:1]
2499,start
2500,end
2501,"m[::,0:2:] ## slice the first two columns"
2502,deepcopy()
2503,"r = [1, 'blah', 9, 8, 2, 3, 4]"
2504,>>> r[1:4] = []
2505,>>> r
2506,"[1, 2, 3, 4]"
2507,">>> l=[12,23,345,456,67,7,945,467]"
2508,>>> l[len(l):-len(l)-1:-1]
2509,"[467, 945, 7, 67, 456, 345, 23, 12]"
2510,
2511,>>> l[:-len(l)-1:-1]
2512,"[467, 945, 7, 67, 456, 345, 23, 12]"
2513,
2514,>>> l[len(l)::-1]
2515,"[467, 945, 7, 67, 456, 345, 23, 12]"
2516,
2517,>>> l[::-1]
2518,"[467, 945, 7, 67, 456, 345, 23, 12]"
2519,
2520,>>> l[-1:-len(l)-1:-1]
2521,"[467, 945, 7, 67, 456, 345, 23, 12]"
2522,s[start:end:step]
2523,s
2524,start
2525,end
2526,end
2527,step
2528,step
2529,start
2530,end
2531,step
2532,0
2533,len(s)
2534,1
2535,# Mostly used variations
2536,s[start:end]
2537,s[start:]
2538,s[:end]
2539,
2540,# Step-related variations
2541,s[:end:step]
2542,s[start::step]
2543,s[::step]
2544,
2545,# Make a copy
2546,s[:]
2547,start >= end
2548,step>0
2549,[]
2550,"s[-5:]    # Start at the 5th index from the end of array,"
2551,          # thus returning the last 5 elements.
2552,"s[:-5]    # Start at index 0, and end until the 5th index from end of array,"
2553,          # thus returning s[0:len(s)-5].
2554,step
2555,start
2556,len(s)
2557,end
2558,0
2559,s[::-1]
2560,s[0]
2561,s[::-1]            # Reversed slice
2562,"s[len(s)::-1]      # The same as above, reversed slice"
2563,s[0:len(s):-1]     # Empty list
2564,0
2565,len(s)
2566,s[:len(s)+5]      # The same as s[:len(s)]
2567,s[-len(s)-5::]    # The same as s[0:]
2568,"s[len(s)+5::-1]   # The same as s[len(s)::-1], and the same as s[::-1]"
2569,# Create our array for demonstration
2570,In [1]: s = [i for i in range(10)]
2571,
2572,In [2]: s
2573,"Out[2]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
2574,
2575,In [3]: s[2:]   # From index 2 to last index
2576,"Out[3]: [2, 3, 4, 5, 6, 7, 8, 9]"
2577,
2578,In [4]: s[:8]   # From index 0 up to index 8
2579,"Out[4]: [0, 1, 2, 3, 4, 5, 6, 7]"
2580,
2581,In [5]: s[4:7]  # From index 4 (included) up to index 7(excluded)
2582,"Out[5]: [4, 5, 6]"
2583,
2584,In [6]: s[:-2]  # Up to second last index (negative index)
2585,"Out[6]: [0, 1, 2, 3, 4, 5, 6, 7]"
2586,
2587,In [7]: s[-2:]  # From second last index (negative index)
2588,"Out[7]: [8, 9]"
2589,
2590,In [8]: s[::-1] # From last to first in reverse order (negative step)
2591,"Out[8]: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
2592,
2593,In [9]: s[::-2] # All odd numbers in reversed order
2594,"Out[9]: [9, 7, 5, 3, 1]"
2595,
2596,In [11]: s[-2::-2] # All even numbers in reversed order
2597,"Out[11]: [8, 6, 4, 2, 0]"
2598,
2599,"In [12]: s[3:15]   # End is out of range, and Python will set it to len(s)."
2600,"Out[12]: [3, 4, 5, 6, 7, 8, 9]"
2601,
2602,In [14]: s[5:1]    # Start > end; return empty list
2603,Out[14]: []
2604,
2605,In [15]: s[11]     # Access index 11 (greater than len(s)) will raise an IndexError
2606,---------------------------------------------------------------------------
2607,IndexError                                Traceback (most recent call last)
2608,<ipython-input-15-79ffc22473a3> in <module>()
2609,----> 1 s[11]
2610,
2611,IndexError: list index out of range
2612,">>> items = [0, 1, 2, 3, 4, 5, 6]"
2613,">>> a = slice(2, 4)"
2614,>>> items[2:4]
2615,"[2, 3]"
2616,>>> items[a]
2617,"[2, 3]"
2618,">>> items[a] = [10,11]"
2619,>>> items
2620,"[0, 1, 10, 11, 4, 5, 6]"
2621,>>> del items[a]
2622,>>> items
2623,"[0, 1, 4, 5, 6]"
2624,">>> a = slice(10, 50, 2)"
2625,>>> a.start
2626,10
2627,>>> a.stop
2628,50
2629,>>> a.step
2630,2
2631,>>>
2632,"# Here, a is a NumPy array"
2633,
2634,>>> a
2635,"array([[ 1,  2,  3,  4],"
2636,"       [ 5,  6,  7,  8],"
2637,"       [ 9, 10, 11, 12]])"
2638,">>> a[:2, 0:3:2]"
2639,"array([[1, 3],"
2640,"       [5, 7]])"
2641,:2
2642,0:3:2
2643,list
2644,array
2645,[lower bound : upper bound : step size]
2646,upper bound
2647,lower bound
2648,step size
2649,step size
2650,upper bound
2651,lower bound
2652,empty string
2653,"s=""Welcome"""
2654,s1=s[0:3:1]
2655,print(s1)
2656,Wel
2657,"s=""Welcome"""
2658,s1=s[3:0:1]
2659,print(s1)
2660,step size
2661,upper bound
2662,lower bound
2663,empty string
2664,"s=""Welcome"""
2665,s1=s[3:0:-1]
2666,print(s1)
2667,cle
2668,"s=""Welcome"""
2669,s1=s[0:5:-1]
2670,print(s1)
2671,str = 'abcd'
2672,l = len(str)
2673,str2 = str[l-1:0:-1]    #str[3:0:-1] 
2674,print(str2)
2675,str2 = str[l-1:-1:-1]    #str[3:-1:-1]
2676,print(str2)
2677,str2=str[l-1:0:-1]
2678,upper bound
2679,lower bound
2680,dcb
2681,str2=str[l-1:-1:-1]
2682,upper bound
2683,lower bound
2684,lower bound
2685,-1
2686,index
2687,"azString = ""abcdefghijklmnopqrstuvwxyz"""
2688,azString
2689,azString[x:y]
2690,"azString[index1, index2]"
2691,"azString[index_of_first_character, index_after_the_last_character]"
2692,Letters   a b c d e f g h i j ...
2693,         ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑
2694,             ┊           ┊
2695,Indexes  0 1 2 3 4 5 6 7 8 9 ...
2696,             ┊           ┊
2697,cdefgh    index1       index2
2698,azString[2:8]
2699,for
2700,a[start:end:step]
2701,# for(i = start; i < end; i += step)
2702,start
2703,end
2704,given_index + a.shape[0]
2705,#!/usr/bin/env python
2706,
2707,"def slicegraphical(s, lista):"
2708,
2709,    if len(s) > 9:
2710,"        print """"""Enter a string of maximum 9 characters,"
2711,"    so the printig would looki nice"""""""
2712,        return 0;
2713,"    # print "" "","
2714,    print '  '+'+---' * len(s) +'+'
2715,"    print ' ',"
2716,    for letter in s:
2717,"        print '| {}'.format(letter),"
2718,    print '|'
2719,"    print "" "",; print '+---' * len(s) +'+'"
2720,
2721,"    print "" "","
2722,    for letter in range(len(s) +1):
2723,"        print '{}  '.format(letter),"
2724,"    print """""
2725,"    for letter in range(-1*(len(s)), 0):"
2726,"        print ' {}'.format(letter),"
2727,    print ''
2728,    print ''
2729,
2730,
2731,    for triada in lista:
2732,        if len(triada) == 3:
2733,            if triada[0]==None and triada[1] == None and triada[2] == None:
2734,                # 000
2735,"                print s+'[   :   :   ]' +' = ', s[triada[0]:triada[1]:triada[2]]"
2736,            elif triada[0] == None and triada[1] == None and triada[2] != None:
2737,                # 001
2738,"                print s+'[   :   :{0:2d} ]'.format(triada[2], '','') +' = ', s[triada[0]:triada[1]:triada[2]]"
2739,            elif triada[0] == None and triada[1] != None and triada[2] == None:
2740,                # 010
2741,"                print s+'[   :{0:2d} :   ]'.format(triada[1]) +' = ', s[triada[0]:triada[1]:triada[2]]"
2742,            elif triada[0] == None and triada[1] != None and triada[2] != None:
2743,                # 011
2744,"                print s+'[   :{0:2d} :{1:2d} ]'.format(triada[1], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]"
2745,            elif triada[0] != None and triada[1] == None and triada[2] == None:
2746,                # 100
2747,"                print s+'[{0:2d} :   :   ]'.format(triada[0]) +' = ', s[triada[0]:triada[1]:triada[2]]"
2748,            elif triada[0] != None and triada[1] == None and triada[2] != None:
2749,                # 101
2750,"                print s+'[{0:2d} :   :{1:2d} ]'.format(triada[0], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]"
2751,            elif triada[0] != None and triada[1] != None and triada[2] == None:
2752,                # 110
2753,"                print s+'[{0:2d} :{1:2d} :   ]'.format(triada[0], triada[1]) +' = ', s[triada[0]:triada[1]:triada[2]]"
2754,            elif triada[0] != None and triada[1] != None and triada[2] != None:
2755,                # 111
2756,"                print s+'[{0:2d} :{1:2d} :{2:2d} ]'.format(triada[0], triada[1], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]"
2757,
2758,        elif len(triada) == 2:
2759,            if triada[0] == None and triada[1] == None:
2760,                # 00
2761,"                print s+'[   :   ]    ' + ' = ', s[triada[0]:triada[1]]"
2762,            elif triada[0] == None and triada[1] != None:
2763,                # 01
2764,"                print s+'[   :{0:2d} ]    '.format(triada[1]) + ' = ', s[triada[0]:triada[1]]"
2765,            elif triada[0] != None and triada[1] == None:
2766,                # 10
2767,"                print s+'[{0:2d} :   ]    '.format(triada[0]) + ' = ', s[triada[0]:triada[1]]"
2768,            elif triada[0] != None and triada[1] != None:
2769,                # 11
2770,"                print s+'[{0:2d} :{1:2d} ]    '.format(triada[0],triada[1]) + ' = ', s[triada[0]:triada[1]]"
2771,
2772,        elif len(triada) == 1:
2773,"            print s+'[{0:2d} ]        '.format(triada[0]) + ' = ', s[triada[0]]"
2774,
2775,
2776,if __name__ == '__main__':
2777,"    # Change ""s"" to what ever string you like, make it 9 characters for"
2778,    # better representation.
2779,    s = 'COMPUTERS'
2780,
2781,    # add to this list different lists to experement with indexes
2782,"    # to represent ex. s[::], use s[None, None,None], otherwise you get an error"
2783,    # for s[2:] use s[2:None]
2784,
2785,"    lista = [[4,7],[2,5,2],[-5,1,-1],[4],[-4,-6,-1], [2,-3,1],[2,-3,-1], [None,None,-1],[-5,None],[-5,0,-1],[-5,None,-1],[-1,1,-2]]"
2786,
2787,"    slicegraphical(s, lista)"
2788,  +---+---+---+---+---+---+---+---+---+
2789,  | C | O | M | P | U | T | E | R | S |
2790,  +---+---+---+---+---+---+---+---+---+
2791,  0   1   2   3   4   5   6   7   8   9   
2792, -9  -8  -7  -6  -5  -4  -3  -2  -1 
2793,
2794,COMPUTERS[ 4 : 7 ]     =  UTE
2795,COMPUTERS[ 2 : 5 : 2 ] =  MU
2796,COMPUTERS[-5 : 1 :-1 ] =  UPM
2797,COMPUTERS[ 4 ]         =  U
2798,COMPUTERS[-4 :-6 :-1 ] =  TU
2799,COMPUTERS[ 2 :-3 : 1 ] =  MPUT
2800,COMPUTERS[ 2 :-3 :-1 ] =  
2801,COMPUTERS[   :   :-1 ] =  SRETUPMOC
2802,COMPUTERS[-5 :   ]     =  UTERS
2803,COMPUTERS[-5 : 0 :-1 ] =  UPMO
2804,COMPUTERS[-5 :   :-1 ] =  UPMOC
2805,COMPUTERS[-1 : 1 :-2 ] =  SEUM
2806,[Finished in 0.9s]
2807,lst[start:end]
2808,start
2809,end
2810,"for any n,    lst = lst[:n] + lst[n:]"
2811,lst[start:end]
2812,end
2813,lst[end:]
2814,n
2815,lst = range(10)
2816,lst[:-42] + lst[-42:] == lst
2817,True
2818,"['P', 'Y', 'T', 'H', 'O', 'N']"
2819,+---+---+---+---+---+---+
2820,| P | Y | T | H | O | N |
2821,+---+---+---+---+---+---+
2822,  0   1   2   3   4   5
2823,[<index>:<index>]
2824,[ start cutting before this index : end cutting before this index ]
2825,[2:5]
2826,        |           |
2827,+---+---|---+---+---|---+
2828,| P | Y | T | H | O | N |
2829,+---+---|---+---+---|---+
2830,  0   1 | 2   3   4 | 5
2831,2
2832,5
2833,"['T', 'H', 'O']"
2834,l[start:end]
2835,l
2836,start
2837,end
2838,In [1]: l = list(range(10))
2839,
2840,In [2]: l[:5] # First five elements
2841,"Out[2]: [0, 1, 2, 3, 4]"
2842,
2843,In [3]: l[-5:] # Last five elements
2844,"Out[3]: [5, 6, 7, 8, 9]"
2845,In [5]: l[:3] == l[0:3]
2846,Out[5]: True
2847,
2848,In [6]: l[7:] == l[7:len(l)]
2849,Out[6]: True
2850,In [7]: l[:-1] # Include all elements but the last one
2851,"Out[7]: [0, 1, 2, 3, 4, 5, 6, 7, 8]"
2852,
2853,In [8]: l[-3:] # Take the last three elements
2854,"Out[8]: [7, 8, 9]"
2855,"In [9]: l[:20] # 20 is out of index bounds, and l[20] will raise an IndexError exception"
2856,"Out[9]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
2857,
2858,"In [11]: l[-20:] # -20 is out of index bounds, and l[-20] will raise an IndexError exception"
2859,"Out[11]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
2860,In [16]: l[2:6] = list('abc') # Assigning fewer elements than the ones contained in the sliced collection l[2:6]
2861,
2862,In [17]: l
2863,"Out[17]: [0, 1, 'a', 'b', 'c', 6, 7, 8, 9]"
2864,
2865,In [18]: l[2:5] = list('hello') # Assigning more elements than the ones contained in the sliced collection l [2:5]
2866,
2867,In [19]: l
2868,"Out[19]: [0, 1, 'h', 'e', 'l', 'l', 'o', 6, 7, 8, 9]"
2869,In [14]: l_copy = l[:]
2870,
2871,In [15]: l == l_copy and l is not l_copy
2872,Out[15]: True
2873,In [20]: l[:] = list('hello...')
2874,
2875,In [21]: l
2876,"Out[21]: ['h', 'e', 'l', 'l', 'o', '.', '.', '.']"
2877,l[start:end:step]
2878,l
2879,start
2880,end
2881,step
2882,l
2883,In [22]: l = list(range(10))
2884,
2885,In [23]: l[::2] # Take the elements which indexes are even
2886,"Out[23]: [0, 2, 4, 6, 8]"
2887,
2888,In [24]: l[1::2] # Take the elements which indexes are odd
2889,"Out[24]: [1, 3, 5, 7, 9]"
2890,step
2891,In [25]: l[::-1]
2892,"Out[25]: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
2893,step
2894,In[28]:  l[::-2]
2895,"Out[28]: [9, 7, 5, 3, 1]"
2896,step
2897,start
2898,end
2899,step
2900,In [29]: l = l[::2] # This step is for striding
2901,
2902,In [30]: l
2903,"Out[30]: [0, 2, 4, 6, 8]"
2904,
2905,In [31]: l = l[1:-1] # This step is for slicing
2906,
2907,In [32]: l
2908,"Out[32]: [2, 4, 6]"
2909,aList[start:stop:step]
2910, +---+---+---+---+---+
2911, | H | e | l | p | A |
2912, +---+---+---+---+---+
2913, 0   1   2   3   4   5
2914,-5  -4  -3  -2  -1
2915,
2916,"str=""Name string"""
2917,str[start:end] # Items start through end-1
2918,str[start:]    # Items start through the rest of the array
2919,str[:end]      # Items from the beginning through end-1
2920,str[:]         # A copy of the whole array
2921,print str[0] = N
2922,print str[0:2] = Na
2923,print str[0:7] = Name st
2924,print str[0:7:2] = Nm t
2925,print str[0:-1:2] = Nm ti
2926,len - index
2927,len(list) - 3
2928,"def slice(list, start = None, end = None, step = 1):"
2929,  # Take care of missing start/end parameters
2930,  start = 0 if start is None else start
2931,  end = len(list) if end is None else end
2932,
2933,  # Take care of negative start/end parameters
2934,  start = len(list) + start if start < 0 else start
2935,  end = len(list) + end if end < 0 else end
2936,
2937,"  # Now just execute a for-loop with start, end and step"
2938,"  return [list[i] for i in range(start, end, step)]"
2939, +---+---+---+---+---+---+
2940, | P | y | t | h | o | n |
2941, +---+---+---+---+---+---+
2942, 0   1   2   3   4   5   6
2943,-6  -5  -4  -3  -2  -1
2944,"a[-4,-6,-1]"
2945,yP
2946,ty
2947,">>> a = ""Python"""
2948,>>> a[2:4:1] # as expected
2949,'th'
2950,>>> a[-4:-6:-1] # off by 1
2951,'ty'
2952,a[-4:-6:-1]
2953,"a(-6,-4]"
2954, +---+---+---+---+---+---+
2955, | P | y | t | h | o | n |
2956, +---+---+---+---+---+---+
2957,   0   1   2   3   4   5  
2958,  -6  -5  -4  -3  -2  -1
2959,
2960, +---+---+---+---+---+---+---+---+---+---+---+---+
2961, | P | y | t | h | o | n | P | y | t | h | o | n |
2962, +---+---+---+---+---+---+---+---+---+---+---+---+
2963,  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5  
2964,xs = [[1] * 4] * 3
2965,
2966,"# xs == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]  "
2967,xs[0][0] = 5
2968,
2969,"# xs == [[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]  "
2970,5
2971,.append
2972,[x]*3
2973,"[x, x, x]"
2974,x
2975,x
2976,x = [1] * 4
2977,xs = [x] * 3
2978,"print(f""id(x): {id(x)}"")"
2979,# id(x): 140560897920048
2980,print(
2981,"    f""id(xs[0]): {id(xs[0])}\n"""
2982,"    f""id(xs[1]): {id(xs[1])}\n"""
2983,"    f""id(xs[2]): {id(xs[2])}"""
2984,)
2985,# id(xs[0]): 140560897920048
2986,# id(xs[1]): 140560897920048
2987,# id(xs[2]): 140560897920048
2988,
2989,x[0] = 42
2990,"print(f""x: {x}"")"
2991,"# x: [42, 1, 1, 1]"
2992,"print(f""xs: {xs}"")"
2993,"# xs: [[42, 1, 1, 1], [42, 1, 1, 1], [42, 1, 1, 1]]"
2994,[[1]*4 for _ in range(3)]
2995,[1]*4
2996,*
2997,*
2998,*
2999,[[1] * 4]
3000,*
3001,[[1] * 4]
3002,[[1] * 4
3003,*
3004,[[1] * 4]
3005,*
3006,[[1] * 4 for n in range(3)]
3007,[1] * 4
3008,[x**2 for x in range(3)]
3009,x**2
3010,[1] * 4
3011,[1] * 4
3012,[1]
3013,1.value = 2
3014,[x]*3
3015,"[x, x, x]"
3016,x
3017,a=[4]*3
3018,a[0]=5
3019,"a=[5,4,4]."
3020,[4]*3
3021,"x = 4; [x, x, x]"
3022,4
3023,a = [x]*3; a[0] = 5
3024,x
3025,x
3026,a
3027,x = 1000; lst = [x]*2; lst[0] is lst[1]
3028,True
3029,*
3030,size = 3
3031,matrix_surprise = [[0] * size] * size
3032,matrix = [[0]*size for _ in range(size)]
3033,x
3034,x = object()
3035,matrix = [[x] * 2]
3036,matrix[0][0] is matrix[0][1]
3037,list
3038,row = [x] * 2
3039,matrix = [row] * 2
3040,matrix[0][0] = y
3041,(matrix[0][0] is matrix[1][0]) == True
3042,lst = [[1] * 4] * 3
3043,lst1 = [1]*4
3044,lst = [lst1]*3
3045,lst
3046,lst1
3047,lst[0][0] = 5
3048,lst1[0] = 5
3049,lst[0]
3050,lst1
3051,lst = [ [1]*4 for n in range(3) ]
3052,n
3053,id(lst[0][0])
3054,id(lst[1][0])
3055,id(lst[0])
3056,id(lst[1])
3057,[[1] * 4] * 3
3058,"[[1, 1, 1, 1]] * 3"
3059,"[1,1,1,1]"
3060,">>> inner = [1,1,1,1]"
3061,>>> outer = [inner]*3
3062,>>> outer
3063,"[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]"
3064,>>> inner[0] = 5
3065,>>> outer
3066,"[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]"
3067,my_list = [[1]*4] * 3
3068,"[1,1,1,1]"
3069,"obj = [1,1,1,1]; my_list = [obj]*3"
3070,obj
3071,obj
3072,my_list = [[1]*4 for _ in range(3)]
3073,my_list = [[1 for __ in range(4)] for _ in range(3)]
3074,*
3075,1
3076,obj = [1]*4
3077,1
3078,"[1,1,1,1]"
3079,obj[1] = 42
3080,obj
3081,"[1,42,1,1]"
3082,"[42,42,42,42]"
3083,>>> my_list = [1]*4
3084,>>> my_list
3085,"[1, 1, 1, 1]"
3086,
3087,>>> id(my_list[0])
3088,4522139440
3089,>>> id(my_list[1])  # Same as my_list[0]
3090,4522139440
3091,">>> my_list[1] = 42  # Since my_list[1] is immutable, this operation overwrites my_list[1] with a new object changing its id."
3092,>>> my_list
3093,"[1, 42, 1, 1]"
3094,
3095,>>> id(my_list[0])
3096,4522139440
3097,>>> id(my_list[1])  # id changed
3098,4522140752
3099,">>> id(my_list[2])  # id still same as my_list[0], still referring to value `1`."
3100,4522139440
3101,obj[2] = 42
3102,2
3103,myList[2][0] = ...
3104,myList[2]
3105,[....]
3106,[[1]*4 for _ in range(3)]
3107,itertools.repeat()
3108,">>> a = list(repeat(1,4))"
3109,"[1, 1, 1, 1]"
3110,>>> a[0] = 5
3111,>>> a
3112,"[5, 1, 1, 1]"
3113,np.ones
3114,np.zeros
3115,np.repeat
3116,>>> import numpy as np
3117,>>> np.ones(4)
3118,"array([1., 1., 1., 1.])"
3119,">>> np.ones((4, 2))"
3120,"array([[1., 1.],"
3121,"       [1., 1.],"
3122,"       [1., 1.],"
3123,"       [1., 1.]])"
3124,">>> np.zeros((4, 2))"
3125,"array([[0., 0.],"
3126,"       [0., 0.],"
3127,"       [0., 0.],"
3128,"       [0., 0.]])"
3129,">>> np.repeat([7], 10)"
3130,"array([7, 7, 7, 7, 7, 7, 7, 7, 7, 7])"
3131,>>> a = []
3132,>>> b = [a]
3133,>>> b
3134,[[]]
3135,>>> a.append(1)
3136,>>> b
3137,[[1]]
3138,b
3139,a
3140,a
3141,>>> c = b + b
3142,>>> c
3143,"[[1], [1]]"
3144,>>>
3145,>>> a[0] = 2
3146,>>> c
3147,"[[2], [2]]"
3148,c
3149,a
3150,c = b * 2
3151,x = 1
3152,y = [x]
3153,z = y * 4
3154,
3155,my_list = [z] * 3
3156,id
3157,"print(""my_list:"")"
3158,"for i, sub_list in enumerate(my_list):"
3159,"    print(""\t[{}]: {}"".format(i, id(sub_list)))"
3160,"    for j, elem in enumerate(sub_list):"
3161,"        print(""\t\t[{}]: {}"".format(j, id(elem)))"
3162,x: 1
3163,y: [1]
3164,"z: [1, 1, 1, 1]"
3165,my_list:
3166,    [0]: 4300763792
3167,        [0]: 4298171528
3168,        [1]: 4298171528
3169,        [2]: 4298171528
3170,        [3]: 4298171528
3171,    [1]: 4300763792
3172,        [0]: 4298171528
3173,        [1]: 4298171528
3174,        [2]: 4298171528
3175,        [3]: 4298171528
3176,    [2]: 4300763792
3177,        [0]: 4298171528
3178,        [1]: 4298171528
3179,        [2]: 4298171528
3180,        [3]: 4298171528
3181,x
3182,1
3183,y
3184,x
3185,y * 4
3186,z
3187,"[x, x, x, x]"
3188,x
3189,z * 3
3190,"[[x, x, x, x]] * 3"
3191,"[[x, x, x, x], [x, x, x, x], [x, x, x, x]]"
3192,arr = [[0]*cols]*row
3193,"rows, cols = (5, 5) "
3194,arr = [[0 for i in range(cols)] for j in range(rows)] 
3195,arr = [0]*N 
3196,arr = [0 for i in range(N)] 
3197,arr[4] = 5
3198,my_list = [[1 for i in range(4)] for j in range(3)]
3199,
3200,my_list[0][0] = 5
3201,print(my_list)
3202,"[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]"
3203,*3
3204,li = [0] * 3
3205,"print([id(v) for v in li])  # [140724141863728, 140724141863728, 140724141863728]"
3206,li[0] = 1
3207,"print([id(v) for v in li])  # [140724141863760, 140724141863728, 140724141863728]"
3208,print(id(0))  # 140724141863728
3209,print(id(1))  # 140724141863760
3210,"print(li)     # [1, 0, 0]"
3211,
3212,ma = [[0]*3] * 3  # mainly discuss inner & outer *3 here
3213,"print([id(li) for li in ma])  # [1987013355080, 1987013355080, 1987013355080]"
3214,ma[0][0] = 1
3215,"print([id(li) for li in ma])  # [1987013355080, 1987013355080, 1987013355080]"
3216,"print(ma)  # [[1, 0, 0], [1, 0, 0], [1, 0, 0]]"
3217,*3
3218,"[&0, &0, &0]"
3219,li[0]
3220,0
3221,&1
3222,"ma = [&li, &li, &li]"
3223,li
3224,ma[0][0] = 1
3225,ma[0][0]
3226,&li[0]
3227,&li
3228,&1
3229,"x = [[0, 0], [0, 0]]"
3230,print(type(x)) # <class 'list'>
3231,"print(x) # [[0, 0], [0, 0]]"
3232,
3233,x[0][0] = 1
3234,"print(x) # [[1, 0], [0, 0]]"
3235,y = [[0] * 2] * 2
3236,print(type(y)) # <class 'list'>
3237,"print(y) # [[0, 0], [0, 0]]"
3238,
3239,y[0][0] = 1
3240,"print(y) # [[1, 0], [1, 0]]"
3241,[0] * 2
3242,import copy
3243,y = [0] * 2   
3244,"print(y)   # [0, 0]"
3245,
3246,"y = [y, copy.deepcopy(y)]  "
3247,"print(y) # [[0, 0], [0, 0]]"
3248,
3249,y[0][0] = 1
3250,"print(y) # [[1, 0], [0, 0]]"
3251,import copy
3252,y = [0] * 2
3253,"print(y) # [0, 0]"
3254,
3255,"y = [copy.deepcopy(y) for num in range(1,5)]"
3256,"print(y) # [[0, 0], [0, 0], [0, 0], [0, 0]]"
3257,
3258,y[0][0] = 5
3259,"print(y) # [[5, 0], [0, 0], [0, 0], [0, 0]]"
3260,a
3261,"out:[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]"
3262,#Displaying the list
3263,
3264,a.remove(a[0])
3265,"out:[[1, 1, 1, 1], [1, 1, 1, 1]]"
3266,# Removed the first element of the list in which you want altered number
3267,
3268,"a.append([5,1,1,1])"
3269,"out:[[1, 1, 1, 1], [1, 1, 1, 1], [5, 1, 1, 1]]"
3270,# append the element in the list but the appended element as you can see is appended in last but you want that in starting
3271,
3272,a.reverse()
3273,"out:[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]"
3274,#So at last reverse the whole list to get the desired list
3275,"a.insert(0,[5,1,1,1])"
3276,import copy
3277,
3278,"def list_ndim(dim, el=None, init=None):"
3279,    if init is None:
3280,        init = el
3281,
3282,    if len(dim)> 1:
3283,"        return list_ndim(dim[0:-1], None, [copy.copy(init) for x in range(dim[-1])])"
3284,
3285,    return [copy.deepcopy(init) for x in range(dim[0])]
3286,"dim = (3,5,2)"
3287,el = 1.0
3288,"l = list_ndim(dim, el)"
3289,"(3,5,2)"
3290,shape
3291,1.0
3292,init
3293,"[[[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]],"
3294," [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]],"
3295," [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]]]"
3296,l[1][3][1] = 56
3297,l[2][2][0] = 36.0+0.0j
3298,l[0][1][0] = 'abc'
3299,"[[[1.0, 1.0], ['abc', 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]],"
3300," [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 56.0], [1.0, 1.0]],"
3301," [[1.0, 1.0], [1.0, 1.0], [(36+0j), 1.0], [1.0, 1.0], [1.0, 1.0]]]"
3302,node_count = 4
3303,"colors = [0,1,2,3]"
3304,"sol_dict = {node:colors for node in range(0,node_count)}"
3305,>>> sol_dict
3306,"{0: [0, 1, 2, 3], 1: [0, 1, 2, 3], 2: [0, 1, 2, 3], 3: [0, 1, 2, 3]}"
3307,>>> [v is colors for v in sol_dict.values()]
3308,"[True, True, True, True]"
3309,>>> sol_dict[0].remove(1)
3310,>>> sol_dict
3311,"{0: [0, 2, 3], 1: [0, 2, 3], 2: [0, 2, 3], 3: [0, 2, 3]}"
3312,">>> colors = [0,1,2,3]"
3313,">>> sol_dict = {node:colors[:] for node in range(0,node_count)}"
3314,>>> sol_dict
3315,"{0: [0, 1, 2, 3], 1: [0, 1, 2, 3], 2: [0, 1, 2, 3], 3: [0, 1, 2, 3]}"
3316,>>> sol_dict[0].remove(1)
3317,>>> sol_dict
3318,"{0: [0, 2, 3], 1: [0, 1, 2, 3], 2: [0, 1, 2, 3], 3: [0, 1, 2, 3]}"
3319,>>> lists = [[]] * 3
3320,>>> lists
3321,"[[], [], []]"
3322,>>> lists[0].append(3)
3323,>>> lists
3324,"[[3], [3], [3]]"
3325,[[]]
3326,[[]] * 3
3327,>>> A = [[None] * 2] * 3
3328,>>> A
3329,"[[None, None], [None, None], [None, None]]"
3330,>>> A[0][0] = 5
3331,>>> A
3332,"[[5, None], [5, None], [5, None]]"
3333,*
3334,def foo(a=[]):
3335,    a.append(5)
3336,    return a
3337,[5]
3338,>>> foo()
3339,[5]
3340,>>> foo()
3341,"[5, 5]"
3342,>>> foo()
3343,"[5, 5, 5]"
3344,>>> foo()
3345,"[5, 5, 5, 5]"
3346,>>> foo()
3347,>>> def a():
3348,"...     print(""a executed"")"
3349,...     return []
3350,... 
3351,>>>            
3352,>>> def b(x=a()):
3353,...     x.append(5)
3354,...     print(x)
3355,... 
3356,a executed
3357,>>> b()
3358,[5]
3359,>>> b()
3360,"[5, 5]"
3361,x
3362,def
3363,[5]
3364,foo([1])
3365,"[1, 5]"
3366,[5]
3367,[5]
3368,functions are objects
3369,"fruits = (""apples"", ""bananas"", ""loganberries"")"
3370,
3371,def eat(food=fruits):
3372,    ...
3373,"(""apples"", ""bananas"", ""loganberries"")"
3374,def some_random_function():
3375,    global fruits
3376,"    fruits = (""blueberries"", ""mangos"")"
3377,foo
3378,"StringBuffer s = new StringBuffer(""Hello World!"");"
3379,"Map<StringBuffer,Integer> counts = new HashMap<StringBuffer,Integer>();"
3380,"counts.put(s, 5);"
3381,"s.append(""!!!!"");"
3382,System.out.println( counts.get(s) );  // does this work?
3383,StringBuffer
3384,Map
3385,"(""blueberries"", ""mangos"")"
3386,some_random_function()
3387,fruits
3388,eat()
3389,global
3390,eat
3391,None
3392,def whats_on_the_telly(penguin=None):
3393,    if penguin is None:
3394,        penguin = []
3395,"    penguin.append(""property of the zoo"")"
3396,    return penguin
3397,a = []
3398,a
3399,a=[]
3400,def x(a=[]):
3401,def x(a=datetime.datetime.now()):
3402,a
3403,x
3404,datetime.now()
3405,b = datetime.datetime.now()
3406,def x(a=b):
3407,def x(static a=b):
3408,class {}
3409,class BananaBunch:
3410,    bananas = []
3411,
3412,"    def addBanana(self, banana):"
3413,        self.bananas.append(banana)
3414,property
3415,self.attribute = value
3416,2
3417,3
3418,func
3419,>>> def func(a = []):
3420,...    a.append(5)
3421,code
3422,[]
3423,a
3424,func
3425,Python 3.x
3426,__defaults__
3427,func_defaults
3428,>>> def func(a = []):
3429,...     a.append(5)
3430,...     
3431,a = []
3432,__defaults__
3433,>>> func.__defaults__
3434,"([],)"
3435,__defaults__
3436,>>> func()
3437,__defaults__
3438,>>> func.__defaults__
3439,"([5],)"
3440,list
3441,>>> func(); func(); func()
3442,>>> func.__defaults__
3443,"([5, 5, 5, 5],)"
3444,None
3445,def func(a = None):
3446,    # or: a = [] if a is None else a
3447,    if a is None:
3448,        a = []
3449,a
3450,__defaults__
3451,func
3452,id
3453,a
3454,__defaults__
3455,[0]
3456,__defaults__
3457,>>> def func(a = []): 
3458,...     a.append(5)
3459,...     return id(a)
3460,>>>
3461,>>> id(func.__defaults__[0]) == func()
3462,True
3463,def bar(a=input('Did you just see me without calling the function?')): 
3464,    pass  # use raw_input in Py2
3465,input()
3466,bar
3467,id(...)
3468,is
3469,is
3470,id(val)
3471,None
3472,__defaults__
3473,__defaults__
3474,def foo(arg=something_expensive_to_compute())):
3475,    ...
3476,funcs = [ lambda i=i: i for i in range(10)]
3477,i
3478,9
3479,def make_func(i): return lambda: i
3480,funcs = [make_func(i) for i in range(10)]
3481,"def foo(a='test', b=100, c=[]):"
3482,"   print a,b,c"
3483,inspect
3484,>>> inspect.getargspec(foo)
3485,"(['a', 'b', 'c'], None, None, ('test', 100, []))"
3486,_undefined = object()  # sentinel value
3487,
3488,"def foo(a=_undefined, b=_undefined, c=_undefined)"
3489,    if a is _undefined: a='test'
3490,    if b is _undefined: b=100
3491,    if c is _undefined: c=[]
3492,"def x(a=0, b=[], c=[], d=0):"
3493,    a = a + 1
3494,    b = b + [1]
3495,    c.append(1)
3496,"    print a, b, c"
3497,a
3498,b
3499,c
3500,__iadd__
3501,def foo(a=[]):                 # the same problematic function
3502,    a.append(5)
3503,    return a
3504,
3505,">>> somevar = [1, 2]           # an example without a default parameter"
3506,>>> foo(somevar)
3507,"[1, 2, 5]"
3508,>>> somevar
3509,"[1, 2, 5]                      # usually expected [1, 2]"
3510,copy
3511,deepcopy
3512,def foo(a=[]):
3513,    a = a[:]     # a copy
3514,    a.append(5)
3515,"    return a     # or everything safe by one line: ""return a + [5]"""
3516,some_dict.copy()
3517,some_set.copy()
3518,somelist[:]
3519,list(some_list)
3520,copy.copy(any_object)
3521,copy.deepcopy()
3522,class Test(object):            # the original problematic class
3523,"  def __init__(self, var1=[]):"
3524,    self._var1 = var1
3525,
3526,"somevar = [1, 2]               # an example without a default parameter"
3527,t1 = Test(somevar)
3528,t2 = Test(somevar)
3529,t1._var1.append([1])
3530,"print somevar                  # [1, 2, [1]] but usually expected [1, 2]"
3531,"print t2._var1                 # [1, 2, [1]] but usually expected [1, 2]"
3532,_var1
3533,def ...(var1=None):
3534,if var1 is None:
3535,var1 = []
3536,def f( a = None )
3537,"if a is None: a = [1, 2, 3]"
3538,"def func(a=[], b = 2):"
3539,    pass
3540,"def func(a=None, b = None):"
3541,    a_default = lambda: []
3542,    b_default = lambda: 2
3543,"    def actual_func(a=None, b=None):"
3544,        if a is None: a = a_default()
3545,        if b is None: b = b_default()
3546,    return actual_func
3547,func = func()
3548,>>> def foo(a):
3549,    a.append(5)
3550,    print a
3551,
3552,>>> a  = [5]
3553,>>> foo(a)
3554,"[5, 5]"
3555,>>> foo(a)
3556,"[5, 5, 5]"
3557,>>> foo(a)
3558,"[5, 5, 5, 5]"
3559,>>> foo(a)
3560,"[5, 5, 5, 5, 5]"
3561,foo
3562,append_5
3563,foo
3564,a
3565,append
3566,a
3567,cache={}
3568,None
3569,None
3570,def foo(mutable_default_argument=[]): # make a list the default argument
3571,"    """"""function that uses a list"""""""
3572,_a_list = [] # create a list in the globals
3573,
3574,def foo(mutable_default_argument=_a_list): # make it the default argument
3575,"    """"""function that uses a list"""""""
3576,
3577,del _a_list # remove globals name binding
3578,example.py
3579,print('1. Global scope being evaluated')
3580,
3581,def create_list():
3582,    '''noisily create a list for usage as a kwarg'''
3583,    l = []
3584,"    print('3. list being created and returned, id: ' + str(id(l)))"
3585,    return l
3586,
3587,print('2. example_function about to be compiled to an object')
3588,
3589,def example_function(default_kwarg1=create_list()):
3590,"    print('appending ""a"" in default default_kwarg1')"
3591,"    default_kwarg1.append(""a"")"
3592,    print('list with id: ' + str(id(default_kwarg1)) + 
3593,          ' - is now: ' + repr(default_kwarg1))
3594,
3595,print('4. example_function compiled: ' + repr(example_function))
3596,
3597,
3598,if __name__ == '__main__':
3599,    print('5. calling example_function twice!:')
3600,    example_function()
3601,    example_function()
3602,python example.py
3603,1. Global scope being evaluated
3604,2. example_function about to be compiled to an object
3605,"3. list being created and returned, id: 140502758808032"
3606,4. example_function compiled: <function example_function at 0x7fc9590905f0>
3607,5. calling example_function twice!:
3608,"appending ""a"" in default default_kwarg1"
3609,list with id: 140502758808032 - is now: ['a']
3610,"appending ""a"" in default default_kwarg1"
3611,"list with id: 140502758808032 - is now: ['a', 'a']"
3612,def example_function_2(default_kwarg=None):
3613,    if default_kwarg is None:
3614,        default_kwarg = []
3615,[]
3616,"def f(a, L=None):"
3617,    if L is None:
3618,        L = []
3619,    L.append(a)
3620,    return L
3621,def a(): return []
3622,
3623,def b(x=a()):
3624,    print x
3625,def
3626,def bar(a=[]):
3627,     print id(a)
3628,     a = a + [1]
3629,     print id(a)
3630,     return a
3631,
3632,>>> bar()
3633,4484370232
3634,4484524224
3635,[1]
3636,>>> bar()
3637,4484370232
3638,4484524152
3639,[1]
3640,>>> bar()
3641,"4484370232 # Never change, this is 'class property' of the function"
3642,4484523720 # Always a new object 
3643,[1]
3644,>>> id(bar.func_defaults[0])
3645,4484370232
3646,a = a + [1]
3647,a
3648,b = a + [1] ; print id(b)
3649,a.append(2)
3650,+
3651,b
3652,a
3653,id(a)
3654,"def print_tuple(some_tuple=(1,2,3)):"
3655,    print some_tuple
3656,
3657,print_tuple()        #1
3658,"print_tuple((1,2,3)) #2"
3659,#
3660,0 LOAD_GLOBAL              0 (print_tuple)
3661,3 CALL_FUNCTION            0
3662,6 POP_TOP
3663,7 LOAD_CONST               0 (None)
3664,10 RETURN_VALUE
3665,#
3666, 0 LOAD_GLOBAL              0 (print_tuple)
3667," 3 LOAD_CONST               4 ((1, 2, 3))"
3668, 6 CALL_FUNCTION            1
3669, 9 POP_TOP
3670,10 LOAD_CONST               0 (None)
3671,13 RETURN_VALUE
3672,def foo(a=[]):
3673,    a.append(5)
3674,    return a
3675,foo
3676,a
3677,foo
3678,foo.func_defs[0]
3679,a
3680,a
3681,foo
3682,foo
3683,foo.func_defs
3684,foo.func_defs[0]
3685,a
3686,a
3687,foo.func_defs[0]
3688,foo
3689,foo
3690,"def foo(a, L=None):"
3691,    if L is None:
3692,        L = []
3693,    L.append(a)
3694,    return L
3695,foo
3696,foo.func_defs[0]
3697,None
3698,L
3699,foo.func_defs[0]
3700,None
3701,L
3702,L = []
3703,foo.func_defs[0]
3704,L
3705,foo.func_defs[0]
3706,foo
3707,">>> def bar(b, data=None):"
3708,...     data = data or []
3709,...     data.append(b)
3710,...     return data
3711,... 
3712,>>> bar(3)
3713,[3]
3714,>>> bar(3)
3715,[3]
3716,>>> bar(3)
3717,[3]
3718,">>> bar(3, [34])"
3719,"[34, 3]"
3720,">>> bar(3, [34])"
3721,"[34, 3]"
3722,x=[]
3723,def f(x=[])
3724,def foo(list_arg=[5]):
3725,    return list_arg
3726,
3727,a = foo()
3728,a.append(6)
3729,>>> a
3730,"[5, 6]"
3731,
3732,b = foo()
3733,b.append(7)
3734,# The value of 6 appended to variable 'a' is now part of the list held by 'b'.
3735,>>> b
3736,"[5, 6, 7]  "
3737,
3738,"# Although 'a' is expecting to receive 6 (the last element it appended to the list),"
3739,# it actually receives the last element appended to the shared list.
3740,# It thus receives the value 7 previously appended by 'b'.
3741,>>> a.pop()             
3742,7
3743,id
3744,>>> id(a)
3745,5347866528
3746,
3747,>>> id(b)
3748,5347866528
3749,None
3750,None
3751,def foo(list_arg=None):
3752,"   """""""
3753,   :param list_arg:  A list of input values. 
3754,"                     If none provided, used a list with a default value of 5."
3755,"   """""""
3756,   if not list_arg:
3757,       list_arg = [5]
3758,   return list_arg
3759,
3760,a = foo()
3761,a.append(6)
3762,>>> a
3763,"[5, 6]"
3764,
3765,b = foo()
3766,b.append(7)
3767,>>> b
3768,"[5, 7]"
3769,
3770,c = foo([10])
3771,c.append(11)
3772,>>> c
3773,"[10, 11]"
3774,None
3775,object
3776,lambda
3777,type
3778,def foo(a=[]):
3779,    a = list(a)
3780,    a.append(5)
3781,    return a
3782,def foo(a=[]):
3783,    ...
3784,a
3785,pavlo
3786,def foo(a=pavlo):
3787,   ...
3788,a
3789,pavlo
3790,pavlo
3791,foo
3792,foo
3793,a
3794,pavlo
3795, >>> foo()
3796, [5]
3797,pavlo
3798,foo()
3799,pavlo
3800,>>> foo()
3801,"[5, 5]"
3802,a
3803,foo()
3804,pavlo
3805,">>> ivan = [1, 2, 3, 4]"
3806,>>> foo(a=ivan)
3807,"[1, 2, 3, 4, 5]"
3808,>>> ivan
3809,"[1, 2, 3, 4, 5]"
3810,pavlo
3811,"[5, 5]"
3812,>>> foo()
3813,"[5, 5, 5]"
3814,singleton = None
3815,
3816,def use_singleton():
3817,    global singleton
3818,
3819,    if singleton is None:
3820,        singleton = _make_singleton()
3821,
3822,    return singleton.use_me()
3823,singleton
3824,use_singleton
3825,# _make_singleton() is called only once when the def is executed
3826,def use_singleton(singleton=_make_singleton()):
3827,    return singleton.use_me()
3828,_make_singleton
3829,import inspect
3830,from copy import deepcopy  # copy would fail on deep arguments like nested dicts
3831,
3832,def sanify(function):
3833,"    def wrapper(*a, **kw):"
3834,        # store the default values
3835,        defaults = inspect.getargspec(function).defaults # for python2
3836,        # construct a new argument list
3837,        new_args = []
3838,"        for i, arg in enumerate(defaults):"
3839,            # allow passing positional arguments
3840,            if i in range(len(a)):
3841,                new_args.append(a[i])
3842,            else:
3843,                # copy the value
3844,                new_args.append(deepcopy(arg))
3845,"        return function(*new_args, **kw)"
3846,    return wrapper
3847,@sanify
3848,def foo(a=[]):
3849,    a.append(5)
3850,    return a
3851,
3852,foo() # '[5]'
3853,foo() # '[5]' -- as desired
3854,# the 'correct' approach
3855,"def bar(a=None, b=None, c=None):"
3856,    if a is None:
3857,        a = []
3858,    if b is None:
3859,        b = []
3860,    if c is None:
3861,        c = []
3862,    # finally do the actual work
3863,# the nasty decorator hack
3864,@sanify
3865,"def bar(a=[], b=[], c=[]):"
3866,"    # wow, works right out of the box!"
3867,foo(a=[4])
3868,"{""grandparent"": {""parent"": {""child"": ""value""}}}"
3869,copy
3870,deepcopy
3871,def example(errors=[]):
3872,    # statements
3873,    # Something went wrong
3874,    mistake = True
3875,    if mistake:
3876,        tryToFixIt(errors)
3877,        # Didn't work.. let's try again
3878,        tryToFixItAnotherway(errors)
3879,        # This time it worked
3880,    return errors
3881,
3882,def tryToFixIt(err):
3883,    err.append('Attempt to fix it')
3884,
3885,def tryToFixItAnotherway(err):
3886,    err.append('Attempt to fix it by another way')
3887,
3888,def main():
3889,    for item in range(2):
3890,        errors = example()
3891,    print '\n'.join(errors)
3892,
3893,main()
3894,Attempt to fix it
3895,Attempt to fix it by another way
3896,Attempt to fix it
3897,Attempt to fix it by another way
3898,errors
3899,cache={}
3900,cache={}
3901,@lru_cache
3902,def notastonishinganymore(a = []): 
3903,    '''The name is just a joke :)'''
3904,    a = a[:]
3905,    a.append(5)
3906,    return a
3907,def <name>(<args=defaults>):
3908,...                           # defining scope
3909,def name(parameter=default):  # ???
3910,    ...                       # execution scope
3911,def name
3912,name
3913,parameter
3914,def name
3915,name(parameter=...):
3916,name(...):
3917,default
3918,def <name>(<args=defaults>):
3919,default
3920,default
3921,def name(parameter=defined):  # set default at definition time
3922,    ...
3923,
3924,def name(parameter=default):     # delay default until execution time
3925,    parameter = default if parameter is None else parameter
3926,    ...
3927,def <name>(<args=defaults>):
3928,default
3929,def
3930,lambda
3931,a
3932,a
3933,a
3934,"def foo(x, items=None):"
3935,    if items is None:
3936,        items = []
3937,    items.append(x)
3938,    return items
3939,
3940,foo(1)  #return [1]
3941,foo(2)  #return [2]
3942,foo(3)  #return [3]
3943,[]
3944,None
3945,"def foo(x, items=[]):"
3946,    items.append(x)
3947,    return items
3948,
3949,foo(1)    # returns [1]
3950,"foo(2,[]) # returns [2]"
3951,"foo(3)    # returns [1,3]"
3952,items
3953,[]
3954,x
3955,items
3956,for i in range(10):
3957,    def callback():
3958,"        print ""clicked button"", i"
3959,"    UI.Button(""button %s"" % i, callback)"
3960,i
3961,x=[]
3962,for i in range(10):
3963,    def callback():
3964,        print(i)
3965,    x.append(callback) 
3966,x[7]()
3967,x[9]()
3968,i
3969,x[7]()
3970,9
3971,new_list = my_list
3972,new_list
3973,my_list
3974,new_list = my_list
3975,new_list
3976,my_list
3977,new_list = my_list
3978,new_list
3979,my_list
3980,list.copy()
3981,new_list = old_list.copy()
3982,new_list = old_list[:]
3983,list()
3984,new_list = list(old_list)
3985,copy.copy()
3986,import copy
3987,new_list = copy.copy(old_list)
3988,list()
3989,old_list
3990,copy.deepcopy()
3991,import copy
3992,new_list = copy.deepcopy(old_list)
3993,import copy
3994,
3995,class Foo(object):
3996,"    def __init__(self, val):"
3997,         self.val = val
3998,
3999,    def __repr__(self):
4000,        return f'Foo({self.val!r})'
4001,
4002,foo = Foo(1)
4003,
4004,"a = ['foo', foo]"
4005,b = a.copy()
4006,c = a[:]
4007,d = list(a)
4008,e = copy.copy(a)
4009,f = copy.deepcopy(a)
4010,
4011,# edit orignal list and instance 
4012,a.append('baz')
4013,foo.val = 5
4014,
4015,print(f'original: {a}\nlist.copy(): {b}\nslice: {c}\nlist(): {d}\ncopy: {e}\ndeepcopy: {f}')
4016,"original: ['foo', Foo(5), 'baz']"
4017,"list.copy(): ['foo', Foo(5)]"
4018,"slice: ['foo', Foo(5)]"
4019,"list(): ['foo', Foo(5)]"
4020,"copy: ['foo', Foo(5)]"
4021,"deepcopy: ['foo', Foo(1)]"
4022,my_list
4023,x = []; y = x; y.append(1); x
4024,[1]
4025,copy.deepcopy(old_list)
4026,Copy()
4027,Copy()
4028,for item in old_list: new_list.append(item)
4029,[i for i in old_list]
4030,copy.copy(old_list)
4031,list(old_list)
4032,new_list = []; new_list.extend(old_list)
4033,old_list[:]
4034,copy.copy()
4035,list[:]
4036,list(list)
4037,copy.deepcopy()
4038,from copy import deepcopy
4039,
4040,class old_class:
4041,    def __init__(self):
4042,        self.blah = 'blah'
4043,
4044,class new_class(object):
4045,    def __init__(self):
4046,        self.blah = 'blah'
4047,
4048,"dignore = {str: None, unicode: None, int: None, type(None): None}"
4049,
4050,"def Copy(obj, use_deepcopy=True):"
4051,    t = type(obj)
4052,
4053,"    if t in (list, tuple):"
4054,        if t == tuple:
4055,            # Convert to a list if a tuple to
4056,            # allow assigning to when copying
4057,            is_tuple = True
4058,            obj = list(obj)
4059,        else:
4060,            # Otherwise just do a quick slice copy
4061,            obj = obj[:]
4062,            is_tuple = False
4063,
4064,        # Copy each item recursively
4065,        for x in xrange(len(obj)):
4066,            if type(obj[x]) in dignore:
4067,                continue
4068,"            obj[x] = Copy(obj[x], use_deepcopy)"
4069,
4070,        if is_tuple:
4071,            # Convert back into a tuple again
4072,            obj = tuple(obj)
4073,
4074,    elif t == dict:
4075,        # Use the fast shallow dict copy() method and copy any
4076,"        # values which aren't immutable (like lists, dicts etc)"
4077,        obj = obj.copy()
4078,        for k in obj:
4079,            if type(obj[k]) in dignore:
4080,                continue
4081,"            obj[k] = Copy(obj[k], use_deepcopy)"
4082,
4083,    elif t in dignore:
4084,        # Numeric or string/unicode?
4085,"        # It's immutable, so ignore it!"
4086,        pass
4087,
4088,    elif use_deepcopy:
4089,        obj = deepcopy(obj)
4090,    return obj
4091,
4092,if __name__ == '__main__':
4093,    import copy
4094,    from time import time
4095,
4096,    num_times = 100000
4097,"    L = [None, 'blah', 1, 543.4532,"
4098,"         ['foo'], ('bar',), {'blah': 'blah'},"
4099,"         old_class(), new_class()]"
4100,
4101,    t = time()
4102,    for i in xrange(num_times):
4103,        Copy(L)
4104,"    print 'Custom Copy:', time()-t"
4105,
4106,    t = time()
4107,    for i in xrange(num_times):
4108,"        Copy(L, use_deepcopy=False)"
4109,"    print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', time()-t"
4110,
4111,    t = time()
4112,    for i in xrange(num_times):
4113,        copy.copy(L)
4114,"    print 'copy.copy:', time()-t"
4115,
4116,    t = time()
4117,    for i in xrange(num_times):
4118,        copy.deepcopy(L)
4119,"    print 'copy.deepcopy:', time()-t"
4120,
4121,    t = time()
4122,    for i in xrange(num_times):
4123,        L[:]
4124,"    print 'list slicing [:]:', time()-t"
4125,
4126,    t = time()
4127,    for i in xrange(num_times):
4128,        list(L)
4129,"    print 'list(L):', time()-t"
4130,
4131,    t = time()
4132,    for i in xrange(num_times):
4133,        [i for i in L]
4134,"    print 'list expression(L):', time()-t"
4135,
4136,    t = time()
4137,    for i in xrange(num_times):
4138,        a = []
4139,        a.extend(L)
4140,"    print 'list extend:', time()-t"
4141,
4142,    t = time()
4143,    for i in xrange(num_times):
4144,        a = []
4145,        for y in L:
4146,            a.append(y)
4147,"    print 'list append:', time()-t"
4148,
4149,    t = time()
4150,    for i in xrange(num_times):
4151,        a = []
4152,        a.extend(i for i in L)
4153,"    print 'generator expression extend:', time()-t"
4154,list.copy()
4155,newlist = old_list.copy()
4156,s.copy()
4157,s
4158,s[:]
4159,python3.8
4160,.copy()
4161,alist.copy()
4162,dict
4163,list
4164,slice
4165,a_copy = a_list.copy()
4166,a_copy = a_list[:]
4167,a_copy = a_list[:]
4168,a_copy = list(a_list)
4169,>>> timeit
4170,>>> l = range(20)
4171,>>> min(timeit.repeat(lambda: l[:]))
4172,0.30504298210144043
4173,>>> min(timeit.repeat(lambda: list(l)))
4174,0.40698814392089844
4175,list.copy
4176,a_copy = a_list.copy()
4177,>>> import timeit
4178,>>> l = list(range(20))
4179,>>> min(timeit.repeat(lambda: l[:]))
4180,0.38448613602668047
4181,>>> min(timeit.repeat(lambda: list(l)))
4182,0.6309100328944623
4183,>>> min(timeit.repeat(lambda: l.copy()))
4184,0.38122922903858125
4185,my_list
4186,new_list = my_list
4187,">>> l = [[], [], []]"
4188,>>> l_copy = l[:]
4189,>>> l_copy
4190,"[[], [], []]"
4191,>>> l_copy[0].append('foo')
4192,>>> l_copy
4193,"[['foo'], [], []]"
4194,>>> l
4195,"[['foo'], [], []]"
4196,deepcopy
4197,copy
4198,import copy
4199,a_deep_copy = copy.deepcopy(a_list)
4200,>>> import copy
4201,>>> l
4202,"[['foo'], [], []]"
4203,>>> l_deep_copy = copy.deepcopy(l)
4204,>>> l_deep_copy[0].pop()
4205,'foo'
4206,>>> l_deep_copy
4207,"[[], [], []]"
4208,>>> l
4209,"[['foo'], [], []]"
4210,eval
4211,problematic_deep_copy = eval(repr(a_list))
4212,>>> import timeit
4213,>>> import copy
4214,>>> l = range(10)
4215,>>> min(timeit.repeat(lambda: copy.deepcopy(l)))
4216,27.55826997756958
4217,>>> min(timeit.repeat(lambda: eval(repr(l))))
4218,29.04534101486206
4219,>>> import timeit
4220,>>> import copy
4221,>>> l = list(range(10))
4222,>>> min(timeit.repeat(lambda: copy.deepcopy(l)))
4223,16.84255409205798
4224,>>> min(timeit.repeat(lambda: eval(repr(l))))
4225,34.813894678023644
4226,list_copy=[]
4227,for item in list:     list_copy.append(copy(item))
4228,"list_1 = ['01', '98']"
4229,"list_2 = [['01', '98']]"
4230,copy
4231,list_1
4232,copy = list_1
4233,id
4234,print(id(copy))
4235,print(id(list_1))
4236,4329485320
4237,4329485320
4238,list
4239,copy = list_1
4240,list
4241,"copy[0] = ""modify"""
4242,
4243,print(copy)
4244,print(list_1)
4245,"['modify', '98']"
4246,"['modify', '98']"
4247,copy_1 = list_1[:]
4248,print(id(copy_1))
4249,print(id(list_1))
4250,
4251,4338792136
4252,4338791432
4253,"copy_1[0] = ""modify"""
4254,
4255,print(list_1)
4256,print(copy_1)
4257,"['01', '98']"
4258,"['modify', '98']"
4259,copy_2 = list_2[:]
4260,list_2
4261,list_2
4262,"print(id((list_2)), id(copy_2))"
4263,4330403592 4330403528
4264,"copy_2[0][1] = ""modify"""
4265,
4266,"print(list_2, copy_2)"
4267,"[['01', 'modify']] [['01', 'modify']]"
4268,copy_2 = list_2[:]
4269,id
4270,print(id(copy_2[0]))
4271,print(id(list_2[0]))
4272,4329485832
4273,4329485832
4274,copy_2 = list_2[:]
4275,deepcopy
4276,from copy import deepcopy
4277,deep = deepcopy(list_2)
4278,"print(id((list_2)), id(deep))"
4279,
4280,4322146056 4322148040
4281,print(id(deep[0]))
4282,print(id(list_2[0]))
4283,4322145992
4284,4322145800
4285,deep = deepcopy(list_2)
4286,"deep[0][1] = ""modify"""
4287,"print(list_2, deep)"
4288,"[['01', '98']] [['01', 'modify']]"
4289,my_list
4290,new_list
4291,my_list
4292,new_list
4293,new_list
4294,"new_list = list(my_list)  # or my_list[:], but I prefer this syntax"
4295,# is simply a shorter way of:
4296,new_list = [element for element in my_list]
4297,import copy  
4298,# each element must have __copy__ defined for this...
4299,new_list = [copy.copy(element) for element in my_list]
4300,import copy
4301,# each element must have __deepcopy__ defined for this...
4302,new_list = copy.deepcopy(my_list)
4303,thing[:]
4304,">>> a = [1,2]"
4305,>>> b = a[:]
4306,>>> a += [3]
4307,>>> a
4308,"[1, 2, 3]"
4309,>>> b
4310,"[1, 2]"
4311,>>> 
4312,list.copy()
4313,"*new_list, = list"
4314,new_list = [*list]
4315,METHOD                TIME TAKEN
4316,b = [*a]               2.75180600000021
4317,b = a * 1              3.50215399999990
4318,b = a[:]               3.78278899999986  # Python 2 winner (see above)
4319,"b = a.copy()           4.20556500000020  # Python 3 ""slice equivalent"" (see above)"
4320,b = []; b.extend(a)    4.68069800000012
4321,b = a[0:len(a)]        6.84498999999959
4322,"*b, = a                7.54031799999984"
4323,b = list(a)            7.75815899999997
4324,b = [i for i in a]    18.4886440000000
4325,b = copy.copy(a)      18.8254879999999
4326,b = []
4327,for item in a:
4328,  b.append(item)      35.4729199999997
4329,list.copy()
4330,b = [*a]
4331,"*b, = a"
4332,b = a * 1
4333,copy.copy()
4334,import timeit
4335,
4336,COUNT = 50000000
4337,"print(""Array duplicating. Tests run"", COUNT, ""times"")"
4338,"setup = 'a = [0,1,2,3,4,5,6,7,8,9]; import copy'"
4339,
4340,"print(""b = list(a)\t\t"", timeit.timeit(stmt='b = list(a)', setup=setup, number=COUNT))"
4341,"print(""b = copy.copy(a)\t"", timeit.timeit(stmt='b = copy.copy(a)', setup=setup, number=COUNT))"
4342,"print(""b = a.copy()\t\t"", timeit.timeit(stmt='b = a.copy()', setup=setup, number=COUNT))"
4343,"print(""b = a[:]\t\t"", timeit.timeit(stmt='b = a[:]', setup=setup, number=COUNT))"
4344,"print(""b = a[0:len(a)]\t\t"", timeit.timeit(stmt='b = a[0:len(a)]', setup=setup, number=COUNT))"
4345,"print(""*b, = a\t\t\t"", timeit.timeit(stmt='*b, = a', setup=setup, number=COUNT))"
4346,"print(""b = []; b.extend(a)\t"", timeit.timeit(stmt='b = []; b.extend(a)', setup=setup, number=COUNT))"
4347,"print(""b = []; for item in a: b.append(item)\t"", timeit.timeit(stmt='b = []\nfor item in a:  b.append(item)', setup=setup, number=COUNT))"
4348,"print(""b = [i for i in a]\t"", timeit.timeit(stmt='b = [i for i in a]', setup=setup, number=COUNT))"
4349,"print(""b = [*a]\t\t"", timeit.timeit(stmt='b = [*a]', setup=setup, number=COUNT))"
4350,"print(""b = a * 1\t\t"", timeit.timeit(stmt='b = a * 1', setup=setup, number=COUNT))"
4351,b=[*a]
4352,a * 1
4353,newList = oldList[:]
4354,copy.deepcopy()
4355,list
4356,deepcopy
4357,new_list = old_list[:]
4358,copy.copy(old_list)'
4359,old_list.copy()
4360,list
4361,old_list
4362,new_list
4363,list
4364,eval()
4365,copy.deepcopy()
4366,copy.deepcopy()
4367,timeit
4368,copy
4369,copy.deepcopy
4370,repr()
4371,eval()
4372,eval()
4373,eval()
4374,input()
4375,sys.agrv
4376,new_list = eval(repr(old_list))
4377,*
4378,"old_list = [1, 2, 3]"
4379,
4380,new_list = [*old_list]
4381,
4382,new_list.append(4)
4383,"old_list == [1, 2, 3]"
4384,"new_list == [1, 2, 3, 4]"
4385,x = [random.random() for _ in range(1000)]
4386,
4387,%timeit a = list(x)
4388,%timeit a = x.copy()
4389,%timeit a = x[:]
4390,
4391,%timeit a = [*x]
4392,
4393,"#: 2.47 µs ± 38.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
4394,"#: 2.47 µs ± 54.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
4395,"#: 2.39 µs ± 58.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
4396,
4397,"#: 2.22 µs ± 43.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
4398,old_list
4399,new_list
4400,new_list = my_list[:]
4401,new_list = my_list
4402,new_list = my_list
4403,new_list = my_list[:]
4404,new_list = list(old_list)
4405,import copy
4406,new_list = copy.deepcopy(old_list)
4407,my_list[:]
4408,copy.deepcopy()
4409,new_list = my_list * 1       # Solution 1 when you are not using nested lists
4410,import copy
4411,new_list = copy.deepcopy(my_list)   # Solution 2 when you are using nested lists
4412,new_list = my_list[:]
4413,>>> a = range(5)
4414,>>> b = a*1
4415,">>> a,b"
4416,"([0, 1, 2, 3, 4], [0, 1, 2, 3, 4])"
4417,>>> a[2] = 55
4418,">>> a,b"
4419,"([0, 1, 55, 3, 4], [0, 1, 2, 3, 4])"
4420,>>> from copy import deepcopy
4421,">>> a = [range(i,i+4) for i in range(3)]"
4422,>>> a
4423,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]"
4424,>>> b = a*1
4425,>>> c = deepcopy(a)
4426,">>> for i in (a, b, c): print i"
4427,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]"
4428,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]"
4429,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]"
4430,>>> a[2].append('99')
4431,">>> for i in (a, b, c): print i"
4432,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5, 99]]"
4433,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5, 99]]   # Solution #1 didn't work in nested list"
4434,"[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]       # Solution #2 - DeepCopy worked in nested list"
4435,def deepcopy(x):
4436,"  immutables = (str, int, bool, float)"
4437,"  mutables = (list, dict, tuple)"
4438,"  if isinstance(x, immutables):"
4439,    return x
4440,"  elif isinstance(x, mutables):"
4441,"    if isinstance(x, tuple):"
4442,      return tuple(deepcopy(list(x)))
4443,"    elif isinstance(x, list):"
4444,      return [deepcopy(y) for y in x]
4445,"    elif isinstance(x, dict):"
4446,      values = [deepcopy(y) for y in list(x.values())]
4447,      keys = list(x.keys())
4448,"      return dict(zip(keys, values))"
4449,"[1, 2, 3]"
4450,"[x for x in [1, 2, 3]]"
4451,"[[1, 2], [3, 4], [5, 6]]"
4452,[x for x in _list]
4453,[deepcopy_list(x) for x in _list]
4454,def deepcopy_list(x):
4455,"  if isinstance(x, (str, bool, float, int)):"
4456,    return x
4457,  else:
4458,    return [deepcopy_list(y) for y in x]
4459,copy.copy()
4460,copy.deepcopy()
4461,import copy
4462,
4463,class MyList(list):
4464,    pass
4465,
4466,"lst = MyList([1,2,3])"
4467,
4468,lst.name = 'custom list'
4469,
4470,d = {
4471,"'original': lst,"
4472,"'slicecopy' : lst[:],"
4473,"'lstcopy' : lst.copy(),"
4474,"'copycopy': copy.copy(lst),"
4475,'deepcopy': copy.deepcopy(lst)
4476,}
4477,
4478,
4479,"for k,v in d.items():"
4480,"    print('lst: {}'.format(k), end=', ')"
4481,    try:
4482,        name = v.name
4483,    except AttributeError:
4484,        name = 'NA'
4485,    print('name: {}'.format(name))
4486,"lst: original, name: custom list"
4487,"lst: slicecopy, name: NA"
4488,"lst: lstcopy, name: NA"
4489,"lst: copycopy, name: custom list"
4490,"lst: deepcopy, name: custom list"
4491,"    list1 = ['apples','bananas','pineapples']"
4492,    list2 = list1
4493,copy.copy()
4494,copy.deepcopy()
4495,">>> b = a = ['hell', 'word']"
4496,">>> c = ['hell', 'word']"
4497,
4498,">>> id(a), id(b), id(c)"
4499,"(4424020872, 4424020872, 4423979272) "
4500,     |           |
4501,      -----------
4502,
4503,">>> id(a[0]), id(b[0]), id(c[0])"
4504,"(4424018328, 4424018328, 4424018328) # all referring to same 'hell'"
4505,     |           |           |
4506,      -----------------------
4507,
4508,">>> id(a[0][0]), id(b[0][0]), id(c[0][0])"
4509,"(4422785208, 4422785208, 4422785208) # all referring to same 'h'"
4510,     |           |           |
4511,      -----------------------
4512,
4513,>>> a[0] += 'o'
4514,">>> a,b,c"
4515,"(['hello', 'word'], ['hello', 'word'], ['hell', 'word'])  # b changed too"
4516,">>> id(a[0]), id(b[0]), id(c[0])"
4517,"(4424018384, 4424018384, 4424018328) # augmented assignment changed a[0],b[0]"
4518,     |           |
4519,      -----------
4520,
4521,">>> b = a = ['hell', 'word']"
4522,">>> id(a[0]), id(b[0]), id(c[0])"
4523,"(4424018328, 4424018328, 4424018328) # the same hell"
4524,     |           |           |
4525,      -----------------------
4526,
4527,>>> import gc
4528,>>> gc.get_referrers(a[0]) 
4529,"[['hell', 'word'], ['hell', 'word']]  # one copy belong to a,b, the another for c"
4530,>>> gc.get_referrers(('hell'))
4531,"[['hell', 'word'], ['hell', 'word'], ('hell', None)] # ('hello', None) "
4532,l2 = l + []
4533,"l = [1,2,3]"
4534,l2 = l + []
4535,"print(l,l2)"
4536,l[0] = 'a'
4537,"print(l,l2)"
4538,b = [*a]
4539,from copy import deepcopy
4540,
4541,"a = [   [ list(range(1, 3)) for i in range(3) ]   ]"
4542,b = deepcopy(a)
4543,b[0][1]=[3]
4544,print('Deep:')
4545,print(a)
4546,print(b)
4547,print('-----------------------------')
4548,"a = [   [ list(range(1, 3)) for i in range(3) ]   ]"
4549,b = a*1
4550,b[0][1]=[3]
4551,print('*1:')
4552,print(a)
4553,print(b)
4554,print('-----------------------------')
4555,"a = [   [ list(range(1, 3)) for i in range(3) ] ]"
4556,b = a[:]
4557,b[0][1]=[3]
4558,print('Vector copy:')
4559,print(a)
4560,print(b)
4561,print('-----------------------------')
4562,"a = [   [ list(range(1, 3)) for i in range(3) ]  ]"
4563,b = list(a)
4564,b[0][1]=[3]
4565,print('List copy:')
4566,print(a)
4567,print(b)
4568,print('-----------------------------')
4569,"a = [   [ list(range(1, 3)) for i in range(3) ]  ]"
4570,b = a.copy()
4571,b[0][1]=[3]
4572,print('.copy():')
4573,print(a)
4574,print(b)
4575,print('-----------------------------')
4576,"a = [   [ list(range(1, 3)) for i in range(3) ]  ]"
4577,b = a
4578,b[0][1]=[3]
4579,print('Shallow:')
4580,print(a)
4581,print(b)
4582,print('-----------------------------')
4583,Deep:
4584,"[[[1, 2], [1, 2], [1, 2]]]"
4585,"[[[1, 2], [3], [1, 2]]]"
4586,-----------------------------
4587,*1:
4588,"[[[1, 2], [3], [1, 2]]]"
4589,"[[[1, 2], [3], [1, 2]]]"
4590,-----------------------------
4591,Vector copy:
4592,"[[[1, 2], [3], [1, 2]]]"
4593,"[[[1, 2], [3], [1, 2]]]"
4594,-----------------------------
4595,List copy:
4596,"[[[1, 2], [3], [1, 2]]]"
4597,"[[[1, 2], [3], [1, 2]]]"
4598,-----------------------------
4599,.copy():
4600,"[[[1, 2], [3], [1, 2]]]"
4601,"[[[1, 2], [3], [1, 2]]]"
4602,-----------------------------
4603,Shallow:
4604,"[[[1, 2], [3], [1, 2]]]"
4605,"[[[1, 2], [3], [1, 2]]]"
4606,-----------------------------
4607,new_list = my_list
4608,my_list
4609,new_list
4610,C
4611,"int my_list[] = [1,2,3,4];"
4612,int *new_list;
4613,new_list = my_list;
4614,import copy
4615,new_list = copy.deepcopy(my_list)
4616,dicts
4617,from random import randint
4618,from time import time
4619,import copy
4620,
4621,item_count = 100000
4622,
4623,"def copy_type(l1: list, l2: list):"
4624,  if l1 == l2:
4625,    return 'shallow'
4626,  return 'deep'
4627,
4628,"def run_time(start, end):"
4629,  run = end - start
4630,  return int(run * 1000000)
4631,
4632,def list_combine(data):
4633,  l1 = [data for i in range(item_count)]
4634,  start = time()
4635,  l2 = [] + l1
4636,  end = time()
4637,  if type(data) == dict:
4638,    l2[0]['test'].append(1)
4639,  elif type(data) == list:
4640,    l2.append(1)
4641,"  return {'method': 'combine', 'copy_type': copy_type(l1, l2), "
4642,"          'time_µs': run_time(start, end)}"
4643,
4644,def list_extend(data):
4645,  l1 = [data for i in range(item_count)]
4646,  start = time()
4647,  l2 = []
4648,  l2.extend(l1)
4649,  end = time()
4650,  if type(data) == dict:
4651,    l2[0]['test'].append(1)
4652,  elif type(data) == list:
4653,    l2.append(1)
4654,"  return {'method': 'extend', 'copy_type': copy_type(l1, l2), "
4655,"          'time_µs': run_time(start, end)}"
4656,
4657,def list_unpack(data):
4658,  l1 = [data for i in range(item_count)]
4659,  start = time()
4660,  l2 = [*l1]
4661,  end = time()
4662,  if type(data) == dict:
4663,    l2[0]['test'].append(1)
4664,  elif type(data) == list:
4665,    l2.append(1)
4666,"  return {'method': 'unpack', 'copy_type': copy_type(l1, l2), "
4667,"          'time_µs': run_time(start, end)}"
4668,
4669,def list_deepcopy(data):
4670,  l1 = [data for i in range(item_count)]
4671,  start = time()
4672,  l2 = copy.deepcopy(l1)
4673,  end = time()
4674,  if type(data) == dict:
4675,    l2[0]['test'].append(1)
4676,  elif type(data) == list:
4677,    l2.append(1)
4678,"  return {'method': 'deepcopy', 'copy_type': copy_type(l1, l2), "
4679,"          'time_µs': run_time(start, end)}"
4680,
4681,def list_copy(data):
4682,  l1 = [data for i in range(item_count)]
4683,  start = time()
4684,  l2 = list.copy(l1)
4685,  end = time()
4686,  if type(data) == dict:
4687,    l2[0]['test'].append(1)
4688,  elif type(data) == list:
4689,    l2.append(1)
4690,"  return {'method': 'copy', 'copy_type': copy_type(l1, l2), "
4691,"          'time_µs': run_time(start, end)}"
4692,
4693,def list_slice(data):
4694,  l1 = [data for i in range(item_count)]
4695,  start = time()
4696,  l2 = l1[:]
4697,  end = time()
4698,  if type(data) == dict:
4699,    l2[0]['test'].append(1)
4700,  elif type(data) == list:
4701,    l2.append(1)
4702,"  return {'method': 'slice', 'copy_type': copy_type(l1, l2), "
4703,"          'time_µs': run_time(start, end)}"
4704,
4705,def list_loop(data):
4706,  l1 = [data for i in range(item_count)]
4707,  start = time()
4708,  l2 = []
4709,  for i in range(len(l1)):
4710,    l2.append(l1[i])
4711,  end = time()
4712,  if type(data) == dict:
4713,    l2[0]['test'].append(1)
4714,  elif type(data) == list:
4715,    l2.append(1)
4716,"  return {'method': 'loop', 'copy_type': copy_type(l1, l2), "
4717,"          'time_µs': run_time(start, end)}"
4718,
4719,def list_list(data):
4720,  l1 = [data for i in range(item_count)]
4721,  start = time()
4722,  l2 = list(l1)
4723,  end = time()
4724,  if type(data) == dict:
4725,    l2[0]['test'].append(1)
4726,  elif type(data) == list:
4727,    l2.append(1)
4728,"  return {'method': 'list()', 'copy_type': copy_type(l1, l2), "
4729,"          'time_µs': run_time(start, end)}"
4730,
4731,if __name__ == '__main__':
4732,"  list_type = [{'list[dict]': {'test': [1, 1]}}, "
4733,"          {'list[list]': [1, 1]}]"
4734,  store = []
4735,  for data in list_type:
4736,    key = list(data.keys())[0]
4737,"    store.append({key: [list_unpack(data[key]), list_extend(data[key]), "
4738,"                list_combine(data[key]), list_deepcopy(data[key]), "
4739,"                list_copy(data[key]), list_slice(data[key]),           "
4740,                list_loop(data[key])]})
4741,  print(store)
4742,"[{""list[dict]"": ["
4743,"  {""method"": ""unpack"", ""copy_type"": ""shallow"", ""time_µs"": 56149},"
4744,"  {""method"": ""extend"", ""copy_type"": ""shallow"", ""time_µs"": 52991},"
4745,"  {""method"": ""combine"", ""copy_type"": ""shallow"", ""time_µs"": 53726},"
4746,"  {""method"": ""deepcopy"", ""copy_type"": ""deep"", ""time_µs"": 2702616},"
4747,"  {""method"": ""copy"", ""copy_type"": ""shallow"", ""time_µs"": 52204},"
4748,"  {""method"": ""slice"", ""copy_type"": ""shallow"", ""time_µs"": 52223},"
4749,"  {""method"": ""loop"", ""copy_type"": ""shallow"", ""time_µs"": 836928}]},"
4750,"{""list[list]"": ["
4751,"  {""method"": ""unpack"", ""copy_type"": ""deep"", ""time_µs"": 52313},"
4752,"  {""method"": ""extend"", ""copy_type"": ""deep"", ""time_µs"": 52550},"
4753,"  {""method"": ""combine"", ""copy_type"": ""deep"", ""time_µs"": 53203},"
4754,"  {""method"": ""deepcopy"", ""copy_type"": ""deep"", ""time_µs"": 2608560},"
4755,"  {""method"": ""copy"", ""copy_type"": ""deep"", ""time_µs"": 53210},"
4756,"  {""method"": ""slice"", ""copy_type"": ""deep"", ""time_µs"": 52937},"
4757,"  {""method"": ""loop"", ""copy_type"": ""deep"", ""time_µs"": 834774}"
4758,]}]
4759,pd.DataFrame.pivot
4760,pivot
4761,import numpy as np
4762,import pandas as pd
4763,from numpy.core.defchararray import add
4764,
4765,"np.random.seed([3,1415])"
4766,n = 20
4767,
4768,"cols = np.array(['key', 'row', 'item', 'col'])"
4769,"arr1 = (np.random.randint(5, size=(n, 4)) // [2, 1, 2, 1]).astype(str)"
4770,
4771,df = pd.DataFrame(
4772,"    add(cols, arr1), columns=cols"
4773,).join(
4774,"    pd.DataFrame(np.random.rand(n, 2).round(2)).add_prefix('val')"
4775,)
4776,print(df)
4777,
4778,     key   row   item   col  val0  val1
4779,0   key0  row3  item1  col3  0.81  0.04
4780,1   key1  row2  item1  col2  0.44  0.07
4781,2   key1  row0  item1  col0  0.77  0.01
4782,3   key0  row4  item0  col2  0.15  0.59
4783,4   key1  row0  item2  col1  0.81  0.64
4784,5   key1  row2  item2  col4  0.13  0.88
4785,6   key2  row4  item1  col3  0.88  0.39
4786,7   key1  row4  item1  col1  0.10  0.07
4787,8   key1  row0  item2  col4  0.65  0.02
4788,9   key1  row2  item0  col2  0.35  0.61
4789,10  key2  row0  item2  col1  0.40  0.85
4790,11  key2  row4  item1  col2  0.64  0.25
4791,12  key0  row2  item2  col3  0.50  0.44
4792,13  key0  row4  item1  col4  0.24  0.46
4793,14  key1  row3  item2  col3  0.28  0.11
4794,15  key0  row3  item1  col1  0.31  0.23
4795,16  key0  row0  item2  col3  0.86  0.01
4796,17  key0  row4  item0  col3  0.64  0.21
4797,18  key2  row2  item2  col0  0.13  0.45
4798,19  key0  row2  item0  col4  0.37  0.70
4799,"ValueError: Index contains duplicate entries, cannot reshape"
4800,df
4801,col
4802,row
4803,val0
4804, col   col0   col1   col2   col3  col4
4805, row
4806, row0  0.77  0.605    NaN  0.860  0.65
4807, row2  0.13    NaN  0.395  0.500  0.25
4808, row3   NaN  0.310    NaN  0.545   NaN
4809, row4   NaN  0.100  0.395  0.760  0.24
4810,df
4811,col
4812,row
4813,val0
4814,0
4815, col   col0   col1   col2   col3  col4
4816, row
4817, row0  0.77  0.605  0.000  0.860  0.65
4818, row2  0.13  0.000  0.395  0.500  0.25
4819, row3  0.00  0.310  0.000  0.545  0.00
4820, row4  0.00  0.100  0.395  0.760  0.24
4821,mean
4822,sum
4823, col   col0  col1  col2  col3  col4
4824, row
4825, row0  0.77  1.21  0.00  0.86  0.65
4826, row2  0.13  0.00  0.79  0.50  0.50
4827, row3  0.00  0.31  0.00  1.09  0.00
4828, row4  0.00  0.10  0.79  1.52  0.24
4829,        sum                          mean
4830, col   col0  col1  col2  col3  col4  col0   col1   col2   col3  col4
4831, row
4832, row0  0.77  1.21  0.00  0.86  0.65  0.77  0.605  0.000  0.860  0.65
4833, row2  0.13  0.00  0.79  0.50  0.50  0.13  0.000  0.395  0.500  0.25
4834, row3  0.00  0.31  0.00  1.09  0.00  0.00  0.310  0.000  0.545  0.00
4835, row4  0.00  0.10  0.79  1.52  0.24  0.00  0.100  0.395  0.760  0.24
4836,       val0                             val1
4837, col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4
4838, row
4839, row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02
4840, row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79
4841, row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00
4842, row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46
4843, item item0             item1                         item2
4844, col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4
4845, row
4846, row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65
4847, row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13
4848, row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00
4849, row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00
4850, item      item0             item1                         item2
4851, col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4
4852, key  row
4853, key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00
4854,      row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00
4855,      row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00
4856,      row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00
4857, key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65
4858,      row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13
4859,      row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00
4860,      row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00
4861, key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00
4862,      row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00
4863,      row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00
4864, col   col0  col1  col2  col3  col4
4865, row
4866, row0     1     2     0     1     1
4867, row2     1     0     2     1     2
4868, row3     0     1     0     2     0
4869, row4     0     1     2     2     1
4870,"np.random.seed([3, 1415])"
4871,"df2 = pd.DataFrame({'A': list('aaaabbbc'), 'B': np.random.choice(15, 8)})"
4872,df2
4873,   A   B
4874,0  a   0
4875,1  a  11
4876,2  a   2
4877,3  a  11
4878,4  b  10
4879,5  b  10
4880,6  b  14
4881,7  c   7
4882,      a     b    c
4883,0   0.0  10.0  7.0
4884,1  11.0  10.0  NaN
4885,2   2.0  14.0  NaN
4886,3  11.0   NaN  NaN
4887,pivot
4888,   1  2
4889,   1  1  2
4890,a  2  1  1
4891,b  2  1  0
4892,c  1  0  0
4893,   1|1  2|1  2|2
4894,a    2    1    1
4895,b    2    1    0
4896,c    1    0    0
4897,"ValueError: Index contains duplicate entries, cannot reshape"
4898,columns
4899,index
4900,pd.DataFrame.pivot
4901,row
4902,col
4903,"df.duplicated(['row', 'col']).any()"
4904,
4905,True
4906,pivot
4907,"df.pivot(index='row', columns='col', values='val0')"
4908,"df.set_index(['row', 'col'])['val0'].unstack()"
4909,pd.DataFrame.groupby
4910,pd.DataFrame.unstack
4911,unstack
4912,pd.DataFrame.pivot_table
4913,groupby
4914,pd.DataFrame.set_index
4915,pd.DataFrame.unstack
4916,groupby
4917,unstack
4918,pd.DataFrame.pivot
4919,set_index
4920,index
4921,columns
4922,values
4923,pivot_table
4924,pd.crosstab
4925,pivot_table
4926,pd.factorize
4927,np.bincount
4928,pd.get_dummies
4929,pd.DataFrame.dot
4930,pd.DataFrame.pivot_table
4931,df
4932,col
4933,row
4934,val0
4935,0
4936,pd.DataFrame.pivot_table
4937,fill_value
4938,0
4939,fill_value
4940,aggfunc='mean'
4941,    df.pivot_table(
4942,"        values='val0', index='row', columns='col',"
4943,"        fill_value=0, aggfunc='mean')"
4944,
4945,    col   col0   col1   col2   col3  col4
4946,    row
4947,    row0  0.77  0.605  0.000  0.860  0.65
4948,    row2  0.13  0.000  0.395  0.500  0.25
4949,    row3  0.00  0.310  0.000  0.545  0.00
4950,    row4  0.00  0.100  0.395  0.760  0.24
4951,pd.DataFrame.groupby
4952,"  df.groupby(['row', 'col'])['val0'].mean().unstack(fill_value=0)"
4953,pd.crosstab
4954,  pd.crosstab(
4955,"      index=df['row'], columns=df['col'],"
4956,"      values=df['val0'], aggfunc='mean').fillna(0)"
4957,mean
4958,sum
4959,pd.DataFrame.pivot_table
4960,  df.pivot_table(
4961,"      values='val0', index='row', columns='col',"
4962,"      fill_value=0, aggfunc='sum')"
4963,
4964,  col   col0  col1  col2  col3  col4
4965,  row
4966,  row0  0.77  1.21  0.00  0.86  0.65
4967,  row2  0.13  0.00  0.79  0.50  0.50
4968,  row3  0.00  0.31  0.00  1.09  0.00
4969,  row4  0.00  0.10  0.79  1.52  0.24
4970,pd.DataFrame.groupby
4971,"  df.groupby(['row', 'col'])['val0'].sum().unstack(fill_value=0)"
4972,pd.crosstab
4973,  pd.crosstab(
4974,"      index=df['row'], columns=df['col'],"
4975,"      values=df['val0'], aggfunc='sum').fillna(0)"
4976,pivot_table
4977,crosstab
4978,groupby.agg
4979,groupby.agg
4980,pd.DataFrame.pivot_table
4981,  df.pivot_table(
4982,"      values='val0', index='row', columns='col',"
4983,"      fill_value=0, aggfunc=[np.size, np.mean])"
4984,
4985,       size                      mean
4986,  col  col0 col1 col2 col3 col4  col0   col1   col2   col3  col4
4987,  row
4988,  row0    1    2    0    1    1  0.77  0.605  0.000  0.860  0.65
4989,  row2    1    0    2    1    2  0.13  0.000  0.395  0.500  0.25
4990,  row3    0    1    0    2    0  0.00  0.310  0.000  0.545  0.00
4991,  row4    0    1    2    2    1  0.00  0.100  0.395  0.760  0.24
4992,pd.DataFrame.groupby
4993,"  df.groupby(['row', 'col'])['val0'].agg(['size', 'mean']).unstack(fill_value=0)"
4994,pd.crosstab
4995,  pd.crosstab(
4996,"      index=df['row'], columns=df['col'],"
4997,"      values=df['val0'], aggfunc=[np.size, np.mean]).fillna(0, downcast='infer')"
4998,pd.DataFrame.pivot_table
4999,"values=['val0', 'val1']"
5000,  df.pivot_table(
5001,"      values=['val0', 'val1'], index='row', columns='col',"
5002,"      fill_value=0, aggfunc='mean')"
5003,
5004,        val0                             val1
5005,  col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4
5006,  row
5007,  row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02
5008,  row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79
5009,  row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00
5010,  row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46
5011,pd.DataFrame.groupby
5012,"  df.groupby(['row', 'col'])['val0', 'val1'].mean().unstack(fill_value=0)"
5013,pd.DataFrame.pivot_table
5014,  df.pivot_table(
5015,"      values='val0', index='row', columns=['item', 'col'],"
5016,"      fill_value=0, aggfunc='mean')"
5017,
5018,  item item0             item1                         item2
5019,  col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4
5020,  row
5021,  row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65
5022,  row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13
5023,  row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00
5024,  row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00
5025,pd.DataFrame.groupby
5026,  df.groupby(
5027,"      ['row', 'item', 'col']"
5028,"  )['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)"
5029,pd.DataFrame.pivot_table
5030,  df.pivot_table(
5031,"      values='val0', index=['key', 'row'], columns=['item', 'col'],"
5032,"      fill_value=0, aggfunc='mean')"
5033,
5034,  item      item0             item1                         item2
5035,  col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4
5036,  key  row
5037,  key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00
5038,       row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00
5039,       row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00
5040,       row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00
5041,  key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65
5042,       row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13
5043,       row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00
5044,       row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00
5045,  key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00
5046,       row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00
5047,       row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00
5048,pd.DataFrame.groupby
5049,  df.groupby(
5050,"      ['key', 'row', 'item', 'col']"
5051,"  )['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)"
5052,pd.DataFrame.set_index
5053,  df.set_index(
5054,"      ['key', 'row', 'item', 'col']"
5055,"  )['val0'].unstack(['item', 'col']).fillna(0).sort_index(1)"
5056,pd.DataFrame.pivot_table
5057,"  df.pivot_table(index='row', columns='col', fill_value=0, aggfunc='size')"
5058,
5059,      col   col0  col1  col2  col3  col4
5060,  row
5061,  row0     1     2     0     1     1
5062,  row2     1     0     2     1     2
5063,  row3     0     1     0     2     0
5064,  row4     0     1     2     2     1
5065,pd.DataFrame.groupby
5066,"  df.groupby(['row', 'col'])['val0'].size().unstack(fill_value=0)"
5067,pd.crosstab
5068,"  pd.crosstab(df['row'], df['col'])"
5069,pd.factorize
5070,np.bincount
5071,  # get integer factorization `i` and unique values `r`
5072,  # for column `'row'`
5073,"  i, r = pd.factorize(df['row'].values)"
5074,  # get integer factorization `j` and unique values `c`
5075,  # for column `'col'`
5076,"  j, c = pd.factorize(df['col'].values)"
5077,  # `n` will be the number of rows
5078,  # `m` will be the number of columns
5079,"  n, m = r.size, c.size"
5080,  # `i * m + j` is a clever way of counting the
5081,  # factorization bins assuming a flat array of length
5082,"  # `n * m`.  Which is why we subsequently reshape as `(n, m)`"
5083,"  b = np.bincount(i * m + j, minlength=n * m).reshape(n, m)"
5084,"  # BTW, whenever I read this, I think 'Bean, Rice, and Cheese'"
5085,"  pd.DataFrame(b, r, c)"
5086,
5087,        col3  col2  col0  col1  col4
5088,  row3     2     0     0     1     0
5089,  row2     1     2     1     0     2
5090,  row0     1     0     1     2     1
5091,  row4     2     2     0     1     1
5092,pd.get_dummies
5093,  pd.get_dummies(df['row']).T.dot(pd.get_dummies(df['col']))
5094,
5095,        col0  col1  col2  col3  col4
5096,  row0     1     2     0     1     1
5097,  row2     1     0     2     1     2
5098,  row3     0     1     0     2     0
5099,  row4     0     1     2     2     1
5100,DataFrame.pivot
5101,GroupBy.cumcount
5102,"  df2.insert(0, 'count', df2.groupby('A').cumcount())"
5103,  df2
5104,
5105,     count  A   B
5106,  0      0  a   0
5107,  1      1  a  11
5108,  2      2  a   2
5109,  3      3  a  11
5110,  4      0  b  10
5111,  5      1  b  10
5112,  6      2  b  14
5113,  7      0  c   7
5114,DataFrame.pivot
5115,  df2.pivot(*df2)
5116,"  # df2.pivot(index='count', columns='A', values='B')"
5117,
5118,  A         a     b    c
5119,  count
5120,  0       0.0  10.0  7.0
5121,  1      11.0  10.0  NaN
5122,  2       2.0  14.0  NaN
5123,  3      11.0   NaN  NaN
5124,DataFrame.pivot_table
5125,DataFrame.pivot
5126,DataFrame.pivot_table
5127,GroupBy.cumcount
5128,index
5129,"  df2.pivot_table(index=df2.groupby('A').cumcount(), columns='A', values='B')"
5130,
5131,  A         a     b    c
5132,  0       0.0  10.0  7.0
5133,  1      11.0  10.0  NaN
5134,  2       2.0  14.0  NaN
5135,  3      11.0   NaN  NaN
5136,pivot
5137,columns
5138,object
5139,join
5140,df.columns = df.columns.map('|'.join)
5141,format
5142,df.columns = df.columns.map('{0[0]}|{0[1]}'.format)
5143,KeyError: 'A'
5144,df
5145,df2
5146,df
5147,"d = data = {'A': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 5},"
5148," 'B': {0: 'a', 1: 'b', 2: 'c', 3: 'a', 4: 'b', 5: 'a', 6: 'c'}}"
5149,df = pd.DataFrame(d)
5150,
5151,   A  B
5152,0  1  a
5153,1  1  b
5154,2  1  c
5155,3  2  a
5156,4  2  b
5157,5  3  a
5158,6  5  c
5159,   0     1     2
5160,A
5161,1  a     b     c
5162,2  a     b  None
5163,3  a  None  None
5164,5  c  None  None
5165,df.groupby
5166,pd.Series.tolist
5167,t = df.groupby('A')['B'].apply(list)
5168,"out = pd.DataFrame(t.tolist(),index=t.index)"
5169,out
5170,   0     1     2
5171,A
5172,1  a     b     c
5173,2  a     b  None
5174,3  a  None  None
5175,5  c  None  None
5176,pd.pivot_table
5177,df.squeeze.
5178,"t = df.pivot_table(index='A',values='B',aggfunc=list).squeeze()"
5179,"out = pd.DataFrame(t.tolist(),index=t.index)"
5180,df = pd.DataFrame({
5181,"    'foo': ['one', 'one', 'one', 'two', 'two', 'two'],"
5182,"    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],"
5183,"    'baz': [1, 2, 3, 4, 5, 6],"
5184,"    'zoo': ['x', 'y', 'z', 'q', 'w', 't']"
5185,})
5186,   foo bar  baz zoo
5187,0  one   A    1   x
5188,1  one   B    2   y
5189,2  one   C    3   z
5190,3  two   A    4   q
5191,4  two   B    5   w
5192,5  two   C    6   t
5193,pd.pivot(
5194,"    data=df,        "
5195,"    index='foo',    # Column to use to make new frame’s index. If None, uses existing index."
5196,"    columns='bar',  # Column to use to make new frame’s columns."
5197,    values='baz'    # Column(s) to use for populating new frame’s values.
5198,)
5199,bar  A  B  C
5200,foo         
5201,one  1  2  3
5202,two  4  5  6
5203,index
5204,columns
5205,values
5206,"rows, cols, vals, aggfuncs = ['row', 'key'], ['col', 'item'], ['val0', 'val1'], ['mean', 'sum']"
5207,
5208,df.groupby(rows+cols)[vals].agg(aggfuncs).unstack(cols)
5209,"# equivalently,"
5210,"df.pivot_table(vals, rows, cols, aggfuncs)"
5211,
5212,
5213,df.set_index(rows+cols)[vals].unstack(cols)
5214,"# equivalently, "
5215,"df.pivot(rows, cols, vals)"
5216,groupby().cumcount()
5217,rows
5218,cols
5219,rows
5220,cols
5221,droplevel().reset_index()
5222,"# for ""long"" result"
5223,"df.assign(ix=df.groupby(rows+cols).cumcount()).pivot(rows+['ix'], cols, vals).droplevel(-1).reset_index()"
5224,
5225,"# for ""wide"" result"
5226,"df.assign(ix=df.groupby(rows+cols).cumcount()).pivot(rows, cols+['ix'], vals).droplevel(-1, axis=1).reset_index()"
5227,"df = pd.DataFrame({'A': [1, 1, 2], 'B': ['a', 'a', 'b'], 'C': range(3)})"
5228,"df.pivot('A','B','C')"
5229,# long
5230,(
5231,"    df.assign(ix=df.groupby(['A','B']).cumcount())"
5232,"    .pivot(['A','ix'], 'B', 'C')"
5233,    .droplevel(-1).reset_index()
5234,)
5235,
5236,B  A    a    b
5237,0  1  0.0  NaN
5238,1  1  1.0  NaN
5239,2  2  NaN  2.0
5240,
5241,
5242,
5243,# wide
5244,(
5245,"    df.assign(ix=df.groupby(['A','B']).cumcount())"
5246,"    .pivot('A', ['B', 'ix'], 'C')"
5247,"    .droplevel(-1, axis=1).reset_index()"
5248,)
5249,
5250,B  A    a    a    b
5251,0  1  0.0  1.0  NaN
5252,1  2  NaN  NaN  2.0
5253,pivot_table()
5254,aggfunc
5255,groupby.agg()
5256,pivot()
5257,unstack()
5258,stack()
5259,from numpy.core.defchararray import add
5260,"np.random.seed([3,1415])"
5261,n = 20
5262,
5263,"cols = np.array(['key', 'row', 'item', 'col'])"
5264,"arr1 = (np.random.randint(5, size=(n, 4)) // [2, 1, 2, 1]).astype(str)"
5265,
5266,"df = pd.DataFrame(add(cols, arr1), columns=cols).join(pd.DataFrame(np.random.rand(n, 2).round(2)).add_prefix('val'))"
5267,
5268,"rows, cols, vals, aggfuncs = ['row', 'key'], ['col', 'val1'], ['val0'], ['mean', 'sum']"
5269,pivot_table()
5270,groupby()
5271,mean
5272,unstack()
5273,fill_value
5274,fillna()
5275,pv_1
5276,gb_1
5277,"pv_1 = df.pivot_table(index=rows, columns=cols, values=vals, aggfunc=aggfuncs, fill_value=0)"
5278,# internal operation of `pivot_table()`
5279,"gb_1 = df.groupby(rows+cols)[vals].agg(aggfuncs).unstack(cols).fillna(0, downcast=""infer"")"
5280,pv_1.equals(gb_1) # True
5281,pivot()
5282,unstack()
5283,# if the entire df needs to be pivoted
5284,"pv_2 = df.pivot(index=rows, columns=cols)"
5285,# internal operation of `pivot()`
5286,su_2 = df.set_index(rows+cols).unstack(cols)
5287,pv_2.equals(su_2) # True
5288,
5289,"# if only subset of df.columns need to be considered for pivot, specify so"
5290,"pv_3 = df.pivot(index=rows, columns=cols, values=vals)"
5291,su_3 = df.set_index(rows+cols)[vals].unstack(cols)
5292,pv_3.equals(su_3) # True
5293,
5294,# this is the precise method used internally (building a new DF seems to be faster than set_index of an existing one)
5295,"pv_4 = df.pivot(index=rows, columns=cols, values=vals)"
5296,"su_4 = pd.DataFrame(df[vals].values, index=pd.MultiIndex.from_arrays([df[c] for c in rows+cols]), columns=vals).unstack(cols)"
5297,pv_4.equals(su_4) # True
5298,crosstab()
5299,pivot_table()
5300,pivot_table()
5301,pivot_table()
5302,values
5303,pivot_table()
5304,values
5305,"indexes, columns, values = [df[r] for r in rows], [df[c] for c in cols], next(df[v] for v in vals)"
5306,# crosstab
5307,"ct_5 = pd.crosstab(indexes, columns, values, aggfunc=aggfuncs)"
5308,# internal operation (abbreviated)
5309,from functools import reduce
5310,"data = pd.DataFrame({f'row_{i}': r for i, r in enumerate(indexes)} | {f'col_{i}': c for i, c in enumerate(columns)} | {'v': values}, "
5311,"                    index = reduce(lambda x, y: x.intersection(y.index), indexes[1:]+columns, indexes[0].index)"
5312,                   )
5313,"pv_5 = data.pivot_table('v', [k for k in data if k[:4]=='row_'], [k for k in data if k[:4]=='col_'], aggfuncs)"
5314,ct_5.equals(pv_5) # True
5315,INNER
5316,LEFT
5317,RIGHT
5318,FULL
5319,OUTER
5320,JOIN
5321,merge
5322,join
5323,concat
5324,update
5325,merge
5326,np.random.seed(0)
5327,"left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})"
5328,"right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})"
5329,
5330,left
5331,
5332,  key     value
5333,0   A  1.764052
5334,1   B  0.400157
5335,2   C  0.978738
5336,3   D  2.240893
5337,
5338,right
5339,
5340,  key     value
5341,0   B  1.867558
5342,1   D -0.977278
5343,2   E  0.950088
5344,3   F -0.151357
5345,NaN
5346,merge
5347,"left.merge(right, on='key')"
5348,"# Or, if you want to be explicit"
5349,"# left.merge(right, on='key', how='inner')"
5350,
5351,  key   value_x   value_y
5352,0   B  0.400157  1.867558
5353,1   D  2.240893 -0.977278
5354,left
5355,right
5356,how='left'
5357,"left.merge(right, on='key', how='left')"
5358,
5359,  key   value_x   value_y
5360,0   A  1.764052       NaN
5361,1   B  0.400157  1.867558
5362,2   C  0.978738       NaN
5363,3   D  2.240893 -0.977278
5364,how='left'
5365,left
5366,right
5367,how='right'
5368,"left.merge(right, on='key', how='right')"
5369,
5370,  key   value_x   value_y
5371,0   B  0.400157  1.867558
5372,1   D  2.240893 -0.977278
5373,2   E       NaN  0.950088
5374,3   F       NaN -0.151357
5375,right
5376,left
5377,how='outer'
5378,"left.merge(right, on='key', how='outer')"
5379,
5380,  key   value_x   value_y
5381,0   A  1.764052       NaN
5382,1   B  0.400157  1.867558
5383,2   C  0.978738       NaN
5384,3   D  2.240893 -0.977278
5385,4   E       NaN  0.950088
5386,5   F       NaN -0.151357
5387,left
5388,"(left.merge(right, on='key', how='left', indicator=True)"
5389,"     .query('_merge == ""left_only""')"
5390,"     .drop('_merge', 1))"
5391,
5392,  key   value_x  value_y
5393,0   A  1.764052      NaN
5394,2   C  0.978738      NaN
5395,"left.merge(right, on='key', how='left', indicator=True)"
5396,
5397,  key   value_x   value_y     _merge
5398,0   A  1.764052       NaN  left_only
5399,1   B  0.400157  1.867558       both
5400,2   C  0.978738       NaN  left_only
5401,3   D  2.240893 -0.977278       both
5402,"(left.merge(right, on='key', how='right', indicator=True)"
5403,"     .query('_merge == ""right_only""')"
5404,"     .drop('_merge', 1))"
5405,
5406,  key  value_x   value_y
5407,2   E      NaN  0.950088
5408,3   F      NaN -0.151357
5409,"(left.merge(right, on='key', how='outer', indicator=True)"
5410,"     .query('_merge != ""both""')"
5411,"     .drop('_merge', 1))"
5412,
5413,  key   value_x   value_y
5414,0   A  1.764052       NaN
5415,2   C  0.978738       NaN
5416,4   E       NaN  0.950088
5417,5   F       NaN -0.151357
5418,left
5419,keyLeft
5420,right
5421,keyRight
5422,key
5423,left_on
5424,right_on
5425,on
5426,"left2 = left.rename({'key':'keyLeft'}, axis=1)"
5427,"right2 = right.rename({'key':'keyRight'}, axis=1)"
5428,
5429,left2
5430,
5431,  keyLeft     value
5432,0       A  1.764052
5433,1       B  0.400157
5434,2       C  0.978738
5435,3       D  2.240893
5436,
5437,right2
5438,
5439,  keyRight     value
5440,0        B  1.867558
5441,1        D -0.977278
5442,2        E  0.950088
5443,3        F -0.151357
5444,"left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')"
5445,
5446,  keyLeft   value_x keyRight   value_y
5447,0       B  0.400157        B  1.867558
5448,1       D  2.240893        D -0.977278
5449,keyLeft
5450,left
5451,keyRight
5452,right
5453,keyLeft
5454,keyRight
5455,left3 = left2.set_index('keyLeft')
5456,"left3.merge(right2, left_index=True, right_on='keyRight')"
5457,
5458,    value_x keyRight   value_y
5459,0  0.400157        B  1.867558
5460,1  2.240893        D -0.977278
5461,"left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')"
5462,keyLeft
5463,DataFrames
5464,right3 = right.assign(newcol=np.arange(len(right)))
5465,right3
5466,  key     value  newcol
5467,0   B  1.867558       0
5468,1   D -0.977278       1
5469,2   E  0.950088       2
5470,3   F -0.151357       3
5471,"left.merge(right3[['key', 'newcol']], on='key')"
5472,
5473,  key     value  newcol
5474,0   B  0.400157       0
5475,1   D  2.240893       1
5476,map
5477,# left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))
5478,left.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))
5479,
5480,  key     value  newcol
5481,0   A  1.764052     NaN
5482,1   B  0.400157     0.0
5483,2   C  0.978738     NaN
5484,3   D  2.240893     1.0
5485,"left.merge(right3[['key', 'newcol']], on='key', how='left')"
5486,
5487,  key     value  newcol
5488,0   A  1.764052     NaN
5489,1   B  0.400157     0.0
5490,2   C  0.978738     NaN
5491,3   D  2.240893     1.0
5492,on
5493,left_on
5494,right_on
5495,"left.merge(right, on=['key1', 'key2'] ...)"
5496,"left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])"
5497,merge*
5498,merge
5499,DataFrame.update
5500,DataFrame.combine_first
5501,pd.merge_ordered
5502,pd.merge_asof
5503,merge
5504,join
5505,concat
5506,"pd.concat([df0, df1], kwargs)"
5507,axis=0
5508,axis=1
5509,df.mean()
5510,df.apply(func)
5511,concat
5512,merge
5513,horizontal
5514,vertical
5515,axis=1
5516,axis=0
5517,merge
5518,concat
5519,0
5520,1
5521,pandas.concat
5522,pandas.concat
5523,DataFrames
5524,pandas.concat
5525,import pandas as pd
5526,
5527,"frames = [Preco2018, Preco2019]"
5528,
5529,df_merged = pd.concat(frames)
5530,Geo
5531,Data
5532,datetime64[ns]
5533,Price
5534,pd.merge
5535,"merged = pd.merge(Price, Geo, left_index=True, right_on='Data')"
5536,merge
5537,join
5538,concat
5539,DataFrame.merge
5540,left_index
5541,right_index
5542,left_on
5543,right_on
5544,DataFrame.join
5545,pd.concat
5546,import pandas as pd
5547,import numpy as np
5548,
5549,"np.random.seed([3, 14])"
5550,"left = pd.DataFrame(data={'value': np.random.randn(4)}, "
5551,"                    index=['A', 'B', 'C', 'D'])    "
5552,"right = pd.DataFrame(data={'value': np.random.randn(4)},  "
5553,"                     index=['B', 'D', 'E', 'F'])"
5554,left.index.name = right.index.name = 'idxkey'
5555,
5556,left
5557,           value
5558,idxkey          
5559,A      -0.602923
5560,B      -0.402655
5561,C       0.302329
5562,D      -0.524349
5563,
5564,right
5565, 
5566,           value
5567,idxkey          
5568,B       0.543843
5569,D       0.013135
5570,E      -0.326498
5571,F       1.385076
5572,"left.merge(right, left_index=True, right_index=True)"
5573,
5574,         value_x   value_y
5575,idxkey                    
5576,B      -0.402655  0.543843
5577,D      -0.524349  0.013135
5578,DataFrame.join
5579,DataFrame.join
5580,how='inner'
5581," left.join(right, how='inner', lsuffix='_x', rsuffix='_y')"
5582,
5583,          value_x   value_y
5584, idxkey                    
5585, B      -0.402655  0.543843
5586, D      -0.524349  0.013135
5587,lsuffix
5588,rsuffix
5589,join
5590, left.join(right)
5591," ValueError: columns overlap but no suffix specified: Index(['value'], dtype='object')"
5592," left.rename(columns={'value':'leftvalue'}).join(right, how='inner')"
5593,
5594,         leftvalue     value
5595, idxkey                     
5596, B       -0.402655  0.543843
5597, D       -0.524349  0.013135
5598,pd.concat
5599,how='inner'
5600," pd.concat([left, right], axis=1, sort=False, join='inner')"
5601,
5602,            value     value
5603, idxkey                    
5604, B      -0.402655  0.543843
5605, D      -0.524349  0.013135
5606,concat
5607,DataFrame.merge
5608,left_index=True
5609,right_on=...
5610,"right2 = right.reset_index().rename({'idxkey' : 'colkey'}, axis=1)"
5611,right2
5612, 
5613,  colkey     value
5614,0      B  0.543843
5615,1      D  0.013135
5616,2      E -0.326498
5617,3      F  1.385076
5618,
5619,"left.merge(right2, left_index=True, right_on='colkey')"
5620,
5621,    value_x colkey   value_y
5622,0 -0.402655      B  0.543843
5623,1 -0.524349      D  0.013135
5624,merge
5625,join
5626,concat
5627,DataFrame.set_index
5628,DataFrame.merge
5629,on
5630,left_on
5631,right_on
5632,"left.merge(right, on='idxkey')"
5633,
5634,         value_x   value_y
5635,idxkey                    
5636,B      -0.402655  0.543843
5637,D      -0.524349  0.013135
5638,left_on
5639,"left.merge(right2, left_on='idxkey', right_on='colkey')"
5640,
5641,    value_x colkey   value_y
5642,0 -0.402655      B  0.543843
5643,1 -0.524349      D  0.013135
5644,merge
5645,merge
5646,"df1.merge(df2, ...).merge(df3, ...)"
5647,pd.concat
5648,DataFrame.join
5649,# Setup.
5650,np.random.seed(0)
5651,"A = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)})    "
5652,"B = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})"
5653,"C = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)})"
5654,"dfs = [A, B, C] "
5655,
5656,"# Note: the ""key"" column values are unique, so the index is unique."
5657,A2 = A.set_index('key')
5658,B2 = B.set_index('key')
5659,C2 = C.set_index('key')
5660,
5661,"dfs2 = [A2, B2, C2]"
5662,pd.concat
5663,pd.concat
5664,# Merge on `key` column. You'll need to set the index before concatenating
5665,pd.concat(
5666,"    [df.set_index('key') for df in dfs], axis=1, join='inner'"
5667,).reset_index()
5668,
5669,  key    valueA    valueB  valueC
5670,0   D  2.240893 -0.977278     1.0
5671,
5672,# Merge on `key` index.
5673,"pd.concat(dfs2, axis=1, sort=False, join='inner')"
5674,
5675,       valueA    valueB  valueC
5676,key                            
5677,D    2.240893 -0.977278     1.0
5678,join='inner'
5679,join
5680,concat
5681,"A3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})"
5682,"pd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')"
5683,"ValueError: Shape of passed values is (3, 4), indices imply (3, 2)"
5684,join
5685,join
5686,merge
5687,# Join on `key` column. Set as the index first.
5688,"# For inner join. For left join, omit the ""how"" argument."
5689,"A.set_index('key').join([B2, C2], how='inner').reset_index()"
5690,
5691,  key    valueA    valueB  valueC
5692,0   D  2.240893 -0.977278     1.0
5693,
5694,# Join on `key` index.
5695,"A3.set_index('key').join([B2, C2], how='inner')"
5696,
5697,       valueA    valueB  valueC
5698,key                            
5699,D    1.454274 -0.977278     1.0
5700,D    0.761038 -0.977278     1.0
5701,# pip install pyjanitor
5702,import pandas as pd
5703,import janitor 
5704,
5705,"left.conditional_join(right, ('value', 'value', '>'))"
5706,
5707,   left           right
5708,    key     value   key     value
5709,0     A  1.764052     D -0.977278
5710,1     A  1.764052     F -0.151357
5711,2     A  1.764052     E  0.950088
5712,3     B  0.400157     D -0.977278
5713,4     B  0.400157     F -0.151357
5714,5     C  0.978738     D -0.977278
5715,6     C  0.978738     F -0.151357
5716,7     C  0.978738     E  0.950088
5717,8     D  2.240893     D -0.977278
5718,9     D  2.240893     F -0.151357
5719,10    D  2.240893     E  0.950088
5720,11    D  2.240893     B  1.867558
5721,
5722,"left.conditional_join(right, ('value', 'value', '<'))"
5723,
5724,  left           right
5725,   key     value   key     value
5726,0    A  1.764052     B  1.867558
5727,1    B  0.400157     E  0.950088
5728,2    B  0.400157     B  1.867558
5729,3    C  0.978738     B  1.867558
5730,"(>, <, >=, <=, !=)"
5731,np.random.seed(0)
5732,"dd = pd.DataFrame({'value':np.random.randint(100000, size=50_000)})"
5733,"df = pd.DataFrame({'start':np.random.randint(100000, size=1_000), "
5734,"                   'end':np.random.randint(100000, size=1_000)})"
5735,
5736,dd.head()
5737,
5738,   value
5739,0  68268
5740,1  43567
5741,2  42613
5742,3  45891
5743,4  21243
5744,
5745,df.head()
5746,
5747,   start    end
5748,0  71915  47005
5749,1  64284  44913
5750,2  13377  96626
5751,3  75823  38673
5752,4  29151    575
5753,
5754,
5755,%%timeit
5756,"out = df.merge(dd, how='cross')"
5757,out.loc[(out.start < out.value) & (out.end > out.value)]
5758,"5.12 s ± 19 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
5759,
5760,"%timeit df.conditional_join(dd, ('start', 'value' ,'<'), ('end', 'value' ,'>'))"
5761,"280 ms ± 5.56 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
5762,
5763,"out = df.merge(dd, how='cross')"
5764,out = out.loc[(out.start < out.value) & (out.end > out.value)]
5765,"A = df.conditional_join(dd, ('start', 'value' ,'<'), ('end', 'value' ,'>'))"
5766,columns = A.columns.tolist()
5767,"A = A.sort_values(columns, ignore_index = True)"
5768,"out = out.sort_values(columns, ignore_index = True)"
5769,
5770,A.equals(out)
5771,True
5772,cross-join
5773,"names1 = [{'A':'Jack', 'B':'Jill'}]"
5774,
5775,"names2 = [{'C':'Tommy', 'D':'Tammy'}]"
5776,
5777,df1=pd.DataFrame(names1)
5778,df2=pd.DataFrame(names2)
5779,"df_merged= pd.merge(df1.assign(X=1), df2.assign(X=1), on='X').drop('X', 1)"
5780,      A     B      C      D
5781,0  Jack  Jill  Tommy  Tammy
5782,for tup in somelist:
5783,    if determine(tup):
5784,         code_to_remove_tup
5785,code_to_remove_tup
5786,somelist = [x for x in somelist if not determine(x)]
5787,somelist[:]
5788,somelist[:] = [x for x in somelist if not determine(x)]
5789,somelist
5790,itertools
5791,from itertools import ifilterfalse
5792,"somelist[:] = ifilterfalse(determine, somelist)"
5793,from itertools import filterfalse
5794,"somelist[:] = filterfalse(determine, somelist)"
5795,somelist[:] = (x for x in somelist if determine(x))
5796,list_ass_slice()
5797,somelist[:]=
5798,PySequence_Fast()
5799,somelist
5800,somelist[:] = [tup for tup in somelist if determine(tup)]
5801,a
5802,b
5803,a.clear(); a.update(b)
5804,"x = ['foo','bar','baz']; y = x; x = [item for item in x if determine(item)];"
5805,x
5806,y
5807,"['foo','bar','baz']"
5808,x
5809,y
5810,"x = [""foo"",""bar"",""baz""]; y = x; x[:] = [item for item in x if determine(item)];"
5811,x
5812,y
5813,filter
5814,olist[:] = [i for i in olist if not dislike(i)]
5815,for tup in somelist[:]:
5816,    etc....
5817,>>> somelist = range(10)
5818,>>> for x in somelist:
5819,...     somelist.remove(x)
5820,>>> somelist
5821,"[1, 3, 5, 7, 9]"
5822,
5823,>>> somelist = range(10)
5824,>>> for x in somelist[:]:
5825,...     somelist.remove(x)
5826,>>> somelist
5827,[]
5828,list(somelist)
5829,somelist[:]
5830,somelist
5831,[:]
5832,remove()
5833,"for i in range(len(somelist) - 1, -1, -1):"
5834,"    if some_condition(somelist, i):"
5835,        del somelist[i]
5836,range
5837,xrange
5838,reversed()
5839,enumerate
5840,reversed
5841,reversed(list(enumerate(somelist)))
5842,m
5843,list
5844,list()
5845,.append()
5846,del
5847,LinkedList
5848,.append()
5849,[:]
5850,">>> words = ['cat', 'window', 'defenestrate']"
5851,>>> for w in words[:]:  # Loop over a slice copy of the entire list.
5852,...     if len(w) > 6:
5853,"...         words.insert(0, w)"
5854,...
5855,>>> words
5856,"['defenestrate', 'cat', 'window', 'defenestrate']"
5857,for x in a[:]:
5858,    if x < 0: a.remove(x)
5859,.remove()
5860,std::vector::erase
5861,ArrayList
5862,LinkedList
5863,ListIterator
5864,somelist = [tup for tup in somelist if determine(tup)]
5865,determine
5866,newlist = []
5867,for tup in somelist:
5868,"    # lots of code here, possibly setting things up for calling determine"
5869,    if determine(tup):
5870,        newlist.append(tup)
5871,somelist = newlist
5872,remove
5873,O(n)
5874,remove
5875,O(n^2)
5876,for tup in somelist[:]:
5877,"    # lots of code here, possibly setting things up for calling determine"
5878,    if determine(tup):
5879,        newlist.append(tup)
5880,"somelist[:] = filter(lambda tup: not determine(tup), somelist)"
5881,from itertools import ifilterfalse
5882,"somelist[:] = list(ifilterfalse(determine, somelist))"
5883,filter
5884,lambda
5885,map
5886,filter
5887,map
5888,filter
5889,lambda
5890,array = [lots of stuff]
5891,arraySize = len(array)
5892,i = 0
5893,while i < arraySize:
5894,    if someTest(array[i]):
5895,        del array[i]
5896,        arraySize -= 1
5897,    else:
5898,        i += 1
5899,list
5900,OrderedDict
5901,newlist = []
5902,newlist.append(array[i])
5903,del array[i]
5904,list()
5905,list()
5906,i = 0
5907,while i < len(somelist):
5908,    if determine(somelist[i]):
5909,         del somelist[i]
5910,    else:
5911,        i += 1
5912,i
5913,for item in originalList:
5914,   if (item != badValue):
5915,        newList.append(item)
5916,originalList[:] = newList
5917,">>> L1 = [(1,2), (5,6), (-1,-2), (1,-2)]"
5918,">>> for (a,b) in L1:"
5919,...   if a < 0 or b < 0:
5920,"...     L1.remove(a,b)"
5921,... 
5922,Traceback (most recent call last):
5923,"  File ""<stdin>"", line 3, in <module>"
5924,TypeError: remove() takes exactly one argument (2 given)
5925,>>> L1[1]
5926,"(5, 6)"
5927,>>> type(L1[1])
5928,<type 'tuple'>
5929,"# The remove line now includes an extra ""()"" to make a tuple out of ""a,b"""
5930,"L1.remove((a,b))"
5931,"L1 is now: [(1, 2), (5, 6), (1, -2)]"
5932,"L1 = [(1,2),(5,6),(-1,-2),(1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]"
5933,### Outputs:
5934,"L1 is now: [(1, 2), (5, 6), (1, -2), (3, 4), (5, 7), (2, 1), (5, -1), (0, 6)]"
5935,L2 = L1
5936,"for (a,b) in L1:"
5937,    if a < 0 or b < 0 :
5938,"        L2.remove((a,b))"
5939,"# Now, remove the original copy of L1 and replace with L2"
5940,print L2 is L1
5941,del L1
5942,L1 = L2; del L2
5943,"print (""L1 is now: "", L1)"
5944,"'L1 is now: ', [(1, 2), (5, 6), (1, -2), (3, 4), (5, 7), (2, 1), (5, -1), (0, 6)]"
5945,>>> L2=L1
5946,>>> L1 is L2
5947,True
5948,import copy
5949,"L1 = [(1,2), (5,6),(-1,-2), (1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]"
5950,L2 = copy.copy(L1)
5951,"for (a,b) in L1:"
5952,    if a < 0 or b < 0 :
5953,"        L2.remove((a,b))"
5954,"# Now, remove the original copy of L1 and replace with L2"
5955,del L1
5956,L1 = L2; del L2
5957,">>> L1 is now: [(1, 2), (5, 6), (3, 4), (5, 7), (2, 1), (0, 6)]"
5958,"L1 = [(1,2), (5,6),(-1,-2), (1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]"
5959,"for (a,b) in reversed(L1):"
5960,    if a < 0 or b < 0 :
5961,"        L1.remove((a,b))"
5962,"print (""L1 is now: "", L1)"
5963,">>> L1 is now: [(1, 2), (5, 6), (3, 4), (5, 7), (2, 1), (0, 6)]"
5964,i = 0
5965,length = len(list1)
5966,
5967,while i < length:
5968,    if condition:
5969,        list1.remove(list1[i])
5970,        i -= 1
5971,        length -= 1
5972,
5973,    i += 1
5974,"inlist = [{'field1':10, 'field2':20}, {'field1':30, 'field2':15}]    "
5975,"for idx, i in enumerate(inlist):"
5976,    do some stuff with i['field1']
5977,    if somecondition:
5978,        xlist.append(idx)
5979,for i in reversed(xlist): del inlist[i]
5980,enumerate
5981,reversed
5982,"alist = ['good', 'bad', 'good', 'bad', 'good']"
5983,i = 0
5984,for x in alist[:]:
5985,    if x == 'bad':
5986,        alist.pop(i)
5987,        i -= 1
5988,    # do something cool with x or just print x
5989,    print(x)
5990,    i += 1
5991,bad
5992,good
5993,alist[:]
5994,"[5, 7, 13, 29, 65, 91]"
5995,lis
5996,"lis = [5, 7, 13, 29, 35, 65, 91]"
5997,       0  1   2   3   4   5   6
5998,lis.remove(y)
5999,"lis = [5, 7, 13, 29, 65, 91]"
6000,       0  1   2   3   4   5
6001,ite = lis #dont do it will reference instead copy
6002,list[::]
6003,"[5, 7, 13, 29]"
6004,"lis = [5, 7, 13, 29, 35, 65, 91]"
6005,"not_primes = [35,65]"
6006,for item in not_primes: if item in lis: lis.remove(item)
6007,filter
6008,return
6009,break
6010,"for i, item in enumerate(lst):"
6011,    if item % 4 == 0:
6012,        foo(item)
6013,        del lst[i]
6014,        break
6015,filter()
6016,list_len = len(some_list)
6017,for i in range(list_len):
6018,    reverse_i = list_len - 1 - i
6019,    cur = some_list[reverse_i]
6020,
6021,    # some logic with cur element
6022,
6023,    if some_condition:
6024,        some_list.pop(reverse_i)
6025,reversed(list(enumerate(some_list)))
6026,iterator
6027,filter
6028,Filter
6029,Filter
6030,True
6031,False
6032,"list(filter(lambda x:x%2==1, (1, 2, 4, 5, 6, 9, 10, 15)))  "
6033,"# result: [1, 5, 9, 15]"
6034,k = range(5)
6035,"v = ['a','b','c','d','e']"
6036,"d = {key:val for key,val in zip(k, v)}"
6037,
6038,print d
6039,for i in range(5):
6040,    print d[i]
6041,    d.pop(i)
6042,print d
6043,from fluidIter import FluidIterable
6044,fSomeList = FluidIterable(someList)  
6045,for tup in fSomeList:
6046,    if determine(tup):
6047,"        # remove 'tup' without ""breaking"" the iteration"
6048,        fSomeList.remove(tup)
6049,        # tup has also been removed from 'someList'
6050,        # as well as 'fSomeList'
6051,fluidIter.py
6052,https://github.com/alanbacon/FluidIterator
6053,from fluidIter import FluidIterable
6054,"l = [0,1,2,3,4,5,6,7,8]  "
6055,fluidL = FluidIterable(l)                       
6056,for i in fluidL:
6057,    print('initial state of list on this iteration: ' + str(fluidL)) 
6058,    print('current iteration value: ' + str(i))
6059,    print('popped value: ' + str(fluidL.pop(2)))
6060,    print(' ')
6061,
6062,print('Final List Value: ' + str(l))
6063,"initial state of list on this iteration: [0, 1, 2, 3, 4, 5, 6, 7, 8]"
6064,current iteration value: 0
6065,popped value: 2
6066,
6067,"initial state of list on this iteration: [0, 1, 3, 4, 5, 6, 7, 8]"
6068,current iteration value: 1
6069,popped value: 3
6070,
6071,"initial state of list on this iteration: [0, 1, 4, 5, 6, 7, 8]"
6072,current iteration value: 4
6073,popped value: 4
6074,
6075,"initial state of list on this iteration: [0, 1, 5, 6, 7, 8]"
6076,current iteration value: 5
6077,popped value: 5
6078,
6079,"initial state of list on this iteration: [0, 1, 6, 7, 8]"
6080,current iteration value: 6
6081,popped value: 6
6082,
6083,"initial state of list on this iteration: [0, 1, 7, 8]"
6084,current iteration value: 7
6085,popped value: 7
6086,
6087,"initial state of list on this iteration: [0, 1, 8]"
6088,current iteration value: 8
6089,popped value: 8
6090,
6091,"Final List Value: [0, 1]"
6092,pop
6093,del fluidL[i]
6094,.remove
6095,.insert
6096,.append
6097,.extend
6098,sort
6099,reverse
6100,fluidL
6101,l
6102,fluidL
6103,fluidL[2] = 'a'   # is OK
6104,"fluidL = [0, 1, 'a', 3, 4, 5, 6, 7, 8]  # is not OK"
6105,"fluidArr = FluidIterable([0,1,2,3])"
6106,# get iterator first so can query the current index
6107,fluidArrIter = fluidArr.__iter__()
6108,"for i, v in enumerate(fluidArrIter):"
6109,"    print('enum: ', i)"
6110,"    print('current val: ', v)"
6111,"    print('current ind: ', fluidArrIter.currentIndex)"
6112,    print(fluidArr)
6113,"    fluidArr.insert(0,'a')"
6114,    print(' ')
6115,
6116,print('Final List Value: ' + str(fluidArr))
6117,enum:  0
6118,current val:  0
6119,current ind:  0
6120,"[0, 1, 2, 3]"
6121,
6122,enum:  1
6123,current val:  1
6124,current ind:  2
6125,"['a', 0, 1, 2, 3]"
6126,
6127,enum:  2
6128,current val:  2
6129,current ind:  4
6130,"['a', 'a', 0, 1, 2, 3]"
6131,
6132,enum:  3
6133,current val:  3
6134,current ind:  6
6135,"['a', 'a', 'a', 0, 1, 2, 3]"
6136,
6137,"Final List Value: ['a', 'a', 'a', 'a', 0, 1, 2, 3]"
6138,FluidIterable
6139,originalList = fluidArr.fixedIterable
6140,"if __name__ is ""__main__"":"
6141,fluidIter.py
6142,newList = [i for i in oldList if testFunc(i)]
6143,testFunc
6144,newList
6145,oldList
6146,"randInts = [70, 20, 61, 80, 54, 18, 7, 18, 55, 9]"
6147,fRandInts = FluidIterable(randInts)
6148,fRandIntsIter = fRandInts.__iter__()
6149,# for each value in the list (outer loop)
6150,# test against every other value in the list (inner loop)
6151,for i in fRandIntsIter:
6152,    print(' ')
6153,"    print('outer val: ', i)"
6154,    innerIntsIter = fRandInts.__iter__()
6155,    for j in innerIntsIter:
6156,        innerIndex = innerIntsIter.currentIndex
6157,        # skip the element that the outloop is currently on
6158,        # because we don't want to test a value against itself
6159,        if not innerIndex == fRandIntsIter.currentIndex:
6160,"            # if the test element, j, is a multiple "
6161,"            # of the reference element, i, then remove 'j'"
6162,            if j%i == 0:
6163,"                print('remove val: ', j)"
6164,"                # remove element in place, without breaking the"
6165,                # iteration of either loop
6166,                del fRandInts[innerIndex]
6167,"            # end if multiple, then remove"
6168,        # end if not the same value as outer loop
6169,    # end inner loop
6170,# end outerloop
6171,
6172,print('')
6173,"print('final list: ', randInts)"
6174,outer val:  70
6175,
6176,outer val:  20
6177,remove val:  80
6178,
6179,outer val:  61
6180,
6181,outer val:  54
6182,
6183,outer val:  18
6184,remove val:  54
6185,remove val:  18
6186,
6187,outer val:  7
6188,remove val:  70
6189,
6190,outer val:  55
6191,
6192,outer val:  9
6193,remove val:  18
6194,
6195,"final list:  [20, 61, 7, 55, 9]"
6196,some_list[:] = [x for x in some_list if not some_condition(x)]
6197,some_list[:] = [x for x in some_list if not some_condition(y)]
6198,y
6199,x
6200,some_list[:] = [x for x in some_list if not some_condition(intermediateStateOf_some_list)]
6201,""""""" Sieve of Eratosthenes """""""
6202,
6203,def generate_primes(n):
6204,"    """""" Generates all primes less than n. """""""
6205,"    primes = list(range(2,n))"
6206,    idx = 0
6207,    while idx < len(primes):
6208,        p = primes[idx]
6209,"        for multiple in range(p+p, n, p):"
6210,            try:
6211,                primes.remove(multiple)
6212,            except ValueError:
6213,                pass #EAFP
6214,        idx += 1
6215,        yield p
6216,"somelist = [(1,2,3), (4,5,6), (3,6,6), (7,8,9), (15,0,0), (10,11,12)]"
6217,sum of elements of a tuple = 15
6218,del
6219,for tup in somelist:
6220,    if ( sum(tup)==15 ): 
6221,        del somelist[somelist.index(tup)]
6222,
6223,print somelist
6224,">>> [(1, 2, 3), (3, 6, 6), (7, 8, 9), (10, 11, 12)]"
6225,newlist1 = [somelist[tup] for tup in range(len(somelist)) if(sum(somelist[tup])!=15)]
6226,
6227,print newlist1
6228,">>>[(1, 2, 3), (7, 8, 9), (10, 11, 12)]"
6229,indices = [i for i in range(len(somelist)) if(sum(somelist[i])==15)]
6230,"newlist2 = [tup for j, tup in enumerate(somelist) if j not in indices]"
6231,
6232,print newlist2
6233,">>>[(1, 2, 3), (7, 8, 9), (10, 11, 12)]"
6234,time(method1) : time(method2) : time(method3) = 1 : 1 : 1.7
6235,for i in li:
6236,    i = None
6237,
6238,for elem in li:
6239,    if elem is None:
6240,        continue
6241,import numpy as np
6242,
6243,"orig_list = np.array([1, 2, 3, 4, 5, 100, 8, 13])"
6244,
6245,"remove_me = [100, 1]"
6246,
6247,"cleaned = np.delete(orig_list, remove_me)"
6248,print(cleaned)
6249,x
6250,y
6251,raw_input()
6252,input()
6253,raw_input()
6254,input()
6255,play = True
6256,
6257,while play:
6258,
6259,"    x = input(""Enter a number: "")"
6260,"    y = input(""Enter a number: "")"
6261,
6262,    print(x + y)
6263,    print(x - y)
6264,    print(x * y)
6265,    print(x / y)
6266,    print(x % y)
6267,
6268,"    if input(""Play again? "") == ""no"":"
6269,        play = False
6270,input
6271,int
6272,int
6273,"x = int(input(""Enter a number: ""))"
6274,"y = int(input(""Enter a number: ""))"
6275,int
6276,">>> data = int(input(""Enter a number: ""), 8)"
6277,Enter a number: 777
6278,>>> data
6279,511
6280,">>> data = int(input(""Enter a number: ""), 16)"
6281,Enter a number: FFFF
6282,>>> data
6283,65535
6284,">>> data = int(input(""Enter a number: ""), 2)"
6285,Enter a number: 10101010101
6286,>>> data
6287,1365
6288,ValueError
6289,">>> data = int(input(""Enter a number: ""), 2)"
6290,Enter a number: 1234
6291,Traceback (most recent call last):
6292,"  File ""<input>"", line 1, in <module>"
6293,ValueError: invalid literal for int() with base 2: '1234'
6294,float
6295,int
6296,"x = float(input(""Enter a number:""))"
6297,input
6298,input
6299,input
6300,raw_input
6301,input
6302,raw_input
6303,raw_input
6304,input
6305,>>> import sys
6306,>>> sys.version
6307,"'2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]'"
6308,">>> data = input(""Enter a number: "")"
6309,Enter a number: 5 + 17
6310,">>> data, type(data)"
6311,"(22, <type 'int'>)"
6312,5 + 17
6313,22
6314,5 + 17
6315,int
6316,22
6317,input
6318,data
6319,input
6320,raw_input
6321,eval
6322,">>> data = eval(raw_input(""Enter a number: ""))"
6323,Enter a number: 5 + 17
6324,">>> data, type(data)"
6325,"(22, <type 'int'>)"
6326,input
6327,raw_input
6328,>>> import sys
6329,>>> sys.version
6330,"'2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]'"
6331,">>> data = raw_input(""Enter a number: "")"
6332,Enter a number: 5 + 17
6333,">>> data, type(data)"
6334,"('5 + 17', <type 'str'>)"
6335,input
6336,raw_input
6337,raw_input
6338,>>> import sys
6339,>>> sys.version
6340,"'3.4.0 (default, Apr 11 2014, 13:05:11) \n[GCC 4.8.2]'"
6341,">>> data = input(""Enter a number: "")"
6342,Enter a number: 5 + 17
6343,">>> data, type(data)"
6344,"('5 + 17', <class 'str'>)"
6345,eval
6346,ast.literal_eval
6347,eval
6348,raw_input
6349,input
6350,input
6351,raw_input
6352,input
6353,int
6354,"x = int(input(""Enter a number: ""))"
6355,"y = int(input(""Enter a number: ""))"
6356,map
6357,"arr = map(int, raw_input().split())"
6358,"num1, num2 = map(int, raw_input().split())"
6359,input()
6360,raw_input()
6361,int()
6362,"x = int(input(""Enter a number: ""))"
6363,"y = int(input(""Enter a number: ""))"
6364,a = []
6365,p = input()
6366,p = p.split()      
6367,for i in p:
6368,    a.append(int(i))
6369,"p = input().split(""whatever the seperator is"")"
6370,x = [int(i) for i in p]
6371,"print(x, end=' ')"
6372,"my_number = int(input(""enter the number""))"
6373,"my_decimalnumber = float(input(""enter the number""))"
6374,n=int(input())
6375,for i in range(n):
6376,    n=input()
6377,    n=int(n)
6378,"    arr1=list(map(int,input().split()))"
6379,int(input())
6380,num = input()
6381,num1 = 0
6382,num2 = 0
6383,
6384,for i in range(len(num)):
6385,    if num[i] == ' ':
6386,        break
6387,
6388,num1 = int(num[:i])
6389,num2 = int(num[i+1:])
6390,num1
6391,num2
6392,i
6393,for
6394,@hosch250
6395,i
6396,"num1, num2 = map(int, input().split())"
6397,"nums = list(map(int, input().split()))"
6398,def dbz():
6399,    try:
6400,"        r = raw_input(""Enter number:"")"
6401,        if r.isdigit():
6402,"            i = int(raw_input(""Enter divident:""))"
6403,            d = int(r)/i
6404,"            print ""O/p is -:"",d"
6405,        else:
6406,"            print ""Not a number"""
6407,"    except Exception ,e:"
6408,"        print ""Program halted incorrect data entered"",type(e)"
6409,dbz()
6410,
6411,Or 
6412,
6413,"num = input(""Enter Number:"")#""input"" will accept only numbers"
6414,int(input(...))
6415,python-future
6416,builtins.input
6417,input
6418,builtins.input
6419,raw_input
6420,"[[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6421,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6422,l
6423,flat_list = [item for sublist in l for item in sublist]
6424,flat_list = []
6425,for sublist in l:
6426,    for item in sublist:
6427,        flat_list.append(item)
6428,l
6429,def flatten(l):
6430,    return [item for sublist in l for item in sublist]
6431,timeit
6432,"$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'"
6433,"10000 loops, best of 3: 143 usec per loop"
6434,"$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'"
6435,"1000 loops, best of 3: 969 usec per loop"
6436,"$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'"
6437,"1000 loops, best of 3: 1.1 msec per loop"
6438,+
6439,sum
6440,O(L**2)
6441,I * (L**2)/2
6442,itertools.chain.from_iterable
6443,"$ python -mtimeit -s'from itertools import chain; l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'list(chain.from_iterable(l))'"
6444,[leaf for leaf in tree for tree in forest]
6445,itertools.chain()
6446,>>> import itertools
6447,">>> list2d = [[1,2,3], [4,5,6], [7], [8,9]]"
6448,>>> merged = list(itertools.chain(*list2d))
6449,itertools.chain.from_iterable()
6450,*
6451,>>> import itertools
6452,">>> list2d = [[1,2,3], [4,5,6], [7], [8,9]]"
6453,>>> merged = list(itertools.chain.from_iterable(list2d))
6454,[item for sublist in l for item in sublist]
6455,"$ python3 -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99;import itertools' 'list(itertools.chain.from_iterable(l))'"
6456,"20000 loops, best of 5: 10.8 usec per loop"
6457,"$ python3 -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'"
6458,"10000 loops, best of 5: 21.7 usec per loop"
6459,"$ python3 -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'"
6460,"1000 loops, best of 5: 258 usec per loop"
6461,"$ python3 -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99;from functools import reduce' 'reduce(lambda x,y: x+y,l)'"
6462,"1000 loops, best of 5: 292 usec per loop"
6463,$ python3 --version
6464,Python 3.7.5rc1
6465,*
6466,chain
6467,chain
6468,for
6469,append
6470,from_iterable
6471,def flatten_list(deep_list: list[list[object]]):
6472,return list(chain.from_iterable(deep_list))
6473,list[object]
6474,">>> xss = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6475,">>> sum(xss, [])"
6476,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6477,sum
6478,xss
6479,[]
6480,0
6481,"[1,3]+[2,4]"
6482,"sum([[1,3],[2,4]],[])"
6483,"[1,3,2,4]"
6484,Monoid
6485,+
6486,timeit
6487,import functools
6488,import operator
6489,"functools.reduce(operator.iconcat, a, [])"
6490,operator.iadd
6491,out = []
6492,for sublist in a:
6493,    out.extend(sublist)
6494,import functools
6495,import itertools
6496,import operator
6497,
6498,import numpy as np
6499,import perfplot
6500,
6501,
6502,def forfor(a):
6503,    return [item for sublist in a for item in sublist]
6504,
6505,
6506,def sum_brackets(a):
6507,"    return sum(a, [])"
6508,
6509,
6510,def functools_reduce(a):
6511,"    return functools.reduce(operator.concat, a)"
6512,
6513,
6514,def functools_reduce_iconcat(a):
6515,"    return functools.reduce(operator.iconcat, a, [])"
6516,
6517,
6518,def itertools_chain(a):
6519,    return list(itertools.chain.from_iterable(a))
6520,
6521,
6522,def numpy_flat(a):
6523,    return list(np.array(a).flat)
6524,
6525,
6526,def numpy_concatenate(a):
6527,    return list(np.concatenate(a))
6528,
6529,
6530,def extend(a):
6531,    out = []
6532,    for sublist in a:
6533,        out.extend(sublist)
6534,    return out
6535,
6536,
6537,b = perfplot.bench(
6538,"    setup=lambda n: [list(range(10))] * n,"
6539,"    # setup=lambda n: [list(range(n))] * 10,"
6540,    kernels=[
6541,"        forfor,"
6542,"        sum_brackets,"
6543,"        functools_reduce,"
6544,"        functools_reduce_iconcat,"
6545,"        itertools_chain,"
6546,"        numpy_flat,"
6547,"        numpy_concatenate,"
6548,"        extend,"
6549,"    ],"
6550,"    n_range=[2 ** k for k in range(16)],"
6551,"    xlabel=""num lists (of length 10)"","
6552,"    # xlabel=""len lists (10 lists total)"""
6553,)
6554,"b.save(""out.png"")"
6555,b.show()
6556,numpy_flat
6557,"VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray"
6558,items = []; for sublist in a: items.extend(sublist); return sublist
6559,functools.reduce
6560,xs
6561,ys
6562,from functools import reduce
6563,"xss = [[1,2,3], [4,5,6], [7], [8,9]]"
6564,"out = reduce(lambda xs, ys: xs + ys, xss)"
6565,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6566,operator.concat
6567,from functools import reduce
6568,import operator
6569,"xss = [[1,2,3], [4,5,6], [7], [8,9]]"
6570,"out = reduce(operator.concat, xss)"
6571,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6572,reduce
6573,from typing import Iterable 
6574,#from collections import Iterable                            # < py38
6575,
6576,
6577,def flatten(items):
6578,"    """"""Yield items from any nested iterable; see Reference."""""""
6579,    for x in items:
6580,"        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):"
6581,            for sub_x in flatten(x):
6582,                yield sub_x
6583,        else:
6584,            yield x
6585,yield from flatten(x)
6586,for sub_x in flatten(x): yield sub_x
6587,collection.abc
6588,typing
6589,"simple = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6590,list(flatten(simple))
6591,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6592,
6593,"complicated = [[1, [2]], (3, 4, {5, 6}, 7), 8, ""9""]              # numbers, strs, nested & mixed"
6594,list(flatten(complicated))
6595,"# [1, 2, 3, 4, 5, 6, 7, 8, '9']"
6596,more_itertools
6597,traverse
6598,"if hasattr(x, '__iter__')"
6599,Iterable
6600,iteration_utilities.deepflatten
6601,>>> from iteration_utilities import deepflatten
6602,
6603,">>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6604,">>> list(deepflatten(l, depth=1))"
6605,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6606,
6607,">>> l = [[1, 2, 3], [4, [5, 6]], 7, [8, 9]]"
6608,>>> list(deepflatten(l))
6609,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6610,list
6611,iteration_utilities.flatten
6612,itertools.chain.from_iterable
6613,>>> from iteration_utilities import flatten
6614,">>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6615,>>> list(flatten(l))
6616,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6617,sum
6618,itertools.chain.from_iterable
6619,iteration_utilities.deepflatten
6620,itertools.chain.from_iterable
6621,from itertools import chain
6622,from functools import reduce
6623,from collections import Iterable  # or from collections.abc import Iterable
6624,import operator
6625,from iteration_utilities import deepflatten
6626,
6627,def nested_list_comprehension(lsts):
6628,    return [item for sublist in lsts for item in sublist]
6629,
6630,def itertools_chain_from_iterable(lsts):
6631,    return list(chain.from_iterable(lsts))
6632,
6633,def pythons_sum(lsts):
6634,"    return sum(lsts, [])"
6635,
6636,def reduce_add(lsts):
6637,"    return reduce(lambda x, y: x + y, lsts)"
6638,
6639,def pylangs_flatten(lsts):
6640,    return list(flatten(lsts))
6641,
6642,def flatten(items):
6643,"    """"""Yield items from any nested iterable; see REF."""""""
6644,    for x in items:
6645,"        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):"
6646,            yield from flatten(x)
6647,        else:
6648,            yield x
6649,
6650,def reduce_concat(lsts):
6651,"    return reduce(operator.concat, lsts)"
6652,
6653,def iteration_utilities_deepflatten(lsts):
6654,"    return list(deepflatten(lsts, depth=1))"
6655,
6656,
6657,from simple_benchmark import benchmark
6658,
6659,b = benchmark(
6660,"    [nested_list_comprehension, itertools_chain_from_iterable, pythons_sum, reduce_add,"
6661,"     pylangs_flatten, reduce_concat, iteration_utilities_deepflatten],"
6662,"    arguments={2**i: [[0]*5]*(2**i) for i in range(1, 13)},"
6663,    argument_name='number of inner lists'
6664,)
6665,
6666,b.plot()
6667,>>> import numpy as np
6668,">>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6669,>>> print(np.concatenate(l))
6670,[1 2 3 4 5 6 7 8 9]
6671,more_itertools
6672,> pip install more_itertools
6673,flatten
6674,import more_itertools
6675,
6676,
6677,"lst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6678,list(more_itertools.flatten(lst))
6679,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6680,flatten
6681,more_itertools.collapse
6682,"lst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6683,list(more_itertools.collapse(lst)) 
6684,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6685,
6686,"lst = [[1, 2, 3], [[4, 5, 6]], [[[7]]], 8, 9]              # complex nesting"
6687,list(more_itertools.collapse(lst))
6688,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6689,"reduce(lambda x,y: x.extend(y) or x, l)"
6690,extend
6691,newlist = []
6692,extend = newlist.extend
6693,for sublist in l: extend(l)
6694,lambda
6695,x
6696,or
6697,from functools import reduce
6698,matplotlib.cbook.flatten()
6699,import matplotlib
6700,"l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6701,print(list(matplotlib.cbook.flatten(l)))
6702,"l2 = [[1, 2, 3], [4, 5, 6], [7], [8, [9, 10, [11, 12, [13]]]]]"
6703,print(list(matplotlib.cbook.flatten(l2)))
6704,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
6705,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
6706,Average time over 1000 trials of matplotlib.cbook.flatten: 2.55e-05 sec
6707,Average time over 1000 trials of underscore._.flatten: 4.63e-04 sec
6708,(time for underscore._)/(time for matplotlib.cbook) = 18.1233394636
6709,"[[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6710,"sum(list,[])"
6711,"sum([[1, 2, 3], [4, 5, 6], [7], [8, 9]],[])"
6712,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6713,map
6714,#For only tuple
6715,"sum(list(map(list,[[1, 2, 3], (4, 5, 6), (7,), [8, 9]])),[])"
6716,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6717,
6718,#In general
6719,
6720,def convert(x):
6721,    if type(x) is int or type(x) is float:
6722,           return [x]
6723,    else:
6724,           return list(x)
6725,
6726,"sum(list(map(convert,[[1, 2, 3], (4, 5, 6), 7, [8, 9]])),[])"
6727,"# [1, 2, 3, 4, 5, 6, 7, 8, 9]"
6728,import numpy as np
6729,list(np.array(l).flat)
6730,for
6731,"l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6732,flat_l = [e for v in l for e in v]
6733,print(flat_l)
6734,list
6735,extend
6736,flat_list = []
6737,for sublist in l:
6738,    flat_list.extend(sublist)
6739,import functools
6740,import itertools
6741,import numpy
6742,import operator
6743,import perfplot
6744,
6745,
6746,def functools_reduce_iconcat(a):
6747,"    return functools.reduce(operator.iconcat, a, [])"
6748,
6749,
6750,def itertools_chain(a):
6751,    return list(itertools.chain.from_iterable(a))
6752,
6753,
6754,def numpy_flat(a):
6755,    return list(numpy.array(a).flat)
6756,
6757,
6758,def extend(a):
6759,    n = []
6760,
6761,"    list(map(n.extend, a))"
6762,
6763,    return n
6764,
6765,
6766,perfplot.show(
6767,"    setup = lambda n: [list(range(10))] * n,"
6768,    kernels = [
6769,"        functools_reduce_iconcat, extend, itertools_chain, numpy_flat"
6770,"        ],"
6771,"    n_range = [2**k for k in range(16)],"
6772,"    xlabel = 'num lists',"
6773,    )
6774,try
6775,def flatten(itr):
6776,    for x in itr:
6777,        try:
6778,            yield from flatten(x)
6779,        except TypeError:
6780,            yield x
6781,list()
6782,tuple()
6783,for
6784,def flatten(itr):
6785,"    if type(itr) in (str,bytes):"
6786,        yield itr
6787,    else:
6788,        for x in itr:
6789,            try:
6790,                yield from flatten(x)
6791,            except TypeError:
6792,                yield x
6793,"sum((flatten(e) for e in itr), tuple())"
6794,numpy.concatenate().tolist()
6795,numpy.concatenate().ravel().tolist()
6796,import numpy
6797,
6798,"l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]] * 99"
6799,
6800,%timeit numpy.concatenate(l).ravel().tolist()
6801,"1000 loops, best of 3: 313 µs per loop"
6802,
6803,%timeit numpy.concatenate(l).tolist()
6804,"1000 loops, best of 3: 312 µs per loop"
6805,
6806,%timeit [item for sublist in l for item in sublist]
6807,"1000 loops, best of 3: 31.5 µs per loop"
6808,"[1, 2, [3], [[4]], [5, [6]]]"
6809,yield_from
6810,six
6811,sys.version
6812,"obj = [[1, 2,], [3, 4], [5, 6]]"
6813,itertools.chain.from_iterable
6814,">>> obj = [[1, 2, 3], [4, 5], 6, 'abc', [7], [8, [9, 10]]]"
6815,6
6816,'abc'
6817,str
6818,"[8, [9, 10]]"
6819,chain.from_iterable
6820,>>> from collections import Iterable
6821,>>> from six import string_types
6822,
6823,>>> def flatten(obj):
6824,...     for i in obj:
6825,"...         if isinstance(i, Iterable) and not isinstance(i, string_types):"
6826,...             yield from flatten(i)
6827,...         else:
6828,...             yield i
6829,
6830,
6831,>>> list(flatten(obj))
6832,"[1, 2, 3, 4, 5, 6, 'abc', 7, 8, 9, 10]"
6833,Iterable
6834,itertools
6835,yield from
6836,for
6837,for x in flatten(i): yield x
6838,def flatten(alist):
6839,    if alist == []:
6840,        return []
6841,    elif type(alist) is not list:
6842,        return [alist]
6843,    else:
6844,        return flatten(alist[0]) + flatten(alist[1:])
6845,"[[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
6846,"[[1], [[[2]], [3]]], [1, 2, 3]"
6847,def _flatten(l) -> Iterator[Any]:
6848,    stack = l.copy()
6849,    while stack:
6850,        item = stack.pop()
6851,"        if isinstance(item, list):"
6852,            stack.extend(item)
6853,        else:
6854,            yield item
6855,
6856,
6857,def flatten(l) -> Iterator[Any]:
6858,    return reversed(list(_flatten(l)))
6859,"@pytest.mark.parametrize('input_list, expected_output', ["
6860,"    ([1, 2, 3], [1, 2, 3]),"
6861,"    ([[1], 2, 3], [1, 2, 3]),"
6862,"    ([[1], [2], 3], [1, 2, 3]),"
6863,"    ([[1], [2], [3]], [1, 2, 3]),"
6864,"    ([[1], [[2]], [3]], [1, 2, 3]),"
6865,"    ([[1], [[[2]], [3]]], [1, 2, 3]),"
6866,])
6867,"def test_flatten(input_list, expected_output):"
6868,    assert list(flatten(input_list)) == expected_output
6869,def make_list_flat (l):
6870,    flist = []
6871,    flist.extend ([l]) if (type (l) is not list) else [flist.extend (make_list_flat (e)) for e in l]
6872,    return flist
6873,
6874,"a = [[1, 2], [[[[3, 4, 5], 6]]], 7, [8, [9, [10, 11], 12, [13, 14, [15, [[16, 17], 18]]]]]]"
6875,flist = make_list_flat(a)
6876,print (flist)
6877,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]"
6878,flist
6879,flist
6880,flist
6881,flist
6882,"a = [[1, 2], [[[[3, 4, 5], 6]]], 7, [8, [9, [10, 11], 12, [13, 14, [15, [[16, 17], 18]]]]]]"
6883,flist = []
6884,def make_list_flat (l):
6885,    flist.extend ([l]) if (type (l) is not list) else [make_list_flat (e) for e in l]
6886,
6887,make_list_flat(a)
6888,print (flist)
6889,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]"
6890,def flat(x):
6891,    match x:
6892,        case []:
6893,            return []
6894,"        case [[*sublist], *r]:"
6895,"            return [*sublist, *flat(r)]"
6896,def flat(x):
6897,    match x:
6898,        case []:
6899,            return []
6900,"        case [[*sublist], *r]:"
6901,"            return [*flat(sublist), *flat(r)]"
6902,"        case [h, *r]:"
6903,"            return [h, *flat(r)]"
6904,from typing import List
6905,
6906,
6907,def flatten(l: list) -> List[int]:
6908,"    """"""Flatten an arbitrary deep nested list of lists of integers."
6909,
6910,    Examples:
6911,"        >>> flatten([1, 2, [1, [10]]])"
6912,"        [1, 2, 1, 10]"
6913,
6914,    Args:
6915,"        l: Union[l, Union[int, List[int]]"
6916,
6917,    Returns:
6918,        Flatted list of integer
6919,"    """""""
6920,"    return [int(i.strip('[ ]')) for i in str(l).split(',')]"
6921,"wierd_list = [[1, 2, 3], [4, 5, 6], [7], [8, 9], 10]"
6922,"nice_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0]"
6923,"flat_list = [int(e.replace('[','').replace(']','')) for e in str(deep_list).split(',')]"
6924,"[int(e.strip('[ ]')) for e in str(deep_list).split(',')]"
6925,def flatten_list(list1):
6926,    out = []
6927,    inside = list1
6928,    while inside:
6929,        x = inside.pop(0)
6930,"        if isinstance(x, list):"
6931,            inside[0:0] = x
6932,        else:
6933,            out.append(x)
6934,    return out
6935,
6936,"l = [[[1,2],3,[4,[[5,6],7],[8]]],[9,10,11]]"
6937,flatten_list(l)
6938,"# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
6939,"list_of_lists = [[1,2], [2,3], [3,4]]"
6940,list(set.union(*[set(s) for s in list_of_lists]))
6941,def flatlst(lista):
6942,    listaplana = []
6943,    for k in lista: listaplana = listaplana + k
6944,    return listaplana
6945,+
6946,+=
6947,.extend()
6948,from collections.abc import Iterable
6949,
6950,"def flatten(items, ignore_types=(bytes, str)):"
6951,"    """""""
6952,       Flatten all of the nested lists to the one. Ignoring flatting of iterable types str and bytes by default.
6953,"    """""""
6954,    for x in items:
6955,"        if isinstance(x, Iterable) and not isinstance(x, ignore_types):"
6956,            yield from flatten(x)
6957,        else:
6958,            yield x
6959,
6960,"values = [7, [4, 3, 5, [7, 3], (3, 4), ('A', {'B', 'C'})]]"
6961,
6962,for v in flatten(values):
6963,    print(v)
6964,flatten
6965,def flatten(iterable):
6966,    # These types won't considered a sequence or generally a container
6967,"    exclude = str, bytes"
6968,
6969,    for i in iterable:
6970,        try:
6971,"            if isinstance(i, exclude):"
6972,                raise TypeError
6973,            iter(i)
6974,        except TypeError:
6975,            yield i
6976,        else:
6977,            yield from flatten(i)
6978,str
6979,iter()
6980,"lst1 = [1, {3}, (1, 6), [[3, 8]], [[[5]]], 9, ((((2,),),),)]"
6981,"lst2 = ['3', B'A', [[[(i ** 2 for i in range(3))]]], range(3)]"
6982,
6983,print(list(flatten(lst1)))
6984,print(list(flatten(lst2)))
6985,"[1, 3, 1, 6, 3, 8, 5, 9, 2]"
6986,"['3', b'A', 0, 1, 4, 0, 1, 2]"
6987,# Question 4
6988,def flatten(input_ls=[]) -> []:
6989,    res_ls = []
6990,"    res_ls = flatten_recursive(input_ls, res_ls)"
6991,
6992,"    print(""Final flatten list solution is: \n"", res_ls)"
6993,
6994,    return res_ls
6995,
6996,
6997,"def flatten_recursive(input_ls=[], res_ls=[]) -> []:"
6998,    tmp_ls = []
6999,
7000,    for i in input_ls:
7001,"        if isinstance(i, int):"
7002,            res_ls.append(i)
7003,        else:
7004,            tmp_ls = i
7005,"            tmp_ls.append(flatten_recursive(i, res_ls))"
7006,
7007,    print(res_ls)
7008,    return res_ls
7009,
7010,
7011,"flatten([0, 1, [2, 3], 4, [5, 6]])  # test"
7012,"flatten([0, [[[1]]], [[2, 3], [4, [[5, 6]]]]])"
7013,"[0, 1, 2, 3]"
7014,"[0, 1, 2, 3, 4, 5, 6]"
7015,"[0, 1, 2, 3, 4, 5, 6]"
7016,Final flatten list solution is: 
7017," [0, 1, 2, 3, 4, 5, 6]"
7018,"[0, 1]"
7019,"[0, 1]"
7020,"[0, 1]"
7021,"[0, 1, 2, 3]"
7022,"[0, 1, 2, 3, 4, 5, 6]"
7023,"[0, 1, 2, 3, 4, 5, 6]"
7024,"[0, 1, 2, 3, 4, 5, 6]"
7025,"[0, 1, 2, 3, 4, 5, 6]"
7026,"[0, 1, 2, 3, 4, 5, 6]"
7027,Final flatten list solution is: 
7028," [0, 1, 2, 3, 4, 5, 6]"
7029,import re
7030,"l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
7031,"list(map(int,re.sub('(\[|\])','',str(l)).split(',')))"
7032,"def chunks(lst, n):"
7033,"    """"""Yield successive n-sized chunks from lst."""""""
7034,"    for i in range(0, len(lst), n):"
7035,        yield lst[i:i + n]
7036,import pprint
7037,"pprint.pprint(list(chunks(range(10, 75), 10)))"
7038,"[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],"
7039," [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],"
7040," [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],"
7041," [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],"
7042," [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],"
7043," [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],"
7044," [70, 71, 72, 73, 74]]"
7045,xrange
7046,range
7047,"def chunks(lst, n):"
7048,"    """"""Yield successive n-sized chunks from lst."""""""
7049,"    for i in xrange(0, len(lst), n):"
7050,        yield lst[i:i + n]
7051,"[lst[i:i + n] for i in range(0, len(lst), n)]"
7052,"[lst[i:i + n] for i in xrange(0, len(lst), n)]"
7053,"def chunks(xs, n):"
7054,"    n = max(1, n)"
7055,"    return (xs[i:i+n] for i in range(0, len(xs), n))"
7056,xrange()
7057,range()
7058,len(l) or 1
7059,numpy.array_split
7060,import numpy as np
7061,
7062,lst = range(50)
7063,"np.array_split(lst, 5)"
7064,"[array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),"
7065," array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),"
7066," array([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]),"
7067," array([30, 31, 32, 33, 34, 35, 36, 37, 38, 39]),"
7068," array([40, 41, 42, 43, 44, 45, 46, 47, 48, 49])]"
7069,"from itertools import izip, chain, repeat"
7070,
7071,"def grouper(n, iterable, padvalue=None):"
7072,"    ""grouper(3, 'abcdefg', 'x') --> ('a','b','c'), ('d','e','f'), ('g','x','x')"""
7073,"    return izip(*[chain(iterable, repeat(padvalue, n-1))]*n)"
7074,#from itertools import izip_longest as zip_longest # for Python 2.x
7075,from itertools import zip_longest # for Python 3.x
7076,#from six.moves import zip_longest # for both (uses the six compat library)
7077,
7078,"def grouper(n, iterable, padvalue=None):"
7079,"    ""grouper(3, 'abcdefg', 'x') --> ('a','b','c'), ('d','e','f'), ('g','x','x')"""
7080,"    return zip_longest(*[iter(iterable)]*n, fillvalue=padvalue)"
7081,[iter(iterable)]*n
7082,n
7083,izip_longest
7084,n
7085,iter
7086,from itertools import islice
7087,
7088,"def chunk(it, size):"
7089,    it = iter(it)
7090,"    return iter(lambda: tuple(islice(it, size)), ())"
7091,">>> list(chunk(range(14), 3))"
7092,"[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]"
7093,"from itertools import islice, chain, repeat"
7094,
7095,"def chunk_pad(it, size, padval=None):"
7096,"    it = chain(iter(it), repeat(padval))"
7097,"    return iter(lambda: tuple(islice(it, size)), (padval,) * size)"
7098,">>> list(chunk_pad(range(14), 3))"
7099,"[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]"
7100,">>> list(chunk_pad(range(14), 3, 'a'))"
7101,"[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]"
7102,izip_longest
7103,_no_padding = object()
7104,
7105,"def chunk(it, size, padval=_no_padding):"
7106,    if padval == _no_padding:
7107,        it = iter(it)
7108,        sentinel = ()
7109,    else:
7110,"        it = chain(iter(it), repeat(padval))"
7111,"        sentinel = (padval,) * size"
7112,"    return iter(lambda: tuple(islice(it, size)), sentinel)"
7113,">>> list(chunk(range(14), 3))"
7114,"[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]"
7115,">>> list(chunk(range(14), 3, None))"
7116,"[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]"
7117,">>> list(chunk(range(14), 3, 'a'))"
7118,"[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]"
7119,_no_padding = object()
7120,"def chunk(it, size, padval=_no_padding):"
7121,    it = iter(it)
7122,"    chunker = iter(lambda: tuple(islice(it, size)), ())"
7123,    if padval == _no_padding:
7124,        yield from chunker
7125,    else:
7126,        for ch in chunker:
7127,"            yield ch if len(ch) == size else ch + (padval,) * (size - len(ch))"
7128,">>> list(chunk([1, 2, (), (), 5], 2))"
7129,"[(1, 2), ((), ()), (5,)]"
7130,">>> list(chunk([1, 2, None, None, 5], 2, None))"
7131,"[(1, 2), (None, None), (5, None)]"
7132,"def split_seq(iterable, size):"
7133,    it = iter(iterable)
7134,"    item = list(itertools.islice(it, size))"
7135,    while item:
7136,        yield item
7137,"        item = list(itertools.islice(it, size))"
7138,>>> import pprint
7139,">>> pprint.pprint(list(split_seq(xrange(75), 10)))"
7140,"[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],"
7141," [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],"
7142," [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],"
7143," [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],"
7144," [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],"
7145," [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],"
7146," [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],"
7147," [70, 71, 72, 73, 74]]"
7148,"L = range(1, 1000)"
7149,"print [L[x:x+10] for x in xrange(0, len(L), 10)]"
7150,"def chunks(L, n): return [L[x: x+n] for x in xrange(0, len(L), n)]"
7151,"chunks(L, 10)"
7152,"def chunk(input, size):"
7153,"    return map(None, *([iter(input)] * size))"
7154,"return map(lambda *x: x, *([iter(input)] * size))"
7155,>>> import statistics
7156,">>> statistics.variance([5,5,5,5,1]) "
7157,3.2
7158,">>> statistics.variance([5,4,4,4,4]) "
7159,0.19999999999999998
7160,"[60, 61, 62, 63, 64, 65, 66, 67, 68, 69],"
7161,"[70, 71, 72, 73, 74]]"
7162,"list(grouper(3, range(7)))"
7163,"chunk(range(7), 3)"
7164,"[(0, 1, 2), (3, 4, 5), (6, None, None)]"
7165,None
7166,itertools.cycle
7167,from itertools import cycle
7168,"items = range(10, 75)"
7169,number_of_baskets = 10
7170,baskets = [[] for _ in range(number_of_baskets)]
7171,"for element, basket in zip(items, cycle(baskets)):"
7172,    basket.append(element)
7173,>>> from pprint import pprint
7174,>>> pprint(baskets)
7175,"[[10, 20, 30, 40, 50, 60, 70],"
7176," [11, 21, 31, 41, 51, 61, 71],"
7177," [12, 22, 32, 42, 52, 62, 72],"
7178," [13, 23, 33, 43, 53, 63, 73],"
7179," [14, 24, 34, 44, 54, 64, 74],"
7180," [15, 25, 35, 45, 55, 65],"
7181," [16, 26, 36, 46, 56, 66],"
7182," [17, 27, 37, 47, 57, 67],"
7183," [18, 28, 38, 48, 58, 68],"
7184," [19, 29, 39, 49, 59, 69]]"
7185,from itertools import cycle
7186,"from typing import List, Any"
7187,
7188,"def cycle_baskets(items: List[Any], maxbaskets: int) -> List[List[Any]]:"
7189,"    baskets = [[] for _ in range(min(maxbaskets, len(items)))]"
7190,"    for item, basket in zip(items, cycle(baskets)):"
7191,        basket.append(item)
7192,    return baskets
7193,start = 0
7194,stop = None
7195,step = number_of_baskets
7196,
7197,first_basket = items[start:stop:step]
7198,"from typing import List, Any"
7199,
7200,"def slice_baskets(items: List[Any], maxbaskets: int) -> List[List[Any]]:"
7201,"    n_baskets = min(maxbaskets, len(items))"
7202,    return [items[i::n_baskets] for i in range(n_baskets)]
7203,islice
7204,from itertools import islice
7205,"from typing import List, Any, Generator"
7206,    
7207,"def yield_islice_baskets(items: List[Any], maxbaskets: int) -> Generator[List[Any], None, None]:"
7208,"    n_baskets = min(maxbaskets, len(items))"
7209,    for i in range(n_baskets):
7210,"        yield islice(items, i, None, n_baskets)"
7211,from pprint import pprint
7212,
7213,"items = list(range(10, 75))"
7214,"pprint(cycle_baskets(items, 10))"
7215,"pprint(slice_baskets(items, 10))"
7216,"pprint([list(s) for s in yield_islice_baskets(items, 10)])"
7217,"def baskets_from(items, maxbaskets=25):"
7218,    baskets = [[] for _ in range(maxbaskets)]
7219,"    for i, item in enumerate(items):"
7220,        baskets[i % maxbaskets].append(item)
7221,"    return filter(None, baskets) "
7222,"def iter_baskets_from(items, maxbaskets=3):"
7223,    '''generates evenly balanced baskets from indexable iterable'''
7224,    item_count = len(items)
7225,"    baskets = min(item_count, maxbaskets)"
7226,    for x_i in range(baskets):
7227,"        yield [items[y_i] for y_i in range(x_i, item_count, baskets)]"
7228,    
7229,"def iter_baskets_contiguous(items, maxbaskets=3, item_count=None):"
7230,    '''
7231,"    generates balanced baskets from iterable, contiguous contents"
7232,    provide item_count if providing a iterator that doesn't support len()
7233,    '''
7234,    item_count = item_count or len(items)
7235,"    baskets = min(item_count, maxbaskets)"
7236,    items = iter(items)
7237,    floor = item_count // baskets 
7238,    ceiling = floor + 1
7239,    stepdown = item_count % baskets
7240,    for x_i in range(baskets):
7241,        length = ceiling if x_i < stepdown else floor
7242,        yield [items.next() for _ in range(length)]
7243,"print(baskets_from(range(6), 8))"
7244,"print(list(iter_baskets_from(range(6), 8)))"
7245,"print(list(iter_baskets_contiguous(range(6), 8)))"
7246,"print(baskets_from(range(22), 8))"
7247,"print(list(iter_baskets_from(range(22), 8)))"
7248,"print(list(iter_baskets_contiguous(range(22), 8)))"
7249,"print(baskets_from('ABCDEFG', 3))"
7250,"print(list(iter_baskets_from('ABCDEFG', 3)))"
7251,"print(list(iter_baskets_contiguous('ABCDEFG', 3)))"
7252,"print(baskets_from(range(26), 5))"
7253,"print(list(iter_baskets_from(range(26), 5)))"
7254,"print(list(iter_baskets_contiguous(range(26), 5)))"
7255,"[[0], [1], [2], [3], [4], [5]]"
7256,"[[0], [1], [2], [3], [4], [5]]"
7257,"[[0], [1], [2], [3], [4], [5]]"
7258,"[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]"
7259,"[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]"
7260,"[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19], [20, 21]]"
7261,"[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]"
7262,"[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]"
7263,"[['A', 'B', 'C'], ['D', 'E'], ['F', 'G']]"
7264,"[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]"
7265,"[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]"
7266,"[[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]"
7267,"list(grouper(3, xrange(7)))"
7268,"chunk(xrange(7), 3)"
7269,"[(0, 1, 2), (3, 4, 5), (6, None, None)]"
7270,None
7271,import pandas as pd; [pd.DataFrame(np.arange(7))[i::3] for i in xrange(3)]
7272,"def SplitList(mylist, chunk_size):"
7273,"    return [mylist[offs:offs+chunk_size] for offs in range(0, len(mylist), chunk_size)]"
7274,"def IterChunks(sequence, chunk_size):"
7275,    res = []
7276,    for item in sequence:
7277,        res.append(item)
7278,        if len(res) >= chunk_size:
7279,            yield res
7280,            res = []
7281,    if res:
7282,"        yield res  # yield the last, incomplete, portion"
7283,from itertools import zip_longest
7284,
7285,"a = range(1, 16)"
7286,i = iter(a)
7287,"r = list(zip_longest(i, i, i))"
7288,>>> print(r)
7289,"[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]"
7290,"a = range(1, 15)"
7291,"[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, None)]"
7292,zip_longest
7293,zip
7294,"(13, 14, None)"
7295,izip_longest
7296,import itertools as it
7297,import collections as ct
7298,
7299,import more_itertools as mit
7300,
7301,
7302,iterable = range(11)
7303,n = 3
7304,more_itertools
7305,"list(mit.chunked(iterable, n))"
7306,"# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]"
7307,
7308,"list(mit.sliced(iterable, n))"
7309,"# [range(0, 3), range(3, 6), range(6, 9), range(9, 11)]"
7310,
7311,"list(mit.grouper(n, iterable))"
7312,"# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, None)]"
7313,
7314,"list(mit.windowed(iterable, len(iterable)//n, step=n))"
7315,"# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, None)]"
7316,
7317,"list(mit.chunked_even(iterable, n))"
7318,"# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]"
7319,list(it.zip_longest(*[iter(iterable)] * n))
7320,"# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, None)]"
7321,d = {}
7322,"for i, x in enumerate(iterable):"
7323,"    d.setdefault(i//n, []).append(x)"
7324,    
7325,
7326,list(d.values())
7327,"# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]"
7328,dd = ct.defaultdict(list)
7329,"for i, x in enumerate(iterable):"
7330,    dd[i//n].append(x)
7331,    
7332,
7333,list(dd.values())
7334,"# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]"
7335,more_itertools.chunked
7336,more_itertools.sliced
7337,more_itertools.grouper
7338,more_itertools.windowed
7339,stagger
7340,zip_offset
7341,more_itertools.chunked_even
7342,zip_longest
7343,setdefault
7344,collections.defaultdict
7345,> pip install more_itertools
7346,[AA[i:i+SS] for i in range(len(AA))[::SS]]
7347,">>> AA=range(10,21);SS=3"
7348,>>> [AA[i:i+SS] for i in range(len(AA))[::SS]]
7349,"[[10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20]]"
7350,"# or [range(10, 13), range(13, 16), range(16, 19), range(19, 21)] in py3"
7351,(py3) >>> [list(AA[i:i+SS]) for i in range(len(AA))[::SS]]
7352,"[[10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20]]"
7353,zip(*[iterable[i::3] for i in range(3)]) 
7354,zip_longest
7355,itertools
7356,partition
7357,from toolz.itertoolz.core import partition
7358,
7359,"list(partition(2, [1, 2, 3, 4]))"
7360,"[(1, 2), (3, 4)]"
7361,import itertools
7362,
7363,"def batch(iterable, size):"
7364,    it = iter(iterable)
7365,"    while item := list(itertools.islice(it, size)):"
7366,        yield item
7367,>>> import pprint
7368,">>> pprint.pprint(list(batch(range(75), 10)))"
7369,"[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],"
7370," [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],"
7371," [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],"
7372," [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],"
7373," [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],"
7374," [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],"
7375," [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],"
7376," [70, 71, 72, 73, 74]]"
7377,import time
7378,batch_size = 7
7379,arr_len = 298937
7380,
7381,#---------slice-------------
7382,
7383,"print(""\r\nslice"")"
7384,start = time.time()
7385,"arr = [i for i in range(0, arr_len)]"
7386,while True:
7387,    if not arr:
7388,        break
7389,
7390,    tmp = arr[0:batch_size]
7391,    arr = arr[batch_size:-1]
7392,print(time.time() - start)
7393,
7394,#-----------index-----------
7395,
7396,"print(""\r\nindex"")"
7397,"arr = [i for i in range(0, arr_len)]"
7398,start = time.time()
7399,"for i in range(0, round(len(arr) / batch_size + 1)):"
7400,    tmp = arr[batch_size * i : batch_size * (i + 1)]
7401,print(time.time() - start)
7402,
7403,#----------batches 1------------
7404,
7405,"def batch(iterable, n=1):"
7406,    l = len(iterable)
7407,"    for ndx in range(0, l, n):"
7408,"        yield iterable[ndx:min(ndx + n, l)]"
7409,
7410,"print(""\r\nbatches 1"")"
7411,"arr = [i for i in range(0, arr_len)]"
7412,start = time.time()
7413,"for x in batch(arr, batch_size):"
7414,    tmp = x
7415,print(time.time() - start)
7416,
7417,#----------batches 2------------
7418,
7419,"from itertools import islice, chain"
7420,
7421,"def batch(iterable, size):"
7422,    sourceiter = iter(iterable)
7423,    while True:
7424,"        batchiter = islice(sourceiter, size)"
7425,"        yield chain([next(batchiter)], batchiter)"
7426,
7427,
7428,"print(""\r\nbatches 2"")"
7429,"arr = [i for i in range(0, arr_len)]"
7430,start = time.time()
7431,"for x in batch(arr, batch_size):"
7432,    tmp = x
7433,print(time.time() - start)
7434,
7435,#---------chunks-------------
7436,"def chunks(l, n):"
7437,"    """"""Yield successive n-sized chunks from l."""""""
7438,"    for i in range(0, len(l), n):"
7439,        yield l[i:i + n]
7440,"print(""\r\nchunks"")"
7441,"arr = [i for i in range(0, arr_len)]"
7442,start = time.time()
7443,"for x in chunks(arr, batch_size):"
7444,    tmp = x
7445,print(time.time() - start)
7446,
7447,#-----------grouper-----------
7448,
7449,from itertools import zip_longest # for Python 3.x
7450,#from six.moves import zip_longest # for both (uses the six compat library)
7451,
7452,"def grouper(iterable, n, padvalue=None):"
7453,"    ""grouper(3, 'abcdefg', 'x') --> ('a','b','c'), ('d','e','f'), ('g','x','x')"""
7454,"    return zip_longest(*[iter(iterable)]*n, fillvalue=padvalue)"
7455,
7456,"arr = [i for i in range(0, arr_len)]"
7457,"print(""\r\ngrouper"")"
7458,start = time.time()
7459,"for x in grouper(arr, batch_size):"
7460,    tmp = x
7461,print(time.time() - start)
7462,slice
7463,31.18285083770752
7464,
7465,index
7466,0.02184295654296875
7467,
7468,batches 1
7469,0.03503894805908203
7470,
7471,batches 2
7472,0.22681021690368652
7473,
7474,chunks
7475,0.019841909408569336
7476,
7477,grouper
7478,0.006506919860839844
7479,from itertools import islice
7480,
7481,"def chunks(n, iterable):"
7482,    iterable = iter(iterable)
7483,    while True:
7484,"        yield tuple(islice(iterable, n)) or iterable.next()"
7485,"from itertools import chain, islice"
7486,
7487,"def chunks(n, iterable):"
7488,   iterable = iter(iterable)
7489,   while True:
7490,"       yield chain([next(iterable)], islice(iterable, n-1))"
7491,get_chunks
7492,utilspie
7493,>>> from utilspie import iterutils
7494,">>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9]"
7495,
7496,">>> list(iterutils.get_chunks(a, 5))"
7497,"[[1, 2, 3, 4, 5], [6, 7, 8, 9]]"
7498,utilspie
7499,sudo pip install utilspie
7500,"def split_list(the_list, chunk_size):"
7501,    result_list = []
7502,    while the_list:
7503,        result_list.append(the_list[:chunk_size])
7504,        the_list = the_list[chunk_size:]
7505,    return result_list
7506,
7507,"a_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
7508,
7509,"print split_list(a_list, 3)"
7510,"[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]"
7511,"def chunks(li, n):"
7512,    if li == []:
7513,        return
7514,    yield li[:n]
7515,"    for e in chunks(li[n:], n):"
7516,        yield e
7517,"def chunks(li, n):"
7518,    if li == []:
7519,        return
7520,    yield li[:n]
7521,"    yield from chunks(li[n:], n)"
7522,def dec(gen):
7523,"    def new_gen(li, n):"
7524,"        for e in gen(li, n):"
7525,            if e == []:
7526,                return
7527,            yield e
7528,    return new_gen
7529,
7530,@dec
7531,"def chunks(li, n):"
7532,    yield li[:n]
7533,"    for e in chunks(li[n:], n):"
7534,        yield e
7535,"In [48]: chunk = lambda ulist, step:  map(lambda i: ulist[i:i+step],  xrange(0, len(ulist), step))"
7536,
7537,"In [49]: chunk(range(1,100), 10)"
7538,Out[49]: 
7539,"[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],"
7540," [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],"
7541," [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],"
7542," [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],"
7543," [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],"
7544," [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],"
7545," [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],"
7546," [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],"
7547," [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],"
7548," [91, 92, 93, 94, 95, 96, 97, 98, 99]]"
7549,def chunk
7550,chunk=lambda
7551,"def split_seq(seq, num_pieces):"
7552,    start = 0
7553,    for i in xrange(num_pieces):
7554,        stop = start + len(seq[i::num_pieces])
7555,        yield seq[start:stop]
7556,        start = stop
7557,"seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
7558,
7559,"for seq in split_seq(seq, 3):"
7560,    print seq
7561,"def chunkList(initialList, chunkSize):"
7562,"    """""""
7563,    This function chunks a list into sub lists 
7564,    that have a length equals to chunkSize.
7565,
7566,    Example:
7567,"    lst = [3, 4, 9, 7, 1, 1, 2, 3]"
7568,"    print(chunkList(lst, 3)) "
7569,    returns
7570,"    [[3, 4, 9], [7, 1, 1], [2, 3]]"
7571,"    """""""
7572,    finalList = []
7573,"    for i in range(0, len(initialList), chunkSize):"
7574,        finalList.append(initialList[i:i+chunkSize])
7575,    return finalList
7576,"def splitter(l, n):"
7577,    i = 0
7578,    chunk = l[:n]
7579,    while chunk:
7580,        yield chunk
7581,        i += n
7582,        chunk = l[i:i+n]
7583,"def isplitter(l, n):"
7584,    l = iter(l)
7585,"    chunk = list(islice(l, n))"
7586,    while chunk:
7587,        yield chunk
7588,"        chunk = list(islice(l, n))"
7589,"def isplitter2(l, n):"
7590,"    return takewhile(bool,"
7591,"                     (tuple(islice(start, n))"
7592,                            for start in repeat(iter(l))))
7593,"def chunks_gen_sentinel(n, seq):"
7594,"    continuous_slices = imap(islice, repeat(iter(seq)), repeat(0), repeat(n))"
7595,"    return iter(imap(tuple, continuous_slices).next,())"
7596,"def chunks_gen_filter(n, seq):"
7597,"    continuous_slices = imap(islice, repeat(iter(seq)), repeat(0), repeat(n))"
7598,"    return takewhile(bool,imap(tuple, continuous_slices))"
7599,len()
7600,">>> orange = range(1, 1001)"
7601,>>> otuples = list( zip(*[iter(orange)]*10))
7602,>>> print(otuples)
7603,"[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), ... (991, 992, 993, 994, 995, 996, 997, 998, 999, 1000)]"
7604,>>> olist = [list(i) for i in otuples]
7605,>>> print(olist)
7606,"[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ..., [991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]]"
7607,>>> 
7608,zip(*[iter(range(7))]*3)
7609,"[(0, 1, 2), (3, 4, 5)]"
7610,6
7611,"def chunks(iterable,n):"
7612,"    """"""assumes n is an integer>0"
7613,"    """""""
7614,    iterable=iter(iterable)
7615,    while True:
7616,        result=[]
7617,        for i in range(n):
7618,            try:
7619,                a=next(iterable)
7620,            except StopIteration:
7621,                break
7622,            else:
7623,                result.append(a)
7624,        if result:
7625,            yield result
7626,        else:
7627,            break
7628,
7629,g1=(i*i for i in range(10))
7630,"g2=chunks(g1,3)"
7631,print g2
7632,'<generator object chunks at 0x0337B9B8>'
7633,print list(g2)
7634,"'[[0, 1, 4], [9, 16, 25], [36, 49, 64], [81]]'"
7635,boltons
7636,iterutils.chunked_iter
7637,from boltons import iterutils
7638,
7639,"list(iterutils.chunked_iter(list(range(50)), 11))"
7640,"[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],"
7641," [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],"
7642," [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],"
7643," [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],"
7644," [44, 45, 46, 47, 48, 49]]"
7645,list
7646,iterutils.chunked
7647,import matplotlib.cbook as cbook
7648,"segments = cbook.pieces(np.arange(20), 3)"
7649,for s in segments:
7650,     print s
7651,"a = [1, 2, 3, 4, 5, 6, 7, 8, 9]"
7652,CHUNK = 4
7653,[a[i*CHUNK:(i+1)*CHUNK] for i in xrange((len(a) + CHUNK - 1) / CHUNK )]
7654,'Changed'
7655,'Original'
7656,class PassByReference:
7657,    def __init__(self):
7658,        self.variable = 'Original'
7659,        self.change(self.variable)
7660,        print(self.variable)
7661,
7662,"    def change(self, var):"
7663,        var = 'Changed'
7664,def try_to_change_list_contents(the_list):
7665,"    print('got', the_list)"
7666,    the_list.append('four')
7667,"    print('changed to', the_list)"
7668,
7669,"outer_list = ['one', 'two', 'three']"
7670,
7671,"print('before, outer_list =', outer_list)"
7672,try_to_change_list_contents(outer_list)
7673,"print('after, outer_list =', outer_list)"
7674,"before, outer_list = ['one', 'two', 'three']"
7675,"got ['one', 'two', 'three']"
7676,"changed to ['one', 'two', 'three', 'four']"
7677,"after, outer_list = ['one', 'two', 'three', 'four']"
7678,outer_list
7679,def try_to_change_list_reference(the_list):
7680,"    print('got', the_list)"
7681,"    the_list = ['and', 'we', 'can', 'not', 'lie']"
7682,"    print('set to', the_list)"
7683,
7684,"outer_list = ['we', 'like', 'proper', 'English']"
7685,
7686,"print('before, outer_list =', outer_list)"
7687,try_to_change_list_reference(outer_list)
7688,"print('after, outer_list =', outer_list)"
7689,"before, outer_list = ['we', 'like', 'proper', 'English']"
7690,"got ['we', 'like', 'proper', 'English']"
7691,"set to ['and', 'we', 'can', 'not', 'lie']"
7692,"after, outer_list = ['we', 'like', 'proper', 'English']"
7693,the_list
7694,the_list
7695,outer_list
7696,the_list
7697,outer_list
7698,def try_to_change_string_reference(the_string):
7699,"    print('got', the_string)"
7700,    the_string = 'In a kingdom by the sea'
7701,"    print('set to', the_string)"
7702,
7703,outer_string = 'It was many and many a year ago'
7704,
7705,"print('before, outer_string =', outer_string)"
7706,try_to_change_string_reference(outer_string)
7707,"print('after, outer_string =', outer_string)"
7708,"before, outer_string = It was many and many a year ago"
7709,got It was many and many a year ago
7710,set to In a kingdom by the sea
7711,"after, outer_string = It was many and many a year ago"
7712,the_string
7713,the_string
7714,outer_string
7715,the_string
7716,outer_string
7717,def return_a_whole_new_string(the_string):
7718,    new_string = something_to_do_with_the_old_string(the_string)
7719,    return new_string
7720,
7721,# then you could call it like
7722,my_string = return_a_whole_new_string(my_string)
7723,def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):
7724,    new_string = something_to_do_with_the_old_string(stuff_to_change[0])
7725,    stuff_to_change[0] = new_string
7726,
7727,# then you could call it like
7728,wrapper = [my_string]
7729,use_a_wrapper_to_simulate_pass_by_reference(wrapper)
7730,
7731,do_something_with(wrapper[0])
7732,"def Foo(alist): alist = [1,2,3]"
7733,a = 1
7734,a = 2
7735,a
7736,1
7737,2
7738,a
7739,1
7740,2
7741,a
7742,def __init__(self):
7743,    self.variable = 'Original'
7744,    self.Change(self.variable)
7745,
7746,"def Change(self, var):"
7747,    var = 'Changed'
7748,self.variable
7749,'Original'
7750,Change
7751,var
7752,var
7753,'Changed'
7754,self.variable
7755,def __init__(self):         
7756,    self.variable = ['Original']
7757,    self.Change(self.variable)
7758,
7759,"def Change(self, var):"
7760,    var[0] = 'Changed'
7761,id
7762,B[0] = 2
7763,B = 2
7764,A=B
7765,B=A
7766,Change
7767,var
7768,'Original'
7769,var = 'Changed'
7770,var
7771,'Original'
7772,'Changed'
7773,swap
7774,"a = [42] ; b = 'Hello'; swap(a, b) # Now a is 'Hello', b is [42]"
7775,"a = [1, 2, 3]"
7776,b = a
7777,b.append(4)
7778,"b = ['a', 'b']"
7779,"print a, b      # prints [1, 2, 3, 4] ['a', 'b']"
7780,a = 1
7781,a
7782,b = x
7783,b
7784,x
7785,b
7786,x
7787,self.Change(self.variable)
7788,var
7789,Change
7790,'Original'
7791,var = 'Changed'
7792,Change
7793,self.variable
7794,[self.variable]
7795,var[0]
7796,int
7797,Integer
7798,Integer
7799,int
7800,a = 1; b = a; a++ # doesn't modify b
7801,+= 1
7802,++
7803,x = 1000
7804,x = 2000
7805,y = x
7806,x = []; y = x; x.append(10); print y
7807,[10]
7808,id()
7809,lst
7810,id()
7811,"def Change(self, var):"
7812,    var[0] = 'Changed'
7813,
7814,variable = ['Original']
7815,self.Change(variable)      
7816,print variable[0]
7817,"void swap(int& x, int& y) { int temp = x; x = y; y = temp; }"
7818,var
7819,&
7820,"x = [ 2, 4, 4, 5, 5 ]"
7821,"print x  # 2, 4, 4, 5, 5"
7822,
7823,def go( li ) :
7824,"  li = [ 5, 6, 7, 8 ]  # re-assigning what li POINTS TO, does not"
7825,  # change the value of the ORIGINAL variable x
7826,
7827,go( x ) 
7828,"print x  # 2, 4, 4, 5, 5  [ STILL! ]"
7829,
7830,
7831,raw_input( 'press any key to continue' )
7832,var
7833,Change
7834,self.variable
7835,var
7836,self.variable
7837,var
7838,self.variable
7839,>>> class PassByReference:
7840,...     def __init__(self):
7841,...         self.variable = ['Original']
7842,...         self.change(self.variable)
7843,...         print self.variable
7844,...         
7845,"...     def change(self, var):"
7846,...         var.append('Changed')
7847,... 
7848,>>> q = PassByReference()
7849,"['Original', 'Changed']"
7850,>>> 
7851,def test(l):
7852,"    print ""Received"", l , id(l)"
7853,"    l = [0, 0, 0]"
7854,"    print ""Changed to"", l, id(l)  # New local object created, breaking link to global l"
7855,
7856,"l= [1,2,3]"
7857,"print ""Original"", l, id(l)"
7858,test(l)
7859,"print ""After"", l, id(l)"
7860,"Original [1, 2, 3] 4454645632"
7861,"Received [1, 2, 3] 4454645632"
7862,"Changed to [0, 0, 0] 4474591928"
7863,"After [1, 2, 3] 4454645632"
7864,>>> def x(y):
7865,...     global z
7866,...     z = y
7867,...
7868,
7869,>>> x
7870,<function x at 0x00000000020E1730>
7871,>>> y
7872,Traceback (most recent call last):
7873,"  File ""<stdin>"", line 1, in <module>"
7874,NameError: name 'y' is not defined
7875,>>> z
7876,Traceback (most recent call last):
7877,"  File ""<stdin>"", line 1, in <module>"
7878,NameError: name 'z' is not defined
7879,
7880,>>> x(2)
7881,>>> x
7882,<function x at 0x00000000020E1730>
7883,>>> y
7884,Traceback (most recent call last):
7885,"  File ""<stdin>"", line 1, in <module>"
7886,NameError: name 'y' is not defined
7887,>>> z
7888,2
7889,pass by object
7890,def change_me(list):
7891,"   list = [1, 2, 3]"
7892,
7893,"my_list = [0, 1]"
7894,change_me(my_list)
7895,change_me
7896,"[0, 1] = [1, 2, 3]"
7897,def change_me(list):
7898,   list.append(2)
7899,"[0, 1].append(2)"
7900,"list = [1, 2, 3]"
7901,list
7902,"list[:] = [1, 2, 3]"
7903,list
7904,"[0, 1] = [1, 2, 3]"
7905,"[0, 1] = [1, 2, 3]"
7906,alist[2]
7907,class PassByReference:
7908,    def __init__(self):
7909,        self.variable = 'Original'
7910,        self.Change()
7911,        print self.variable
7912,
7913,    def Change(self):
7914,        self.variable = 'Changed'
7915,self
7916,__init__
7917,self
7918,def Change
7919,class PassByReference:
7920,    def __init__(self):
7921,        self.variable = 'Original'
7922,        self.variable = PassByReference.Change(self.variable)
7923,        print self.variable
7924,
7925,    @staticmethod
7926,    def Change(var):
7927,        var = 'Changed'
7928,        return var
7929,a=0
7930,b=0
7931,c=0
7932,"def myfunc(a,b,c):"
7933,    a=1
7934,    b=2
7935,    c=3
7936,"    return a,b,c"
7937,
7938,"a,b,c = myfunc(a,b,c)"
7939,"print a,b,c"
7940,dict
7941,dict
7942,dict
7943,bool
7944,class PassByReference:
7945,"    def __init__(self, name):"
7946,        self.name = name
7947,
7948,def changeRef(ref):
7949,    ref[0] = PassByReference('Michael')
7950,
7951,obj = PassByReference('Peter')
7952,print obj.name
7953,
7954,p = [obj] # A pointer to obj! ;-)
7955,changeRef(p)
7956,
7957,print p[0].name # p->name
7958,p
7959,obj
7960,changeRef
7961,changeRef
7962,ref
7963,p
7964,ref
7965,PassByReference('Michael')
7966,ref
7967,p
7968,p
7969,ref
7970,PassByReference('Michael')
7971,p[0].name
7972,Michael
7973,ref
7974,name
7975,PassByReference
7976,obj
7977,obj.name
7978,Peter
7979,Mark Ransom
7980,PassByReference
7981,PassByReference
7982,class PassByReferenceIsh:
7983,    def __init__(self):
7984,        self.variable = 'Original'
7985,        self.change('variable')
7986,        print self.variable
7987,
7988,"    def change(self, var):"
7989,        self.__dict__[var] = 'Changed'
7990,class PassByReference:
7991,    def __init__(self):
7992,        self.variable = 'Original'
7993,        self.change('variable')
7994,        print(self.variable)
7995,
7996,"    def change(self, var):"
7997,"        setattr(self, var, 'Changed')"
7998,
7999,# o.variable will equal 'Changed'
8000,o = PassByReference()
8001,assert o.variable == 'Changed'
8002,def need_to_modify(update):
8003,    update(42) # set new value 42
8004,    # other code
8005,
8006,def call_it():
8007,    value = 21
8008,    def update_value(new_value):
8009,        nonlocal value
8010,        value = new_value
8011,    need_to_modify(update_value)
8012,    print(value) # prints 42
8013,# returns the result of adding numbers `a` and `b`
8014,"def AddNumbers(a, b, ref): # using a dict for reference"
8015,    result = a + b
8016,    ref['multi'] = a * b # reference the multi. ref['multi'] is number
8017,"    ref['msg'] = ""The result: "" + str(result) + "" was nice!"""
8018,    return result
8019,
8020,number1 = 5
8021,number2 = 10
8022,"ref = {} # init a dict like that so it can save all the referenced values. this is because all dictionaries are passed by reference, while strings and numbers do not."
8023,
8024,"sum = AddNumbers(number1, number2, ref)"
8025,"print(""sum: "", sum)             # the returned value"
8026,"print(""multi: "", ref['multi'])  # a referenced value"
8027,"print(""msg: "", ref['msg'])      # a referenced value"
8028,global
8029,nonlocal
8030,def change(wrapper):
8031,    wrapper(7)
8032,
8033,x = 5
8034,def setter(val):
8035,    global x
8036,    x = val
8037,print(x)
8038,del
8039,lambda: x
8040,class ByRef:
8041,"    def __init__(self, r, w, d):"
8042,        self._read = r
8043,        self._write = w
8044,        self._delete = d
8045,"    def set(self, val):"
8046,        self._write(val)
8047,    def get(self):
8048,        return self._read()
8049,    def remove(self):
8050,        self._delete()
8051,"    wrapped = property(get, set, remove)"
8052,
8053,"# left as an exercise for the reader: define set, get, remove as local functions using global / nonlocal"
8054,"r = ByRef(get, set, remove)"
8055,r.wrapped = 15
8056,class ByRef:
8057,"    def __init__(self, locs, name):"
8058,        self._locs = locs
8059,        self._name = name
8060,"    def set(self, val):"
8061,        self._locs[self._name] = val
8062,    def get(self):
8063,        return self._locs[self._name]
8064,    def remove(self):
8065,        del self._locs[self._name]
8066,"    wrapped = property(get, set, remove)"
8067,
8068,def change(x):
8069,    x.wrapped = 7
8070,
8071,def test_me():
8072,    x = 6
8073,    print(x)
8074,"    change(ByRef(locals(), ""x""))"
8075,    print(x)
8076,ByRef
8077,wrapped
8078,locals
8079,class RefsObj(object):
8080,"    ""A class which helps to create references to variables."""
8081,    pass
8082,
8083,...
8084,
8085,# an example of usage
8086,def change_ref_var(ref_obj):
8087,    ref_obj.val = 24
8088,
8089,ref_obj = RefsObj()
8090,ref_obj.val = 1
8091,print(ref_obj.val) # or print ref_obj.val for python2
8092,change_ref_var(ref_obj)
8093,print(ref_obj.val)
8094,def somefunction(p):
8095,    a=p+1
8096,    b=p+2
8097,    c=-p
8098,"    return a, b, c"
8099,"x, y, z = somefunction(w)"
8100,"def somefunction(a, b, c):"
8101,    a = a * 2
8102,    b = b + a
8103,    c = a * b * c
8104,"    return a, b, c"
8105,
8106,x = 3
8107,y = 5
8108,z = 10
8109,"print(F""Before : {x}, {y}, {z}"")"
8110,
8111,"x, y, z = somefunction(x, y, z)"
8112,
8113,"print(F""After  : {x}, {y}, {z}"")"
8114,tuple
8115,"a, b, c"
8116,import ctypes
8117,
8118,def f(a):
8119,    a.value=2398 ## resign the value in a function
8120,
8121,a = ctypes.c_int(0)
8122,"print(""pre f"", a)"
8123,f(a)
8124,"print(""post f"", a)"
8125,import builtins
8126,
8127,class sstr(str):
8128,    def __str__(self):
8129,"        if hasattr(self, 'changed'):"
8130,            return self.changed
8131,
8132,        return self
8133,
8134,"    def change(self, value):"
8135,        self.changed = value
8136,
8137,builtins.str = sstr
8138,
8139,def change_the_value(val):
8140,    val.change('After')
8141,
8142,val = str('Before')
8143,print (val)
8144,change_the_value(val)
8145,print (val)
8146,from dataclasses import dataclass
8147,
8148,@dataclass
8149,class Holder:
8150,"    obj: your_type # Need any type? Use ""obj: object"" then."
8151,
8152,def foo(ref: Holder):
8153,    ref.obj = do_something()
8154,"browser.find_element_by_css_selector("".reply-button"").click()"
8155,sleep(5)
8156,"email=browser.find_element_by_css_selector("".anonemail"").get_attribute(""value"")"
8157,presence_of_element_located()
8158,"WebDriverWait(browser, 20).until(EC.presence_of_element_located((By.CSS_SELECTOR, "".reply-button""))).click()"
8159,visibility_of_element_located(locator)
8160,"email = WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ""element_css""))).get_attribute(""value"")"
8161,click()
8162,element_to_be_clickable()
8163,"WebDriverWait(browser, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "".reply-button""))).click()"
8164,.visibility_of_element_located
8165,"browser.find_element_by_css_selector("".reply-button"").click()"
8166,
8167,"# Wait for initialize, in seconds"
8168,"wait = WebDriverWait(browser, 10)"
8169,
8170,"email = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, '.anonemail'))).get_attribute(""value"")"
8171,print(email)
8172,from selenium.webdriver.common.by import By
8173,from selenium.webdriver.support.ui import WebDriverWait
8174,from selenium.webdriver.support import expected_conditions as EC
8175,driver = webdriver.Firefox()
8176,"driver.get(""http://somedomain/url_that_delays_loading"")"
8177,try:
8178,"    element = WebDriverWait(driver, 10).until("
8179,"        EC.visibility_of_element_located((By.ID, ""myDynamicElement""))"
8180,    )
8181,finally:
8182,    driver.quit()
8183,from selenium import webdriver
8184,
8185,driver = webdriver.Firefox()
8186,driver.implicitly_wait(15)
8187,"driver.get(""http://url"")"
8188,"driver.find_element_by_id(""id_of_element"").click()"
8189,browser.implicitly_wait(10)
8190,"browser.find_element_by_css_selector("".reply-button"").click()"
8191,"email = browser.find_element_by_css_selector("".anonemail"").get_attribute(""value"")"
8192,"WebDriverWait(driver, 5).until(         EC.presence_of_element_located((By.CSS_SELECTOR, "".reply-button"")))"
8193,.reply-button
8194,"WebDriverWait(driver, 5).until(         EC.visibility_of_element_located((By.CSS_SELECTOR, "".reply-button”))))"
8195,.reply-button
8196,"WebDriverWait(driver, 5).until(         EC.element_to_be_clickable((By.CSS_SELECTOR, "".reply-button”))))"
8197,.reply-button
8198,implicit_wait()
8199,WebDriverWait
8200,implicit_wait(10)
8201,web driver
8202,"element = driver.find_elements_by_xpath(""//button[contains(string(), 'Log In')]"")[0]"
8203,"driver.execute_script(""arguments[0].click();"", element)"
8204,E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
8205,"Try using .loc[row_index,col_indexer] = value instead"
8206,  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
8207,quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
8208,def _decode_stock_quote(list_of_150_stk_str):
8209,"    """"""decode the webpage and return dataframe"""""""
8210,
8211,    from cStringIO import StringIO
8212,
8213,"    str_of_all = """".join(list_of_150_stk_str)"
8214,
8215,"    quote_df = pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}"
8216,"    quote_df.rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)"
8217,"    quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]"
8218,    quote_df['TClose'] = quote_df['TPrice']
8219,    quote_df['RT']     = 100 * (quote_df['TPrice']/quote_df['TPCLOSE'] - 1)
8220,    quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
8221,    quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
8222,"    quote_df['STK_ID'] = quote_df['STK'].str.slice(13,19)"
8223,"    quote_df['STK_Name'] = quote_df['STK'].str.slice(21,30)#.decode('gb2312')"
8224,    quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
8225,    
8226,    return quote_df
8227,E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
8228,"Try using .loc[row_index,col_indexer] = value instead"
8229,  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
8230,E:\FinReporter\FM_EXT.py:450: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
8231,"Try using .loc[row_index,col_indexer] = value instead"
8232,  quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
8233,E:\FinReporter\FM_EXT.py:453: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
8234,"Try using .loc[row_index,col_indexer] = value instead"
8235,  quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
8236,df.set_value
8237,.at[]
8238,.iat[]
8239,"df.loc[:, foo]"
8240,SettingWithCopyWarning
8241,df[foo]
8242,SettingWithCopyWarning
8243,SettingWithCopyWarning
8244,df[df['A'] > 2]['B'] = new_val  # new_val not set in df
8245,"df.loc[df['A'] > 2, 'B'] = new_val"
8246,df = df[df['A'] > 2]
8247,df['B'] = new_val
8248,import pandas as pd
8249,pd.options.mode.chained_assignment = None  # default='warn'
8250,.copy()
8251,df = df[df['A'].notnull()]
8252,.copy()
8253,SettingWithCopyWarning
8254,np.random.seed(0)
8255,"df = pd.DataFrame(np.random.choice(10, (3, 5)), columns=list('ABCDE'))"
8256,df
8257,   A  B  C  D  E
8258,0  5  0  3  3  7
8259,1  9  3  5  2  4
8260,2  7  6  8  8  1
8261,SettingWithCopyWarning
8262,SettingWithCopyWarning
8263,df
8264,df[df.A > 5]['B']
8265, 
8266,1    3
8267,2    6
8268,"Name: B, dtype: int64"
8269,"df.loc[df.A > 5, 'B']"
8270,
8271,1    3
8272,2    6
8273,"Name: B, dtype: int64"
8274,"df.loc[df.A > 5, 'B'] = 4"
8275,# becomes
8276,"df.__setitem__((df.A > 5, 'B'), 4)"
8277,__setitem__
8278,df
8279,df[df.A > 5]['B'] = 4
8280,# becomes
8281,"df.__getitem__(df.A > 5).__setitem__('B', 4)"
8282,__getitem__
8283,__setitem__
8284,loc
8285,iloc
8286,at
8287,iat
8288,loc
8289,iloc
8290,iloc
8291,"df.loc[df.A > 5, 'B'] = 4"
8292,"df.iloc[(df.A > 5).values, 1] = 4"
8293,"df.loc[1, 'A'] = 100"
8294,"df.iloc[1, 0] = 100"
8295,df
8296,df2 = df[['A']]
8297,df2['A'] /= 2
8298,/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/IPython/__main__.py:1: SettingWithCopyWarning: 
8299,A value is trying to be set on a copy of a slice from a DataFrame.
8300,"Try using .loc[row_indexer,col_indexer] = value instead"
8301,
8302,df2
8303,     A
8304,0  2.5
8305,1  4.5
8306,2  3.5
8307,loc
8308," df2 = df.loc[:, ['A']]"
8309, df2['A'] /= 2     # Does not raise 
8310,pd.options.mode.chained_assignment
8311,None
8312,"""warn"""
8313,"""raise"""
8314,"""warn"""
8315,None
8316,"""raise"""
8317,SettingWithCopyError
8318, pd.options.mode.chained_assignment = None
8319, df2['A'] /= 2
8320,deepcopy
8321, df2 = df[['A']].copy(deep=True)
8322, df2['A'] /= 2
8323,class ChainedAssignent:
8324,"    def __init__(self, chained=None):"
8325,"        acceptable = [None, 'warn', 'raise']"
8326,"        assert chained in acceptable, ""chained must be in "" + str(acceptable)"
8327,        self.swcw = chained
8328,
8329,    def __enter__(self):
8330,        self.saved_swcw = pd.options.mode.chained_assignment
8331,        pd.options.mode.chained_assignment = self.swcw
8332,        return self
8333,
8334,"    def __exit__(self, *args):"
8335,        pd.options.mode.chained_assignment = self.saved_swcw
8336,# some code here
8337,with ChainedAssignent():
8338,    df2['A'] /= 2
8339,# more code follows
8340,with ChainedAssignent(chained='raise'):
8341,    df2['A'] /= 2
8342,
8343,SettingWithCopyError: 
8344,A value is trying to be set on a copy of a slice from a DataFrame.
8345,"Try using .loc[row_indexer,col_indexer] = value instead"
8346,df
8347,       A  B  C  D  E
8348,    0  5  0  3  3  7
8349,    1  9  3  5  2  4
8350,    2  7  6  8  8  1
8351,      A  B  C  D  E
8352,0     5  0  3  3  7
8353,1  1000  3  5  2  4
8354,2  1000  6  8  8  1
8355,"df.A[df.A > 5] = 1000         # works, because df.A returns a view"
8356,df[df.A > 5]['A'] = 1000      # does not work
8357,df.loc[df.A > 5]['A'] = 1000   # does not work
8358,loc
8359,"df.loc[df.A > 5, 'A'] = 1000"
8360,   A  B  C      D  E
8361,0  5  0  3      3  7
8362,1  9  3  5  12345  4
8363,2  7  6  8      8  1
8364,df['D'][1]
8365,"df.loc[1, 'D'] = 12345"
8366,"df.iloc[1, 3] = 12345"
8367,"df.at[1, 'D'] = 12345"
8368,"df.iat[1, 3] = 12345"
8369,   A  B  C  D  E
8370,1  9  3  5  2  4
8371,2  7  6  8  8  1
8372,"df2.loc[df2.C == 5, 'D'] = 123"
8373,SettingWithCopyWarning
8374,df2
8375,df2 = df[df.A > 5]
8376,df2
8377,df2
8378,df2 = df[df.A > 5].copy()
8379,"# Or,"
8380,"# df2 = df.loc[df.A > 5, :]"
8381,   A  B  C  D  E
8382,1  9  3  5  2  4
8383,2  7  6  8  8  1
8384,"df2.drop('C', axis=1, inplace=True)"
8385,SettingWithCopyWarning
8386,df2
8387,df2 = df[df.A > 5]
8388,copy()
8389,df
8390,loc
8391,SettingWithCopyWarning
8392,"In [1]: df = DataFrame(np.random.randn(5, 2), columns=list('AB'))"
8393,
8394,"In [2]: dfa = df.ix[:, [1, 0]]"
8395,
8396,In [3]: dfa.is_copy
8397,Out[3]: True
8398,
8399,In [4]: dfa['A'] /= 2
8400,/usr/local/bin/ipython:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
8401,"Try using .loc[row_index,col_indexer] = value instead"
8402,  #!/usr/local/bin/python
8403,is_copy
8404,False
8405,In [5]: dfa.is_copy = False
8406,
8407,In [6]: dfa['A'] /= 2
8408,"In [7]: dfa = df.ix[:, [1, 0]].copy()"
8409,
8410,In [8]: dfa['A'] /= 2
8411,reindex
8412,"quote_df = quote_df.reindex(columns=['STK', ...])"
8413,"quote_df = quote_df.reindex(['STK', ...], axis=1)  # v.0.21"
8414,"quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]"
8415,pandas.ix
8416,.ix
8417,.ix
8418,"df = pd.DataFrame({""a"": [1,2,3,4], ""b"": [1,1,2,2]})"
8419,"dfcopy = df.ix[:,[""a""]]"
8420,dfcopy.a.ix[0] = 2
8421,dfcopy
8422,df
8423,"df.ix[0, ""a""] = 3"
8424,.loc
8425,.ix
8426,.iloc
8427,.loc
8428,.loc
8429,.loc
8430,pd.read_csv
8431,"quote_df = pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}"
8432,"quote_df.rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)"
8433,"quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]"
8434,"columns = ['STK', 'TPrice', 'TPCLOSE', 'TOpen', 'THigh', 'TLow', 'TVol', 'TAmt', 'TDate', 'TTime']"
8435,"df = pd.read_csv(StringIO(str_of_all), sep=',', usecols=[0,3,2,1,4,5,8,9,30,31])"
8436,df.columns = columns
8437,.ix
8438,.copy(deep=False)
8439,import pandas as pd
8440,"df = pd.DataFrame({'x':[1,2,3]})"
8441,df0 = df[df.x>2]
8442,df0['foo'] = 'bar'
8443,df1 = df[df.x>2].copy(deep=False)
8444,df1['foo'] = 'bar'
8445,df0
8446,df1
8447,DataFrame
8448,import inspect
8449,slice= df[df.x>2]
8450,slice_copy = df[df.x>2].copy(deep=False)
8451,inspect.getmembers(slice)
8452,inspect.getmembers(slice_copy)
8453,|          | slice   | slice_copy |
8454,| _is_copy | weakref | None       |
8455,DataFrame._check_setitem_copy
8456,_is_copy
8457,copy
8458,_is_copy
8459,.loc
8460,.loc
8461,_is_copy
8462,_is_copy
8463,None
8464,_is_copy()
8465,_is_copy
8466,df  # Some DataFrame
8467,"df = df.loc[:, 0:2]  # Some filtering (unsure whether a view or copy is returned)"
8468,df = df.copy()  # Ensuring a copy is made
8469,"df[df[""Name""] == ""John""] = ""Johny""  # Assignment can be done now (no warning)"
8470,.apply()
8471,.query()
8472,"prop_df = df.query('column == ""value""')"
8473,"prop_df['new_column'] = prop_df.apply(function, axis=1)"
8474,prop_df = df.copy(deep=True)
8475,"prop_df = prop_df.query('column == ""value""')"
8476,"prop_df['new_column'] = prop_df.apply(function, axis=1)"
8477,.apply()
8478,.reset_index(drop=True)
8479,"prop_df = df.query('column == ""value""').reset_index(drop=True)"
8480,"prop_df['new_column'] = prop_df.apply(function, axis=1)"
8481,/opt/anaconda3/lib/python3.6/site-packages/ipykernel/__main__.py:54:
8482,SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame
8483,See the caveats in the documentation:
8484,http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
8485,">> data1 = {'A': [111, 112, 113], 'B':[121, 122, 123]}"
8486,>> df1 = pd.DataFrame(data1)
8487,>> df1
8488,
8489,    A   B
8490,0   111 121
8491,1   112 122
8492,2   113 123
8493,
8494,
8495,>> df2 = df1
8496,>> df2
8497,
8498,A   B
8499,0   111 121
8500,1   112 122
8501,2   113 123
8502,
8503,# Dropping a column on df1 affects df2
8504,">> df1.drop('A', axis=1, inplace=True)"
8505,>> df2
8506,    B
8507,0   121
8508,1   122
8509,2   123
8510,copy.deepcopy
8511,df.copy()
8512,">> data1 = {'A': [111, 112, 113], 'B':[121, 122, 123]}"
8513,>> df1 = pd.DataFrame(data1)
8514,>> df1
8515,
8516,A   B
8517,0   111 121
8518,1   112 122
8519,2   113 123
8520,
8521,>> import copy
8522,>> df2 = copy.deepcopy(df1)
8523,>> df2
8524,A   B
8525,0   111 121
8526,1   112 122
8527,2   113 123
8528,
8529,# Dropping a column on df1 does not affect df2
8530,">> df1.drop('A', axis=1, inplace=True)"
8531,>> df2
8532,    A   B
8533,0   111 121
8534,1   112 122
8535,2   113 123
8536,">> data1 = {'A': [111, 112, 113], 'B':[121, 122, 123]}"
8537,>> df1 = pd.DataFrame(data1)
8538,>> df1
8539,
8540,    A   B
8541,0   111 121
8542,1   112 122
8543,2   113 123
8544,
8545,>> df2 = df1
8546,>> df2
8547,
8548,    A   B
8549,0   111 121
8550,1   112 122
8551,2   113 123
8552,
8553,# Dropping a column on df2 can affect df1
8554,"# No slice involved here, but I believe the principle remains the same?"
8555,# Let me know if not
8556,">> df2.drop('A', axis=1, inplace=True)"
8557,>> df1
8558,
8559,B
8560,0   121
8561,1   122
8562,2   123
8563,">> data1 = {'A': [111, 112, 113], 'B':[121, 122, 123]}"
8564,>> df1 = pd.DataFrame(data1)
8565,>> df1
8566,
8567,    A   B
8568,0   111 121
8569,1   112 122
8570,2   113 123
8571,
8572,>> import copy
8573,>> df2 = copy.deepcopy(df1)
8574,>> df2
8575,
8576,A   B
8577,0   111 121
8578,1   112 122
8579,2   113 123
8580,
8581,">> df2.drop('A', axis=1, inplace=True)"
8582,>> df1
8583,
8584,A   B
8585,0   111 121
8586,1   112 122
8587,2   113 123
8588,import pandas as pd
8589,# ...
8590,"pd.set_option('mode.chained_assignment', None)"
8591,"quote_df.loc[:,'TVol'] = quote_df['TVol']/TVOL_SCALE"
8592,class SupressSettingWithCopyWarning:
8593,    def __enter__(self):
8594,        pd.options.mode.chained_assignment = None
8595,
8596,"    def __exit__(self, *args):"
8597,        pd.options.mode.chained_assignment = 'warn'
8598,
8599,with SupressSettingWithCopyWarning():
8600,    #code that produces warning
8601,"def plot(pdb, df, title, **kw):"
8602,    df['target'] = (df['ogg'] + df['ugg']) / 2
8603,    # ...
8604,    df = data[data['anz_emw'] > 0]
8605,"    pixbuf = plot(pdb, df, title)"
8606, df['target'] = ...
8607, data[data['anz_emw'] > 0]['target'] = ...
8608,"def plot(pdb, df, title, **kw):"
8609,"    df.loc[:,'target'] = (df['ogg'] + df['ugg']) / 2"
8610,.loc
8611,df = data[data['anz_emw'] > 0]
8612,plot()
8613,pandas
8614,pandas.option_context
8615,from contextlib import contextmanager
8616,
8617,@contextmanager
8618,def SuppressPandasWarning():
8619,"    with pd.option_context(""mode.chained_assignment"", None):"
8620,        yield
8621,import pandas as pd
8622,from string import ascii_letters
8623,
8624,"a = pd.DataFrame({""A"": list(ascii_letters[0:4]), ""B"": range(0,4)})"
8625,
8626,"mask = a[""A""].isin([""c"", ""d""])"
8627,"# Even shallow copy below is enough to not raise the warning, but why is a mystery to me."
8628,b = a.loc[mask]  # .copy(deep=False)
8629,
8630,# Raises the `SettingWithCopyWarning`
8631,"b[""B""] = b[""B""] * 2"
8632,
8633,# Does not!
8634,with SuppressPandasWarning():
8635,"    b[""B""] = b[""B""] * 2"
8636,a
8637,.copy(deep=False)
8638,a
8639,pandas
8640,return (
8641,"    pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}"
8642,"    .rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)"
8643,"    .ix[:,[0,3,2,1,4,5,8,9,30,31]]"
8644,    .assign(
8645,"        TClose=lambda df: df['TPrice'],"
8646,"        RT=lambda df: 100 * (df['TPrice']/quote_df['TPCLOSE'] - 1),"
8647,"        TVol=lambda df: df['TVol']/TVOL_SCALE,"
8648,"        TAmt=lambda df: df['TAmt']/TAMT_SCALE,"
8649,"        STK_ID=lambda df: df['STK'].str.slice(13,19),"
8650,"        STK_Name=lambda df: df['STK'].str.slice(21,30)#.decode('gb2312'),"
8651,"        TDate=lambda df: df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10]),"
8652,    )
8653,)
8654,df2 = df[df['A'] > 2]
8655,df2['B'] = value
8656,df2
8657,"df.loc[df2.index.tolist(), 'B'] = value"
8658,df2.index.tolist()
8659,np.warnings.filterwarnings('ignore')
8660,"def update_old_dataframe(old_dataframe, new_dataframe):"
8661,"    for new_index, new_row in new_dataframe.iterrorws():"
8662,"        old_dataframe.loc[new_index] = update_row(old_dataframe.loc[new_index], new_row)"
8663,
8664,"def update_row(old_row, new_row):"
8665,    for field in [list_of_columns]:
8666,        # line with warning because of chain indexing old_dataframe[new_index][field]
8667,        old_row[field] = new_row[field]  
8668,    return old_row
8669,old_row[field] = new_row[field]
8670,Series
8671,old_row.at[field] = new_row.at[field]
8672,Series
8673,"    def scaler(self, numericals):"
8674,        scaler = MinMaxScaler()
8675,"        self.data.loc[:, numericals[0]] = scaler.fit_transform(self.data.loc[:, numericals[0]])"
8676,"        self.data.loc[:, numericals[1]] = scaler.fit_transform(self.data.loc[:, numericals[1]])"
8677,scaler
8678,numericals[0]
8679,"    def scaler(self, numericals):"
8680,        scaler = MinMaxScaler()
8681,        self.data.loc[:][numericals[0]] = scaler.fit_transform(self.data.loc[:][numericals[0]])
8682,        self.data.loc[:][numericals[1]] = scaler.fit_transform(self.data.loc[:][numericals[1]])
8683,"[:, ~]"
8684,[:][~]
8685,"df_temp[""Quarter""] = df_temp.index.quarter"
8686,"df_temp.insert(loc=0, column='Quarter', value=df_temp.index.quarter)"
8687,.copy()
8688,quote_df = quote_df.copy()
8689,deep=True
8690,global
8691,globvar = 0
8692,
8693,def set_globvar_to_one():
8694,    global globvar    # Needed to modify global copy of globvar
8695,    globvar = 1
8696,
8697,def print_globvar():
8698,    print(globvar)     # No need for global declaration to read value of globvar
8699,
8700,set_globvar_to_one()
8701,print_globvar()       # Prints 1
8702,globvar = 1
8703,global
8704,# sample.py
8705,_my_global = 5
8706,
8707,def func1():
8708,    _my_global = 42
8709,
8710,def func2():
8711,    print _my_global
8712,
8713,func1()
8714,func2()
8715,global
8716,func1()
8717,func2()
8718,def func1():
8719,    global _my_global 
8720,    _my_global = 42
8721,_my_global
8722,func1()
8723,func2()
8724,_my_global
8725,func1()
8726,UnboundLocalError
8727,global
8728,MyGlobal = 5
8729,x
8730,MY_GLOBAL = 5
8731,modname.itemname
8732,x = 0   # Default value of the 'x' configuration setting
8733,import config
8734,config.x = 1
8735,import config
8736,import mod
8737,print config.x
8738,config.x
8739,x = lambda: config.x
8740,x()
8741,a = config.x
8742,from config import x
8743,>>> import dis
8744,>>> def foo():
8745,...     global bar
8746,...     baz = 5
8747,...     print bar
8748,...     print baz
8749,...     print quux
8750,... 
8751,>>> dis.disassemble(foo.func_code)
8752,  3           0 LOAD_CONST               1 (5)
8753,              3 STORE_FAST               0 (baz)
8754,
8755,  4           6 LOAD_GLOBAL              0 (bar)
8756,              9 PRINT_ITEM          
8757,             10 PRINT_NEWLINE       
8758,
8759,  5          11 LOAD_FAST                0 (baz)
8760,             14 PRINT_ITEM          
8761,             15 PRINT_NEWLINE       
8762,
8763,  6          16 LOAD_GLOBAL              1 (quux)
8764,             19 PRINT_ITEM          
8765,             20 PRINT_NEWLINE       
8766,             21 LOAD_CONST               0 (None)
8767,             24 RETURN_VALUE        
8768,>>> 
8769,foo()
8770,LOAD_FAST
8771,for
8772,as
8773,with
8774,except
8775,as
8776,except
8777,as ...
8778,def create_global_variable():
8779,    global global_variable # must declare it to be a global first
8780,    # modifications are thus reflected on the module's global scope
8781,    global_variable = 'Foo' 
8782,create_global_variable
8783,>>> create_global_variable()
8784,def use_global_variable():
8785,    return global_variable + '!!!'
8786,>>> use_global_variable()
8787,'Foo!!!'
8788,def change_global_variable():
8789,    global global_variable
8790,    global_variable = 'Bar'
8791,>>> use_global_variable()
8792,'Foo!!!'
8793,>>> change_global_variable()
8794,global_variable
8795,'Bar'
8796,>>> use_global_variable()
8797,'Bar!!!'
8798,def use_local_with_same_name_as_global():
8799,"    # bad name for a local variable, though."
8800,    global_variable = 'Baz' 
8801,    return global_variable + '!!!'
8802,
8803,>>> use_local_with_same_name_as_global()
8804,'Baz!!!'
8805,>>> use_global_variable()
8806,'Bar!!!'
8807,class Foo:
8808,    def foo(self):
8809,        global global_variable
8810,        global_variable = 'Foo'
8811,
8812,class Bar:
8813,    def bar(self):
8814,        return global_variable + '!!!'
8815,
8816,Foo().foo()
8817,>>> Bar().bar()
8818,'Foo!!!'
8819,self
8820,cls
8821,self
8822,cls
8823,import multiprocessing
8824,import os
8825,import random
8826,import sys
8827,import time
8828,
8829,def worker(new_value):
8830,    old_value = get_value()
8831,"    set_value(random.randint(1, 99))"
8832,    print('pid=[{pid}] '
8833,          'old_value=[{old_value:2}] '
8834,          'new_value=[{new_value:2}] '
8835,          'get_value=[{get_value:2}]'.format(
8836,"          pid=str(os.getpid()),"
8837,"          old_value=old_value,"
8838,"          new_value=new_value,"
8839,          get_value=get_value()))
8840,
8841,def get_value():
8842,    global global_variable
8843,    return global_variable
8844,
8845,def set_value(new_value):
8846,    global global_variable
8847,    global_variable = new_value
8848,
8849,global_variable = -1
8850,
8851,"print('before set_value(), get_value() = [%s]' % get_value())"
8852,set_value(new_value=-2)
8853,"print('after  set_value(), get_value() = [%s]' % get_value())"
8854,
8855,processPool = multiprocessing.Pool(processes=5)
8856,"processPool.map(func=worker, iterable=range(15))"
8857,"before set_value(), get_value() = [-1]"
8858,"after  set_value(), get_value() = [-2]"
8859,pid=[53970] old_value=[-2] new_value=[ 0] get_value=[23]
8860,pid=[53971] old_value=[-2] new_value=[ 1] get_value=[42]
8861,pid=[53970] old_value=[23] new_value=[ 4] get_value=[50]
8862,pid=[53970] old_value=[50] new_value=[ 6] get_value=[14]
8863,pid=[53971] old_value=[42] new_value=[ 5] get_value=[31]
8864,pid=[53972] old_value=[-2] new_value=[ 2] get_value=[44]
8865,pid=[53973] old_value=[-2] new_value=[ 3] get_value=[94]
8866,pid=[53970] old_value=[14] new_value=[ 7] get_value=[21]
8867,pid=[53971] old_value=[31] new_value=[ 8] get_value=[34]
8868,pid=[53972] old_value=[44] new_value=[ 9] get_value=[59]
8869,pid=[53973] old_value=[94] new_value=[10] get_value=[87]
8870,pid=[53970] old_value=[21] new_value=[11] get_value=[21]
8871,pid=[53971] old_value=[34] new_value=[12] get_value=[82]
8872,pid=[53972] old_value=[59] new_value=[13] get_value=[ 4]
8873,pid=[53973] old_value=[87] new_value=[14] get_value=[70]
8874,main
8875,"def five(enterAnumber,sumation):"
8876,    global helper
8877,    helper  = enterAnumber + sumation
8878,
8879,def isTheNumber():
8880,    return helper
8881,main
8882,import TestPy
8883,
8884,def main():
8885,    atest  = TestPy
8886,"    atest.five(5,8)"
8887,    print(atest.isTheNumber())
8888,
8889,if __name__ == '__main__':
8890,    main()
8891,global_vars
8892,init_global_vars
8893,globvar = 5
8894,
8895,def f():
8896,    var = globvar
8897,    print(var)
8898,
8899,f()  # Prints 5
8900,globvar = 5
8901,def f():
8902,    global globvar
8903,    print(globvar)
8904,f()   #prints 5
8905,"var = ""test"""
8906,
8907,def printGlobalText():
8908,    global var #wWe are telling to explicitly use the global version
8909,"    var = ""global from printGlobalText fun."""
8910,"    print ""var from printGlobalText: "" + var"
8911,
8912,def printLocalText():
8913,"    #We are NOT telling to explicitly use the global version, so we are creating a local variable"
8914,"    var = ""local version from printLocalText fun"""
8915,"    print ""var from printLocalText: "" + var"
8916,
8917,printGlobalText()
8918,printLocalText()
8919,""""""""
8920,Output Result:
8921,var from printGlobalText: global from printGlobalText fun.
8922,var from printLocalText: local version from printLocalText
8923,[Finished in 0.1s]
8924,""""""""
8925,def x1():
8926,    global x
8927,    x += 1
8928,"    print('x1: ', x)"
8929,
8930,def x2():
8931,    global x
8932,    x = x+1
8933,"    print('x2: ', x)"
8934,
8935,x = 5
8936,"print('x:  ', x)"
8937,x1()
8938,x2()
8939,
8940,# Output:
8941,# x:   5
8942,# x1:  6
8943,# x2:  7
8944,global
8945,globals()
8946,globals()['your_global_var'] = 42
8947,import as
8948,Stocksin = 300
8949,Prices = []
8950,import initval as iv
8951,
8952,def getmystocks(): 
8953,    iv.Stocksin = getstockcount()
8954,
8955,
8956,def getmycharts():
8957,    for ic in range(iv.Stocksin):
8958,import ... as ...
8959,import ...
8960,global
8961,import numpy as np
8962,
8963,hostValue = 3.14159
8964,"hostArray = np.array([2., 3.])"
8965,"hostMatrix = np.array([[1.0, 0.0],[ 0.0, 1.0]])"
8966,
8967,def func1():
8968,"    global hostValue    # mandatory, else local."
8969,    hostValue = 2.0
8970,
8971,def func2():
8972,"    global hostValue    # mandatory, else UnboundLocalError."
8973,    hostValue += 1.0
8974,
8975,def func3():
8976,"    global hostArray    # mandatory, else local."
8977,"    hostArray = np.array([14., 15.])"
8978,
8979,def func4():            # no need for globals
8980,    hostArray[0] = 123.4
8981,
8982,def func5():            # no need for globals
8983,    hostArray[1] += 1.0
8984,
8985,def func6():            # no need for globals
8986,    hostMatrix[1][1] = 12.
8987,
8988,def func7():            # no need for globals
8989,    hostMatrix[0][0] += 0.33
8990,
8991,func1()
8992,"print ""After func1(), hostValue = "", hostValue"
8993,func2()
8994,"print ""After func2(), hostValue = "", hostValue"
8995,func3()
8996,"print ""After func3(), hostArray = "", hostArray"
8997,func4()
8998,"print ""After func4(), hostArray = "", hostArray"
8999,func5()
9000,"print ""After func5(), hostArray = "", hostArray"
9001,func6()
9002,"print ""After func6(), hostMatrix = \n"", hostMatrix"
9003,func7()
9004,"print ""After func7(), hostMatrix = \n"", hostMatrix"
9005,globals()
9006,from pickle import load
9007,def loaditem(name):
9008,"    with open(r""C:\pickle\file\location""+""\{}.dat"".format(name), ""rb"") as openfile:"
9009,        globals()[name] = load(openfile)
9010,    return True
9011,from pickle import dump
9012,def dumpfile(name):
9013,"    with open(name+"".dat"", ""wb"") as outfile:"
9014,"        dump(globals()[name], outfile)"
9015,    return True
9016,globals()
9017,max = 15000
9018,from main import config
9019,def check_threads():
9020,    return max < thread_count 
9021,from main import runner                # <----- 1. add file
9022,from main.runner import check_threads
9023,class RunnerTest(unittest):
9024,   def test_threads(self):
9025,       runner.max = 0                  # <----- 2. set global 
9026,       check_threads()
9027,import multiprocessing
9028,
9029,counter = 0
9030,
9031,def do(task_id):
9032,    global counter
9033,    counter +=1
9034,    print(f'task {task_id}: counter = {counter}')
9035,
9036,if __name__ == '__main__':
9037,
9038,    pool = multiprocessing.Pool(processes=4)
9039,    task_ids = list(range(4))
9040,"    pool.map(do, task_ids)"
9041,task 0: counter = 1
9042,task 1: counter = 2
9043,task 2: counter = 3
9044,task 3: counter = 4
9045,task 0: counter = 1
9046,task 1: counter = 1
9047,task 2: counter = 1
9048,task 3: counter = 1
9049,def declare_a_global_variable():
9050,    global global_variable_1
9051,    global_variable_1 = 1
9052,
9053,# Note to use the function to global variables
9054,declare_a_global_variable() 
9055,global_variable_2 = 2
9056,def declare_a_global_variable():
9057,    global global_variable_1
9058,    global_variable_1 = 1
9059,
9060,# Note to use the function to global variables
9061,declare_a_global_variable() 
9062,global_variable_2 = 2
9063,
9064,def print_variables():
9065,    print(global_variable_1)
9066,    print(global_variable_2)
9067,print_variables() # prints 1 & 2
9068,update_variables()
9069,global_variable_1 = 1
9070,global_variable_2 = 2
9071,
9072,def update_variables():
9073,    global global_variable_1
9074,    global_variable_1 = 11
9075,    global_variable_2 = 12 # will update just locally for this function
9076,
9077,update_variables()
9078,print(global_variable_1) # prints 11
9079,print(global_variable_2) # prints 2
9080,# declaring some global variables
9081,variable = 'peter'
9082,"list_variable_1 = ['a','b']"
9083,"list_variable_2 = ['c','d']"
9084,
9085,def update_global_variables():
9086,"    """"""without using global line"""""""
9087,    variable = 'PETER' # won't update in global scope
9088,"    list_variable_1 = ['A','B'] # won't update in global scope"
9089,    list_variable_2[0] = 'C' # updated in global scope surprisingly this way
9090,    list_variable_2[1] = 'D' # updated in global scope surprisingly this way
9091,
9092,update_global_variables()
9093,
9094,print('variable is: %s'%variable) # prints peter
9095,"print('list_variable_1 is: %s'%list_variable_1) # prints ['a', 'b']"
9096,"print('list_variable_2 is: %s'%list_variable_2) # prints ['C', 'D']"
9097,def someFunc():
9098,    x=20
9099,    globals()['y']=50
9100,someFunc() # invoking function so that variable Y is created globally 
9101,print(y) # output 50
9102,print(x) #NameError: name 'x' is not defined as x was defined locally within function
9103,global_var = 10  # will be considered as a global variable
9104,
9105,
9106,def func_1():
9107,    global global_var  # access variable using variable keyword
9108,    global_var += 1
9109,
9110,
9111,def func_2():
9112,    global global_var
9113,    global_var *= 2
9114,"    print(f""func_2: {global_var}"")"
9115,
9116,
9117,func_1()
9118,func_2()
9119,"print(""Global scope:"", global_var) # will print 22"
9120,global_var
9121,func_1()
9122,global
9123,global_var
9124,func_1
9125,func_1
9126,func_2()
9127,func_1
9128,func_2
9129,global_var
9130,global_var
9131,global
9132,global
9133,global_var
9134,func_1
9135,func_1
9136,global_var
9137,myVar = 12
9138,
9139,def myFunc():
9140,  myVar += 12
9141,global
9142,myVar = 124
9143,def myFunc():
9144,  global myVar2
9145,  myVar2 = 100
9146,myFunc()
9147,print(myVar2)
9148,Initialized = 0  #Here This Initialized is global variable  
9149,
9150,def Initialize():
9151,"     print(""Initialized!"")"
9152,     Initialized = 1  #This is local variable and assigning 1 to local variable
9153,while Initialized == 0:  
9154,     Initialize()
9155,#if we do Initialized=1 then loop will terminate  
9156,
9157,else:
9158,"    print(""Lets do something else now!"")"
9159,"name = input(""Hello. Please enter your name: "")"
9160,"if name == ""Kevin"" or ""Jon"" or ""Inbar"":"
9161,"    print(""Access granted."")"
9162,else:
9163,"    print(""Access denied."")"
9164,Hello. Please enter your name: Bob
9165,Access granted.
9166,name
9167,"if ""Kevin"" or ""Jon"" or ""Inbar"" == name"
9168,x or y in z
9169,x and y in z
9170,x != y and z
9171,"if name == ""Kevin"" or ""Jon"" or ""Inbar"":"
9172,"if (name == ""Kevin"") or (""Jon"") or (""Inbar""):"
9173,"if (False) or (""Jon"") or (""Inbar""):"
9174,or
9175,"if ""Jon"":"
9176,if
9177,"if ""Kevin"" or ""Jon"" or ""Inbar"" == name"
9178,"""Kevin"""
9179,if
9180,==
9181,"if name == ""Kevin"" or name == ""Jon"" or name == ""Inbar"":"
9182,in
9183,"if name in {""Kevin"", ""Jon"", ""Inbar""}:"
9184,>>> import timeit
9185,">>> timeit.timeit('name == ""Kevin"" or name == ""Jon"" or name == ""Inbar""',"
9186,"    setup=""name='Inbar'"")"
9187,0.4247764749999945
9188,">>> timeit.timeit('name in {""Kevin"", ""Jon"", ""Inbar""}', setup=""name='Inbar'"")"
9189,0.18493307199999265
9190,if a == b or c or d or e: ...
9191,ast
9192,>>> import ast
9193,">>> ast.parse(""a == b or c or d or e"", ""<string>"", ""eval"")"
9194,<ast.Expression object at 0x7f929c898220>
9195,">>> print(ast.dump(_, indent=4))"
9196,Expression(
9197,    body=BoolOp(
9198,"        op=Or(),"
9199,        values=[
9200,            Compare(
9201,"                left=Name(id='a', ctx=Load()),"
9202,                ops=[
9203,"                    Eq()],"
9204,                comparators=[
9205,"                    Name(id='b', ctx=Load())]),"
9206,"            Name(id='c', ctx=Load()),"
9207,"            Name(id='d', ctx=Load()),"
9208,"            Name(id='e', ctx=Load())]))"
9209,or
9210,a == b
9211,c
9212,d
9213,e
9214,"(""Kevin"", ""Jon"", ""Inbar"")"
9215,"{""Kevin"", ""Jon"", ""Inbar""}"
9216,"a in {b, c, d}"
9217,"a in (b, c, d)"
9218,frozenset
9219,"dis.dis(compile(""1 in {1, 2, 3}"", '<stdin>', 'eval'))"
9220,"if name == ""Kevin"" or ""Jon"" or ""Inbar"":"
9221,"if name == ""Kevin"":"
9222,"    print(""Access granted."")"
9223,"elif ""Jon"":"
9224,"    print(""Access granted."")"
9225,"elif ""Inbar"":"
9226,"    print(""Access granted."")"
9227,else:
9228,"    print(""Access denied."")"
9229,"elif ""Jon"""
9230,"if name in [""Kevin"", ""Jon"", ""Inbar""]:"
9231,"    print(""Access granted."")"
9232,else:
9233,"    print(""Access denied."")"
9234,"if name == ""Kevin"" or name == ""Jon"" or name == ""Inbar"":"
9235,"    print(""Access granted."")"
9236,else:
9237,"    print(""Access denied."")"
9238,"if name == ""Kevin"":"
9239,"    print(""Access granted."")"
9240,"elif name == ""Jon"":"
9241,"    print(""Access granted."")"
9242,"elif name == ""Inbar"":"
9243,"    print(""Access granted."")"
9244,else:
9245,"    print(""Access denied."")"
9246,"if name == ""Kevin"" or ""Jon"" or ""Inbar"":"
9247,"if (name == ""Kevin"") or (""Jon"") or (""Inbar""):"
9248,"if (False) or (""Jon"") or (""Inbar""):"
9249,True
9250,True
9251,or
9252,if (False) or (True) or (True):
9253,==
9254,"if name == ""Kevin"" or name == ""Jon"" or name == ""Inbar"":"
9255,"    print(""Access granted."")"
9256,else:
9257,"    print(""Access denied."")"
9258,in
9259,"if name in {""Kevin"", ""Jon"", ""Inbar""}:"
9260,"    print(""Access granted."")"
9261,else:
9262,"    print(""Access denied."")"
9263,"if name in [""Kevin"", ""Jon"", ""Inbar""]:"
9264,"    print(""Access granted."")"
9265,else:
9266,"    print(""Access denied."")"
9267,if-elif-else
9268,"if name == ""Kevin"":"
9269,"    print(""Access granted."")"
9270,"elif name == ""Jon"":"
9271,"    print(""Access granted."")"
9272,"elif name == ""Inbar"":"
9273,"    print(""Access granted."")"
9274,else:
9275,"    print(""Access denied."")"
9276,"In [1]: a,b,c,d=1,2,3,4"
9277,In [2]: a==b
9278,Out[2]: False
9279,In [11]: if 3:
9280,"    ...:     print (""yey"")"
9281,    ...:
9282,yey
9283,In [9]: False or 3
9284,Out[9]: 3
9285,In [4]: a==b or c or d
9286,Out[4]: 3
9287,"In [13]: if a in (b,c,d):"
9288,    ...:     print('Access granted')
9289,"a = ""Raul"""
9290,"if a == ""Kevin"" or ""John"" or ""Inbar"":"
9291,    pass
9292,"if ""Raul"" == ""Kevin"" or ""John"" != """" or ""Inbar"" != """":"
9293,    pass
9294,"a = ""Raul"""
9295,"if a == ""Kevin"" or a == ""John"" or a == ""Inbar"":"
9296,    pass
9297,"a = ""Raul"""
9298,"if a in {""Kevin"", ""John"", ""Inbar""}:"
9299,    pass
9300,or
9301,"""John"""
9302,True
9303,"user = input(""Enter name: "")"
9304,
9305,"if user in {""Bob"", ""Kevin"", ""Joe""}:"
9306,"   print(""Access granted, "" + str(user) + ""."")"
9307,else:
9308,"   print(""Access denied."")"
9309,"user = input(""Enter name: "")"
9310,"users = {""Bob"", ""Kevin"", ""Joe"", ""a million more users if you like""}"
9311,
9312,if user in users:
9313,"   print(""Access granted, "" + str(user) + ""."")"
9314,else:
9315,"   print(""Access denied."")"
9316,first
9317,last
9318,password
9319,secret question
9320,def lazy(i):
9321,   j = 0 # For example
9322,   while j < i:
9323,      yield j
9324,      j += 1
9325,for j in lazy_range(10):
9326,   do_something_here(j)
9327,*args
9328,**kwargs
9329,"def foo(x, y, *args):"
9330,"def bar(x, y, **kwargs):"
9331,def func(*args)
9332,"func(*[1,2])"
9333,*
9334,"[*[1, 2]]"
9335,**
9336,*
9337,**
9338,*args
9339,**kwargs
9340,*args
9341,def foo(*args):
9342,    for a in args:
9343,        print(a)        
9344,
9345,foo(1)
9346,# 1
9347,
9348,"foo(1,2,3)"
9349,# 1
9350,# 2
9351,# 3
9352,**kwargs
9353,def bar(**kwargs):
9354,    for a in kwargs:
9355,"        print(a, kwargs[a])  "
9356,
9357,"bar(name='one', age=27)"
9358,# name one
9359,# age 27
9360,"def foo(kind, *args, **kwargs):"
9361,   pass
9362,"def foo(a, b, c):"
9363,"    print(a, b, c)"
9364,
9365,"obj = {'b':10, 'c':'lee'}"
9366,
9367,"foo(100,**obj)"
9368,# 100 10 lee
9369,*l
9370,"def foo(bar, lee):"
9371,"    print(bar, lee)"
9372,
9373,"l = [1,2]"
9374,
9375,foo(*l)
9376,# 1 2
9377,*l
9378,"first, *rest = [1,2,3,4]"
9379,"first, *l, last = [1,2,3,4]"
9380,"def func(arg1, arg2, arg3, *, kwarg1, kwarg2):"
9381,    pass
9382,">>> x = [1, 2]"
9383,>>> [*x]
9384,"[1, 2]"
9385,">>> [*x, 3, 4]"
9386,"[1, 2, 3, 4]"
9387,
9388,">>> x = {1:1, 2:2}"
9389,>>> x
9390,"{1: 1, 2: 2}"
9391,">>> {**x, 3:3, 4:4}"
9392,"{1: 1, 2: 2, 3: 3, 4: 4}"
9393,*
9394,dict
9395,**kwargs
9396,*
9397,**
9398,"def foo(x,y,z):"
9399,"    print(""x="" + str(x))"
9400,"    print(""y="" + str(y))"
9401,"    print(""z="" + str(z))"
9402,">>> mylist = [1,2,3]"
9403,>>> foo(*mylist)
9404,x=1
9405,y=2
9406,z=3
9407,
9408,">>> mydict = {'x':1,'y':2,'z':3}"
9409,>>> foo(**mydict)
9410,x=1
9411,y=2
9412,z=3
9413,
9414,">>> mytuple = (1, 2, 3)"
9415,>>> foo(*mytuple)
9416,x=1
9417,y=2
9418,z=3
9419,mydict
9420,foo
9421,TypeError
9422,">>> mydict = {'x':1,'y':2,'z':3,'badnews':9}"
9423,>>> foo(**mydict)
9424,Traceback (most recent call last):
9425,"  File ""<stdin>"", line 1, in <module>"
9426,TypeError: foo() got an unexpected keyword argument 'badnews'
9427,foo()
9428,"foo(1,2,3,4,5)"
9429,bar()
9430,"bar(1, a=2, b=3)"
9431,"def foo(param1, *param2):"
9432,    print(param1)
9433,    print(param2)
9434,
9435,"def bar(param1, **param2):"
9436,    print(param1)
9437,    print(param2)
9438,
9439,"foo(1,2,3,4,5)"
9440,"bar(1,a=2,b=3)"
9441,1
9442,"(2, 3, 4, 5)"
9443,1
9444,"{'a': 2, 'b': 3}"
9445,**
9446,*
9447,*
9448,**
9449,*args
9450,args
9451,**kwargs
9452,kwargs
9453,args
9454,kwargs
9455,*args
9456,**kwargs
9457,*args
9458,>>> x = xrange(3) # create our *args - an iterable of 3 integers
9459,>>> xrange(*x)    # expand here
9460,"xrange(0, 2, 2)"
9461,str.format
9462,>>> foo = 'FOO'
9463,>>> bar = 'BAR'
9464,">>> 'this is foo, {foo} and bar, {bar}'.format(**locals())"
9465,"'this is foo, FOO and bar, BAR'"
9466,*args
9467,kwarg2
9468,"def foo(arg, kwarg=None, *args, kwarg2=None, **kwargs): "
9469,"    return arg, kwarg, args, kwarg2, kwargs"
9470,">>> foo(1,2,3,4,5,kwarg2='kwarg2', bar='bar', baz='baz')"
9471,"(1, 2, (3, 4, 5), 'kwarg2', {'bar': 'bar', 'baz': 'baz'})"
9472,*
9473,"def foo(arg, kwarg=None, *, kwarg2=None, **kwargs): "
9474,"    return arg, kwarg, kwarg2, kwargs"
9475,kwarg2
9476,">>> foo(1,2,kwarg2='kwarg2', foo='foo', bar='bar')"
9477,"(1, 2, 'kwarg2', {'foo': 'foo', 'bar': 'bar'})"
9478,*args*
9479,">>> foo(1,2,3,4,5, kwarg2='kwarg2', foo='foo', bar='bar')"
9480,Traceback (most recent call last):
9481,"  File ""<stdin>"", line 1, in <module>"
9482,TypeError: foo() takes from 1 to 2 positional arguments 
9483,    but 5 positional arguments (and 1 keyword-only argument) were given
9484,kwarg
9485,"def bar(*, kwarg=None): "
9486,    return kwarg
9487,kwarg
9488,>>> bar('kwarg')
9489,Traceback (most recent call last):
9490,"  File ""<stdin>"", line 1, in <module>"
9491,TypeError: bar() takes 0 positional arguments but 1 was given
9492,kwarg
9493,>>> bar(kwarg='kwarg')
9494,'kwarg'
9495,*args
9496,**kwargs
9497,*
9498,**
9499,*foos
9500,**bars
9501,b
9502,"def foo(a, b=10, *args, **kwargs):"
9503,    '''
9504,"    this function takes required argument a, not required keyword argument b"
9505,    and any number of unknown positional arguments and keyword arguments after
9506,    '''
9507,"    print('a is a required argument, and its value is {0}'.format(a))"
9508,"    print('b not required, its default value is 10, actual value: {0}'.format(b))"
9509,    # we can inspect the unknown arguments we were passed:
9510,    #  - args:
9511,"    print('args is of type {0} and length {1}'.format(type(args), len(args)))"
9512,    for arg in args:
9513,        print('unknown arg: {0}'.format(arg))
9514,    #  - kwargs:
9515,"    print('kwargs is of type {0} and length {1}'.format(type(kwargs),"
9516,                                                        len(kwargs)))
9517,"    for kw, arg in kwargs.items():"
9518,"        print('unknown kwarg - kw: {0}, arg: {1}'.format(kw, arg))"
9519,    # But we don't have to know anything about them 
9520,    # to pass them to other functions.
9521,    print('Args or kwargs can be passed without knowing what they are.')
9522,"    # max can take two or more positional args: max(a, b, c...)"
9523,"    print('e.g. max(a, b, *args) \n{0}'.format("
9524,"      max(a, b, *args))) "
9525,    kweg = 'dict({0})'.format( # named args same as unknown kwargs
9526,"      ', '.join('{k}={v}'.format(k=k, v=v) "
9527,"                             for k, v in sorted(kwargs.items())))"
9528,    print('e.g. dict(**kwargs) (same as {kweg}) returns: \n{0}'.format(
9529,"      dict(**kwargs), kweg=kweg))"
9530,help(foo)
9531,"foo(a, b=10, *args, **kwargs)"
9532,"foo(1, 2, 3, 4, e=5, f=6, g=7)"
9533,"a is a required argument, and its value is 1"
9534,"b not required, its default value is 10, actual value: 2"
9535,args is of type <type 'tuple'> and length 2
9536,unknown arg: 3
9537,unknown arg: 4
9538,kwargs is of type <type 'dict'> and length 3
9539,"unknown kwarg - kw: e, arg: 5"
9540,"unknown kwarg - kw: g, arg: 7"
9541,"unknown kwarg - kw: f, arg: 6"
9542,Args or kwargs can be passed without knowing what they are.
9543,"e.g. max(a, b, *args) "
9544,4
9545,"e.g. dict(**kwargs) (same as dict(e=5, f=6, g=7)) returns: "
9546,"{'e': 5, 'g': 7, 'f': 6}"
9547,a
9548,def bar(a):
9549,"    b, c, d, e, f = 2, 3, 4, 5, 6"
9550,    # dumping every local variable into foo as a keyword argument 
9551,    # by expanding the locals dict:
9552,    foo(**locals()) 
9553,bar(100)
9554,"a is a required argument, and its value is 100"
9555,"b not required, its default value is 10, actual value: 2"
9556,args is of type <type 'tuple'> and length 0
9557,kwargs is of type <type 'dict'> and length 4
9558,"unknown kwarg - kw: c, arg: 3"
9559,"unknown kwarg - kw: e, arg: 5"
9560,"unknown kwarg - kw: d, arg: 4"
9561,"unknown kwarg - kw: f, arg: 6"
9562,Args or kwargs can be passed without knowing what they are.
9563,"e.g. max(a, b, *args) "
9564,100
9565,"e.g. dict(**kwargs) (same as dict(c=3, d=4, e=5, f=6)) returns: "
9566,"{'c': 3, 'e': 5, 'd': 4, 'f': 6}"
9567,"def foo(a, b, c, d=0, e=100):"
9568,    # imagine this is much more code than a simple function call
9569,    preprocess() 
9570,"    differentiating_process_foo(a,b,c,d,e)"
9571,    # imagine this is much more code than a simple function call
9572,    postprocess()
9573,
9574,"def bar(a, b, c=None, d=0, e=100, f=None):"
9575,    preprocess()
9576,"    differentiating_process_bar(a,b,c,d,e,f)"
9577,    postprocess()
9578,
9579,"def baz(a, b, c, d, e, f):"
9580,    ... and so on
9581,*args
9582,**kwargs
9583,def decorator(function):
9584,    '''function to wrap other functions with a pre- and postprocess'''
9585,"    @functools.wraps(function) # applies module, name, and docstring to wrapper"
9586,"    def wrapper(*args, **kwargs):"
9587,"        # again, imagine this is complicated, but we only write it once!"
9588,        preprocess()
9589,"        function(*args, **kwargs)"
9590,        postprocess()
9591,    return wrapper
9592,@decorator
9593,"def foo(a, b, c, d=0, e=100):"
9594,"    differentiating_process_foo(a,b,c,d,e)"
9595,
9596,@decorator
9597,"def bar(a, b, c=None, d=0, e=100, f=None):"
9598,"    differentiating_process_bar(a,b,c,d,e,f)"
9599,
9600,@decorator
9601,"def baz(a, b, c=None, d=0, e=100, f=None, g=None):"
9602,"    differentiating_process_baz(a,b,c,d,e,f, g)"
9603,
9604,@decorator
9605,"def quux(a, b, c=None, d=0, e=100, f=None, g=None, h=None):"
9606,"    differentiating_process_quux(a,b,c,d,e,f,g,h)"
9607,*args
9608,**kwargs
9609,"def test(a,b,c):"
9610,     print(a)
9611,     print(b)
9612,     print(c)
9613,
9614,"test(1,2,3)"
9615,#output:
9616,1
9617,2
9618,3
9619,"def test(a,b,c):"
9620,     print(a)
9621,     print(b)
9622,     print(c)
9623,
9624,"test(a=1,b=2,c=3)"
9625,#output:
9626,1
9627,2
9628,3
9629,"def test(a=0,b=0,c=0):"
9630,     print(a)
9631,     print(b)
9632,     print(c)
9633,     print('-------------------------')
9634,
9635,"test(a=1,b=2,c=3)"
9636,#output :
9637,1
9638,2
9639,3
9640,-------------------------
9641,"def test(a=0,b=0,c=0):"
9642,    print(a)
9643,    print(b)
9644,    print(c)
9645,    print('-------------------------')
9646,
9647,"test(1,2,3)"
9648,# output :
9649,1
9650,2
9651,3
9652,---------------------------------
9653,"def sum(a,b):  #receive args from function calls as sum(1,2) or sum(a=1,b=2)"
9654,    print(a+b)
9655,
9656,"my_tuple = (1,2)"
9657,"my_list = [1,2]"
9658,"my_dict = {'a':1,'b':2}"
9659,
9660,# Let us unpack data structure of list or tuple or dict into arguments with help of '*' operator
9661,"sum(*my_tuple)   # becomes same as sum(1,2) after unpacking my_tuple with '*'"
9662,"sum(*my_list)    # becomes same as sum(1,2) after unpacking my_list with  '*'"
9663,"sum(**my_dict)   # becomes same as sum(a=1,b=2) after unpacking by '**' "
9664,
9665,# output is 3 in all three calls to sum function.
9666,"def sum(*args): #pack the received positional args into data structure of tuple. after applying '*' - def sum((1,2,3,4))"
9667,    sum = 0
9668,    for a in args:
9669,        sum+=a
9670,    print(sum)
9671,
9672,"sum(1,2,3,4)  #positional args sent to function sum"
9673,#output:
9674,10
9675,"def sum(**args): #pack keyword args into datastructure of dict after applying '**' - def sum({a:1,b:2,c:3,d:4})"
9676,    sum=0
9677,"    for k,v in args.items():"
9678,        sum+=v
9679,    print(sum)
9680,
9681,"sum(a=1,b=2,c=3,d=4) #positional args sent to function sum"
9682,*
9683,**
9684,            In function construction         In function call
9685,=======================================================================
9686,"          |  def f(*args):                 |  def f(a, b):"
9687,*args     |      for arg in args:          |      return a + b
9688,"          |          print(arg)            |  args = (1, 2)"
9689,"          |  f(1, 2)                       |  f(*args)"
9690,----------|--------------------------------|---------------------------
9691,"          |  def f(a, b):                  |  def f(a, b):"
9692,**kwargs  |      return a + b              |      return a + b
9693,"          |  def g(**kwargs):              |  kwargs = dict(a=1, b=2)"
9694,          |      return f(**kwargs)        |  f(**kwargs)
9695,"          |  g(a=1, b=2)                   |"
9696,-----------------------------------------------------------------------
9697,*
9698,*
9699,**
9700,*
9701,**
9702,*
9703,f(*myList)
9704,**
9705,"f(**{'x' : 1, 'y' : 2})"
9706,x
9707,y
9708,myArgs
9709,myKW
9710,y
9711,myArgDict
9712,"def f(x, y, *myArgs, **myKW):"
9713,"    print(""# x      = {}"".format(x))"
9714,"    print(""# y      = {}"".format(y))"
9715,"    print(""# myArgs = {}"".format(myArgs))"
9716,"    print(""# myKW   = {}"".format(myKW))"
9717,"    print(""# ----------------------------------------------------------------------"")"
9718,
9719,# Define a list for demonstration purposes
9720,"myList    = [""Left"", ""Right"", ""Up"", ""Down""]"
9721,# Define a dictionary for demonstration purposes
9722,"myDict    = {""Wubba"": ""lubba"", ""Dub"": ""dub""}"
9723,# Define a dictionary to feed y
9724,"myArgDict = {'y': ""Why?"", 'y0': ""Why not?"", ""q"": ""Here is a cue!""}"
9725,
9726,# The 1st elem of myList feeds y
9727,"f(""myEx"", *myList, **myDict)"
9728,# x      = myEx
9729,# y      = Left
9730,"# myArgs = ('Right', 'Up', 'Down')"
9731,"# myKW   = {'Wubba': 'lubba', 'Dub': 'dub'}"
9732,# ----------------------------------------------------------------------
9733,
9734,# y is matched and fed first
9735,# The rest of myArgDict becomes additional arguments feeding myKW
9736,"f(""myEx"", **myArgDict)"
9737,# x      = myEx
9738,# y      = Why?
9739,# myArgs = ()
9740,"# myKW   = {'y0': 'Why not?', 'q': 'Here is a cue!'}"
9741,# ----------------------------------------------------------------------
9742,
9743,# The rest of myArgDict becomes additional arguments feeding myArgs
9744,"f(""myEx"", *myArgDict)"
9745,# x      = myEx
9746,# y      = y
9747,"# myArgs = ('y0', 'q')"
9748,# myKW   = {}
9749,# ----------------------------------------------------------------------
9750,
9751,# Feed extra arguments manually and append even more from my list
9752,"f(""myEx"", 4, 42, 420, *myList, *myDict, **myDict)"
9753,# x      = myEx
9754,# y      = 4
9755,"# myArgs = (42, 420, 'Left', 'Right', 'Up', 'Down', 'Wubba', 'Dub')"
9756,"# myKW   = {'Wubba': 'lubba', 'Dub': 'dub'}"
9757,# ----------------------------------------------------------------------
9758,
9759,"# Without the stars, the entire provided list and dict become x, and y:"
9760,"f(myList, myDict)"
9761,"# x      = ['Left', 'Right', 'Up', 'Down']"
9762,"# y      = {'Wubba': 'lubba', 'Dub': 'dub'}"
9763,# myArgs = ()
9764,# myKW   = {}
9765,# ----------------------------------------------------------------------
9766,**
9767,**
9768,*
9769,*
9770,**
9771,*args
9772,def foo(*args): pass
9773,foo
9774,foo(1)
9775,"foo(1, 'bar')"
9776,**kwargs
9777,def foo(**kwargs): pass
9778,foo(name='Tom')
9779,"foo(name='Tom', age=33)"
9780,"*args, **kwargs"
9781,"def foo(*args, **kwargs): pass"
9782,foo
9783,"foo(1,name='Tom')"
9784,"foo(1, 'bar', name='Tom', age=33)"
9785,*
9786,"def foo(pos1, pos2, *, kwarg1): pass"
9787,*
9788,"foo(1, 2, 3)"
9789,"foo(1, 2, kwarg1=3)"
9790,*_
9791,"def foo(bar, baz, *_): pass"
9792,foo
9793,bar
9794,baz
9795,\**_
9796,"def foo(bar, baz, **_): pass"
9797,foo
9798,bar
9799,baz
9800,/
9801,"def f(a, b, /, c, d, *, e, f):"
9802,    pass
9803,/
9804,*
9805,**
9806,def foo(*args):
9807,    for arg in args:
9808,        print(arg)
9809,
9810,"foo(""two"", 3)"
9811,two
9812,3
9813,**
9814,def bar(**kwargs):
9815,    for key in kwargs:
9816,"        print(key, kwargs[key])"
9817,
9818,"bar(dic1=""two"", dic2=3)"
9819,dic1 two
9820,dic2 3
9821,list
9822,dict
9823,tuple
9824,set
9825,">>> (0, *range(1, 4), 5, *range(6, 8))"
9826,"(0, 1, 2, 3, 5, 6, 7)"
9827,">>> [0, *range(1, 4), 5, *range(6, 8)]"
9828,"[0, 1, 2, 3, 5, 6, 7]"
9829,">>> {0, *range(1, 4), 5, *range(6, 8)}"
9830,"{0, 1, 2, 3, 5, 6, 7}"
9831,">>> d = {'one': 1, 'two': 2, 'three': 3}"
9832,">>> e = {'six': 6, 'seven': 7}"
9833,">>> {'zero': 0, **d, 'five': 5, **e}"
9834,"{'five': 5, 'seven': 7, 'two': 2, 'one': 1, 'three': 3, 'six': 6, 'zero': 0}"
9835,">>> range(*[1, 10], *[2])"
9836,"range(1, 10, 2)"
9837,"x = [1, 2, 3]"
9838,"y = [4, 5, 6]"
9839,
9840,"unzip_x, unzip_y = zip(*zip(x, y))"
9841,"zip(*zip(x,y)) -> zip((1, 4), (2, 5), (3, 6))"
9842,"(1, 2, 3)"
9843,"[1, 2, 3]"
9844,list
9845,dict
9846,"def func(*args, **kwds):"
9847,    # do stuff
9848,args
9849,kwds
9850,"func(""this"", ""is a list of"", ""non-keyowrd"", ""arguments"", keyword=""ligma"", options=[1,2,3])"
9851,args
9852,"[""this"", ""is a list of"", ""non-keyword"", ""arguments""]"
9853,kwds
9854,dict
9855,"{""keyword"" : ""ligma"", ""options"" : [1,2,3]}"
9856,"def f(a, b, c, d=1, e=10):"
9857,    # do stuff
9858,"iterable = [1, 20, 500]"
9859,"mapping = {""d"" : 100, ""e"": 3}"
9860,"f(*iterable, **mapping)"
9861,# That call is equivalent to
9862,"f(1, 20, 500, d=100, e=3)"
9863,"def foo(param1, *param2):"
9864,    print(param1)
9865,    print(param2)
9866,
9867,
9868,"def bar(param1, **param2):"
9869,    print(param1)
9870,    print(param2)
9871,
9872,
9873,"def three_params(param1, *param2, **param3):"
9874,    print(param1)
9875,    print(param2)
9876,    print(param3)
9877,
9878,
9879,"foo(1, 2, 3, 4, 5)"
9880,"print(""\n"")"
9881,"bar(1, a=2, b=3)"
9882,"print(""\n"")"
9883,"three_params(1, 2, 3, 4, s=5)"
9884,1
9885,"(2, 3, 4, 5)"
9886,
9887,1
9888,"{'a': 2, 'b': 3}"
9889,
9890,1
9891,"(2, 3, 4)"
9892,{'s': 5}
9893,__init__
9894,"def __init__(self, *args, **kwargs):"
9895,"    for attribute_name, value in zip(self._expected_attributes, args):"
9896,"        setattr(self, attribute_name, value)"
9897,        if kwargs.has_key(attribute_name):
9898,            kwargs.pop(attribute_name)
9899,
9900,    for attribute_name in kwargs.viewkeys():
9901,"        setattr(self, attribute_name, kwargs[attribute_name])"
9902,class RetailItem(Item):
9903,"    _expected_attributes = Item._expected_attributes + ['name', 'price', 'category', 'country_of_origin']"
9904,
9905,class FoodItem(RetailItem):
9906,    _expected_attributes = RetailItem._expected_attributes +  ['expiry_date']
9907,"food_item = FoodItem(name = 'Jam', "
9908,"                     price = 12.0, "
9909,"                     category = 'Foods', "
9910,"                     country_of_origin = 'US', "
9911,                     expiry_date = datetime.datetime.now())
9912,__init__
9913,class ElectronicAccessories(RetailItem):
9914,    _expected_attributes = RetailItem._expected_attributes +  ['specifications']
9915,    # Depend on args and kwargs to populate the data as needed.
9916,"    def __init__(self, specifications = None, *args, **kwargs):"
9917,        self.specifications = specifications  # Rest of attributes will make sense to parent class.
9918,"        super(ElectronicAccessories, self).__init__(*args, **kwargs)"
9919,"usb_key = ElectronicAccessories(name = 'Sandisk', "
9920,"                                price = '$6.00', "
9921,"                                category = 'Electronics',"
9922,"                                country_of_origin = 'CN',"
9923,                                specifications = '4GB USB 2.0/USB 3.0')
9924,*args
9925,**kwargs
9926,*args
9927,"def args(normal_arg, *argv):"
9928,"    print(""normal argument:"", normal_arg)"
9929,
9930,    for arg in argv:
9931,"        print(""Argument in list of arguments from *argv:"", arg)"
9932,
9933,"args('animals', 'fish', 'duck', 'bird')"
9934,normal argument: animals
9935,Argument in list of arguments from *argv: fish
9936,Argument in list of arguments from *argv: duck
9937,Argument in list of arguments from *argv: bird
9938,**kwargs*
9939,**kwargs
9940,**kwargs
9941,def who(**kwargs):
9942,    if kwargs is not None:
9943,"        for key, value in kwargs.items():"
9944,"            print(""Your %s is %s."" % (key, value))"
9945,
9946,"who(name=""Nikola"", last_name=""Tesla"", birthday=""7.10.1856"", birthplace=""Croatia"")  "
9947,Your name is Nikola.
9948,Your last_name is Tesla.
9949,Your birthday is 7.10.1856.
9950,Your birthplace is Croatia.
9951,"sum = lambda x, y, z: x + y + z"
9952,"sum(1,2,3) # sum 3 items"
9953,
9954,"sum([1,2,3]) # error, needs 3 items, not 1 list"
9955,
9956,"x = [1,2,3][0]"
9957,"y = [1,2,3][1]"
9958,"z = [1,2,3][2]"
9959,"sum(x,y,z) # ok"
9960,
9961,"sum(*[1,2,3]) # ok, 1 list becomes 3 items"
9962,">>> def foo(*arg,**kwargs):"
9963,...     print arg
9964,...     print kwargs
9965,>>>
9966,">>> a = (1, 2, 3)"
9967,">>> b = {'aa': 11, 'bb': 22}"
9968,>>>
9969,>>>
9970,">>> foo(*a,**b)"
9971,"(1, 2, 3)"
9972,"{'aa': 11, 'bb': 22}"
9973,>>>
9974,>>>
9975,">>> foo(a,**b) "
9976,"((1, 2, 3),)"
9977,"{'aa': 11, 'bb': 22}"
9978,>>>
9979,>>>
9980,">>> foo(a,b) "
9981,"((1, 2, 3), {'aa': 11, 'bb': 22})"
9982,{}
9983,>>>
9984,>>>
9985,">>> foo(a,*b)"
9986,"((1, 2, 3), 'aa', 'bb')"
9987,{}
9988,*args
9989,**kwargs
9990,super
9991,class base(object):
9992,"    def __init__(self, base_param):"
9993,        self.base_param = base_param
9994,
9995,
9996,class child1(base): # inherited from base class
9997,"    def __init__(self, child_param, *args) # *args for non-keyword args"
9998,        self.child_param = child_param
9999,"        super(child1, self).__init__(*args) # call __init__ of the base class and initialize it with a NON-KEYWORD arg"
10000,
10001,class child2(base):
10002,"    def __init__(self, child_param, **kwargs):"
10003,        self.child_param = child_param
10004,"        super(child2, self).__init__(**kwargs) # call __init__ of the base class and initialize it with a KEYWORD arg"
10005,
10006,"c1 = child1(1,0)"
10007,"c2 = child2(1,base_param=0)"
10008,print c1.base_param # 0
10009,print c1.child_param # 1
10010,print c2.base_param # 0
10011,print c2.child_param # 1
10012,**
10013,**
10014,str.format
10015,f-strings
10016,  ## init vars
10017,  ddvars = dict()
10018,  ddcalc = dict()
10019,  pass
10020,  ddvars['fname']     = 'Huomer'
10021,  ddvars['lname']     = 'Huimpson'
10022,  ddvars['motto']     = 'I love donuts!'
10023,  ddvars['age']       = 33
10024,  pass
10025,  ddcalc['ydiff']     = 5
10026,  ddcalc['ycalc']     = ddvars['age'] + ddcalc['ydiff']
10027,  pass
10028,  vdemo = []
10029,
10030,  ## ********************
10031,  ## single unpack supported in py 2.7
10032,  vdemo.append('''
10033,  Hello {fname} {lname}!
10034,
10035,  Today you are {age} years old!
10036,
10037,"  We love your motto ""{motto}"" and we agree with you!"
10038,  '''.format(**ddvars)) 
10039,  pass
10040,
10041,  ## ********************
10042,  ## multiple unpack supported in py 3.x
10043,  vdemo.append('''
10044,  Hello {fname} {lname}!
10045,
10046,  In {ydiff} years you will be {ycalc} years old!
10047,"  '''.format(**ddvars,**ddcalc)) "
10048,  pass
10049,
10050,  ## ********************
10051,  print(vdemo[-1])
10052,def any_param(*param):
10053,    pass
10054,
10055,any_param(1)
10056,"any_param(1,1)"
10057,"any_param(1,1,1)"
10058,"any_param(1,...)"
10059,def any_param(*param):
10060,    pass
10061,
10062,any_param() # will work correct
10063,def any_param(*param):
10064,    return type(param)
10065,
10066,any_param(1) #tuple
10067,any_param() # tuple
10068,def any(*param):
10069,    param[0] # correct
10070,
10071,def any(*param):
10072,    *param[0] # incorrect
10073,def func(**any):
10074,    return type(any) # dict
10075,
10076,def func(**any):
10077,    return any
10078,
10079,"func(width=""10"",height=""20"") # {width=""10"",height=""20"")"
10080,"def foo(param1, *param2):"
10081,*param2
10082,"def bar(param1, **param2):"
10083,*param2
10084,param1
10085,accessModifier methodName(datatype… arg) {
10086,    // method body
10087,}
10088,*args
10089,**kwargs
10090,"def print_all(*args, **kwargs):"
10091,"    print(args) # print any number of arguments like: ""print_all(""foo"", ""bar"")"""
10092,"    print(kwargs.get(""to_print"")) # print the value of the keyworded argument ""to_print"""
10093,
10094,
10095,# example:
10096,"print_all(""Hello"", ""World"", to_print=""!"")"
10097,# will print:
10098,""""""""
10099,"('Hello', 'World')"
10100,!
10101,""""""""
10102,*args
10103,*something
10104,**kwargs
10105,*keyworded_args
10106,if
10107,"if __name__ == ""__main__"":"
10108,"    print(""Hello, World!"")"
10109,import my_script_without_a_name_eq_main_guard
10110,__name__
10111,__name__
10112,foo.py
10113,# Suppose this is foo.py.
10114,
10115,"print(""before import"")"
10116,import math
10117,
10118,"print(""before function_a"")"
10119,def function_a():
10120,"    print(""Function A"")"
10121,
10122,"print(""before function_b"")"
10123,def function_b():
10124,"    print(""Function B {}"".format(math.sqrt(100)))"
10125,
10126,"print(""before __name__ guard"")"
10127,if __name__ == '__main__':
10128,    function_a()
10129,    function_b()
10130,"print(""after __name__ guard"")"
10131,__name__
10132,python foo.py
10133,"""__main__"""
10134,__name__
10135,# It's as if the interpreter inserts this at the top
10136,# of your module when run as the main program.
10137,"__name__ = ""__main__"" "
10138,# Suppose this is in some other main program.
10139,import foo
10140,foo.py
10141,"""foo"""
10142,__name__
10143,# It's as if the interpreter inserts this at the top
10144,# of your module when it's imported from another module.
10145,"__name__ = ""foo"""
10146,"""before import"""
10147,math
10148,math
10149,import math
10150,__import__
10151,"# Find and load a module given its string name, ""math"","
10152,# then assign it to a local variable called math.
10153,"math = __import__(""math"")"
10154,"""before function_a"""
10155,def
10156,function_a
10157,"""before function_b"""
10158,def
10159,function_b
10160,"""before __name__ guard"""
10161,__name__
10162,"""__main__"""
10163,"""Function A"""
10164,"""Function B 10.0"""
10165,__name__
10166,"""foo"""
10167,"""__main__"""
10168,if
10169,"""after __name__ guard"""
10170,# What gets printed if foo is the main program
10171,before import
10172,before function_a
10173,before function_b
10174,before __name__ guard
10175,Function A
10176,Function B 10.0
10177,after __name__ guard
10178,# What gets printed if foo is imported as a regular module
10179,before import
10180,before function_a
10181,before function_b
10182,before __name__ guard
10183,after __name__ guard
10184,.py
10185,.py
10186,__name__
10187,foo2.py
10188,python foo2.py
10189,# Suppose this is foo2.py.
10190,"import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters"
10191,
10192,def function_a():
10193,"    print(""a1"")"
10194,    from foo2 import function_b
10195,"    print(""a2"")"
10196,    function_b()
10197,"    print(""a3"")"
10198,
10199,def function_b():
10200,"    print(""b"")"
10201,
10202,"print(""t1"")"
10203,"if __name__ == ""__main__"":"
10204,"    print(""m1"")"
10205,    function_a()
10206,"    print(""m2"")"
10207,"print(""t2"")"
10208,      
10209,__name__
10210,foo3.py
10211,# Suppose this is foo3.py.
10212,"import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters"
10213,
10214,def function_a():
10215,"    print(""a1"")"
10216,    from foo3 import function_b
10217,"    print(""a2"")"
10218,    function_b()
10219,"    print(""a3"")"
10220,
10221,def function_b():
10222,"    print(""b"")"
10223,
10224,"print(""t1"")"
10225,"print(""m1"")"
10226,function_a()
10227,"print(""m2"")"
10228,"print(""t2"")"
10229,# Suppose this is in foo4.py
10230,"__name__ = ""__main__"""
10231,
10232,def bar():
10233,"    print(""bar"")"
10234,    
10235,"print(""before __name__ guard"")"
10236,"if __name__ == ""__main__"":"
10237,    bar()
10238,"print(""after __name__ guard"")"
10239,subprocess.run('foo_bar.py')
10240,foo_bar
10241,__name__ = '__main__'
10242,foo_bar.py
10243,__name__
10244,subprocess
10245,subprocess.run
10246,subprocess.run
10247,multiprocessing
10248,__name__
10249,python myscript.py
10250,main()
10251,main()
10252,if
10253,__name__
10254,myscript.py
10255,__name__
10256,"""__main__"""
10257,"if __name__ == ""__main__"":"
10258,    ...
10259,if
10260,# file one.py
10261,def func():
10262,"    print(""func() in one.py"")"
10263,
10264,"print(""top-level in one.py"")"
10265,
10266,"if __name__ == ""__main__"":"
10267,"    print(""one.py is being run directly"")"
10268,else:
10269,"    print(""one.py is being imported into another module"")"
10270,# file two.py
10271,import one
10272,
10273,"print(""top-level in two.py"")"
10274,one.func()
10275,
10276,"if __name__ == ""__main__"":"
10277,"    print(""two.py is being run directly"")"
10278,else:
10279,"    print(""two.py is being imported into another module"")"
10280,python one.py
10281,top-level in one.py
10282,one.py is being run directly
10283,two.py
10284,python two.py
10285,top-level in one.py
10286,one.py is being imported into another module
10287,top-level in two.py
10288,func() in one.py
10289,two.py is being run directly
10290,one
10291,__name__
10292,"""one"""
10293,"""__main__"""
10294,"if __name__ == ""__main__"":"
10295,# a.py
10296,
10297,import b
10298,# b.py
10299,
10300,"print(""__name__ equals "" + __name__)"
10301,
10302,if __name__ == '__main__':
10303,"    print(""if-statement was executed"")"
10304,python a.py
10305,$ python a.py
10306,__name__ equals b
10307,a.py
10308,b
10309,b
10310,globals()['__name__']
10311,b
10312,b
10313,python b.py
10314,$ python b.py
10315,__name__ equals __main__
10316,if-statement was executed
10317,b.py
10318,globals()['__name__']
10319,"""__main__"""
10320,if
10321,True
10322,"if __name__ == ""__main__"":"
10323,__name__
10324,'__main__'
10325,if
10326,def do_important():
10327,"    """"""This function does something very important"""""""
10328,do_important()
10329,~$ python important.py
10330,import important
10331,do_important
10332,do_important()
10333,# do_important() # I must remember to uncomment to execute this!
10334,__name__
10335,"""__main__"""
10336,"if __name__ == ""__main__"":"
10337,    do_important()
10338,'__main__'
10339,def main():
10340,"    """"""business logic for when running this module as the primary one!"""""""
10341,    setup()
10342,    foo = do_important()
10343,    bar = do_even_more_important(foo)
10344,    for baz in bar:
10345,        do_super_important(baz)
10346,    teardown()
10347,
10348,# Here's our payoff idiom!
10349,if __name__ == '__main__':
10350,    main()
10351,main
10352,'__main__'
10353,import important
10354,important.main()
10355,__main__
10356,if __name__ == '__main__':
10357,    main()
10358,A Better Way
10359,An Even Better Way
10360,A Better Way
10361,An Even Better Way
10362,"if __name__ == ""__main__"""
10363,python myscript.py
10364,helloworld.py
10365,"print(""hello world"")"
10366,python helloworld.py
10367,"if __name__ == ""__main__"""
10368,python helloworld.py
10369,"if __name__ == ""__main__"""
10370,helloworld.py
10371,"if __name__ == ""__main__"""
10372,"if __name__ == ""__main__"":"
10373,__name__
10374,str
10375,python mycode.py
10376,'__main__'
10377,__name__
10378,if __name__ == '__main__':
10379,    main()
10380,main
10381,import mycode
10382,# ... any amount of other code
10383,mycode.main()
10384,def a():
10385,    print('A function in ab file');
10386,a()
10387,import ab
10388,def main():
10389,    print('main function: this is where the action is')
10390,def x():
10391,    print ('peripheral task: might be useful in other projects')
10392,x()
10393,"if __name__ == ""__main__"":"
10394,    main()
10395,xy.py
10396,import ab
10397,ab
10398,xy
10399,ab
10400,xy
10401,__name__
10402,"""__main__"""
10403,"""__main__"""
10404,__name__
10405,"__name__ == ""ab.py"""
10406,"if __name__ == ""__main__"":"
10407,def
10408,"""__main__"""
10409,__name__
10410,"__name__ == ""ab.py"""
10411,a()
10412,"""__main__"""
10413,x()
10414,if
10415,__name__
10416,"""__main__"""
10417,main()
10418,"""__main__"""
10419,main()
10420,def main():
10421,main()
10422,main()
10423,main()
10424,main()
10425,x()
10426,if __name__ == '__main__':
10427,my_test_module.py
10428,# my_test_module.py
10429,
10430,"print('This is going to be printed out, no matter what')"
10431,
10432,if __name__ == '__main__':
10433,"    print('This is going to be printed out, only if user invokes the module as a script')"
10434,my_test_module.py
10435,# main.py
10436,
10437,import my_test_module
10438,
10439,if __name__ == '__main__':
10440,    print('Hello from main.py')
10441,main.py
10442,python main.py
10443,
10444,">> 'This is going to be printed out, no matter what'"
10445,>> 'Hello from main.py'
10446,print()
10447,my_test_module
10448,my_test_module.py
10449,my_test_module.py
10450,print()
10451,python my_test_module.py
10452,
10453,">>> 'This is going to be printed out, no matter what'"
10454,">>> 'This is going to be printed out, only if user invokes the module as a script'"
10455,if __name__ == '__main__'
10456,M.py
10457,if
10458,__name__
10459,"""__main__"""
10460,__name__
10461,'M'
10462,"if __name__ == ""main"""
10463,__name__
10464,#script1.py
10465,"print ""Script 1's name: {}"".format(__name__)"
10466,#script2.py
10467,import script1
10468,"print ""Script 2's name: {}"".format(__name__)"
10469,Script 1's name: __main__
10470,Script1's name is script1
10471,Script 2's name: __main__
10472,__name__
10473,"if __name__ == ""__main__"":"
10474,__name__
10475,x.py
10476,...
10477,<Block A>
10478,if __name__ == '__main__':
10479,    <Block B>
10480,...
10481,x.py
10482,y.py
10483,x.py
10484,x.py
10485,y.py
10486,import a
10487,a.py
10488,a.py
10489,a.py
10490,__name__
10491,.py
10492,a.py
10493,import
10494,__name__
10495,a.py
10496,a
10497,a.py
10498,python a.py
10499,__name__
10500,__main__
10501,__name__
10502,"if __name__ == ""__main__"": // do A"
10503,python a.py
10504,// do A
10505,import a
10506,// do A
10507,"__name__ == ""a"""
10508,__name__
10509,__main__
10510,__name__
10511,__main__
10512,__name__
10513,if __name__ == '__main__':
10514,"    # Do something appropriate here, like calling a"
10515,    # main() function defined elsewhere in this module.
10516,    main()
10517,else:
10518,    # Do nothing. This module has been imported by another
10519,"    # module that wants to make use of the functions,"
10520,    # classes and other useful bits it has defined.
10521,"if __name__ == ""__main__"":"
10522,    main()
10523,__name__
10524,"""__main__"""
10525,__main__
10526,main()
10527,if
10528,"if __name__ == ""__main__"""
10529,if __name__ == '__main__'
10530,__name__
10531,__name__
10532,__name__
10533,global
10534,type(__name__)
10535,<class 'str'>
10536,>>> print(__name__)
10537,__main__
10538,>>>
10539,print(__name__)
10540,__main__
10541,def somefunction():
10542,    print(__name__)
10543,import somefile
10544,somefile.somefunction()
10545,somefile
10546,__name__
10547,__file__
10548,__name__
10549,__main__
10550,__name__
10551,__name__
10552,__main__
10553,>>> __name__ = 'Horrify' # Change default from __main__
10554,>>> if __name__ == 'Horrify': print(__name__)
10555,...
10556,>>> else: print('Not Horrify')
10557,...
10558,Horrify
10559,>>>
10560,if __name__ == '__main__'
10561,if __name__ == '__main__'
10562,__name__
10563,if
10564,__name__
10565,__main__
10566,__name__
10567,__main__
10568,__name__
10569,__main__
10570,__main__
10571,__name__
10572,__name__
10573,if __name__ != '__main__':
10574,    # Do some useful things 
10575,if __name__ == '__main__':
10576,    # Execute something
10577,else:
10578,    # Do some useful things
10579,__name__
10580,__name__
10581,__main__
10582,'__main__'
10583,__name__
10584,__main__
10585,__name__
10586,__main__
10587,__name__
10588,def some_function_for_instance_main():
10589,    dosomething()
10590,
10591,
10592,__name__ == '__main__' and some_function_for_instance_main()
10593,if __name__ == '__main__'
10594,and
10595,and
10596,and
10597,if
10598,and
10599,or
10600,"x = input(""what is your name? "") or ""Nameless Person"""
10601,and
10602,and
10603,or
10604,"if __name__ == ""__main__"":"
10605,   lock = thread.allocate_lock()
10606,"   thread.start_new_thread(myfunction, (""Thread #: 1"", 2, lock))"
10607,"   thread.start_new_thread(myfunction, (""Thread #: 2"", 2, lock))"
10608,lock = thread.allocate_lock()
10609,"thread.start_new_thread(myfunction, (""Thread #: 1"", 2, lock))"
10610,"thread.start_new_thread(myfunction, (""Thread #: 2"", 2, lock))"
10611,"if __name__ == ""__main__"":"
10612,'__main__'
10613,__name__
10614,'__main__'
10615,"if __name__ == ""__main__"":"
10616,    # Execute only if run as a script
10617,    main()
10618,print __name__
10619,__main__
10620,"if __name__ == ""__main__"":"
10621,"  print ""direct method"""
10622,"__name__ equal to ""first model name"""
10623,fibo
10624,# Other modules can IMPORT this MODULE to use the function fib
10625,def fib(n):    # write Fibonacci series up to n
10626,"    a, b = 0, 1"
10627,    while b < n:
10628,"        print(b, end=' ')"
10629,"        a, b = b, a+b"
10630,    print()
10631,
10632,# This allows the file to be used as a SCRIPT
10633,"if __name__ == ""__main__"":"
10634,    import sys
10635,    fib(int(sys.argv[1]))
10636,"if __name__ == ""__main__"":"
10637,    main()
10638,main()
10639,"__name__ == ""__main__"""
10640,main()
10641,setup.py
10642,main()
10643,gunicorn
10644,app()
10645,main()
10646,setup.py
10647,gunicorn
10648,__name__
10649,__name__
10650,__main__
10651,python my_module.py
10652,import my_module
10653,__name__
10654,apple = 42
10655,
10656,def hello_world():
10657,"    print(""I am inside hello_world"")"
10658,
10659,"if __name__ == ""__main__"":"
10660,"    print(""Value of __name__ is: "", __name__)"
10661,"    print(""Going to call hello_world"")"
10662,    hello_world()
10663,python test.py
10664,Value of __name__ is: __main__
10665,Going to call hello_world
10666,I am inside hello_world
10667,import test
10668,
10669,print(test.apple)
10670,test.hello_world()
10671,
10672,print(test.__name__)
10673,python external_calling.py
10674,42
10675,I am inside hello_world
10676,test
10677,__name__
10678,test.py
10679,import
10680,unpickle
10681,if __name__
10682,import
10683,fib.py
10684,# XXX FIXME: useless (see below)
10685,"if __name__ == ""__main__"":"
10686,    n = int(input('Write a number: '))
10687,"    a, b = 0, 1"
10688,    while b < n:
10689,"        a, b = b, a+b"
10690,"    print('Fibonacci number %i: %i' % (n, b))"
10691,python fib.py
10692,__name__
10693,"""__main__"""
10694,n = int(input('Write a number: '))
10695,"a, b = 0, 1"
10696,while b < n:
10697,"    a, b = b, a+b"
10698,"print('Fibonacci number %i: %i' % (n, b))"
10699,import fib
10700,import fib
10701,import
10702,__name__
10703,"""__main__"""
10704,import
10705,def main():
10706,    n = int(input('Write a number: '))
10707,"    a, b = 0, 1"
10708,    while b < n:
10709,"        a, b = b, a+b"
10710,"    print('Fibonacci number %i: %i' % (n, b))"
10711,
10712,"if __name__ == ""__main__"":"
10713,    main()
10714,import fib
10715,main()
10716,python fib.py
10717,def fibn(n: int) -> int:
10718,"    a, b = 0, 1"
10719,    while b < n:
10720,"        a, b = b, a+b"
10721,    return b
10722,
10723,def main() -> None:
10724,    n = int(input('Write a number: '))
10725,"    print('Fibonacci number %i: %i' % (n, fibn(n)))"
10726,
10727,"if __name__ == ""__main__"":"
10728,    main()
10729,from fib import fibn
10730,fibn()
10731,import
10732,fibn()
10733,fib()
10734,from fib import fib
10735,import
10736,main
10737,if
10738,def main():
10739,    lock = thread.allocate_lock()
10740,"    thread.start_new_thread(myfunction, (""Thread #: 1"", 2, lock))"
10741,"    thread.start_new_thread(myfunction, (""Thread #: 2"", 2, lock))"
10742,
10743,"if __name__ == ""__main__"":"
10744,    main()
10745,lock
10746,global
10747,main
10748,return lock
10749,main
10750,main()
10751,input
10752,n: int
10753,-> int
10754,F(0)
10755,"if __name__ == ""__main__"":"
10756,python example1.py
10757,example1.py
10758,example2.py
10759,"if __name__ == ""__main__"":"
10760,'__main__'
10761,if
10762,python this_py.py
10763,if
10764,__name__
10765,"""__main__"""
10766,  def a():
10767,"      print(""a"")"
10768,
10769,  def b():
10770,"      print(""b"")"
10771,
10772,"  if __name__ == ""__main__"":"
10773,
10774,"          print (""you can see me"")"
10775,          a()
10776,  else:
10777,
10778,"          print (""You can't see me"")"
10779,          b()
10780,"if __name__ == ""__main__"""
10781,__name__ == '__main__':
10782,if
10783,directly
10784,not imported
10785,# test.py
10786,def test():
10787,   print('test module name=%s' %(__name__))
10788,
10789,if __name__ == '__main__':
10790,   print('call test()')
10791,   test()
10792,python test.py
10793,__main__
10794,call test()
10795,test module name=__main__
10796,code1
10797,class Foo:
10798,   code2
10799,   def spam.....
10800,      code3
10801,      for code4..:
10802,       code5
10803,       x()
10804,x
10805,spam
10806,def
10807,lambda
10808,def
10809,lambda
10810,global
10811,def
10812,open
10813,range
10814,SyntaxError
10815,code1
10816,class Foo:
10817,    code2
10818,    def spam():
10819,        code3
10820,        for code4:
10821,            code5
10822,            x()
10823,for
10824,def spam
10825,code3
10826,code4
10827,code5
10828,def
10829,x
10830,code1
10831,x
10832,x
10833,code2
10834,global(var_name)
10835,global var_name
10836,">>> def foo(x):   ...   y = x   ...   def bar(z):   ...     y = z   ...   bar(5)   ...   print x,y   ...   >>> foo(3)   3 3"
10837,y
10838,global y
10839,self.someClassAttribute
10840,self
10841,j = 0; class Foo: j = 3; print(j); # end of class; print(j)
10842,def foo():
10843,    x=4
10844,    def bar():
10845,        print x  # Accesses x from foo's scope
10846,    bar()  # Prints 4
10847,    x=5
10848,    bar()  # Prints 5
10849,global_var1 = []
10850,global_var2 = 1
10851,
10852,def func():
10853,"    # This is OK: It's just accessing, not rebinding"
10854,    global_var1.append(4) 
10855,
10856,    # This won't affect global_var2. Instead it creates a new variable
10857,    global_var2 = 2 
10858,
10859,    local1 = 4
10860,    def embedded_func():
10861,"        # Again, this doen't affect func's local1 variable.  It creates a "
10862,        # new local variable also called local1 instead.
10863,        local1 = 5
10864,        print local1
10865,
10866,    embedded_func() # Prints 5
10867,    print local1    # Prints 4
10868,global_var = 4
10869,def change_global():
10870,    global global_var
10871,    global_var = global_var + 1
10872,nonlocal
10873,def
10874,class
10875,x = 0
10876,class X(object):
10877,    y = x
10878,    x = x + 1 # x is now a variable
10879,    z = x
10880,
10881,    def method(self):
10882,        print(self.x) # -> 1
10883,"        print(x)      # -> 0, the global x"
10884,        print(y)      # -> NameError: global name 'y' is not defined
10885,
10886,inst = X()
10887,"print(inst.x, inst.y, inst.z, x) # -> (1, 0, 1, 0)"
10888,for
10889,>>> [ i for i in range(5) ]
10890,>>> i
10891,4
10892,def
10893,__main__
10894,sys.modules
10895,__main__
10896,sys.modules['__main__']
10897,import __main__
10898,UnboundLocalError
10899,NameError
10900,x = 5
10901,def foobar():
10902,    print(x)  # causes UnboundLocalError!
10903,    x += 1    # because assignment here makes x a local variable within the function
10904,
10905,# call the function
10906,foobar()
10907,x = 5
10908,def foobar():
10909,    global x
10910,    print(x)
10911,    x += 1
10912,
10913,foobar() # -> 5
10914,print(x) # -> 6
10915,x = 5
10916,y = 13
10917,def make_closure():
10918,    x = 42
10919,    y = 911
10920,    def func():
10921,        global x # sees the global value
10922,"        print(x, y)"
10923,        x += 1
10924,
10925,    return func
10926,
10927,func = make_closure()
10928,func()      # -> 5 911
10929,"print(x, y) # -> 6 13"
10930,def make_closure():
10931,    value = [0]
10932,    def get_next_value():
10933,        value[0] += 1
10934,        return value[0]
10935,
10936,    return get_next_value
10937,
10938,get_next = make_closure()
10939,print(get_next()) # -> 1
10940,print(get_next()) # -> 2
10941,nonlocal
10942,def make_closure():
10943,    value = 0
10944,    def get_next_value():
10945,        nonlocal value
10946,        value += 1
10947,        return value
10948,    return get_next_value
10949,
10950,get_next = make_closure() # identical behavior to the previous example.
10951,nonlocal
10952,nonlocal
10953,for
10954,with
10955,__builtin__
10956,builtins
10957,print
10958,print
10959,import __builtin__
10960,
10961,print3 = __builtin__.__dict__['print']
10962,from __future__ import print_function
10963,print
10964,print
10965,print
10966,print
10967,from __future__ import print_function  # for python 2 support
10968,
10969,x = 100
10970,"print(""1. Global x:"", x)"
10971,class Test(object):
10972,    y = x
10973,"    print(""2. Enclosed y:"", y)"
10974,    x = x + 1
10975,"    print(""3. Enclosed x:"", x)"
10976,
10977,    def method(self):
10978,"        print(""4. Enclosed self.x"", self.x)"
10979,"        print(""5. Global x"", x)"
10980,        try:
10981,            print(y)
10982,        except NameError as e:
10983,"            print(""6."", e)"
10984,
10985,    def method_local_ref(self):
10986,        try:
10987,            print(x)
10988,        except UnboundLocalError as e:
10989,"            print(""7."", e)"
10990,        x = 200 # causing 7 because has same name
10991,"        print(""8. Local x"", x)"
10992,
10993,inst = Test()
10994,inst.method()
10995,inst.method_local_ref()
10996,1. Global x: 100
10997,2. Enclosed y: 100
10998,3. Enclosed x: 101
10999,4. Enclosed self.x 101
11000,5. Global x 100
11001,6. global name 'y' is not defined
11002,7. local variable 'x' referenced before assignment
11003,8. Local x 200
11004,method
11005,method_local_ref
11006,method
11007,5. Global x
11008,method_local_ref
11009,x = 200
11010,globals
11011,locals
11012,x
11013,Foo.spam
11014,for
11015,if
11016,try
11017,code2
11018,Foo.code2
11019,self.code2
11020,variable.instance
11021,self.variable
11022,self
11023,Python has two namespaces available. Global and local-to-something.
11024,x= 0
11025,def fun1():
11026,    x= 1
11027,    def fun2():
11028,        x= 2
11029,        def fun3():
11030,            return x
11031,        return fun3()
11032,    return fun2()
11033,"print fun1(), x"
11034,
11035,2 0
11036,0 0
11037,print
11038,int
11039,zip
11040,def
11041,lambda
11042,def
11043,lambda
11044,class
11045,if
11046,for
11047,with
11048,nonlocal
11049,global
11050,:=
11051,"print(""builtins are available without definition"")"
11052,
11053,"some_global = ""1""  # global variables are at module scope"
11054,
11055,def outer_function():
11056,"    some_closure = ""3.1""  # locals and closure are defined the same, at function scope"
11057,"    some_local = ""3.2""    # a variable becomes a closure if a nested scope uses it"
11058,
11059,    class InnerClass:
11060,"         some_classvar = ""3.3""   # class variables exist *only* at class scope"
11061,
11062,         def nested_function(self):
11063,"             some_local = ""3.2""   # locals can replace outer names"
11064,             print(some_closure)  # closures are always readable
11065,    return InnerClass
11066,class
11067,class
11068,"┎ builtins           [print, ...]"
11069,┗━┱ globals            [some_global]
11070,"  ┗━┱ outer_function     [some_local, some_closure]"
11071,    ┣━╾ InnerClass         [some_classvar]
11072,    ┗━╾ inner_function     [some_local]
11073,some_local
11074,outer_function
11075,inner_function
11076,some_local
11077,outer_function
11078,inner_function
11079,some_closure
11080,print
11081,inner_function
11082,outer_function
11083,some_local
11084,outer_function
11085,inner_function
11086,for
11087,with
11088,del
11089,nonlocal
11090,global
11091,nonlocal
11092,global
11093,"some_global = ""1"""
11094,
11095,def outer_function():
11096,"    some_closure = ""3.2"""
11097,"    some_global = ""this is ignored by a nested global declaration"""
11098,    
11099,    def inner_function():
11100,        global some_global     # declare variable from global scope
11101,        nonlocal some_closure  # declare variable from enclosing scope
11102,"        message = "" bound by an inner scope"""
11103,        some_global = some_global + message
11104,        some_closure = some_closure + message
11105,    return inner_function
11106,nonlocal
11107,nonlocal
11108,global
11109,"some_global = ""global"""
11110,
11111,def outer_function():
11112,"    some_closure = ""closure"""
11113,    return [            # new function-like scope started by comprehension
11114,        comp_local      # names resolved using regular name resolution
11115,        for comp_local  # iteration targets are local
11116,"        in ""iterable"""
11117,        if comp_local in some_global and comp_local in some_global
11118,    ]
11119,:=
11120,nonlocal
11121,global
11122,"print(some_global := ""global"")"
11123,
11124,def outer_function():
11125,"    print(some_closure := ""closure"")"
11126,"print(some_global := ""global"")"
11127,
11128,def outer_function():
11129,"    print(some_closure := ""closure"")"
11130,    steps = [
11131,        # v write to variable in containing scope
11132,        (some_closure := some_closure + comp_local)
11133,        #                 ^ read from variable in containing scope
11134,        for comp_local in some_global
11135,    ]
11136,"    return some_closure, steps"
11137,"┎ builtins           [print, ...]"
11138,┗━┱ globals            [some_global]
11139,  ┗━┱ outer_function     [some_closure]
11140,    ┗━╾ <listcomp>         [comp_local]
11141,except..as
11142,try: raise ValueError('x'); except ValueError as v: pass
11143,except
11144,except
11145,global
11146,from Tkinter import *
11147,
11148,admin = Tk()
11149,def button(an):
11150,    print(an)
11151,    print('het')
11152,
11153,"b = Button(admin, text='as', command=button('hey'))"
11154,b.pack()
11155,mainloop()
11156,"b = Button(admin, text='as', command=button('hey'))"
11157,result = button('hey')
11158,"b = button(admin, text='as', command=result)"
11159,"listbox.bind(""<<ListboxSelect>>"", some_function())"
11160,result = some_function()
11161,"listbox.bind(""<<ListboxSelect>>"", result)"
11162,command
11163,b = Button(... command = button)
11164,button
11165,lambda
11166,lambda
11167,command
11168,lambda
11169,functools.partial
11170,functools.partial
11171,button
11172,lambda: button('hey')
11173,def some_name():
11174,    return button('hey')
11175,lambda
11176,command
11177,lambda
11178,b = Button(... command = lambda: button('hey'))
11179,lambda
11180,"b = Button(admin, text='as', command=lambda: button('hey'))"
11181,import tkinter as tk
11182,
11183,root = tk.Tk()
11184,
11185,"btn = tk.Button(root, text=""Press"")"
11186,btn.pack()
11187,
11188,root.mainloop()
11189,btn
11190,button_press_handle
11191,def button_press_handle(callback=None):
11192,    if callback:
11193,        callback() # Where exactly the method assigned to btn['command'] is being callled
11194,button_press_handle(btn['command'])
11195,command
11196,callback
11197,button_press_handle
11198,print
11199,btn['command'] = print # default to print is new line
11200,()
11201,print
11202,print
11203,print
11204,"btn['command'] = lambda arg1=""Hello"", arg2="" "", arg3=""World!"" : print(arg1 + arg2 + arg3)"
11205,lambda
11206,multiple_methods
11207,def multiple_methods():
11208,"    print(""Vicariously"") # the first inner callback"
11209,"    print(""I"") # another inner callback"
11210,lambda
11211,"def multiple_methods(*args, **kwargs):"
11212,    print(args[0]) # the first inner callback
11213,    print(kwargs['opt1']) # another inner callback
11214,"btn['command'] = lambda arg=""live"", kw=""as the"" : a_new_method(arg, opt1=kw)"
11215,callback
11216,return
11217,button_press_handle
11218,callback()
11219,return callback()
11220,return
11221,btn
11222,import tkinter as tk
11223,
11224,i = 0
11225,def text_mod():
11226,"    global i, btn           # btn can be omitted but not sure if should be"
11227,"    txt = (""Vicariously"", ""I"", ""live"", ""as"", ""the"", ""whole"", ""world"", ""dies"")"
11228,    btn['text'] = txt[i]    # the global object that is modified
11229,    i = (i + 1) % len(txt)  # another global object that gets modified
11230,
11231,root = tk.Tk()
11232,
11233,"btn = tk.Button(root, text=""My Button"")"
11234,btn['command'] = text_mod
11235,
11236,"btn.pack(fill='both', expand=True)"
11237,
11238,root.mainloop()
11239,#!/usr/bin/python
11240,# coding=utf-8
11241,
11242,from Tkinter import *
11243,# Creation de la fenêtre principale (main window)
11244,Mafenetre = Tk()
11245,res1 = StringVar()
11246,res2 = StringVar()
11247,
11248,def isValidInput(obj):
11249,"    if hasattr(obj, 'get') and callable(getattr(obj, 'get')):"
11250,        return TRUE
11251,    return FALSE
11252,
11253,
11254,# stupid action 2 (return 12 on purpose to show potential mistake)
11255,def action1(*arguments):
11256,"    print ""action1 running"""
11257,    for arg in arguments:
11258,        if isValidInput(arg):
11259,"            print ""input value: "", arg.get()"
11260,            res1.set(arg.get())
11261,        else:
11262,"            print ""other value:"", arg"
11263,"    print ""\n"""
11264,    return 12
11265,
11266,
11267,# stupid action 2
11268,def action2(*arguments):
11269,"    print ""action2 running"""
11270,    a = arguments[0]
11271,    b = arguments[1]
11272,    if isValidInput(a) and isValidInput(b):
11273,        c = a.get() + b.get()
11274,        res2.set(c)
11275,        print c
11276,"    print ""\n"""
11277,
11278,
11279,# a stupid workflow manager ordered by name
11280,"def start_tasks(*arguments, **keywords):"
11281,    keys = sorted(keywords.keys())
11282,    for kw in keys:
11283,"        print kw, ""plugged """
11284,        keywords[kw](*arguments)
11285,
11286,
11287,# valid callback wrapper with lambda
11288,def action1_callback(my_input):
11289,    return lambda args=[my_input]: action1(*args)
11290,
11291,
11292,# valid callback wrapper without lambda
11293,"def action1_callback_nolambda(*args, **kw):"
11294,    def anon():
11295,        action1(*args)
11296,    return anon
11297,
11298,
11299,# first input string
11300,input1 = StringVar()
11301,"input1.set(""delete me..."")"
11302,"f1 = Entry(Mafenetre, textvariable=input1, bg='bisque', fg='maroon')"
11303,f1.focus_set()
11304,"f1.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11305,
11306,"# failed callback because the action1 function is evaluated, it will return 12. "
11307,"# in this case the button won't work at all, because the assignement expect a function "
11308,# in order to have the button command to execute something
11309,ba1 = Button(Mafenetre)
11310,"ba1['text'] = ""show input 1 (ko)"""
11311,ba1['command'] = action1(input1)
11312,"ba1.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11313,
11314,# working button using a wrapper
11315,ba3 = Button(Mafenetre)
11316,"ba3['text'] = ""show input 1 (ok)"""
11317,# without a lambda it is also working if the assignment is a function
11318,#ba1['command'] = action1_callback_nolambda(input1)
11319,ba3['command'] = action1_callback(input1)
11320,"ba3.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11321,
11322,# display result label
11323,"Label1 = Label(Mafenetre, text=""Action 1 result:"")"
11324,"Label1.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11325,# display result value
11326,"resl1 = Label(Mafenetre, textvariable=res1)"
11327,"resl1.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11328,
11329,
11330,# second input string
11331,input2 = StringVar()
11332,"f2 = Entry(Mafenetre, textvariable=input2, bg='bisque', fg='maroon')"
11333,f2.focus_set()
11334,"f2.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11335,
11336,"# third test without wrapper, but making sure that several arguments are well handled by a lambda function"
11337,ba2 = Button(Mafenetre)
11338,"ba2['text'] = ""execute action 2"""
11339,"ba2['command'] = lambda args=[input1, input2], action=action2: start_tasks(*args, do=action)"
11340,"ba2.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11341,
11342,# display result label
11343,"Label2 = Label(Mafenetre, text=""Action 2 result:"")"
11344,"Label2.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11345,# display result value
11346,"resl2 = Label(Mafenetre, textvariable=res2)"
11347,"resl2.pack(fill=""both"", expand=""yes"", padx=""5"", pady=5)"
11348,
11349,Mafenetre.mainloop()
11350,from tkinter import *
11351,admin= Tk()
11352,def button(an):
11353,    print(an)
11354,"    print(""het"")"
11355,"b = Button(admin, text=""as"", command=lambda: button(""hey""))"
11356,b.pack()
11357,mainloop()
11358,from tkinter import *
11359,admin= Tk()
11360,def button(an):
11361,    print(an)
11362,"    print(""het"")"
11363,"b = Button(admin, text=""as"")"
11364,b.pack()
11365,"b.bind(""<Button-1>"", lambda bb: button(""hey""))"
11366,mainloop()
11367,import tkinter
11368,window = tkinter.Tk()
11369,
11370,"def plus_them(field_1, field_2, field_3):"
11371,"    field_3.delete(0, 'end')"
11372,    num1 = 0
11373,    num2 = 0
11374,    try:
11375,        num1 = int(field_1.get())
11376,        num2 = int(field_2.get())
11377,    except:
11378,"        print(""Exception occurs"")"
11379,    else:
11380,"        print(""Continue"")"
11381,    result = num1 + num2
11382,"    field_3.insert(tkinter.END, str(result))"
11383,    return result
11384,"def minus_them(field_1, field_2, field_3):"
11385,"    field_3.delete(0, 'end')"
11386,    num1 = 0
11387,    num2 = 0
11388,    try:
11389,        num1 = int(field_1.get())
11390,        num2 = int(field_2.get())
11391,    except:
11392,"        print(""Exception occurs"")"
11393,    else:
11394,"        print(""Continue"")"
11395,    result = num1 - num2
11396,"    field_3.insert(tkinter.END, str(result))"
11397,    return result
11398,
11399,#Input Panel:
11400,"label_1 = tkinter.Label(window, text=""First Number:"")"
11401,"label_1.grid(row=0, column=0)"
11402,"label_2 = tkinter.Label(window, text=""Second Number:"")"
11403,"label_2.grid(row=1, column=0)"
11404,entry_1 = tkinter.Entry(window)
11405,"entry_1.grid(row=0, column=1)"
11406,entry_2 = tkinter.Entry(window)
11407,"entry_2.grid(row=1, column=1)"
11408,
11409,#Button Panel:
11410,"button_1 = tkinter.Button(window, text=""Plus"")"
11411,"button_1.grid(row=2, column=0)"
11412,"button_2 = tkinter.Button(window, text=""Minus"")"
11413,"button_2.grid(row=2, column=1)"
11414,
11415,#Answer Panel:
11416,"label_3 = tkinter.Label(window, text=""The Answer:"")"
11417,"label_3.grid(row=3, column=0)"
11418,entry_3 = tkinter.Entry(window)
11419,"entry_3.grid(row=3, column=1)"
11420,
11421,#Event Handling:
11422,"button_1.bind(""<Button-1>"", lambda p: plus_them(entry_1, entry_2, entry_3))"
11423,"button_2.bind(""<Button-1>"", lambda m: minus_them(entry_1, entry_2, entry_3))"
11424,
11425,#Window Stuff:
11426,"window.title(""Plus and Minus Calculator"")"
11427,window.mainloop()
11428,DataFrame
11429,SELECT *
11430,FROM table
11431,WHERE column_name = some_value
11432,some_value
11433,==
11434,df.loc[df['column_name'] == some_value]
11435,some_values
11436,isin
11437,df.loc[df['column_name'].isin(some_values)]
11438,&
11439,df.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]
11440,&
11441,<=
11442,>=
11443,df['column_name'] >= A & df['column_name'] <= B
11444,df['column_name'] >= (A & df['column_name']) <= B
11445,some_value
11446,!=
11447,df.loc[df['column_name'] != some_value]
11448,isin
11449,some_values
11450,~
11451,df.loc[~df['column_name'].isin(some_values)]
11452,import pandas as pd
11453,import numpy as np
11454,"df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),"
11455,"                   'B': 'one one two three two two one three'.split(),"
11456,"                   'C': np.arange(8), 'D': np.arange(8) * 2})"
11457,print(df)
11458,#      A      B  C   D
11459,# 0  foo    one  0   0
11460,# 1  bar    one  1   2
11461,# 2  foo    two  2   4
11462,# 3  bar  three  3   6
11463,# 4  foo    two  4   8
11464,# 5  bar    two  5  10
11465,# 6  foo    one  6  12
11466,# 7  foo  three  7  14
11467,
11468,print(df.loc[df['A'] == 'foo'])
11469,     A      B  C   D
11470,0  foo    one  0   0
11471,2  foo    two  2   4
11472,4  foo    two  4   8
11473,6  foo    one  6  12
11474,7  foo  three  7  14
11475,isin
11476,"print(df.loc[df['B'].isin(['one','three'])])"
11477,     A      B  C   D
11478,0  foo    one  0   0
11479,1  bar    one  1   2
11480,3  bar  three  3   6
11481,6  foo    one  6  12
11482,7  foo  three  7  14
11483,df.loc
11484,df = df.set_index(['B'])
11485,print(df.loc['one'])
11486,       A  C   D
11487,B              
11488,one  foo  0   0
11489,one  bar  1   2
11490,one  foo  6  12
11491,df.index.isin
11492,"df.loc[df.index.isin(['one','two'])]"
11493,       A  C   D
11494,B              
11495,one  foo  0   0
11496,one  bar  1   2
11497,two  foo  2   4
11498,two  foo  4   8
11499,two  bar  5  10
11500,one  foo  6  12
11501,df.where(condition)
11502,df
11503,df[df['column_name'] == some_value]
11504,.loc
11505,df[df['col'] == value
11506,df.iloc[...]
11507,df.xs(...)
11508,df.query(...)
11509,'A'
11510,'foo'
11511,column_name == some_value
11512,"import pandas as pd, numpy as np"
11513,
11514,"df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),"
11515,"                   'B': 'one one two three two two one three'.split(),"
11516,"                   'C': np.arange(8), 'D': np.arange(8) * 2})"
11517,'A'
11518,'foo'
11519,mask
11520,mask = df['A'] == 'foo'
11521,df[mask]
11522,
11523,     A      B  C   D
11524,0  foo    one  0   0
11525,2  foo    two  2   4
11526,4  foo    two  4   8
11527,6  foo    one  6  12
11528,7  foo  three  7  14
11529,mask
11530,df.iloc[...]
11531,mask = df['A'] == 'foo'
11532,pos = np.flatnonzero(mask)
11533,df.iloc[pos]
11534,
11535,     A      B  C   D
11536,0  foo    one  0   0
11537,2  foo    two  2   4
11538,4  foo    two  4   8
11539,6  foo    one  6  12
11540,7  foo  three  7  14
11541,"df.set_index('A', append=True, drop=False).xs('foo', level=1)"
11542,
11543,     A      B  C   D
11544,0  foo    one  0   0
11545,2  foo    two  2   4
11546,4  foo    two  4   8
11547,6  foo    one  6  12
11548,7  foo  three  7  14
11549,df.query()
11550,pd.DataFrame.query
11551,"df.query('A == ""foo""')"
11552,
11553,     A      B  C   D
11554,0  foo    one  0   0
11555,2  foo    two  2   4
11556,4  foo    two  4   8
11557,6  foo    one  6  12
11558,7  foo  three  7  14
11559,Boolean
11560,mask
11561,Boolean
11562,mask
11563,mask
11564,pd.Series
11565,mask = df['A'].values == 'foo'
11566,mask
11567,%timeit mask = df['A'].values == 'foo'
11568,%timeit mask = df['A'] == 'foo'
11569,
11570,"5.84 µs ± 195 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
11571,"166 µs ± 4.45 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
11572,mask
11573,pd.Series
11574,mask
11575,mask = df['A'].values == 'foo'
11576,%timeit df[mask]
11577,mask = df['A'] == 'foo'
11578,%timeit df[mask]
11579,
11580,"219 µs ± 12.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
11581,"239 µs ± 7.03 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
11582,mask
11583,dtypes
11584,df[mask]
11585,"pd.DataFrame(df.values[mask], df.index[mask], df.columns).astype(df.dtypes)"
11586,df.values
11587,dtype
11588,object
11589,dtype
11590,object
11591,astype(df.dtypes)
11592,%timeit df[m]
11593,"%timeit pd.DataFrame(df.values[mask], df.index[mask], df.columns).astype(df.dtypes)"
11594,
11595,"216 µs ± 10.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
11596,"1.43 ms ± 39.6 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
11597,"np.random.seed([3,1415])"
11598,"d1 = pd.DataFrame(np.random.randint(10, size=(10, 5)), columns=list('ABCDE'))"
11599,
11600,d1
11601,
11602,   A  B  C  D  E
11603,0  0  2  7  3  8
11604,1  7  0  6  8  6
11605,2  0  2  0  4  9
11606,3  7  3  2  4  3
11607,4  3  6  7  7  4
11608,5  5  3  7  5  9
11609,6  8  7  6  4  7
11610,7  6  2  6  6  5
11611,8  2  8  7  5  8
11612,9  4  7  6  1  5
11613,%%timeit
11614,mask = d1['A'].values == 7
11615,d1[mask]
11616,
11617,"179 µs ± 8.73 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
11618,%%timeit
11619,mask = d1['A'].values == 7
11620,"pd.DataFrame(d1.values[mask], d1.index[mask], d1.columns)"
11621,
11622,"87 µs ± 5.12 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
11623,mask
11624,pd.Series.isin
11625,df['A']
11626,'foo'
11627,mask = df['A'].isin(['foo'])
11628,df[mask]
11629,
11630,     A      B  C   D
11631,0  foo    one  0   0
11632,2  foo    two  2   4
11633,4  foo    two  4   8
11634,6  foo    one  6  12
11635,7  foo  three  7  14
11636,np.in1d
11637,"mask = np.in1d(df['A'].values, ['foo'])"
11638,df[mask]
11639,
11640,     A      B  C   D
11641,0  foo    one  0   0
11642,2  foo    two  2   4
11643,4  foo    two  4   8
11644,6  foo    one  6  12
11645,7  foo  three  7  14
11646,1.0
11647,res.div(res.min())
11648,
11649,                         10        30        100       300       1000      3000      10000     30000
11650,mask_standard         2.156872  1.850663  2.034149  2.166312  2.164541  3.090372  2.981326  3.131151
11651,mask_standard_loc     1.879035  1.782366  1.988823  2.338112  2.361391  3.036131  2.998112  2.990103
11652,mask_with_values      1.010166  1.000000  1.005113  1.026363  1.028698  1.293741  1.007824  1.016919
11653,mask_with_values_loc  1.196843  1.300228  1.000000  1.000000  1.038989  1.219233  1.037020  1.000000
11654,query                 4.997304  4.765554  5.934096  4.500559  2.997924  2.397013  1.680447  1.398190
11655,xs_label              4.124597  4.272363  5.596152  4.295331  4.676591  5.710680  6.032809  8.950255
11656,mask_with_isin        1.674055  1.679935  1.847972  1.724183  1.345111  1.405231  1.253554  1.264760
11657,mask_with_in1d        1.000000  1.083807  1.220493  1.101929  1.000000  1.000000  1.000000  1.144175
11658,mask_with_values
11659,mask_with_in1d
11660,res.T.plot(loglog=True)
11661,def mask_standard(df):
11662,    mask = df['A'] == 'foo'
11663,    return df[mask]
11664,
11665,def mask_standard_loc(df):
11666,    mask = df['A'] == 'foo'
11667,    return df.loc[mask]
11668,
11669,def mask_with_values(df):
11670,    mask = df['A'].values == 'foo'
11671,    return df[mask]
11672,
11673,def mask_with_values_loc(df):
11674,    mask = df['A'].values == 'foo'
11675,    return df.loc[mask]
11676,
11677,def query(df):
11678,"    return df.query('A == ""foo""')"
11679,
11680,def xs_label(df):
11681,"    return df.set_index('A', append=True, drop=False).xs('foo', level=-1)"
11682,
11683,def mask_with_isin(df):
11684,    mask = df['A'].isin(['foo'])
11685,    return df[mask]
11686,
11687,def mask_with_in1d(df):
11688,"    mask = np.in1d(df['A'].values, ['foo'])"
11689,    return df[mask]
11690,res = pd.DataFrame(
11691,    index=[
11692,"        'mask_standard', 'mask_standard_loc', 'mask_with_values', 'mask_with_values_loc',"
11693,"        'query', 'xs_label', 'mask_with_isin', 'mask_with_in1d'"
11694,"    ],"
11695,"    columns=[10, 30, 100, 300, 1000, 3000, 10000, 30000],"
11696,    dtype=float
11697,)
11698,
11699,for j in res.columns:
11700,"    d = pd.concat([df] * j, ignore_index=True)"
11701,    for i in res.index:a
11702,        stmt = '{}(d)'.format(i)
11703,"        setp = 'from __main__ import d, {}'.format(i)"
11704,"        res.at[i, j] = timeit(stmt, setp, number=50)"
11705,dtype
11706,spec.div(spec.min())
11707,
11708,                     10        30        100       300       1000      3000      10000     30000
11709,mask_with_values  1.009030  1.000000  1.194276  1.000000  1.236892  1.095343  1.000000  1.000000
11710,mask_with_in1d    1.104638  1.094524  1.156930  1.072094  1.000000  1.000000  1.040043  1.027100
11711,reconstruct       1.000000  1.142838  1.000000  1.355440  1.650270  2.222181  2.294913  3.406735
11712,spec.T.plot(loglog=True)
11713,"np.random.seed([3,1415])"
11714,"d1 = pd.DataFrame(np.random.randint(10, size=(10, 5)), columns=list('ABCDE'))"
11715,
11716,def mask_with_values(df):
11717,    mask = df['A'].values == 'foo'
11718,    return df[mask]
11719,
11720,def mask_with_in1d(df):
11721,"    mask = np.in1d(df['A'].values, ['foo'])"
11722,    return df[mask]
11723,
11724,def reconstruct(df):
11725,    v = df.values
11726,"    mask = np.in1d(df['A'].values, ['foo'])"
11727,"    return pd.DataFrame(v[mask], df.index[mask], df.columns)"
11728,
11729,spec = pd.DataFrame(
11730,"    index=['mask_with_values', 'mask_with_in1d', 'reconstruct'],"
11731,"    columns=[10, 30, 100, 300, 1000, 3000, 10000, 30000],"
11732,    dtype=float
11733,)
11734,for j in spec.columns:
11735,"    d = pd.concat([df] * j, ignore_index=True)"
11736,    for i in spec.index:
11737,        stmt = '{}(d)'.format(i)
11738,"        setp = 'from __main__ import d, {}'.format(i)"
11739,"        spec.at[i, j] = timeit(stmt, setp, number=50)"
11740,df['A'].values == 'foo'
11741,select * from table where column_name = some_value
11742,table[table.column_name == some_value]
11743,table[(table.column_name == some_value) | (table.column_name2 == some_value2)]
11744,table.query('column_name == some_value | column_name2 == some_value2')
11745,import pandas as pd
11746,
11747,# Create data set
11748,"d = {'foo':[100, 111, 222],"
11749,"     'bar':[333, 444, 555]}"
11750,df = pd.DataFrame(d)
11751,
11752,# Full dataframe:
11753,df
11754,
11755,# Shows:
11756,#    bar   foo
11757,# 0  333   100
11758,# 1  444   111
11759,# 2  555   222
11760,
11761,# Output only the row(s) in df where foo is 222:
11762,df[df.foo == 222]
11763,
11764,# Shows:
11765,#    bar  foo
11766,# 2  555  222
11767,df[df.foo == 222]
11768,222
11769,df[(df.foo == 222) | (df.bar == 444)]
11770,#    bar  foo
11771,# 1  444  111
11772,# 2  555  222
11773,df.query('foo == 222 | bar == 444')
11774,query
11775,filter
11776,query()
11777,df.query('col == val')
11778,In [167]: n = 10
11779,
11780,"In [168]: df = pd.DataFrame(np.random.rand(n, 3), columns=list('abc'))"
11781,
11782,In [169]: df
11783,Out[169]: 
11784,          a         b         c
11785,0  0.687704  0.582314  0.281645
11786,1  0.250846  0.610021  0.420121
11787,2  0.624328  0.401816  0.932146
11788,3  0.011763  0.022921  0.244186
11789,4  0.590198  0.325680  0.890392
11790,5  0.598892  0.296424  0.007312
11791,6  0.634625  0.803069  0.123872
11792,7  0.924168  0.325076  0.303746
11793,8  0.116822  0.364564  0.454607
11794,9  0.986142  0.751953  0.561512
11795,
11796,# pure python
11797,In [170]: df[(df.a < df.b) & (df.b < df.c)]
11798,Out[170]: 
11799,          a         b         c
11800,3  0.011763  0.022921  0.244186
11801,8  0.116822  0.364564  0.454607
11802,
11803,# query
11804,In [171]: df.query('(a < b) & (b < c)')
11805,Out[171]: 
11806,          a         b         c
11807,3  0.011763  0.022921  0.244186
11808,8  0.116822  0.364564  0.454607
11809,@
11810,"exclude = ('red', 'orange')"
11811,df.query('color not in @exclude')
11812,.query
11813,query
11814,# Example dataframe
11815,"df = pd.DataFrame({'Sender email':['ex@example.com', ""reply@shop.com"", ""buy@shop.com""]})"
11816,
11817,     Sender email
11818,0  ex@example.com
11819,1  reply@shop.com
11820,2    buy@shop.com
11821,.query
11822,str.endswith
11823,"df.query('`Sender email`.str.endswith(""@shop.com"")')"
11824,     Sender email
11825,1  reply@shop.com
11826,2    buy@shop.com
11827,@
11828,domain = 'shop.com'
11829,df.query('`Sender email`.str.endswith(@domain)')
11830,     Sender email
11831,1  reply@shop.com
11832,2    buy@shop.com
11833,"select col_name1, col_name2 from table where column_name = some_value."
11834,loc
11835,"df.loc[df['column_name'] == some_value, [col_name1, col_name2]]"
11836,query
11837,"df.query('column_name == some_value')[[col_name1, col_name2]]"
11838,"df[df[""colume_name""] == some_value] #Scalar, True/False.."
11839,
11840,"df[df[""colume_name""] == ""some_value""] #String"
11841,()
11842,&
11843,|
11844,"df[(df[""colume_name""] == ""some_value1"") & (pd[pd[""colume_name""] == ""some_value2""])]"
11845,"pandas.notna(df[""colume_name""]) == True # Not NaN"
11846,"df['colume_name'].str.contains(""text"") # Search for ""text"""
11847,"df['colume_name'].str.lower().str.contains(""text"") # Search for ""text"", after converting  to lowercase"
11848,In [76]: df.iloc[np.where(df.A.values=='foo')]
11849,Out[76]: 
11850,     A      B  C   D
11851,0  foo    one  0   0
11852,2  foo    two  2   4
11853,4  foo    two  4   8
11854,6  foo    one  6  12
11855,7  foo  three  7  14
11856,In [68]: %timeit df.iloc[np.where(df.A.values=='foo')]  # fastest
11857,"1000 loops, best of 3: 380 µs per loop"
11858,
11859,In [69]: %timeit df.loc[df['A'] == 'foo']
11860,"1000 loops, best of 3: 745 µs per loop"
11861,
11862,In [71]: %timeit df.loc[df['A'].isin(['foo'])]
11863,"1000 loops, best of 3: 562 µs per loop"
11864,
11865,In [72]: %timeit df[df.A=='foo']
11866,"1000 loops, best of 3: 796 µs per loop"
11867,
11868,"In [74]: %timeit df.query('(A==""foo"")')  # slowest"
11869,"1000 loops, best of 3: 1.71 ms per loop"
11870,from pandas import DataFrame
11871,
11872,# Create data set
11873,"d = {'Revenue':[100,111,222], "
11874,"     'Cost':[333,444,555]}"
11875,df = DataFrame(d)
11876,
11877,
11878,"# mask = Return True when the value in column ""Revenue"" is equal to 111"
11879,mask = df['Revenue'] == 111
11880,
11881,print mask
11882,
11883,# Result:
11884,# 0    False
11885,# 1     True
11886,# 2    False
11887,"# Name: Revenue, dtype: bool"
11888,
11889,
11890,# Select * FROM df WHERE Revenue = 111
11891,df[mask]
11892,
11893,# Result:
11894,#    Cost    Revenue
11895,# 1  444     111
11896,df.groupby('column_name').get_group('column_desired_value').reset_index()
11897,import pandas as pd
11898,"df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),"
11899,                   'B': 'one one two three two two one three'.split()})
11900,"print(""Original dataframe:"")"
11901,print(df)
11902,
11903,"b_is_two_dataframe = pd.DataFrame(df.groupby('B').get_group('two').reset_index()).drop('index', axis = 1) "
11904,#NOTE: the final drop is to remove the extra index column returned by groupby object
11905,print('Sub dataframe where B is two:')
11906,print(b_is_two_dataframe)
11907,Original dataframe:
11908,     A      B
11909,0  foo    one
11910,1  bar    one
11911,2  foo    two
11912,3  bar  three
11913,4  foo    two
11914,5  bar    two
11915,6  foo    one
11916,7  foo  three
11917,Sub dataframe where B is two:
11918,     A    B
11919,0  foo  two
11920,1  foo  two
11921,2  bar  two
11922,"df.apply(lambda row: row[df['B'].isin(['one','three'])])"
11923,   A      B  C   D
11924,0  foo    one  0   0
11925,1  bar    one  1   2
11926,3  bar  three  3   6
11927,6  foo    one  6  12
11928,7  foo  three  7  14
11929,"df[[df['B'].isin(['one','three'])]]"
11930,my_df = df.set_index(column_name)
11931,my_dict = my_df.to_dict('index')
11932,if some_value in my_dict.keys():
11933,   my_result = my_dict[some_value]
11934,my_result = my_df.loc[some_value]
11935,In [1]: import duckdb
11936,
11937,In [2]: import pandas as pd
11938,
11939,In [3]: con = duckdb.connect()
11940,
11941,"In [4]: df = pd.DataFrame({""A"": range(11), ""B"": range(11, 22)})"
11942,
11943,In [5]: df
11944,Out[5]:
11945,     A   B
11946,0    0  11
11947,1    1  12
11948,2    2  13
11949,3    3  14
11950,4    4  15
11951,5    5  16
11952,6    6  17
11953,7    7  18
11954,8    8  19
11955,9    9  20
11956,10  10  21
11957,
11958,"In [6]: results = con.execute(""SELECT * FROM df where A > 2"").df()"
11959,
11960,In [7]: results
11961,Out[7]:
11962,    A   B
11963,0   3  14
11964,1   4  15
11965,2   5  16
11966,3   6  17
11967,4   7  18
11968,5   8  19
11969,6   9  20
11970,7  10  21
11971,df[df['col']==val]
11972,s=datetime.datetime.now()
11973,
11974,my_dict={}
11975,
11976,"for i, my_key in enumerate(df['some_column'].values): "
11977,    if i%100==0:
11978,        print(i)  # to see the progress
11979,    if my_key not in my_dict.keys():
11980,        my_dict[my_key]={}
11981,        my_dict[my_key]['values']=[df.iloc[i]['another_column']]
11982,    else:
11983,        my_dict[my_key]['values'].append(df.iloc[i]['another_column'])
11984,        
11985,e=datetime.datetime.now()
11986,
11987,print('operation took '+str(e-s)+' seconds')```
11988,loc
11989,# Series
11990,"s = pd.Series([1, 2, 3, 4]) "
11991,s.loc[lambda x: x > 1]
11992,# s[lambda x: x > 1]
11993,1    2
11994,2    3
11995,3    4
11996,dtype: int64
11997,# DataFrame
11998,"df = pd.DataFrame({'A': [1, 2, 3], 'B': [10, 20, 30]})"
11999,df.loc[lambda x: x['A'] > 1]
12000,# df[lambda x: x['A'] > 1]
12001,   A   B
12002,1  2  20
12003,2  3  30
12004,"df.mul(2).loc[lambda x: x['A'] > 3, 'B']"
12005,"# (df * 2).loc[lambda x: x['A'] > 3, 'B']"
12006,df_temp = df * 2
12007,"df_temp.loc[df_temp['A'] > 3, 'B']"
12008,1    40
12009,2    60
12010,"Name: B, dtype: int64"
12011,from tkinter import *
12012,
12013,root = Tk()
12014,
12015,def grabText(event):
12016,    print(entryBox.get())    
12017,
12018,"entryBox = Entry(root, width=60).grid(row=2, column=1, sticky=W)"
12019,
12020,"grabBtn = Button(root, text=""Grab"")"
12021,"grabBtn.grid(row=8, column=1)"
12022,"grabBtn.bind('<Button-1>', grabText)"
12023,
12024,root.mainloop()
12025,Grab
12026,C:\Python> python.exe myFiles\testBed.py
12027,Exception in Tkinter callback
12028,Traceback (most recent call last):
12029,"  File ""C:\Python\lib\lib-tk\Tkinter.py"", line 1403, in __call__"
12030,    return self.func(*args)
12031,"  File ""myFiles\testBed.py"", line 10, in grabText"
12032,"    if entryBox.get().strip()=="""":"
12033,AttributeError: 'NoneType' object has no attribute 'get'
12034,entryBox
12035,None
12036,grid
12037,pack
12038,place
12039,Entry
12040,None
12041,a().b()
12042,b()
12043,Entry(...).grid(...)
12044,None
12045,"entryBox = Entry(root, width=60)"
12046,"entryBox.grid(row=2, column=1, sticky=W)"
12047,Entry
12048,entryBox
12049,grid
12050,pack
12051,entryBox
12052,Entry()
12053,grid()
12054,"entryBox=Entry(root,width=60).grid(row=2, column=1,sticky=W)"
12055,"entryBox=Entry(root,width=60)"
12056,"entryBox.grid(row=2, column=1,sticky=W)"
12057,grabBtn
12058,Python3.8+
12059,walrus operator
12060,"(entryBox := Entry(root, width=60)).grid(row=2, column=1, sticky=W)"
12061,entryBox
12062,Entry
12063,(var := Button(
12064,"    text='fine', command=some_func, width=20, height=15, activebackground='grey'"
12065,")).grid(row=0, column=0, columnspan=0, rowspan=0, sticky='news')"
12066,walrus operator
12067,entryBox.get()
12068,get()
12069,"Entry(root, width=60).grid(row=2, column=1, sticky=W)"
12070,"entryBox = Entry(root, width=60)"
12071,"entryBox = entryBox.grid(row=2, column=1, sticky=W)"
12072,entryBox
12073,"entryBox = entryBox.grid(row=2, column=1, sticky=W)"
12074,"entryBox = Entry(root, width=60)"
12075,"entryBox.grid(row=2, column=1, sticky=W)"
12076,subprocess
12077,import subprocess
12078,"subprocess.run([""ls"", ""-l""])"
12079,subprocess.run
12080,os.system
12081,stdout
12082,stderr
12083,os.system
12084,subprocess
12085,subprocess
12086,subprocess
12087,subprocess.call
12088,.run
12089,"subprocess.call([""ls"", ""-l""])"
12090,echo $PATH
12091,"call([""echo"", ""$PATH""])"
12092,$PATH
12093,shell=True
12094,shell=True
12095,"os.path.expandvars(""$PATH"")"
12096,pip list | grep anatome
12097,"subprocess.run([""balcon.exe"",""-n"",""Tatyana"",""-t"", ""Hello world""])"
12098,os.system
12099,"os.system(""some_command < input_file | another_command > output_file"")  "
12100,os.popen
12101,os.system
12102,"print(os.popen(""ls -l"").read())"
12103,subprocess.Popen
12104,os.popen
12105,"print subprocess.Popen(""echo Hello World"", shell=True, stdout=subprocess.PIPE).stdout.read()"
12106,"print os.popen(""echo Hello World"").read()"
12107,subprocess.call
12108,Popen
12109,"return_code = subprocess.call(""echo Hello World"", shell=True)"
12110,subprocess.run
12111,CompletedProcess
12112,os.fork
12113,os.exec
12114,os.spawn
12115,subprocess
12116,"print subprocess.Popen(""echo %s "" % user_input, stdout=PIPE).stdout.read()"
12117,my mama didnt love me && rm -rf /
12118,open
12119,subprocess.run()
12120,subprocess.run(..)
12121,subprocess.check_output(..)
12122,for
12123,subprocess.run()
12124,subprocess.check_call()
12125,subprocess.Popen()
12126,os.popen()
12127,import subprocess
12128,
12129,"p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
12130,for line in p.stdout.readlines():
12131,"    print line,"
12132,retval = p.wait()
12133,stdout
12134,stdout=
12135,stderr=
12136,os.system()
12137,.readlines()
12138,"for line in iter(p.stdout.readline, ''): print line,"
12139,p.stdout.readline()
12140,s
12141,Popen
12142,shell=True
12143,subprocess.run()
12144,import subprocess
12145,import sys
12146,
12147,# Some code here
12148,
12149,"pid = subprocess.Popen([sys.executable, ""longtask.py""]) # Call subprocess"
12150,
12151,# Some more code here
12152,DETACHED_PROCESS = 0x00000008
12153,
12154,"pid = subprocess.Popen([sys.executable, ""longtask.py""],"
12155,                       creationflags=DETACHED_PROCESS).pid
12156,"pid = subprocess.Popen([sys.executable, ""longtask.py""], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)"
12157,import subprocess as sp;sp.Popen('calc')
12158,cmd
12159,calc
12160,DETACHED_PROCESS
12161,creationflags
12162,CREATE_NEW_CONSOLE
12163,os.devnull
12164,import os
12165,"os.system(""your command"")"
12166,subprocess
12167,"subprocess.call(['ping', 'localhost'])"
12168,subprocess
12169,shell=False
12170,shlex.split
12171,import os
12172,cmd = 'ls -al'
12173,os.system(cmd)
12174,os.popen
12175,ls -l
12176,"subprocess.run([""ls"", ""-l""]) # Run command"
12177,"subprocess.run([""ls"", ""-l""], stdout=subprocess.PIPE) # This will run the command and return any output"
12178,"subprocess.run(shlex.split(""ls -l"")) # You can also use the shlex library to split the command"
12179,os.system
12180,os.popen
12181,subprocess.run
12182,"os.system(""ls -l"") # Run command"
12183,"os.popen(""ls -l"").read() # This will run the command and return any output"
12184,"sh.ls(""-l"") # Run command normally"
12185,"ls_cmd = sh.Command(""ls"") # Save command as a variable"
12186,ls_cmd() # Run command as if it were a function
12187,sh
12188,"ls_cmd = plumbum.local(""ls -l"") # Get command"
12189,ls_cmd() # Run command
12190,"pexpect.run(""ls -l"") # Run command as normal"
12191,child = pexpect.spawn('scp foo user@example.com:.') # Spawns child application
12192,child.expect('Password:') # When this is the output
12193,child.sendline('mypassword')
12194,fabric.operations.local('ls -l') # Run command as normal
12195,"fabric.operations.local('ls -l', capture = True) # Run command and receive output"
12196,subprocess
12197,"r = envoy.run(""ls -l"") # Run command"
12198,r.std_out # Get output
12199,commands
12200,os.popen
12201,subprocess
12202,import subprocess
12203,"subprocess.run(['ls', '-l'])"
12204,run
12205,call
12206,subprocess
12207,import shlex
12208,import subprocess
12209,subprocess.run(shlex.split('ls -l'))
12210,from plumbum.cmd import ifconfig
12211,print(ifconfig['wlan0']())
12212,subprocess
12213,pip install plumbum
12214,from sh import ifconfig
12215,print(ifconfig('wlan0'))
12216,sh
12217,pip install sh
12218,fabric
12219,from fabric.operations import local
12220,"result = local('ls', capture=True)"
12221,"print ""Content:/n%s"" % (result, )"
12222,sh
12223,from sh import vgdisplay
12224,print vgdisplay()
12225,print vgdisplay('-v')
12226,print vgdisplay(v=True)
12227,child = pexpect.spawn('ftp 192.168.0.24')
12228,
12229,child.expect('(?i)name .*: ')
12230,
12231,child.sendline('anonymous')
12232,
12233,child.expect('(?i)password')
12234,">>> subprocess.check_output([""ls"", ""-l"", ""/dev/null""])"
12235,"'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'"
12236,True
12237,glob
12238,fnmatch
12239,os.walk()
12240,os.path.expandvars()
12241,os.path.expanduser()
12242,shutil
12243,check_output
12244,"subprocess.check_output(""ls -l /dev/null"".split())"
12245,shell=True
12246,.split()
12247,shlex.split()
12248,subprocess.run
12249,">>> subprocess.run([""ls"", ""-l""])  # Doesn't capture output"
12250,"CompletedProcess(args=['ls', '-l'], returncode=0)"
12251,">>> subprocess.run(""exit 1"", shell=True, check=True)"
12252,Traceback (most recent call last):
12253,  ...
12254,subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1
12255,">>> subprocess.run([""ls"", ""-l"", ""/dev/null""], stdout=subprocess.PIPE)"
12256,"CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,"
12257,"stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n')"
12258,">>> r = envoy.run('git config', data='data to pipe in', timeout=2)"
12259,
12260,>>> r.status_code
12261,129
12262,>>> r.std_out
12263,'usage: git config [options]'
12264,>>> r.std_err
12265,''
12266,>>> r = envoy.run('uptime | pbcopy')
12267,
12268,>>> r.command
12269,'pbcopy'
12270,>>> r.status_code
12271,0
12272,
12273,>>> r.history
12274,[<Response 'uptime'>]
12275,"from subprocess import Popen, PIPE"
12276,"cmd = ""ls -l ~/"""
12277,"p = Popen(cmd , shell=True, stdout=PIPE, stderr=PIPE)"
12278,"out, err = p.communicate()"
12279,"print ""Return code: "", p.returncode"
12280,"print out.rstrip(), err.rstrip()"
12281,subprocess.run
12282,CompletedProcess
12283,>>> from subprocess import run
12284,>>> from shlex import split
12285,>>> completed_process = run(split('python --version'))
12286,Python 3.8.8
12287,>>> completed_process
12288,"CompletedProcess(args=['python', '--version'], returncode=0)"
12289,run
12290,split
12291,>>> from subprocess import run
12292,>>> from shlex import split
12293,>>> completed_process = run(split('python --version'))
12294,Python 3.8.8
12295,>>> completed_process
12296,"CompletedProcess(args=['python', '--version'], returncode=0)"
12297,run
12298,CompletedProcess
12299,TimeoutExpired
12300,timeout=
12301,CalledProcessError
12302,check=True
12303,>>> completed_process.args
12304,"['python', '--version']"
12305,>>> completed_process.returncode
12306,0
12307,subprocess.PIPE
12308,stderr
12309,stdout
12310,>>> from subprocess import PIPE
12311,">>> completed_process = run(shlex.split('python --version'), stdout=PIPE, stderr=PIPE)"
12312,>>> completed_process.stdout
12313,b'Python 3.8.8\n'
12314,>>> completed_process.stderr
12315,b''
12316,>>> import textwrap
12317,">>> args = ['python', textwrap.__file__]"
12318,">>> cp = run(args, stdout=subprocess.PIPE)"
12319,>>> cp.stdout
12320,b'Hello there.\n  This is indented.\n'
12321,args
12322,help(run)
12323,"def run(*popenargs, input=None, timeout=None, check=False, **kwargs):"
12324,popenargs
12325,kwargs
12326,Popen
12327,input
12328,universal_newlines=True
12329,timeout=
12330,check=True
12331,check=True
12332,">>> subprocess.run(""exit 1"", shell=True, check=True)"
12333,Traceback (most recent call last):
12334,  ...
12335,subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1
12336,"subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, "
12337,"shell=False, cwd=None, timeout=None, check=False, encoding=None, "
12338,errors=None)
12339,Popen
12340,Popen
12341,poll
12342,Popen
12343,help(Popen)
12344,"def __init__(self, args, bufsize=-1, executable=None,"
12345,"             stdin=None, stdout=None, stderr=None,"
12346,"             preexec_fn=None, close_fds=True,"
12347,"             shell=False, cwd=None, env=None, universal_newlines=None,"
12348,"             startupinfo=None, creationflags=0,"
12349,"             restore_signals=True, start_new_session=False,"
12350,"             pass_fds=(), *, user=None, group=None, extra_groups=None,"
12351,"             encoding=None, errors=None, text=None, umask=-1, pipesize=-1):"
12352,Popen
12353,"subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, "
12354,"stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None,"
12355,"env=None, universal_newlines=None, startupinfo=None, creationflags=0, "
12356,"restore_signals=True, start_new_session=False, pass_fds=(), *, group=None, "
12357,"extra_groups=None, user=None, umask=-1, encoding=None, errors=None, "
12358,text=None)
12359,Popen
12360,import os
12361,os.system('cat testfile')
12362,os.system
12363,subprocess
12364,subprocess
12365,os.system
12366,subprocess
12367,os.system(...)
12368,subprocess
12369,import subprocess
12370,"subprocess.run(""ls -a"", shell=True)"
12371,import subprocess
12372,"subprocess.run([""help""])"
12373,"subprocess.run([""ls"", ""-a""])"
12374,"\"""
12375,import subprocess
12376,"result = subprocess.run([""ls"", ""-a""], capture_output=True, text=True)"
12377,"if ""stackoverflow-logo.png"" in result.stdout:"
12378,"    print(""You're a fan!"")"
12379,else:
12380,"    print(""You're not a fan?"")"
12381,result.stdout
12382,result.stderr
12383,capture_output=True
12384,result.stderr
12385,result.stdout
12386,None
12387,text=True
12388,"if result.returncode == 127: print(""The program failed for some weird reason"")"
12389,"elif result.returncode == 0: print(""The program succeeded"")"
12390,"else: print(""The program failed unexpectedly"")"
12391,result.check_returncode()
12392,check
12393,"result = subprocess.run(..., check=True)"
12394,"result = subprocess.run(..., stderr=subprocess.STDOUT)"
12395,result.stderr
12396,None
12397,result.stdout
12398,shell=False
12399,import subprocess
12400,import shlex
12401,"subprocess.run(shlex.split(""ls -a""))"
12402,shell=True
12403,"[""ls"", ""-a""]"
12404,shell=True
12405,capture_output=True
12406,text=True
12407,shell=True
12408,os.system(...)
12409,shell=True
12410,Preferred Way
12411,os.system(...)
12412,shell=True
12413,""""
12414,os.system(...)
12415,shell=True
12416,>>> from plumbum import local
12417,">>> ls = local[""ls""]"
12418,>>> ls
12419,LocalCommand(<LocalPath /bin/ls>)
12420,>>> ls()
12421,u'build.py\ndist\ndocs\nLICENSE\nplumbum\nREADME.rst\nsetup.py\ntests\ntodo.txt\n'
12422,">>> notepad = local[""c:\\windows\\notepad.exe""]"
12423,>>> notepad()                                   # Notepad window pops up
12424,"u''                                             # Notepad window is closed by user, command returns"
12425,import os
12426,
12427,cmd = 'ls -al'
12428,
12429,os.system(cmd)
12430,os
12431,import os
12432,"cmd = ""your command"""
12433,os.system(cmd)
12434,os.system
12435,subprocess
12436,subprocess.Popen
12437,"os.system(""kwrite"")"
12438,os.system(konsole -e kwrite)
12439,subprocess
12440,os.system
12441,subprocess.call
12442,subprocess.check_call
12443,">>> import subprocess, shlex"
12444,">>> command = 'ls -l ""/your/path/with spaces/""'"
12445,>>> call_params = shlex.split(command)
12446,>>> print call_params
12447,"[""ls"", ""-l"", ""/your/path/with spaces/""]"
12448,>>> subprocess.call(call_params)
12449,"ex('echo hello shell.py') | ""awk '{print $2}'"""
12450,subprocess
12451,subprocess.Popen()
12452,subprocess.Popen().communicate()
12453,subprocess.Popen().wait()
12454,# Python script to run a command line
12455,import subprocess
12456,
12457,def execute(cmd):
12458,"    """""""
12459,        Purpose  : To execute a command and return exit status
12460,        Argument : cmd - command to execute
12461,        Return   : exit_code
12462,"    """""""
12463,"    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
12464,"    (result, error) = process.communicate()"
12465,
12466,    rc = process.wait()
12467,
12468,    if rc != 0:
12469,"        print ""Error: failed to execute command:"", cmd"
12470,        print error
12471,    return result
12472,# def
12473,
12474,"command = ""tasklist | grep python"""
12475,"print ""This process detail: \n"", execute(command)"
12476,This process detail:
12477,"python.exe                     604 RDP-Tcp#0                  4      5,660 K"
12478,import os
12479,os.system('ts <your-command>')
12480,ts
12481,ts -S <number-of-slots>
12482,ts
12483,make
12484,ts
12485,at
12486,batch
12487,os.system()
12488,subprocess
12489,>>> from invoke import run
12490,">>> cmd = ""pip install -r requirements.txt"""
12491,">>> result = run(cmd, hide=True, warn=True)"
12492,>>> print(result.ok)
12493,True
12494,>>> print(result.stdout.splitlines()[-1])
12495,Successfully installed invocations-0.13.0 pep8-1.5.7 spec-1.3.1
12496,invoke
12497,subprocess
12498,requests
12499,urllib3
12500,from subprocess import Popen
12501,
12502,"proc = Popen(['ls', '-l'])"
12503,if proc.poll() is None:
12504,    proc.kill()
12505,">>> x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12506,">>> {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}"
12507,"{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
12508,">>> dict(sorted(x.items(), key=lambda item: item[1]))"
12509,"{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
12510,import operator
12511,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12512,"sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
12513,sorted_x
12514,dict(sorted_x) == x
12515,import operator
12516,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12517,"sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
12518,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12519,"sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
12520,collections.OrderedDict
12521,import collections
12522,
12523,sorted_dict = collections.OrderedDict(sorted_x)
12524,sorted_x.reverse()
12525,sorted()
12526,reverse=True
12527,"sorted(d.items(), key=lambda x: x[1])"
12528,key=lambda item :item[1]
12529,item[1]
12530,x.items()
12531,item[1]
12532,"sorted(dict1, key=dict1.get)"
12533,from collections import defaultdict
12534,d = defaultdict(int)
12535,for w in text.split():
12536,    d[w] += 1
12537,"sorted(d, key=d.get)"
12538,"for w in sorted(d, key=d.get, reverse=True):"
12539,"    print(w, d[w])"
12540,key=operator.itemgetter(1)
12541,key=d.get
12542,"sorted_keys = sorted(d.items(), key=itemgetter(1), reverse=True)"
12543,"for key, val in sorted_keys: print ""%s: %d"" % (key, val)"
12544,collections.Counter
12545,most_common
12546,"sorted(d.items(), key=lambda x: x[1])"
12547,reverse=True
12548,"sorted(d.items(), key=lambda x: x[1], reverse=True)"
12549,"d = {'one':1,'three':3,'five':5,'two':2,'four':4}"
12550,"a = sorted(d.items(), key=lambda x: x[1])    "
12551,print(a)
12552,"[('one', 1), ('two', 2), ('three', 3), ('four', 4), ('five', 5)]"
12553,"key=lambda (k, v): v"
12554,"(k,v)"
12555,"(k, v)"
12556,OrderedDict()
12557,sorted(d.values())
12558,from operator import itemgetter
12559,"sorted(d.items(), key=itemgetter(1))"
12560,">>> d = {""third"": 3, ""first"": 1, ""fourth"": 4, ""second"": 2}"
12561,
12562,">>> for k, v in d.items():"
12563,"...     print ""%s: %s"" % (k, v)"
12564,...
12565,second: 2
12566,fourth: 4
12567,third: 3
12568,first: 1
12569,
12570,>>> d
12571,"{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}"
12572,>>> from collections import OrderedDict
12573,">>> d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))"
12574,">>> for k, v in d_sorted_by_value.items():"
12575,"...     print ""%s: %s"" % (k, v)"
12576,...
12577,first: 1
12578,second: 2
12579,third: 3
12580,fourth: 4
12581,
12582,>>> d_sorted_by_value
12583,"OrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])"
12584,"sorted(d.items(), key=lambda x: x[1])"
12585,x
12586,x[1]
12587,x[0]
12588,d.items()
12589,"(key, value)"
12590,[0]
12591,[1]
12592,dict
12593,OrderedDict
12594,dict
12595,OrderedDict
12596,dict
12597,move_to_end
12598,popitem
12599,dict
12600,dict
12601,from operator import itemgetter
12602,from collections import OrderedDict
12603,
12604,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12605,"sorted_x = OrderedDict(sorted(x.items(), key=itemgetter(1)))"
12606,"# OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])"
12607,# regular unsorted dictionary
12608,"d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}"
12609,
12610,# dictionary sorted by value
12611,"OrderedDict(sorted(d.items(), key=lambda t: t[1]))"
12612,"# OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])"
12613,"sorted([(value,key) for (key,value) in mydict.items()])"
12614,"sorted((value,key) for (key,value) in mydict.items())"
12615,"[(key, value) for (value, key) in sorted_list_of_tuples]"
12616,sorted
12617,([])
12618,"{x: v for x, v in sorted((value, key) for (key, value) in mydict.items())}"
12619,"SELECT a_key, a_value FROM a_table ORDER BY a_value;"
12620,"k_seq = ('foo', 'bar', 'baz')"
12621,"v_seq = (0, 1, 42)"
12622,"ordered_map = dict(zip(k_seq, v_seq))"
12623,"for k, v in ordered_map.items():"
12624,"    print(k, v)"
12625,foo 0
12626,bar 1
12627,baz 42
12628,bar 1
12629,foo 0
12630,baz 42
12631,dict
12632,collections.OrderedDict
12633,OrderedDict
12634,ImportError
12635,OrderedDict
12636,import collections
12637,"Player = collections.namedtuple('Player', 'score name')"
12638,"d = {'John':5, 'Alex':10, 'Richard': 7}"
12639,"worst = sorted(Player(v,k) for (k,v) in d.items())"
12640,"best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)"
12641,player = best[1]
12642,player.name
12643,    'Richard'
12644,player.score
12645,    7
12646,"WantedOutput = sorted(MyDict, key=lambda x : MyDict[x]) "
12647,Counter
12648,from collections import Counter
12649,
12650,"x = {'hello': 1, 'python': 5, 'world': 3}"
12651,c = Counter(x)
12652,print(c.most_common())
12653,
12654,">> [('python', 5), ('world', 3), ('hello', 1)]    "
12655,"Counter({'hello':1, 'python':5, 'world':300}).most_common()"
12656,"[('world', 300), ('python', 5), ('hello', 1)]"
12657,from collections import OrderedDict
12658,# regular unsorted dictionary
12659,"d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}"
12660,
12661,# dictionary sorted by key
12662,"OrderedDict(sorted(d.items(), key=lambda t: t[0]))"
12663,"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])"
12664,
12665,# dictionary sorted by value
12666,"OrderedDict(sorted(d.items(), key=lambda t: t[1]))"
12667,"OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])"
12668,import operator
12669,origin_list = [
12670,"    {""name"": ""foo"", ""rank"": 0, ""rofl"": 20000},"
12671,"    {""name"": ""Silly"", ""rank"": 15, ""rofl"": 1000},"
12672,"    {""name"": ""Baa"", ""rank"": 300, ""rofl"": 20},"
12673,"    {""name"": ""Zoo"", ""rank"": 10, ""rofl"": 200},"
12674,"    {""name"": ""Penguin"", ""rank"": -1, ""rofl"": 10000}"
12675,]
12676,"print "">> Original >>"""
12677,for foo in origin_list:
12678,    print foo
12679,
12680,"print ""\n>> Rofl sort >>"""
12681,"for foo in sorted(origin_list, key=operator.itemgetter(""rofl"")):"
12682,    print foo
12683,
12684,"print ""\n>> Rank sort >>"""
12685,"for foo in sorted(origin_list, key=operator.itemgetter(""rank"")):"
12686,    print foo
12687,"{'name': 'foo', 'rank': 0, 'rofl': 20000}"
12688,"{'name': 'Silly', 'rank': 15, 'rofl': 1000}"
12689,"{'name': 'Baa', 'rank': 300, 'rofl': 20}"
12690,"{'name': 'Zoo', 'rank': 10, 'rofl': 200}"
12691,"{'name': 'Penguin', 'rank': -1, 'rofl': 10000}"
12692,"{'name': 'Baa', 'rank': 300, 'rofl': 20}"
12693,"{'name': 'Zoo', 'rank': 10, 'rofl': 200}"
12694,"{'name': 'Silly', 'rank': 15, 'rofl': 1000}"
12695,"{'name': 'Penguin', 'rank': -1, 'rofl': 10000}"
12696,"{'name': 'foo', 'rank': 0, 'rofl': 20000}"
12697,"{'name': 'Penguin', 'rank': -1, 'rofl': 10000}"
12698,"{'name': 'foo', 'rank': 0, 'rofl': 20000}"
12699,"{'name': 'Zoo', 'rank': 10, 'rofl': 200}"
12700,"{'name': 'Silly', 'rank': 15, 'rofl': 1000}"
12701,"{'name': 'Baa', 'rank': 300, 'rofl': 20}"
12702,"mydict = {'carl':40,"
12703,"          'alan':2,"
12704,"          'bob':1,"
12705,          'danny':3}
12706,for key in sorted(mydict.iterkeys()):
12707,"    print ""%s: %s"" % (key, mydict[key])"
12708,alan: 2
12709,bob: 1
12710,carl: 40
12711,danny: 3
12712,"for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):"
12713,"    print ""%s: %s"" % (key, value)"
12714,bob: 1
12715,alan: 2
12716,danny: 3
12717,carl: 40
12718,"for key, value in sorted(mydict.iteritems(), key=lambda (k,v): v[""score""]):"
12719,dict
12720,">>> words = {""python"": 2, ""blah"": 4, ""alice"": 3}"
12721,">>> dict(sorted(words.items(), key=lambda x: x[1]))"
12722,"{'python': 2, 'alice': 3, 'blah': 4}"
12723,OrderedDict
12724,"dict(sorted(words.items(), key=lambda x: x[1], reverse=True))"
12725,from collections import defaultdict
12726,inverse= defaultdict( list )
12727,"for k, v in originalDict.items():"
12728,    inverse[v].append( k )
12729,for k in sorted(inverse):
12730,"    print k, inverse[k]"
12731,">>> x = {1: 2, 3: 4, 4:3, 2:1, 0:0}"
12732,>>> from collections import Counter
12733,>>> #To sort in reverse order
12734,>>> Counter(x).most_common()
12735,"[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]"
12736,>>> #To sort in ascending order
12737,>>> Counter(x).most_common()[::-1]
12738,"[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]"
12739,>>> #To get a dictionary sorted by values
12740,>>> from collections import OrderedDict
12741,>>> OrderedDict(Counter(x).most_common()[::-1])
12742,"OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])"
12743,">>> data = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12744,>>> SkipDict(data)
12745,"{0: 0.0, 2: 1.0, 1: 2.0, 4: 3.0, 3: 4.0}"
12746,keys()
12747,values()
12748,items()
12749,from collections import Counter
12750,
12751,"x = {'hello':1, 'python':5, 'world':3}"
12752,c=Counter(x)
12753,print( c.most_common() )
12754,
12755,
12756,">> [('python', 5), ('world', 3), ('hello', 1)]"
12757,def dict_val(x):
12758,    return x[1]
12759,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}"
12760,"sorted_x = sorted(x.items(), key=dict_val)"
12761,OrderedDict
12762,from collections import OrderedDict
12763,"a = OrderedDict(sorted(originalDict.items(), key=lambda x: x[1]))"
12764,OrderedDict
12765,def gen(originalDict):
12766,"    for x, y in sorted(zip(originalDict.keys(), originalDict.values()), key=lambda z: z[1]):"
12767,"        yield (x, y)"
12768,"    #Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. "
12769,
12770,"for bleh, meh in gen(myDict):"
12771,"    if bleh == ""foo"":"
12772,        print(myDict[bleh])
12773,"for bleh, meh in gen(myDict):"
12774,"    print(bleh, meh)"
12775,from django.utils.datastructures import SortedDict
12776,
12777,"def sortedDictByKey(self,data):"
12778,"    """"""Sorted dictionary order by key"""""""
12779,    sortedDict = SortedDict()
12780,    if data:
12781,"        if isinstance(data, dict):"
12782,            sortedKey = sorted(data.keys())
12783,            for k in sortedKey:
12784,                sortedDict[k] = data[k]
12785,    return sortedDict
12786,d.values()
12787,d.keys()
12788,"d = {'key1': 874.7, 'key2': 5, 'key3': 8.1}"
12789,
12790,"d_sorted = sorted(zip(d.values(), d.keys()))"
12791,
12792,print d_sorted 
12793,"# prints: [(5, 'key2'), (8.1, 'key3'), (874.7, 'key1')]"
12794,12
12795,20
12796,num_as_num
12797,"def sort_iterable(iterable, sort_on=None, reverse=False, num_as_num=False):"
12798,    def _sort(i):
12799,"      # sort by 0 = keys, 1 values, None for lists and tuples"
12800,      try:
12801,        if num_as_num:
12802,          if i is None:
12803,"            _sorted = sorted(iterable, key=lambda v: float(v), reverse=reverse)"
12804,          else:
12805,"            _sorted = dict(sorted(iterable.items(), key=lambda v: float(v[i]), reverse=reverse))"
12806,        else:
12807,          raise TypeError
12808,"      except (TypeError, ValueError):"
12809,        if i is None:
12810,"          _sorted = sorted(iterable, key=lambda v: str(v), reverse=reverse)"
12811,        else:
12812,"          _sorted = dict(sorted(iterable.items(), key=lambda v: str(v[i]), reverse=reverse))"
12813,      
12814,      return _sorted
12815,      
12816,"    if isinstance(iterable, list):"
12817,      sorted_list = _sort(None)
12818,      return sorted_list
12819,"    elif isinstance(iterable, tuple):"
12820,      sorted_list = tuple(_sort(None))
12821,      return sorted_list
12822,"    elif isinstance(iterable, dict):"
12823,      if sort_on == 'keys':
12824,        sorted_dict = _sort(0)
12825,        return sorted_dict
12826,      elif sort_on == 'values':
12827,        sorted_dict = _sort(1)
12828,        return sorted_dict
12829,      elif sort_on is not None:
12830,"        raise ValueError(f""Unexpected value {sort_on} for sort_on. When sorting a dict, use key or values"")"
12831,    else:
12832,"      raise TypeError(f""Unexpected type {type(iterable)} for iterable. Expected a list, tuple, or dict"")"
12833,#Assume dictionary to be:
12834,"d = {'apple': 500.1, 'banana': 1500.2, 'orange': 1.0, 'pineapple': 789.0}"
12835,
12836,# create a temporary list
12837,tmp = []
12838,
12839,# iterate through the dictionary and append each tuple into the temporary list 
12840,"for key, value in d.items():"
12841,"    tmptuple = (value, key)"
12842,    tmp.append(tmptuple)
12843,
12844,# sort the list in ascending order
12845,tmp = sorted(tmp)
12846,
12847,print (tmp)
12848,"tmp = sorted(tmp, reverse=True)"
12849,#Assuming the dictionary looks like
12850,"d = {'apple': 500.1, 'banana': 1500.2, 'orange': 1.0, 'pineapple': 789.0}"
12851,#One liner for sorting in ascending order
12852,"print (sorted([(v, k) for k, v in d.items()]))"
12853,#One liner for sorting in descending order
12854,"print (sorted([(v, k) for k, v in d.items()], reverse=True))"
12855,#Asending order
12856,"[(1.0, 'orange'), (500.1, 'apple'), (789.0, 'pineapple'), (1500.2, 'banana')]"
12857,#Descending order
12858,"[(1500.2, 'banana'), (789.0, 'pineapple'), (500.1, 'apple'), (1.0, 'orange')]"
12859,from dicts.sorteddict import ValueSortedDict
12860,"d = {1: 2, 3: 4, 4:3, 2:1, 0:0}"
12861,sorted_dict = ValueSortedDict(d)
12862,print sorted_dict.items() 
12863,
12864,"[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]"
12865,$ python --version
12866,Python 3.2.2
12867,
12868,$ cat sort_dict_by_val_desc.py 
12869,"dictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)"
12870,"for word in sorted(dictionary, key=dictionary.get, reverse=True):"
12871,"  print(word, dictionary[word])"
12872,
12873,$ python sort_dict_by_val_desc.py 
12874,aina 5
12875,tuli 4
12876,joka 3
12877,sana 2
12878,siis 1
12879,collections.Counter
12880,dict
12881,most_common
12882,import operator
12883,"slovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)"
12884,print(slovar_sorted)
12885,">>> x = {1: 2, 3: 4, 4:3, 2:1, 0:0}"
12886,>>> x_items = x.items()
12887,>>> heapq.heapify(x_items)
12888,>>> #To sort in reverse order
12889,">>> heapq.nlargest(len(x_items),x_items, operator.itemgetter(1))"
12890,"[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]"
12891,>>> #To sort in ascending order
12892,">>> heapq.nsmallest(len(x_items),x_items, operator.itemgetter(1))"
12893,"[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]"
12894,yield
12895,"def _get_child_candidates(self, distance, min_dist, max_dist):"
12896,    if self._leftchild and distance - max_dist < self._median:
12897,        yield self._leftchild
12898,    if self._rightchild and distance + max_dist >= self._median:
12899,        yield self._rightchild  
12900,"result, candidates = [], [self]"
12901,while candidates:
12902,    node = candidates.pop()
12903,    distance = node._get_dist(obj)
12904,    if distance <= max_dist and distance >= min_dist:
12905,        result.extend(node._values)
12906,"    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))"
12907,return result
12908,_get_child_candidates
12909,yield
12910,">>> mylist = [1, 2, 3]"
12911,>>> for i in mylist:
12912,...    print(i)
12913,1
12914,2
12915,3
12916,mylist
12917,>>> mylist = [x*x for x in range(3)]
12918,>>> for i in mylist:
12919,...    print(i)
12920,0
12921,1
12922,4
12923,for... in...
12924,lists
12925,strings
12926,>>> mygenerator = (x*x for x in range(3))
12927,>>> for i in mygenerator:
12928,...    print(i)
12929,0
12930,1
12931,4
12932,()
12933,[]
12934,for i in mygenerator
12935,yield
12936,return
12937,>>> def create_generator():
12938,...    mylist = range(3)
12939,...    for i in mylist:
12940,...        yield i*i
12941,...
12942,>>> mygenerator = create_generator() # create a generator
12943,>>> print(mygenerator) # mygenerator is an object!
12944,<generator object create_generator at 0xb7555c34>
12945,>>> for i in mygenerator:
12946,...     print(i)
12947,0
12948,1
12949,4
12950,yield
12951,for
12952,for
12953,yield
12954,yield
12955,"""if/else"""
12956,# Here you create the method of the node object that will return the generator
12957,"def _get_child_candidates(self, distance, min_dist, max_dist):"
12958,
12959,    # Here is the code that will be called each time you use the generator object:
12960,
12961,    # If there is still a child of the node object on its left
12962,"    # AND if the distance is ok, return the next child"
12963,    if self._leftchild and distance - max_dist < self._median:
12964,        yield self._leftchild
12965,
12966,    # If there is still a child of the node object on its right
12967,"    # AND if the distance is ok, return the next child"
12968,    if self._rightchild and distance + max_dist >= self._median:
12969,        yield self._rightchild
12970,
12971,"    # If the function arrives here, the generator will be considered empty"
12972,    # there is no more than two values: the left and the right children
12973,# Create an empty list and a list with the current object reference
12974,"result, candidates = list(), [self]"
12975,
12976,# Loop on candidates (they contain only one element at the beginning)
12977,while candidates:
12978,
12979,    # Get the last candidate and remove it from the list
12980,    node = candidates.pop()
12981,
12982,    # Get the distance between obj and the candidate
12983,    distance = node._get_dist(obj)
12984,
12985,"    # If distance is ok, then you can fill the result"
12986,    if distance <= max_dist and distance >= min_dist:
12987,        result.extend(node._values)
12988,
12989,    # Add the children of the candidate in the candidate's list
12990,    # so the loop will keep running until it will have looked
12991,"    # at all the children of the children of the children, etc. of the candidate"
12992,"    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))"
12993,
12994,return result
12995,"candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))"
12996,while
12997,extend()
12998,">>> a = [1, 2]"
12999,">>> b = [3, 4]"
13000,>>> a.extend(b)
13001,>>> print(a)
13002,"[1, 2, 3, 4]"
13003,">>> class Bank(): # Let's create a bank, building ATMs"
13004,...    crisis = False
13005,...    def create_atm(self):
13006,...        while not self.crisis:
13007,"...            yield ""$100"""
13008,>>> hsbc = Bank() # When everything's ok the ATM gives you as much as you want
13009,>>> corner_street_atm = hsbc.create_atm()
13010,>>> print(corner_street_atm.next())
13011,$100
13012,>>> print(corner_street_atm.next())
13013,$100
13014,>>> print([corner_street_atm.next() for cash in range(5)])
13015,"['$100', '$100', '$100', '$100', '$100']"
13016,">>> hsbc.crisis = True # Crisis is coming, no more money!"
13017,>>> print(corner_street_atm.next())
13018,<type 'exceptions.StopIteration'>
13019,>>> wall_street_atm = hsbc.create_atm() # It's even true for new ATMs
13020,>>> print(wall_street_atm.next())
13021,<type 'exceptions.StopIteration'>
13022,">>> hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty"
13023,>>> print(corner_street_atm.next())
13024,<type 'exceptions.StopIteration'>
13025,>>> brand_new_atm = hsbc.create_atm() # Build a new one to get back in business
13026,>>> for cash in brand_new_atm:
13027,...    print cash
13028,$100
13029,$100
13030,$100
13031,$100
13032,$100
13033,$100
13034,$100
13035,$100
13036,$100
13037,...
13038,print(corner_street_atm.__next__())
13039,print(next(corner_street_atm))
13040,Map / Zip
13041,import itertools
13042,">>> horses = [1, 2, 3, 4]"
13043,>>> races = itertools.permutations(horses)
13044,>>> print(races)
13045,<itertools.permutations object at 0xb754f1dc>
13046,>>> print(list(itertools.permutations(horses)))
13047,"[(1, 2, 3, 4),"
13048," (1, 2, 4, 3),"
13049," (1, 3, 2, 4),"
13050," (1, 3, 4, 2),"
13051," (1, 4, 2, 3),"
13052," (1, 4, 3, 2),"
13053," (2, 1, 3, 4),"
13054," (2, 1, 4, 3),"
13055," (2, 3, 1, 4),"
13056," (2, 3, 4, 1),"
13057," (2, 4, 1, 3),"
13058," (2, 4, 3, 1),"
13059," (3, 1, 2, 4),"
13060," (3, 1, 4, 2),"
13061," (3, 2, 1, 4),"
13062," (3, 2, 4, 1),"
13063," (3, 4, 1, 2),"
13064," (3, 4, 2, 1),"
13065," (4, 1, 2, 3),"
13066," (4, 1, 3, 2),"
13067," (4, 2, 1, 3),"
13068," (4, 2, 3, 1),"
13069," (4, 3, 1, 2),"
13070," (4, 3, 2, 1)]"
13071,__iter__()
13072,__next__()
13073,for
13074,yield
13075,yield
13076,yield
13077,yield
13078,yield
13079,()
13080,[]
13081,()
13082,return
13083,return
13084,yield
13085,yield
13086,yield
13087,result = []
13088,yield expr
13089,result.append(expr)
13090,return result
13091,yield
13092,yield
13093,for x in mylist:
13094,    ...loop body...
13095,mylist
13096,iter(mylist)
13097,next()
13098,__next__()
13099,next()
13100,next()
13101,x
13102,StopIteration
13103,next()
13104,otherlist.extend(mylist)
13105,otherlist
13106,mylist
13107,__iter__()
13108,next()
13109,__iter__()
13110,next()
13111,__iter__()
13112,self
13113,__iter__()
13114,for
13115,next()
13116,yield
13117,def f123():
13118,    yield 1
13119,    yield 2
13120,    yield 3
13121,
13122,for item in f123():
13123,    print item
13124,yield
13125,return
13126,f123()
13127,f123()
13128,f123()
13129,for
13130,yield
13131,yield
13132,StopIteration
13133,__iter__()
13134,next()
13135,for
13136,next()
13137,__next__()
13138,next()
13139,send
13140,otherlist.extend(mylist)
13141,extend()
13142,otherlist.extend(mylist)
13143,TypeError
13144,extend()
13145,None
13146,None
13147,mylist
13148,otherlist
13149,otherlist.extend(mylist)
13150,next()
13151,def some_function():
13152,    for i in xrange(4):
13153,        yield i
13154,
13155,for i in some_function():
13156,    print i
13157,class it:
13158,    def __init__(self):
13159,        # Start at -1 so that we get 0 when we add 1 below.
13160,        self.count = -1
13161,
13162,    # The __iter__ method will be called once by the 'for' loop.
13163,    # The rest of the magic happens on the object returned by this method.
13164,    # In this case it is the object itself.
13165,    def __iter__(self):
13166,        return self
13167,
13168,    # The next method will be called repeatedly by the 'for' loop
13169,    # until it raises StopIteration.
13170,    def next(self):
13171,        self.count += 1
13172,        if self.count < 4:
13173,            return self.count
13174,        else:
13175,            # A StopIteration exception is raised
13176,            # to signal that the iterator is done.
13177,            # This is caught implicitly by the 'for' loop.
13178,            raise StopIteration
13179,
13180,def some_func():
13181,    return it()
13182,
13183,for i in some_func():
13184,    print i
13185,for
13186,iterator = some_func()
13187,try:
13188,    while 1:
13189,        print iterator.next()
13190,except StopIteration:
13191,    pass
13192,__getitem__
13193,__iter__
13194,"class it: pass; it.__getitem__ = lambda self, i: i*10 if i < 10 else [][0]; for i in it(): print(i)"
13195,iterator = some_function()
13196,iterator
13197,next()
13198,__next__()
13199,for
13200,__iter__
13201,iterator
13202,it
13203,__iter__
13204,__next__
13205,yield
13206,yield
13207,return
13208,list
13209,set
13210,range
13211,yield
13212,generator = myYieldingFunction(...)  # basically a list (but lazy)
13213,x = list(generator)  # evaluate every element into a list
13214,
13215,   generator
13216,       v
13217,"[x[0], ..., ???]"
13218,
13219,         generator
13220,             v
13221,"[x[0], x[1], ..., ???]"
13222,
13223,               generator
13224,                   v
13225,"[x[0], x[1], x[2], ..., ???]"
13226,
13227,                       StopIteration exception
13228,"[x[0], x[1], x[2]]     done"
13229,yield
13230,next()
13231,StopIteration
13232,makeRange
13233,range
13234,makeRange(n)
13235,def makeRange(n):
13236,"    # return 0,1,2,...,n-1"
13237,    i = 0
13238,    while i < n:
13239,        yield i
13240,        i += 1
13241,
13242,>>> makeRange(5)
13243,<generator object makeRange at 0x19e4aa0>
13244,list()
13245,>>> list(makeRange(5))
13246,"[0, 1, 2, 3, 4]"
13247,# return a list                  #  # return a generator
13248,def makeRange(n):                #  def makeRange(n):
13249,"    """"""return [0,1,2,...,n-1]"""""" #      """"""return 0,1,2,...,n-1"""""""
13250,    TO_RETURN = []               # 
13251,    i = 0                        #      i = 0
13252,    while i < n:                 #      while i < n:
13253,        TO_RETURN += [i]         #          yield i
13254,        i += 1                   #          i += 1
13255,    return TO_RETURN             # 
13256,
13257,>>> makeRange(5)
13258,"[0, 1, 2, 3, 4]"
13259,#                  < ITERABLE >
13260,>>> [x+10 for x in makeRange(5)]
13261,"[10, 11, 12, 13, 14]"
13262,itertools
13263,chain.from_iterable
13264,chain
13265,itertools.count()
13266,"def enumerate(iterable): zip(count(), iterable)"
13267,yield
13268,list(makeRange(5))
13269,>>> x=iter(range(5))
13270,>>> next(x)  # calls x.__next__(); x.next() is deprecated
13271,0
13272,>>> next(x)
13273,1
13274,>>> next(x)
13275,2
13276,>>> next(x)
13277,3
13278,>>> next(x)
13279,4
13280,>>> next(x)
13281,Traceback (most recent call last):
13282,"  File ""<stdin>"", line 1, in <module>"
13283,StopIteration
13284,next()
13285,.__next__()
13286,next()
13287,def interactiveProcedure():
13288,    userResponse = yield makeQuestionWebpage()
13289,"    print('user response:', userResponse)"
13290,    yield 'success'
13291,
13292,coroutine = interactiveProcedure()
13293,webFormData = next(coroutine)  # same as .send(None)
13294,userResponse = serveWebForm(webFormData)
13295,
13296,# ...at some point later on web form submit...
13297,
13298,successStatus = coroutine.send(userResponse)
13299,yield
13300,nextInput = yield nextOutput
13301,yield
13302,next
13303,"[1,2,3]"
13304,"[1,2,3].__iter__()"
13305,> x = myRange(5)
13306,> list(x)
13307,"[0, 1, 2, 3, 4]"
13308,> list(x)
13309,[]
13310,myRange(...)
13311,x = list(myRange(5))
13312,itertools.tee
13313,yield
13314,yield
13315,yield from
13316,return
13317,yield
13318,yield
13319,yield
13320,__iter__
13321,next
13322,__next__
13323,Iterator
13324,collections
13325,>>> def func():
13326,...     yield 'I am'
13327,...     yield 'a generator!'
13328,... 
13329,>>> type(func)                 # A function with yield is still a function
13330,<type 'function'>
13331,>>> gen = func()
13332,>>> type(gen)                  # but it returns a generator
13333,<type 'generator'>
13334,">>> hasattr(gen, '__iter__')   # that's an iterable"
13335,True
13336,">>> hasattr(gen, 'next')       # and with .next (.__next__ in Python 3)"
13337,True                           # implements the iterator protocol.
13338,">>> import collections, types"
13339,">>> issubclass(types.GeneratorType, collections.Iterator)"
13340,True
13341,">>> isinstance(gen, types.GeneratorType)"
13342,True
13343,">>> isinstance(gen, collections.Iterator)"
13344,True
13345,Iterator
13346,>>> list(gen)
13347,"['I am', 'a generator!']"
13348,>>> list(gen)
13349,[]
13350,>>> list(func())
13351,"['I am', 'a generator!']"
13352,def func(an_iterable):
13353,    for item in an_iterable:
13354,        yield item
13355,yield from
13356,def func(an_iterable):
13357,    yield from an_iterable
13358,yield from
13359,yield
13360,received
13361,"def bank_account(deposited, interest_rate):"
13362,    while True:
13363,        calculated_interest = interest_rate * deposited 
13364,        received = yield calculated_interest
13365,        if received:
13366,            deposited += received
13367,
13368,
13369,">>> my_account = bank_account(1000, .05)"
13370,next
13371,next
13372,__next__
13373,>>> first_year_interest = next(my_account)
13374,>>> first_year_interest
13375,50.0
13376,None
13377,next
13378,>>> next_year_interest = my_account.send(first_year_interest + 1000)
13379,>>> next_year_interest
13380,102.5
13381,yield from
13382,yield from
13383,def money_manager(expected_rate):
13384,    # must receive deposited value from .send():
13385,    under_management = yield                   # yield None to start.
13386,    while True:
13387,        try:
13388,            additional_investment = yield expected_rate * under_management 
13389,            if additional_investment:
13390,                under_management += additional_investment
13391,        except GeneratorExit:
13392,            '''TODO: write function to send unclaimed funds to state'''
13393,            raise
13394,        finally:
13395,            '''TODO: write function to mail tax info to client'''
13396,        
13397,
13398,"def investment_account(deposited, manager):"
13399,    '''very simple model of an investment account that delegates to a manager'''
13400,    # must queue up manager:
13401,    next(manager)      # <- same as manager.send(None)
13402,    # This is where we send the initial deposit to the manager:
13403,    manager.send(deposited)
13404,    try:
13405,        yield from manager
13406,    except GeneratorExit:
13407,        return manager.close()  # delegate?
13408,my_manager = money_manager(.06)
13409,"my_account = investment_account(1000, my_manager)"
13410,first_year_return = next(my_account) # -> 60.0
13411,next_year_return = my_account.send(first_year_return + 1000)
13412,next_year_return # 123.6
13413,yield from
13414,close
13415,GeneratorExit
13416,__del__
13417,GeneratorExit
13418,my_account.close()
13419,import sys
13420,try:
13421,    raise ValueError
13422,except:
13423,    my_manager.throw(*sys.exc_info())
13424,Traceback (most recent call last):
13425,"  File ""<stdin>"", line 4, in <module>"
13426,"  File ""<stdin>"", line 6, in money_manager"
13427,"  File ""<stdin>"", line 2, in <module>"
13428,ValueError
13429,yield
13430,yield
13431,__iter__
13432,.next
13433,.__next__
13434,for
13435,StopIteration
13436,yield
13437,.next
13438,next
13439,yield
13440,yield
13441,yield from
13442,yield
13443,expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |
13444,                     ('=' (yield_expr|testlist_star_expr))*)
13445,...
13446,yield_expr: 'yield' [yield_arg]
13447,yield_arg: 'from' test | testlist
13448,yield
13449,return
13450,return
13451,expression_list
13452,return
13453,StopIteration
13454,expression_list
13455,return
13456,return
13457,StopIteration
13458,StopIteration
13459,StopIteration.value
13460,range
13461,Iterator
13462,__iter__
13463,yield
13464,yield
13465,yield
13466,return
13467,yield
13468,get_child_candidates
13469,list.extend
13470,def fib():
13471,"    last, cur = 0, 1"
13472,    while True: 
13473,        yield cur
13474,"        last, cur = cur, last + cur"
13475,for f in fib():
13476,    if some_condition: break
13477,    coolfuncs(f);
13478,>>> def f():
13479,...   yield 1
13480,...   yield 2
13481,...   yield 3
13482,... 
13483,>>> g = f()
13484,>>> for i in g:
13485,...   print(i)
13486,... 
13487,1
13488,2
13489,3
13490,>>> for i in g:
13491,...   print(i)
13492,... 
13493,>>> # Note that this time nothing was printed
13494,def square_list(n):
13495,    the_list = []                         # Replace
13496,    for x in range(n):
13497,        y = x * x
13498,        the_list.append(y)                # these
13499,    return the_list                       # lines
13500,def square_yield(n):
13501,    for x in range(n):
13502,        y = x * x
13503,        yield y                           # with this one.
13504,yield
13505,yield
13506,>>> for square in square_list(4):
13507,...     print(square)
13508,...
13509,0
13510,1
13511,4
13512,9
13513,>>> for square in square_yield(4):
13514,...     print(square)
13515,...
13516,0
13517,1
13518,4
13519,9
13520,next()
13521,return
13522,>>> def squares_all_of_them():
13523,...     x = 0
13524,...     while True:
13525,...         yield x * x
13526,...         x += 1
13527,...
13528,>>> squares = squares_all_of_them()
13529,>>> for _ in range(4):
13530,...     print(next(squares))
13531,...
13532,0
13533,1
13534,4
13535,9
13536,list()
13537,>>> list(square_yield(4))
13538,"[0, 1, 4, 9]"
13539,yield
13540,def get_odd_numbers(i):
13541,"    return range(1, i, 2)"
13542,def yield_odd_numbers(i):
13543,"    for x in range(1, i, 2):"
13544,       yield x
13545,foo = get_odd_numbers(10)
13546,bar = yield_odd_numbers(10)
13547,foo
13548,"[1, 3, 5, 7, 9]"
13549,bar
13550,<generator object yield_odd_numbers at 0x1029c6f50>
13551,bar.next()
13552,1
13553,bar.next()
13554,3
13555,bar.next()
13556,5
13557,foo
13558,bar
13559,for
13560,range
13561,__repr__
13562,__str__
13563,"range(1, 10, 2)"
13564,yield
13565,call/cc
13566,def save_file(filename):
13567,  def write_file_continuation():
13568,    write_stuff_to_file(filename)
13569,
13570,  check_if_file_exists_and_user_wants_to_overwrite(write_file_continuation)
13571,def f():
13572,  while True:
13573,    yield 4
13574,for x in collection: do_something(x)
13575,yield
13576,next
13577,class Generator():
13578,"  def __init__(self,iterable,generatorfun):"
13579,    self.next_continuation = lambda:generatorfun(iterable)
13580,
13581,  def next(self):
13582,"    value, next_continuation = self.next_continuation()"
13583,    self.next_continuation = next_continuation
13584,    return value
13585,yield
13586,def generatorfun(iterable):
13587,  if len(iterable) == 0:
13588,    raise StopIteration
13589,  else:
13590,"    return (iterable[0], lambda:generatorfun(iterable[1:]))"
13591,yield
13592,def
13593,yield
13594,next(generator)
13595,.next
13596,.__next__
13597,next()
13598,len()
13599,.__len__
13600,StopIteration
13601,return
13602,yield
13603,next()
13604,yield
13605,next()
13606,for
13607,for item in sequence:
13608,sequence
13609,def
13610,yield
13611,yield
13612,yield
13613,yield
13614,yield
13615,yield
13616,yield
13617,next
13618,send
13619,next
13620,yield
13621,yield
13622,next
13623,yield
13624,send
13625,send
13626,yield
13627,yield
13628,next
13629,>>> def coroutine():
13630,...     i = -1
13631,...     while True:
13632,...         i += 1
13633,...         val = (yield i)
13634,"...         print(""Received %s"" % val)"
13635,...
13636,>>> sequence = coroutine()
13637,>>> sequence.next()
13638,0
13639,>>> sequence.next()
13640,Received None
13641,1
13642,>>> sequence.send('hello')
13643,Received hello
13644,2
13645,>>> sequence.close()
13646,yield
13647,yield from <expr>
13648,async def new_coroutine(data):
13649,   ...
13650,   await blocking_action()
13651,yield
13652,return
13653,return
13654,yield
13655,return
13656,return
13657,def num_list(n):
13658,    for i in range(n):
13659,        return i
13660,In [5]: num_list(3)
13661,Out[5]: 0
13662,return
13663,yield
13664,return
13665,yield
13666,In [10]: def num_list(n):
13667,    ...:     for i in range(n):
13668,    ...:         yield i
13669,    ...:
13670,
13671,In [11]: num_list(3)
13672,Out[11]: <generator object num_list at 0x10327c990>
13673,
13674,In [12]: list(num_list(3))
13675,"Out[12]: [0, 1, 2]"
13676,return
13677,yield
13678,return
13679,return one of them
13680,yield
13681,return all of them
13682,iterable
13683,yield
13684,return
13685,In [15]: def num_list(n):
13686,    ...:     result = []
13687,    ...:     for i in range(n):
13688,    ...:         result.append(i)
13689,    ...:     return result
13690,
13691,In [16]: num_list(3)
13692,"Out[16]: [0, 1, 2]"
13693,yield
13694,return
13695,yield
13696,yield
13697,generator
13698,Out[11]: <generator object num_list at 0x10327c990>
13699,return
13700,yield
13701,list
13702,generator
13703,yield
13704,Welcome to Racket v6.5.0.3.
13705,
13706,-> (define gen
13707,     (lambda (l)
13708,       (define yield
13709,         (lambda ()
13710,           (if (null? l)
13711,               'END
13712,               (let ((v (car l)))
13713,                 (set! l (cdr l))
13714,                 v))))
13715,       (lambda(m)
13716,         (case m
13717,           ('yield (yield))
13718,           ('init  (lambda (data)
13719,                     (set! l data)
13720,                     'OK))))))
13721,-> (define stream (gen '(1 2 3)))
13722,-> (stream 'yield)
13723,1
13724,-> (stream 'yield)
13725,2
13726,-> (stream 'yield)
13727,3
13728,-> (stream 'yield)
13729,'END
13730,-> ((stream 'init) '(a b))
13731,'OK
13732,-> (stream 'yield)
13733,'a
13734,-> (stream 'yield)
13735,'b
13736,-> (stream 'yield)
13737,'END
13738,-> (stream 'yield)
13739,'END
13740,->
13741,from itertools import islice
13742,
13743,def fib_gen():
13744,"    a, b = 1, 1"
13745,    while True:
13746,        yield a
13747,"        a, b = b, a + b"
13748,
13749,"assert [1, 1, 2, 3, 5] == list(islice(fib_gen(), 5))"
13750,"def ftake(fnext, last):"
13751,    return [fnext() for _ in xrange(last)]
13752,
13753,def fib_gen2():
13754,    #funky scope due to python2.x workaround
13755,    #for python 3.x use nonlocal
13756,    def _():
13757,"        _.a, _.b = _.b, _.a + _.b"
13758,        return _.a
13759,"    _.a, _.b = 0, 1"
13760,    return _
13761,
13762,"assert [1,1,2,3,5] == ftake(fib_gen2(), 5)"
13763,class fib_gen3:
13764,    def __init__(self):
13765,"        self.a, self.b = 1, 1"
13766,
13767,    def __call__(self):
13768,        r = self.a
13769,"        self.a, self.b = self.b, self.a + self.b"
13770,        return r
13771,
13772,"assert [1,1,2,3,5] == ftake(fib_gen3(), 5)"
13773,yield
13774,(yield)
13775,send()
13776,(yield)
13777,yield
13778,def isPrimeNumber(n):
13779,"    print ""isPrimeNumber({}) call"".format(n)"
13780,    if n==1:
13781,        return False
13782,"    for x in range(2,n):"
13783,        if n % x == 0:
13784,            return False
13785,    return True
13786,
13787,def primes (n=1):
13788,    while(True):
13789,"        print ""loop step ---------------- {}"".format(n)"
13790,        if isPrimeNumber(n): yield n
13791,        n += 1
13792,
13793,for n in primes():
13794,    if n> 10:break
13795,"    print ""wiriting result {}"".format(n)"
13796,loop step ---------------- 1
13797,isPrimeNumber(1) call
13798,loop step ---------------- 2
13799,isPrimeNumber(2) call
13800,loop step ---------------- 3
13801,isPrimeNumber(3) call
13802,wiriting result 3
13803,loop step ---------------- 4
13804,isPrimeNumber(4) call
13805,loop step ---------------- 5
13806,isPrimeNumber(5) call
13807,wiriting result 5
13808,loop step ---------------- 6
13809,isPrimeNumber(6) call
13810,loop step ---------------- 7
13811,isPrimeNumber(7) call
13812,wiriting result 7
13813,loop step ---------------- 8
13814,isPrimeNumber(8) call
13815,loop step ---------------- 9
13816,isPrimeNumber(9) call
13817,loop step ---------------- 10
13818,isPrimeNumber(10) call
13819,loop step ---------------- 11
13820,isPrimeNumber(11) call
13821,yield
13822,yield
13823,yield
13824,next()
13825,yield
13826,yield
13827,next()
13828,def normalFunction():
13829,    return
13830,    if False:
13831,        pass
13832,
13833,def yielderFunction():
13834,    return
13835,    if False:
13836,        yield 12
13837,yield
13838,>>> yielderFunction()
13839,<generator object yielderFunction at 0x07742D28>
13840,yielderFunction()
13841,yielder
13842,>>> gen = yielderFunction()
13843,>>> dir(gen)
13844,"['__class__',"
13845, ...
13846," '__iter__',    #Returns gen itself, to make it work uniformly with containers"
13847, ...            #when given to a for loop. (Containers return an iterator instead.)
13848," 'close',"
13849," 'gi_code',"
13850," 'gi_frame',"
13851," 'gi_running',"
13852," 'next',        #The method that runs the function's body."
13853," 'send',"
13854, 'throw']
13855,gi_code
13856,gi_frame
13857,dir(..)
13858,barcode_generator
13859,def barcode_generator():
13860,    serial_number = 10000  # Initial barcode
13861,    while True:
13862,        yield serial_number
13863,        serial_number += 1
13864,
13865,
13866,barcode = barcode_generator()
13867,while True:
13868,"    number_of_lightbulbs_to_generate = int(input(""How many lightbulbs to generate? ""))"
13869,    barcodes = [next(barcode) for _ in range(number_of_lightbulbs_to_generate)]
13870,    print(barcodes)
13871,
13872,    # function_to_create_the_next_batch_of_lightbulbs(barcodes)
13873,
13874,"    produce_more = input(""Produce more? [Y/n]: "")"
13875,"    if produce_more == ""n"":"
13876,        break
13877,next(barcode)
13878,next()
13879,next
13880,for barcode in barcode_generator():
13881,    print(barcode)
13882,yield
13883,def f123():
13884,    for _ in range(4):
13885,        yield 1
13886,        yield 2
13887,
13888,
13889,for i in f123():
13890,    print (i)
13891,1 2 1 2 1 2 1 2
13892,"print(i, end=' ')"
13893,yield
13894,yield
13895,def getNextLines():
13896,   while con.isOpen():
13897,       yield con.read()
13898,for line in getNextLines():
13899,    doSomeThing(line)
13900,for
13901,def simpleYield():
13902,"    yield ""first time"""
13903,"    yield ""second time"""
13904,"    yield ""third time"""
13905,"    yield ""Now some useful value {}"".format(12)"
13906,
13907,for i in simpleYield():
13908,    print i
13909,"""first time"""
13910,"""second time"""
13911,"""third time"""
13912,"""Now some useful value 12"""
13913,yield
13914,return
13915,generator function
13916,generator
13917,yield
13918,StopIteration
13919,generator
13920,functional programming perspective
13921,generator
13922,iterator
13923,data
13924,metadata
13925,the logic how the data is computed
13926,as a class
13927,iterator
13928,__next__()
13929,__iter__()
13930,as a function
13931,generator function
13932,generator object
13933,IS-A
13934,yield
13935,generator
13936,generator
13937,yield
13938,yield
13939,def simple_generator():
13940,    yield 'one'
13941,    yield 'two'
13942,    yield 'three'
13943,
13944,for i in simple_generator():
13945,    print i
13946,one
13947,two
13948,three
13949,range
13950,def myRangeNaive(i):
13951,    n = 0
13952,    range = []
13953,    while n < i:
13954,        range.append(n)
13955,        n = n + 1
13956,    return range
13957,for i in myRangeNaive(10):
13958,    print i
13959,def myRangeSmart(i):
13960,    n = 0
13961,    while n < i:
13962,       yield n
13963,       n = n + 1
13964,    return
13965,
13966,for i in myRangeSmart(10):
13967,    print i
13968,next()
13969,next()
13970,return
13971,yield
13972,yield
13973,yield
13974,return
13975,yield
13976,yield
13977,yield
13978,import random
13979,
13980,def return_dates():
13981,    dates = [] # With 'return' you need to create a list then return it
13982,    for i in range(5):
13983,"        date = random.choice([""1st"", ""2nd"", ""3rd"", ""4th"", ""5th"", ""6th"", ""7th"", ""8th"", ""9th"", ""10th""])"
13984,        dates.append(date)
13985,    return dates
13986,def yield_dates():
13987,    for i in range(5):
13988,"        date = random.choice([""1st"", ""2nd"", ""3rd"", ""4th"", ""5th"", ""6th"", ""7th"", ""8th"", ""9th"", ""10th""])"
13989,        yield date # 'yield' makes a generator automatically which works
13990,                   # in a similar way. This is much more efficient.
13991,dates_list = return_dates()
13992,print(dates_list)
13993,for i in dates_list:
13994,    print(i)
13995,
13996,dates_generator = yield_dates()
13997,print(dates_generator)
13998,for i in dates_generator:
13999,    print(i)
14000,yield
14001,return_dates()
14002,yield_dates()
14003,yield
14004,yield
14005,return +=
14006,yield
14007,yield
14008,list(generator())
14009,def get_input():
14010,"    my_var = input('Enter ""a"" or ""b"": ')"
14011,
14012,"    if my_var != ""a"" and my_var != ""b"":"
14013,"        print('You didn\'t type ""a"" or ""b"". Try again.')"
14014,        get_input()
14015,    else:
14016,        return my_var
14017,
14018,"print('got input:', get_input())"
14019,"Type ""a"" or ""b"": a"
14020,got input: a
14021,"Type ""a"" or ""b"": purple"
14022,"You didn't type ""a"" or ""b"". Try again."
14023,"Type ""a"" or ""b"": a"
14024,got input: None
14025,get_input()
14026,None
14027,my_var
14028,None
14029,return Dat_Function()
14030,"my_var != ""a"" and my_var != ""b"""
14031,"my_var not in ('a', 'b')"
14032,while
14033,None
14034,"if my_var != ""a"" and my_var != ""b"":"
14035,"    print('You didn\'t type ""a"" or ""b"". Try again.')"
14036,    get_input()
14037,None
14038,>>> def f(x):
14039,...     pass
14040,>>> print(f(20))
14041,None
14042,get_input()
14043,if
14044,return
14045,"if my_var != ""a"" and my_var != ""b"":"
14046,"    print('You didn\'t type ""a"" or ""b"". Try again.')"
14047,    return get_input()
14048,main()
14049,my_var
14050,return
14051,main()
14052,def get_input():
14053,"    my_var = input('Enter ""a"" or ""b"": ')"
14054,
14055,"    if my_var != ""a"" and my_var != ""b"":"
14056,"        print('You didn\'t type ""a"" or ""b"". Try again.')"
14057,        return get_input()
14058,    else:
14059,        return my_var
14060,
14061,"print('got input:', get_input())"
14062,def get_input():
14063,"    my_var = str(input('Enter ""a"" or ""b"": '))"
14064,"    if my_var == ""a"" or my_var == ""b"":"
14065,"        print('got input:', my_var)"
14066,        return my_var
14067,    else:
14068,"        print('You didn\'t type ""a"" or ""b"". Try again.')"
14069,        return get_input()
14070,get_input()
14071,"foo = [1, 2, 3]"
14072,"bar = [4, 5, 6]"
14073,
14074,"for (f, b) in iterate_together(foo, bar):"
14075,"    print(""f: "", f, ""; b: "", b)"
14076,f: 1; b: 4
14077,f: 2; b: 5
14078,f: 3; b: 6
14079,for i in range(len(foo)):
14080,"    print(""f: "", foo[i], ""; b: "", bar[i])"
14081,"for f, b in zip(foo, bar):"
14082,"    print(f, b)"
14083,zip
14084,foo
14085,bar
14086,zip
14087,itertools.izip
14088,"list(zip(foo, bar))"
14089,zip
14090,foo
14091,bar
14092,"zip(foo,bar)"
14093,itertools.izip
14094,itertools.izip_longest
14095,import itertools
14096,"for f,b in itertools.izip(foo,bar):"
14097,"    print(f,b)"
14098,"for f,b in itertools.izip_longest(foo,bar):"
14099,"    print(f,b)"
14100,izip
14101,foo
14102,bar
14103,izip_longest
14104,foo
14105,bar
14106,izip_longest
14107,None
14108,fillvalue
14109,None
14110,zip
14111,zip
14112,"for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], "
14113,"                              ['red', 'blue', 'green']):"
14114,"    print('{} {} {}'.format(num, color, cheese))"
14115,1 red manchego
14116,2 blue stilton
14117,3 green brie
14118,izip
14119,izip
14120,zip
14121,zip
14122,zip
14123,itertools
14124,i
14125,"for i, (f, b) in enumerate(zip(foo, bar))"
14126,zip
14127,"for (f,b) in zip(foo, bar):"
14128,"    print ""f: "", f ,""; b: "", b"
14129,itertools.izip
14130,"def custom_zip(seq1, seq2):"
14131,    it1 = iter(seq1)
14132,    it2 = iter(seq2)
14133,    while True:
14134,"        yield next(it1), next(it2)"
14135,"zip(seq1, seq2)"
14136,zip
14137,zip
14138,zip()
14139,enumerate()
14140,count()
14141,foo
14142,bar
14143,timeit()
14144,foo
14145,bar
14146,zip()
14147,zip()
14148,enumerate()
14149,zip()
14150,list.append()
14151,zip()
14152,enumerate()
14153,zip()
14154,foo
14155,bar
14156,zip()
14157,zip()
14158,zip()
14159,list
14160,zip()
14161,enumerate()
14162,foo
14163,bar
14164,import timeit
14165,import matplotlib.pyplot as plt
14166,import numpy as np
14167,
14168,
14169,"def test_zip( foo, bar ):"
14170,    store = []
14171,"    for f, b in zip(foo, bar):"
14172,"        #print(f, b)"
14173,"        store.append( (f, b) )"
14174,
14175,"def test_enumerate( foo, bar ):"
14176,    store = []
14177,"    for n, f in enumerate( foo ):"
14178,"        #print(f, bar[n])"
14179,"        store.append( (f, bar[n]) )"
14180,
14181,"def test_count( foo, bar ):"
14182,    store = []
14183,    count = 0
14184,    for f in foo:
14185,"        #print(f, bar[count])"
14186,"        store.append( (f, bar[count]) )"
14187,        count += 1
14188,
14189,"def test_indices( foo, bar, indices ):"
14190,    store = []
14191,    for i in indices:
14192,"        #print(foo[i], bar[i])"
14193,"        store.append( (foo[i], bar[i]) )"
14194,
14195,"def test_existing_list_indices( foo, bar ):"
14196,    store = []
14197,    for f in foo:
14198,"        #print(f, bar[f])"
14199,"        store.append( (f, bar[f]) )"
14200,
14201,
14202,"list_sizes = [ 10, 100, 1000, 10000, 100000, 1000000 ]"
14203,tz = []
14204,te = []
14205,tc = []
14206,ti = []
14207,tii= []
14208,
14209,tcz = []
14210,tce = []
14211,tci = []
14212,tcii= []
14213,
14214,for a in list_sizes:
14215,    foo = [ i for i in range(a) ]
14216,    bar = [ i for i in range(a) ]
14217,    indices = [ i for i in range(a) ]
14218,    reps = 1000
14219,
14220,"    tz.append( timeit.timeit( 'test_zip( foo, bar )',"
14221,"                              'from __main__ import test_zip, foo, bar',"
14222,                              number=reps
14223,                              )
14224,               )
14225,"    te.append( timeit.timeit( 'test_enumerate( foo, bar )',"
14226,"                              'from __main__ import test_enumerate, foo, bar',"
14227,                              number=reps
14228,                              )
14229,               )
14230,"    tc.append( timeit.timeit( 'test_count( foo, bar )',"
14231,"                              'from __main__ import test_count, foo, bar',"
14232,                              number=reps
14233,                              )
14234,               )
14235,"    ti.append( timeit.timeit( 'test_indices( foo, bar, indices )',"
14236,"                              'from __main__ import test_indices, foo, bar, indices',"
14237,                              number=reps
14238,                              )
14239,               )
14240,"    tii.append( timeit.timeit( 'test_existing_list_indices( foo, bar )',"
14241,"                               'from __main__ import test_existing_list_indices, foo, bar',"
14242,                               number=reps
14243,                               )
14244,                )
14245,
14246,"    tcz.append( timeit.timeit( '[(f, b) for f, b in zip(foo, bar)]',"
14247,"                               'from __main__ import foo, bar',"
14248,                               number=reps
14249,                               )
14250,                )
14251,"    tce.append( timeit.timeit( '[(f, bar[n]) for n, f in enumerate( foo )]',"
14252,"                               'from __main__ import foo, bar',"
14253,                               number=reps
14254,                               )
14255,                )
14256,"    tci.append( timeit.timeit( '[(foo[i], bar[i]) for i in indices ]',"
14257,"                               'from __main__ import foo, bar, indices',"
14258,                               number=reps
14259,                               )
14260,                )
14261,"    tcii.append( timeit.timeit( '[(f, bar[f]) for f in foo ]',"
14262,"                                'from __main__ import foo, bar',"
14263,                                number=reps
14264,                                )
14265,                 )
14266,
14267,print( f'te  = {te}' )
14268,print( f'ti  = {ti}' )
14269,print( f'tii = {tii}' )
14270,print( f'tc  = {tc}' )
14271,print( f'tz  = {tz}' )
14272,
14273,print( f'tce  = {te}' )
14274,print( f'tci  = {ti}' )
14275,print( f'tcii = {tii}' )
14276,print( f'tcz  = {tz}' )
14277,
14278,"fig, ax = plt.subplots( 2, 2 )"
14279,"ax[0,0].plot( list_sizes, te, label='enumerate()', marker='.' )"
14280,"ax[0,0].plot( list_sizes, ti, label='index-list', marker='.' )"
14281,"ax[0,0].plot( list_sizes, tii, label='element of foo', marker='.' )"
14282,"ax[0,0].plot( list_sizes, tc, label='count()', marker='.' )"
14283,"ax[0,0].plot( list_sizes, tz, label='zip()', marker='.')"
14284,"ax[0,0].set_xscale('log')"
14285,"ax[0,0].set_yscale('log')"
14286,"ax[0,0].set_xlabel('List Size')"
14287,"ax[0,0].set_ylabel('Time (s)')"
14288,"ax[0,0].legend()"
14289,"ax[0,0].grid( b=True, which='major', axis='both')"
14290,"ax[0,0].grid( b=True, which='minor', axis='both')"
14291,
14292,"ax[0,1].plot( list_sizes, np.array(te)/np.array(tz), label='enumerate()', marker='.' )"
14293,"ax[0,1].plot( list_sizes, np.array(ti)/np.array(tz), label='index-list', marker='.' )"
14294,"ax[0,1].plot( list_sizes, np.array(tii)/np.array(tz), label='element of foo', marker='.' )"
14295,"ax[0,1].plot( list_sizes, np.array(tc)/np.array(tz), label='count()', marker='.' )"
14296,"ax[0,1].set_xscale('log')"
14297,"ax[0,1].set_xlabel('List Size')"
14298,"ax[0,1].set_ylabel('Performances ( vs zip() function )')"
14299,"ax[0,1].legend()"
14300,"ax[0,1].grid( b=True, which='major', axis='both')"
14301,"ax[0,1].grid( b=True, which='minor', axis='both')"
14302,
14303,"ax[1,0].plot( list_sizes, tce, label='list comprehension using enumerate()',  marker='.')"
14304,"ax[1,0].plot( list_sizes, tci, label='list comprehension using index-list()',  marker='.')"
14305,"ax[1,0].plot( list_sizes, tcii, label='list comprehension using element of foo',  marker='.')"
14306,"ax[1,0].plot( list_sizes, tcz, label='list comprehension using zip()',  marker='.')"
14307,"ax[1,0].set_xscale('log')"
14308,"ax[1,0].set_yscale('log')"
14309,"ax[1,0].set_xlabel('List Size')"
14310,"ax[1,0].set_ylabel('Time (s)')"
14311,"ax[1,0].legend()"
14312,"ax[1,0].grid( b=True, which='major', axis='both')"
14313,"ax[1,0].grid( b=True, which='minor', axis='both')"
14314,
14315,"ax[1,1].plot( list_sizes, np.array(tce)/np.array(tcz), label='enumerate()', marker='.' )"
14316,"ax[1,1].plot( list_sizes, np.array(tci)/np.array(tcz), label='index-list', marker='.' )"
14317,"ax[1,1].plot( list_sizes, np.array(tcii)/np.array(tcz), label='element of foo', marker='.' )"
14318,"ax[1,1].set_xscale('log')"
14319,"ax[1,1].set_xlabel('List Size')"
14320,"ax[1,1].set_ylabel('Performances ( vs zip() function )')"
14321,"ax[1,1].legend()"
14322,"ax[1,1].grid( b=True, which='major', axis='both')"
14323,"ax[1,1].grid( b=True, which='minor', axis='both')"
14324,
14325,plt.show()
14326,print
14327,zip()
14328,def iterate_multi(*lists):
14329,"    for i in range(min(map(len,lists))):"
14330,        yield tuple(l[i] for l in lists)
14331,
14332,"for l1, l2, l3 in iterate_multi([1,2,3],[4,5,6],[7,8,9]):"
14333,"    print(str(l1)+"",""+str(l2)+"",""+str(l3))"
14334,"a = (1, 2, 3)"
14335,"b = (4, 5, 6)"
14336,"[print('f:', i, '; b', j) for i, j in zip(a, b)]"
14337,f: 1 ; b 4
14338,f: 2 ; b 5
14339,f: 3 ; b 6
14340,"foo = ['a', 'b', 'c']"
14341,"bar = [10, 20, 30]"
14342,"for indx, itm in enumerate(foo):"
14343,"    print (foo[indx], bar[indx])"
14344,enumerate
14345,itm
14346,"print(itm, bar[index])"
14347,for indx in range(len(foo))
14348,class Song:
14349,"    """"""The class to store the details of each song"""""""
14350,"    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')"
14351,    def __init__(self):
14352,        for att in self.attsToStore:
14353,            exec 'self.%s=None'%(att.lower()) in locals()
14354,"    def setDetail(self, key, val):"
14355,        if key in self.attsToStore:
14356,            exec 'self.%s=val'%(key.lower()) in locals()
14357,if/else
14358,eval
14359,self
14360,exec/eval
14361,setattr
14362,eval
14363,eval
14364,class Song:
14365,"    """"""The class to store the details of each song"""""""
14366,"    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')"
14367,    def __init__(self):
14368,        for att in self.attsToStore:
14369,"            setattr(self, att.lower(), None)"
14370,"    def setDetail(self, key, val):"
14371,        if key in self.attsToStore:
14372,"            setattr(self, key.lower(), val)"
14373,eval
14374,exec
14375,eval
14376,eval
14377,exec
14378,eval
14379,eval
14380,eval
14381,eval
14382,calc
14383,"print(eval(""{} + {}"".format(n1, n2)))"
14384,calc
14385,eval
14386,eval
14387,eval
14388,eval
14389,eval
14390,while True: pass
14391,eval()
14392,>>> eval(input())
14393,"""__import__('os').listdir('.')"""
14394,...........
14395,...........   #dir listing
14396,...........
14397,>>> eval(input())
14398,"""__import__('subprocess').Popen(['tasklist'],stdout=__import__('subprocess').PIPE).communicate()[0]"""
14399,>>> eval(input())
14400,"""__import__('subprocess').Popen(['ps', 'aux'],stdout=__import__('subprocess').PIPE).communicate()[0]"""
14401,eval
14402,exec 'self.Foo=val'
14403,setattr
14404,"setattr(self, 'Foo', val)"
14405,eval
14406,eval
14407,test_unary.py
14408,(+|-|~)b'a'
14409,TypeError
14410,def test_bad_types(self):
14411,"    for op in '+', '-', '~':"
14412,"        self.assertRaises(TypeError, eval, op + ""b'a'"")"
14413,"        self.assertRaises(TypeError, eval, op + ""'a'"")"
14414,eval
14415,eval
14416,eval
14417,setattr
14418,def __init__(self):
14419,    for name in attsToStore:
14420,"        setattr(self, name, None)"
14421,__dict__
14422,None
14423,"def __init__(self, **kwargs):"
14424,    for name in self.attsToStore:
14425,"       self.__dict__[name] = kwargs.get(name, None)"
14426,"s = Song(name='History', artist='The Verve')"
14427,locals()
14428,s = Song(**locals())
14429,None
14430,locals()
14431,"s = Song(**dict([(k, None) for k in locals().keys()]))"
14432,__getattr__
14433,"def __getattr__(self, name):"
14434,    if name in self.attsToStore:
14435,        return None
14436,"    raise NameError, name"
14437,__dict__
14438,eval
14439,__dict__
14440,__setattr__
14441,setattr()
14442,eval()
14443,"""__import__('code').InteractiveConsole(locals=globals()).interact()"""
14444,eval
14445,#Difference while using print() with eval() and w/o eval() to print an int = 0.528969s per 100000 evals()
14446,
14447,from datetime import datetime
14448,def strOfNos():
14449,    s = []
14450,    for x in range(100000):
14451,        s.append(str(x))
14452,    return s
14453,
14454,strOfNos()
14455,print(datetime.now())
14456,for x in strOfNos():
14457,    print(x) #print(eval(x))
14458,print(datetime.now())
14459,
14460,#when using eval(int)
14461,#2018-10-29 12:36:08.206022
14462,#2018-10-29 12:36:10.407911
14463,#diff = 2.201889 s
14464,
14465,#when using int only
14466,#2018-10-29 12:37:50.022753
14467,#2018-10-29 12:37:51.090045
14468,#diff = 1.67292
14469,"L = [[[1, 2, 3], [4, 5]], 6]"
14470,"[1, 2, 3, 4, 5, 6]"
14471,def flatten(x):
14472,    result = []
14473,    for el in x:
14474,"        if hasattr(el, ""__iter__"") and not isinstance(el, basestring):"
14475,            result.extend(flatten(el))
14476,        else:
14477,            result.append(el)
14478,    return result
14479,
14480,flatten(L)
14481,list
14482,Iterable
14483,from collections import Iterable
14484,
14485,def flatten(xs):
14486,    for x in xs:
14487,"        if isinstance(x, Iterable) and not isinstance(x, basestring):"
14488,            for item in flatten(x):
14489,                yield item
14490,        else:
14491,            yield x
14492,basestring
14493,"(str, bytes)"
14494,yield from
14495,from collections.abc import Iterable
14496,
14497,def flatten(xs):
14498,    for x in xs:
14499,"        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):"
14500,            yield from flatten(x)
14501,        else:
14502,            yield x
14503,"l = ([[chr(i),chr(i-32)] for i in xrange(ord('a'), ord('z')+1)] + range(0,9))"
14504,list(flatten(l))
14505,collections.Sequence
14506,collections.Iteratable
14507,for i in flatten(42): print (i)
14508,isinstance
14509,for el
14510,collections.Iterable
14511,collections.abc.Iterable
14512,import collections
14513,
14514,
14515,def flatten(x):
14516,"    if isinstance(x, collections.Iterable):"
14517,        return [a for i in x for a in flatten(i)]
14518,    else:
14519,        return [x]
14520,try: iter(x)
14521,int
14522,"def flatten(x): return [a for i in x for a in flatten(i)] if isinstance(x, collections.Iterable) else [x]"
14523,"if isinstance(x, collections.Iterable) and not isinstance(x, basestring)"
14524,collections.Iterable
14525,list
14526,def flatten(L):
14527,    for item in L:
14528,        try:
14529,            yield from flatten(item)
14530,        except TypeError:
14531,            yield item
14532,
14533,"list(flatten([[[1, 2, 3], [4, 5]], 6]))"
14534,">>>[1, 2, 3, 4, 5, 6]"
14535,for i in flatten(item):    yield i
14536,flatten = lambda *n: (e for a in n
14537,"    for e in (flatten(*a) if isinstance(a, (tuple, list)) else (a,)))"
14538,"l1 = ['a', ['b', ('c', 'd')]]"
14539,"l2 = [0, 1, (2, 3), [[4, 5, (6, 7, (8,), [9]), 10]], (11,)]"
14540,"print list(flatten(l1, -2, -1, l2))"
14541,"['a', 'b', 'c', 'd', -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
14542,e
14543,a
14544,n
14545,args
14546,n
14547,intermediate
14548,mid
14549,element
14550,a
14551,result
14552,e
14553,"flatten = lambda *args: (result for mid in args for result in (flatten(*mid) if isinstance(mid, (tuple, list)) else (mid,)))"
14554,compiler.ast.flatten
14555,"def genflat(l, ltypes=collections.Sequence):"
14556,    l = list(l)
14557,    i = 0
14558,    while i < len(l):
14559,"        while isinstance(l[i], ltypes):"
14560,            if not l[i]:
14561,                l.pop(i)
14562,                i -= 1
14563,                break
14564,            else:
14565,                l[i:i + 1] = l[i]
14566,        yield l[i]
14567,        i += 1
14568,"def genflat(l, ltypes=collections.Sequence):"
14569,    l = list(l)
14570,    while l:
14571,"        while l and isinstance(l[0], ltypes):"
14572,            l[0:1] = l[0]
14573,        if l: yield l.pop(0)
14574,flatten
14575,import itertools as IT
14576,import collections
14577,
14578,"def flatten(iterable, ltypes=collections.Iterable):"
14579,    remainder = iter(iterable)
14580,    while True:
14581,        first = next(remainder)
14582,"        if isinstance(first, ltypes) and not isinstance(first, (str, bytes)):"
14583,"            remainder = IT.chain(first, remainder)"
14584,        else:
14585,            yield first
14586,"print(list(IT.islice(flatten(IT.repeat(1)),10)))"
14587,"# [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
14588,
14589,"print(list(IT.islice(flatten(IT.chain(IT.repeat(2,3),"
14590,"                                       {10,20,30},"
14591,"                                       'foo bar'.split(),"
14592,"                                       IT.repeat(1),)),10)))"
14593,"# [2, 2, 2, 10, 20, 30, 'foo', 'bar', 1, 1]"
14594,
14595,"print(list(flatten([[1,2,[3,4]]])))"
14596,"# [1, 2, 3, 4]"
14597,
14598,"seq = ([[chr(i),chr(i-32)] for i in range(ord('a'), ord('z')+1)] + list(range(0,9)))"
14599,print(list(flatten(seq)))
14600,"# ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H',"
14601,"# 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N', 'o', 'O', 'p', 'P',"
14602,"# 'q', 'Q', 'r', 'R', 's', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X',"
14603,"# 'y', 'Y', 'z', 'Z', 0, 1, 2, 3, 4, 5, 6, 7, 8]"
14604,flatten
14605,def infinitely_nested():
14606,    while True:
14607,"        yield IT.chain(infinitely_nested(), IT.repeat(1))"
14608,
14609,"print(list(IT.islice(flatten(infinitely_nested()), 10)))"
14610,# hangs
14611,sets
14612,dicts
14613,deques
14614,listiterators
14615,generators
14616,__iter__
14617,collections.Iterable
14618,collections.Sequence
14619,dict
14620,collections.Iterable
14621,collections.Sequence
14622,collections.Iterable
14623,StopIteration
14624,while True: first = next(remainder)
14625,for first in remainder:
14626,try-except StopIteration block
14627,def flatten(xs):
14628,    res = []
14629,    def loop(ys):
14630,        for i in ys:
14631,"            if isinstance(i, list):"
14632,                loop(i)
14633,            else:
14634,                res.append(i)
14635,    loop(xs)
14636,    return res
14637,import re
14638,
14639,def Flatten(TheList):
14640,    a = str(TheList)
14641,"    b,_Anon = re.subn(r'[\[,\]]', ' ', a)"
14642,    c = b.split()
14643,    d = [int(x) for x in c]
14644,
14645,    return(d)
14646,"[['C=64', 'APPLE ]['], ['Amiga', 'Mac', 'ST']]"
14647,[x for x in c]
14648,c
14649,'APPLE ]['
14650,'APPLE   '
14651,arr_str = str(arr)
14652,"[int(s) for s in re.findall(r'\d+', arr_str)]"
14653,def flatten(iterable):
14654,    try:
14655,        for item in iterable:
14656,            yield from flatten(item)
14657,    except TypeError:
14658,        yield iterable
14659,bytearray
14660,bytes
14661,str
14662,TypeError
14663,">>> L = [[[1, 2, 3], [4, 5]], 6]"
14664,>>> def flatten(iterable):
14665,    try:
14666,        for item in iterable:
14667,            yield from flatten(item)
14668,    except TypeError:
14669,        yield iterable
14670,
14671,
14672,>>> list(flatten(L))
14673,"[1, 2, 3, 4, 5, 6]"
14674,>>>
14675,>>> list(flatten(123))
14676,[123]
14677,>>>
14678,def flatten(iterable):
14679,    for item in iterable:
14680,        try:
14681,            yield from flatten(item)
14682,        except TypeError:
14683,            yield item
14684,TypeError
14685,">>> L = [[[1, 2, 3], [4, 5]], 6]"
14686,>>> list(flatten(L))
14687,"[1, 2, 3, 4, 5, 6]"
14688,>>> list(flatten(123))
14689,Traceback (most recent call last):
14690,"  File ""<pyshell#32>"", line 1, in <module>"
14691,    list(flatten(123))
14692,"  File ""<pyshell#27>"", line 2, in flatten"
14693,    for item in iterable:
14694,TypeError: 'int' object is not iterable
14695,>>>
14696,deepflatten
14697,iteration_utilities
14698,>>> from iteration_utilities import deepflatten
14699,">>> L = [[[1, 2, 3], [4, 5]], 6]"
14700,>>> list(deepflatten(L))
14701,"[1, 2, 3, 4, 5, 6]"
14702,
14703,">>> list(deepflatten(L, types=list))  # only flatten ""inner"" lists"
14704,"[1, 2, 3, 4, 5, 6]"
14705,list
14706,>>> %timeit list(deepflatten(L))
14707,"12.6 µs ± 298 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
14708,">>> %timeit list(deepflatten(L, types=list))"
14709,"8.7 µs ± 139 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
14710,
14711,>>> %timeit list(flatten(L))   # Cristian - Python 3.x approach from https://stackoverflow.com/a/2158532/5393381
14712,"86.4 µs ± 4.42 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
14713,
14714,>>> %timeit list(flatten(L))   # Josh Lee - https://stackoverflow.com/a/2158522/5393381
14715,"107 µs ± 2.99 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
14716,
14717,">>> %timeit list(genflat(L, list))  # Alex Martelli - https://stackoverflow.com/a/2159079/5393381"
14718,"23.1 µs ± 710 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
14719,iteration_utilities
14720,from copy import deepcopy
14721,
14722,def flatten_list(nested_list):
14723,"    """"""Flatten an arbitrarily nested list, without recursion (to avoid"
14724,"    stack overflows). Returns a new list, the original list is unchanged."
14725,
14726,"    >> list(flatten_list([1, 2, 3, [4], [], [[[[[[[[[5]]]]]]]]]]))"
14727,"    [1, 2, 3, 4, 5]"
14728,"    >> list(flatten_list([[1, 2], 3]))"
14729,"    [1, 2, 3]"
14730,
14731,"    """""""
14732,    nested_list = deepcopy(nested_list)
14733,
14734,    while nested_list:
14735,        sublist = nested_list.pop(0)
14736,
14737,"        if isinstance(sublist, list):"
14738,            nested_list = sublist + nested_list
14739,        else:
14740,            yield sublist
14741,collections.deque
14742,deepcopy
14743,In [1]: import pandas
14744,"In [2]: pandas.core.common.flatten([[[1, 2, 3], [4, 5]], 6])"
14745,Out[2]: <generator object flatten at 0x7f12ade66200>
14746,"In [3]: list(pandas.core.common.flatten([[[1, 2, 3], [4, 5]], 6]))"
14747,"Out[3]: [1, 2, 3, 4, 5, 6]"
14748,def flat(l):
14749,    ret = []
14750,    for i in l:
14751,"        if isinstance(i, list) or isinstance(i, tuple):"
14752,            ret.extend(flat(i))
14753,        else:
14754,            ret.append(i)
14755,    return ret
14756,"isinstance(i, (tuple, list))"
14757,return type(l)(ret)
14758,def flatten(TheList):
14759,    listIsNested = True
14760,
14761,    while listIsNested:                 #outer loop
14762,        keepChecking = False
14763,        Temp = []
14764,
14765,        for element in TheList:         #inner loop
14766,"            if isinstance(element,list):"
14767,                Temp.extend(element)
14768,                keepChecking = True
14769,            else:
14770,                Temp.append(element)
14771,
14772,        listIsNested = keepChecking     #determine if outer loop exits
14773,        TheList = Temp[:]
14774,
14775,    return TheList
14776,"flatten([1,2,3,4,[100,200,300,[1000,2000,3000]]])"
14777,"[1, 2, 3, 4, 100, 200, 300, 1000, 2000, 3000]"
14778,"x = [""over here"", ""am"", ""I""]"
14779,"y = sorted(x) # You're about to enter a room named `sorted`, note down the current room address here so you can return back: 0x4004f4 (that room address looks weird)"
14780,# Seems like you went back from your quest using the return address 0x4004f4
14781,# Let's see what you've collected 
14782,print(' '.join(y))
14783,RecursionError: maximum recursion depth exceeded
14784,f
14785,f
14786,f
14787,f
14788,stack
14789,address
14790,index
14791,stack
14792,yield
14793,stack
14794,address
14795,index
14796,"A = [1, 2]"
14797,"0, 1, 2, 3, 4"
14798,"L = [0, [1,2], 3, 4]"
14799,                    L
14800,                    |
14801,           -------------------
14802,           |     |     |     |
14803,           0   --A--   3     4
14804,               |   |
14805,               1   2
14806,stack
14807,flat_list
14808,"init.:  stack=[(L, 0)]"
14809,"**0**:  stack=[(L, 0)],         flat_list=[0]"
14810,"**A**:  stack=[(L, 1), (A, 0)], flat_list=[0]"
14811,"**1**:  stack=[(L, 1), (A, 0)], flat_list=[0, 1]"
14812,"**2**:  stack=[(L, 1), (A, 1)], flat_list=[0, 1, 2]"
14813,"**3**:  stack=[(L, 2)],         flat_list=[0, 1, 2, 3]"
14814,"**3**:  stack=[(L, 3)],         flat_list=[0, 1, 2, 3, 4]"
14815,"return: stack=[],               flat_list=[0, 1, 2, 3, 4]"
14816,def flatten(iterable):
14817,    return list(items_from(iterable))
14818,
14819,def items_from(iterable):
14820,    cursor_stack = [iter(iterable)]
14821,    while cursor_stack:
14822,        sub_iterable = cursor_stack[-1]
14823,        try:
14824,            item = next(sub_iterable)
14825,        except StopIteration:   # post-order
14826,            cursor_stack.pop()
14827,            continue
14828,        if is_list_like(item):  # pre-order
14829,            cursor_stack.append(iter(item))
14830,        elif item is not None:
14831,            yield item          # in-order
14832,
14833,def is_list_like(item):
14834,"    return isinstance(item, list)"
14835,is_list_like
14836,"isinstance(item, list)"
14837,def is_list_like(item):
14838,    try:
14839,        iter(item)
14840,"        return not isinstance(item, str)  # strings are not lists (hmm...) "
14841,    except TypeError:
14842,        return False
14843,"flatten_iter([[""test"", ""a""], ""b])"
14844,"[""test"", ""a"", ""b""]"
14845,"[""t"", ""e"", ""s"", ""t"", ""a"", ""b""]"
14846,iter(item)
14847,L
14848,print(L)
14849,__repr__
14850,RecursionError: maximum recursion depth exceeded while getting the repr of an object
14851,flatten
14852,str
14853,def build_deep_list(depth):
14854,"    """"""Returns a list of the form $l_{depth} = [depth-1, l_{depth-1}]$"
14855,    with $depth > 1$ and $l_0 = [0]$.
14856,"    """""""
14857,    sub_list = [0]
14858,"    for d in range(1, depth):"
14859,"        sub_list = [d, sub_list]"
14860,    return sub_list
14861,build_deep_list(5)
14862,"[4, [3, [2, [1, [0]]]]]"
14863,def flatten(l): return flatten(l[0]) + (flatten(l[1:]) if len(l) > 1 else []) if type(l) is list else [l]
14864,">>> flatten([1,[2,3],4])"
14865,"[1, 2, 3, 4]"
14866,
14867,">>> flatten([1, [2, 3], 4, [5, [6, {'name': 'some_name', 'age':30}, 7]], [8, 9, [10, [11, [12, [13, {'some', 'set'}, 14, [15, 'some_string'], 16], 17, 18], 19], 20], 21, 22, [23, 24], 25], 26, 27, 28, 29, 30])"
14868,"[1, 2, 3, 4, 5, 6, {'age': 30, 'name': 'some_name'}, 7, 8, 9, 10, 11, 12, 13, set(['set', 'some']), 14, 15, 'some_string', 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
14869,>>> 
14870,def foo():
14871,compiler.ast.flatten
14872,def flatten(seq):
14873,    l = []
14874,    for elt in seq:
14875,        t = type(elt)
14876,        if t is tuple or t is list:
14877,            for elt2 in flatten(elt):
14878,                l.append(elt2)
14879,        else:
14880,            l.append(elt)
14881,    return l
14882,"flat_list = ast.literal_eval(""[%s]""%re.sub(""[\[\]]"","""",str(the_list)))"
14883,import re
14884,
14885,"L = [[[1, 2, 3], [4, 5]], 6]"
14886,"flattened_list = re.sub(""[\[\]]"", """", str(L)).replace("" "", """").split("","")"
14887,"new_list = list(map(int, flattened_list))"
14888,print(new_list)
14889,"[1, 2, 3, 4, 5, 6]"
14890,funcy
14891,pip install funcy
14892,import funcy
14893,
14894,
14895,"funcy.flatten([[[[1, 1], 1], 2], 3]) # returns generator"
14896,"funcy.lflatten([[[[1, 1], 1], 2], 3]) # returns list"
14897,flattened_list = []
14898,"nested_list = [[[1, 2, 3], [4, 5]], 6]"
14899,
14900,"def flatten(nested_list, container):"
14901,    for item in nested_list:
14902,"        if isintance(item, list):"
14903,"            flatten(item, container)"
14904,        else:
14905,            container.append(item)
14906,
14907,">>> flatten(nested_list, flattened_list)"
14908,>>> flattened_list
14909,"[1, 2, 3, 4, 5, 6]"
14910,">>> a = [1, 2, 3, 5, 10, [1, 25, 11, [1, 0]]]    "
14911,">>> g = str(a).replace('[', '').replace(']', '')    "
14912,">>> b = [int(x) for x in g.split(',') if x.strip()]"
14913,ints
14914,from collections import Iterable
14915,"from itertools import imap, repeat, chain"
14916,
14917,
14918,"def flat(seqs, ignore=(int, long, float, basestring)):"
14919,"    return repeat(seqs, 1) if any(imap(isinstance, repeat(seqs), ignore)) or not isinstance(seqs, Iterable) else chain.from_iterable(imap(flat, seqs))"
14920,"def flat(seqs, ignore={int, long, float, str, unicode}):"
14921,"    return repeat(seqs, 1) if type(seqs) in ignore or not isinstance(seqs, Iterable) else chain.from_iterable(imap(flat, seqs))"
14922,str
14923,unicode
14924,import random
14925,
14926,def test_flat(test_size=2000):
14927,"    def increase_depth(value, depth=1):"
14928,        for func in xrange(depth):
14929,"            value = repeat(value, 1)"
14930,        return value
14931,
14932,    def random_sub_chaining(nested_values):
14933,        for values in nested_values:
14934,"            yield chain((values,), chain.from_iterable(imap(next, repeat(nested_values, random.randint(1, 10)))))"
14935,
14936,"    expected_values = zip(xrange(test_size), imap(str, xrange(test_size)))"
14937,"    nested_values = random_sub_chaining((increase_depth(value, depth) for depth, value in enumerate(expected_values)))"
14938,"    assert not any(imap(cmp, chain.from_iterable(expected_values), flat(chain(((),), nested_values, ((),)))))"
14939,
14940,>>> test_flat()
14941,">>> list(flat([[[1, 2, 3], [4, 5]], 6]))"
14942,"[1, 2, 3, 4, 5, 6]"
14943,>>>  
14944,
14945,$ uname -a
14946,Darwin Samys-MacBook-Pro.local 13.3.0 Darwin Kernel Version 13.3.0: Tue Jun  3 21:27:35 PDT 2014; root:xnu-2422.110.17~1/RELEASE_X86_64 x86_64
14947,$ python --version
14948,Python 2.7.5
14949,def flat(l):
14950,"    def _flat(l, r):    "
14951,        if type(l) is not list:
14952,            r.append(l)
14953,        else:
14954,            for i in l:
14955,                r = r + flat(i)
14956,        return r
14957,"    return _flat(l, [])"
14958,
14959,
14960,
14961,# example
14962,"test = [[1], [[2]], [3], [['a','b','c'] , [['z','x','y']], ['d','f','g']], 4]    "
14963,"print flat(test) # prints [1, 2, 3, 'a', 'b', 'c', 'z', 'x', 'y', 'd', 'f', 'g', 4]"
14964,itertools.chain
14965,import itertools
14966,from collections import Iterable
14967,
14968,def list_flatten(lst):
14969,    flat_lst = []
14970,    for item in itertools.chain(lst):
14971,"        if isinstance(item, Iterable):"
14972,            item = list_flatten(item)
14973,            flat_lst.extend(item)
14974,        else:
14975,            flat_lst.append(item)
14976,    return flat_lst
14977,"def flatten(q, final):"
14978,    if not q:
14979,        return
14980,"    if isinstance(q, list):"
14981,"        if not isinstance(q[0], list):"
14982,            final.append(q[0])
14983,        else:
14984,"            flatten(q[0], final)"
14985,"        flatten(q[1:], final)"
14986,    else:
14987,        final.append(q)
14988,"def combine_nlist(nlist,init=0,combiner=lambda x,y: x+y):"
14989,    '''
14990,    apply function: combiner to a nested list element by element(treated as flatten list)
14991,    '''
14992,    current_value=init
14993,    for each_item in nlist:
14994,"        if isinstance(each_item,list):"
14995,"            current_value =combine_nlist(each_item,current_value,combiner)"
14996,        else:
14997,"            current_value = combiner(current_value,each_item)"
14998,    return current_value
14999,def flatten_nlist(nlist):
15000,"    return combine_nlist(nlist,[],lambda x,y:x+[y])"
15001,"In [379]: flatten_nlist([1,2,3,[4,5],[6],[[[7],8],9],10])"
15002,"Out[379]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
15003,"current_value = combiner(current_value,each_item) RecursionError: maximum recursion depth exceeded"
15004,pip install morph
15005,import morph
15006,
15007,"list = [[[1, 2, 3], [4, 5]], 6]"
15008,"flattened_list = morph.flatten(list)  # returns [1, 2, 3, 4, 5, 6]"
15009,def flatten_list(seq):
15010,    if not seq:
15011,        return []
15012,"    elif isinstance(seq[0],list):"
15013,        return (flatten_list(seq[0])+flatten_list(seq[1:]))
15014,    else:
15015,        return [seq[0]]+flatten_list(seq[1:])
15016,
15017,"print(flatten_list([1,2,[3,[4],5],[6,7]]))"
15018,"[1, 2, 3, 4, 5, 6, 7]"
15019,def flatten(lst):
15020,"    return eval('[' + str(lst).replace('[', '').replace(']', '') + ']')"
15021,
15022,"L = [[[1, 2, 3], [4, 5]], 6]"
15023,print(flatten(L))
15024,flatten
15025,"[[1, 2], ""[3, 4] and [5]""]"
15026,"flatten=lambda l: reduce(lambda x,y:x+y,map(flatten,l),[]) if isinstance(l,list) else [l]"
15027,
15028,"test=[[1,2,3,[3,4,5],[6,7,[8,9,[10,[11,[12,13,14]]]]]],]"
15029,print flatten(test)
15030,
15031,"#output [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
15032,import tkinter
15033,
15034,root = tkinter.Tk()
15035,canvas = tkinter.Canvas(root)
15036,"canvas.grid(row = 0, column = 0)"
15037,photo = tkinter.PhotoImage(file = './test.gif')
15038,"canvas.create_image(0, 0, image=photo)"
15039,root.mainloop()
15040,import tkinter
15041,
15042,class Test:
15043,"    def __init__(self, master):"
15044,        canvas = tkinter.Canvas(master)
15045,"        canvas.grid(row = 0, column = 0)"
15046,        photo = tkinter.PhotoImage(file = './test.gif')
15047,"        canvas.create_image(0, 0, image=photo)"
15048,
15049,root = tkinter.Tk()
15050,test = Test(root)
15051,root.mainloop()
15052,effbot.org
15053,PhotoImage
15054,label = Label(image=ImageTk.PhotoImage(Image.fromarray(data)))
15055,photo
15056,self.photo = tkinter.PhotoImage(...)
15057,from tkinter import *
15058,"from PIL import ImageTk, Image"
15059,
15060,root = Tk()
15061,
15062,def open_img():
15063,    global img
15064,"    path = r""C:\.....\\"""
15065,    img = ImageTk.PhotoImage(Image.open(path))
15066,"    panel = Label(root, image=img)"
15067,"    panel.pack(side=""bottom"", fill=""both"")"
15068,"but1 = Button(root, text=""click to get the image"", command=open_img)"
15069,but1.pack()
15070,root.mainloop() 
15071,global
15072,self
15073,import tkinter
15074,
15075,class Test:
15076,"    def __init__(self, master):"
15077,        canvas = tkinter.Canvas(master)
15078,"        canvas.grid(row = 0, column = 0)"
15079,        self.photo = tkinter.PhotoImage(file = './test.gif') # Changes here
15080,"        canvas.create_image(0, 0, image=self.photo) # Changes here"
15081,
15082,root = tkinter.Tk()
15083,test = Test(root)
15084,root.mainloop()
15085,import tkinter
15086,l=[]
15087,class Test:
15088,
15089,"    def __init__(self, master):"
15090,        canvas = tkinter.Canvas(master)
15091,"        canvas.grid(row = 0, column = 0)"
15092,        photo = tkinter.PhotoImage(file = './test.gif')
15093,        l.append(photo)
15094,"        canvas.create_image(0, 0, image=photo)"
15095,
15096,root = tkinter.Tk()
15097,test = Test(root)
15098,root.mainloop()
15099,global photo
15100,Test
15101,global
15102,self.
15103,WebDriverWait 
15104,"def wait_for_elem_xpath(self, delay = None, xpath = """"):"
15105,    if delay is None:
15106,        delay = self.delay
15107,
15108,    try:
15109,"        myElem = WebDriverWait(self.browser, delay).until(EC.presence_of_element_located((By.XPATH , xpath)))"
15110,    except TimeoutException:
15111,"        print (""xpath: Loading took too much time!"")"
15112,    return myElem
15113,"select_all_performance = '//*[@id=""mks""]/body/div[7]/div[2]/div/div/div/div/div[2]/div/div[2]/div[2]/div/div[1]/div[1]/section/header/div'"
15114,self.wait_for_elem_xpath(xpath = select_all_performance).click()
15115,WebDriverWait
15116,click()
15117,presence_of_element_located()
15118,element_to_be_clickable()
15119,try:
15120,"    myElem = WebDriverWait(self.browser, delay).until(EC.element_to_be_clickable((By.XPATH , xpath)))"
15121,class selenium.webdriver.support.expected_conditions.presence_of_element_located(locator)
15122,
15123,Parameter : locator - used to find the element returns the WebElement once it is located
15124,
15125,Description : An expectation for checking that an element is present on the DOM of a page. This does not necessarily mean that the element is visible or interactable (i.e. clickable). 
15126,class selenium.webdriver.support.expected_conditions.visibility_of_element_located(locator)
15127,
15128,Parameter : locator -  used to find the element returns the WebElement once it is located and visible
15129,
15130,Description : An expectation for checking that an element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0.
15131,class selenium.webdriver.support.expected_conditions.element_to_be_clickable(locator)
15132,
15133,"Parameter : locator - used to find the element returns the WebElement once it is visible, enabled and interactable (i.e. clickable)."
15134,
15135,"Description : An Expectation for checking an element is visible, enabled and interactable such that you can click it. "
15136,element_to_be_clickable()
15137,.click()
15138,time.sleep(1)
15139,element_to_be_clickable()
15140,.click()
15141,df
15142,   c1   c2
15143,0  10  100
15144,1  11  110
15145,2  12  120
15146,for row in df.rows:
15147,"   print(row['c1'], row['c2'])"
15148,"for date, row in df.T.iteritems():"
15149,for row in df.iterrows():
15150,row
15151,pandas
15152,DataFrame.iterrows
15153,import pandas as pd
15154,
15155,"df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})"
15156,df = df.reset_index()  # make sure indexes pair with number of rows
15157,
15158,"for index, row in df.iterrows():"
15159,"    print(row['c1'], row['c2'])"
15160,10 100
15161,11 110
15162,12 120
15163,431341610650
15164,4.31E+11
15165,itertuples
15166,iter
15167,DataFrame.to_string()
15168,for
15169,DataFrame.apply()
15170,DataFrame.itertuples()
15171,iteritems()
15172,DataFrame.iterrows()
15173,iterrows
15174,itertuples
15175,df.iterrows()
15176,# Iterating over one column - `f` is some function that processes your data
15177,result = [f(x) for x in df['col']]
15178,"# Iterating over two columns, use `zip`"
15179,"result = [f(x, y) for x, y in zip(df['col1'], df['col2'])]"
15180,# Iterating over multiple columns - same data type
15181,"result = [f(row[0], ..., row[n]) for row in df[['col1', ...,'coln']].to_numpy()]"
15182,# Iterating over multiple columns - differing data type
15183,"result = [f(row[0], ..., row[n]) for row in zip(df['col1'], ..., df['coln'])]"
15184,"zip(df['A'], df['B'], ...)"
15185,"df[['A', 'B']].to_numpy()"
15186,to_numpy()
15187,zip
15188,A + B
15189,vec
15190,vec_numpy
15191,apply()
15192,itertuples()
15193,iteritems()
15194,iterrows()
15195,apply()
15196,itertuples()
15197,iteritems()
15198,iterrows()
15199,apply
15200,apply
15201,apply
15202,iter*
15203,apply
15204,GroupBy
15205,iterrows()
15206,for
15207,iterrows
15208,itertuples
15209,"zip(df['A'], df['B'])"
15210,df.iterrows()
15211,DataFrame.values
15212,DataFrame.to_numpy()
15213,zip
15214,"  for index, row in df.iterrows():"
15215,"      print(row[""c1""], row[""c2""])"
15216,"  for row in df.itertuples(index=True, name='Pandas'):"
15217,"      print(row.c1, row.c2)"
15218,itertuples()
15219,iterrows()
15220,dtype
15221,"    new_df = df.apply(lambda x: x * 2, axis = 1)"
15222,"for row in df[['c1','c2']].itertuples(index=True, name=None):"
15223,"getattr(row, ""c1"")"
15224,row.c1
15225,"getattr(row, ""c1"")"
15226,row.c1
15227,itertuples
15228,numba
15229,cython
15230,df.iterrows()
15231,Series
15232,iterrows()
15233,itertuples()
15234,"df = pd.DataFrame({'a': randn(1000), 'b': randn(1000),'N': randint(100, 1000, (1000)), 'x': 'x'})"
15235,
15236,"%timeit [row.a * 2 for idx, row in df.iterrows()]"
15237,"# => 10 loops, best of 3: 50.3 ms per loop"
15238,
15239,%timeit [row[1] * 2 for row in df.itertuples()]
15240,"# => 1000 loops, best of 3: 541 µs per loop"
15241,"for a,b,c in izip(df[""a""],df[""b""],df[""c""]:"
15242,iterrows()
15243,itertuples()
15244,df
15245,row[1]
15246,df.iloc
15247,"for i in range(0, len(df)):"
15248,"    print(df.iloc[i]['c1'], df.iloc[i]['c2'])"
15249,itertuples
15250,iterrows
15251,for i in range(df.shape[0])
15252,my_iter = df.itertuples()
15253,iterrows()
15254,df.apply()
15255,"def valuation_formula(x, y):"
15256,    return x * y * 0.5
15257,
15258,"df['price'] = df.apply(lambda row: valuation_formula(row['x'], row['y']), axis=1)"
15259,apply
15260,iterrows()
15261,df.itertuples(name=None)
15262,df.itertuples()
15263,itertuples()
15264,iterrows()
15265,"    df = pd.DataFrame(np.random.randint(0, 100, size=(1000000, 4)), columns=list('ABCD'))"
15266,    print(df)
15267,iterrows()
15268,start_time = time.clock()
15269,result = 0
15270,"for _, row in df.iterrows():"
15271,"    result += max(row['B'], row['C'])"
15272,
15273,"total_elapsed_time = round(time.clock() - start_time, 2)"
15274,"print(""1. Iterrows done in {} seconds, result = {}"".format(total_elapsed_time, result))"
15275,itertuples()
15276,My Col-Name is very Strange
15277,start_time = time.clock()
15278,result = 0
15279,for row in df.itertuples(index=False):
15280,"    result += max(row.B, row.C)"
15281,
15282,"total_elapsed_time = round(time.clock() - start_time, 2)"
15283,"print(""2. Named Itertuples done in {} seconds, result = {}"".format(total_elapsed_time, result))"
15284,itertuples()
15285,start_time = time.clock()
15286,result = 0
15287,"for(_, col1, col2, col3, col4) in df.itertuples(name=None):"
15288,"    result += max(col2, col3)"
15289,
15290,"total_elapsed_time = round(time.clock() - start_time, 2)"
15291,"print(""3. Itertuples done in {} seconds, result = {}"".format(total_elapsed_time, result))"
15292,itertuples()
15293,My Col-Name is very Strange
15294,start_time = time.clock()
15295,result = 0
15296,for row in df.itertuples(index=False):
15297,"    result += max(row[df.columns.get_loc('B')], row[df.columns.get_loc('C')])"
15298,
15299,"total_elapsed_time = round(time.clock() - start_time, 2)"
15300,"print(""4. Polyvalent Itertuples working even with special characters in the column name done in {} seconds, result = {}"".format(total_elapsed_time, result))"
15301,         A   B   C   D
15302,0       41  63  42  23
15303,1       54   9  24  65
15304,2       15  34  10   9
15305,3       39  94  82  97
15306,4        4  88  79  54
15307,...     ..  ..  ..  ..
15308,999995  48  27   4  25
15309,999996  16  51  34  28
15310,999997   1  39  61  14
15311,999998  66  51  27  70
15312,999999  51  53  47  99
15313,
15314,[1000000 rows x 4 columns]
15315,
15316,"1. Iterrows done in 104.96 seconds, result = 66151519"
15317,"2. Named Itertuples done in 1.26 seconds, result = 66151519"
15318,"3. Itertuples done in 0.94 seconds, result = 66151519"
15319,"4. Polyvalent Itertuples working even with special characters in the column name done in 2.94 seconds, result = 66151519"
15320,"for i, row in df.iterrows():"
15321,"    for j, column in row.iteritems():"
15322,        print(column)
15323,namedtuple
15324,from collections import namedtuple
15325,
15326,"def myiter(d, cols=None):"
15327,    if cols is None:
15328,        v = d.values.tolist()
15329,        cols = d.columns.values.tolist()
15330,    else:
15331,        j = [d.columns.get_loc(c) for c in cols]
15332,"        v = d.values[:, j].tolist()"
15333,
15334,"    n = namedtuple('MyTuple', cols)"
15335,
15336,    for line in iter(v):
15337,        yield n(*line)
15338,pd.DataFrame.itertuples
15339,list(myiter(df))
15340,
15341,"[MyTuple(c1=10, c2=100), MyTuple(c1=11, c2=110), MyTuple(c1=12, c2=120)]"
15342,pd.DataFrame.itertuples
15343,list(df.itertuples(index=False))
15344,
15345,"[Pandas(c1=10, c2=100), Pandas(c1=11, c2=110), Pandas(c1=12, c2=120)]"
15346,def iterfullA(d):
15347,    return list(myiter(d))
15348,
15349,def iterfullB(d):
15350,    return list(d.itertuples(index=False))
15351,
15352,def itersubA(d):
15353,"    return list(myiter(d, ['col3', 'col4', 'col5', 'col6', 'col7']))"
15354,
15355,def itersubB(d):
15356,"    return list(d[['col3', 'col4', 'col5', 'col6', 'col7']].itertuples(index=False))"
15357,
15358,res = pd.DataFrame(
15359,"    index=[10, 30, 100, 300, 1000, 3000, 10000, 30000],"
15360,"    columns='iterfullA iterfullB itersubA itersubB'.split(),"
15361,    dtype=float
15362,)
15363,
15364,for i in res.index:
15365,"    d = pd.DataFrame(np.random.randint(10, size=(i, 10))).add_prefix('col')"
15366,    for j in res.columns:
15367,        stmt = '{}(d)'.format(j)
15368,"        setp = 'from __main__ import d, {}'.format(j)"
15369,"        res.at[i, j] = timeit(stmt, setp, number=100)"
15370,
15371,"res.groupby(res.columns.str[4:-1], axis=1).plot(loglog=True);"
15372,intertuples
15373,interrows
15374,dataframe
15375,for x in range(len(date_example.index)):
15376,    print date_example['Date'].iloc[x]
15377, for ind in df.index:
15378,"     print df['c1'][ind], df['c2'][ind]"
15379, import pandas as pd
15380," inp = [{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]"
15381, df = pd.DataFrame(inp)
15382, print (df)
15383,
15384, #With iterrows method 
15385,
15386," for index, row in df.iterrows():"
15387,"     print(row[""c1""], row[""c2""])"
15388,
15389, #With itertuples method
15390,
15391," for row in df.itertuples(index=True, name='Pandas'):"
15392,"     print(row.c1, row.c2)"
15393,def np_vectorization(df):
15394,    np_arr = df.to_numpy()
15395,"    return pd.Series(np_arr[:,0] + np_arr[:,1], index=df.index)"
15396,
15397,def just_np_vectorization(df):
15398,    np_arr = df.to_numpy()
15399,"    return np_arr[:,0] + np_arr[:,1]"
15400,# Borrowing @KutalmisB df example
15401,"df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]}, index=['a', 'b'])"
15402,# The to_dict call results in a list of dicts
15403,# where each row_dict is a dictionary with k:v pairs of columns:value for that row
15404,for row_dict in df.to_dict(orient='records'):
15405,    print(row_dict)
15406,"{'col1':1.0, 'col2':0.1}"
15407,"{'col1':2.0, 'col2':0.2}"
15408,dataframe
15409,namedtuples
15410,ndarray
15411,"df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]}, index=['a', 'b'])"
15412,"for row in df.itertuples(index=False, name='Pandas'):"
15413,    print np.asarray(row)
15414,[ 1.   0.1]
15415,[ 2.   0.2]
15416,index=True
15417,for i in range(len(df)):
15418,    row = df.iloc[[i]]
15419,iterrows()
15420,"i, row"
15421,row
15422,i
15423,loc
15424,"for i, row in df.iterrows():"
15425,"    df_column_A = df.loc[i, 'A']"
15426,    if df_column_A == 'Old_Value':
15427,        df_column_A = 'New_value'  
15428,row
15429,row['A'] = 'New_Value'
15430,i
15431,loc
15432,"df = pd.DataFrame({'A':[1, 2, 3], 'B':[4, 5, 6], 'C':[7, 8, 9]})"
15433,print(df)
15434,for i in range(df.shape[0]):
15435,    # For printing the second column
15436,"    print(df.iloc[i, 1])"
15437,
15438,    # For printing more than one columns
15439,"    print(df.iloc[i, [0, 2]])"
15440,apply
15441,def print_row(row):
15442,"   print row['c1'], row['c2']"
15443,
15444,"df.apply(lambda row: print_row(row), axis=1)"
15445,import pandas as pd
15446,import numpy as np
15447,
15448,"df = pd.DataFrame( { 'x':[1,2,3,4,5,6], 'y':[1,1,1,0,1,1]  } )"
15449,
15450,#   x  y  desired_result
15451,#0  1  1               1
15452,#1  2  1               3
15453,#2  3  1               6
15454,#3  4  0               4
15455,#4  5  1               9
15456,#5  6  1              15
15457,df.groupby( (df.y==0).cumsum() )['x'].cumsum()
15458,groupby
15459,import numba as nb
15460,
15461,@nb.jit(nopython=True)  # Optional
15462,"def custom_sum(x,y):"
15463,    x_sum = x.copy()
15464,"    for i in range(1,len(df)):"
15465,        if y[i] > 0: x_sum[i] = x_sum[i-1] + x[i]
15466,    return x_sum
15467,
15468,"df['desired_result'] = custom_sum( df.x.to_numpy(), df.y.to_numpy() )"
15469,if y[i] > 0: x_sum[i] = x_sum[i-1] + x[i]
15470,subset = row['c1'][0:5]
15471,all = row['c1'][:]
15472,np.asarray(all)
15473,"imgs[:] = cv2.resize(imgs[:], (224,224) ) # Resize every image in an hdf5 file"
15474,df.iterrows()
15475,"tuple(a, b)"
15476,a
15477,index
15478,b
15479,row
15480,import pandas as pd
15481,
15482," a = [1, 2, 3, 4]"
15483," b = [5, 6, 7, 8]"
15484,
15485," mjr = pd.DataFrame({'a':a, 'b':b})"
15486,
15487, size = mjr.shape
15488,
15489, for i in range(size[0]):
15490,     for j in range(size[1]):
15491,"         print(mjr.iloc[i, j])"
15492,age
15493,gender
15494,"for index, row in users_df.iterrows():"
15495,  user_id = row['user_id']
15496,  # trigger expensive network request once for each row
15497,  response_dict = backend_api.get(f'/api/user-data/{user_id}')
15498,  # extend dataframe with multiple data from response
15499,"  users_df.at[index, 'age'] = response_dict.get('age')"
15500,"  users_df.at[index, 'gender'] = response_dict.get('gender')"
15501,class DataFrameReader:
15502,"  def __init__(self, df):"
15503,    self._df = df
15504,    self._row = None
15505,    self._columns = df.columns.tolist()
15506,    self.reset()
15507,    self.row_index = 0
15508,
15509,"  def __getattr__(self, key):"
15510,    return self.__getitem__(key)
15511,
15512,  def read(self) -> bool:
15513,"    self._row = next(self._iterator, None)"
15514,    self.row_index += 1
15515,    return self._row is not None
15516,
15517,  def columns(self):
15518,    return self._columns
15519,
15520,  def reset(self) -> None:
15521,    self._iterator = self._df.itertuples()
15522,
15523,  def get_index(self):
15524,    return self._row[0]
15525,
15526,  def index(self):
15527,    return self._row[0]
15528,
15529,"  def to_dict(self, columns: List[str] = None):"
15530,    return self.row(columns=columns)
15531,
15532,"  def tolist(self, cols) -> List[object]:"
15533,    return [self.__getitem__(c) for c in cols]
15534,
15535,"  def row(self, columns: List[str] = None) -> Dict[str, object]:"
15536,    cols = set(self._columns if columns is None else columns)
15537,    return {c : self.__getitem__(c) for c in self._columns if c in cols}
15538,
15539,"  def __getitem__(self, key) -> object:"
15540,    # the df index of the row is at index 0
15541,    try:
15542,        if type(key) is list:
15543,            ix = [self._columns.index(key) + 1 for k in key]
15544,        else:
15545,            ix = self._columns.index(key) + 1
15546,        return self._row[ix]
15547,    except BaseException as e:
15548,        return None
15549,
15550,  def __next__(self) -> 'DataFrameReader':
15551,    if self.read():
15552,        return self
15553,    else:
15554,        raise StopIteration
15555,
15556,  def __iter__(self) -> 'DataFrameReader':
15557,    return self
15558,for row in DataFrameReader(df):
15559,  print(row.my_column_name)
15560,  print(row.to_dict())
15561,  print(row['my_column_name'])
15562,  print(row.tolist())
15563,splitting
15564,merging
15565,iterrows()
15566,itertuples()
15567,index
15568,index
15569,Number of records | Iteration per second
15570,========================================
15571,"100,000           | 500 it/s"
15572,"500,000           | 200 it/s"
15573,"1,000,000         | 50 it/s"
15574,"5,000,000         | 20 it/s"
15575,# Step 1 (Splitting/Slicing)
15576,import pandas as pd
15577,df_all = pd.read_csv('C:/KtV.csv')
15578,df_index = 100000
15579,df_len = len(df)
15580,for i in range(df_len // df_index + 1):
15581,    lower_bound = i * df_index 
15582,"    higher_bound = min(lower_bound + df_index, df_len)"
15583,    # splitting/slicing df (make sure to copy() otherwise it will be a view
15584,    df = df_all[lower_bound:higher_bound].copy()
15585,    '''
15586,    write your iteration over the sliced df here
15587,    using iterrows() or intertuples() or ...
15588,    '''
15589,    # writing into csv files
15590,    df.to_csv('C:/KtV_prep_'+str(i)+'.csv')
15591,
15592,
15593,
15594,# Step 2 (Merging)
15595,filename='C:/KtV_prep_'
15596,df = (pd.read_csv(f) for f in [filename+str(i)+'.csv' for i in range(ktv_len // ktv_index + 1)])
15597,df_prep_all = pd.concat(df)
15598,df_prep_all.to_csv('C:/KtV_prep_all.csv')
15599,ufuncs
15600,vectorize
15601,numba
15602,"from numba import vectorize, float64"
15603,
15604,@vectorize([float64(float64)])
15605,def f(x):
15606,"    #x is your line, do something with it, and return a float"
15607,df.iloc[]
15608,list
15609,"x = '[ ""A"",""B"",""C"" , "" D""]'"
15610,"x = [""A"", ""B"", ""C"", ""D""] "
15611,strip()
15612,split()
15613,>>> import ast
15614,">>> x = '[ ""A"",""B"",""C"" , "" D""]'"
15615,>>> x = ast.literal_eval(x)
15616,>>> x
15617,"['A', 'B', 'C', ' D']"
15618,>>> x = [n.strip() for n in x]
15619,>>> x
15620,"['A', 'B', 'C', 'D']"
15621,ast.literal_eval
15622,ast.literal_eval
15623,None
15624,eval
15625,ast.literal_eval
15626,ast.literal_eval
15627,eval
15628,json
15629,json.loads(your_data)
15630,>>> import json
15631,">>> x = '[ ""A"",""B"",""C"" , "" D""]'"
15632,>>> json.loads(x)
15633,"['A', 'B', 'C', ' D']"
15634,">>> x = '[ ""A"",""B"",""C"" , {""D"":""E""}]'"
15635,>>> json.loads(x)
15636,"['A', 'B', 'C', {'D': 'E'}]"
15637,"'[""a"",""b""]'"
15638,"""['a','b']"""
15639,".replace('\'', '""')"
15640,ast.literal_eval
15641,b
15642,bytes
15643,eval
15644,>>> import ast
15645,">>> ast.literal_eval('[""A"",""B"" ,""C"" ,"" D""]')"
15646,"[""A"", ""B"", ""C"", "" D""]"
15647,strip
15648,">>> x='[  ""A"",  "" B"", ""C"",""D ""]'"
15649,">>> re.findall(r'""\s*([^""]*?)\s*""', x)"
15650,"['A', 'B', 'C', 'D']"
15651,eval
15652,eval
15653,literal_eval
15654,"x = eval('[ ""A"",""B"",""C"" , "" D""]')"
15655,"x = [x.strip() for x in eval('[ ""A"",""B"",""C"" , "" D""]')]"
15656,import ast
15657,"list(map(str.strip, ast.literal_eval(u'[ ""A"",""B"",""C"" , "" D""]')))"
15658,"# ['A', 'B', 'C', 'D']"
15659,
15660,import timeit
15661,"timeit.timeit(stmt=""list(map(str.strip, ast.literal_eval(u'[ \""A\"",\""B\"",\""C\"" , \"" D\""]')))"", setup='import ast', number=100000)"
15662,# 1.292875313000195
15663,import json
15664,"list(map(str.strip, json.loads(u'[ ""A"",""B"",""C"" , "" D""]')))"
15665,"# ['A', 'B', 'C', 'D']"
15666,
15667,import timeit
15668,"timeit.timeit(stmt=""list(map(str.strip, json.loads(u'[ \""A\"",\""B\"",\""C\"" , \"" D\""]')))"", setup='import json', number=100000)"
15669,# 0.27833264000014424
15670,"list(map(str.strip, u'[ ""A"",""B"",""C"" , "" D""]'.strip('][').replace('""', '').split(',')))"
15671,"# ['A', 'B', 'C', 'D']"
15672,
15673,import timeit
15674,"timeit.timeit(stmt=""list(map(str.strip, u'[ \""A\"",\""B\"",\""C\"" , \"" D\""]'.strip('][').replace('\""', '').split(',')))"", number=100000)"
15675,# 0.12935059100027502
15676,u
15677,"'[ ""A"",""B"",""C"" , "" D""]'"
15678,import ast
15679,"l = ast.literal_eval('[ ""A"",""B"",""C"" , "" D""]')"
15680,l = [i.strip() for i in l]
15681,">>> x = u'[ ""A"",""B"",""C"" , "" D""]'"
15682,">>> ls = x.strip('[]').replace('""', '').replace(' ', '').split(',')"
15683,>>> ls
15684,"['A', 'B', 'C', 'D']"
15685,"x = '[ ""A"",""B"",""C"" , "" D""]'"
15686,print(list(eval(x)))
15687,import re
15688,"x = u'[ ""A"",""B"",""C"" , "" D""]'"
15689,"junkers = re.compile('[["" \]]')"
15690,"result = junkers.sub('', x).split(',')"
15691,print result
15692,"--->  [u'A', u'B', u'C', u'D']"
15693,"l_x = [i.strip() for i in x[1:-1].replace('""',"""").split(',')]"
15694,"x = '[ ""A"",""B"",""C"" , "" D""]'"
15695,# str indexing to eliminate the brackets
15696,# replace as split will otherwise retain the quotes in returned list
15697,# split to conv to list
15698,"l_x = x[1:-1].replace('""',"""").split(',')"
15699,"for i in range(0, len(l_x)):"
15700,    print(l_x[i])
15701,# vvvv output vvvvv
15702,'''
15703, A
15704,B
15705,C 
15706,  D
15707,'''
15708,print(type(l_x)) # out: class 'list'
15709,print(len(l_x)) # out: 4
15710,l_x = [i.strip() for i in l_x] # list comprehension to clean up
15711,"for i in range(0, len(l_x)):"
15712,    print(l_x[i])
15713,# vvvvv output vvvvv
15714,'''
15715,A
15716,B
15717,C
15718,D
15719,'''
15720,"x = '[ ""A"",""B"",""C"" , "" D"", [""E"",""F"",""G""]]'"
15721,"l_x = x[1:-1].split(',')"
15722,l_x = [i
15723,"    .replace(']', '')"
15724,"    .replace('[', '')"
15725,"    .replace('""', '')"
15726,    .strip() for i in l_x
15727,]
15728,"# returns ['A', 'B', 'C', 'D', 'E', 'F', 'G']"
15729,import re
15730,"x = '[ ""A"",""B"",""C"" , "" D"", ""[""E"",""F"",""G""]"",""Z"", ""Y"", ""[""H"",""I"",""J""]"", ""K"", ""L""]'"
15731,# clean it up so regex is simpler
15732,"x = x.replace('""', '').replace(' ', '') "
15733,# look ahead for the bracketed text that signifies nested list
15734,"l_x = re.split(r',(?=\[[A-Za-z0-9\',]+\])|(?<=\]),', x[1:-1])"
15735,print(l_x)
15736,# flatten and split the non nested list items
15737,"l_x0 = [item for items in l_x for item in items.split(',') if not '[' in items]"
15738,# convert the nested lists to lists
15739,l_x1 = [
15740,"    i[1:-1].split(',') for i in l_x if '[' in i "
15741,]
15742,# add the two lists 
15743,l_x = l_x0 + l_x1
15744,'[]'
15745,['']
15746,>>> from pyparsing import *
15747,">>> x =u'[ ""A"",""B"",""C"" , "" D""]'"
15748,">>> LBR,RBR = map(Suppress,""[]"")"
15749,">>> qs = quotedString.setParseAction(removeQuotes, lambda t: t[0].strip())"
15750,>>> qsList = LBR + delimitedList(qs) + RBR
15751,>>> print qsList.parseString(x).asList()
15752,"[u'A', u'B', u'C', u'D']"
15753,def textToList(hashtags):
15754,"    return hashtags.strip('[]').replace('\'', '').replace(' ', '').split(',')"
15755,
15756,"hashtags = ""[ 'A','B','C' , ' D']"""
15757,hashtags = textToList(hashtags)
15758,
15759,"Output: ['A', 'B', 'C', 'D']"
15760,">print byteify(json.loads(u'[ ""A"",""B"",""C"" , "" D""]')"
15761,">print byteify(json.loads(u""[ 'A','B','C' , ' D']"".replace('\'','""')))"
15762,"['A', 'B', 'C', ' D']"
15763,"['A', 'B', 'C', ' D']"
15764,unicode
15765,"x = '[ ""A"",""B"",""C"" , "" D""]'"
15766,import csv
15767,with open('YourCSVFile.csv') as csv_file:
15768,"    reader = csv.reader(csv_file, delimiter=',')"
15769,    rows = list(reader)
15770,
15771,listItems = rows[0]
15772,listItems
15773,list(reader)
15774,"""['1', '2', '3']"""
15775,csv.reader
15776,"['1', '2', '3']"
15777,"[1, 2, 3]"
15778,"[1,2,3] 4 5"
15779,list(reader)
15780,"[[""[1,2,3]"", ""4"", ""5""], ...]"
15781,rows[0]
15782,"[""[1,2,3]"", ""4"", ""5""]"
15783,def parse_strlist(sl):
15784,import re
15785,"clean = re.sub(""[\[\],\s]"","""",sl)"
15786,"splitted = re.split(""[\'\""]"",clean)"
15787,values_only = [s for s in splitted if s != '']
15788,return values_only
15789,">>> mylist=[1,2,3,4,5,'baloney','alfalfa']"
15790,>>> strlist=str(mylist)
15791,"['1', ' 2', ' 3', ' 4', ' 5', "" 'baloney'"", "" 'alfalfa'""]"
15792,">>> mylistfromstring=(strlist[1:-1].split(', '))"
15793,>>> mylistfromstring[3]
15794,'4'
15795,>>> for entry in mylistfromstring:
15796,...     print(entry)
15797,...     type(entry)
15798,... 
15799,1
15800,<class 'str'>
15801,2
15802,<class 'str'>
15803,3
15804,<class 'str'>
15805,4
15806,<class 'str'>
15807,5
15808,<class 'str'>
15809,'baloney'
15810,<class 'str'>
15811,'alfalfa'
15812,<class 'str'>
15813,"[x for x in  x.split('[')[1].split(']')[0].split('""')[1:-1] if x not in[',',' , ',', ']]"
15814,"x = '[ ""A"",""B"",""C"" , "" D""]'"
15815,"[i.strip() for i in x.split('""') if len(i.strip().strip(',').strip(']').strip('['))>0]"
15816,from time import time
15817,import re
15818,import json
15819,
15820,
15821,my_str = str(list(range(19)))
15822,print(my_str)
15823,
15824,reps = 100000
15825,
15826,start = time()
15827,"for i in range(0, reps):"
15828,"    re.findall(""\w+"", my_str)"
15829,"print(""Regex method:\t"", (time() - start) / reps)"
15830,
15831,start = time()
15832,"for i in range(0, reps):"
15833,    json.loads(my_str)
15834,"print(""json method:\t"", (time() - start) / reps)"
15835,
15836,start = time()
15837,"for i in range(0, reps):"
15838,    ast.literal_eval(my_str)
15839,"print(""ast method:\t\t"", (time() - start) / reps)"
15840,
15841,start = time()
15842,"for i in range(0, reps):"
15843,    [n.strip() for n in my_str]
15844,"print(""strip method:\t"", (time() - start) / reps)"
15845,
15846,
15847,
15848,    regex method:    6.391477584838867e-07
15849,    json method:     2.535374164581299e-06
15850,    ast method:      2.4425282478332518e-05
15851,    strip method:    4.983267784118653e-06
15852,IN
15853,NOT IN
15854,"df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})"
15855,"countries_to_keep = ['UK', 'China']"
15856,
15857,# pseudo-code:
15858,df[df['country'] not in countries_to_keep]
15859,"df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})"
15860,"df2 = pd.DataFrame({'country': ['UK', 'China'], 'matched': True})"
15861,
15862,# IN
15863,"df.merge(df2, how='inner', on='country')"
15864,
15865,# NOT IN
15866,"not_in = df.merge(df2, how='left', on='country')"
15867,not_in = not_in[pd.isnull(not_in['matched'])]
15868,~
15869,pd.Series.isin
15870,something.isin(somewhere)
15871,~something.isin(somewhere)
15872,import pandas as pd
15873,
15874,>>> df
15875,  country
15876,0        US
15877,1        UK
15878,2   Germany
15879,3     China
15880,>>> countries_to_keep
15881,"['UK', 'China']"
15882,>>> df.country.isin(countries_to_keep)
15883,0    False
15884,1     True
15885,2    False
15886,3     True
15887,"Name: country, dtype: bool"
15888,>>> df[df.country.isin(countries_to_keep)]
15889,  country
15890,1        UK
15891,3     China
15892,>>> df[~df.country.isin(countries_to_keep)]
15893,  country
15894,0        US
15895,2   Germany
15896,"df = pd.Series({'countries':['US','UK','Germany','China']})"
15897,df
15898,DataFrame
15899,countries
15900,df[~df.countries.isin(countries)]
15901,DataFrame
15902,Series
15903,countries
15904,"In [5]: df.query(""countries in @countries_to_keep"")"
15905,Out[5]:
15906,  countries
15907,1        UK
15908,3     China
15909,
15910,"In [6]: df.query(""countries not in @countries_to_keep"")"
15911,Out[6]:
15912,  countries
15913,0        US
15914,2   Germany
15915,countries
15916,countries_to_keep
15917,countries_to_keep
15918,countries_to_keep
15919,Series.isin
15920,DataFrame.isin
15921,isin
15922,"df = pd.DataFrame({'countries': ['US', 'UK', 'Germany', np.nan, 'China']})"
15923,df
15924,  countries
15925,0        US
15926,1        UK
15927,2   Germany
15928,3     China
15929,
15930,"c1 = ['UK', 'China']             # list"
15931,c2 = {'Germany'}                 # set
15932,"c3 = pd.Series(['China', 'US'])  # Series"
15933,"c4 = np.array(['US', 'UK'])      # array"
15934,Series.isin
15935,df['countries'].isin(c1)
15936,
15937,0    False
15938,1     True
15939,2    False
15940,3    False
15941,4     True
15942,"Name: countries, dtype: bool"
15943,
15944,# `in` operation
15945,df[df['countries'].isin(c1)]
15946,
15947,  countries
15948,1        UK
15949,4     China
15950,
15951,# `not in` operation
15952,df[~df['countries'].isin(c1)]
15953,
15954,  countries
15955,0        US
15956,2   Germany
15957,3       NaN
15958,# Filter with `set` (tuples work too)
15959,df[df['countries'].isin(c2)]
15960,
15961,  countries
15962,2   Germany
15963,# Filter with another Series
15964,df[df['countries'].isin(c3)]
15965,
15966,  countries
15967,0        US
15968,4     China
15969,# Filter with array
15970,df[df['countries'].isin(c4)]
15971,
15972,  countries
15973,0        US
15974,1        UK
15975,df2 = pd.DataFrame({
15976,"    'A': ['x', 'y', 'z', 'q'], 'B': ['w', 'a', np.nan, 'x'], 'C': np.arange(4)})"
15977,df2
15978,
15979,   A    B  C
15980,0  x    w  0
15981,1  y    a  1
15982,2  z  NaN  2
15983,3  q    x  3
15984,
15985,"c1 = ['x', 'w', 'p']"
15986,isin
15987,DataFrame.isin
15988,"df2[['A', 'B']].isin(c1)"
15989,
15990,      A      B
15991,0   True   True
15992,1  False  False
15993,2  False  False
15994,3  False   True
15995,True
15996,any
15997,"df2[['A', 'B']].isin(c1).any(axis=1)"
15998,
15999,0     True
16000,1    False
16001,2    False
16002,3     True
16003,dtype: bool
16004,
16005,"df2[df2[['A', 'B']].isin(c1).any(axis=1)]"
16006,
16007,   A  B  C
16008,0  x  w  0
16009,3  q  x  3
16010,df2.isin(c1).any(axis=1)
16011,True
16012,all
16013,"df2[df2[['A', 'B']].isin(c1).all(axis=1)]"
16014,
16015,   A  B  C
16016,0  x  w  0
16017,numpy.isin
16018,query
16019,numpy.isin
16020,# `in` operation
16021,"df[np.isin(df['countries'], c1)]"
16022,
16023,  countries
16024,1        UK
16025,4     China
16026,
16027,# `not in` operation
16028,"df[np.isin(df['countries'], c1, invert=True)]"
16029,
16030,  countries
16031,0        US
16032,2   Germany
16033,3       NaN
16034,isin
16035,in
16036,c1_set = set(c1) # Using `in` with `sets` is a constant time operation... 
16037,                 # This doesn't matter for pandas because the implementation differs.
16038,# `in` operation
16039,df[[x in c1_set for x in df['countries']]]
16040,
16041,  countries
16042,1        UK
16043,4     China
16044,
16045,# `not in` operation
16046,df[[x not in c1_set for x in df['countries']]]
16047,
16048,  countries
16049,0        US
16050,2   Germany
16051,3       NaN
16052,DataFrame.query
16053,criterion = lambda row: row['countries'] not in countries
16054,"not_in = df[df.apply(criterion, axis=1)]"
16055,"df[df['A'].isin([3, 6])]"
16056,"df[-df[""A""].isin([3, 6])]"
16057,"df[~df[""A""].isin([3, 6])]"
16058,"df[df[""A""].isin([3, 6]) == False]"
16059,"df[np.logical_not(df[""A""].isin([3, 6]))]"
16060,logical_not
16061,~
16062,dfbc = dfbc[~dfbc['BUSINESS_ID'].isin(dfProfilesBusIds['BUSINESS_ID'])]
16063,"df = pd.DataFrame({'animals': np.random.choice(['cat', 'dog', 'mouse', 'birds'], size=10**7), "
16064,"                   'number': np.random.randint(0,100, size=(10**7,))})"
16065,
16066,df.info()
16067,
16068,<class 'pandas.core.frame.DataFrame'>
16069,"RangeIndex: 10000000 entries, 0 to 9999999"
16070,Data columns (total 2 columns):
16071, #   Column   Dtype 
16072,---  ------   ----- 
16073, 0   animals  object
16074, 1   number   int64 
16075,"dtypes: int64(1), object(1)"
16076,memory usage: 152.6+ MB
16077,%%timeit
16078,# .isin() by one column
16079,"conditions = ['cat', 'dog']"
16080,df[df.animals.isin(conditions)]
16081,"367 ms ± 2.34 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16082,%%timeit
16083,# .query() by one column
16084,"conditions = ['cat', 'dog']"
16085,df.query('animals in @conditions')
16086,"395 ms ± 3.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16087,%%timeit
16088,# .loc[]
16089,df.loc[(df.animals=='cat')|(df.animals=='dog')]
16090,"987 ms ± 5.17 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16091,%%timeit
16092,"df[df.apply(lambda x: x['animals'] in ['cat', 'dog'], axis=1)]"
16093,"41.9 s ± 490 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16094,%%timeit
16095,new_df = df.set_index('animals')
16096,"new_df.loc[['cat', 'dog'], :]"
16097,"3.64 s ± 62.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16098,%%timeit
16099,new_df = df.set_index('animals')
16100,"new_df[new_df.index.isin(['cat', 'dog'])]"
16101,"469 ms ± 8.98 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16102,%%timeit
16103,"s = pd.Series(['cat', 'dog'], name='animals')"
16104,"df.merge(s, on='animals', how='inner')"
16105,"796 ms ± 30.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16106,isin
16107,apply()
16108,.isin()
16109,.query()
16110,df.query('country.isin(@countries_to_keep).values')
16111,
16112,# Or alternatively:
16113,"df.query('country.isin([""UK"", ""China""]).values')"
16114,~
16115,df.query('~country.isin(@countries_to_keep).values')
16116,df.query('country == @countries_to_keep')
16117,
16118,# Or alternatively:
16119,"df.query('country == [""UK"", ""China""]')"
16120,!=
16121,df.query('country != @countries_to_keep')
16122,in
16123,not in
16124,query
16125,query
16126,"df = pd.DataFrame({'countries':['US','UK','Germany','China']})"
16127,"countries = ['UK','China']"
16128,df[df.countries.isin(countries)]
16129,df[df.countries.isin([x for x in np.unique(df.countries) if x not in countries])]
16130,"df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})"
16131,"countries_to_keep = ['Germany', 'US']"
16132,
16133,
16134,ind=[df.index[df['country']==i].tolist() for i in countries_to_keep]
16135,flat_ind=[item for sublist in ind for item in sublist]
16136,
16137,df.reindex(flat_ind)
16138,
16139,   country
16140,2  Germany
16141,0       US
16142,"sale_method = pd.DataFrame(model_data[""Sale Method""].str.upper())"
16143,"sale_method[""sale_classification""] = np.where("
16144,"    sale_method[""Sale Method""].isin([""PRIVATE""]),"
16145,"    ""private"","
16146,    np.where(
16147,"        sale_method[""Sale Method""].str.contains(""AUCTION""), ""auction"", ""other"""
16148,"    ),"
16149,)
16150,color
16151,color='green'
16152,Set == 'Z'
16153,color='red'
16154,    Type       Set
16155,1    A          Z
16156,2    B          Z           
16157,3    B          X
16158,4    C          Y
16159,"df['color'] = np.where(df['Set']=='Z', 'green', 'red')"
16160,import pandas as pd
16161,import numpy as np
16162,
16163,"df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})"
16164,"df['color'] = np.where(df['Set']=='Z', 'green', 'red')"
16165,print(df)
16166,  Set Type  color
16167,0   Z    A  green
16168,1   Z    B  green
16169,2   X    B    red
16170,3   Y    C    red
16171,np.select
16172,color
16173,yellow
16174,(df['Set'] == 'Z') & (df['Type'] == 'A')
16175,blue
16176,(df['Set'] == 'Z') & (df['Type'] == 'B')
16177,purple
16178,(df['Type'] == 'B')
16179,black
16180,"df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})"
16181,conditions = [
16182,"    (df['Set'] == 'Z') & (df['Type'] == 'A'),"
16183,"    (df['Set'] == 'Z') & (df['Type'] == 'B'),"
16184,    (df['Type'] == 'B')]
16185,"choices = ['yellow', 'blue', 'purple']"
16186,"df['color'] = np.select(conditions, choices, default='black')"
16187,print(df)
16188,  Set Type   color
16189,0   Z    A  yellow
16190,1   Z    B    blue
16191,2   X    B  purple
16192,3   Y    C   black
16193,pandas
16194,pandas
16195,"A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead"
16196,df['color'] = ['red' if x == 'Z' else 'green' for x in df['Set']]
16197,import pandas as pd
16198,import numpy as np
16199,
16200,"df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})"
16201,%timeit df['color'] = ['red' if x == 'Z' else 'green' for x in df['Set']]
16202,"%timeit df['color'] = np.where(df['Set']=='Z', 'green', 'red')"
16203,%timeit df['color'] = df.Set.map( lambda x: 'red' if x == 'Z' else 'green')
16204,
16205,"1000 loops, best of 3: 239 µs per loop"
16206,"1000 loops, best of 3: 523 µs per loop"
16207,"1000 loops, best of 3: 263 µs per loop"
16208,"pd.DataFrame({'Type':list('ABBC')*100000, 'Set':list('ZZXY')*100000})"
16209,numpy.where
16210,map
16211,numpy.where
16212,df['color'] = ['red' if (x['Set'] == 'Z') & (x['Type'] == 'B') else 'green' for x in df]
16213,"df['color_type'] = np.where(df['Set']=='Z', 'green', df['Type'])"
16214,.iterrows()
16215,df['color'] = df.Set.map( lambda x: 'red' if x == 'Z' else 'green')
16216,def set_color(row):
16217,"    if row[""Set""] == ""Z"":"
16218,"        return ""red"""
16219,    else:
16220,"        return ""green"""
16221,
16222,"df = df.assign(color=df.apply(set_color, axis=1))"
16223,
16224,print(df)
16225,  Set Type  color
16226,0   Z    A    red
16227,1   Z    B    red
16228,2   X    B  green
16229,3   Y    C  green
16230,def set_color(row):
16231,"    if row[""Set""] == ""Z"":"
16232,"        return ""red"""
16233,"    elif row[""Type""] == ""C"":"
16234,"        return ""blue"""
16235,    else:
16236,"        return ""green"""
16237,
16238,"df = df.assign(color=df.apply(set_color, axis=1))"
16239,
16240,print(df)
16241,  Set Type  color
16242,0   Z    A    red
16243,1   Z    B    red
16244,2   X    B  green
16245,3   Y    C   blue
16246,assign
16247,apply
16248,"from plydata import define, if_else"
16249,if_else
16250,"df = define(df, color=if_else('Set==""Z""', '""red""', '""green""'))"
16251,
16252,print(df)
16253,  Set Type  color
16254,0   Z    A    red
16255,1   Z    B    red
16256,2   X    B  green
16257,3   Y    C  green
16258,if_else
16259,"df = define(df, color=if_else("
16260,"    'Set==""Z""',"
16261,"    '""red""',"
16262,"    if_else('Type==""C""', '""green""', '""blue""')))"
16263,
16264,print(df)                            
16265,  Set Type  color
16266,0   Z    A    red
16267,1   Z    B    red
16268,2   X    B   blue
16269,3   Y    C  green
16270,"if row[""Set""].shift(1) == ""Z"":"
16271,apply
16272,"def map_values(row, values_dict):"
16273,    return values_dict[row]
16274,
16275,"values_dict = {'A': 1, 'B': 2, 'C': 3, 'D': 4}"
16276,
16277,"df = pd.DataFrame({'INDICATOR': ['A', 'B', 'C', 'D'], 'VALUE': [10, 9, 8, 7]})"
16278,
16279,"df['NEW_VALUE'] = df['INDICATOR'].apply(map_values, args = (values_dict,))"
16280,df
16281,Out[2]: 
16282,  INDICATOR  VALUE  NEW_VALUE
16283,0         A     10          1
16284,1         B      9          2
16285,2         C      8          3
16286,3         D      7          4
16287,ifelse
16288,df['NEW_VALUE'] = df['INDICATOR'].map(values_dict)
16289,apply
16290,dict.get
16291,"df['NEW_VALUE'] = [values_dict.get(v, None) for v in df['INDICATOR']]"
16292,.map()
16293,.apply()
16294,.apply()
16295,.map()
16296,.loc
16297,"df=pd.DataFrame(dict(Type='A B B C'.split(), Set='Z Z X Y'.split()))"
16298,"df['Color'] = ""red"""
16299,"df.loc[(df['Set']==""Z""), 'Color'] = ""green"""
16300,
16301,#practice!
16302,"df.loc[(df['Set']==""Z"")&(df['Type']==""B"")|(df['Type']==""C""), 'Color'] = ""purple"""
16303,"df=pd.DataFrame(dict(Type='A B B C'.split(), Set='Z Z X Y'.split()))"
16304,
16305,# df so far: 
16306,  Type Set  
16307,0    A   Z 
16308,1    B   Z 
16309,2    B   X 
16310,3    C   Y
16311,"df['Color'] = ""red"""
16312,"df.loc[(df['Set']==""Z""), 'Color'] = ""green"""
16313,
16314,
16315,# df: 
16316,  Type Set  Color
16317,0    A   Z  green
16318,1    B   Z  green
16319,2    B   X    red
16320,3    C   Y    red
16321,"df.loc[(df['Set']==""Z"")&(df['Type']==""B"")|(df['Type']==""C""), 'Color'] = ""purple"""
16322,where
16323,mask
16324,df['color'] = 'green'
16325,"df['color'] = df['color'].where(df['Set']=='Z', other='red')"
16326,# Replace values where the condition is False
16327,df['color'] = 'red'
16328,"df['color'] = df['color'].mask(df['Set']=='Z', other='green')"
16329,# Replace values where the condition is True
16330,transform
16331,df['color'] = df['Set'].transform(lambda x: 'green' if x == 'Z' else 'red')
16332,  Type Set  color
16333,1    A   Z  green
16334,2    B   Z  green
16335,3    B   X    red
16336,4    C   Y    red
16337,import pandas as pd
16338,import numpy as np
16339,"df = pd.DataFrame({'Type':list('ABBC')*1000000, 'Set':list('ZZXY')*1000000})"
16340, 
16341,"%timeit df['color1'] = 'red'; df['color1'].where(df['Set']=='Z','green')"
16342,%timeit df['color2'] = ['red' if x == 'Z' else 'green' for x in df['Set']]
16343,"%timeit df['color3'] = np.where(df['Set']=='Z', 'red', 'green')"
16344,%timeit df['color4'] = df.Set.map(lambda x: 'red' if x == 'Z' else 'green')
16345,
16346,"397 ms ± 101 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16347,976 ms ± 241 ms per loop
16348,673 ms ± 139 ms per loop
16349,796 ms ± 182 ms per loop
16350,np.where()
16351,df = pd.DataFrame({'A':range(3)})
16352,"df['B'] = np.where(df.A>2, 'yes', 'no')"
16353,apply()
16354,"arr = pd.DataFrame({'A':list('abc'), 'B':range(3), 'C':range(3,6), 'D':range(6, 9)})"
16355,    A   B   C   D
16356,0   a   0   3   6
16357,1   b   1   4   7
16358,2   c   2   5   8
16359,if arr.A =='a' then arr.B elif arr.A=='b' then arr.C elif arr.A == 'c' then arr.D else something_else
16360,"arr['E'] = arr.apply(lambda x: x['B'] if x['A']=='a' else(x['C'] if x['A']=='b' else(x['D'] if x['A']=='c' else 1234)), axis=1)"
16361,    A   B   C   D   E
16362,0   a   0   3   6   0
16363,1   b   1   4   7   4
16364,2   c   2   5   8   8
16365,.apply()
16366,df['color'] = df['Set'].apply(lambda set_: 'green' if set_=='Z' else 'red')
16367,df
16368,>>> print(df)
16369,  Type Set  color
16370,0    A   Z  green
16371,1    B   Z  green
16372,2    B   X    red
16373,3    C   Y    red
16374,# First create a dictionary of manually stored values
16375,color_dict = {'Z':'red'}
16376,
16377,"# Second, build a dictionary of ""other"" values"
16378,color_dict_other = {x:'green' for x in df['Set'].unique() if x not in color_dict.keys()}
16379,
16380,"# Next, merge the two"
16381,color_dict.update(color_dict_other)
16382,
16383,"# Finally, map it to your column"
16384,df['color'] = df['Set'].map(color_dict)
16385,data_size
16386,10**4
16387,n_distinct
16388,data_size/4
16389,random.choices()
16390,pd.Series.mask
16391,df.case_when(
16392,"    df.col1 == ""Z"",  # condition"
16393,"    ""green"",         # value if True"
16394,"    ""red"",           # value if False"
16395,"    column_name = ""color"""
16396,    )
16397,
16398,  Type Set  color
16399,1    A   Z  green
16400,2    B   Z  green
16401,3    B   X    red
16402,4    C   Y    red
16403,df.case_when(
16404,"    df.Set.eq('Z') & df.Type.eq('A'), 'yellow', # condition, result"
16405,"    df.Set.eq('Z') & df.Type.eq('B'), 'blue',   # condition, result"
16406,"    df.Type.eq('B'), 'purple',                  # condition, result"
16407,"    'black',              # default if none of the conditions evaluate to True"
16408,    column_name = 'color'  
16409,)
16410,  Type  Set   color
16411,1    A   Z  yellow
16412,2    B   Z    blue
16413,3    B   X  purple
16414,4    C   Y   black
16415,np.select
16416,"a = np.array([['A','Z'],['B','Z'],['B','X'],['C','Y']])"
16417,"df = pd.DataFrame(a,columns=['Type','Set'])"
16418,
16419,conditions = [
16420,    df['Set'] == 'Z'
16421,]
16422,
16423,outputs = [
16424,    'Green'
16425,    ]
16426,"             # conditions Z is Green, Red Otherwise."
16427,"res = np.select(conditions, outputs, 'Red')"
16428,res 
16429,"array(['Green', 'Green', 'Red', 'Red'], dtype='<U5')"
16430,"df.insert(2, 'new_column',res)    "
16431,
16432,df
16433,    Type    Set new_column
16434,0   A   Z   Green
16435,1   B   Z   Green
16436,2   B   X   Red
16437,3   C   Y   Red
16438,
16439,df.to_numpy()    
16440,    
16441,"array([['A', 'Z', 'Green'],"
16442,"       ['B', 'Z', 'Green'],"
16443,"       ['B', 'X', 'Red'],"
16444,"       ['C', 'Y', 'Red']], dtype=object)"
16445,
16446,%%timeit conditions = [df['Set'] == 'Z'] 
16447,outputs = ['Green'] 
16448,"np.select(conditions, outputs, 'Red')"
16449,
16450,"134 µs ± 9.71 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
16451,
16452,"df2 = pd.DataFrame({'Type':list('ABBC')*1000000, 'Set':list('ZZXY')*1000000})"
16453,%%timeit conditions = [df2['Set'] == 'Z'] 
16454,outputs = ['Green'] 
16455,"np.select(conditions, outputs, 'Red')"
16456,
16457,"188 ms ± 26.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
16458,#Define the sprite class
16459,class Sprite:
16460,
16461,"    def __init__(self,x,y, name):"
16462,        self.x=x
16463,
16464,        self.y=y
16465,
16466,        self.image = pygame.image.load(name)
16467,
16468,        self.rect = self.image.get_rect()
16469,
16470,    def render(self):
16471,"        window.blit(self.image, (self.x,self.y))"
16472,
16473,
16474,# Define the bullet class to create bullets          
16475,class Bullet:
16476,
16477,"    def __init__(self,x,y):"
16478,        self.x = x + 23
16479,        self.y = y
16480,"        self.bullet = pygame.image.load(""user_bullet.BMP"")"
16481,        self.rect = self.bullet.get_rect()
16482,
16483,    def render(self):
16484,"        window.blit(self.bullet, (self.x, self.y))"
16485,pygame.Rect
16486,Rect
16487,pygame.Rect.collidepoint
16488,import pygame
16489,
16490,pygame.init()
16491,"window = pygame.display.set_mode((250, 250))"
16492,"rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(100, 100)"
16493,
16494,run = True
16495,while run:
16496,    for event in pygame.event.get():
16497,        if event.type == pygame.QUIT:
16498,            run = False
16499,
16500,    point = pygame.mouse.get_pos()
16501,    collide = rect.collidepoint(point)
16502,"    color = (255, 0, 0) if collide else (255, 255, 255)"
16503,
16504,    window.fill(0)
16505,"    pygame.draw.rect(window, color, rect)"
16506,    pygame.display.flip()
16507,
16508,pygame.quit()
16509,exit()
16510,pygame.Rect.colliderect
16511,import pygame
16512,
16513,pygame.init()
16514,"window = pygame.display.set_mode((250, 250))"
16515,"rect1 = pygame.Rect(*window.get_rect().center, 0, 0).inflate(75, 75)"
16516,"rect2 = pygame.Rect(0, 0, 75, 75)"
16517,
16518,run = True
16519,while run:
16520,    for event in pygame.event.get():
16521,        if event.type == pygame.QUIT:
16522,            run = False
16523,
16524,    rect2.center = pygame.mouse.get_pos()
16525,    collide = rect1.colliderect(rect2)
16526,"    color = (255, 0, 0) if collide else (255, 255, 255)"
16527,
16528,    window.fill(0)
16529,"    pygame.draw.rect(window, color, rect1)"
16530,"    pygame.draw.rect(window, (0, 255, 0), rect2, 6, 1)"
16531,    pygame.display.flip()
16532,
16533,pygame.quit()
16534,exit()
16535,pygame.Rect.collidelist
16536,pygame.Rect.collidelistall
16537,pygame.Rect.collidedict
16538,pygame.Rect.collidedictall
16539,pygame.sprite.Sprite
16540,pygame.sprite.Group
16541,pygame.sprite.spritecollide()
16542,pygame.sprite.groupcollide()
16543,pygame.sprite.spritecollideany()
16544,collided
16545,collided
16546,collide_rect
16547,collide_rect_ratio
16548,collide_circle
16549,collide_circle_ratio
16550,collide_mask
16551,pygame.sprite.spritecollide()
16552,import pygame
16553,
16554,pygame.init()
16555,"window = pygame.display.set_mode((250, 250))"
16556,
16557,sprite1 = pygame.sprite.Sprite()
16558,"sprite1.image = pygame.Surface((75, 75))"
16559,"sprite1.image.fill((255, 0, 0))"
16560,"sprite1.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(75, 75)"
16561,sprite2 = pygame.sprite.Sprite()
16562,"sprite2.image = pygame.Surface((75, 75))"
16563,"sprite2.image.fill((0, 255, 0))"
16564,"sprite2.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(75, 75)"
16565,
16566,"all_group = pygame.sprite.Group([sprite2, sprite1])"
16567,test_group = pygame.sprite.Group(sprite2)
16568,
16569,run = True
16570,while run:
16571,    for event in pygame.event.get():
16572,        if event.type == pygame.QUIT:
16573,            run = False
16574,
16575,    sprite1.rect.center = pygame.mouse.get_pos()
16576,"    collide = pygame.sprite.spritecollide(sprite1, test_group, False)"
16577,
16578,    window.fill(0)
16579,    all_group.draw(window)
16580,    for s in collide:
16581,"        pygame.draw.rect(window, (255, 255, 255), s.rect, 5, 1)"
16582,    pygame.display.flip()
16583,
16584,pygame.quit()
16585,exit()
16586,pygame.sprite.spritecollide()
16587,collide_circle
16588,import pygame
16589,
16590,pygame.init()
16591,"window = pygame.display.set_mode((250, 250))"
16592,
16593,sprite1 = pygame.sprite.Sprite()
16594,"sprite1.image = pygame.Surface((80, 80), pygame.SRCALPHA)"
16595,"pygame.draw.circle(sprite1.image, (255, 0, 0), (40, 40), 40)"
16596,"sprite1.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(40, 40)"
16597,sprite2 = pygame.sprite.Sprite()
16598,"sprite2.image = pygame.Surface((80, 89), pygame.SRCALPHA)"
16599,"pygame.draw.circle(sprite2.image, (0, 255, 0), (40, 40), 40)"
16600,"sprite2.rect = pygame.Rect(*window.get_rect().center, 0, 0).inflate(80, 80)"
16601,
16602,"all_group = pygame.sprite.Group([sprite2, sprite1])"
16603,test_group = pygame.sprite.Group(sprite2)
16604,
16605,run = True
16606,while run:
16607,    for event in pygame.event.get():
16608,        if event.type == pygame.QUIT:
16609,            run = False
16610,
16611,    sprite1.rect.center = pygame.mouse.get_pos()
16612,"    collide = pygame.sprite.spritecollide(sprite1, test_group, False, pygame.sprite.collide_circle)"
16613,
16614,    window.fill(0)
16615,    all_group.draw(window)
16616,    for s in collide:
16617,"        pygame.draw.circle(window, (255, 255, 255), s.rect.center, s.rect.width // 2, 5)"
16618,    pygame.display.flip()
16619,
16620,pygame.quit()
16621,exit()
16622,pygame.Surface.get_rect.get_rect()
16623,center
16624,pygame.Rect
16625,pygame.Rect
16626,x
16627,y
16628,Sprite
16629,Bullet
16630,rect
16631,#Define the sprite class
16632,class Sprite:
16633,"    def __init__(self, x, y, name):"
16634,        self.image = pygame.image.load(name)
16635,"        self.rect = self.image.get_rect(topleft = (x, y))"
16636,
16637,    def render(self):
16638,"        window.blit(self.image, self.rect)"
16639,
16640,# Define the bullet class to create bullets          
16641,class Bullet:
16642,"    def __init__(self, x, y):"
16643,"        self.bullet = pygame.image.load(""user_bullet.BMP"")"
16644,"        self.rect = self.bullet.get_rect(topleft = (x + 23, y))"
16645,
16646,    def render(self):
16647,"        window.blit(self.bullet, self.rect)"
16648,pygame.Rect.colliderect()
16649,Sprite
16650, Bullet
16651,"my_sprite = Sprite(sx, sy, name)"
16652,"my_bullet = Bullet(by, by)"
16653,while True:
16654,    # [...]
16655,
16656,    if my_sprite.rect.colliderect(my_bullet.rect):
16657,"        printe(""hit"")"
16658,colliderect
16659,Bullet
16660,"def is_collided_with(self, sprite):"
16661,    return self.rect.colliderect(sprite.rect)
16662,"sprite = Sprite(10, 10, 'my_sprite')"
16663,"bullet = Bullet(20, 10)"
16664,if bullet.is_collided_with(sprite):
16665,    print('collision!')
16666,    bullet.kill()
16667,    sprite.kill()
16668,import pygame
16669,import sys
16670,
16671,class Sprite(pygame.sprite.Sprite):
16672,"    def __init__(self, pos):"
16673,        pygame.sprite.Sprite.__init__(self)
16674,"        self.image = pygame.Surface([20, 20])"
16675,"        self.image.fill((255, 0, 0))"
16676,        self.rect = self.image.get_rect()
16677,
16678,        self.rect.center = pos
16679,
16680,def main():
16681,    pygame.init()
16682,    clock = pygame.time.Clock()
16683,    fps = 50
16684,"    bg = [255, 255, 255]"
16685,"    size =[200, 200]"
16686,
16687,
16688,    screen = pygame.display.set_mode(size)
16689,
16690,"    player = Sprite([40, 50])"
16691,"    player.move = [pygame.K_LEFT, pygame.K_RIGHT, pygame.K_UP, pygame.K_DOWN]"
16692,    player.vx = 5
16693,    player.vy = 5
16694,
16695,
16696,"    wall = Sprite([100, 60])"
16697,
16698,    wall_group = pygame.sprite.Group()
16699,    wall_group.add(wall)
16700,
16701,    player_group = pygame.sprite.Group()
16702,    player_group.add(player)
16703,
16704,    # I added loop for a better exit from the game
16705,    loop = 1
16706,    while loop:
16707,        for event in pygame.event.get():
16708,            if event.type == pygame.QUIT:
16709,                loop = 0
16710,
16711,        key = pygame.key.get_pressed()
16712,
16713,        for i in range(2):
16714,            if key[player.move[i]]:
16715,"                player.rect.x += player.vx * [-1, 1][i]"
16716,
16717,        for i in range(2):
16718,            if key[player.move[2:4][i]]:
16719,"                player.rect.y += player.vy * [-1, 1][i]"
16720,
16721,        screen.fill(bg)
16722,
16723,        # first parameter takes a single sprite
16724,        # second parameter takes sprite groups
16725,        # third parameter is a do kill command if true
16726,        # all group objects colliding with the first parameter object will be
16727,        # destroyed. The first parameter could be bullets and the second one
16728,        # targets although the bullet is not destroyed but can be done with
16729,        # simple trick bellow
16730,"        hit = pygame.sprite.spritecollide(player, wall_group, True)"
16731,
16732,        if hit:
16733,            # if collision is detected call a function in your case destroy
16734,            # bullet
16735,"            player.image.fill((255, 255, 255))"
16736,
16737,        player_group.draw(screen)
16738,        wall_group.draw(screen)
16739,
16740,        pygame.display.update()
16741,        clock.tick(fps)
16742,
16743,    pygame.quit()
16744,    # sys.exit
16745,
16746,
16747,if __name__ == '__main__':
16748,    main()
16749,def collideWithBullet(self):
16750,"    if pygame.sprite.spritecollideany(self, 'groupName'):"
16751,"        print(""CollideWithBullet!!"")"
16752,        return True
16753,def run(self):
16754,    if self.player.collideWithBullet():
16755,"         print(""Game Over"")"
16756,self.mask
16757,self.mask = pygame.mask.from_surface(self.image)
16758,collide_mask
16759,"    def collide_mask(self, mask):"
16760,        collided = False
16761,        mask_outline = mask.outline()
16762,        self.mask_outline = self.mask.outline()
16763,        for point in range(len(mask_outline)):
16764,            mask_outline[point] = list(mask_outline[point])
16765,            mask_outline[point][0] += bullet.x
16766,            mask_outline[point][1] += bullet.y
16767,        for point in range(len(self.mask_outline)):
16768,            self.mask_outline[point] = list(mask_outline[point])
16769,            self.mask_outline[point][0] += self.x
16770,            self.mask_outline[point][1] += self.y
16771,        for point in mask_outline:
16772,            for self_mask_point in self.mask_outline:
16773,                if point = self_mask_point:
16774,                    collided = True
16775,        return collided
16776,self
16777,self
16778,class MyClass:
16779,"    def func(self, name):"
16780,        self.name = name
16781,self
16782,class MyClass
16783,    def func(name)
16784,        @name = name
16785,    end
16786,end
16787,@name
16788,self.name
16789,self.
16790,@
16791,self
16792,self
16793,self.
16794,cls
16795,cls
16796,self
16797,self
16798,cls
16799,bob
16800,fnord
16801,this
16802,self
16803,self
16804,self
16805,self
16806,this
16807,ClassA
16808,methodA
16809,"def methodA(self, arg1, arg2):"
16810,    # do something
16811,ObjectA
16812,"ObjectA.methodA(arg1, arg2)"
16813,"ClassA.methodA(ObjectA, arg1, arg2)"
16814,self
16815,self
16816,classA
16817,methodA
16818,class Vector:
16819,"    def __init__(self, x, y):"
16820,        self.x = x
16821,        self.y = y
16822,    def length(self):
16823,        return math.sqrt(self.x ** 2 + self.y ** 2)
16824,def length_global(vector):
16825,    return math.sqrt(vector.x ** 2 + vector.y ** 2)
16826,length
16827,Vector
16828,Vector.length_new = length_global
16829,"v = Vector(3, 4)"
16830,print(v.length_new()) # 5.0
16831,length_global
16832,self
16833,length_new
16834,self
16835,self
16836,v_instance.length()
16837,Vector.length(v_instance)
16838,self
16839,Vector.length_new = length_global
16840,class A: 
16841,    foo = []
16842,"a, b = A(), A()"
16843,a.foo.append(5)
16844,b.foo
16845,ans: [5]
16846,
16847,class A: 
16848,    def __init__(self): 
16849,        self.foo = []
16850,"a, b = A(), A()"
16851,a.foo.append(5)
16852,b.foo
16853,ans: []
16854,self
16855,a.foo
16856,A.foo
16857,foo
16858,a
16859,b
16860,A()
16861,a.foo
16862,A().foo
16863,a
16864,A()
16865,b
16866,foo
16867,def state_init(state):
16868,    state['field'] = 'init'
16869,
16870,"def state_add(state, x):"
16871,    state['field'] += x
16872,
16873,"def state_mult(state, x):"
16874,    state['field'] *= x
16875,
16876,def state_getField(state):
16877,    return state['field']
16878,
16879,myself = {}
16880,state_init(myself)
16881,"state_add(myself, 'added')"
16882,"state_mult(myself, 2)"
16883,
16884,print( state_getField(myself) )
16885,#--> 'initaddedinitadded'
16886,class State(object):
16887,    def __init__(self):
16888,        self.field = 'init'
16889,"    def add(self, x):"
16890,        self.field += x
16891,"    def mult(self, x):"
16892,        self.field *= x
16893,
16894,s = State()
16895,s.add('added')    # self is implicitly passed in
16896,s.mult(2)         # self is implicitly passed in
16897,print( s.field )
16898,Class.some_method(inst)
16899,class C1(object):
16900,    def __init__(self):
16901,"         print ""C1 init"""
16902,
16903,class C2(C1):
16904,    def __init__(self): #overrides C1.__init__
16905,"        print ""C2 init"""
16906,        C1.__init__(self) #but we still want C1 to init the class too
16907,>>> C2()
16908,"""C2 init"""
16909,"""C1 init"""
16910,this
16911,class Animal():
16912,    def staticMethod():
16913,"        print ""This is a static method"""
16914,class Animal():
16915,    def objectMethod(self):
16916,"        print ""This is an object method which needs an instance of a class"""
16917,class Animal():
16918,    #animalName made in constructor
16919,    def Animal(self):
16920,"        self.animalName = """";"
16921,
16922,
16923,    def getAnimalName(self):
16924,        return self.animalName
16925,staticMethod()
16926,objectMethod(self)
16927,Animal.staticMethod()
16928,objectMethod()
16929,a = Animal(); a.objectMethod()
16930,def getAnimalName
16931,self
16932,class Student:
16933,    #called each time you create a new Student instance
16934,"    def __init__(self,name,age): #special method to initialize"
16935,        self.name=name
16936,        self.age=age
16937,
16938,    def __str__(self): #special method called for example when you use print
16939,"        return ""Student %s is %s years old"" %(self.name,self.age)"
16940,
16941,"    def call(self, msg): #silly example for custom method"
16942,"        return (""Hey, %s! ""+msg) %self.name"
16943,
16944,#initializing two instances of the student class
16945,"bob=Student(""Bob"",20)"
16946,"alice=Student(""Alice"",19)"
16947,
16948,#using them
16949,print bob.name
16950,print bob.age
16951,print alice #this one only works if you define the __str__ method
16952,"print alice.call(""Come here!"") #notice you don't put a value for self"
16953,
16954,"#you can modify attributes, like when alice ages"
16955,alice.age=20
16956,print alice
16957,self
16958,self
16959,this
16960,user_type_name
16961,self.user_type_name
16962,self
16963,self
16964,self
16965,class MyClass():
16966,    def staticMethod():
16967,"        print ""This is a static method"""
16968,
16969,    def objectMethod(self):
16970,"        print ""This is an object method which needs an instance of a class, and that is what self refers to"""
16971,@staticmethod
16972,self
16973,self
16974,class Restaurant(object):  
16975,    bankrupt = False
16976,
16977,    def open_branch(self):
16978,        if not self.bankrupt:
16979,"           print(""branch opened"")"
16980,
16981,#create instance1
16982,>>> x = Restaurant()
16983,>>> x.bankrupt
16984,False
16985,
16986,#create instance2
16987,>>> y = Restaurant()
16988,>>> y.bankrupt = True   
16989,>>> y.bankrupt
16990,True
16991,
16992,>>> x.bankrupt
16993,False  
16994,self
16995,this
16996,@
16997,def fubar(x):
16998,    self.x = x
16999,
17000,class C:
17001,    frob = fubar
17002,fubar
17003,self
17004,frob
17005,self
17006,def fubar(x)
17007,    myX = x
17008,
17009,class C:
17010,    frob = fubar
17011,myX
17012,fubar
17013,frob
17014," def fubar(self, x)"
17015,     self.x = x
17016,
17017, class C:
17018,     frob = fubar
17019,frob
17020,self
17021,fubar
17022,C.frob
17023,__init__
17024,__del__(var)
17025,var
17026,"__init__(var,[...])"
17027,cls
17028,# Self explanation.
17029,
17030,
17031, class classname(object):
17032,
17033,"    def __init__(self,name):"
17034,
17035,        self.name=name
17036,        # Self is acting as a replacement of object name.
17037,        #self.name=object1.name
17038,
17039,   def display(self):
17040,"      print(""Name of the person is :"",self.name)"
17041,"      print(""object name:"",object1.name)"
17042,
17043,
17044," object1=classname(""Bucky"")"
17045," object2=classname(""ford"")"
17046,
17047, object1.display()
17048, object2.display()
17049,
17050,###### Output 
17051,Name of the person is : Bucky
17052,object name: Bucky
17053,Name of the person is : ford
17054,object name: Bucky
17055,class testA:
17056,def __init__(self):
17057,    print('ads')
17058,def m1(self):
17059,    print('method 1')
17060,    self.m2()
17061,def m2(self):
17062,    print('method 2')
17063,class testA:
17064,def __init__(self):
17065,    print('ads')
17066,def m1(self):
17067,    print('method 1')
17068,    m2()  #throws unresolvable reference error as class does not know if m2 exist in class scope
17069,def m2(self):
17070,    print('method 2')
17071,class testA:
17072,def __init__(self):
17073,    print('ads')
17074,def m1(self):
17075,    print('method 1')
17076,def m2():
17077,    print('method 2')
17078,obj = testA()
17079,obj.m1()
17080,testA.m2()
17081,self
17082,self
17083,Guido van Rossum
17084,self
17085,self
17086,self
17087,self
17088,class C
17089,m1
17090,class C:
17091,"    def m1(self, arg):"
17092,"        print(self, ' inside')"
17093,        pass
17094,
17095,ci =C()
17096,"print(ci, ' outside')"
17097,ci.m1(None)
17098,print(hex(id(ci))) # hex memory address
17099,<__main__.C object at 0x000002B9D79C6CC0>  outside
17100,<__main__.C object at 0x000002B9D79C6CC0>  inside
17101,0x2b9d79c6cc0
17102,self
17103,self
17104,class foo:
17105,"      def __init__(self, num1, num2):"
17106,             self.n1 = num1 #now in this it will make the perimeter num1 and num2 access across the whole class
17107,             self.n2 = num2
17108,      def add(self):
17109,             return self.n1 + self.n2 # if we had not written self then if would throw an error that n1 and n2 is not defined and we have to include self in the function's perimeter to access it's variables
17110,x.f()
17111,MyClass.f(x)
17112,class MyClass:
17113,"    """"""A simple example class"""""""
17114,    i = 12345
17115,
17116,    def f(self):
17117,        return 'hello world'
17118,x = MyClass()
17119,class Person:
17120,"  def __init__(self, name, age):"
17121,    self.name = name
17122,    self.age = age
17123,
17124,"p1 = Person(""John"", 36)"
17125,
17126,print(p1.name)
17127,print(p1.age)
17128,<__main__.Person object at 0x106a78fd0>
17129,class Person:
17130,
17131,"    def __init__(self, name, age):"
17132,        self.name = name 
17133,        self.age = age 
17134,
17135,    def say_hi(self):
17136,"        print(""the self is at:"", self)"
17137,"        print((f""hey there, my name is {self.name} and I am {self.age} years old""))"
17138,
17139,    def say_bye(self):
17140,"        print(""the self is at:"", self)"
17141,"        print(f""good to see you {self.name}"")"
17142,
17143,"p = Person(""john"", 78)"
17144,"print(""the p is at"",p)"
17145,p.say_hi()  
17146,p.say_bye() 
17147,>>> a = 256
17148,>>> b = 256
17149,>>> a is b
17150,True           # This is an expected result
17151,>>> a = 257
17152,>>> b = 257
17153,>>> a is b
17154,False          # What happened here? Why is this False?
17155,>>> 257 is 257
17156,True           # Yet the literal numbers compare properly
17157,is
17158,>>> a = 256
17159,>>> b = 256
17160,>>> id(a)
17161,9987148
17162,>>> id(b)
17163,9987148
17164,>>> a = 257
17165,>>> b = 257
17166,>>> id(a)
17167,11662816
17168,>>> id(b)
17169,11662828
17170,1
17171,is
17172,==
17173,!=
17174,>>> a = 1000
17175,">>> a == 1000       # Test integers like this,"
17176,True
17177,>>> a != 5000       # or this!
17178,True
17179,>>> a is 1000       # Don't do this! - Don't use `is` to test integers!!
17180,False
17181,is
17182,is
17183,is not
17184,x is y
17185,x is not y
17186,>>> a is b
17187,>>> id(a) == id(b)
17188,id
17189,id()
17190,id
17191,is
17192,None
17193,is
17194,is not
17195,>>> a = 256
17196,>>> b = 256
17197,>>> a is b
17198,True           # This is an expected result
17199,256
17200,a
17201,b
17202,>>> a = 257
17203,>>> b = 257
17204,>>> a is b
17205,False          # What happened here? Why is this False?
17206,257
17207,>>> 257 is 257
17208,True           # Yet the literal numbers compare properly
17209,==
17210,is
17211,is
17212,id
17213,id
17214,>>> a is b
17215,>>> id(a) == id(b)
17216,is
17217,None
17218,is
17219,SENTINEL_SINGLETON = object() # this will only be created one time.
17220,
17221,def foo(keyword_argument=None):
17222,    if keyword_argument is None:
17223,        print('no argument given to foo')
17224,    bar()
17225,    bar(keyword_argument)
17226,    bar('baz')
17227,
17228,def bar(keyword_argument=SENTINEL_SINGLETON):
17229,    # SENTINEL_SINGLETON tells us if we were not passed anything
17230,    # as None is a legitimate potential argument we could get.
17231,    if keyword_argument is SENTINEL_SINGLETON:
17232,        print('no argument given to bar')
17233,    else:
17234,        print('argument to bar: {0}'.format(keyword_argument))
17235,
17236,foo()
17237,no argument given to foo
17238,no argument given to bar
17239,argument to bar: None
17240,argument to bar: baz
17241,is
17242,bar
17243,None
17244,is
17245,is
17246,is
17247,0 is 0
17248,is
17249,float
17250,float('nan') is float('nan')
17251,False
17252,int('257') is int('257')
17253,int
17254,PyLong_FromLong(long v)
17255,Objects
17256,PyLong_FromLong
17257,long
17258,longobject.c
17259,PyObject *
17260,PyLong_FromLong(long ival)
17261,{
17262,    // omitting declarations
17263,
17264,    CHECK_SMALL_INT(ival);
17265,
17266,    if (ival < 0) {
17267,        /* negate: cant write this as abs_ival = -ival since that
17268,           invokes undefined behaviour when ival is LONG_MIN */
17269,        abs_ival = 0U-(unsigned long)ival;
17270,        sign = -1;
17271,    }
17272,    else {
17273,        abs_ival = (unsigned long)ival;
17274,    }
17275,
17276,    /* Fast path for single-digit ints */
17277,    if (!(abs_ival >> PyLong_SHIFT)) {
17278,        v = _PyLong_New(1);
17279,        if (v) {
17280,            Py_SIZE(v) = sign;
17281,            v->ob_digit[0] = Py_SAFE_DOWNCAST(
17282,"                abs_ival, unsigned long, digit);"
17283,        }
17284,        return (PyObject*)v; 
17285,}
17286,CHECK_SMALL_INT(ival);
17287,#define CHECK_SMALL_INT(ival) \
17288,    do if (-NSMALLNEGINTS <= ival && ival < NSMALLPOSINTS) { \
17289,        return get_small_int((sdigit)ival); \
17290,    } while(0)
17291,get_small_int
17292,ival
17293,if (-NSMALLNEGINTS <= ival && ival < NSMALLPOSINTS)
17294,NSMALLNEGINTS
17295,NSMALLPOSINTS
17296,#ifndef NSMALLPOSINTS
17297,#define NSMALLPOSINTS           257
17298,#endif
17299,#ifndef NSMALLNEGINTS
17300,#define NSMALLNEGINTS           5
17301,#endif
17302,if (-5 <= ival && ival < 257)
17303,get_small_int
17304,get_small_int
17305,PyObject *v;
17306,assert(-NSMALLNEGINTS <= ival && ival < NSMALLPOSINTS);
17307,v = (PyObject *)&small_ints[ival + NSMALLNEGINTS];
17308,Py_INCREF(v);
17309,PyObject
17310,v = (PyObject *)&small_ints[ival + NSMALLNEGINTS];
17311,small_ints
17312,/* Small integers are preallocated in this array so that they
17313,   can be shared.
17314,   The integers that are preallocated are those in the range
17315,   -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).
17316,*/
17317,static PyLongObject small_ints[NSMALLNEGINTS + NSMALLPOSINTS];
17318,int
17319,"[NSMALLNEGINTS, NSMALLPOSINTS)"
17320,id()
17321,is
17322,_PyLong_Init
17323,"for (ival = -NSMALLNEGINTS; ival <  NSMALLPOSINTS; ival++, v++) {"
17324,257 is 257
17325,>>> 257 is 257
17326,PyLongObject
17327,257
17328,">>> codeObj = compile(""257 is 257"", ""blah!"", ""exec"")"
17329,>>> codeObj.co_consts
17330,"(257, None)"
17331,>>> import dis
17332,>>> dis.dis(codeObj)
17333,  1           0 LOAD_CONST               0 (257)   # dis
17334,              3 LOAD_CONST               0 (257)   # dis again
17335,              6 COMPARE_OP               8 (is)
17336,is
17337,True
17338,is
17339,In [29]: a = 3
17340,In [30]: b = 3
17341,In [31]: id(a)
17342,Out[31]: 500729144
17343,In [32]: id(b)
17344,Out[32]: 500729144
17345,==
17346,__eq__
17347,__ne__
17348,==
17349,id
17350,In [1]: id(255)
17351,Out[1]: 146349024
17352,
17353,In [2]: id(255)
17354,Out[2]: 146349024
17355,
17356,In [3]: id(257)
17357,Out[3]: 146802752
17358,
17359,In [4]: id(257)
17360,Out[4]: 148993740
17361,
17362,In [5]: a=255
17363,
17364,In [6]: b=255
17365,
17366,In [7]: c=257
17367,
17368,In [8]: d=257
17369,
17370,"In [9]: id(a), id(b), id(c), id(d)"
17371,"Out[9]: (146349024, 146349024, 146783024, 146804020)"
17372,<= 255
17373,tuple
17374,str
17375,bytes
17376,>>> a = ()
17377,>>> b = ()
17378,>>> a is b
17379,True
17380,>>> c = 257
17381,>>> d = 257
17382,>>> c is d
17383,False
17384,">>> e, f = 258, 258"
17385,>>> e is f
17386,True
17387,int
17388,">>> g, h = 42.23e100, 42.23e100"
17389,>>> g is h
17390,True
17391,float
17392,42.23e100
17393,int
17394,float
17395,str
17396,bytes
17397,c
17398,d
17399,e
17400,f
17401,"e, f = 128, 128"
17402,dis.dis
17403,"(128, 128)"
17404,">>> def f(): i, j = 258, 258"
17405,>>> dis.dis(f)
17406,"  1           0 LOAD_CONST               2 ((128, 128))"
17407,              2 UNPACK_SEQUENCE          2
17408,              4 STORE_FAST               0 (i)
17409,              6 STORE_FAST               1 (j)
17410,              8 LOAD_CONST               0 (None)
17411,             10 RETURN_VALUE
17412,>>> f.__code__.co_consts
17413,"(None, 128, (128, 128))"
17414,">>> id(f.__code__.co_consts[1], f.__code__.co_consts[2][0], f.__code__.co_consts[2][1])"
17415,"4305296480, 4305296480, 4305296480"
17416,128
17417,">>> k, l = (1, 2), (1, 2)"
17418,>>> k is l
17419,False
17420,dis
17421,co_consts
17422,1
17423,2
17424,"(1, 2)"
17425,1
17426,2
17427,"((1, 2), (1, 2))"
17428,>>> m = 'abc'
17429,>>> n = 'abc'
17430,>>> m is n
17431,True
17432,str
17433,x is y
17434,x == y
17435,x is not y
17436,x != y
17437,is
17438,None
17439,_sentinel = object()
17440,x is y
17441,x == y
17442,x is not y
17443,x != y
17444,a=257; b=257
17445,a is b
17446,is
17447,id(a) == id(b)
17448,===
17449,x == y and type(x) == type(y)
17450,is
17451,__eq__
17452,class Unequal:
17453,"    def __eq__(self, other):"
17454,        return False
17455,Now
17456,time.time()
17457,==
17458,is
17459,isinstance
17460,numbers.Number
17461,"import numpy, numbers"
17462,"assert not issubclass(numpy.int16,numbers.Number)"
17463,"assert issubclass(int,numbers.Number)"
17464,PyNumber_Check
17465,number?
17466,is
17467,===
17468,is
17469,>>> s = b = 'somestr'
17470,">>> s == b, s is b, id(s), id(b)"
17471,"(True, True, 4555519392, 4555519392)"
17472,>>> s = 'somestr'
17473,>>> b = 'somestr'
17474,">>> s == b, s is b, id(s), id(b)"
17475,"(True, True, 4555519392, 4555519392)"
17476,">>> s1 = b1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'"
17477,">>> s1 == b1, s1 is b1, id(s1), id(b1)"
17478,"(True, True, 4555308080, 4555308080)"
17479,
17480,">>> s1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'"
17481,">>> b1 = 'somestrdaasd ad ad asd as dasddsg,dlfg ,;dflg, dfg a'"
17482,">>> s1 == b1, s1 is b1, id(s1), id(b1)"
17483,"(True, False, 4555308176, 4555308272)"
17484,'xx'
17485,'xxx'
17486,'x x'
17487,xx
17488,is
17489,is not
17490,==
17491,!=
17492,case [...] { when ... then ...} [ else ... ] end
17493,a if condition else b
17494,condition
17495,a
17496,b
17497,condition
17498,condition
17499,True
17500,a
17501,b
17502,b
17503,a
17504,condition
17505,a
17506,b
17507,condition
17508,b
17509,a
17510,>>> 'true' if True else 'false'
17511,'true'
17512,>>> 'true' if False else 'false'
17513,'false'
17514,pass
17515,=
17516,+=
17517,>>> pass if False else pass
17518,"  File ""<stdin>"", line 1"
17519,    pass if False else pass
17520,         ^
17521,SyntaxError: invalid syntax
17522,
17523,>>> # Python parses this as `x = (1 if False else y) = 2`
17524,">>> # The `(1 if False else x)` part is actually valid, but"
17525,>>> # it can't be on the left-hand side of `=`.
17526,>>> x = 1 if False else y = 2
17527,"  File ""<stdin>"", line 1"
17528,SyntaxError: cannot assign to conditional expression
17529,
17530,>>> # If we parenthesize it instead...
17531,>>> (x = 1) if False else (y = 2)
17532,"  File ""<stdin>"", line 1"
17533,    (x = 1) if False else (y = 2)
17534,       ^
17535,SyntaxError: invalid syntax
17536,:=
17537,else
17538,# Invalid syntax: we didn't specify what the value should be if the 
17539,# condition isn't met. It doesn't matter if we can verify that
17540,# ahead of time.
17541,a if True
17542,x = a if True else b
17543,# Of course we should just use the standard library `max`;
17544,# this is just for demonstration purposes.
17545,"def my_max(a, b):"
17546,    return a if a > b else b
17547,if
17548,condition ? a : b
17549,if
17550,x = 4 if b > 8 else 9
17551,x will be 4 if b is greater than 8 otherwise 9
17552,f(x) = |x| = x if x > 0 else -x
17553,z = 3 + x if x < y else y
17554,x=2
17555,y=1
17556,z = 3 + (x if x > y else y)
17557,z = 3 + x if x < y else 3 + y
17558,z = 3 + (x if x < y else y)
17559,z = (x if x < y else y) + 3
17560,"(falseValue, trueValue)[test]"
17561,test
17562,"(falseValue, trueValue)[test == True]"
17563,bool()
17564,"(falseValue, trueValue)[bool(<expression>)]"
17565,"(lambda: print(""a""), lambda: print(""b""))[test==true]()"
17566,[]
17567,[bool(<expression>)]
17568,bool()
17569,True
17570,False
17571,"{True:trueValue, False:falseValue}[test]"
17572,[expression] and [on_true] or [on_false]
17573,on_true
17574, <expression 1> if <condition> else <expression 2> 
17575,a = 1
17576,b = 2
17577,
17578,1 if a > b else -1 
17579,# Output is -1
17580,
17581,1 if a > b else -1 if a < b else 0
17582,# Output is -1
17583,return 3 if t > 10 else t/2
17584,x if C else y
17585,?:
17586,<expression1> if <condition> else <expression2>
17587,if <condition>: <expression1> else: <expression2>
17588,result = x if a > b else y
17589,"result = (lambda:y, lambda:x)[a > b]()"
17590,"result = (y, x)[a > b]"
17591,"result = {True: x, False: y}[a > b]"
17592,and
17593,or
17594,result = (a > b) and x or y
17595,x
17596,False
17597,x
17598,y
17599,result = ((a > b) and [x] or [y])[0]
17600,"result = ((a > b) and (x,) or (y,))[0]"
17601,"get(key, default)"
17602,"shell = os.environ.get('SHELL', ""/bin/sh"")"
17603,"result = {1: x, 0: y}[a > b]"
17604,True
17605,False
17606,1
17607,0
17608,"(falseValue, trueValue)[test]"
17609,falseValue
17610,trueValue
17611,trueValue
17612,falseValue
17613,"(lambda: falseValue, lambda: trueValue)[test]()"
17614,trueValue
17615,if else if
17616,var a = true ? 1 : 0;
17617,# 1
17618,var b = false ? 1 : 0;
17619,# 0
17620,a = true ? 1 : 0
17621,# 1
17622,b = false ? 1 : 0
17623,# 0
17624,val a = true ? 1 | 0
17625,# 1
17626,val b = false ? 1 | 0
17627,# 0
17628,a <- if (TRUE) 1 else 0
17629,# 1
17630,b <- if (FALSE) 1 else 0
17631,# 0
17632,a = 1 if True else 0
17633,# 1
17634,b = 1 if False else 0
17635,# 0
17636,print a || '<alt text>'
17637,print a if a is not None else 'alt text'
17638,print(a or 'alt text')
17639,[on_true] if [cond] else [on_false]
17640,cond and on_true or on_false
17641,cond
17642,True
17643,on_true
17644,False
17645,on_false
17646,on_true
17647,"{True: on_true, False: on_false}[cond is True] # is True, not == True"
17648,"def q(cond, on_true, on_false)"
17649,"    return {True: on_true, False: on_false}[cond is True]"
17650,"q(cond, on_true, on_false)"
17651,"q(""blob"", on_true, on_false)"
17652,on_false
17653,on_true if cond else on_false
17654,on_true
17655,cond
17656,cond is not None
17657,bool(cond)
17658,cond is True
17659,cond
17660,True
17661,"""blob"""
17662,is not True
17663,cond and on_true or on_false
17664,>>> x = 0
17665,>>> print x == 0 and 0 or 1
17666,1
17667,>>> x = 1
17668,>>> print x == 0 and 0 or 1
17669,1
17670,>>> x = 0
17671,>>> print 0 if x == 0 else 1
17672,0
17673,>>> x = 1
17674,>>> print 0 if x == 0 else 1
17675,1
17676,test: or_test ['if' or_test 'else' test] | lambdef
17677,or_test ['if' or_test 'else' test]
17678,expression1 if expression2 else expression3
17679,expression3
17680,expression2
17681,expression1 if expression2 else expression3 if expression4 else expression5 # and so on
17682,if
17683,else
17684,[expression1 if expression2 for element in iterable]
17685,#                          ^-- need an else here
17686,SyntaxError: invalid syntax
17687,expression2
17688,[expression1 for element in iterable if expression2]
17689,expression2
17690,expression1 if expression1 else expression2
17691,expression1
17692,or
17693,expression1 or expression2
17694,expression1 or expression2
17695,expression1 || expression2
17696,expressionN
17697,result1 if condition else result2
17698,result1 if condition1 else result2 if condition2 else result3
17699,"""yes"" if boolean else ""no"""
17700,"{True: ""yes"", False: ""no""}[boolean]"
17701,"{True: ""yes"", False: ""no"", None: ""maybe""}[boolean_or_none]"
17702,"(""no"", ""yes"")[boolean]"
17703,"issubclass(bool, int)"
17704,yes() if boolean else no()
17705,"(no(), yes())[boolean]  # bad: BOTH no() and yes() are called"
17706,"(no, yes)[boolean]()"
17707,no
17708,yes
17709,"yes(""ok"") if boolean else no()  # (1)"
17710,"yes(""ok"") if boolean else no(""sorry"")  # (2)"
17711,"msg = (""sorry"", ""ok"")[boolean]"
17712,"(no, yes)[boolean](msg)"
17713,"(no, yes)[boolean]()"
17714,<expression 1> if <condition> else <expression 2>
17715,<expression 1>
17716,<condition>
17717,a = 0
17718,b = 1
17719,
17720,# Instead of this:
17721,x = a if a else b
17722,# Evaluates as 'a if bool(a) else b'
17723,
17724,# You could use short-circuit evaluation:
17725,x = a or b
17726,x = a or b or c or d or e
17727,# Evaluating functions:
17728,def foo(x):
17729,    print('foo executed')
17730,    return x
17731,
17732,
17733,def bar(y):
17734,    print('bar executed')
17735,    return y
17736,
17737,
17738,def blubb(z):
17739,    print('blubb executed')
17740,    return z
17741,
17742,
17743,# Ternary Operator expression 1 equals to False
17744,print(foo(0) if foo(0) else bar(1))
17745,''' foo and bar are executed once
17746,foo executed
17747,bar executed
17748,1
17749,'''
17750,
17751,# Ternary Operator expression 1 equals to True
17752,print(foo(2) if foo(2) else bar(3))
17753,''' foo is executed twice!
17754,foo executed
17755,foo executed
17756,2
17757,'''
17758,
17759,# Short-circuit evaluation second equals to True
17760,print(foo(0) or bar(1) or blubb(2))
17761,''' blubb is not executed
17762,foo executed
17763,bar executed
17764,1
17765,'''
17766,
17767,# Short-circuit evaluation third equals to True
17768,print(foo(0) or bar(0) or blubb(2))
17769,'''
17770,foo executed
17771,bar executed
17772,blubb executed
17773,2
17774,'''
17775,
17776,# Short-circuit evaluation all equal to False
17777,print(foo(0) or bar(0) or blubb(0))
17778,''' Result is 0 (from blubb(0)) because no value equals to True
17779,foo executed
17780,bar executed
17781,blubb executed
17782,0
17783,'''
17784,"a, b, x, y = 1, 2, 'a greather than b', 'b greater than a'"
17785,"result = (lambda:y, lambda:x)[a > b]()"
17786,'b greater than a'
17787,"result = (y, x)[a < b]"
17788,lambda
17789,lambda
17790,P ? x : y
17791,x if P else y
17792,"(lambda:y, lambda:x)[P]()"
17793,a if condition else b
17794,     condition
17795,  if           else
17796,a                   b 
17797,# Program to demonstrate conditional operator
17798,"a, b = 10, 20"
17799,# Copy value of a in min if a < b else copy b
17800,min = a if a < b else b
17801,print(min)  # Output: 10
17802,# Python program to demonstrate ternary operator
17803,"a, b = 10, 20"
17804,# Use tuple for selecting an item
17805,"print( (b, a) [a < b] )"
17806,# Use Dictionary for selecting an item
17807,"print({True: a, False: b} [a < b])"
17808,# lambda is more efficient than above two methods
17809,# because in lambda  we are assure that
17810,# only one expression will be evaluated unlike in
17811,# tuple and Dictionary
17812,"print((lambda: b, lambda: a)[a < b]()) # in output you should see three 10"
17813,# Python program to demonstrate nested ternary operator
17814,"a, b = 10, 20"
17815,"print (""Both a and b are equal"" if a == b else ""a is greater than b"""
17816,"        if a > b else ""b is greater than a"")"
17817,# Python program to demonstrate nested ternary operator
17818,"a, b = 10, 20"
17819,if a != b:
17820,    if a > b:
17821,"        print(""a is greater than b"")"
17822,    else:
17823,"        print(""b is greater than a"")"
17824,else:
17825,"    print(""Both a and b are equal"")"
17826,# Output: b is greater than a
17827,if-else
17828,__ne__
17829,if conditionX:
17830,    print('yes')
17831,else:
17832,    print('nah')
17833,print('yes') if conditionX else print('nah')
17834,print( 'yes' if conditionX else 'nah' )
17835,print()
17836,print('yes') if conditionX else True
17837,print()
17838,conditionX 
17839,print('yes') if conditionX else print('nah')
17840,"print ""yes"""
17841,"print(""yes"")"
17842,from future import print_function
17843,[condition] and [expression_1] or [expression_2];
17844,"print(number%2 and ""odd"" or ""even"")"
17845,0 and exp
17846,1 or exp
17847,True and exp1 or exp2
17848,True and exp1
17849,False and exp1 or exp2
17850,[condition] and ([expression_1] or 1) or [expression_2];
17851,x = [condition] and ([expression_1] or 1) or [expression_2]
17852,expression_1
17853,x
17854,1
17855,expression_1
17856,pass
17857,(a := 3) if True else (b := 5)
17858,a = 3
17859,b is not defined
17860,(a := 3) if False else (b := 5)
17861,a is not defined
17862,b = 5
17863,c = (a := 3) if False else (b := 5)
17864,c = 5
17865,a is not defined
17866,b = 5
17867,if
17868,(a := 3) if True else (b := 5)
17869,a = 3 if True else (b := 5)
17870,(a := 3) if x else (b := 5)
17871,a
17872,b
17873,a = 3 if x else (b := 5)
17874,x == False
17875,a = 5
17876,b = 5
17877,x=True
17878,if True else
17879,<condition> ? <expression1> : <expression2>
17880,:
17881,<expression1> if <condition> else <expression2>
17882,True
17883,pressure = 10
17884,print('High' if pressure < 20 else 'Critical')
17885,
17886,# Result is 'High'
17887,pressure = 5
17888,print('Normal' if pressure < 10 else 'High' if pressure < 20 else 'Critical')
17889,
17890,# Result is 'Normal'
17891,pressure = 5
17892,
17893,if pressure < 20:
17894,    if pressure < 10:
17895,        print('Normal')
17896,    else:
17897,        print('High')
17898,else:
17899,    print('Critical')
17900,
17901,# Result is 'Normal'
17902,#[On true] if [expression] else[On false]
17903,# if the expression evaluates to true then it will pass On true otherwise On false
17904,
17905,"a = input(""Enter the First Number "")"
17906,"b = input(""Enter the Second Number "")"
17907,
17908,"print(""A is Bigger"") if a>b else print(""B is Bigger"")"
17909,print
17910,option_value
17911,run_algorithm(option_value if option_value is not None else 10)
17912,option_value
17913,0
17914,""""""
17915,run_algorithm(option_value if option_value else 10)
17916,run_algorithm(option_value or 10)
17917,option_value or 10
17918,option_value if option_value is not None else 10
17919,option_value = 0
17920,run_algorithm(0)
17921,option_value
17922,None
17923,run_algorithm(10)
17924,0
17925,or
17926,True
17927,False
17928,[on_true] if [expression] else [on_false]
17929,game_type = 'home'
17930,shirt = 'white' if game_type == 'home' else 'green'
17931,>>> li1 = None
17932,">>> li2 = [1, 2, 3]"
17933,>>>
17934,>>> if li1:
17935,...     a = li1
17936,... else:
17937,...     a = li2
17938,...
17939,>>> a
17940,"[1, 2, 3]"
17941,>>> a = li1 if li1 else li2
17942,>>>
17943,>>> a
17944,"[1, 2, 3]"
17945,>>>
17946,or
17947,>>> a = li1 or li2
17948,>>>
17949,>>> a
17950,"[1, 2, 3]"
17951,>>>
17952,li1
17953,None
17954,None
17955,a
17956,>>> li1 = []
17957,">>> li2 = [1, 2, 3]"
17958,>>>
17959,>>> a = li1 or li2
17960,>>>
17961,>>> a
17962,"[1, 2, 3]"
17963,>>>
17964,a
17965,>>> s1 = ''
17966,>>> s2 = 'hello world'
17967,>>>
17968,>>> a = s1 or s2
17969,>>>
17970,>>> a
17971,'hello world'
17972,>>>
17973,"""true"" if var else ""false"""
17974,"""true"" and var or ""false"""
17975,"print(""Twenty"" if number == 20 else ""Not twenty"")"
17976,if number == 20:
17977,"    print(""Twenty"")"
17978,else:
17979,"    print(""Not twenty"")"
17980,if number == 20:
17981,"    print(""Twenty"")"
17982,elif number < 20:
17983,"    print(""Lesser"")"
17984,elif 30 > number > 20:
17985,"    print(""Between"")"
17986,else:
17987,"    print(""Greater"")"
17988,"print(""Twenty"" if number == 20 else ""Lesser"" if number < 20 else ""Between"" if 30 > number > 20 else ""Greater"")"
17989,"sample_set=""train"" if ""Train"" in full_path else (""test"" if ""Test"" in full_path else ""validation"")"
17990,condition ? value_if_true : value_if_false
17991,value_if_true if condition else value_if_false
17992,"even_or_odd = ""even"" if x % 2 == 0 else ""odd"""
17993,"f = lambda x,y: 'greater' if x > y else 'less' if y > x else 'equal'"
17994,
17995,"array = [(0,0),(0,1),(1,0),(1,1)]"
17996,
17997,for a in array:
17998,"  x, y = a[0], a[1]"
17999,"  print(f(x,y))"
18000,
18001,# Output is:
18002,"#   equal,"
18003,"#   less,"
18004,"#   greater,"
18005,#   equal
18006,val = a if cond else b
18007,"iif = lambda (cond, a, b): a if cond else b"
18008,# So I can then use it like:
18009,"val = iif(cond, a, b)"
18010,val = a if cond else b
18011,a
18012,b
18013,a if cond else b
18014,"x = {'a': 1, 'b': 2}"
18015,"y = {'b': 3, 'c': 4}"
18016,"z = merge(x, y)"
18017,
18018,>>> z
18019,"{'a': 1, 'b': 3, 'c': 4}"
18020,k
18021,y[k]
18022,x
18023,y
18024,z
18025,y
18026,x
18027,PEP-584
18028,z = x | y
18029,"z = {**x, **y}"
18030,"def merge_two_dicts(x, y):"
18031,    z = x.copy()   # start with keys and values of x
18032,    z.update(y)    # modifies z with keys and values of y
18033,    return z
18034,"z = merge_two_dicts(x, y)"
18035,"x = {'a': 1, 'b': 2}"
18036,"y = {'b': 3, 'c': 4}"
18037,z
18038,>>> z
18039,"{'a': 1, 'b': 3, 'c': 4}"
18040,"z = {**x, **y}"
18041,"z = {**x, 'foo': 1, 'bar': 2, **y}"
18042,>>> z
18043,"{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}"
18044,z = x.copy()
18045,z.update(y) # which returns None since it mutates z
18046,y
18047,x
18048,b
18049,3
18050,"def merge_two_dicts(x, y):"
18051,"    """"""Given two dictionaries, merge them into a new dict as a shallow copy."""""""
18052,    z = x.copy()
18053,    z.update(y)
18054,    return z
18055,"z = merge_two_dicts(x, y)"
18056,def merge_dicts(*dict_args):
18057,"    """""""
18058,"    Given any number of dictionaries, shallow copy and merge into a new dict,"
18059,    precedence goes to key-value pairs in latter dictionaries.
18060,"    """""""
18061,    result = {}
18062,    for dictionary in dict_args:
18063,        result.update(dictionary)
18064,    return result
18065,a
18066,g
18067,"z = merge_dicts(a, b, c, d, e, f, g) "
18068,g
18069,a
18070,f
18071,z = dict(x.items() + y.items())
18072,dict_items
18073,>>> c = dict(a.items() + b.items())
18074,Traceback (most recent call last):
18075,"  File ""<stdin>"", line 1, in <module>"
18076,TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'
18077,z = dict(list(x.items()) + list(y.items()))
18078,items()
18079,viewitems()
18080,>>> c = dict(a.items() | b.items())
18081,>>> x = {'a': []}
18082,>>> y = {'b': []}
18083,>>> dict(x.items() | y.items())
18084,Traceback (most recent call last):
18085,"  File ""<stdin>"", line 1, in <module>"
18086,TypeError: unhashable type: 'list'
18087,y
18088,x
18089,>>> x = {'a': 2}
18090,>>> y = {'a': 1}
18091,>>> dict(x.items() | y.items())
18092,{'a': 2}
18093,"z = dict(x, **y)"
18094,dict
18095,frozenset
18096,">>> c = dict(a, **b)"
18097,Traceback (most recent call last):
18098,"  File ""<stdin>"", line 1, in <module>"
18099,TypeError: keyword arguments must be strings
18100,dict(**y)
18101,"dict(a=1, b=10, c=11)"
18102,"{'a': 1, 'b': 10, 'c': 11}"
18103,"dict(x, **y)"
18104,dict
18105,">>> foo(**{('a', 'b'): None})"
18106,Traceback (most recent call last):
18107,"  File ""<stdin>"", line 1, in <module>"
18108,TypeError: foo() keywords must be strings
18109,">>> dict(**{('a', 'b'): None})"
18110,"{('a', 'b'): None}"
18111,dict(x.items() + y.items())
18112,"merge_two_dicts(x, y)"
18113,"{**x, **y}"
18114,from copy import deepcopy
18115,
18116,"def dict_of_dicts_merge(x, y):"
18117,    z = {}
18118,    overlapping_keys = x.keys() & y.keys()
18119,    for key in overlapping_keys:
18120,"        z[key] = dict_of_dicts_merge(x[key], y[key])"
18121,    for key in x.keys() - overlapping_keys:
18122,        z[key] = deepcopy(x[key])
18123,    for key in y.keys() - overlapping_keys:
18124,        z[key] = deepcopy(y[key])
18125,    return z
18126,">>> x = {'a':{1:{}}, 'b': {2:{}}}"
18127,">>> y = {'b':{10:{}}, 'c': {11:{}}}"
18128,">>> dict_of_dicts_merge(x, y)"
18129,"{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}"
18130,copy
18131,update
18132,"{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7"
18133,"dict((k, v) for d in dicts for k, v in d.items()) # iteritems in Python 2"
18134,itertools.chain
18135,from itertools import chain
18136,"z = dict(chain(x.items(), y.items())) # iteritems in Python 2"
18137,from timeit import repeat
18138,from itertools import chain
18139,
18140,x = dict.fromkeys('abcdefg')
18141,y = dict.fromkeys('efghijk')
18142,
18143,"def merge_two_dicts(x, y):"
18144,    z = x.copy()
18145,    z.update(y)
18146,    return z
18147,
18148,"min(repeat(lambda: {**x, **y}))"
18149,"min(repeat(lambda: merge_two_dicts(x, y)))"
18150,"min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))"
18151,"min(repeat(lambda: dict(chain(x.items(), y.items()))))"
18152,"min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))"
18153,">>> min(repeat(lambda: {**x, **y}))"
18154,1.0804965235292912
18155,">>> min(repeat(lambda: merge_two_dicts(x, y)))"
18156,1.636518670246005
18157,">>> min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))"
18158,3.1779992282390594
18159,">>> min(repeat(lambda: dict(chain(x.items(), y.items()))))"
18160,2.740647904574871
18161,">>> min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))"
18162,4.266070580109954
18163,$ uname -a
18164,Linux nixos 4.19.113 #1-NixOS SMP Wed Mar 25 07:06:15 UTC 2020 x86_64 GNU/Linux
18165,"{**{(0, 1):2}}"
18166,"{(0, 1): 2}"
18167,x | y
18168,z = dict(list(x.items()) + list(y.items()))
18169,z
18170,b
18171,y
18172,">>> x = {'a':1, 'b': 2}"
18173,">>> y = {'b':10, 'c': 11}"
18174,>>> z = dict(list(x.items()) + list(y.items()))
18175,>>> z
18176,"{'a': 1, 'c': 11, 'b': 10}"
18177,list()
18178,>>> z = dict(x.items() + y.items())
18179,>>> z
18180,"{'a': 1, 'c': 11, 'b': 10}"
18181,"x = {'a':1, 'b': 2}"
18182,"y = {'b':10, 'c': 11}"
18183,z = x | y
18184,print(z)
18185,"{'a': 1, 'c': 11, 'b': 10}"
18186,z = x.copy()
18187,z.update(y)
18188,Update
18189,(lambda z: z.update(y) or z)(x.copy())
18190,Indeed
18191,"z = dict(x, **y)"
18192,y
18193,">>> timeit.Timer(""dict(x, **y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)"
18194,15.52571702003479
18195,">>> timeit.Timer(""temp = x.copy()\ntemp.update(y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)"
18196,15.694622993469238
18197,">>> timeit.Timer(""dict(x.items() + y.items())"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)"
18198,41.484580039978027
18199,z1 = dict(x.items() + y.items())
18200,"z2 = dict(x, **y)"
18201,z2
18202,timeit
18203,"% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'"
18204,"100000 loops, best of 3: 5.67 usec per loop"
18205,"% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' "
18206,"100000 loops, best of 3: 1.53 usec per loop"
18207,z2
18208,z2
18209,-r
18210,"% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'"
18211,"1000 loops, best of 3: 260 usec per loop"
18212,"% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               "
18213,"10000 loops, best of 3: 26.9 usec per loop"
18214,z2
18215,z1
18216,from itertools import chain
18217,"z3 = dict(chain(x.iteritems(), y.iteritems()))"
18218,"% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'"
18219,"10000 loops, best of 3: 66 usec per loop"
18220,z3
18221,z1
18222,z2
18223,update
18224,z0 = dict(x)
18225,z0.update(y)
18226,"% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'"
18227,"10000 loops, best of 3: 26.9 usec per loop"
18228,z0
18229,z2
18230,dict
18231,z0 = x.copy()
18232,z0.update(y)
18233,items()
18234,iteritems
18235,collections.ChainMap
18236,>>> from collections import ChainMap
18237,">>> x = {'a':1, 'b': 2}"
18238,">>> y = {'b':10, 'c': 11}"
18239,">>> z = dict(ChainMap({}, y, x))"
18240,">>> for k, v in z.items():"
18241,"        print(k, '-->', v)"
18242,    
18243,a --> 1
18244,b --> 10
18245,c --> 11
18246,">>> x = {'a':1, 'b': 2}"
18247,">>> y = {'b':10, 'c': 11}"
18248,">>> {**x, **y}"
18249,"{'a': 1, 'b': 10, 'c': 11}"
18250,">>> x = {'a':1, 'b': 2}"
18251,">>> y = {'b':10, 'c': 11}"
18252,>>> x | y
18253,"{'a': 1, 'b': 10, 'c': 11}"
18254,del
18255,dict
18256,"dict(ChainMap({}, y, x))"
18257,"a single, updateable view"
18258,"def merge(d1, d2, merge_fn=lambda x,y:y):"
18259,"    """""""
18260,"    Merges two dictionaries, non-destructively, combining "
18261,    values on duplicate keys as defined by the optional merge
18262,    function.  The default behavior replaces the values in d1
18263,    with corresponding values in d2.  (There is no other generally
18264,"    applicable merge strategy, but often you'll have homogeneous "
18265,"    types in your dicts, so specifying a merge technique can be "
18266,    valuable.)
18267,
18268,    Examples:
18269,
18270,    >>> d1
18271,"    {'a': 1, 'c': 3, 'b': 2}"
18272,"    >>> merge(d1, d1)"
18273,"    {'a': 1, 'c': 3, 'b': 2}"
18274,"    >>> merge(d1, d1, lambda x,y: x+y)"
18275,"    {'a': 2, 'c': 6, 'b': 4}"
18276,
18277,"    """""""
18278,    result = dict(d1)
18279,"    for k,v in d2.iteritems():"
18280,        if k in result:
18281,"            result[k] = merge_fn(result[k], v)"
18282,        else:
18283,            result[k] = v
18284,    return result
18285,"def deepupdate(original, update):"
18286,"    """""""
18287,    Recursively update a dict.
18288,    Subdict's won't be overwritten but also updated.
18289,"    """""""
18290,"    for key, value in original.iteritems(): "
18291,        if key not in update:
18292,            update[key] = value
18293,"        elif isinstance(value, dict):"
18294,"            deepupdate(value, update[key]) "
18295,    return update
18296,pluto_original = {
18297,"    'name': 'Pluto',"
18298,    'details': {
18299,"        'tail': True,"
18300,        'color': 'orange'
18301,    }
18302,}
18303,
18304,pluto_update = {
18305,"    'name': 'Pluutoo',"
18306,    'details': {
18307,        'color': 'blue'
18308,    }
18309,}
18310,
18311,"print deepupdate(pluto_original, pluto_update)"
18312,{
18313,"    'name': 'Pluutoo',"
18314,    'details': {
18315,"        'color': 'blue',"
18316,        'tail': True
18317,    }
18318,}
18319,"x = {'a': 1, 'b': 1}"
18320,"y = {'a': 2, 'c': 2}"
18321,"final = {**x, **y} "
18322,final
18323,"# {'a': 2, 'b': 1, 'c': 2}"
18324,"final = {'a': 1, 'b': 1, **x, **y}"
18325,"d = {'spam': 1, 'eggs': 2, 'cheese': 3}"
18326,"e = {'cheese': 'cheddar', 'aardvark': 'Ethel'}"
18327,d | e
18328,"# {'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}"
18329,"dict(x, **y)"
18330,"dict(x, **y)"
18331,y
18332,**
18333,"dict(x, **y)"
18334,from itertools import chain
18335,"x = {'a':1, 'b': 2}"
18336,"y = {'b':10, 'c': 11}"
18337,"dict(chain(x.iteritems(), y.iteritems()))"
18338,dict(x.items() + y.items())
18339,n = copy(a); n.update(b)
18340,iteritems()
18341,items()
18342,"x = {'a':1, 'b': 2}"
18343,"y = {'b':10, 'c': 11}"
18344,z = dict(x.items() + y.items())
18345,print z
18346,"itertools.chain(x.items(), y.items())"
18347,"x = {'a':1, 'b': 2}"
18348,"y = {'b':10, 'c': 11}"
18349,z4 = {}
18350,z4.update(x)
18351,z4.update(y)
18352,z4 = {}
18353,z4 = x.copy()
18354,"def dict_merge(a, b):"
18355,  c = a.copy()
18356,  c.update(b)
18357,  return c
18358,
18359,"new = dict_merge(old, extras)"
18360,print dict_merge(
18361,"      {'color':'red', 'model':'Mini'},"
18362,"      {'model':'Ferrari', 'owner':'Carl'})"
18363,"{'color': 'red', 'owner': 'Carl', 'model': 'Ferrari'}"
18364,"x = {'a':1, 'b':2}"
18365,"y = {'b':10, 'c':11}"
18366,"z = (lambda a, b: (lambda a_copy: a_copy.update(b) or a_copy)(a.copy()))(x, y)"
18367,print z
18368,"{'a': 1, 'c': 11, 'b': 10}"
18369,print x
18370,"{'a': 1, 'b': 2}"
18371,"z={k: v for d in [x,y] for k, v in d.items()}"
18372,
18373,>>> print z
18374,"{'a': 1, 'c': 11, 'b': 10}"
18375,items
18376,+
18377,dict(x.items() | y.items())
18378,viewitems
18379,items
18380,dict(x.viewitems() | y.viewitems())
18381,"dict(x, **y)"
18382,y
18383,In [1]: from collections import ChainMap
18384,"In [2]: from string import ascii_uppercase as up, ascii_lowercase as lo; x = dict(zip(lo, up)); y = dict(zip(up, lo))"
18385,"In [3]: chainmap_dict = ChainMap(y, x)"
18386,In [4]: union_dict = dict(x.items() | y.items())
18387,In [5]: timeit for k in union_dict: union_dict[k]
18388,"100000 loops, best of 3: 2.15 µs per loop"
18389,In [6]: timeit for k in chainmap_dict: chainmap_dict[k]
18390,"10000 loops, best of 3: 27.1 µs per loop"
18391,temp = x.copy()
18392,temp.update(y)
18393,x | y
18394,from collections import ChainMap
18395,from itertools import chain
18396,import perfplot
18397,
18398,
18399,def setup(n):
18400,"    x = dict(zip(range(n), range(n)))"
18401,"    y = dict(zip(range(n, 2 * n), range(n, 2 * n)))"
18402,"    return x, y"
18403,
18404,
18405,def copy_update(data):
18406,"    x, y = data"
18407,    temp = x.copy()
18408,    temp.update(y)
18409,    return temp
18410,
18411,
18412,def add_items(data):
18413,"    x, y = data"
18414,    return dict(list(x.items()) + list(y.items()))
18415,
18416,
18417,def curly_star(data):
18418,"    x, y = data"
18419,"    return {**x, **y}"
18420,
18421,
18422,def chain_map(data):
18423,"    x, y = data"
18424,"    return dict(ChainMap({}, y, x))"
18425,
18426,
18427,def itertools_chain(data):
18428,"    x, y = data"
18429,"    return dict(chain(x.items(), y.items()))"
18430,
18431,
18432,def python39_concat(data):
18433,"    x, y = data"
18434,    return x | y
18435,
18436,
18437,b = perfplot.bench(
18438,"    setup=setup,"
18439,    kernels=[
18440,"        copy_update,"
18441,"        add_items,"
18442,"        curly_star,"
18443,"        chain_map,"
18444,"        itertools_chain,"
18445,"        python39_concat,"
18446,"    ],"
18447,    labels=[
18448,"        ""copy_update"","
18449,"        ""dict(list(x.items()) + list(y.items()))"","
18450,"        ""{**x, **y}"","
18451,"        ""chain_map"","
18452,"        ""itertools.chain"","
18453,"        ""x | y"","
18454,"    ],"
18455,"    n_range=[2 ** k for k in range(18)],"
18456,"    xlabel=""len(x), len(y)"","
18457,"    equality_check=None,"
18458,)
18459,"b.save(""out.png"")"
18460,b.show()
18461,TypeError: copy_update() takes 1 positional argument but 2 were given
18462,"def union2(dict1, dict2):"
18463,    return dict(list(dict1.items()) + list(dict2.items()))
18464,def union(*dicts):
18465,    return dict(itertools.chain.from_iterable(dct.items() for dct in dicts))
18466,sum
18467,# py2
18468,"from itertools import chain, imap"
18469,"merge = lambda *args: dict(chain.from_iterable(imap(dict.iteritems, args)))"
18470,
18471,# py3
18472,from itertools import chain
18473,"merge = lambda *args: dict(chain.from_iterable(map(dict.items, args)))"
18474,">>> x = {'a':1, 'b': 2}"
18475,">>> y = {'b':10, 'c': 11}"
18476,">>> merge(x, y)"
18477,"{'a': 1, 'b': 10, 'c': 11}"
18478,
18479,">>> z = {'c': 3, 'd': 4}"
18480,">>> merge(x, y, z)"
18481,"{'a': 1, 'b': 10, 'c': 3, 'd': 4}"
18482,">>> x = {'a':1, 'b': 2}"
18483,">>> y = {'b':10, 'c': 11}"
18484,">>> z = (lambda f=x.copy(): (f.update(y), f)[1])()"
18485,>>> z
18486,"{'a': 1, 'c': 11, 'b': 10}"
18487,lambda
18488,">>> x = {'a':1, 'b': 2}"
18489,">>> y = {'b':10, 'c': 11}"
18490,">>> z = (x.update(y), x)[1]"
18491,>>> z
18492,"{'a': 1, 'b': 10, 'c': 11}"
18493,x
18494,x.update(y) or x
18495,update()
18496,None
18497,x
18498,.update()
18499,None
18500,or
18501,"(x.update(y), x)[-1]"
18502,x
18503,lambda
18504,lambda
18505,"(lambda x: x.update(y) or x)({'a': 1, 'b': 2})"
18506,"(x := {'a': 1, 'b': 2}).update(y) or x"
18507,"(lambda x={'a': 1, 'b': 2}: x.update(y) or x)()"
18508,x | y
18509,"{**x, **y}"
18510,(lambda z=x.copy(): z.update(y) or z)()
18511,(z := x.copy()).update(y) or z
18512,|
18513,dict
18514,set
18515,">>> d = {'a': 1, 'b': 2}"
18516,">>> e = {'a': 9, 'c': 3}"
18517,>>> d | e
18518,"{'a': 9, 'b': 2, 'c': 3}"
18519,dict
18520,|=
18521,dict
18522,>>> e |= d    # e = e | d
18523,>>> e
18524,"{'a': 1, 'c': 3, 'b': 2}"
18525,"def merge(*dicts, **kv): "
18526,"      return { k:v for d in list(dicts) + [kv] for k,v in d.items() }"
18527,"assert (merge({1:11,'a':'aaa'},{1:99, 'b':'bbb'},foo='bar')==\"
18528,"    {1: 99, 'foo': 'bar', 'b': 'bbb', 'a': 'aaa'})"
18529,
18530,assert (merge(foo='bar')=={'foo': 'bar'})
18531,
18532,"assert (merge({1:11},{1:99},foo='bar',baz='quux')==\"
18533,"    {1: 99, 'foo': 'bar', 'baz':'quux'})"
18534,
18535,"assert (merge({1:11},{1:99})=={1: 99})"
18536,.update
18537,"def merge(dict1,*dicts):"
18538,    for dict2 in dicts:
18539,        dict1.update(dict2)
18540,    return dict1
18541,"merge(dict1,dict2)"
18542,"merge(dict1,dict2,dict3)"
18543,"merge(dict1,dict2,dict3,dict4)"
18544,"merge({},dict1,dict2)  # this one returns a new copy"
18545,from functools import reduce
18546,
18547,def merge_dicts(*dicts):
18548,"    return reduce(lambda a, d: a.update(d) or a, dicts, {})"
18549,or a
18550,lambda
18551,dict.update
18552,None
18553,import timeit
18554,
18555,n=100000
18556,"su = """""""
18557,"x = {'a':1, 'b': 2}"
18558,"y = {'b':10, 'c': 11}"
18559,""""""""
18560,
18561,"def timeMerge(f,su,niter):"
18562,"    print ""{:4f} sec for: {:30s}"".format(timeit.Timer(f,setup=su).timeit(n),f)"
18563,
18564,"timeMerge(""dict(x, **y)"",su,n)"
18565,"timeMerge(""x.update(y)"",su,n)"
18566,"timeMerge(""dict(x.items() + y.items())"",su,n)"
18567,"timeMerge(""for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k] "",su,n)"
18568,
18569,#confirm for loop adds b entries together
18570,"x = {'a':1, 'b': 2}"
18571,"y = {'b':10, 'c': 11}"
18572,for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]
18573,"print ""confirm b elements are added:"",x"
18574,"0.049465 sec for: dict(x, **y)"
18575,0.033729 sec for: x.update(y)                   
18576,0.150380 sec for: dict(x.items() + y.items())   
18577,0.083120 sec for: for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]
18578,
18579,"confirm b elements are added: {'a': 1, 'c': 11, 'b': 12}"
18580,cytoolz.merge_with
18581,:=
18582,copy
18583,update
18584,newdict = dict1.copy()
18585,newdict.update(dict2)
18586,(newdict := dict1.copy()).update(dict2)
18587,dict
18588,dict
18589,newdict
18590,myfunc((newdict := dict1.copy()).update(dict2))
18591,or newdict
18592,update
18593,None
18594,newdict
18595,(newdict := dict1.copy()).update(dict2) or newdict
18596,"newdict = {**dict1, **dict2}"
18597,list
18598,tuple
18599,newdict = {}
18600,newdict.update(dict1)
18601,newdict.update(dict2)
18602,dict
18603,(newdict := dict1.copy()).update(dict2)
18604,dict
18605," newdict = {**dict1, **dict2, **dict3}"
18606," (newdict := dict1.copy()).update(dict2), newdict.update(dict3)"
18607,None
18608,None
18609, (newdict := dict1.copy()).update(dict2) or newdict.update(dict3)
18610,tuple
18611,None
18612,update
18613,None
18614,or
18615,set
18616,dict
18617,copy
18618,update
18619,dict
18620,dict
18621,"myspecialdict({**speciala, **specialb})"
18622,dict
18623,myspecialdict
18624,dict
18625,dict
18626,dict
18627,dict1
18628,dict
18629,from collections import Counter
18630,"dict1 = {'a':1, 'b': 2}"
18631,"dict2 = {'b':10, 'c': 11}"
18632,result = dict(Counter(dict1) + Counter(dict2))
18633,.update()
18634,+
18635,">>> x = {'a':1, 'b': 2}"
18636,">>> y = {'b':10, 'c': 11}"
18637,>>> { key: y[key] if key in y else x[key]
18638,      for key in set(x) + set(y)
18639,    }
18640,"numbers = list(range(1, 50))"
18641,
18642,for i in numbers:
18643,    if i < 20:
18644,        numbers.remove(i)
18645,
18646,print(numbers)
18647,"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
18648,i == 1
18649,for
18650,for
18651,i
18652,"[1, 2, 3, 4, 5, 6...]"
18653, ^
18654,"[2, 3, 4, 5, 6...]"
18655,    ^
18656,"[2, 4, 5, 6...]"
18657,       ^
18658,numbers = [n for n in numbers if n >= 20]
18659,numbers[:] = (n for in in numbers if n >= 20)
18660,"for i, n in enumerate(numbers):"
18661,    if n < 20 :
18662,"        print(""do something"")"
18663,        numbers[i] = None
18664,numbers = [n for n in numbers if n is not None]
18665,for
18666,None
18667,None
18668,"li = list(range(1, 15))"
18669,print(li)
18670,
18671,"for i in range(len(li) - 1, -1, -1):"
18672,    if li[i] < 6:
18673,        del li[i]
18674,        
18675,print(li)
18676,"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] "
18677,"[6, 7, 8, 9, 10, 11, 12, 13, 14]"
18678,"[1,2,3,4,5............50]"
18679, ^
18680,"[2,3,4,5............50]"
18681, ^
18682,"[3,4,5............50]"
18683, ^
18684,aList = list(range(50))
18685,i = 0
18686,while i < 20:
18687,    aList.pop(0)
18688,    i += 1
18689,
18690,"print(aList) #[21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
18691,lis = range(50)
18692,lis = lis[20:]
18693,"functional = filter(lambda x: x> 20, range(50))"
18694,"numbers = range(1, 50)"
18695,index_arr = []
18696,
18697,for i in range(len(numbers):
18698,    if numbers[i] < 20:
18699,        index_arr.append(i)
18700,"numbers = range(1, 50)"
18701,index_arr = []
18702,
18703,for i in range(len(numbers):
18704,    if numbers[i] < 20:
18705,        index_arr.append(i)
18706,
18707,for del_index in index_list:
18708,    numbers.pop(del_index)
18709,
18710,    #the nasty part
18711,    for i in range(len(index_list)):
18712,        index_list[i] -= 1
18713,reversed()
18714,for i in reversed(numbers): # `reversed` so removing doesn't foobar iteration
18715,  if i < 20:
18716,    numbers.remove(i)
18717,for
18718,"lst = [1, 2, 3, 4, 5]"
18719,
18720,for i in lst:
18721,    print(i ** 2)
18722,index = 0
18723,while True:
18724,    try:
18725,        i = lst.__getitem__(index)
18726,    except IndexError:
18727,        break
18728,    print(i ** 2)
18729,    index += 1
18730,for
18731,next()
18732,StopIteration
18733,index
18734,__getitem__()
18735,mylist = []
18736,
18737,for i in range(51):
18738,    if i<20:
18739,        continue
18740,    else:
18741,        mylist.append(i)
18742,print(mylist)
18743,copy()
18744,"numbers = list(range(1, 50))"
18745,
18746,for i in numbers.copy():
18747,    if i < 20:
18748,        numbers.remove(i)
18749,print(numbers)
18750,
18751,"[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
18752,copy
18753,"a, b, c = (1, 2, 3)"
18754,
18755,"print(a, b, c)"
18756,
18757,def test():
18758,    print(a)
18759,    print(b)
18760,    print(c)    # (A)
18761,    #c+=1       # (B)
18762,test()
18763,UnboundLocalError: 'c' not assigned
18764,a
18765,b
18766,a
18767,b
18768,c
18769,c
18770,c+=1
18771,c
18772,c
18773,c
18774,c = 3
18775,global c
18776,nonlocal c
18777,c
18778,global
18779,nonlocal
18780,print(a)
18781,print(b)
18782,c+=1
18783,c=c+1
18784,global c
18785,c
18786,c+=1
18787,SYMBOL(c) OPERATOR(+=) DIGIT(1)
18788,dict
18789,locals()
18790,dict
18791,locals
18792,UnboundLocalError
18793,>>> def f():
18794,...    print a
18795,...    print b
18796,...    a = 1
18797,
18798,>>> import dis
18799,>>> dis.dis(f)
18800,
18801,  2           0 LOAD_FAST                0 (a)
18802,              3 PRINT_ITEM
18803,              4 PRINT_NEWLINE
18804,
18805,  3           5 LOAD_GLOBAL              0 (b)
18806,              8 PRINT_ITEM
18807,              9 PRINT_NEWLINE
18808,
18809,  4          10 LOAD_CONST               1 (1)
18810,             13 STORE_FAST               0 (a)
18811,             16 LOAD_CONST               0 (None)
18812,             19 RETURN_VALUE
18813,LOAD_FAST
18814,LOAD_GLOBAL
18815,print a
18816,global
18817,test()
18818,def test():
18819,    global c
18820,    print(a)
18821,    print(b)
18822,    print(c)    # (A)
18823,    c+=1        # (B)
18824,c
18825,c
18826,bar = 42
18827,def foo():
18828,    print bar
18829,    if False:
18830,        bar = 0
18831,foo()
18832,UnboundLocalError
18833,bar=0
18834,foo
18835,bar
18836,">>> a, b, c = (1, 2, 3)"
18837,">>> print (a, b, c)"
18838,"(1, 2, 3)"
18839,">>> def test (a, b, c):"
18840,...     print (a)
18841,...     print (b)
18842,...     print (c)
18843,...     c += 1
18844,"...     return a, b, c"
18845,...
18846,">>> a, b, c = test (a, b, c)"
18847,1
18848,2
18849,3
18850,">>> print (a, b ,c)"
18851,"(1, 2, 4)"
18852,a += b
18853,a = a + b
18854,a
18855,func(a)
18856,a = a + b
18857,a
18858,a
18859,a += b
18860,a = a + b
18861,a.__iadd__(b)
18862,a
18863,a
18864,a
18865,a
18866,def copy_on_write(a):
18867,      a = a + a
18868,def inplace_add(a):
18869,      a += a
18870,a = [1]
18871,copy_on_write(a)
18872,print a # [1]
18873,inplace_add(a)
18874,"print a # [1, 1]"
18875,b = 1
18876,copy_on_write(b)
18877,print b # [1]
18878,inplace_add(b)
18879,print b # 1
18880,c+=1
18881,c
18882,global
18883,nonlocal
18884,nonlocal
18885,my_variables = { # a mutable object
18886,    'c': 3
18887,}
18888,
18889,def test():
18890,    my_variables['c'] +=1
18891,
18892,test()
18893,class Employee:
18894,    counter=0
18895,
18896,    def __init__(self):
18897,        Employee.counter+=1
18898,def teams():
18899,    ...
18900,
18901,def some_other_method():
18902,    teams = teams()
18903,teams()
18904,get_teams()
18905,def teams():
18906,    ...
18907,
18908,def some_other_method():
18909,    teams = get_teams()
18910,del
18911,nonlocal
18912,global
18913,nonlocal
18914,__str__
18915,__repr__
18916,__repr__
18917,__str__
18918,__str__
18919,__repr__
18920,__repr__
18921,"return ""%s(%r)"" % (self.__class__, self.__dict__)"
18922,__repr__
18923,__str__
18924,__str__=__repr__
18925,__repr__
18926,__str__
18927,__repr__
18928,"log(INFO, ""I am in the weird function and a is"", a, ""and b is"", b, ""but I got a null C — using default"", default_c)"
18929,eval(repr(c))==c
18930,c
18931,c
18932,"""MyClass(this=%r,that=%r)"" % (self.this,self.that)"
18933,%r
18934,%s
18935,repr()
18936,%r
18937,__repr__
18938,MyClass(3)
18939,"MyClass(""3"")"
18940,__str__
18941,"str(3)==str(""3"")"
18942,__str__
18943,__repr__
18944,__str__
18945,"[moshe is, 3, hello"
18946,"world, this is a list, oh I don't know, containing just 4 elements]"
18947,"print(""["" + "", "".join(l) + ""]"")"
18948,__repr__
18949,__str__
18950,l
18951,__repr__
18952,__str__
18953,__str__
18954,__repr__
18955,>>> class Sic(object): pass
18956,... 
18957,>>> print(str(Sic()))
18958,<__main__.Sic object at 0x8b7d0>
18959,>>> print(repr(Sic()))
18960,<__main__.Sic object at 0x8b7d0>
18961,>>> 
18962,id
18963,>>> class Sic(object): 
18964,...   def __repr__(self): return 'foo'
18965,... 
18966,>>> print(str(Sic()))
18967,foo
18968,>>> print(repr(Sic()))
18969,foo
18970,>>> class Sic(object):
18971,...   def __str__(self): return 'foo'
18972,... 
18973,>>> print(str(Sic()))
18974,foo
18975,>>> print(repr(Sic()))
18976,<__main__.Sic object at 0x2617f0>
18977,>>> 
18978,__repr__
18979,__str__
18980,__str__
18981,__repr__
18982,__str__
18983,__repr__
18984,eval
18985,__str__
18986,__repr__
18987,__repr__
18988,__eval__
18989,eval(repr(foo))
18990,foo
18991,__repr__
18992,__repr__
18993,eval(repr(spam)) == spam
18994,eval(repr(spam))
18995,SyntaxError
18996,a=[]; a.append(a); print(eval(repr(a)))
18997,[[Ellipses]]
18998,eval(repr(spam))
18999,repr(spam)
19000,__str__
19001,__repr__
19002,__str__
19003,__repr__
19004,eval(repr(x))
19005,"class A(str, Enum): X = 'x'"
19006,eval(repr(A.X))
19007,eval(str(A.X))
19008,class A
19009,class Spam
19010,eval(repr(spam)) == spam
19011,Spam.__eq__
19012,object.__eq__
19013,is
19014,__repr__
19015,__str__
19016,">>> s=""""""w'o""w"""""""
19017,>>> repr(s)
19018,"'\'w\\\'o""w\''"
19019,>>> str(s)
19020,"'w\'o""w'"
19021,>>> eval(str(s))==s
19022,Traceback (most recent call last):
19023,"  File ""<stdin>"", line 1, in <module>"
19024,"  File ""<string>"", line 1"
19025,"    w'o""w"
19026,       ^
19027,SyntaxError: EOL while scanning single-quoted string
19028,>>> eval(repr(s))==s
19029,True
19030,__repr__
19031,__str__
19032,>>> import datetime
19033,>>> today = datetime.datetime.now()
19034,>>> str(today)
19035,'2012-03-14 09:21:58.130922'
19036,>>> repr(today)
19037,"'datetime.datetime(2012, 3, 14, 9, 21, 58, 130922)'"
19038,repr(object)
19039,eval()
19040,__repr__()
19041,str(object='')
19042,repr(object)
19043,str(object)
19044,eval()
19045,''
19046,__str__
19047,__repr__
19048,__str__
19049,__repr__
19050,__repr__
19051,__str__
19052,__repr__
19053,eval
19054,__str__
19055,__str__
19056,format
19057,str.format
19058,str
19059,__str__
19060,__repr__
19061,__repr__
19062,__repr__
19063,repr
19064,__str__
19065,__repr__
19066,repr
19067,repr(...)
19068,    repr(object) -> string
19069,    
19070,    Return the canonical string representation of the object.
19071,"    For most object types, eval(repr(object)) == object."
19072,repr
19073,__repr__
19074,__repr__
19075,def __repr__(self):
19076,    return '<{0}.{1} object at {2}>'.format(
19077,"      type(self).__module__, type(self).__qualname__, hex(id(self)))"
19078,<__main__.Foo object at 0x7f80665abdd0>
19079,__repr__
19080,datetime
19081,datetime
19082,import datetime
19083,datetime.now
19084,__repr__
19085,>>> datetime.datetime.now()
19086,"datetime.datetime(2015, 1, 24, 20, 5, 36, 491180)"
19087,__str__
19088,>>> print(datetime.datetime.now())
19089,2015-01-24 20:05:44.977951
19090,__repr__
19091,">>> the_past = datetime.datetime(2015, 1, 24, 20, 5, 36, 491180)"
19092,>>> print(the_past)
19093,2015-01-24 20:05:36.491180
19094,__repr__
19095,def __repr__(self):
19096,"    """"""Convert to formal string, for repr()."""""""
19097,"    L = [self._year, self._month, self._day,  # These are never zero"
19098,"         self._hour, self._minute, self._second, self._microsecond]"
19099,    if L[-1] == 0:
19100,        del L[-1]
19101,    if L[-1] == 0:
19102,        del L[-1]
19103,"    s = ""%s.%s(%s)"" % (self.__class__.__module__,"
19104,"                       self.__class__.__qualname__,"
19105,"                       "", "".join(map(str, L)))"
19106,    if self._tzinfo is not None:
19107,"        assert s[-1:] == "")"""
19108,"        s = s[:-1] + "", tzinfo=%r"" % self._tzinfo + "")"""
19109,    if self._fold:
19110,"        assert s[-1:] == "")"""
19111,"        s = s[:-1] + "", fold=1)"""
19112,    return s
19113,__str__
19114,__str__
19115,def __str__(self):
19116,"    ""Convert to string, for str()."""
19117,    return self.isoformat(sep=' ')
19118,__repr__ = __str__
19119,__repr__ = __str__
19120,__repr__ = __str__
19121,__repr__
19122,__str__
19123,__repr__
19124,__str__
19125,__str__
19126,__repr__
19127,__str__
19128,type(obj).__qualname__
19129,self.__module__
19130,type(self).__module__
19131,3
19132,__module__
19133,type(self).__name__
19134,type(self).__qualname__
19135,class A: class B: pass
19136,repr(A.B())
19137,__repr__
19138,__str__
19139,In [38]: str('s')
19140,Out[38]: 's'
19141,
19142,In [39]: repr('s')
19143,"Out[39]: ""'s'"""
19144,
19145,In [40]: eval(str('s'))
19146,Traceback (most recent call last):
19147,
19148,"  File ""<ipython-input-40-abd46c0c43e7>"", line 1, in <module>"
19149,    eval(str('s'))
19150,
19151,"  File ""<string>"", line 1, in <module>"
19152,
19153,NameError: name 's' is not defined
19154,
19155,
19156,In [41]: eval(repr('s'))
19157,Out[41]: 's'
19158,repr
19159,__repr__()
19160,__str__()
19161,__str__
19162,str()
19163,__repr__()
19164,__str__()
19165,__repr__()
19166,str()
19167,__str__()
19168,__repr__()
19169,repr()
19170,...
19171,__str__()
19172,__repr__()
19173,str()
19174,repr()
19175,str()
19176,repr()
19177,str()
19178,__str__()
19179,repr()
19180,__repr__()
19181,eval()
19182,x
19183,int
19184,y
19185,">>> x, y = 'foo', 123"
19186,">>> str(x), str(y)"
19187,"('foo', '123')"
19188,>>> 123
19189,123
19190,>>> foo
19191,Traceback (most recent call last):
19192,"  File ""<stdin>"", line 1, in <module>"
19193,NameError: name 'foo' is not defined
19194,int
19195,str
19196,'123'
19197,eval()
19198,'foo'
19199,>>> eval('123')
19200,123
19201,>>> eval('foo')
19202,Traceback (most recent call last):
19203,"  File ""<stdin>"", line 1, in <module>"
19204,"  File ""<string>"", line 1, in <module>"
19205,NameError: name 'foo' is not defined
19206,eval()
19207,repr()
19208,">>> repr(x), repr(y)"
19209,"(""'foo'"", '123')"
19210,>>> 123
19211,123
19212,>>> 'foo'
19213,'foo'
19214,'foo'
19215,"""'foo'"""
19216,123
19217,int
19218,str()
19219,repr()
19220,eval()
19221,>>> eval('123')
19222,123
19223,">>> eval(""'foo'"")"
19224,'foo'
19225,123
19226,'foo'
19227,foo
19228,eval()
19229,str()
19230,repr()
19231,print
19232,print()
19233,str()
19234,>>>
19235,repr()
19236,str()
19237,repr()
19238,__str__()
19239,__repr__()
19240,str(x)
19241,repr(y)
19242,x.__str__()
19243,y.__repr()__
19244,__str__()
19245,__repr__()
19246,str()
19247,repr()
19248,str()
19249,repr()
19250,__str__()
19251,__repr__()
19252,__str__
19253,__repr__
19254,Fraction
19255,class Fraction:
19256,"    def __init__(self, num, den):"
19257,        self.__num = num
19258,        self.__den = den
19259,
19260,    def __str__(self):
19261,        return '(' + str(self.__num) + '/' + str(self.__den) + ')'
19262,
19263,    def __repr__(self):
19264,"        return 'Fraction (' + str(self.__num) + ',' + str(self.__den) + ')'"
19265,
19266,
19267,
19268,"f = Fraction(1,2)"
19269,print('I want to represent the Fraction STRING as ' + str(f)) # (1/2)
19270,"print('I want to represent the Fraction OBJECT as ', repr(f)) # Fraction (1,2)"
19271,__str__
19272,__repr__
19273,__repr__
19274,eval(repr(obj))
19275,eval
19276,pickle
19277,__repr__ = __str__
19278,str(list)
19279,repr
19280,repr
19281,"print([your, objects])"
19282,repr
19283,eval
19284,eval(repr(obj))
19285,__repr__
19286,eval
19287,unlink
19288,open
19289,eval
19290,str
19291,repr
19292,__str__
19293,__repr__
19294,eval
19295,__repr__
19296,__repr__
19297,__repr__
19298,__str__
19299,class Foo():
19300,    def __repr__(self):
19301,"        return(""repr"")"
19302,    def __str__(self):
19303,"        return(""str"")"
19304,
19305,foo = Foo()
19306,foo #repr
19307,print(foo) #str
19308,__str__
19309,str(obj)
19310,__repr__
19311,repr(obj)
19312,class C1:pass
19313,
19314,class C2:        
19315,    def __str__(self):
19316,"        return str(f""{self.__class__.__name__} class str "")"
19317,
19318,class C3:        
19319,    def __repr__(self):        
19320,"         return str(f""{self.__class__.__name__} class repr"")"
19321,
19322,class C4:        
19323,    def __str__(self):
19324,"        return str(f""{self.__class__.__name__} class str "")"
19325,    def __repr__(self):        
19326,"         return str(f""{self.__class__.__name__} class repr"")"
19327,
19328,
19329,ci1 = C1()    
19330,ci2 = C2()  
19331,ci3 = C3()  
19332,ci4 = C4()
19333,
19334,print(ci1)       #<__main__.C1 object at 0x0000024C44A80C18>
19335,print(str(ci1))  #<__main__.C1 object at 0x0000024C44A80C18>
19336,print(repr(ci1)) #<__main__.C1 object at 0x0000024C44A80C18>
19337,print(ci2)       #C2 class str
19338,print(str(ci2))  #C2 class str
19339,print(repr(ci2)) #<__main__.C2 object at 0x0000024C44AE12E8>
19340,print(ci3)       #C3 class repr
19341,print(str(ci3))  #C3 class repr
19342,print(repr(ci3)) #C3 class repr
19343,print(ci4)       #C4 class str 
19344,print(str(ci4))  #C4 class str 
19345,print(repr(ci4)) #C4 class repr
19346,__str__
19347,__repr__
19348,__repr__
19349,__str__
19350,def __repr__(self):
19351,"    return '{0} ({1})'.format(object.__repr__(self), str(self))"
19352,">>> print(decimal.Decimal(23) / decimal.Decimal(""1.05""))"
19353,21.90476190476190476190476190
19354,">>> decimal.Decimal(23) / decimal.Decimal(""1.05"")"
19355,Decimal('21.90476190476190476190476190')
19356,print()
19357,"decimal.Decimal(23) / decimal.Decimal(""1.05"")"
19358,__str__()
19359,decimal.Decimal
19360,__repr__()
19361,__str__
19362,__repr__
19363,>>> from datetime import datetime
19364,>>> from decimal import Decimal
19365,">>> print (Decimal('52'), datetime.now())"
19366,"(Decimal('52'), datetime.datetime(2015, 11, 16, 10, 51, 26, 185000))"
19367,">>> str((Decimal('52'), datetime.now()))"
19368,"""(Decimal('52'), datetime.datetime(2015, 11, 16, 10, 52, 22, 176000))"""
19369,__str__
19370,tuple
19371,__repr__
19372,__repr__
19373,__str__
19374,class Demo:
19375,  def __repr__(self):
19376,    return 'repr'
19377,  def __str__(self):
19378,    return 'str'
19379,
19380,demo = Demo()
19381,"print(demo) # use __str__, output 'str' to stdout"
19382,
19383,"s = str(demo) # __str__ is used, return 'str'"
19384,"r = repr(demo) # __repr__ is used, return 'repr'"
19385,
19386,import logging
19387,logger = logging.getLogger(logging.INFO)
19388,"logger.info(demo) # use __str__, output 'str' to stdout"
19389,
19390,"from pprint import pprint, pformat"
19391,"pprint(demo) # use __repr__, output 'repr' to stdout"
19392,"result = pformat(demo) # use __repr__, result is string which value is 'str'"
19393,__str__
19394,__repr__
19395,__str__
19396,__repr__
19397,In [30]: str(datetime.datetime.now())
19398,Out[30]: '2017-12-07 15:41:14.002752'
19399,Disguised in string form
19400,__repr__
19401,In [32]: datetime.datetime.now()
19402,"Out[32]: datetime.datetime(2017, 12, 7, 15, 43, 27, 297769)"
19403,Presence in real body which allows to be manipulated directly.
19404,__repr__
19405,In [33]: datetime.datetime.now()
19406,"Out[33]: datetime.datetime(2017, 12, 7, 15, 47, 9, 741521)"
19407,"In [34]: datetime.datetime(2017, 12, 7, 15, 47, 9, 741521) - datetime.datetime(2"
19408,"    ...: 017, 12, 7, 15, 43, 27, 297769)"
19409,"Out[34]: datetime.timedelta(0, 222, 443752)"
19410,__str__
19411,In [35]: '2017-12-07 15:43:14.002752' - '2017-12-07 15:41:14.002752'
19412,TypeError: unsupported operand type(s) for -: 'str' and 'str'
19413,In [36]: str('string_body')
19414,Out[36]: 'string_body' # in string form
19415,
19416,In [37]: repr('real_body')
19417,"Out[37]: ""'real_body'"" #its real body hide inside"
19418,__str__
19419,__repr__
19420,__str__
19421,__repr__
19422,__repr__
19423,__repr__
19424,__str__
19425,__repr__
19426,print
19427,str
19428,__str__
19429,__repr__
19430,class Person:
19431,     pass
19432,
19433,p=Person()
19434,repr(p)
19435, <__main__.Person object at 0x7fb2604f03a0>
19436,str(p)
19437,__str__
19438,__repr__
19439,__str__
19440,class Person:
19441,"    def __init__(self,name,age):"
19442,        self.name=name
19443,        self.age=age
19444,    def __repr__(self):
19445,"        print(""__repr__ called"")"
19446,"        return f""Person(name='{self.name}',age={self.age})"""
19447,
19448,"p=Person(""ali"",20)"
19449,print(p)
19450,str(p)
19451, __repr__ called
19452,"     Person(name='ali',age=20)"
19453,__str__()
19454,class Person:
19455,"    def __init__(self, name, age):"
19456,        self.name = name
19457,        self.age = age
19458,        
19459,    def __repr__(self):
19460,        print('__repr__ called')
19461,"        return f""Person(name='{self.name}, age=self.age')"""
19462,    
19463,    def __str__(self):
19464,        print('__str__ called')
19465,        return self.name
19466,
19467,"p=Person(""ali"",20)"
19468,print(p)
19469,__str__()
19470,__str__ called
19471,ali
19472,repr(p)
19473,__repr__
19474,__str__
19475,class Person:
19476,"def __init__(self, name, age):"
19477,    self.name = name
19478,    self.age = age
19479,
19480,def __str__(self):
19481,    print('__str__ called')
19482,    return self.name
19483,
19484,"p=Person('ali',20)"
19485,print(p)
19486,__str__
19487,__str__ called
19488,ali
19489,__repr__
19490,__str__
19491,f'name is {p}'
19492,__str__
19493,toString
19494,__str__
19495,__repr__
19496,__repr__
19497,__str__
19498,__repr__
19499,somelists = [
19500,"   [1, 2, 3],"
19501,"   ['a', 'b'],"
19502,"   [4, 5]"
19503,]
19504,"[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), (2, 'a', 5) ...]"
19505,set(cartesian product)
19506,set(inputlist)
19507,itertools.product
19508,itertools.product
19509,set
19510,itertools.product
19511,import itertools
19512,
19513,somelists = [
19514,"   [1, 2, 3],"
19515,"   ['a', 'b'],"
19516,"   [4, 5]"
19517,]
19518,for element in itertools.product(*somelists):
19519,    print(element)
19520,"for element in itertools.product([1, 2, 3], ['a', 'b'], [4, 5]):"
19521,    print(element)
19522,*
19523,import itertools
19524,">>> for i in itertools.product([1,2,3],['a','b'],[4,5]):"
19525,...         print i
19526,...
19527,"(1, 'a', 4)"
19528,"(1, 'a', 5)"
19529,"(1, 'b', 4)"
19530,"(1, 'b', 5)"
19531,"(2, 'a', 4)"
19532,"(2, 'a', 5)"
19533,"(2, 'b', 4)"
19534,"(2, 'b', 5)"
19535,"(3, 'a', 4)"
19536,"(3, 'a', 5)"
19537,"(3, 'b', 4)"
19538,"(3, 'b', 5)"
19539,>>>
19540,">>> [(a, b, c) for a in [1,2,3] for b in ['a','b'] for c in [4,5]]"
19541,"[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), "
19542," (2, 'a', 5), (2, 'b', 4), (2, 'b', 5), (3, 'a', 4), (3, 'a', 5), "
19543," (3, 'b', 4), (3, 'b', 5)]"
19544,product()
19545,def product(*args):
19546,    if not args:
19547,"        return iter(((),)) # yield tuple()"
19548,"    return (items + (item,) "
19549,            for items in product(*args[:-1]) for item in args[-1])
19550,">>> list(product([1,2,3], ['a','b'], [4,5])) "
19551,"[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), "
19552," (2, 'a', 5), (2, 'b', 4), (2, 'b', 5), (3, 'a', 4), (3, 'a', 5), "
19553," (3, 'b', 4), (3, 'b', 5)]"
19554,">>> list(product([1,2,3]))"
19555,"[(1,), (2,), (3,)]"
19556,>>> list(product([]))
19557,[]
19558,>>> list(product())
19559,[()]
19560,args
19561,somelists = [
19562,"   [1, 2, 3],"
19563,"   ['a', 'b'],"
19564,"   [4, 5]"
19565,]
19566,
19567,"cart_prod = [(a,b,c) for a in somelists[0] for b in somelists[1] for c in somelists[2]]"
19568,lst = [i for i in itertools.product(*somelists)]
19569,import itertools
19570,result = list(itertools.product(*somelists))
19571,*
19572,def product(ar_list):
19573,    if not ar_list:
19574,        yield ()
19575,    else:
19576,        for a in ar_list[0]:
19577,            for prod in product(ar_list[1:]):
19578,"                yield (a,)+prod"
19579,
19580,"print list(product([[1,2],[3,4],[5,6]]))"
19581,"[(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6)]"
19582,def f(): while True: yield 1
19583,"def product(*args, **kwds):"
19584,"    # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy"
19585,"    # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111"
19586,"    pools = map(tuple, args) * kwds.get('repeat', 1)"
19587,    result = [[]]
19588,    for pool in pools:
19589,        result = [x+[y] for x in result for y in pool]
19590,    for prod in result:
19591,        yield tuple(prod)
19592,list(result)
19593,def cartesian_iterative(pools):
19594,  result = [[]]
19595,  for pool in pools:
19596,    result = [x+[y] for x in result for y in pool]
19597,  return result
19598,def cartesian_recursive(pools):
19599,  if len(pools) > 2:
19600,"    pools[0] = product(pools[0], pools[1])"
19601,    del pools[1]
19602,    return cartesian_recursive(pools)
19603,  else:
19604,"    pools[0] = product(pools[0], pools[1])"
19605,    del pools[1]
19606,    return pools
19607,"def product(x, y):"
19608,"  return [xx + [yy] if isinstance(xx, list) else [xx] + [yy] for xx in x for yy in y]"
19609,def cartesian_reduct(pools):
19610,"  return reduce(lambda x,y: product(x,y) , pools)"
19611,pools
19612,"def rec_cart(start, array, partial, results):"
19613,  if len(partial) == len(array):
19614,    results.append(partial)
19615,    return 
19616,
19617,  for element in array[start]:
19618,"    rec_cart(start+1, array, partial+[element], results)"
19619,
19620,rec_res = []
19621,"some_lists = [[1, 2, 3], ['a', 'b'], [4, 5]]  "
19622,"rec_cart(0, some_lists, [], rec_res)"
19623,print(rec_res)
19624,def itr_cart(array):
19625,  results = [[]]
19626,  for i in range(len(array)):
19627,    temp = []
19628,    for res in results:
19629,      for element in array[i]:
19630,        temp.append(res+[element])
19631,    results = temp
19632,
19633,  return results
19634,
19635,"some_lists = [[1, 2, 3], ['a', 'b'], [4, 5]]  "
19636,itr_res = itr_cart(some_lists)
19637,print(itr_res)
19638,def product_args(*args):
19639,    if args:
19640,        for a in args[0]:
19641,"            for prod in product_args(*args[1:]) if args[1:] else ((),):"
19642,"                yield (a,) + prod"
19643,def product2(ar_list):
19644,"    """""""
19645,    >>> list(product(()))
19646,    [()]
19647,    >>> list(product2(()))
19648,    []
19649,"    """""""
19650,    return product_args(*ar_list)
19651,product(())
19652,import itertools
19653,import sympy
19654,
19655,"x, y = sympy.symbols('x y')"
19656,
19657,"somelist = [[x,y], [1,2,3], [4,5]]"
19658,"somelist2 = [[1,2], [1,2,3], [4,5]]"
19659,
19660,for element in itertools.product(*somelist):
19661,  print element
19662,def cartesian_product(L):  
19663,   if L:
19664,"       return {(a,) + b for a in L[0] "
19665,                        for b in cartesian_product(L[1:])}
19666,   else:
19667,       return {()}
19668,import itertools
19669,
19670,somelists = [
19671,"   [1, 2, 3],"
19672,"   ['a', 'b'],"
19673,"   [4, 5]"
19674,]
19675,lst = [i for i in itertools.product(*somelists)]
19676,itertools.product
19677,itertools
19678,permutations
19679,combinations
19680,combinations_with_replacement
19681,from itertools import product
19682,
19683,somelists = [
19684,"   [1, 2, 3],"
19685,"   ['a', 'b'],"
19686,"   [4, 5]"
19687,]
19688,
19689,result = list(product(*somelists))
19690,print(result)
19691,import numpy as np
19692,
19693,"def cartesian(arrays, dtype=None, out=None):"
19694,    arrays = [np.asarray(x) for x in arrays]
19695,    if dtype is None:
19696,        dtype = arrays[0].dtype
19697,    n = np.prod([x.size for x in arrays])
19698,    if out is None:
19699,"        out = np.zeros([n, len(arrays)], dtype=dtype)"
19700,
19701,    m = int(n / arrays[0].size) 
19702,"    out[:,0] = np.repeat(arrays[0], m)"
19703,    if arrays[1:]:
19704,"        cartesian(arrays[1:], out=out[0:m, 1:])"
19705,"        for j in range(1, arrays[0].size):"
19706,"            out[j*m:(j+1)*m, 1:] = out[0:m, 1:]"
19707,    return out
19708,somelists = [
19709,"   [1, 2, 3],"
19710,"   ['a', 'b'],"
19711,"   [4, 5]"
19712,]
19713,
19714,"[tuple(x) for x in cartesian(somelists, 'object')]"
19715,"[(1, 'a', 4),"
19716," (1, 'a', 5),"
19717," (1, 'b', 4),"
19718," (1, 'b', 5),"
19719," (2, 'a', 4),"
19720," (2, 'a', 5),"
19721," (2, 'b', 4),"
19722," (2, 'b', 5),"
19723," (3, 'a', 4),"
19724," (3, 'a', 5),"
19725," (3, 'b', 4),"
19726," (3, 'b', 5)]"
19727,"[(x, y) for x in range(10) for y in range(10)]"
19728,"[(x, y, z) for x in range(10) for y in range(10) for z in range(10)]"
19729,class a:
19730,    list = []
19731,
19732,x = a()
19733,y = a()
19734,
19735,x.list.append(1)
19736,y.list.append(2)
19737,x.list.append(3)
19738,y.list.append(4)
19739,
19740,"print(x.list) # prints [1, 3]"
19741,"print(y.list) # prints [2, 4]"
19742,"print(x.list) # prints [1, 2, 3, 4]"
19743,"print(y.list) # prints [1, 2, 3, 4]"
19744,a
19745,list
19746,list
19747,class a:
19748,    def __init__(self):
19749,        self.list = []
19750,__init__
19751,x.list = []
19752,x.list
19753,y.list
19754,__init__
19755,list
19756,__init__
19757,__init__
19758,>>> class a:
19759,    list = []
19760,
19761,>>> y = a()
19762,>>> x = a()
19763,>>> x.list = []
19764,>>> y.list = []
19765,>>> x.list.append(1)
19766,>>> y.list.append(2)
19767,>>> x.list.append(3)
19768,>>> y.list.append(4)
19769,>>> print(x.list)
19770,"[1, 3]"
19771,>>> print(y.list)
19772,"[2, 4]"
19773,>>> class a:
19774,    string = ''
19775,
19776,
19777,>>> x = a()
19778,>>> y = a()
19779,>>> x.string += 'x'
19780,>>> y.string += 'y'
19781,>>> x.string
19782,'x'
19783,>>> y.string
19784,'y'
19785,__init__
19786,[This is a good thing because...]
19787,class A:
19788,    temp = 'Skyharbor'
19789,
19790,"    def __init__(self, x):"
19791,        self.x = x
19792,
19793,"    def change(self, y):"
19794,        self.temp = y
19795,temp
19796,__init__
19797,self.x
19798,self.temp
19799,a = A('Tesseract')
19800,>>> print(a.temp)
19801,Skyharbor
19802,>>> print(A.temp)
19803,Skyharbor
19804,a.temp
19805,A.temp
19806,type
19807,A
19808,A
19809,a
19810,A
19811,>>> A.temp = 'Monuments'
19812,>>> print(A.temp)
19813,Monuments
19814,>>> print(a.temp)
19815,Monuments
19816,id(a.temp)
19817,id(A.temp)
19818,__dict__
19819,>>> print(A.__dict__)
19820,{
19821,"    'change': <function change at 0x7f5e26fee6e0>,"
19822,"    '__module__': '__main__',"
19823,"    '__init__': <function __init__ at 0x7f5e26fee668>,"
19824,"    'temp': 'Monuments',"
19825,    '__doc__': None
19826,}
19827,>>> print(a.__dict__)
19828,{x: 'Tesseract'}
19829,temp
19830,A
19831,x
19832,a.temp
19833,a
19834,__getattribute__()
19835,a.temp
19836,a.__getattribute__('temp')
19837,__getattribute__()
19838,a.__getattribute__('temp')
19839,a.__dict__['temp']
19840,a.__class__.__dict__['temp']
19841,change
19842,>>> a.change('Intervals')
19843,>>> print(a.temp)
19844,Intervals
19845,>>> print(A.temp)
19846,Monuments
19847,self
19848,print(a.temp)
19849,print(A.temp)
19850,id(a.temp)
19851,id(A.temp)
19852,__init__
19853,__init__
19854,class mymeta(type):
19855,"    def __init__(cls, name, bases, d):"
19856,        pass
19857,
19858,"    def __setattr__(cls, attr, value):"
19859,"        print(""setting "" + attr)"
19860,"        super(mymeta, cls).__setattr__(attr, value)"
19861,
19862,class myclass(object):
19863,    __metaclass__ = mymeta
19864,    myattr = []
19865,
19866,a = myclass()
19867,a.myattr = []           #NOTHING IS PRINTED
19868,myclass.myattr = [5]    #change is printed here
19869,b = myclass()
19870,print(b.myattr)         #pass through lookup on the base class
19871,
19872,class expando(object):
19873,    pass
19874,
19875,a = expando()
19876,a.random = 5            #no class variable required
19877,print(a.random)         #but it still works
19878,__init__()
19879,class example:
19880,    list=[] #This is class variable shared by all instance
19881,    def __init__(self):
19882,        self.list = [] #This is instance variable referred to specific instance
19883,id
19884,link_text
19885,partial_link_text
19886,name
19887,class_name
19888,tag_name
19889,css_selector
19890,xpath
19891,"HTML: <div class=""ab cd"">"
19892,
19893,CSS matches: div.ab
19894,CSS matches: div.cd
19895,CSS matches: div.cd.ab
19896,CSS matches: div.ab.cd
19897,
19898,"XPath matches: //div[@class=""ab cd""]"
19899,"XPath matches: //div[contains(@class, ""ab"")]"
19900,"XPath matches: //div[contains(@class, ""cd"")]"
19901,"XPath matches: //div[contains(@class, ""ab"") and contains(@class, ""cd"")]"
19902,
19903,"XPath DOES NOT match: //div[@class=""cd""]"
19904,"XPath DOES NOT match: //div[@class=""ab""]"
19905,"XPath DOES NOT match: //div[@class=""cd ab""]"
19906,id
19907,name
19908,LinkText
19909,PartialLinkText
19910,Tag Name
19911,ClassName
19912,CssSelectors
19913,XPath
19914,WebDriver
19915,W3C Recommendation Candidate
19916,Selenium
19917,W3C Recommendation Candidate
19918,Answer
19919,The performance of the locator must be optimized.
19920,css
19921,xpath
19922,W3C recommendation
19923,css
19924,xpath
19925,or
19926,"[-0.25, 0.25]"
19927,df = df[(df['col'] < -0.25) or (df['col'] > 0.25)]
19928,|
19929,or
19930,abs(result['var'])>0.25
19931,max()
19932,numpy.maximum()
19933,or
19934,and
19935,truth
19936,pandas
19937,|
19938,&
19939,df = df[(df['col'] < -0.25) | (df['col'] > 0.25)]
19940,or
19941,and
19942,bool
19943,pandas.Series
19944,>>> import pandas as pd
19945,>>> x = pd.Series([1])
19946,>>> bool(x)
19947,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
19948,bool
19949,or
19950,and
19951,if
19952,while
19953,>>> x or x
19954,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
19955,>>> x and x
19956,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
19957,>>> if x:
19958,...     print('fun')
19959,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
19960,>>> while x:
19961,...     print('fun')
19962,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
19963,bool
19964,any
19965,all
19966,filter
19967,pandas.Series
19968,and
19969,or
19970,numpy.logical_or
19971,  >>> import numpy as np
19972,"  >>> np.logical_or(x, y)"
19973,|
19974,  >>> x | y
19975,numpy.logical_and
19976,"  >>> np.logical_and(x, y)"
19977,&
19978,  >>> x & y
19979,pandas.Series
19980,if
19981,while
19982,  >>> x = pd.Series([])
19983,  >>> x.empty
19984,  True
19985,  >>> x = pd.Series([1])
19986,  >>> x.empty
19987,  False
19988,len
19989,list
19990,tuple
19991,if x.size
19992,if not x.empty
19993,if x
19994,Series
19995,  >>> x = pd.Series([100])
19996,  >>> (x > 50).bool()
19997,  True
19998,  >>> (x < 50).bool()
19999,  False
20000,.bool()
20001,  >>> x = pd.Series([100])
20002,  >>> x.item()
20003,  100
20004,"  >>> x = pd.Series([0, 1, 2])"
20005,  >>> x.all()   # because one element is zero
20006,  False
20007,  >>> x.any()   # because one (or more) elements are non-zero
20008,  True
20009,&
20010,|
20011,()
20012,data_query = data[(data['year'] >= 2005) & (data['year'] <= 2010)]
20013,data_query = data[(data['year'] >= 2005 & data['year'] <= 2010)]
20014,&
20015,|
20016,np.random.seed(0)
20017,"df = pd.DataFrame(np.random.randn(5,3), columns=list('ABC'))"
20018,
20019,>>> df
20020,          A         B         C
20021,0  1.764052  0.400157  0.978738
20022,1  2.240893  1.867558 -0.977278
20023,2  0.950088 -0.151357 -0.103219
20024,3  0.410599  0.144044  1.454274
20025,4  0.761038  0.121675  0.443863
20026,
20027,>>> df.loc[(df.C > 0.25) | (df.C < -0.25)]
20028,          A         B         C
20029,0  1.764052  0.400157  0.978738
20030,1  2.240893  1.867558 -0.977278
20031,3  0.410599  0.144044  1.454274
20032,4  0.761038  0.121675  0.443863
20033,df.C > 0.25
20034,0     True
20035,1    False
20036,2    False
20037,3     True
20038,4     True
20039,"Name: C, dtype: bool"
20040,and
20041,or
20042,# Any value in either column is True?
20043,(df.C > 0.25).any() or (df.C < -0.25).any()
20044,True
20045,
20046,# All values in either column is True?
20047,(df.C > 0.25).all() or (df.C < -0.25).all()
20048,False
20049,">>> df[[any([a, b]) for a, b in zip(df.C > 0.25, df.C < -0.25)]]"
20050,          A         B         C
20051,0  1.764052  0.400157  0.978738
20052,1  2.240893  1.867558 -0.977278
20053,3  0.410599  0.144044  1.454274
20054,4  0.761038  0.121675  0.443863
20055,import operator
20056,import numpy as np
20057,import pandas as pd
20058,np.random.seed(0)
20059,"df = pd.DataFrame(np.random.randn(5,3), columns=list('ABC'))"
20060,"df.loc[operator.or_(df.C > 0.25, df.C < -0.25)]"
20061,
20062,          A         B         C
20063,0  1.764052  0.400157  0.978738
20064,1  2.240893  1.867558 -0.977278
20065,3  0.410599  0.144044  1.454274
20066,4  0.761038  0.121675  0.4438
20067,query
20068,"df = df.query(""(col > 0.25) or (col < -0.25)"")"
20069,WT_38hph_IP_2
20070,WT_38hph_input_2
20071,log2(WT_38hph_IP_2/WT_38hph_input_2)
20072,"""(log2(WT_38hph_IP_2/WT_38hph_input_2) > 1) and (WT_38hph_IP_2 > 20)"""
20073,KeyError: 'log2'
20074,UndefinedVariableError: name 'log2' is not defined
20075,"ValueError: ""log2"" is not a supported function"
20076,|
20077,or
20078,&
20079,and
20080,~
20081,not
20082,df['A'] > 2 & df['B'] < 3
20083,df['A'] > (2 & df['B']) < 3
20084,(df['A'] > 2) & (df['B'] < 3)
20085,# Wrong
20086,df['col'] < -0.25 | df['col'] > 0.25
20087,
20088,# Right
20089,(df['col'] < -0.25) | (df['col'] > 0.25)
20090,|
20091,or
20092,&
20093,and
20094,~
20095,not
20096,# Wrong
20097,(df['col'] < -0.25) or (df['col'] > 0.25)
20098,
20099,# Right
20100,(df['col'] < -0.25) | (df['col'] > 0.25)
20101,if
20102,# Wrong
20103,"if pd.Series([True, False]):"
20104,    pass
20105,if
20106,pandas.Series.any
20107,# Right
20108,if df['col'].eq(0).all():
20109,    # If you want all column values equal to zero
20110,    print('do something')
20111,
20112,# Right
20113,if df['col'].eq(0).any():
20114,    # If you want at least one column value equal to zero
20115,    print('do something')
20116,pandas.Series.lt()
20117,pandas.Series.gt()
20118,pandas.Series.le()
20119,pandas.Series.ge()
20120,pandas.Series.ne()
20121,pandas.Series.eq()
20122,df = df[(df['col'] < -0.25) | (df['col'] > 0.25)]
20123,
20124,# is equal to
20125,
20126,df = df[df['col'].lt(-0.25) | df['col'].gt(0.25)]
20127,pandas.Series.between()
20128,pandas.Series.between
20129,"df['col].between(left, right)"
20130,(left <= df['col']) & (df['col'] <= right)
20131,"df['col].between(left, right, inclusive='left)"
20132,(left <= df['col']) & (df['col'] < right)
20133,"df['col].between(left, right, inclusive='right')"
20134,(left < df['col']) & (df['col'] <= right)
20135,"df['col].between(left, right, inclusive='neither')"
20136,(left < df['col']) & (df['col'] < right)
20137,df = df[(df['col'] > -0.25) & (df['col'] < 0.25)]
20138,
20139,# is equal to
20140,
20141,"df = df[df['col'].between(-0.25, 0.25, inclusive='neither')]"
20142,pandas.DataFrame.query()
20143,query()
20144,pandas.DataFrame.query()
20145,&
20146,|
20147,and
20148,or
20149,df = df[(df['col'] < -0.25) | (df['col'] > 0.25)]
20150,
20151,# is equal to
20152,
20153,df = df.query('col < -0.25 or col > 0.25')
20154,pandas.DataFrame.eval()
20155,pandas.DataFrame.eval()
20156,pandas.DataFrame.query()
20157,df = df[(df['col'] < -0.25) | (df['col'] > 0.25)]
20158,
20159,# is equal to
20160,
20161,df = df[df.eval('col < -0.25 or col > 0.25')]
20162,pandas.DataFrame.query()
20163,pandas.DataFrame.eval()
20164,df['col'].all()
20165,df['col'].item()
20166,if df != '':
20167,    pass
20168,if df is not '':
20169,    pass
20170,|
20171,or
20172,&
20173,and
20174,mask
20175,"mask = (df[""col1""]>=df[""col2""]) & (stock[""col1""]<=df[""col2""])"
20176,df_new = df[mask]
20177,from timeit import repeat
20178,
20179,"setup = """""""
20180,import numpy as np;
20181,import random;
20182,"x = np.linspace(0,100);"
20183,"lb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()"
20184,""""""""
20185,"stmts = 'x[(x > lb) * (x <= ub)]', 'x[(x > lb) & (x <= ub)]', 'x[np.logical_and(x > lb, x <= ub)]'"
20186,
20187,for _ in range(3):
20188,    for stmt in stmts:
20189,"        t = min(repeat(stmt, setup, number=100_000))"
20190,"        print('%.4f' % t, stmt)"
20191,    print()
20192,0.4808 x[(x > lb) * (x <= ub)]
20193,0.4726 x[(x > lb) & (x <= ub)]
20194,"0.4904 x[np.logical_and(x > lb, x <= ub)]"
20195,
20196,0.4725 x[(x > lb) * (x <= ub)]
20197,0.4806 x[(x > lb) & (x <= ub)]
20198,"0.5002 x[np.logical_and(x > lb, x <= ub)]"
20199,
20200,0.4781 x[(x > lb) * (x <= ub)]
20201,0.4336 x[(x > lb) & (x <= ub)]
20202,"0.4974 x[np.logical_and(x > lb, x <= ub)]"
20203,*
20204,from timeit import repeat
20205,
20206,"setup = """""""
20207,import numpy as np;
20208,import random;
20209,import pandas as pd;
20210,"x = pd.DataFrame(np.linspace(0,100));"
20211,"lb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()"
20212,""""""""
20213,"stmts = 'x[(x > lb) & (x <= ub)]', 'x[np.logical_and(x > lb, x <= ub)]'"
20214,
20215,for _ in range(3):
20216,    for stmt in stmts:
20217,"        t = min(repeat(stmt, setup, number=100))"
20218,"        print('%.4f' % t, stmt)"
20219,    print()
20220,0.1964 x[(x > lb) & (x <= ub)]
20221,"0.1992 x[np.logical_and(x > lb, x <= ub)]"
20222,
20223,0.2018 x[(x > lb) & (x <= ub)]
20224,"0.1838 x[np.logical_and(x > lb, x <= ub)]"
20225,
20226,0.1871 x[(x > lb) & (x <= ub)]
20227,"0.1883 x[np.logical_and(x > lb, x <= ub)]"
20228,x = x.to_numpy()
20229,%timeit
20230,import numpy as np
20231,import random
20232,"lb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()"
20233,"lb, ub"
20234,"x = pd.DataFrame(np.linspace(0,100))"
20235,
20236,def asterik(x):
20237,    x = x.to_numpy()
20238,    return x[(x > lb) * (x <= ub)]
20239,
20240,def and_symbol(x):
20241,    x = x.to_numpy()
20242,    return x[(x > lb) & (x <= ub)]
20243,
20244,def numpy_logical(x):
20245,    x = x.to_numpy()
20246,"    return x[np.logical_and(x > lb, x <= ub)]"
20247,
20248,for i in range(3):
20249,    %timeit asterik(x)
20250,    %timeit and_symbol(x)
20251,    %timeit numpy_logical(x)
20252,    print('\n')
20253,"23 µs ± 3.62 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
20254,"35.6 µs ± 9.53 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
20255,"31.3 µs ± 8.9 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
20256,
20257,
20258,"21.4 µs ± 3.35 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
20259,"21.9 µs ± 1.02 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
20260,"21.7 µs ± 500 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
20261,
20262,
20263,"25.1 µs ± 3.71 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
20264,"36.8 µs ± 18.3 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
20265,"28.2 µs ± 5.97 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
20266,df[(some condition) conditional operator (some conditions)]
20267,df[some condition conditional-operator some condition]
20268,datetime
20269,"""Jun 1 2005  1:33PM"""
20270,strptime()
20271,datetime.strptime
20272,datetime.strptime
20273,datetime
20274,>>> from datetime import datetime
20275,">>> datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
20276,"datetime.datetime(2005, 6, 1, 13, 33)"
20277,date
20278,datetime
20279,.date()
20280,">>> datetime.strptime('Jun 1 2005', '%b %d %Y').date()"
20281,"date(2005, 6, 1)"
20282,strptime
20283,strptime
20284,strftime
20285,strptime
20286,strftime
20287,date
20288,datetime
20289,datetime
20290,"datetime.strptime('Jun 1 2005', '%b %d %Y').date() == date(2005, 6, 1)"
20291,datetime
20292,from datetime import timezone; datetime_object = datetime_object.replace(tzinfo=timezone.utc)
20293,dateutil
20294,from dateutil import parser
20295,"parser.parse(""Aug 28 1999 12:00AM"")  # datetime.datetime(1999, 8, 28, 0, 0)"
20296,strptime
20297,pip install python-dateutil
20298,June 2009
20299,12 June 2009
20300,$ python
20301,>>> import time
20302,">>> my_time = time.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
20303,"time.struct_time(tm_year=2005, tm_mon=6, tm_mday=1,"
20304,"                 tm_hour=13, tm_min=33, tm_sec=0,"
20305,"                 tm_wday=2, tm_yday=152, tm_isdst=-1)"
20306,
20307,timestamp = time.mktime(my_time)
20308,# convert time object to datetime
20309,from datetime import datetime
20310,my_datetime = datetime.fromtimestamp(timestamp)
20311,# convert time object to date
20312,from datetime import date
20313,my_date = date.fromtimestamp(timestamp)
20314,datetime.fromisoformat
20315,from datetime import datetime
20316,
20317,"date_string = ""2012-12-12 10:10:10"""
20318,print (datetime.fromisoformat(date_string))
20319,2012-12-12 10:10:10
20320,datetime.isoformat()
20321,dateutil.parser.isoparse
20322,dateutil
20323,fromisoformat()
20324,datetime.datetime.now()
20325,fromisoformat
20326,datetime
20327,pip install timestring
20328,>>> import timestring
20329,">>> timestring.Date('monday, aug 15th 2015 at 8:40 pm')"
20330,<timestring.Date 2015-08-15 20:40:00 4491909392>
20331,">>> timestring.Date('monday, aug 15th 2015 at 8:40 pm').date"
20332,"datetime.datetime(2015, 8, 15, 20, 40)"
20333,>>> timestring.Range('next week')
20334,<timestring.Range From 03/10/14 00:00:00 to 03/03/14 00:00:00 4496004880>
20335,">>> (timestring.Range('next week').start.date, timestring.Range('next week').end.date)"
20336,"(datetime.datetime(2014, 3, 10, 0, 0), datetime.datetime(2014, 3, 14, 0, 0))"
20337,strptime
20338,strftime
20339,Jun 1 2005  1:33PM
20340,%b %d %Y %I:%M%p
20341,string
20342,>>> dates = []
20343,>>> dates.append('Jun 1 2005  1:33PM')
20344,>>> dates.append('Aug 28 1999 12:00AM')
20345,>>> from datetime import datetime
20346,>>> for d in dates:
20347,"...     date = datetime.strptime(d, '%b %d %Y %I:%M%p')"
20348,...     print type(date)
20349,...     print date
20350,... 
20351,<type 'datetime.datetime'>
20352,2005-06-01 13:33:00
20353,<type 'datetime.datetime'>
20354,1999-08-28 00:00:00
20355,>>> import dateutil
20356,>>> dates = []
20357,>>> dates.append('12 1 2017')
20358,>>> dates.append('1 1 2017')
20359,>>> dates.append('1 12 2017')
20360,>>> dates.append('June 1 2017 1:30:00AM')
20361,>>> [parser.parse(x) for x in dates]
20362,"[datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2017, 1, 1, 0, 0), datetime.datetime(2017, 1, 12, 0, 0), datetime.datetime(2017, 6, 1, 1, 30)]"
20363,>>> datetime.datetime.strptime(
20364,"...     ""March 5, 2014, 20:13:50"", ""%B %d, %Y, %H:%M:%S"""
20365,... ).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=-3)))
20366,pytz
20367,">>> tehran = pytz.timezone(""Asia/Tehran"")"
20368,>>> local_time = tehran.localize(
20369,"...   datetime.datetime.strptime(""March 5, 2014, 20:13:50"","
20370,"...                              ""%B %d, %Y, %H:%M:%S"")"
20371,... )
20372,>>> local_time
20373,"datetime.datetime(2014, 3, 5, 20, 13, 50, tzinfo=<DstTzInfo 'Asia/Tehran' +0330+3:30:00 STD>)"
20374,pytz
20375,>>> utc_time = local_time.astimezone(pytz.utc)
20376,>>> utc_time
20377,"datetime.datetime(2014, 3, 5, 16, 43, 50, tzinfo=<UTC>)"
20378,">>> chicago = pytz.timezone(""America/Chicago"")"
20379,>>> weird_time = chicago.localize(
20380,"...   datetime.datetime.strptime(""November 18, 1883, 11:00:00"","
20381,"...                              ""%B %d, %Y, %H:%M:%S"")"
20382,... )
20383,>>> weird_time.astimezone(pytz.utc)
20384,"datetime.datetime(1883, 11, 18, 7, 34, tzinfo=<UTC>)"
20385,import datetime
20386,
20387,aDate = datetime.date.fromisoformat('2020-10-04')
20388,import datetime
20389,
20390,aDateTime = datetime.datetime.fromisoformat('2020-10-04 22:47:00')
20391,datetime.datetime.isoformat()
20392,YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]
20393,*
20394,import pandas as pd
20395,
20396,"dates = ['2015-12-25', '2015-12-26']"
20397,
20398,# 1) Use a list comprehension.
20399,>>> [d.date() for d in pd.to_datetime(dates)]
20400,"[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]"
20401,
20402,# 2) Convert the dates to a DatetimeIndex and extract the python dates.
20403,>>> pd.DatetimeIndex(dates).date.tolist()
20404,"[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]"
20405,"dates = pd.DatetimeIndex(start='2000-1-1', end='2010-1-1', freq='d').date.tolist()"
20406,
20407,>>> %timeit [d.date() for d in pd.to_datetime(dates)]
20408,"# 100 loops, best of 3: 3.11 ms per loop"
20409,
20410,>>> %timeit pd.DatetimeIndex(dates).date.tolist()
20411,"# 100 loops, best of 3: 6.85 ms per loop"
20412,"datetimes = ['Jun 1 2005  1:33PM', 'Aug 28 1999 12:00AM']"
20413,
20414,>>> pd.to_datetime(datetimes).to_pydatetime().tolist()
20415,"[datetime.datetime(2005, 6, 1, 13, 33), "
20416," datetime.datetime(1999, 8, 28, 0, 0)]"
20417,to_datetime
20418,.date
20419,pd.DatetimeIndex(dates).date.tolist()
20420,[d.date() for d in pd.to_datetime(dates)]
20421,parser
20422,strptime
20423,from dateutil import parser
20424,from datetime import datetime
20425,import timeit
20426,
20427,def dt():
20428,"    dt = parser.parse(""Jun 1 2005  1:33PM"")"
20429,def strptime():
20430,"    datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
20431,
20432,"print(timeit.timeit(stmt=dt, number=10**5))"
20433,"print(timeit.timeit(stmt=strptime, number=10**5))"
20434,>10.70296801342902
20435,>1.3627995655316933
20436,parser
20437,import time
20438,
20439,def num_suffix(n):
20440,    '''
20441,    Returns the suffix for any given int
20442,    '''
20443,"    suf = ('th','st', 'nd', 'rd')"
20444,    n = abs(n) # wise guy
20445,    tens = int(str(n)[-2:])
20446,    units = n % 10
20447,    if tens > 10 and tens < 20:
20448,        return suf[0] # teens with 'th'
20449,    elif units <= 3:
20450,        return suf[units]
20451,    else:
20452,        return suf[0] # 'th'
20453,
20454,def day_suffix(t):
20455,    '''
20456,    Returns the suffix of the given struct_time day
20457,    '''
20458,    return num_suffix(t.tm_mday)
20459,
20460,# Examples
20461,print num_suffix(123)
20462,print num_suffix(3431)
20463,print num_suffix(1234)
20464,print ''
20465,"print day_suffix(time.strptime(""1 Dec 00"", ""%d %b %y""))"
20466,"print day_suffix(time.strptime(""2 Nov 01"", ""%d %b %y""))"
20467,"print day_suffix(time.strptime(""3 Oct 02"", ""%d %b %y""))"
20468,"print day_suffix(time.strptime(""4 Sep 03"", ""%d %b %y""))"
20469,"print day_suffix(time.strptime(""13 Nov 90"", ""%d %b %y""))"
20470,"print day_suffix(time.strptime(""14 Oct 10"", ""%d %b %y""))"
20471,In [34]: import datetime
20472,
20473,In [35]: _now = datetime.datetime.now()
20474,
20475,In [36]: _now
20476,"Out[36]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)"
20477,
20478,In [37]: print _now
20479,2016-01-19 09:47:00.432000
20480,
20481,"In [38]: _parsed = datetime.datetime.strptime(str(_now),""%Y-%m-%d %H:%M:%S.%f"")"
20482,
20483,In [39]: _parsed
20484,"Out[39]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)"
20485,
20486,In [40]: assert _now == _parsed
20487,import datetime
20488,from django.utils.timezone import get_current_timezone
20489,tz = get_current_timezone()
20490,
20491,format = '%b %d %Y %I:%M%p'
20492,"date_object = datetime.datetime.strptime('Jun 1 2005  1:33PM', format)"
20493,date_obj = tz.localize(date_object)
20494,USE_TZ = True
20495,RuntimeWarning: DateTimeField MyModel.created received a naive datetime (2016-03-04 00:00:00) while time zone support is active.
20496,"def date(datestr="""", format=""%Y-%m-%d""):"
20497,    from datetime import datetime
20498,    if not datestr:
20499,        return datetime.today().date()
20500,"    return datetime.strptime(datestr, format).date()"
20501,"def convert_string_to_time(date_string, timezone):"
20502,    from datetime import datetime
20503,    import pytz
20504,"    date_time_obj = datetime.strptime(date_string[:26], '%Y-%m-%d %H:%M:%S.%f')"
20505,    date_time_obj_timezone = pytz.timezone(timezone).localize(date_time_obj)
20506,
20507,    return date_time_obj_timezone
20508,
20509,date = '2018-08-14 13:09:24.543953+00:00'
20510,TIME_ZONE = 'UTC'
20511,"date_time_obj_timezone = convert_string_to_time(date, TIME_ZONE)"
20512,>>> import arrow
20513,">>> dateStrings = [ 'Jun 1  2005 1:33PM', 'Aug 28 1999 12:00AM' ]"
20514,>>> for dateString in dateStrings:
20515,...     dateString
20516,"...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').datetime"
20517,"...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').format('ddd, Do MMM YYYY HH:mm')"
20518,"...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').humanize(locale='de')"
20519,...
20520,'Jun 1  2005 1:33PM'
20521,"datetime.datetime(2005, 6, 1, 13, 33, tzinfo=tzutc())"
20522,"'Wed, 1st Jun 2005 13:33'"
20523,'vor 11 Jahren'
20524,'Aug 28 1999 12:00AM'
20525,"datetime.datetime(1999, 8, 28, 0, 0, tzinfo=tzutc())"
20526,"'Sat, 28th Aug 1999 00:00'"
20527,'vor 17 Jahren'
20528,dateparser
20529,dateparser
20530,$ pip install dateparser
20531,dateparser.parse
20532,import dateparser
20533,
20534,t1 = 'Jun 1 2005  1:33PM'
20535,t2 = 'Aug 28 1999 12:00AM'
20536,
20537,dt1 = dateparser.parse(t1)
20538,dt2 = dateparser.parse(t2)
20539,
20540,print(dt1)
20541,print(dt2)
20542,2005-06-01 13:33:00
20543,1999-08-28 00:00:00
20544,import date_converter
20545,"converted_date = date_converter.string_to_datetime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
20546,>>> import datetime
20547,">>> date = datetime.date(int('2017'),int('12'),int('21'))"
20548,>>> date
20549,"datetime.date(2017, 12, 21)"
20550,>>> type(date)
20551,<type 'datetime.date'>
20552,selected_month_rec = '2017-09-01'
20553,"date_formate = datetime.date(int(selected_month_rec.split('-')[0]),int(selected_month_rec.split('-')[1]),int(selected_month_rec.split('-')[2]))"
20554,from dateutil import parser
20555,import datetime
20556,
20557,s='2021-03-04'
20558,
20559,parser.parse(s).date()
20560,"datetime.date(2021, 3, 4)"
20561,import pandas as pd 
20562,
20563,N = 1000
20564,
20565,l = ['Jun 1 2005  1:33PM'] * N
20566,
20567,"list(pd.to_datetime(l, format=format))"
20568,
20569,"%timeit _ = list(pd.to_datetime(l, format=format))"
20570,"1.58 ms ± 21.6 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
20571,from datetime import datetime
20572,"%timeit _ = list(map(lambda x: datetime.strptime(x, format), l))"
20573,"9.41 ms ± 95.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
20574,
20575,from dateutil.parser import parse
20576,"%timeit _ = list(map(lambda x: parse(x), l))"
20577,"73.8 ms ± 1.14 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
20578,import ciso8601
20579,
20580,l = ['2014-01-09'] * N
20581,
20582,"%timeit _ = list(map(lambda x: ciso8601.parse_datetime(x), l))"
20583,"186 µs ± 4.13 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
20584,don't
20585,explicitly specify
20586,format
20587,hack to by pass that step
20588,from dateutil.parser import parse
20589,
20590,# function that'll guess the format and convert it into python datetime format
20591,"def update_event(start_datetime=None, end_datetime=None, description=None):"
20592,    if start_datetime is not None:
20593,        new_start_time = parse(start_datetime)
20594,
20595,        return new_start_time
20596,
20597,#sample input dates in different format
20598,"d = ['06/07/2021 06:40:23.277000','06/07/2021 06:40','06/07/2021']"
20599,
20600,new = [update_event(i) for i in d]
20601,
20602,for date in new:
20603,    print(date)
20604,    # sample output dates in python datetime object
20605,    # 2014-04-23 00:00:00
20606,    # 2013-04-24 00:00:00
20607,    # 2014-04-25 00:00:00
20608,date.strftime('%Y/%m/%d %H:%M:%S.%f')
20609,from dateutil.parser import parse
20610,
20611,"def update_event(start_datetime=None, end_datetime=None, description=None):"
20612,    if start_datetime is not None:
20613,        new_start_time = parse(start_datetime)
20614,
20615,        return new_start_time
20616,
20617,#sample input dates in different format
20618,"d = ['06/07/2021 06:40:23.277000','06/07/2021 06:40','06/07/2021']"
20619,
20620,# passing the dates one by one through the function
20621,new = [update_event(i) for i in d]
20622,
20623,for date in new:
20624,    print(date.strftime('%Y/%m/%d %H:%M:%S.%f'))
20625,    # sample output dates in required python datetime object
20626,    #2021/06/07 06:40:23.277000
20627,    #2021/06/07 06:40:00.000000
20628,    #2021/06/07 00:00:00.000000
20629,strptime()
20630,"def try_strptime(s, fmts=['%d-%b-%y','%m/%d/%Y']):"
20631,    for fmt in fmts:
20632,        try:
20633,"            return datetime.strptime(s, fmt)"
20634,        except:
20635,            continue
20636,
20637,"    return None # or reraise the ValueError if no format matched, if you prefer"
20638,"emp = pd.read_csv(""C:\\py\\programs\\pandas_2\\pandas\\employees.csv"")"
20639,emp.info()
20640,<class 'pandas.core.frame.DataFrame'>
20641,"RangeIndex: 1000 entries, 0 to 999"
20642,Data columns (total 8 columns):
20643,First Name           933 non-null object
20644,Gender               855 non-null object
20645,Start Date           1000 non-null object
20646,
20647,Last Login Time      1000 non-null object
20648,Salary               1000 non-null int64
20649,Bonus %              1000 non-null float64
20650,Senior Management    933 non-null object
20651,Team                 957 non-null object
20652,"dtypes: float64(1), int64(1), object(6)"
20653,memory usage: 62.6+ KB
20654,parse_dates
20655,read_csv
20656,"emp = pd.read_csv(""C:\\py\\programs\\pandas_2\\pandas\\employees.csv"", parse_dates=[""Start Date"", ""Last Login Time""])"
20657,emp.info()
20658,
20659,
20660,<class 'pandas.core.frame.DataFrame'>
20661,"RangeIndex: 1000 entries, 0 to 999"
20662,Data columns (total 8 columns):
20663,First Name           933 non-null object
20664,Gender               855 non-null object
20665,Start Date           1000 non-null datetime64[ns]
20666,Last Login Time      1000 non-null datetime64[ns]
20667,Salary               1000 non-null int64
20668,Bonus %              1000 non-null float64
20669,Senior Management    933 non-null object
20670,Team                 957 non-null object
20671,"dtypes: datetime64[ns](2), float64(1), int64(1), object(4)"
20672,memory usage: 62.6+ KB
20673,from datetime import date
20674,date_from_yyyy_mm_dd = lambda δ : date(*[int(_) for _ in δ.split('-')])
20675,date_object = date_from_yyyy_mm_dd('2021-02-15')
20676,requests.py
20677,AttributeError
20678,import requests
20679,
20680,res = requests.get('http://www.google.ca')
20681,print(res)
20682,Traceback (most recent call last):
20683,"  File ""/Users/me/dev/rough/requests.py"", line 1, in <module>"
20684,    import requests
20685,"  File ""/Users/me/dev/rough/requests.py"", line 3, in <module>"
20686,    requests.get('http://www.google.ca')
20687,AttributeError: module 'requests' has no attribute 'get'
20688,ImportError
20689,from requests import get
20690,
20691,res = get('http://www.google.ca')
20692,print(res)
20693,Traceback (most recent call last):
20694,"  File ""requests.py"", line 1, in <module>"
20695,    from requests import get
20696,"  File ""/Users/me/dev/rough/requests.py"", line 1, in <module>"
20697,    from requests import get
20698,ImportError: cannot import name 'get'
20699,requests
20700,from requests.auth import AuthBase
20701,Traceback (most recent call last):
20702,"  File ""requests.py"", line 1, in <module>"
20703,    from requests.auth import AuthBase
20704,"  File ""/Users/me/dev/rough/requests.py"", line 1, in <module>"
20705,    from requests.auth import AuthBase
20706,ImportError: No module named 'requests.auth'; 'requests' is not a package
20707,requests.py
20708,requests
20709,sys.path
20710,"File ""/Users/me/dev/rough/requests.py"", line 1, in <module>"
20711,requests
20712,requests.pyc
20713,requests.py
20714,__pycache__
20715,pyc
20716,__pycache__
20717,py
20718,my_requests.py
20719,requests.pyc
20720,<Response [200]>
20721,mydecimal.py
20722,import decimal
20723,decimal
20724,mydecimal
20725,decimal
20726,numbers
20727,numbers.py
20728,.py
20729,.pyc
20730,__pycache__
20731,ImportError: attempted relative import with no known parent package
20732,package/
20733,    __init__.py
20734,    subpackage1/
20735,        __init__.py
20736,        moduleX.py
20737,        moduleY.py
20738,    subpackage2/
20739,        __init__.py
20740,        moduleZ.py
20741,    moduleA.py
20742,from .something import something
20743,python myfile.py
20744,import
20745,__name__
20746,__main__
20747,package.subpackage1.moduleX
20748,moduleX
20749,python -m package.subpackage1.moduleX
20750,__name__
20751,__main__
20752,package/
20753,    __init__.py
20754,    subpackage1/
20755,        __init__.py
20756,        moduleX.py
20757,    moduleA.py
20758,moduleX
20759,package.subpackage1.moduleX
20760,moduleA
20761,package.moduleA
20762,moduleX
20763,__main__
20764,moduleA
20765,__main__
20766,__main__
20767,package/subpackage1
20768,import moduleX
20769,moduleX
20770,moduleX
20771,package.subpackage1.moduleX
20772,python
20773,__main__
20774,from .. import foo
20775,package.subpackage1.moduleX
20776,..moduleA
20777,package.moduleA
20778,from .. import
20779,import
20780,__main__
20781,from .. import
20782,moduleX
20783,__main__
20784,__main__
20785,moduleX
20786,python -m package.subpackage1.moduleX
20787,-m
20788,moduleX
20789,myfile.py
20790,moduleX
20791,myfile.py
20792,package
20793,myfile.py
20794,from package.moduleA import spam
20795,package
20796,sys.path
20797,__name__
20798,__package__
20799,__name__
20800,__package__ + '.' + __name__
20801,__name__
20802,__package__
20803,None
20804,sys.path
20805,__package__
20806,main.py
20807,main.py
20808,__name__
20809,sys.path
20810,python -m pkg.mod
20811,__name__
20812,__main__
20813,pkg.mod
20814,__package__
20815,__name__
20816,sys.path
20817,python path/to/script.py
20818,sys.path
20819,python -m pkg.mod
20820,if __name__ == '__main__'
20821,from .. import foo
20822,if __package__ is None or __package__ == '':
20823,    # uses current directory visibility
20824,    import foo
20825,else:
20826,    # uses current package visibility
20827,    from . import foo
20828,from __future__ import absolute_import
20829,from . import foo
20830,from . import module
20831,module
20832,py -m package.module
20833,package
20834,java -cp bin_directory package.class
20835,.submodule import module
20836,import submodule.module
20837,from submodule import module
20838,if __name__ == '__main__':
20839,   # run test code here...
20840,"# import any site-lib modules first, then..."
20841,import sys
20842,parent_module = sys.modules['.'.join(__name__.split('.')[:-1]) or '__main__']
20843,if __name__ == '__main__' or parent_module.__name__ == '__main__':
20844,    from codex import Codex # these are in same folder as module under test!
20845,    from dblogger import DbLogger
20846,else:
20847,    from .codex import Codex
20848,    from .dblogger import DbLogger
20849,try
20850,except ImportError
20851,lib.foo
20852,lib.fileA
20853,f1
20854,f2
20855,lib.fileB
20856,Class3
20857,print
20858,from __future__ import print_function
20859,sys.path
20860,os.path.dirname(os.path.dirname(__file__))
20861,if _i in sys.path
20862,fileA
20863,fileB
20864,sys.path
20865,if _i not in sys.path
20866,from __future__ import print_function # only when showing how this works
20867,
20868,if __package__:
20869,"    print('Package named {!r}; __name__ is {!r}'.format(__package__, __name__))"
20870,"    from .fileA import f1, f2"
20871,    from .fileB import Class3
20872,else:
20873,    print('Not a package; __name__ is {!r}'.format(__name__))
20874,    # these next steps should be used only with care and if needed
20875,    # (remove the sys.path manipulation for simple cases!)
20876,"    import os, sys"
20877,    _i = os.path.dirname(os.path.abspath(__file__))
20878,    if _i not in sys.path:
20879,        print('inserting {!r} into sys.path'.format(_i))
20880,"        sys.path.insert(0, _i)"
20881,    else:
20882,        print('{!r} is already in sys.path'.format(_i))
20883,    del _i # clean up global name space
20884,
20885,"    from fileA import f1, f2"
20886,    from fileB import Class3
20887,
20888,... all the code as usual ...
20889,
20890,if __name__ == '__main__':
20891,"    import doctest, sys"
20892,    ret = doctest.testmod()
20893,    sys.exit(0 if ret.failed == 0 else 1)
20894,import lib
20895,from lib import foo
20896,__package
20897,lib
20898,__name__
20899,lib.foo
20900,.fileA
20901,python lib/foo.py
20902,__package__
20903,__name__
20904,__main__
20905,lib
20906,sys.path
20907,fileA
20908,lib
20909,python foo.py
20910,lib
20911,python -m foo
20912,lib
20913,sys.path
20914,import foo
20915,.
20916,sys.path
20917,from ..otherlib.fileC import ...
20918,sys.path
20919,$ python2 lib.foo
20920,$ python3 lib.foo
20921,lib/__init__.py
20922,Package named 'lib'; __name__ is '__main__'
20923,lib/__init__.py
20924,routine
20925,routine.name
20926,lib.name
20927,$ python2 lib.foo
20928,Package named 'lib'; __name__ is 'lib.foo'
20929,Package named 'lib'; __name__ is '__main__'
20930,__main__
20931,main
20932,$ python3 lib.routine
20933,Package named 'lib'; __name__ is 'lib.foo'
20934,[...]/runpy.py:125: RuntimeWarning: 'lib.foo' found in sys.modules
20935,"after import of package 'lib', but prior to execution of 'lib.foo';"
20936,this may result in unpredictable behaviour
20937,  warn(RuntimeWarning(msg))
20938,Package named 'lib'; __name__ is '__main__'
20939,"    import os, sys"
20940,    _i = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
20941,    if _i not in sys.path:
20942,"        sys.path.insert(0, _i)"
20943,    else:
20944,        _i = None
20945,
20946,"    from sub.fileA import f1, f2"
20947,    from sub.fileB import Class3
20948,
20949,    if _i:
20950,        sys.path.remove(_i)
20951,    del _i
20952,sys.path
20953,_i
20954,_i
20955,import os
20956,import sys
20957,parent_dir_name = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
20958,"sys.path.append(parent_dir_name + ""/your_dir"")"
20959,import your_script
20960,your_script.a_function()
20961,package/
20962,    __init__.py
20963,    subpackage1/
20964,        __init__.py
20965,        moduleX.py
20966,    moduleA.py
20967,imp
20968,importlib
20969,importlib
20970,moduleX
20971,subpackage1
20972,subpackage2
20973,#!/usr/bin/env python3
20974,
20975,import inspect
20976,import imp
20977,import os
20978,
20979,def get_script_dir(follow_symlinks=True):
20980,"    """""""
20981,    Return directory of code defining this very function.
20982,    Should work from a module as well as from a script.
20983,"    """""""
20984,    script_path = inspect.getabsfile(get_script_dir)
20985,    if follow_symlinks:
20986,        script_path = os.path.realpath(script_path)
20987,    return os.path.dirname(script_path)
20988,
20989,"# loading the module (hack, relying on deprecated imp-module)"
20990,PARENT_PATH = os.path.dirname(get_script_dir())
20991,"(x_file, x_path, x_desc) = imp.find_module('moduleX', [PARENT_PATH+'/'+'subpackage1'])"
20992,"module_x = imp.load_module('subpackage1.moduleX', x_file, x_path, x_desc)"
20993,
20994,# importing a function and a value
20995,function = module_x.my_function
20996,VALUE = module_x.MY_CONST
20997,#!/usr/bin/env python3
20998,
20999,if __name__ == '__main__' and __package__ is None:
21000,"    from os import sys, path"
21001,    # __file__ should be defined in this case
21002,    PARENT_DIR = path.dirname(path.dirname(path.abspath(__file__)))
21003,   sys.path.append(PARENT_DIR)
21004,from subpackage1.moduleX import *
21005,__name__
21006,__name__
21007,python.exe yourscriptnamehere.py
21008,__name__
21009,"""__main__"""
21010,if __name__ == '__main__'
21011,import ultraimport
21012,foo = ultraimport('__dir__/foo.py')
21013,ValueError: attempted relative import beyond top-level package
21014,#dir/package/module1/foo.py
21015,
21016,#dir/package/module2/bar.py
21017,from ..module1 import foo
21018,bar.py
21019,dir/package/
21020,bar.py
21021,dir/
21022,python3 -m unittest discover --start-directory=.
21023,dir/
21024,dir/package/
21025,for
21026,i
21027,command
21028,2
21029,i
21030,def createGameURLs(self):
21031,    self.button = []
21032,    for i in range(3):
21033,"        self.button.append(Button(self, text='Game '+str(i+1),"
21034,                                  command=lambda: self.open_this(i)))
21035,"        self.button[i].grid(column=4, row=i+1, sticky=W)"
21036,
21037,"def open_this(self, myNum):"
21038,    print(myNum)
21039,i
21040,lambda i=i: self.open_this(i)
21041,i=i
21042,"lambda x=x, y=y: self.open_this(x, y)"
21043,"def foo(x, y=3)"
21044,functools.partial
21045,for i in range(3):
21046,"    self.button.append(Button(self, text='Game '+str(i+1), command=partial(self.open_this, i)))"
21047,"self.button.append(Button(self, text='Game ' + str(i + 1), command=lambda x=i: self.open_this(x)))"
21048,functools.partial
21049,"btn[""command""] = lambda btn=btn: click(btn)"
21050,click(btn)
21051,#Python2
21052,#from Tkinter import *
21053,#import Tkinter as tkinter
21054,#Python3
21055,from tkinter import *
21056,import tkinter
21057,
21058,root = Tk()
21059,frame=Frame(root)
21060,"Grid.rowconfigure(root, 0, weight=1)"
21061,"Grid.columnconfigure(root, 0, weight=1)"
21062,"frame.grid(row=0, column=0, sticky=N+S+E+W)"
21063,grid=Frame(frame)
21064,"grid.grid(sticky=N+S+E+W, column=0, row=7, columnspan=2)"
21065,"Grid.rowconfigure(frame, 7, weight=1)"
21066,"Grid.columnconfigure(frame, 0, weight=1)"
21067,
21068,"active=""red"""
21069,"default_color=""white"""
21070,
21071,"def main(height=5,width=5):"
21072,  for x in range(width):
21073,    for y in range(height):
21074,"      btn = tkinter.Button(frame, bg=default_color)"
21075,"      btn.grid(column=x, row=y, sticky=N+S+E+W)"
21076,"      btn[""command""] = lambda btn=btn: click(btn)"
21077,
21078,  for x in range(width):
21079,"    Grid.columnconfigure(frame, x, weight=1)"
21080,
21081,  for y in range(height):
21082,"    Grid.rowconfigure(frame, y, weight=1)"
21083,
21084,  return frame
21085,
21086,def click(button):
21087,"  if(button[""bg""] == active):"
21088,"    button[""bg""] = default_color"
21089,  else:
21090,"    button[""bg""] = active"
21091,
21092,"w= main(10,10)"
21093,tkinter.mainloop()
21094,>>> class ObjectCreator(object):
21095,...       pass
21096,...
21097,
21098,>>> my_object = ObjectCreator()
21099,>>> print(my_object)
21100,<__main__.ObjectCreator object at 0x8974f2c>
21101,class
21102,>>> class ObjectCreator(object):
21103,...       pass
21104,...
21105,ObjectCreator
21106,>>> print(ObjectCreator) # you can print a class because it's an object
21107,<class '__main__.ObjectCreator'>
21108,>>> def echo(o):
21109,...       print(o)
21110,...
21111,>>> echo(ObjectCreator) # you can pass a class as a parameter
21112,<class '__main__.ObjectCreator'>
21113,">>> print(hasattr(ObjectCreator, 'new_attribute'))"
21114,False
21115,>>> ObjectCreator.new_attribute = 'foo' # you can add attributes to a class
21116,">>> print(hasattr(ObjectCreator, 'new_attribute'))"
21117,True
21118,>>> print(ObjectCreator.new_attribute)
21119,foo
21120,>>> ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable
21121,>>> print(ObjectCreatorMirror.new_attribute)
21122,foo
21123,>>> print(ObjectCreatorMirror())
21124,<__main__.ObjectCreator object at 0x8997b4c>
21125,class
21126,>>> def choose_class(name):
21127,...     if name == 'foo':
21128,...         class Foo(object):
21129,...             pass
21130,"...         return Foo # return the class, not an instance"
21131,...     else:
21132,...         class Bar(object):
21133,...             pass
21134,...         return Bar
21135,...
21136,>>> MyClass = choose_class('foo')
21137,">>> print(MyClass) # the function returns a class, not an instance"
21138,<class '__main__.Foo'>
21139,>>> print(MyClass()) # you can create an object from this class
21140,<__main__.Foo object at 0x89c6d4c>
21141,class
21142,type
21143,>>> print(type(1))
21144,<type 'int'>
21145,">>> print(type(""1""))"
21146,<type 'str'>
21147,>>> print(type(ObjectCreator))
21148,<type 'type'>
21149,>>> print(type(ObjectCreator()))
21150,<class '__main__.ObjectCreator'>
21151,type
21152,type
21153,type
21154,"type(name, bases, attrs)"
21155,name
21156,bases
21157,attrs
21158,>>> class MyShinyClass(object):
21159,...       pass
21160,">>> MyShinyClass = type('MyShinyClass', (), {}) # returns a class object"
21161,>>> print(MyShinyClass)
21162,<class '__main__.MyShinyClass'>
21163,>>> print(MyShinyClass()) # create an instance with the class
21164,<__main__.MyShinyClass object at 0x8997cec>
21165,MyShinyClass
21166,type
21167,>>> class Foo(object):
21168,...       bar = True
21169,">>> Foo = type('Foo', (), {'bar':True})"
21170,>>> print(Foo)
21171,<class '__main__.Foo'>
21172,>>> print(Foo.bar)
21173,True
21174,>>> f = Foo()
21175,>>> print(f)
21176,<__main__.Foo object at 0x8a9b84c>
21177,>>> print(f.bar)
21178,True
21179,>>>   class FooChild(Foo):
21180,...         pass
21181,">>> FooChild = type('FooChild', (Foo,), {})"
21182,>>> print(FooChild)
21183,<class '__main__.FooChild'>
21184,>>> print(FooChild.bar) # bar is inherited from Foo
21185,True
21186,>>> def echo_bar(self):
21187,...       print(self.bar)
21188,...
21189,">>> FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})"
21190,">>> hasattr(Foo, 'echo_bar')"
21191,False
21192,">>> hasattr(FooChild, 'echo_bar')"
21193,True
21194,>>> my_foo = FooChild()
21195,>>> my_foo.echo_bar()
21196,True
21197,>>> def echo_bar_more(self):
21198,...       print('yet another method')
21199,...
21200,>>> FooChild.echo_bar_more = echo_bar_more
21201,">>> hasattr(FooChild, 'echo_bar_more')"
21202,True
21203,class
21204,MyClass = MetaClass()
21205,my_object = MyClass()
21206,type
21207,"MyClass = type('MyClass', (), {})"
21208,type
21209,type
21210,Type
21211,str
21212,int
21213,type
21214,__class__
21215,>>> age = 35
21216,>>> age.__class__
21217,<type 'int'>
21218,>>> name = 'bob'
21219,>>> name.__class__
21220,<type 'str'>
21221,>>> def foo(): pass
21222,>>> foo.__class__
21223,<type 'function'>
21224,>>> class Bar(object): pass
21225,>>> b = Bar()
21226,>>> b.__class__
21227,<class '__main__.Bar'>
21228,__class__
21229,__class__
21230,>>> age.__class__.__class__
21231,<type 'type'>
21232,>>> name.__class__.__class__
21233,<type 'type'>
21234,>>> foo.__class__.__class__
21235,<type 'type'>
21236,>>> b.__class__.__class__
21237,<type 'type'>
21238,type
21239,__metaclass__
21240,__metaclass__
21241,class Foo(object):
21242,    __metaclass__ = something...
21243,    [...]
21244,Foo
21245,class Foo(object)
21246,Foo
21247,__metaclass__
21248,Foo
21249,type
21250,class Foo(Bar):
21251,    pass
21252,__metaclass__
21253,Foo
21254,Foo
21255,__metaclass__
21256,__metaclass__
21257,__metaclass__
21258,__metaclass__
21259,Bar
21260,type
21261,__metaclass__
21262,Bar.__class__
21263,Bar
21264,__metaclass__
21265,Bar
21266,type()
21267,type.__new__()
21268,__metaclass__
21269,type
21270,"class Foo(object, metaclass=something):"
21271,    ...
21272,__metaclass__
21273,"class Foo(object, metaclass=something, kwarg1=value1, kwarg2=value2):"
21274,    ...
21275,__metaclass__
21276,__metaclass__
21277,# the metaclass will automatically get passed the same argument
21278,# that you usually pass to `type`
21279,"def upper_attr(future_class_name, future_class_parents, future_class_attrs):"
21280,"    """""""
21281,"      Return a class object, with the list of its attribute turned"
21282,      into uppercase.
21283,"    """""""
21284,    # pick up any attribute that doesn't start with '__' and uppercase it
21285,    uppercase_attrs = {
21286,"        attr if attr.startswith(""__"") else attr.upper(): v"
21287,"        for attr, v in future_class_attrs.items()"
21288,    }
21289,
21290,    # let `type` do the class creation
21291,"    return type(future_class_name, future_class_parents, uppercase_attrs)"
21292,
21293,__metaclass__ = upper_attr # this will affect all classes in the module
21294,
21295,"class Foo(): # global __metaclass__ won't work with ""object"" though"
21296,    # but we can define __metaclass__ here instead to affect only this class
21297,"    # and this will work with ""object"" children"
21298,    bar = 'bip'
21299,">>> hasattr(Foo, 'bar')"
21300,False
21301,">>> hasattr(Foo, 'BAR')"
21302,True
21303,>>> Foo.BAR
21304,'bip'
21305,# remember that `type` is actually a class like `str` and `int`
21306,# so you can inherit from it
21307,class UpperAttrMetaclass(type):
21308,    # __new__ is the method called before __init__
21309,    # it's the method that creates the object and returns it
21310,    # while __init__ just initializes the object passed as parameter
21311,"    # you rarely use __new__, except when you want to control how the object"
21312,    # is created.
21313,"    # here the created object is the class, and we want to customize it"
21314,    # so we override __new__
21315,    # you can do some stuff in __init__ too if you wish
21316,"    # some advanced use involves overriding __call__ as well, but we won't"
21317,    # see this
21318,"    def __new__(upperattr_metaclass, future_class_name,"
21319,"                future_class_parents, future_class_attrs):"
21320,        uppercase_attrs = {
21321,"            attr if attr.startswith(""__"") else attr.upper(): v"
21322,"            for attr, v in future_class_attrs.items()"
21323,        }
21324,"        return type(future_class_name, future_class_parents, uppercase_attrs)"
21325,class UpperAttrMetaclass(type):
21326,"    def __new__(cls, clsname, bases, attrs):"
21327,        uppercase_attrs = {
21328,"            attr if attr.startswith(""__"") else attr.upper(): v"
21329,"            for attr, v in attrs.items()"
21330,        }
21331,"        return type(clsname, bases, uppercase_attrs)"
21332,cls
21333,__new__
21334,self
21335,type
21336,__new__
21337,class UpperAttrMetaclass(type):
21338,"    def __new__(cls, clsname, bases, attrs):"
21339,        uppercase_attrs = {
21340,"            attr if attr.startswith(""__"") else attr.upper(): v"
21341,"            for attr, v in attrs.items()"
21342,        }
21343,"        return type.__new__(cls, clsname, bases, uppercase_attrs)"
21344,super
21345,class UpperAttrMetaclass(type):
21346,"    def __new__(cls, clsname, bases, attrs):"
21347,        uppercase_attrs = {
21348,"            attr if attr.startswith(""__"") else attr.upper(): v"
21349,"            for attr, v in attrs.items()"
21350,        }
21351,"        return super(UpperAttrMetaclass, cls).__new__("
21352,"            cls, clsname, bases, uppercase_attrs)"
21353,"class Foo(object, metaclass=MyMetaclass, kwarg1=value1):"
21354,    ...
21355,class MyMetaclass(type):
21356,"    def __new__(cls, clsname, bases, dct, kwargs1=default):"
21357,        ...
21358,__dict__
21359,__metaclass__
21360,UpperAttrMetaclass(type)
21361,__new__
21362,__init__
21363,__call__
21364,__new__
21365,__init__
21366,class Person(models.Model):
21367,    name = models.CharField(max_length=30)
21368,    age = models.IntegerField()
21369,"person = Person(name='bob', age='35')"
21370,print(person.age)
21371,IntegerField
21372,int
21373,models.Model
21374,__metaclass__
21375,Person
21376,>>> class Foo(object): pass
21377,>>> id(Foo)
21378,142630324
21379,type
21380,type
21381,models.Model
21382,__metaclass__
21383,class Model(metaclass=ModelBase):
21384,ModelBase
21385,__metaclass__
21386,Bar.__class__
21387,Bar
21388,__metaclass__
21389,Bar
21390,type()
21391,type.__new__()
21392,"Now you wonder why the heck is it written in lowercase, and not Type?"
21393,type
21394,type
21395,type
21396,type
21397,__init__
21398,__new__
21399,class
21400,class
21401,__metaclass__
21402,__metaclass__
21403,type.__subclasses__()
21404,type
21405,__add__
21406,__iter__
21407,__getattr__
21408,def make_hook(f):
21409,"    """"""Decorator to turn 'foo' method into '__foo__'"""""""
21410,    f.is_hook = 1
21411,    return f
21412,
21413,class MyType(type):
21414,"    def __new__(mcls, name, bases, attrs):"
21415,
21416,        if name.startswith('None'):
21417,            return None
21418,
21419,        # Go over attributes and see if they should be renamed.
21420,        newattrs = {}
21421,"        for attrname, attrvalue in attrs.iteritems():"
21422,"            if getattr(attrvalue, 'is_hook', 0):"
21423,                newattrs['__%s__' % attrname] = attrvalue
21424,            else:
21425,                newattrs[attrname] = attrvalue
21426,
21427,"        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)"
21428,
21429,"    def __init__(self, name, bases, attrs):"
21430,"        super(MyType, self).__init__(name, bases, attrs)"
21431,
21432,"        # classregistry.register(self, self.interfaces)"
21433,"        print ""Would register class %s now."" % self"
21434,
21435,"    def __add__(self, other):"
21436,"        class AutoClass(self, other):"
21437,            pass
21438,        return AutoClass
21439,"        # Alternatively, to autogenerate the classname as well as the class:"
21440,"        # return type(self.__name__ + other.__name__, (self, other), {})"
21441,
21442,    def unregister(self):
21443,        # classregistry.unregister(self)
21444,"        print ""Would unregister class %s now."" % self"
21445,
21446,class MyObject:
21447,    __metaclass__ = MyType
21448,
21449,
21450,class NoneSample(MyObject):
21451,    pass
21452,
21453,"# Will print ""NoneType None"""
21454,"print type(NoneSample), repr(NoneSample)"
21455,
21456,class Example(MyObject):
21457,"    def __init__(self, value):"
21458,        self.value = value
21459,    @make_hook
21460,"    def add(self, other):"
21461,        return self.__class__(self.value + other.value)
21462,
21463,# Will unregister the class
21464,Example.unregister()
21465,
21466,inst = Example(10)
21467,# Will fail with an AttributeError
21468,#inst.unregister()
21469,
21470,print inst + inst
21471,class Sibling(MyObject):
21472,    pass
21473,
21474,ExampleSibling = Example + Sibling
21475,# ExampleSibling is now a subclass of both Example and Sibling (with no
21476,# content of its own) although it will believe it's called 'AutoClass'
21477,print ExampleSibling
21478,print ExampleSibling.__mro__
21479,"class A(type):pass<NEWLINE>class B(type,metaclass=A):pass<NEWLINE>b.__class__ = b"
21480,__metaclass__
21481,class MyObject(metaclass=MyType)
21482,class type(object)
21483,  |  type(object) -> the object's type
21484,"  |  type(name, bases, dict) -> a new type"
21485,"class ThisIsTheName(Bases, Are, Here):"
21486,    All_the_code_here
21487,"    def doesIs(create, a):"
21488,        dict
21489,"def test_metaclass(name, bases, dict):"
21490,"    print 'The Class Name is', name"
21491,"    print 'The Class Bases are', bases"
21492,"    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()"
21493,
21494,"    return ""yellow"""
21495,
21496,"class TestName(object, None, int, 1):"
21497,    __metaclass__ = test_metaclass
21498,    foo = 1
21499,"    def baz(self, arr):"
21500,        pass
21501,
21502,"print 'TestName = ', repr(TestName)"
21503,
21504,# output => 
21505,The Class Name is TestName
21506,"The Class Bases are (<type 'object'>, None, <type 'int'>, 1)"
21507,"The dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']"
21508,TestName =  'yellow'
21509,"def init_attributes(name, bases, dict):"
21510,    if 'attributes' in dict:
21511,        for attr in dict['attributes']:
21512,            dict[attr] = None
21513,
21514,"    return type(name, bases, dict)"
21515,
21516,class Initialised(object):
21517,    __metaclass__ = init_attributes
21518,"    attributes = ['foo', 'bar', 'baz']"
21519,
21520,"print 'foo =>', Initialised.foo"
21521,# output=>
21522,foo => None
21523,Initialised
21524,init_attributes
21525,Initialised
21526,class MetaSingleton(type):
21527,    instance = None
21528,"    def __call__(cls, *args, **kw):"
21529,        if cls.instance is None:
21530,"            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)"
21531,        return cls.instance
21532,
21533,class Foo(object):
21534,    __metaclass__ = MetaSingleton
21535,
21536,a = Foo()
21537,b = Foo()
21538,assert a is b
21539,class MyMeta(type):
21540,
21541,    counter = 0
21542,
21543,"    def __init__(cls, name, bases, dic):"
21544,"        type.__init__(cls, name, bases, dic)"
21545,        cls._order = MyMeta.counter
21546,        MyMeta.counter += 1
21547,
21548,class MyType(object):              # Python 2
21549,    __metaclass__ = MyMeta
21550,
21551,class MyType(metaclass=MyMeta):    # Python 3
21552,    pass
21553,MyType
21554,_order
21555,__init__(self)
21556,type(self)._order = MyBase.counter; MyBase.counter += 1
21557,class Person(models.Model):
21558,    first_name = models.CharField(max_length=30)
21559,    last_name = models.CharField(max_length=30)
21560,>>> Class(...)
21561,instance
21562,Class
21563,>>> Metaclass(...)
21564,Class
21565,type
21566,">>> type('Foo', (object,), {}) # requires a name, bases, and a namespace"
21567,<class '__main__.Foo'>
21568,>>> object()                          # instantiation of class
21569,<object object at 0x7f9069b4e0b0>     # instance
21570,type
21571,">>> type('Object', (object,), {})     # instantiation of metaclass"
21572,<class '__main__.Object'>             # instance
21573,">>> isinstance(object, type)"
21574,True
21575,>>> type(object) == type
21576,True
21577,>>> object.__class__
21578,<class 'type'>
21579,class Foo(object): 
21580,    'demo'
21581,>>> Foo
21582,<class '__main__.Foo'>
21583,">>> isinstance(Foo, type), isinstance(Foo, object)"
21584,"(True, True)"
21585,type
21586,name = 'Foo'
21587,"bases = (object,)"
21588,namespace = {'__doc__': 'demo'}
21589,"Foo = type(name, bases, namespace)"
21590,__dict__
21591,>>> Foo.__dict__
21592,"dict_proxy({'__dict__': <attribute '__dict__' of 'Foo' objects>, "
21593,"'__module__': '__main__', '__weakref__': <attribute '__weakref__' "
21594,"of 'Foo' objects>, '__doc__': 'demo'})"
21595,type
21596,__dict__
21597,__module__
21598,__dict__
21599,__weakref__
21600,__slots__
21601,__slots__
21602,__dict__
21603,__weakref__
21604,">>> Baz = type('Bar', (object,), {'__doc__': 'demo', '__slots__': ()})"
21605,>>> Baz.__dict__
21606,"mappingproxy({'__doc__': 'demo', '__slots__': (), '__module__': '__main__'})"
21607,type
21608,__repr__
21609,>>> Foo
21610,<class '__main__.Foo'>
21611,__repr__
21612,help(repr)
21613,__repr__
21614,obj == eval(repr(obj))
21615,__repr__
21616,__eq__
21617,__repr__
21618,class Type(type):
21619,    def __repr__(cls):
21620,"        """""""
21621,        >>> Baz
21622,"        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})"
21623,        >>> eval(repr(Baz))
21624,"        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})"
21625,"        """""""
21626,        metaname = type(cls).__name__
21627,        name = cls.__name__
21628,"        parents = ', '.join(b.__name__ for b in cls.__bases__)"
21629,        if parents:
21630,"            parents += ','"
21631,"        namespace = ', '.join(': '.join("
21632,"          (repr(k), repr(v) if not isinstance(v, type) else v.__name__))"
21633,"               for k, v in cls.__dict__.items())"
21634,"        return '{0}(\'{1}\', ({2}), {{{3}}})'.format(metaname, name, parents, namespace)"
21635,"    def __eq__(cls, other):"
21636,"        """""""
21637,        >>> Baz == eval(repr(Baz))
21638,        True            
21639,"        """""""
21640,"        return (cls.__name__, cls.__bases__, cls.__dict__) == ("
21641,"                other.__name__, other.__bases__, other.__dict__)"
21642,__repr__
21643,>>> class Bar(object): pass
21644,">>> Baz = Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})"
21645,>>> Baz
21646,"Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})"
21647,__repr__
21648,eval(repr(Class))
21649,__repr__
21650,__prepare__
21651,__prepare__
21652,from collections import OrderedDict
21653,
21654,class OrderedType(Type):
21655,    @classmethod
21656,"    def __prepare__(metacls, name, bases, **kwargs):"
21657,        return OrderedDict()
21658,"    def __new__(cls, name, bases, namespace, **kwargs):"
21659,"        result = Type.__new__(cls, name, bases, dict(namespace))"
21660,        result.members = tuple(namespace)
21661,        return result
21662,"class OrderedMethodsObject(object, metaclass=OrderedType):"
21663,    def method1(self): pass
21664,    def method2(self): pass
21665,    def method3(self): pass
21666,    def method4(self): pass
21667,>>> OrderedMethodsObject.members
21668,"('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4')"
21669,>>> inspect.getmro(OrderedType)
21670,"(<class '__main__.OrderedType'>, <class '__main__.Type'>, <class 'type'>, <class 'object'>)"
21671,repr
21672,>>> OrderedMethodsObject
21673,"OrderedType('OrderedMethodsObject', (object,), {'method1': <function OrderedMethodsObject.method1 at 0x0000000002DB01E0>, 'members': ('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4'), 'method3': <function OrderedMet"
21674,"hodsObject.method3 at 0x0000000002DB02F0>, 'method2': <function OrderedMethodsObject.method2 at 0x0000000002DB0268>, '__module__': '__main__', '__weakref__': <attribute '__weakref__' of 'OrderedMethodsObject' objects>, '__doc__': None, '__d"
21675,"ict__': <attribute '__dict__' of 'OrderedMethodsObject' objects>, 'method4': <function OrderedMethodsObject.method4 at 0x0000000002DB0378>})"
21676,__prepare__
21677,__new__
21678,__prepare__
21679,OrderedDict
21680,__prepare__
21681,dict
21682,__new__
21683,class Meta(type):
21684,
21685,"    def __prepare__(metaclass, cls, bases):"
21686,        return dict()
21687,
21688,"    def __new__(metacls, cls, bases, clsdict):"
21689,"        return super().__new__(metacls, cls, bases, clsdict)"
21690,int
21691,str
21692,class Person:
21693,"    weight = ValidateType('weight', int)"
21694,"    age = ValidateType('age', int)"
21695,"    name = ValidateType('name', str)"
21696,class Person(metaclass=Validator):
21697,    weight = ValidateType(int)
21698,    age = ValidateType(int)
21699,    name = ValidateType(str)
21700,__prepare__
21701,class Validator(type):
21702,"    def __new__(metacls, cls, bases, clsdict):"
21703,        # search clsdict looking for ValidateType descriptors
21704,"        for name, attr in clsdict.items():"
21705,"            if isinstance(attr, ValidateType):"
21706,                attr.name = name
21707,                attr.attr = '_' + name
21708,        # create final class and return it
21709,"        return super().__new__(metacls, cls, bases, clsdict)"
21710,p = Person()
21711,p.weight = 9
21712,print(p.weight)
21713,p.weight = '9'
21714,9
21715,Traceback (most recent call last):
21716,"  File ""simple_meta.py"", line 36, in <module>"
21717,    p.weight = '9'
21718,"  File ""simple_meta.py"", line 24, in __set__"
21719,"    (self.name, self.type, value))"
21720,TypeError: weight must be of type(s) <class 'int'> (got '9')
21721,class ValidateType:
21722,"    def __init__(self, type):"
21723,        self.name = None  # will be set by metaclass
21724,        self.attr = None  # will be set by metaclass
21725,        self.type = type
21726,"    def __get__(self, inst, cls):"
21727,        if inst is None:
21728,            return self
21729,        else:
21730,            return inst.__dict__[self.attr]
21731,"    def __set__(self, inst, value):"
21732,"        if not isinstance(value, self.type):"
21733,            raise TypeError('%s must be of type(s) %s (got %r)' %
21734,"                    (self.name, self.type, value))"
21735,        else:
21736,            inst.__dict__[self.attr] = value
21737,"__set_name__(cls, name)"
21738,ValidateType
21739,self.name
21740,self.attr
21741,__call__()
21742,# define a class
21743,class SomeClass(object):
21744,    # ...
21745,    # some definition here ...
21746,    # ...
21747,
21748,# create an instance of it
21749,instance = SomeClass()
21750,
21751,# then call the object as if it's a function
21752,"result = instance('foo', 'bar')"
21753,__call__()
21754,class SomeClass(object):
21755,    # ...
21756,    # some definition here ...
21757,    # ...
21758,
21759,"    def __call__(self, foo, bar):"
21760,        return bar + foo
21761,__call__()
21762,__call__()
21763,instance = SomeClass()
21764,__init__()
21765,__init__()
21766,__new__()
21767,__new__()
21768,__call__()
21769,class Meta_1(type):
21770,    def __call__(cls):
21771,"        print ""Meta_1.__call__() before creating an instance of "", cls"
21772,"        instance = super(Meta_1, cls).__call__()"
21773,"        print ""Meta_1.__call__() about to return instance."""
21774,        return instance
21775,class Class_1(object):
21776,
21777,    __metaclass__ = Meta_1
21778,
21779,    def __new__(cls):
21780,"        print ""Class_1.__new__() before creating an instance."""
21781,"        instance = super(Class_1, cls).__new__(cls)"
21782,"        print ""Class_1.__new__() about to return instance."""
21783,        return instance
21784,
21785,    def __init__(self):
21786,"        print ""entering Class_1.__init__() for instance initialization."""
21787,"        super(Class_1,self).__init__()"
21788,"        print ""exiting Class_1.__init__()."""
21789,Class_1
21790,instance = Class_1()
21791,# Meta_1.__call__() before creating an instance of <class '__main__.Class_1'>.
21792,# Class_1.__new__() before creating an instance.
21793,# Class_1.__new__() about to return instance.
21794,# entering Class_1.__init__() for instance initialization.
21795,# exiting Class_1.__init__().
21796,# Meta_1.__call__() about to return instance.
21797,type
21798,Meta_1
21799,type
21800,type.__call__()
21801,class type:
21802,"    def __call__(cls, *args, **kwarg):"
21803,
21804,        # ... maybe a few things done to cls here
21805,
21806,        # then we call __new__() on the class to create an instance
21807,"        instance = cls.__new__(cls, *args, **kwargs)"
21808,
21809,        # ... maybe a few things done to the instance here
21810,
21811,        # then we initialize the instance with its __init__() method
21812,"        instance.__init__(*args, **kwargs)"
21813,
21814,        # ... maybe a few more things done to instance here
21815,
21816,        # then we return it
21817,        return instance
21818,__call__()
21819,__new__()
21820,__init__()
21821,__call__()
21822,Class_1.__new__()
21823,Class_1.__init__()
21824,class Meta_2(type):
21825,    singletons = {}
21826,
21827,"    def __call__(cls, *args, **kwargs):"
21828,        if cls in Meta_2.singletons:
21829,            # we return the only instance and skip a call to __new__()
21830,            # and __init__()
21831,"            print (""{} singleton returning from Meta_2.__call__(), """
21832,"                   ""skipping creation of new instance."".format(cls))"
21833,            return Meta_2.singletons[cls]
21834,
21835,        # else if the singleton isn't present we proceed as usual
21836,"        print ""Meta_2.__call__() before creating an instance."""
21837,"        instance = super(Meta_2, cls).__call__(*args, **kwargs)"
21838,        Meta_2.singletons[cls] = instance
21839,"        print ""Meta_2.__call__() returning new instance."""
21840,        return instance
21841,
21842,class Class_2(object):
21843,
21844,    __metaclass__ = Meta_2
21845,
21846,"    def __new__(cls, *args, **kwargs):"
21847,"        print ""Class_2.__new__() before creating instance."""
21848,"        instance = super(Class_2, cls).__new__(cls)"
21849,"        print ""Class_2.__new__() returning instance."""
21850,        return instance
21851,
21852,"    def __init__(self, *args, **kwargs):"
21853,"        print ""entering Class_2.__init__() for initialization."""
21854,"        super(Class_2, self).__init__()"
21855,"        print ""exiting Class_2.__init__()."""
21856,Class_2
21857,a = Class_2()
21858,# Meta_2.__call__() before creating an instance.
21859,# Class_2.__new__() before creating instance.
21860,# Class_2.__new__() returning instance.
21861,# entering Class_2.__init__() for initialization.
21862,# exiting Class_2.__init__().
21863,# Meta_2.__call__() returning new instance.
21864,
21865,b = Class_2()
21866,"# <class '__main__.Class_2'> singleton returning from Meta_2.__call__(), skipping creation of new instance."
21867,
21868,c = Class_2()
21869,"# <class '__main__.Class_2'> singleton returning from Meta_2.__call__(), skipping creation of new instance."
21870,
21871,a is b is c # True
21872,metaclass
21873,metaclass
21874,metaclass
21875,#!/usr/bin/env python
21876,
21877,# Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.
21878,
21879,# This requires some explaining.  The point of this metaclass excercise is to
21880,"# create a static abstract class that is in one way or another, dormant until"
21881,"# queried.  I experimented with creating a singlton on import, but that did"
21882,"# not quite behave how I wanted it to.  See now here, we are creating a class"
21883,"# called GsyncOptions, that on import, will do nothing except state that its"
21884,"# class creator is GsyncOptionsType.  This means, docopt doesn't parse any"
21885,"# of the help document, nor does it start processing command line options."
21886,# So importing this module becomes really efficient.  The complicated bit
21887,"# comes from requiring the GsyncOptions class to be static.  By that, I mean"
21888,"# any property on it, may or may not exist, since they are not statically"
21889,# defined; so I can't simply just define the class with a whole bunch of
21890,# properties that are @property @staticmethods.
21891,#
21892,# So here's how it works:
21893,#
21894,# Executing 'from libgsync.options import GsyncOptions' does nothing more
21895,"# than load up this module, define the Type and the Class and import them"
21896,# into the callers namespace.  Simple.
21897,#
21898,"# Invoking 'GsyncOptions.debug' for the first time, or any other property"
21899,"# causes the __metaclass__ __getattr__ method to be called, since the class"
21900,# is not instantiated as a class instance yet.  The __getattr__ method on
21901,# the type then initialises the class (GsyncOptions) via the __initialiseClass
21902,# method.  This is the first and only time the class will actually have its
21903,# dictionary statically populated.  The docopt module is invoked to parse the
21904,# usage document and generate command line options from it.  These are then
21905,"# paired with their defaults and what's in sys.argv.  After all that, we"
21906,# setup some dynamic properties that could not be defined by their name in
21907,"# the usage, before everything is then transplanted onto the actual class"
21908,# object (or static class GsyncOptions).
21909,#
21910,"# Another piece of magic, is to allow command line options to be set in"
21911,# in their native form and be translated into argparse style properties.
21912,#
21913,"# Finally, the GsyncListOptions class is actually where the options are"
21914,"# stored.  This only acts as a mechanism for storing options as lists, to"
21915,# allow aggregation of duplicate options or options that can be specified
21916,"# multiple times.  The __getattr__ call hides this by default, returning the"
21917,"# last item in a property's list.  However, if the entire list is required,"
21918,"# calling the 'list()' method on the GsyncOptions class, returns a reference"
21919,"# to the GsyncListOptions class, which contains all of the same properties"
21920,# but as lists and without the duplication of having them as both lists and
21921,# static singlton values.
21922,#
21923,# So this actually means that GsyncOptions is actually a static proxy class...
21924,#
21925,# ...And all this is neatly hidden within a closure for safe keeping.
21926,def GetGsyncOptionsType():
21927,    class GsyncListOptions(object):
21928,        __initialised = False
21929,
21930,    class GsyncOptionsType(type):
21931,        def __initialiseClass(cls):
21932,            if GsyncListOptions._GsyncListOptions__initialised: return
21933,
21934,            from docopt import docopt
21935,            from libgsync.options import doc
21936,            from libgsync import __version__
21937,
21938,            options = docopt(
21939,"                doc.__doc__ % __version__,"
21940,"                version = __version__,"
21941,                options_first = True
21942,            )
21943,
21944,"            paths = options.pop('<path>', None)"
21945,"            setattr(cls, ""destination_path"", paths.pop() if paths else None)"
21946,"            setattr(cls, ""source_paths"", paths)"
21947,"            setattr(cls, ""options"", options)"
21948,
21949,"            for k, v in options.iteritems():"
21950,"                setattr(cls, k, v)"
21951,
21952,            GsyncListOptions._GsyncListOptions__initialised = True
21953,
21954,        def list(cls):
21955,            return GsyncListOptions
21956,
21957,"        def __getattr__(cls, name):"
21958,            cls.__initialiseClass()
21959,"            return getattr(GsyncListOptions, name)[-1]"
21960,
21961,"        def __setattr__(cls, name, value):"
21962,            # Substitut option names: --an-option-name for an_option_name
21963,            import re
21964,"            name = re.sub(r'^__', """", re.sub(r'-', ""_"", name))"
21965,            listvalue = []
21966,
21967,            # Ensure value is converted to a list type for GsyncListOptions
21968,"            if isinstance(value, list):"
21969,                if value:
21970,                    listvalue = [] + value
21971,                else:
21972,                    listvalue = [ None ]
21973,            else:
21974,                listvalue = [ value ]
21975,
21976,"            type.__setattr__(GsyncListOptions, name, listvalue)"
21977,
21978,    # Cleanup this module to prevent tinkering.
21979,    import sys
21980,    module = sys.modules[__name__]
21981,    del module.__dict__['GetGsyncOptionsType']
21982,
21983,    return GsyncOptionsType
21984,
21985,# Our singlton abstract proxy class.
21986,class GsyncOptions(object):
21987,    __metaclass__ = GetGsyncOptionsType()
21988,type(obj)
21989,type()
21990,class Foo(object):
21991,    __metaclass__ = MyMetaClass
21992,type
21993,type
21994,metaclass
21995,metaclass
21996,type
21997,metaclass
21998,new
21999,>>> class MetaClass(type):
22000,"...     def __init__(cls, name, bases, attrs):"
22001,...         print ('class name: %s' %name )
22002,...         print ('Defining class %s' %cls)
22003,...         print('Bases %s: ' %bases)
22004,...         print('Attributes')
22005,"...         for (name, value) in attrs.items():"
22006,"...             print ('%s :%r' %(name, value))"
22007,... 
22008,
22009,">>> class NewClass(object, metaclass=MetaClass):"
22010,...    get_choch='dairy'
22011,... 
22012,class name: NewClass
22013,Bases <class 'object'>: 
22014,Defining class <class 'NewClass'>
22015,get_choch :'dairy'
22016,__module__ :'builtins'
22017,__qualname__ :'NewClass'
22018,Note:
22019,metaclass
22020,class foo:
22021,    ...
22022,class somemeta(type):
22023,"    __new__(mcs, name, bases, clsdict):"
22024,"      """""""
22025,"  mcs: is the base metaclass, in this case type."
22026,"  name: name of the new class, as provided by the user."
22027,  bases: tuple of base classes 
22028,  clsdict: a dictionary containing all methods and attributes defined on class
22029,
22030,  you must return a class object by invoking the __new__ constructor on the base metaclass. 
22031, ie: 
22032,"    return type.__call__(mcs, name, bases, clsdict)."
22033,
22034,  in the following case:
22035,
22036,  class foo(baseclass):
22037,        __metaclass__ = somemeta
22038,
22039,  an_attr = 12
22040,
22041,  def bar(self):
22042,      ...
22043,
22044,  @classmethod
22045,  def foo(cls):
22046,      ...
22047,
22048,"      arguments would be : ( somemeta, ""foo"", (baseclass, baseofbase,..., object), {""an_attr"":12, ""bar"": <function>, ""foo"": <bound class method>}"
22049,
22050,      you can modify any of these values before passing on to type
22051,"      """""""
22052,"      return type.__call__(mcs, name, bases, clsdict)"
22053,
22054,
22055,"    def __init__(self, name, bases, clsdict):"
22056,"      """""" "
22057,"      called after type has been created. unlike in standard classes, __init__ method cannot modify the instance (cls) - and should be used for class validaton."
22058,"      """""""
22059,      pass
22060,
22061,
22062,    def __prepare__():
22063,"        """""""
22064,        returns a dict or something that can be used as a namespace.
22065,        the type will then attach methods and attributes from class definition to it.
22066,
22067,        call order :
22068,
22069,        somemeta.__new__ ->  type.__new__ -> type.__init__ -> somemeta.__init__ 
22070,"        """""""
22071,        return dict()
22072,
22073,    def mymethod(cls):
22074,"        """""" works like a classmethod, but for class objects. Also, my method will not be visible to instances of cls."
22075,"        """""""
22076,        pass
22077,"def func(self, name='mike'):"
22078,"    print('Hi, %s.' % name)"
22079,
22080,"Hi = type('Hi', (object,), dict(hi=func))"
22081,h = Hi()
22082,h.hi()
22083,"Hi, mike."
22084,
22085,type(Hi)
22086,type
22087,
22088,type(h)
22089,__main__.Hi
22090,class ListMetaclass(type):
22091,"    def __new__(cls, name, bases, attrs):"
22092,"        attrs['add'] = lambda self, value: self.append(value)"
22093,"        return type.__new__(cls, name, bases, attrs)"
22094,
22095,"class CustomList(list, metaclass=ListMetaclass):"
22096,    pass
22097,
22098,lst = CustomList()
22099,lst.add('custom_list_1')
22100,lst.add('custom_list_2')
22101,
22102,lst
22103,"['custom_list_1', 'custom_list_2']"
22104,metaclass
22105,class
22106,metaclass
22107,__metaclass__
22108,metaclass
22109,class MyClass:
22110,   __metaclass__ = type
22111,   # write here other method
22112,   # write here one more method
22113,
22114,print(MyClass.__metaclass__)
22115,class 'type'
22116,metaclass
22117,metaclass
22118,metaclass
22119,class MyMetaClass(type):
22120,   __metaclass__ = type
22121,   # you can write here any behaviour you want
22122,
22123,class MyTestClass:
22124,   __metaclass__ = MyMetaClass
22125,
22126,Obj = MyTestClass()
22127,print(Obj.__metaclass__)
22128,print(MyMetaClass.__metaclass__)
22129,class '__main__.MyMetaClass'
22130,class 'type'
22131,"__init_subclass__(cls, **kwargs)"
22132,metaclass
22133,class MetaMemberControl(type):
22134,    __slots__ = ()
22135,
22136,    @classmethod
22137,"    def __prepare__(mcs, f_cls_name, f_cls_parents,  # f_cls means: future class"
22138,"                    meta_args=None, meta_options=None):  # meta_args and meta_options is not necessarily needed, just so you know."
22139,        f_cls_attr = dict()
22140,"        if not ""do something or if you want to define your cool stuff of dict..."":"
22141,            return dict(make_your_special_dict=None)
22142,        else:
22143,            return f_cls_attr
22144,
22145,"    def __new__(mcs, f_cls_name, f_cls_parents, f_cls_attr,"
22146,"                meta_args=None, meta_options=None):"
22147,
22148,        original_getattr = f_cls_attr.get('__getattribute__')
22149,        original_setattr = f_cls_attr.get('__setattr__')
22150,
22151,"        def init_getattr(self, item):"
22152,            if not item.startswith('_'):  # you can set break points at here
22153,                alias_name = '_' + item
22154,                if alias_name in f_cls_attr['__slots__']:
22155,                    item = alias_name
22156,            if original_getattr is not None:
22157,"                return original_getattr(self, item)"
22158,            else:
22159,"                return super(eval(f_cls_name), self).__getattribute__(item)"
22160,
22161,"        def init_setattr(self, key, value):"
22162,            if not key.startswith('_') and ('_' + key) in f_cls_attr['__slots__']:
22163,"                raise AttributeError(f""you can't modify private members:_{key}"")"
22164,            if original_setattr is not None:
22165,"                original_setattr(self, key, value)"
22166,            else:
22167,"                super(eval(f_cls_name), self).__setattr__(key, value)"
22168,
22169,        f_cls_attr['__getattribute__'] = init_getattr
22170,        f_cls_attr['__setattr__'] = init_setattr
22171,
22172,"        cls = super().__new__(mcs, f_cls_name, f_cls_parents, f_cls_attr)"
22173,        return cls
22174,
22175,
22176,class Human(metaclass=MetaMemberControl):
22177,"    __slots__ = ('_age', '_name')"
22178,
22179,"    def __init__(self, name, age):"
22180,        self._name = name
22181,        self._age = age
22182,
22183,"    def __getattribute__(self, item):"
22184,"        """""""
22185,        is just for IDE recognize.
22186,"        """""""
22187,        return super().__getattribute__(item)
22188,
22189,"    """""" with MetaMemberControl then you don't have to write as following"
22190,    @property
22191,    def name(self):
22192,        return self._name
22193,
22194,    @property
22195,    def age(self):
22196,        return self._age
22197,"    """""""
22198,
22199,
22200,def test_demo():
22201,"    human = Human('Carson', 27)"
22202,    # human.age = 18  # you can't modify private members:_age  <-- this is defined by yourself.
22203,    # human.k = 18  # 'Human' object has no attribute 'k'  <-- system error.
22204,"    age1 = human._age  # It's OK, although the IDE will show some warnings. (Access to a protected member _age of a class)"
22205,
22206,    age2 = human.age  # It's OK! see below:
22207,"    """""""
22208,"    if you do not define `__getattribute__` at the class of Human,"
22209,    the IDE will show you: Unresolved attribute reference 'age' for class 'Human'
22210,    but it's ok on running since the MetaMemberControl will help you.
22211,"    """""""
22212,
22213,
22214,if __name__ == '__main__':
22215,    test_demo()
22216,metaclass
22217,Django
22218,WTForms
22219,abstract
22220,from django.db import models
22221,
22222,class Author(models.Model):
22223,    name = models.CharField(max_length=50)
22224,    email = models.EmailField()
22225,
22226,    class Meta:
22227,        abstract = True
22228,WTForms
22229,from wtforms.form import Form
22230,from wtforms.csrf.session import SessionCSRF
22231,from wtforms.fields import StringField
22232,
22233,class MyBaseForm(Form):
22234,    class Meta:
22235,        csrf = True
22236,        csrf_class = SessionCSRF
22237,
22238,"    name = StringField(""name"")"
22239,Meta
22240,Django
22241,WTForms
22242,WTForms
22243,self.Meta.csrf
22244,csrf
22245,Meta
22246,classutilities
22247,"Python 3.10.0rc2 (tags/v3.10.0rc2:839d789, Sep  7 2021, 18:51:45) [MSC v.1929 64 bit (AMD64)] on win32"
22248,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
22249,>>> class Object:
22250,...     pass
22251,... 
22252,>>> class Meta(type):
22253,...     test = 'Worked!!!'
22254,...     def __repr__(self):
22255,"...             return 'This is ""Meta"" metaclass'"
22256,... 
22257,>>> class ObjectWithMetaClass(metaclass=Meta):
22258,...     pass
22259,... 
22260,>>> Object or type(Object())
22261,<class '__main__.Object'>
22262,>>> ObjectWithMetaClass or type(ObjectWithMetaClass())
22263,"This is ""Meta"" metaclass"
22264,>>> Object.test
22265,AttributeError: ...
22266,>>> ObjectWithMetaClass.test
22267,'Worked!!!'
22268,>>> type(Object)
22269,<class 'type'>
22270,>>> type(ObjectWithMetaClass)
22271,<class '__main__.Meta'>
22272,>>> type(type(ObjectWithMetaClass))
22273,<class 'type'>
22274,>>> Object.__bases__
22275,"(<class 'object'>,)"
22276,>>> ObjectWithMetaClass.__bases__
22277,"(<class 'object'>,)"
22278,>>> type(ObjectWithMetaClass).__bases__
22279,"(<class 'type'>,)"
22280,>>> Object.__mro__
22281,"(<class '__main__.Object'>, <class 'object'>)"
22282,>>> ObjectWithMetaClass.__mro__
22283,"(This is ""Meta"" metaclass, <class 'object'>)"
22284,>>> 
22285,with open(filename) as file:
22286,    lines = file.readlines()
22287,    lines = [line.rstrip() for line in lines]
22288,with open(filename) as file:
22289,    for line in file:
22290,        print(line.rstrip())
22291,with open(filename) as file:
22292,    while (line := file.readline().rstrip()):
22293,        print(line)
22294,"with open(filename, 'r', encoding='UTF-8') as file:"
22295,    while (line := file.readline().rstrip()):
22296,        print(line)
22297,readlines()
22298,io.IOBase.readlines()
22299,:=
22300,with open('filename') as f:
22301,    lines = f.readlines()
22302,with open('filename') as f:
22303,    lines = [line.rstrip() for line in f]
22304,f.read().splitlines()
22305,for line in open(filename)
22306,"lines = [x.rstrip('\n') for x in open('data\hsf.txt','r')]"
22307,open
22308,"with open(""file.txt"") as file_in:"
22309,    lines = []
22310,    for line in file_in:
22311,        lines.append(line)
22312,array
22313,"lines = tuple(open(filename, 'r'))"
22314,open
22315,tuple
22316,lines
22317,lines = open(filename).read().split('\n')
22318,lines = open(filename).read().splitlines()
22319,list
22320,tuple
22321,"from sys import getsizeof as g; i = [None] * 1000; round((g(list(i)) / g(tuple(i)) - 1) * 100, 2)"
22322,tuple
22323,list
22324,"from timeit import timeit as t; round((t('tuple(i)', 'i = [None] * 1000') / t('list(i)', 'i = [None] * 1000') - 1) * 100, 2)"
22325,list
22326,with open('file.txt') as f:
22327,    my_list = list(f)
22328,    # my_list = [x.rstrip() for x in f] # remove line breaks
22329,with open('file.txt') as f:
22330,    for line in f:
22331,       ...
22332,with
22333,readlines()
22334,with open('file.txt') as f:
22335,    lines = f.readlines()
22336,lines = open('file.txt').readlines()
22337,f = open('file.txt') # Open file on read mode
22338,lines = f.read().splitlines() # List with stripped line-breaks
22339,f.close() # Close file
22340,# my_list = [x.rstrip() for x in f] # remove line breaks
22341,# my_list = [x.rstrip() for x in my_list] # remove line breaks
22342,\n
22343,with open(fname) as f:
22344,    content = f.readlines()
22345,\n
22346,with open(fname) as f:
22347,    content = f.read().splitlines()
22348,"'1\n2\n3\n' => [ '1', '', '2', '', '3', '' ]"
22349,s = '1\n2\n3\n'
22350,s.splitlines()
22351,"['1', '2', '3']"
22352,s = '1\n\n2\n\n3\n\n'
22353,with open('/your/path/file') as f:
22354,    my_lines = f.readlines()
22355,with open('/your/path/file') as f:
22356,    for line in f:
22357,        process(line)
22358,def process(line):
22359,    if 'save the world' in line.lower():
22360,         superman.save_the_world()
22361,Superman
22362,"open('file_path', 'r+')"
22363,line 1
22364,line 2
22365,line 3
22366,">>> with open(""myfile.txt"", encoding=""utf-8"") as file:"
22367,"...     x = [l.rstrip(""\n"") for l in file]"
22368,>>> x
22369,"['line 1','line 2','line 3']"
22370,x = []
22371,"with open(""myfile.txt"") as file:"
22372,    for l in file:
22373,        x.append(l.strip())
22374,">>> x = open(""myfile.txt"").read().splitlines()"
22375,>>> x
22376,"['line 1', 'line 2', 'line 3']"
22377,">>> x = open(""myfile.txt"").readlines()"
22378,>>> x
22379,"['linea 1\n', 'line 2\n', 'line 3\n']"
22380,def print_output(lines_in_textfile):
22381,"    print(""lines_in_textfile ="", lines_in_textfile)"
22382,
22383,"y = [x.rstrip() for x in open(""001.txt"")]"
22384,print_output(y)
22385,
22386,"with open('001.txt', 'r', encoding='utf-8') as file:"
22387,    file = file.read().splitlines()
22388,    print_output(file)
22389,
22390,"with open('001.txt', 'r', encoding='utf-8') as file:"
22391,"    file = [x.rstrip(""\n"") for x in file]"
22392,    print_output(file)
22393,"lines_in_textfile = ['line 1', 'line 2', 'line 3']"
22394,"lines_in_textfile = ['line 1', 'line 2', 'line 3']"
22395,"lines_in_textfile = ['line 1', 'line 2', 'line 3']"
22396,"encoding=""utf-8"""
22397,read().splitlines()
22398,readlines()
22399,read().splitlines()
22400,readlines()
22401,strip()
22402,"rstrip(""\n"")"
22403,readlines()
22404,lst = list(open(filename))
22405,open
22406,open('afile')   # opens the file named afile in the current working directory
22407,open('adir/afile')            # relative path (relative to the current working directory)
22408,open('C:/users/aname/afile')  # absolute path (windows)
22409,open('/usr/local/afile')      # absolute path (linux)
22410,.txt
22411,.doc
22412,mode
22413,r
22414,mode
22415,open(filename)
22416,"open(filename, 'r')"
22417,rb
22418,"open(filename, 'rb')"
22419,'b'
22420,open
22421,close
22422,f = open(filename)
22423,# ... do stuff with f
22424,f.close()
22425,open
22426,close
22427,try
22428,finally
22429,f = open(filename)
22430,# nothing in between!
22431,try:
22432,    # do stuff with f
22433,finally:
22434,    f.close()
22435,open
22436,try
22437,finally
22438,with open(filename) as f:
22439,    # do stuff with f
22440,# The file is always closed after the with-scope ends.
22441,open
22442,file
22443,with open(filename) as f:
22444,    for line in f:
22445,        print(line)
22446,\n
22447,\r\n
22448,\r
22449,with open(filename) as f:
22450,    for line in f:
22451,        print(line[:-1])
22452,with open(filename) as f:
22453,    for line in f:
22454,        if line.endswith('\n'):
22455,            line = line[:-1]
22456,        print(line)
22457,\n
22458,with open(filename) as f:
22459,    for line in f:
22460,        print(f.rstrip())
22461,\r\n
22462,.rstrip()
22463,\r
22464,list
22465,with open(filename) as f:
22466,    lst = list(f)
22467,with open(filename) as f:
22468,    lst = [line.rstrip() for line in f]
22469,.readlines()
22470,file
22471,list
22472,with open(filename) as f:
22473,    lst = f.readlines()
22474,[line.rstrip() for line in f]
22475,read
22476,with open(filename) as f:
22477,    lst = f.read().split('\n')
22478,with open(filename) as f:
22479,    lst = f.read().splitlines()
22480,split
22481,with open(...) as f
22482,file
22483,for line in the_file_object:
22484,readlines()
22485,"infile = open('my_file.txt', 'r')  # Open the file for reading."
22486,
22487,data = infile.read()  # Read the contents of the file.
22488,
22489,infile.close()  # Close the file since we're done using it.
22490,# Open the file for reading.
22491,"with open('my_file.txt', 'r') as infile:"
22492,
22493,    data = infile.read()  # Read the contents of the file into memory.
22494,"# Return a list of the lines, breaking at line boundaries."
22495,my_list = data.splitlines()
22496,# Open the file for reading.
22497,"with open('my_file.txt', 'r') as infile:"
22498,
22499,    data = infile.read()  # Read the contents of the file into memory.
22500,
22501,"# Return a list of the lines, breaking at line boundaries."
22502,my_list = data.splitlines()
22503,"     A fost odatã ca-n povesti,"
22504,"     A fost ca niciodatã,"
22505,"     Din rude mãri împãrãtesti,"
22506,     O prea frumoasã fatã.
22507,    print my_list  # Print the list.
22508,
22509,    # Print each line in the list.
22510,    for line in my_list:
22511,        print line
22512,
22513,    # Print the fourth element in this list.
22514,    print my_list[3]
22515,"     ['A fost odat\xc3\xa3 ca-n povesti,', 'A fost ca niciodat\xc3\xa3,',"
22516,"     'Din rude m\xc3\xa3ri \xc3\xaemp\xc3\xa3r\xc3\xa3testi,', 'O prea"
22517,     frumoas\xc3\xa3 fat\xc3\xa3.']
22518,
22519,"     A fost odatã ca-n povesti, A fost ca niciodatã, Din rude mãri"
22520,"     împãrãtesti, O prea frumoasã fatã."
22521,
22522,     O prea frumoasã fatã.
22523,pathlib
22524,from pathlib import Path
22525,p = Path('my_text_file')
22526,lines = p.read_text().splitlines()
22527,splitlines
22528,pathlib
22529,read_text
22530,lines = [line.rstrip() for line in open('file.txt')]
22531,rstrip()
22532,\n
22533,.rstrip('\n')
22534,"f = open(""your_file.txt"",'r')"
22535,out = f.readlines() # will append in the list out
22536,for line in out:
22537,    print (line)
22538,for line in f:
22539,    print (line)
22540,numpy.genfromtxt
22541,import numpy as np
22542,"data = np.genfromtxt(""yourfile.dat"",delimiter=""\n"")"
22543,data
22544,#!/usr/bin/env python3
22545,# -*- coding: utf-8 -*-
22546,
22547,# Define data
22548,"lines = ['     A first string  ',"
22549,"         'A Unicode sample: €',"
22550,         'German: äöüß']
22551,
22552,# Write text file
22553,"with open('file.txt', 'w') as fp:"
22554,    fp.write('\n'.join(lines))
22555,
22556,# Read text file
22557,"with open('file.txt', 'r') as fp:"
22558,    read_lines = fp.readlines()
22559,    read_lines = [line.rstrip('\n') for line in read_lines]
22560,
22561,print(lines == read_lines)
22562,with
22563,.strip()
22564,.rstrip()
22565,lines
22566,.txt
22567,fileinput
22568,# reader.py
22569,import fileinput
22570,
22571,content = []
22572,for line in fileinput.input():
22573,    content.append(line.strip())
22574,
22575,fileinput.close()
22576,$ python reader.py textfile.txt 
22577,lines = open('C:/path/file.txt').read().splitlines()
22578,lines = list(open('C:/path/file.txt'))
22579,# ... or if you want to have a list without EOL characters
22580,lines = [l.rstrip() for l in open('C:/path/file.txt')]
22581,pathlib
22582,from pathlib import Path
22583,"file_path = Path(""C:/path/file.txt"") "
22584,lines = file_path.read_text().split_lines()
22585,# ... or ... 
22586,lines = [l.rstrip() for l in file_path.open()]
22587,.read().splitlines()
22588,.readlines()
22589,.read()
22590,splitlines()
22591,"inp = ""file.txt"""
22592,data = open(inp)
22593,dat = data.read()
22594,lst = dat.splitlines()
22595,print lst
22596,# print(lst) # for python 3
22597,.readlines()
22598,data.read().splitlines()
22599,buffersize = 2**16
22600,with open(path) as f: 
22601,    while True:
22602,        lines_buffer = f.readlines(buffersize)
22603,        if not lines_buffer:
22604,            break
22605,        for line in lines_buffer:
22606,            process(line)
22607,process(line)
22608,print(line)
22609,lines = list(open('filename'))
22610,lines = tuple(open('filename'))
22611,lines = set(open('filename'))
22612,set
22613,.close
22614,with
22615,with open('filename') as f: lines = list(f) 
22616,.close
22617,with
22618,with open('filename') as f: lines = list(f)
22619,filter
22620,"with open(myFile, ""r"") as f:"
22621,"    excludeFileContent = list(filter(None, f.read().splitlines()))"
22622,import pandas as pd
22623,"data = pd.read_csv(filename) # You can also add parameters such as header, sep, etc."
22624,array = data.values
22625,data
22626,array.tolist()
22627,pandas.read_csv()
22628,filename
22629,Path(filename)
22630,open(filename) as f
22631,list(fileinput.input(filename))
22632,with path.open() as f
22633,f.readlines()
22634,list(f)
22635,path.read_text().splitlines()
22636,path.read_text().splitlines(keepends=True)
22637,fileinput.input
22638,f
22639,list.append
22640,f
22641,list.extend
22642,f
22643,from pathlib import Path
22644,Path('filename').write_text('foo\nbar\nbaz')
22645,filename = 'filename'
22646,with open(filename) as f:
22647,    for line in f:
22648,        line # do something with the line
22649,fileinput.input
22650,import fileinput
22651,
22652,for line in fileinput.input(filename): 
22653,    line # process the line
22654,for line in fileinput.input([filename]*2): 
22655,    line # process the line
22656,f
22657,fileinput.input
22658,fileinput.input(filename)
22659,fileinput.input(filename)
22660,list
22661,list(fileinput.input(filename))
22662,f.readlines
22663,hint
22664,open
22665,filename = 'filename'
22666,
22667,with open(filename) as f:
22668,    f.readlines()
22669,pathlib
22670,from pathlib import Path
22671,
22672,path = Path(filename)
22673,
22674,with path.open() as f:
22675,    f.readlines()
22676,list
22677,with path.open() as f:
22678,    list(f)
22679,Path
22680,splitlines()
22681,splitlines
22682,path.read_text().splitlines()
22683,keepends=True
22684,path.read_text().splitlines(keepends=True)
22685,list.append
22686,line_list = []
22687,for line in fileinput.input(filename):
22688,    line_list.append(line)
22689,
22690,line_list
22691,list.extend
22692,line_list = []
22693,line_list.extend(fileinput.input(filename))
22694,line_list
22695,[line for line in fileinput.input(filename)]
22696,list(fileinput.input(filename))
22697,fileinput.input
22698,with path.open() as f
22699,contents = []
22700,"for line in open(filepath, 'r').readlines():"
22701,    contents.append(line.strip())
22702,"contents = [line.strip() for line in open(filepath, 'r').readlines()]"
22703,readlines()
22704,with
22705,import numpy
22706,"data = numpy.loadtxt(filename, delimiter=""\n"")"
22707,dummy.txt
22708,fpath
22709,lst
22710,fpath = 'dummy.txt'
22711,"with open(fpath, ""r"") as f: lst = [line.rstrip('\n \t') for line in f]"
22712,
22713,print lst
22714,">>>['THIS IS LINE1.', 'THIS IS LINE2.', 'THIS IS LINE3.', 'THIS IS LINE4.']"
22715,import csv
22716,fpath = 'dummy.txt'
22717,with open(fpath) as csv_file:
22718,"    csv_reader = csv.reader(csv_file, delimiter='   ')"
22719,    lst = [row[0] for row in csv_reader] 
22720,
22721,print lst
22722,">>>['THIS IS LINE1.', 'THIS IS LINE2.', 'THIS IS LINE3.', 'THIS IS LINE4.']"
22723,lst
22724,delimiter='   '
22725,import os
22726,
22727,"# handle files using a callback method, prevents repetition"
22728,"def _FileIO__file_handler(file_path, mode, callback = lambda f: None):"
22729,"  f = open(file_path, mode)"
22730,  try:
22731,    return callback(f)
22732,  except Exception as e:
22733,"    raise IOError(""Failed to %s file"" % [""write to"", ""read from""][mode.lower() in ""r rb r+"".split("" "")])"
22734,  finally:
22735,    f.close()
22736,
22737,
22738,class FileIO:
22739,  # return the contents of a file
22740,"  def read(file_path, mode = ""r""):"
22741,"    return __file_handler(file_path, mode, lambda rf: rf.read())"
22742,
22743,  # get the lines of a file
22744,"  def lines(file_path, mode = ""r"", filter_fn = lambda line: len(line) > 0):"
22745,"    return [line for line in FileIO.read(file_path, mode).strip().split(""\n"") if filter_fn(line)]"
22746,
22747,  # create or update a file (NOTE: can also be used to replace a file's original content)
22748,"  def write(file_path, new_content, mode = ""w""):"
22749,"    return __file_handler(file_path, mode, lambda wf: wf.write(new_content))"
22750,
22751,  # delete a file (if it exists)
22752,  def delete(file_path):
22753,    return os.remove() if os.path.isfile(file_path) else None
22754,FileIO.lines
22755,"file_ext_lines = FileIO.lines(""./path/to/file.ext""):"
22756,"for i, line in enumerate(file_ext_lines):"
22757,"  print(""Line {}: {}"".format(i + 1, line))"
22758,mode
22759,"""r"""
22760,filter_fn
22761,read
22762,write
22763,delete
22764,FileIO.lines
22765,read_lines
22766,lines = FileIO.lines(path)
22767,with open(path) as f: lines = f.readlines()
22768,#!/bin/python3
22769,import os
22770,import sys
22771,abspath = os.path.abspath(__file__)
22772,dname = os.path.dirname(abspath)
22773,filename = dname + sys.argv[1]
22774,"arr = open(filename).read().split(""\n"") "
22775,print(arr)
22776,python3 somefile.py input_file_name.txt
22777,open(sys.argv[1])
22778,"adders=[None, None, None, None]"
22779,
22780,"for i in [0,1,2,3]:"
22781,   adders[i]=lambda a: i+a
22782,
22783,print adders[1](3)
22784,for
22785,i
22786,0
22787,3
22788,lambda
22789,i
22790,lambda
22791,3
22792,6
22793,4
22794,lambda
22795,i
22796,i
22797,i
22798,adders
22799,lambda
22800,i
22801,3
22802,adders[1](3)
22803,6
22804,lambda
22805,i
22806,i
22807,i
22808,print i
22809,">>> for i in [0,1,2,3]:"
22810,"...    adders[i]=lambda a,i=i: i+a  # note the dummy parameter with a default value"
22811,...
22812,>>> print( adders[1](3) )
22813,4
22814,i
22815,i
22816,">>> adders = [0,1,2,3]"
22817,">>> for i in [0,1,2,3]:"
22818,...     adders[i] = (lambda b: lambda a: b + a)(i)
22819,...     
22820,>>> adders[1](3)
22821,4
22822,>>> adders[2](3)
22823,5
22824,def createAdder(x):
22825,    return lambda y: y + x
22826,adders = [createAdder(i) for i in range(4)]
22827,set!
22828,from functools import partial
22829,"from operator import add   # add(a, b) -- Same as a + b."
22830,
22831,"adders = [0,1,2,3]"
22832,"for i in [0,1,2,3]:"
22833,    # store callable object with first argument given as (current) i
22834,"    adders[i] = partial(add, i) "
22835,
22836,print adders[1](3)
22837,"x = ""foo"""
22838,
22839,def print_x():
22840,    print x
22841,
22842,"x = ""bar"""
22843,
22844,"print_x() # Outputs ""bar"""
22845,"adders= [0,1,2,3]"
22846,i = 0
22847,adders[i] = lambda a: i+a
22848,i = 1
22849,adders[i] = lambda a: i+a
22850,i = 2
22851,adders[i] = lambda a: i+a
22852,i = 3
22853,adders[i] = lambda a: i+a
22854,i
22855,lambda
22856,lambda
22857,lambda
22858,__init__
22859,self
22860,self
22861,adders[1](3)
22862,4
22863,NameError
22864,i
22865,return
22866,adders
22867,def make_funcs():
22868,    i = 42
22869,"    my_str = ""hi"""
22870,
22871,    f_one = lambda: i
22872,
22873,    i += 1
22874,    f_two = lambda: i+1
22875,
22876,    f_three = lambda: my_str
22877,"    return f_one, f_two, f_three"
22878,
22879,"f_1, f_2, f_3 = make_funcs()"
22880,">>> print f_1.func_closure, f_1.func_closure[0].cell_contents"
22881,"(<cell at 0x106a99a28: int object at 0x7fbb20c11170>,) 43 "
22882,">>> print f_2.func_closure, f_2.func_closure[0].cell_contents"
22883,"(<cell at 0x106a99a28: int object at 0x7fbb20c11170>,) 43"
22884,>>> print f_1.func_closure is f_2.func_closure
22885,False
22886,int object at [address X]>
22887,"add = lambda a, b: a + b"
22888,"add(1, 3)"
22889,operator
22890,from operator import add
22891,"add(1, 3)"
22892,class Adders(object):
22893,"    def __getitem__(self, item):"
22894,        return lambda a: a + item
22895,
22896,adders = Adders()
22897,adders[1](3)
22898,i
22899,def get_funky(i):
22900,    return lambda a: i+a
22901,
22902,"adders=[None, None, None, None]"
22903,
22904,"for i in [0,1,2,3]:"
22905,   adders[i]=get_funky(i)
22906,
22907,print(*(ar(5) for ar in adders))
22908,5 6 7 8
22909,"df=pd.DataFrame({'A':[1,2],'B':[[1,2],[1,2]]})"
22910,df
22911,Out[458]: 
22912,   A       B
22913,"0  1  [1, 2]"
22914,"1  2  [1, 2]"
22915,   A  B
22916,0  1  1
22917,1  1  2
22918,3  2  1
22919,4  2  2
22920,apply
22921,object
22922,pandas.DataFrame.explode
22923,df.explode('B')
22924,
22925,       A  B
22926,    0  1  1
22927,    1  1  2
22928,    0  2  1
22929,    1  2  2
22930,list
22931,NaN
22932,NaN
22933,list
22934,"df = pd.DataFrame({'A': [1, 2, 3, 4],'B': [[1, 2], [1, 2], [], np.nan]})"
22935,df.B = df.B.fillna({i: [] for i in df.index})  # replace NaN with []
22936,df.explode('B')
22937,
22938,   A    B
22939,0  1    1
22940,0  1    2
22941,1  2    1
22942,1  2    2
22943,2  3  NaN
22944,3  4  NaN
22945,apply + pd.Series
22946,df.set_index('A').B.apply(pd.Series).stack().reset_index(level=0).rename(columns={0:'B'})
22947,Out[463]:
22948,   A  B
22949,0  1  1
22950,1  1  2
22951,0  2  1
22952,1  2  2
22953,repeat
22954,DataFrame
22955,"df=pd.DataFrame({'A':df.A.repeat(df.B.str.len()),'B':np.concatenate(df.B.values)})"
22956,df
22957,Out[465]:
22958,   A  B
22959,0  1  1
22960,0  1  2
22961,1  2  1
22962,1  2  2
22963,join
22964,merge
22965,index
22966,"s=pd.DataFrame({'B':np.concatenate(df.B.values)},index=df.index.repeat(df.B.str.len()))"
22967,"s.join(df.drop('B',1),how='left')"
22968,Out[477]:
22969,   B  A
22970,0  1  1
22971,0  2  1
22972,1  1  2
22973,1  2  2
22974,reindex
22975,"s.join(df.drop('B',1),how='left').reindex(columns=df.columns)"
22976,list
22977,"pd.DataFrame([[x] + [z] for x, y in df.values for z in y],columns=df.columns)"
22978,Out[488]:
22979,   A  B
22980,0  1  1
22981,1  1  2
22982,2  2  1
22983,3  2  2
22984,"s=pd.DataFrame([[x] + [z] for x, y in zip(df.index,df.B) for z in y])"
22985,"s.merge(df,left_on=0,right_index=True)"
22986,Out[491]:
22987,   0  1  A       B
22988,"0  0  1  1  [1, 2]"
22989,"1  0  2  1  [1, 2]"
22990,"2  1  1  2  [1, 2]"
22991,"3  1  2  2  [1, 2]"
22992,reindex
22993,loc
22994,df.reindex(df.index.repeat(df.B.str.len())).assign(B=np.concatenate(df.B.values))
22995,Out[554]:
22996,   A  B
22997,0  1  1
22998,0  1  2
22999,1  2  1
23000,1  2  2
23001,
23002,#df.loc[df.index.repeat(df.B.str.len())].assign(B=np.concatenate(df.B.values))
23003,"df=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]]})"
23004,from collections import ChainMap
23005,"d = dict(ChainMap(*map(dict.fromkeys, df['B'], df['A'])))"
23006,"pd.DataFrame(list(d.items()),columns=df.columns[::-1])"
23007,Out[574]:
23008,   B  A
23009,0  1  1
23010,1  2  1
23011,2  3  2
23012,3  4  2
23013,numpy
23014,"newvalues=np.dstack((np.repeat(df.A.values,list(map(len,df.B.values))),np.concatenate(df.B.values)))"
23015,"pd.DataFrame(data=newvalues[0],columns=df.columns)"
23016,   A  B
23017,0  1  1
23018,1  1  2
23019,2  2  1
23020,3  2  2
23021,itertools
23022,cycle
23023,chain
23024,"from itertools import cycle,chain"
23025,l=df.values.tolist()
23026,"l1=[list(zip([x[0]], cycle(x[1])) if len([x[0]]) > len(x[1]) else list(zip(cycle([x[0]]), x[1]))) for x in l]"
23027,"pd.DataFrame(list(chain.from_iterable(l1)),columns=df.columns)"
23028,   A  B
23029,0  1  1
23030,1  1  2
23031,2  2  1
23032,3  2  2
23033,"df=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]],'C':[[1,2],[3,4]]})"
23034,df
23035,Out[592]:
23036,   A       B       C
23037,"0  1  [1, 2]  [1, 2]"
23038,"1  2  [3, 4]  [3, 4]"
23039,"def unnesting(df, explode):"
23040,    idx = df.index.repeat(df[explode[0]].str.len())
23041,    df1 = pd.concat([
23042,"        pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)"
23043,    df1.index = idx
23044,
23045,"    return df1.join(df.drop(explode, 1), how='left')"
23046,
23047,
23048,"unnesting(df,['B','C'])"
23049,Out[609]:
23050,   B  C  A
23051,0  1  1  1
23052,0  2  2  1
23053,1  3  3  2
23054,1  4  4  2
23055,pd.DataFrame
23056,"df.join(pd.DataFrame(df.B.tolist(),index=df.index).add_prefix('B_'))"
23057,Out[33]:
23058,   A       B       C  B_0  B_1
23059,"0  1  [1, 2]  [1, 2]    1    2"
23060,"1  2  [3, 4]  [3, 4]    3    4"
23061,"def unnesting(df, explode, axis):"
23062,    if axis==1:
23063,        idx = df.index.repeat(df[explode[0]].str.len())
23064,        df1 = pd.concat([
23065,"            pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)"
23066,        df1.index = idx
23067,
23068,"        return df1.join(df.drop(explode, 1), how='left')"
23069,    else :
23070,        df1 = pd.concat([
23071,"                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)"
23072,"        return df1.join(df.drop(explode, 1), how='left')"
23073,"unnesting(df, ['B','C'], axis=0)"
23074,Out[36]:
23075,   B0  B1  C0  C1  A
23076,0   1   2   1   2  1
23077,1   3   4   3   4  2
23078,"def unnesting(df, explode, axis):"
23079,    if axis==1:
23080,"        df1 = pd.concat([df[x].explode() for x in explode], axis=1)"
23081,"        return df1.join(df.drop(explode, 1), how='left')"
23082,    else :
23083,        df1 = pd.concat([
23084,"                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)"
23085,"        return df1.join(df.drop(explode, 1), how='left')"
23086,numpy
23087,vals = np.array(df.B.values.tolist())    
23088,"a = np.repeat(df.A, vals.shape[1])"
23089,
23090,"pd.DataFrame(np.column_stack((a, vals.ravel())), columns=df.columns)"
23091,   A  B
23092,0  1  1
23093,1  1  2
23094,2  2  1
23095,3  2  2
23096,vals = df.B.values.tolist()
23097,rs = [len(r) for r in vals]    
23098,"a = np.repeat(df.A, rs)"
23099,
23100,"pd.DataFrame(np.column_stack((a, np.concatenate(vals))), columns=df.columns)"
23101,   A  B
23102,0  1  1
23103,1  1  2
23104,2  2  1
23105,3  2  2
23106,N
23107,M
23108,"df = pd.DataFrame({'A': [1,2,3], 'B': [[1,2], [1,2,3], [1]],"
23109,"                   'C': [[1,2,3], [1,2], [1,2]], 'D': ['A', 'B', 'C']})"
23110,   A          B          C  D
23111,"0  1     [1, 2]  [1, 2, 3]  A"
23112,"1  2  [1, 2, 3]     [1, 2]  B"
23113,"2  3        [1]     [1, 2]  C"
23114,"def unnest(df, tile, explode):"
23115,    vals = df[explode].sum(1)
23116,    rs = [len(r) for r in vals]
23117,"    a = np.repeat(df[tile].values, rs, axis=0)"
23118,    b = np.concatenate(vals.values)
23119,"    d = np.column_stack((a, b))"
23120,"    return pd.DataFrame(d, columns = tile +  ['_'.join(explode)])"
23121,
23122,"unnest(df, ['A', 'D'], ['B', 'C'])"
23123,    A  D B_C
23124,0   1  A   1
23125,1   1  A   2
23126,2   1  A   1
23127,3   1  A   2
23128,4   1  A   3
23129,5   2  B   1
23130,6   2  B   2
23131,7   2  B   3
23132,8   2  B   1
23133,9   2  B   2
23134,10  3  C   1
23135,11  3  C   1
23136,12  3  C   2
23137,def wen1(df):
23138,    return df.set_index('A').B.apply(pd.Series).stack().reset_index(level=0).rename(columns={0: 'B'})
23139,
23140,def wen2(df):
23141,"    return pd.DataFrame({'A':df.A.repeat(df.B.str.len()),'B':np.concatenate(df.B.values)})"
23142,
23143,def wen3(df):
23144,"    s = pd.DataFrame({'B': np.concatenate(df.B.values)}, index=df.index.repeat(df.B.str.len()))"
23145,"    return s.join(df.drop('B', 1), how='left')"
23146,
23147,def wen4(df):
23148,"    return pd.DataFrame([[x] + [z] for x, y in df.values for z in y],columns=df.columns)"
23149,
23150,def chris1(df):
23151,    vals = np.array(df.B.values.tolist())
23152,"    a = np.repeat(df.A, vals.shape[1])"
23153,"    return pd.DataFrame(np.column_stack((a, vals.ravel())), columns=df.columns)"
23154,
23155,def chris2(df):
23156,    vals = df.B.values.tolist()
23157,    rs = [len(r) for r in vals]
23158,"    a = np.repeat(df.A.values, rs)"
23159,"    return pd.DataFrame(np.column_stack((a, np.concatenate(vals))), columns=df.columns)"
23160,import pandas as pd
23161,import matplotlib.pyplot as plt
23162,import numpy as np
23163,from timeit import timeit
23164,
23165,res = pd.DataFrame(
23166,"       index=['wen1', 'wen2', 'wen3', 'wen4', 'chris1', 'chris2'],"
23167,"       columns=[10, 50, 100, 500, 1000, 5000, 10000],"
23168,       dtype=float
23169,)
23170,
23171,for f in res.index:
23172,    for c in res.columns:
23173,"        df = pd.DataFrame({'A': [1, 2], 'B': [[1, 2], [1, 2]]})"
23174,        df = pd.concat([df]*c)
23175,        stmt = '{}(df)'.format(f)
23176,"        setp = 'from __main__ import df, {}'.format(f)"
23177,"        res.at[f, c] = timeit(stmt, setp, number=50)"
23178,
23179,ax = res.div(res.min()).T.plot(loglog=True)
23180,"ax.set_xlabel(""N"")"
23181,"ax.set_ylabel(""time (relative)"")"
23182,df.explode
23183,explode()
23184,"df = pd.DataFrame({'A': [1, 2], 'B': [[1, 2], [1, 2]]})"
23185,df.explode('B')
23186,   A  B
23187,0  1  1
23188,0  1  2
23189,1  2  1
23190,1  2  2
23191,import numpy as np
23192,import pandas as pd
23193,
23194,
23195,"def unnest(frame, explode):"
23196,    def mesh(values):
23197,"        return np.array(np.meshgrid(*values)).T.reshape(-1, len(values))"
23198,
23199,    data = np.vstack(mesh(row) for row in frame[explode].values)
23200,"    return pd.DataFrame(data=data, columns=explode)"
23201,
23202,
23203,"df = pd.DataFrame({'A': [1, 2], 'B': [[1, 2], [1, 2]]})"
23204,"print(unnest(df, ['A', 'B']))  # base"
23205,print()
23206,
23207,"df = pd.DataFrame({'A': [1, 2], 'B': [[1, 2], [3, 4]], 'C': [[1, 2], [3, 4]]})"
23208,"print(unnest(df, ['A', 'B', 'C']))  # multiple columns"
23209,print()
23210,
23211,"df = pd.DataFrame({'A': [1, 2, 3], 'B': [[1, 2], [1, 2, 3], [1]],"
23212,"                   'C': [[1, 2, 3], [1, 2], [1, 2]], 'D': ['A', 'B', 'C']})"
23213,
23214,"print(unnest(df, ['A', 'B']))  # uneven length lists"
23215,print()
23216,"print(unnest(df, ['D', 'B']))  # different types"
23217,print()
23218,   A  B
23219,0  1  1
23220,1  1  2
23221,2  2  1
23222,3  2  2
23223,
23224,   A  B  C
23225,0  1  1  1
23226,1  1  2  1
23227,2  1  1  2
23228,3  1  2  2
23229,4  2  3  3
23230,5  2  4  3
23231,6  2  3  4
23232,7  2  4  4
23233,
23234,   A  B
23235,0  1  1
23236,1  1  2
23237,2  2  1
23238,3  2  2
23239,4  2  3
23240,5  3  1
23241,
23242,   D  B
23243,0  A  1
23244,1  A  2
23245,2  B  1
23246,3  B  2
23247,4  B  3
23248,5  C  1
23249,df = pd.DataFrame({
23250,"    'A': [1, 2],"
23251,"    'B': [[1, 2], [3, 4]],"
23252,"    'C': [[1, 2], [3, 4, 5]]"
23253,})
23254,
23255,df
23256,
23257,   A       B          C
23258,"0  1  [1, 2]     [1, 2]"
23259,"1  2  [3, 4]  [3, 4, 5]"
23260,   A       B          C
23261,"0  1  [1, 2]     [1, 2]  # Typical to assume these should be zipped [(1, 1), (2, 2)]"
23262,"1  2  [3, 4]  [3, 4, 5]"
23263,   A       B          C
23264,"0  1  [1, 2]     [1, 2]"
23265,"1  2  [3, 4]  [3, 4, 5]  # is this [(3, 3), (4, 4), (None, 5)]?"
23266,   A       B          C
23267,"0  1  [1, 2]     [1, 2]"
23268,"1  2  [3, 4]  [3, 4, 5]  # is this [(3, 3), (3, 4), (3, 5), (4, 3), (4, 4), (4, 5)]"
23269,zip
23270,product
23271,zip
23272,zip_longest
23273,"from itertools import zip_longest, product"
23274,
23275,"def xplode(df, explode, zipped=True):"
23276,    method = zip_longest if zipped else product
23277,
23278,    rest = {*df} - {*explode}
23279,
23280,"    zipped = zip(zip(*map(df.get, rest)), zip(*map(df.get, explode)))"
23281,    tups = [tup + exploded
23282,"     for tup, pre in zipped"
23283,     for exploded in method(*pre)]
23284,
23285,"    return pd.DataFrame(tups, columns=[*rest, *explode])[[*df]]"
23286,"xplode(df, ['B', 'C'])"
23287,
23288,   A    B  C
23289,0  1  1.0  1
23290,1  1  2.0  2
23291,2  2  3.0  3
23292,3  2  4.0  4
23293,4  2  NaN  5
23294,"xplode(df, ['B', 'C'], zipped=False)"
23295,
23296,   A  B  C
23297,0  1  1  1
23298,1  1  1  2
23299,2  1  2  1
23300,3  1  2  2
23301,4  2  3  3
23302,5  2  3  4
23303,6  2  3  5
23304,7  2  4  3
23305,8  2  4  4
23306,9  2  4  5
23307,df = pd.DataFrame({
23308,"    'A': [1, 2],"
23309,"    'B': [[1, 2], [3, 4]],"
23310,"    'C': 'C',"
23311,"    'D': [[1, 2], [3, 4, 5]],"
23312,"    'E': [('X', 'Y', 'Z'), ('W',)]"
23313,})
23314,
23315,df
23316,
23317,   A       B  C          D          E
23318,"0  1  [1, 2]  C     [1, 2]  (X, Y, Z)"
23319,"1  2  [3, 4]  C  [3, 4, 5]       (W,)"
23320,"xplode(df, ['B', 'D', 'E'])"
23321,
23322,   A    B  C    D     E
23323,0  1  1.0  C  1.0     X
23324,1  1  2.0  C  2.0     Y
23325,2  1  NaN  C  NaN     Z
23326,3  2  3.0  C  3.0     W
23327,4  2  4.0  C  4.0  None
23328,5  2  NaN  C  5.0  None
23329,"xplode(df, ['B', 'D', 'E'], zipped=False)"
23330,
23331,    A  B  C  D  E
23332,0   1  1  C  1  X
23333,1   1  1  C  1  Y
23334,2   1  1  C  1  Z
23335,3   1  1  C  2  X
23336,4   1  1  C  2  Y
23337,5   1  1  C  2  Z
23338,6   1  2  C  1  X
23339,7   1  2  C  1  Y
23340,8   1  2  C  1  Z
23341,9   1  2  C  2  X
23342,10  1  2  C  2  Y
23343,11  1  2  C  2  Z
23344,12  2  3  C  3  W
23345,13  2  3  C  4  W
23346,14  2  3  C  5  W
23347,15  2  4  C  3  W
23348,16  2  4  C  4  W
23349,17  2  4  C  5  W
23350,"df[['B', 'B2']] = pd.DataFrame(df['B'].values.tolist())"
23351,
23352,"df[['A', 'B']].append(df[['A', 'B2']].rename(columns={'B2': 'B'}),"
23353,                      ignore_index=True)
23354,"df[['B1', 'B2']] = pd.DataFrame([*df['B']]) # if values.tolist() is too boring"
23355,
23356,"(pd.wide_to_long(df.drop('B', 1), 'B', 'A', '')"
23357," .reset_index(level=1, drop=True)"
23358, .reset_index())
23359,   A  B
23360,0  1  1
23361,1  2  1
23362,2  1  2
23363,3  2  2
23364,def stack(df):
23365,"    return df.set_index(['A', 'C']).B.apply(pd.Series).stack()"
23366,
23367,
23368,def comprehension(df):
23369,"    return pd.DataFrame([x + [z] for x, y in zip(df[['A', 'C']].values.tolist(), df.B) for z in y])"
23370,
23371,
23372,def multiindex(df):
23373,"    return pd.DataFrame(np.concatenate(df.B.values), index=df.set_index(['A', 'C']).index.repeat(df.B.str.len()))"
23374,
23375,
23376,def array(df):
23377,    return pd.DataFrame(
23378,        np.column_stack((
23379,"            np.repeat(df[['A', 'C']].values, df.B.str.len(), axis=0),"
23380,            np.concatenate(df.B.values)
23381,        ))
23382,    )
23383,
23384,
23385,import pandas as pd
23386,import matplotlib.pyplot as plt
23387,import numpy as np
23388,from timeit import timeit
23389,
23390,res = pd.DataFrame(
23391,    index=[
23392,"        'stack',"
23393,"        'comprehension',"
23394,"        'multiindex',"
23395,"        'array',"
23396,"    ],"
23397,"    columns=[1000, 2000, 5000, 10000, 20000, 50000],"
23398,    dtype=float
23399,)
23400,
23401,for f in res.index:
23402,    for c in res.columns:
23403,"        df = pd.DataFrame({'A': list('abc'), 'C': list('def'), 'B': [['g', 'h', 'i'], ['j', 'k'], ['l']]})"
23404,        df = pd.concat([df] * c)
23405,        stmt = '{}(df)'.format(f)
23406,"        setp = 'from __main__ import df, {}'.format(f)"
23407,"        res.at[f, c] = timeit(stmt, setp, number=20)"
23408,
23409,ax = res.div(res.min()).T.plot(loglog=True)
23410,"ax.set_xlabel(""N"")"
23411,"ax.set_ylabel(""time (relative)"")"
23412,In[74]: df
23413,Out[74]: 
23414,    A   B             C             columnD
23415,"0  A1  B1  [C1.1, C1.2]                D1"
23416,"1  A2  B2  [C2.1, C2.2]  [D2.1, D2.2, D2.3]"
23417,"2  A3  B3            C3        [D3.1, D3.2]"
23418,
23419,"In[75]: dfListExplode(df,['C','columnD'])"
23420,Out[75]: 
23421,    A   B     C columnD
23422,0  A1  B1  C1.1    D1
23423,1  A1  B1  C1.2    D1
23424,2  A2  B2  C2.1    D2.1
23425,3  A2  B2  C2.1    D2.2
23426,4  A2  B2  C2.1    D2.3
23427,5  A2  B2  C2.2    D2.1
23428,6  A2  B2  C2.2    D2.2
23429,7  A2  B2  C2.2    D2.3
23430,8  A3  B3    C3    D3.1
23431,9  A3  B3    C3    D3.2
23432,import pandas as pd
23433,import numpy as np
23434,
23435,"df=pd.DataFrame( {'A': ['A1','A2','A3'],"
23436,"                  'B': ['B1','B2','B3'],"
23437,"                  'C': [ ['C1.1','C1.2'],['C2.1','C2.2'],'C3'],"
23438,"                  'columnD': [ 'D1',['D2.1','D2.2', 'D2.3'],['D3.1','D3.2']],"
23439,                  })
23440,"print('df',df, sep='\n')"
23441,
23442,"def dfListExplode(df, explodeKeys):"
23443,"    if not isinstance(explodeKeys, list):"
23444,        explodeKeys=[explodeKeys]
23445,    # recursive handling of explodeKeys
23446,    if len(explodeKeys)==0:
23447,        return df
23448,    elif len(explodeKeys)==1:
23449,        explodeKey=explodeKeys[0]
23450,    else:
23451,"        return dfListExplode( dfListExplode(df, explodeKeys[:1]), explodeKeys[1:])"
23452,    # perform explosion/unnesting for key: explodeKey
23453,"    dfPrep=df[explodeKey].apply(lambda x: x if isinstance(x,list) else [x]) #casts all elements to a list"
23454,"    dfIndExpl=pd.DataFrame([[x] + [z] for x, y in zip(dfPrep.index,dfPrep.values) for z in y ], columns=['explodedIndex',explodeKey])"
23455,"    dfMerged=dfIndExpl.merge(df.drop(explodeKey, axis=1), left_on='explodedIndex', right_index=True)"
23456,    dfReind=dfMerged.reindex(columns=list(df))
23457,    return dfReind
23458,
23459,"dfExpl=dfListExplode(df,['C','columnD'])"
23460,"print('dfExpl',dfExpl, sep='\n')"
23461,df=pd.concat([df]*2).sort_index()
23462,it=iter(df['B'].tolist()[0]+df['B'].tolist()[0])
23463,df['B']=df['B'].apply(lambda x:next(it))
23464,concat
23465,sort_index
23466,iter
23467,apply
23468,next
23469,print(df)
23470,   A  B
23471,0  1  1
23472,0  1  2
23473,1  2  1
23474,1  2  2
23475,df=df.reset_index(drop=True)
23476,print(df)
23477,   A  B
23478,0  1  1
23479,1  1  2
23480,2  2  1
23481,3  2  2
23482,"df=pd.DataFrame({'A':[1,2],'B':[[1,2],[1,2]]})"
23483,
23484,"pd.concat([df['A'], pd.DataFrame(df['B'].values.tolist())], axis = 1)\"
23485,"  .melt(id_vars = 'A', value_name = 'B')\"
23486,  .dropna()\
23487,"  .drop('variable', axis = 1)"
23488,
23489,    A   B
23490,0   1   1
23491,1   2   1
23492,2   1   2
23493,3   2   2
23494,"df=pd.DataFrame({'A':[1,2],'B':[[1,2],[1,2]], 'C':[[1,2,3],[1,2,3]]})"
23495,
23496,print(df)
23497,   A       B          C
23498,"0  1  [1, 2]  [1, 2, 3]"
23499,"1  2  [1, 2]  [1, 2, 3]"
23500,explode_b = df.explode('B')['B']
23501,explode_c = df.explode('C')['C']
23502,"df = df.drop(['B', 'C'], axis=1)"
23503,"df = df.join([explode_b, explode_c])"
23504,"df=pd.DataFrame({'A':[1,2],'B':[[1,2],[1,2]]})"
23505,
23506,"out = pd.concat([df.loc[:,'A'],(df.B.apply(pd.Series))], axis=1, sort=False)"
23507,
23508,"out = out.set_index('A').stack().droplevel(level=1).reset_index().rename(columns={0:""B""})"
23509,
23510,       A    B
23511,   0    1   1
23512,   1    1   2
23513,   2    2   1
23514,   3    2   2
23515,# Here's the answer to the related question in:
23516,# https://stackoverflow.com/q/56708671/11426125
23517,
23518,# initial dataframe
23519,"df12=pd.DataFrame({'Date':['2007-12-03','2008-09-07'],'names':"
23520,"[['Peter','Alex'],['Donald','Stan']]})"
23521,
23522,# convert dataframe to array for indexing list values (names)
23523,a = np.array(df12.values)  
23524,
23525,"# create a new, dataframe with dimensions for unnested"
23526,"b = np.ndarray(shape = (4,2))"
23527,"df2 = pd.DataFrame(b, columns = [""Date"", ""names""], dtype = str)"
23528,
23529,# implement loops to assign date/name values as required
23530,i = range(len(a[0]))
23531,j = range(len(a[0]))
23532,for x in i:
23533,    for y in j:
23534,"        df2.iat[2*x+y, 0] = a[x][0]"
23535,"        df2.iat[2*x+y, 1] = a[x][1][y]"
23536,
23537,# set Date column as Index
23538,df2.Date=pd.to_datetime(df2.Date)
23539,df2.index=df2.Date
23540,"df2.drop('Date',axis=1,inplace =True)"
23541,explode
23542,df = df.explode('A')
23543,df = df.explode('B')
23544,df = df.drop_duplicates()
23545,import typing
23546,import pandas as pd
23547,
23548,"def horizontal_explode(df: pd.DataFrame, col_name: str, new_columns: typing.Union[list, None]=None) -> pd.DataFrame:"
23549,"    t = pd.DataFrame(df[col_name].tolist(), columns=new_columns, index=df.index)"
23550,"    return pd.concat([df, t], axis=1)"
23551,items = [
23552,"    [""1"", [""a"", ""b"", ""c""]],"
23553,"    [""2"", [""d"", ""e"", ""f""]]"
23554,]
23555,
23556,"df = pd.DataFrame(items, columns = [""col1"", ""col2""])"
23557,print(df)
23558,
23559,"t = horizontal_explode(df=df, col_name=""col2"")"
23560,"del t[""col2""]"
23561,print(t)
23562,
23563,"t = horizontal_explode(df=df, col_name=""col2"", new_columns=[""new_col1"", ""new_col2"", ""new_col3""])"
23564,"del t[""col2""]"
23565,print(t)
23566,  col1       col2
23567,"0    1  [a, b, c]"
23568,"1    2  [d, e, f]"
23569,
23570,  col1  0  1  2
23571,0    1  a  b  c
23572,1    2  d  e  f
23573,
23574,  col1 new_col1 new_col2 new_col3
23575,0    1        a        b        c
23576,1    2        d        e        f
23577," demo = {'set1':{'t1':[1,2,3],'t2':[4,5,6],'t3':[7,8,9]}, 'set2':{'t1':[1,2,3],'t2':[4,5,6],'t3':[7,8,9]}, 'set3': {'t1':[1,2,3],'t2':[4,5,6],'t3':[7,8,9]}}"
23578," df = pd.DataFrame.from_dict(demo, orient='index') "
23579,
23580, print(df.head())
23581, my_list=[]
23582," df2=pd.DataFrame(columns=['set','t1','t2','t3'])"
23583,
23584," for key,item in df.iterrows():"
23585,    t1=item.t1
23586,    t2=item.t2
23587,    t3=item.t3
23588,"    mat1=np.matrix([t1,t2,t3])"
23589,"    row1=[key,mat1[0,0],mat1[0,1],mat1[0,2]]"
23590,    df2.loc[len(df2)]=row1
23591,"    row2=[key,mat1[1,0],mat1[1,1],mat1[1,2]]"
23592,    df2.loc[len(df2)]=row2
23593,"    row3=[key,mat1[2,0],mat1[2,1],mat1[2,2]]"
23594,    df2.loc[len(df2)]=row3
23595,
23596,print(df2) 
23597,
23598,set t1 t2 t3
23599,0  set1  1  2  3
23600,1  set1  4  5  6
23601,2  set1  7  8  9
23602,3  set2  1  2  3
23603,4  set2  4  5  6
23604,5  set2  7  8  9
23605,6  set3  1  2  3
23606,7  set3  4  5  6
23607,8  set3  7  8  9   
23608,for (int i = 0; i < 4; i++)
23609,"    printf(""."");"
23610,....
23611,>>> for i in range(4): print('.')
23612,.
23613,.
23614,.
23615,.
23616,">>> print('.', '.', '.', '.')"
23617,. . . .
23618,print
23619,\n
23620,stdout
23621,"print(""."" * 10)"
23622,sep
23623,end
23624,sep=
23625,end=
23626,print
23627,"print('.', end='')"
23628,"print('a', 'b', 'c', sep='')"
23629,flush=True
23630,"print('.', end='', flush=True)"
23631,print
23632,__future__
23633,from __future__ import print_function
23634,flush
23635,print
23636,__future__
23637,sys.stdout.flush()
23638,sys.stdout.write()
23639,import sys
23640,sys.stdout.write('.')
23641,sys.stdout.flush()
23642,stdout
23643,flush
23644,python -u my.py
23645,"line = f""{line[6:]}?"""
23646,>>> for i in range(10):
23647,"...     print i,"
23648,... else:
23649,...     print
23650,...
23651,0 1 2 3 4 5 6 7 8 9
23652,>>>
23653,0123456..
23654,">>> strings = [ ""one"", ""two"", ""three"" ]"
23655,>>>
23656,>>> for i in xrange(3):
23657,"...     print ""Item %d: %s"" % (i, strings[i])"
23658,...
23659,Item 0: one
23660,Item 1: two
23661,Item 2: three
23662,">>> print ""."" * 10"
23663,..........
23664,"# For Python 2 to use the print() function, removing the print keyword"
23665,from __future__ import print_function
23666,for x in xrange(10):
23667,"    print('.', end='')"
23668,printf.py
23669,# printf.py
23670,
23671,from __future__ import print_function
23672,
23673,"def printf(str, *args):"
23674,"    print(str % args, end='')"
23675,from printf import printf
23676,for x in xrange(10):
23677,    printf('.')
23678,print 'done'
23679,#..........done
23680,"printf('hello %s', 'world')"
23681,"printf('%i %f', 10, 3.14)"
23682,#hello world10 3.140000
23683,import sys
23684,"for i in xrange(0,10):"
23685,"   sys.stdout.write(""."")"
23686,   sys.stdout.flush()
23687,print
23688,end
23689,"print(""HELLO"", end="""")"
23690,"print(""HELLO"")"
23691,sep
23692,"print(""HELLO"", ""HELLO"", ""HELLO"", sep="""")"
23693,from __future__ import print_function
23694,>>> import functools
23695,
23696,">>> printf = functools.partial(print, end="""")"
23697,
23698,">>> printf(""Hello world\n"")"
23699,Hello world
23700,otherfunction = function(1)
23701,function(1)
23702,otherfunction
23703,print
23704,"print('Hello, World!')"
23705,"print('Hello, World!', end='\n')"
23706,end
23707,"print('Hello, World!', end='')"
23708,"print('Hello, World!', end=' ')"
23709,","
23710,print
23711,"print('.', end='')"
23712,from __future__ import print_function # needs to be first statement in file
23713,"print('.', end='')"
23714,import sys
23715,sys.stdout.write('.')
23716,"print '.',"
23717,"print('.'), # Avoid this if you want to remain sane"
23718,"# This makes it look like print is a function, but it is not."
23719,"# This is the `,` creating a tuple and the parentheses enclose an expression."
23720,"# To see the problem, try:"
23721,"print('.', 'x'), # This will print `('.', 'x') `"
23722,end=''
23723,>>> print('hello')
23724,hello  # Appending '\n' automatically
23725,>>> print('world')
23726,world # With previous '\n' world comes down
23727,
23728,# The solution is:
23729,">>> print('hello', end='');print(' world'); # End with anything like end='-' or end="" "", but not '\n'"
23730,hello world # It seems to be the correct output
23731,"for i in range(1,10):"
23732,"    print(i, end='.')"
23733,\n
23734,">>> print ""hello"",; print"" world"""
23735,hello world
23736,"for i in range(1,10):"
23737,"    print ""{} ."".format(i),"
23738,"end="" """
23739,print 'hello' ;print'there'
23740,import sys
23741,import time
23742,# Keeps the initial message in buffer.
23743,"sys.stdout.write(""\rfoobar bar black sheep"")"
23744,sys.stdout.flush()
23745,# Wait 2 seconds
23746,time.sleep(2)
23747,# Replace the message with a new one.
23748,"sys.stdout.write(""\r""+'hahahahaaa             ')"
23749,sys.stdout.flush()
23750,# Finalize the new message by printing a return carriage.
23751,sys.stdout.write('\n')
23752,"import sys, os"
23753,
23754,"# Reopen standard output with ""newline=None""."
23755,"# in this mode,"
23756,"# Input:  accepts any newline character, outputs as '\n'"
23757,# Output: '\n' converts to os.linesep
23758,
23759,"sys.stdout = os.fdopen(sys.stdout.fileno(), ""w"", newline=None)"
23760,
23761,"for i in range(1,10):"
23762,    print(i)
23763,sys.__stdout__
23764,#!usr/bin/python
23765,
23766,i = 0
23767,while i<10 :
23768,"    print('.', end='')"
23769,    i = i+1
23770,python filename.py
23771,python3 filename.py
23772,"print(<expr>, <expr>, ..., <expr>, end="" "")"
23773,"""\n"""
23774,"end="""""
23775,printf
23776," for i in range (0,5):"
23777,"   print ""hi"""
23778,
23779, OUTPUT:
23780,    hi
23781,    hi
23782,    hi
23783,    hi
23784,    hi
23785,"for i in range (0,5):"
23786,"    print ""hi"","
23787,hi hi hi hi hi
23788,"def Print(*args, sep='', end='', file=None, flush=False):"
23789,"    print(*args, sep=sep, end=end, file=file, flush=flush)"
23790,*arg
23791,Print(*args)
23792,"sep='', end=''"
23793,"print('Skimming for', search_string, '\b! .001', end='')"
23794,search_string
23795,\b!
23796,search_string
23797,print()
23798,import sys
23799,
23800,page=1
23801,"search_string=input('Search for?',)"
23802,"print('Skimming for', search_string, '\b! .001', end='')"
23803,sys.stdout.flush() # the print function with an end='' won't print unless forced
23804,while page:
23805,    # some stuff…
23806,"    # search, scrub, and build bulk output list[], count items,"
23807,    # set done flag True
23808,    page=page+1 #done flag set in 'some_stuff'
23809,"    sys.stdout.write('\b\b\b.'+format(page, '03')) #<-- here's the progress bar meat"
23810,    sys.stdout.flush()
23811,"    if done: #( flag alternative to break, exit or quit)"
23812,"        print('\nSorting', item_count, 'items')"
23813,        page=0 # exits the 'while page' loop
23814,list.sort()
23815,"for item_count in range(0, items)"
23816,    print(list[item_count])
23817,
23818,#print footers here
23819,if not (len(list)==items):
23820,    print('#error_handler')
23821,"sys.stdout.write('\b\b\b.'+format(page, '03'))"
23822,sys.stdout.write()
23823,sys.stdout.flush()
23824,sys.stdout.flush()
23825,print()
23826,"print(txt, end='' )"
23827,sys.stdout.write()
23828,print()
23829,sys.stdout.write('.'); sys.stdout.flush()
23830,end
23831,sep
23832,>>> for i in range(10):
23833,"        print('.', end = """")"
23834,.........
23835,end=''
23836,for i in range(5):
23837,"  print('a',end='')"
23838,
23839,# aaaaa
23840," for i in range(0, 5): #setting the value of (i) in the range 0 to 5 "
23841,     print(i)
23842, 0    
23843, 1
23844, 2
23845, 3
23846, 4
23847," for i in range(0, 5): #setting the value of (i) in the range 0 to 5 "
23848,"     print(i, end="" "")"
23849, 0 1 2 3 4
23850," for i in range(0, 5): #setting the value of (i) in the range 0 to 5 "
23851,"     print(i, end="", "")"
23852," 0, 1, 2, 3, 4, "
23853," Note: The [for variable in range(int_1, int_2):] always prints till the variable is 1"
23854,
23855, less than it's limit. (1 less than int_2)
23856,def Print(s):
23857,    return sys.stdout.write(str(s))
23858,for i in range(10): # Or `xrange` for the Python 2 version
23859,    Print(i)
23860,0123456789
23861,"for i in xrange(0,10): print '\b.',"
23862,sys.stdout.isatty()
23863,"print('Hello',end='')"
23864,"print('Hello',end=' ')"
23865,print('world')
23866,Hello world
23867,"print('Hello','world',sep=',')"
23868,"Hello,world"
23869,"BS = u'\0008' # The Unicode point for the ""delete"" character"
23870,"for i in range(10):print(BS + "".""),"
23871,dict()
23872,dict
23873,**kwargs
23874,**kwargs
23875,OrderedDict
23876,dict
23877,OrderedDict
23878,3.6
23879,dk_entries
23880, PyDictKeyEntry
23881,dk_indices
23882,dk_entries
23883,dk_entries
23884,dk_indices
23885,dk_entries
23886,int8_t
23887,1
23888,int32_t
23889,int64_t
23890,4
23891,8
23892,32
23893,64
23894,PyDictKeyEntry
23895,dk_size
23896,2/3 * dk_size
23897,PyDictKeyEntry
23898,intX_t
23899,X
23900,2/3 * dk_size
23901,PyDictKeyEntry
23902,intX_t
23903,PyDictKeyEntry
23904,int
23905,"d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}"
23906,"entries = [['--', '--', '--'],"
23907,"           [-8522787127447073495, 'barry', 'green'],"
23908,"           ['--', '--', '--'],"
23909,"           ['--', '--', '--'],"
23910,"           ['--', '--', '--'],"
23911,"           [-9092791511155847987, 'timmy', 'red'],"
23912,"           ['--', '--', '--'],"
23913,"           [-6480567542315338377, 'guido', 'blue']]"
23914,"indices =  [None, 1, None, None, None, 0, None, 2]"
23915,"entries =  [[-9092791511155847987, 'timmy', 'red'],"
23916,"            [-8522787127447073495, 'barry', 'green'],"
23917,"            [-6480567542315338377, 'guido', 'blue']]"
23918,entries
23919,DKIX_DUMMY
23920,-2
23921,entry
23922,NULL
23923,2/3
23924,DUMMY
23925,d = {i:i for i in range(100)}
23926,.pop
23927,d[1] = 1
23928,dict
23929,dict
23930,OrderedDict
23931,dict
23932,==
23933,OrderedDict
23934,OrderedDict
23935,dicts
23936,OrderedDict
23937,dict
23938,OrderedDict
23939,dict
23940,OrderedDict
23941,dict
23942,move_to_end
23943,reversed()
23944,OrderedDict
23945,OrderedDict
23946,request.data
23947,from flask import request
23948,
23949,"@app.route('/', methods=['GET', 'POST'])"
23950,def parse_request():
23951,    data = request.data  # data is empty
23952,    # need posted data here
23953,request
23954,from flask import request
23955,request.data
23956,request.data
23957,request.args
23958,request.form
23959,request.files
23960,form
23961,enctype=multipart/form-data
23962,request.values
23963,args
23964,form
23965,args
23966,request.json
23967,application/json
23968,request.get_json(force=True)
23969,MultiDict
23970,json
23971,request.form['name']
23972,request.form.get('name')
23973,get
23974,request.form.getlist('name')
23975,getlist
23976,get
23977,request.args
23978,"search = request.args.get(""search"")"
23979,"page = request.args.get(""page"")"
23980,request.form
23981,email = request.form.get('email')
23982,password = request.form.get('password')
23983,application/json
23984,request.get_json()
23985,data = request.get_json()
23986,request.data
23987,request.form
23988,from flask import request
23989,request.data
23990,"from flask import Flask, request, jsonify"
23991,
23992,app = Flask(__name__)
23993,
23994,"@app.route('/foo', methods=['POST']) "
23995,def foo():
23996,    data = request.json
23997,    return jsonify(data)
23998,"curl -i -H ""Content-Type: application/json"" -X POST -d '{""userId"":""1"", ""username"": ""fizz bizz""}' http://localhost:5000/foo"
23999,request.get_data()
24000,request.data
24001,request.get_data(parse_form_data=True)
24002,request.form
24003,MultiDict
24004,data
24005,application/json
24006,request.get_json()
24007,None
24008,"@app.route(""/something"", methods=[""POST""])"
24009,def do_something():
24010,    data = request.get_json()
24011,request.form
24012,request.form.to_dict(flat=False)
24013,jsonify
24014,"@app.route('/form_to_json', methods=['POST'])"
24015,def form_to_json():
24016,    data = request.form.to_dict(flat=False)
24017,    return jsonify(data)
24018,"$ curl http://127.0.0.1:5000/data -d ""name=ivanleoncz&role=Software Developer"""
24019,{
24020,"  ""name"": ""ivanleoncz"", "
24021,"  ""role"": ""Software Developer"""
24022,}
24023,request.get_json()
24024,data = request.get_json()
24025,"name = data.get('name', '')"
24026,request.form
24027,"name = request.form.get('name', '')"
24028,request.args
24029,"request.args.get(""name"", """")"
24030,request.form
24031,get
24032,application/json
24033,request.get_json(force=True)
24034,"@app.route('/process_data', methods=['POST'])"
24035,def process_data():
24036,    req_data = request.get_json(force=True)
24037,    language = req_data['language']
24038,    return 'The language value is: {}'.format(language)
24039,from flask import request
24040,"name = request.args.get(""name"")"
24041,"age = request.args.get(""age"")"
24042,name = request.form.get('name')
24043,age = request.form.get('age')
24044,name = request.form['name']
24045,age = request.form['age']
24046,data = request.get_json()
24047,JSON.stringify
24048,application/json
24049,"var value_data = [1, 2, 3, 4];"
24050,
24051,$.ajax({
24052,"    type: 'POST',"
24053,"    url: '/process',"
24054,"    data: JSON.stringify(value_data),"
24055,"    contentType: 'application/json',"
24056,    success: function (response_data) {
24057,"        alert(""success"");"
24058,    }   
24059,});
24060,request.get_json()
24061,data = request.get_json()
24062,request.form
24063,request.json
24064,request.get_json
24065,request.headers
24066,request.args
24067,request.form['name']
24068,request.form.get('name')
24069,request.stream
24070,Content-Length
24071,"length = request.headers[""Content-Length""]"
24072,data = request.stream.read(length)
24073,request.get_data()
24074,"request.method == ""POST"""
24075,request.form
24076,<form>
24077,name
24078,request.form
24079,"from flask import Flask, request, render_template"
24080,
24081,app = Flask(__name__)
24082,
24083,"@app.route(""/user/add"", methods=[""GET"", ""POST""])"
24084,def add_user():
24085,"    if request.method == ""POST"":"
24086,        user = User(
24087,"            username=request.form[""username""],"
24088,"            email=request.form[""email""],"
24089,        )
24090,        db.session.add(user)
24091,        db.session.commit()
24092,"        return redirect(url_for(""index""))"
24093,
24094,"    return render_template(""add_user.html"")"
24095,"<form method=""post"">"
24096,"    <label for=""username"">Username</label>"
24097,"    <input type=""text"" name=""username"" id=""username"">"
24098,"    <label for=""email"">Email</label>"
24099,"    <input type=""email"" name=""email"" id=""email"">"
24100,"    <input type=""submit"">"
24101,</form>
24102,request.get_json()
24103,"@app.route(""/something"", methods=[""POST""])"
24104,def do_something():
24105,    result = handle(request.get_json())
24106,    return jsonify(data=result)
24107,Content-Type
24108,application/x-www-form-urlencoded
24109,request.get_json()
24110,"@app.route('/process_data', methods=['POST'])"
24111,def process_data():
24112,   req_data = request.get_json(force=True)
24113,request.form
24114,from flask import json
24115,
24116,"@ app.route('/slack/request_handler', methods=['POST'])"
24117,def request_handler():
24118,"   req_data = json.loads(request.form[""payload""])"
24119,request.data
24120,request.form
24121,request.get_data()
24122,request.data
24123,get_data(parse_form_data=True)
24124,False
24125,request.form
24126,request.get_json()
24127,request.data
24128,or
24129,def get_request_data():
24130,    return (
24131,        request.args
24132,        or request.form
24133,"        or request.get_json(force=True, silent=True)"
24134,        or request.data
24135,    )
24136,request.args
24137,get_request_data()
24138,input
24139,name
24140,request.form
24141,"@app.route('/', methods=['GET', 'POST'])"
24142,def index():
24143,    print(request.form)
24144,"    return """""""
24145,"<form method=""post"">"
24146,"    <input type=""text"">"
24147,"    <input type=""text"" id=""txt2"">"
24148,"    <input type=""text"" name=""txt3"" id=""txt3"">  "
24149,"    <input type=""submit"">"
24150,</form>
24151,""""""""
24152,"ImmutableMultiDict([('txt3', 'text 3')])"
24153,txt3
24154,name
24155,request.form
24156,"@app.route('/addData', methods=['POST'])"
24157,def add_data():
24158,     data_in = mongo.db.Data
24159,"     id = request.values.get(""id"")"
24160,"     name = request.values.get(""name"")"
24161,"     newuser = {'id' : id, 'name' : name}"
24162,"     if voter.find({'id' : id, 'name' : name}).count() > 0:"
24163,"            return ""Data Exists"""
24164,     else:
24165,            data_in.insert(newuser)
24166,"            return ""Data Added"""
24167,"Info = ""%s/%s/%s"" % (request.remote_addr, repr(request), repr(session))"
24168,from flask import request
24169,
24170,"@app.route('/', methods=['GET', 'POST'])"
24171,def parse_request():
24172,    if request.method == 'POST':
24173,       data = request.form.get('data')
24174,request.data
24175,import threading
24176,
24177,class StoppableThread(threading.Thread):
24178,"    """"""Thread class with a stop() method. The thread itself has to check"
24179,"    regularly for the stopped() condition."""""""
24180,
24181,"    def __init__(self,  *args, **kwargs):"
24182,"        super(StoppableThread, self).__init__(*args, **kwargs)"
24183,        self._stop_event = threading.Event()
24184,
24185,    def stop(self):
24186,        self._stop_event.set()
24187,
24188,    def stopped(self):
24189,        return self._stop_event.is_set()
24190,stop()
24191,join()
24192,"def _async_raise(tid, exctype):"
24193,    '''Raises an exception in the threads with id tid'''
24194,    if not inspect.isclass(exctype):
24195,"        raise TypeError(""Only types can be raised (not instances)"")"
24196,"    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),"
24197,                                                     ctypes.py_object(exctype))
24198,    if res == 0:
24199,"        raise ValueError(""invalid thread id"")"
24200,    elif res != 1:
24201,"        # ""if it returns a number greater than one, you're in trouble,"
24202,"        # and you should call it again with exc=NULL to revert the effect"""
24203,"        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)"
24204,"        raise SystemError(""PyThreadState_SetAsyncExc failed"")"
24205,
24206,class ThreadWithExc(threading.Thread):
24207,    '''A thread class that supports raising an exception in the thread from
24208,       another thread.
24209,    '''
24210,    def _get_my_tid(self):
24211,"        """"""determines this (self's) thread id"
24212,
24213,        CAREFUL: this function is executed in the context of the caller
24214,"        thread, to get the identity of the thread represented by this"
24215,        instance.
24216,"        """""""
24217,        if not self.isAlive():
24218,"            raise threading.ThreadError(""the thread is not active"")"
24219,
24220,        # do we have it cached?
24221,"        if hasattr(self, ""_thread_id""):"
24222,            return self._thread_id
24223,
24224,"        # no, look for it in the _active dict"
24225,"        for tid, tobj in threading._active.items():"
24226,            if tobj is self:
24227,                self._thread_id = tid
24228,                return tid
24229,
24230,"        # TODO: in python 2.6, there's a simpler way to do: self.ident"
24231,
24232,"        raise AssertionError(""could not determine the thread's id"")"
24233,
24234,"    def raiseExc(self, exctype):"
24235,"        """"""Raises the given exception type in the context of this thread."
24236,
24237,"        If the thread is busy in a system call (time.sleep(),"
24238,"        socket.accept(), ...), the exception is simply ignored."
24239,
24240,"        If you are sure that your exception should terminate the thread,"
24241,        one way to ensure that it works is:
24242,
24243,            t = ThreadWithExc( ... )
24244,            ...
24245,            t.raiseExc( SomeException )
24246,            while t.isAlive():
24247,                time.sleep( 0.1 )
24248,                t.raiseExc( SomeException )
24249,
24250,"        If the exception is to be caught by the thread, you need a way to"
24251,        check that your thread has caught it.
24252,
24253,        CAREFUL: this function is executed in the context of the
24254,"        caller thread, to raise an exception in the context of the"
24255,        thread represented by this instance.
24256,"        """""""
24257,"        _async_raise( self._get_my_tid(), exctype )"
24258,PyThreadState_SetAsyncExc
24259,SO_REUSEADDR
24260,Address already in use
24261,None
24262,0
24263,res != 1
24264,ctypes.c_long(tid)
24265,multiprocessing.Process
24266,p.terminate()
24267,threading.Thread
24268,multiprocessing.Process
24269,queue.Queue
24270,multiprocessing.Queue
24271,p.terminate()
24272,p
24273,multiprocessing
24274,import multiprocessing
24275,"proc = multiprocessing.Process(target=your_proc_function, args=())"
24276,proc.start()
24277,# Terminate the process
24278,proc.terminate()  # sends a SIGTERM
24279,multiprocessing
24280,logging.log
24281,multiprocessing
24282,multiprocessing
24283,multiprocessing
24284,QueueHandler
24285,if stop()
24286,import threading
24287,import time
24288,
24289,"def do_work(id, stop):"
24290,"    print(""I am thread"", id)"
24291,    while True:
24292,"        print(""I am thread {} doing something"".format(id))"
24293,        if stop():
24294,"            print(""  Exiting loop."")"
24295,            break
24296,"    print(""Thread {}, signing off"".format(id))"
24297,
24298,
24299,def main():
24300,    stop_threads = False
24301,    workers = []
24302,"    for id in range(0,3):"
24303,"        tmp = threading.Thread(target=do_work, args=(id, lambda: stop_threads))"
24304,        workers.append(tmp)
24305,        tmp.start()
24306,    time.sleep(3)
24307,    print('main: done sleeping; time to stop the threads.')
24308,    stop_threads = True
24309,    for worker in workers:
24310,        worker.join()
24311,    print('Finis.')
24312,
24313,if __name__ == '__main__':
24314,    main()
24315,print()
24316,pr()
24317,sys.stdout.flush()
24318,pr()
24319,print
24320,flush
24321,pr
24322,yourProcess.terminate()  # kill the process!
24323,TerminateProcess()
24324,multiprocessing.Event
24325,multiprocessing.Semaphore
24326,threading.Event
24327,threading.Semaphore
24328,"yourThread.daemon = True  # set the Thread as a ""daemon thread"""
24329,daemon
24330,start()
24331,daemon
24332,multiprocessing
24333,sys.exit()
24334,os.kill()
24335,PyThreadState_SetAsyncExc()
24336,ctypes
24337,PyThreadState_SetAsyncExc()
24338,import ctypes
24339,
24340,def terminate_thread(thread):
24341,"    """"""Terminates a python thread from another thread."
24342,
24343,    :param thread: a threading.Thread instance
24344,"    """""""
24345,    if not thread.isAlive():
24346,        return
24347,
24348,    exc = ctypes.py_object(SystemExit)
24349,    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
24350,"        ctypes.c_long(thread.ident), exc)"
24351,    if res == 0:
24352,"        raise ValueError(""nonexistent thread id"")"
24353,    elif res > 1:
24354,"        # """"""if it returns a number greater than one, you're in trouble,"
24355,"        # and you should call it again with exc=NULL to revert the effect"""""""
24356,"        ctypes.pythonapi.PyThreadState_SetAsyncExc(thread.ident, None)"
24357,"        raise SystemError(""PyThreadState_SetAsyncExc failed"")"
24358,KeyboardInterrupt
24359,SystemExit
24360,pthread_cleanup_push()/_pop()
24361,time.sleep()
24362,event
24363,wait()
24364,sleep()
24365,import threading
24366,
24367,class KillableThread(threading.Thread):
24368,"    def __init__(self, sleep_interval=1):"
24369,        super().__init__()
24370,        self._kill = threading.Event()
24371,        self._interval = sleep_interval
24372,
24373,    def run(self):
24374,        while True:
24375,"            print(""Do Something"")"
24376,
24377,"            # If no kill signal is set, sleep for the interval,"
24378,"            # If kill signal comes in while sleeping, immediately"
24379,            #  wake up and handle
24380,            is_killed = self._kill.wait(self._interval)
24381,            if is_killed:
24382,                break
24383,
24384,"        print(""Killing Thread"")"
24385,
24386,    def kill(self):
24387,        self._kill.set()
24388,t = KillableThread(sleep_interval=5)
24389,t.start()
24390,# Every 5 seconds it prints:
24391,#: Do Something
24392,t.kill()
24393,#: Killing Thread
24394,wait()
24395,sleep()
24396,sleep()
24397,time.sleep
24398,start()
24399,__init__()
24400,run()
24401,Thread.stop
24402,import sys
24403,import threading
24404,import time
24405,
24406,
24407,class StopThread(StopIteration):
24408,    pass
24409,
24410,"threading.SystemExit = SystemExit, StopThread"
24411,
24412,
24413,class Thread2(threading.Thread):
24414,
24415,    def stop(self):
24416,        self.__stop = True
24417,
24418,    def _bootstrap(self):
24419,        if threading._trace_hook is not None:
24420,            raise ValueError('Cannot run thread with tracing!')
24421,        self.__stop = False
24422,        sys.settrace(self.__trace)
24423,        super()._bootstrap()
24424,
24425,"    def __trace(self, frame, event, arg):"
24426,        if self.__stop:
24427,            raise StopThread()
24428,        return self.__trace
24429,
24430,
24431,class Thread3(threading.Thread):
24432,
24433,"    def _bootstrap(self, stop_thread=False):"
24434,        def stop():
24435,            nonlocal stop_thread
24436,            stop_thread = True
24437,        self.stop = stop
24438,
24439,        def tracer(*_):
24440,            if stop_thread:
24441,                raise StopThread()
24442,            return tracer
24443,        sys.settrace(tracer)
24444,        super()._bootstrap()
24445,
24446,###############################################################################
24447,
24448,
24449,def main():
24450,    test1 = Thread2(target=printer)
24451,    test1.start()
24452,    time.sleep(1)
24453,    test1.stop()
24454,    test1.join()
24455,    test2 = Thread2(target=speed_test)
24456,    test2.start()
24457,    time.sleep(1)
24458,    test2.stop()
24459,    test2.join()
24460,    test3 = Thread3(target=speed_test)
24461,    test3.start()
24462,    time.sleep(1)
24463,    test3.stop()
24464,    test3.join()
24465,
24466,
24467,def printer():
24468,    while True:
24469,        print(time.time() % 1)
24470,        time.sleep(0.1)
24471,
24472,
24473,def speed_test(count=0):
24474,    try:
24475,        while True:
24476,            count += 1
24477,    except StopThread:
24478,"        print('Count =', count)"
24479,
24480,if __name__ == '__main__':
24481,    main()
24482,Thread3
24483,Thread2
24484,self.__stop
24485,sys.settrace
24486,Thread2
24487,import threading
24488,import time
24489,import atexit
24490,
24491,def do_work():
24492,
24493,  i = 0
24494,  @atexit.register
24495,  def goodbye():
24496,"    print (""'CLEANLY' kill sub-thread with value: %s [THREAD: %s]"" %"
24497,"           (i, threading.currentThread().ident))"
24498,
24499,  while True:
24500,    print i
24501,    i += 1
24502,    time.sleep(1)
24503,
24504,t = threading.Thread(target=do_work)
24505,t.daemon = True
24506,t.start()
24507,
24508,def after_timeout():
24509,"  print ""KILL MAIN THREAD: %s"" % threading.currentThread().ident"
24510,  raise SystemExit
24511,
24512,"threading.Timer(2, after_timeout).start()"
24513,0
24514,1
24515,KILL MAIN THREAD: 140013208254208
24516,'CLEANLY' kill sub-thread with value: 2 [THREAD: 140013674317568]
24517,SystemExit
24518,after_timeout
24519,SystemExit
24520,SystemExit
24521,kill -9
24522,kill_threads = False
24523,
24524,def doSomething():
24525,    global kill_threads
24526,    while True:
24527,        if kill_threads:
24528,            thread.exit()
24529,        ......
24530,        ......
24531,
24532,"thread.start_new_thread(doSomething, ())"
24533,'Thread' object has no attribute 'exit'
24534,from ctypes import *
24535,"pthread = cdll.LoadLibrary(""libpthread-2.15.so"")"
24536,pthread.pthread_cancel(c_ulong(t.ident))
24537,Thread
24538,Modules/threadmodule.c
24539,Python/thread_pthread.h
24540,Thread.ident
24541,pthread_t
24542,pthread
24543,libpthread
24544,import ctypes 
24545,
24546,def kill_thread(thread):
24547,"    """""""
24548,    thread: a threading.Thread object
24549,"    """""""
24550,    thread_id = thread.ident
24551,"    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, ctypes.py_object(SystemExit))"
24552,    if res > 1:
24553,"        ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)"
24554,        print('Exception raise failure')
24555,PyThreadState_SetAsyncExc
24556,sleep(100)
24557,while flag:
24558,flag = False
24559,is_alive()
24560,import time
24561,from threading import Thread
24562,
24563,def doit(id=0):
24564,    doit.stop=0
24565,"    print(""start id:%d""%id)"
24566,    while 1:
24567,        time.sleep(1)
24568,"        print(""."")"
24569,        if doit.stop==id:
24570,            doit.stop=0
24571,            break
24572,"    print(""end thread %d""%id)"
24573,
24574,"t5=Thread(target=doit, args=(5,))"
24575,"t6=Thread(target=doit, args=(6,))"
24576,
24577,t5.start() ; t6.start()
24578,time.sleep(2)
24579,doit.stop =5  #kill t5
24580,time.sleep(2)
24581,doit.stop =6  #kill t6
24582,functionname.stop
24583,doit.stop
24584,"from threading import Thread, Event"
24585,
24586,class KillableThread(Thread):
24587,"    def __init__(self, sleep_interval=1, target=None, name=None, args=(), kwargs={}):"
24588,"        super().__init__(None, target, name, args, kwargs)"
24589,        self._kill = Event()
24590,        self._interval = sleep_interval
24591,        print(self._target)
24592,
24593,    def run(self):
24594,        while True:
24595,            # Call custom function with arguments
24596,            self._target(*self._args)
24597,
24598,"            # If no kill signal is set, sleep for the interval,"
24599,"            # If kill signal comes in while sleeping, immediately"
24600,            #  wake up and handle
24601,            is_killed = self._kill.wait(self._interval)
24602,            if is_killed:
24603,                break
24604,
24605,"        print(""Killing Thread"")"
24606,
24607,    def kill(self):
24608,        self._kill.set()
24609,
24610,if __name__ == '__main__':
24611,
24612,    def print_msg(msg):
24613,        print(msg)
24614,
24615,"    t = KillableThread(10, print_msg, args=(""hello world""))"
24616,    t.start()
24617,    time.sleep(6)
24618,"    print(""About to kill thread"")"
24619,    t.kill()
24620,SystemExit
24621,import threading
24622,import ctypes     
24623,
24624,"def _async_raise(tid, excobj):"
24625,"    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(excobj))"
24626,    if res == 0:
24627,"        raise ValueError(""nonexistent thread id"")"
24628,    elif res > 1:
24629,"        # """"""if it returns a number greater than one, you're in trouble, "
24630,"        # and you should call it again with exc=NULL to revert the effect"""""""
24631,"        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)"
24632,"        raise SystemError(""PyThreadState_SetAsyncExc failed"")"
24633,
24634,class Thread(threading.Thread):
24635,"    def raise_exc(self, excobj):"
24636,"        assert self.isAlive(), ""thread must be started"""
24637,"        for tid, tobj in threading._active.items():"
24638,            if tobj is self:
24639,"                _async_raise(tid, excobj)"
24640,                return
24641,
24642,"        # the thread was alive when we entered the loop, but was not found "
24643,"        # in the dict, hence it must have been already terminated. should we raise"
24644,        # an exception here? silently ignore?
24645,
24646,    def terminate(self):
24647,"        # must raise the SystemExit type, instead of a SystemExit() instance"
24648,        # due to a bug in PyThreadState_SetAsyncExc
24649,        self.raise_exc(SystemExit)
24650,"import sys, threading, time "
24651,
24652,class TraceThread(threading.Thread): 
24653,"    def __init__(self, *args, **keywords): "
24654,"        threading.Thread.__init__(self, *args, **keywords) "
24655,        self.killed = False
24656,    def start(self): 
24657,        self._run = self.run 
24658,        self.run = self.settrace_and_run
24659,        threading.Thread.start(self) 
24660,    def settrace_and_run(self): 
24661,        sys.settrace(self.globaltrace) 
24662,        self._run()
24663,"    def globaltrace(self, frame, event, arg): "
24664,        return self.localtrace if event == 'call' else None
24665,"    def localtrace(self, frame, event, arg): "
24666,        if self.killed and event == 'line': 
24667,            raise SystemExit() 
24668,        return self.localtrace 
24669,
24670,def f(): 
24671,    while True: 
24672,        print('1') 
24673,        time.sleep(2)
24674,        print('2') 
24675,        time.sleep(2)
24676,        print('3') 
24677,        time.sleep(2)
24678,
24679,t = TraceThread(target=f) 
24680,t.start() 
24681,time.sleep(2.5) 
24682,t.killed = True
24683,1
24684,2
24685,3
24686,def main():
24687,    start_time = time.perf_counter()
24688,"    t1 = ExitThread(time.sleep, (10,), debug=False)"
24689,    t1.start()
24690,    time.sleep(0.5)
24691,    t1.exit()
24692,    try:
24693,        print(t1.result_future.result())
24694,    except concurrent.futures.CancelledError:
24695,        pass
24696,    end_time = time.perf_counter()
24697,"    print(f""time cost {end_time - start_time:0.2f}"")"
24698,import concurrent.futures
24699,import threading
24700,import typing
24701,import asyncio
24702,
24703,
24704,class _WorkItem(object):
24705,"    """""" concurrent\futures\thread.py"
24706,
24707,"    """""""
24708,
24709,"    def __init__(self, future, fn, args, kwargs, *, debug=None):"
24710,        self._debug = debug
24711,        self.future = future
24712,        self.fn = fn
24713,        self.args = args
24714,        self.kwargs = kwargs
24715,
24716,    def run(self):
24717,        if self._debug:
24718,"            print(""ExitThread._WorkItem run"")"
24719,        if not self.future.set_running_or_notify_cancel():
24720,            return
24721,
24722,        try:
24723,            coroutine = None
24724,            if asyncio.iscoroutinefunction(self.fn):
24725,"                coroutine = self.fn(*self.args, **self.kwargs)"
24726,            elif asyncio.iscoroutine(self.fn):
24727,                coroutine = self.fn
24728,            if coroutine is None:
24729,"                result = self.fn(*self.args, **self.kwargs)"
24730,            else:
24731,                result = asyncio.run(coroutine)
24732,            if self._debug:
24733,"                print(""_WorkItem done"")"
24734,        except BaseException as exc:
24735,            self.future.set_exception(exc)
24736,            # Break a reference cycle with the exception 'exc'
24737,            self = None
24738,        else:
24739,            self.future.set_result(result)
24740,
24741,
24742,class ExitThread:
24743,"    """""" Like a stoppable thread"
24744,
24745,    Using coroutine for target then exit before running may cause RuntimeWarning.
24746,
24747,"    """""""
24748,
24749,"    def __init__(self, target: typing.Union[typing.Coroutine, typing.Callable] = None"
24750,"                 , args=(), kwargs={}, *, daemon=None, debug=None):"
24751,        #
24752,        self._debug = debug
24753,"        self._parent_thread = threading.Thread(target=self._parent_thread_run, name=""ExitThread_parent_thread"""
24754,"                                               , daemon=daemon)"
24755,        self._child_daemon_thread = None
24756,        self.result_future = concurrent.futures.Future()
24757,"        self._workItem = _WorkItem(self.result_future, target, args, kwargs, debug=debug)"
24758,        self._parent_thread_exit_lock = threading.Lock()
24759,        self._parent_thread_exit_lock.acquire()
24760,        self._parent_thread_exit_lock_released = False  # When done it will be True
24761,        self._started = False
24762,        self._exited = False
24763,        self.result_future.add_done_callback(self._release_parent_thread_exit_lock)
24764,
24765,    def _parent_thread_run(self):
24766,        self._child_daemon_thread = threading.Thread(target=self._child_daemon_thread_run
24767,"                                                     , name=""ExitThread_child_daemon_thread"""
24768,"                                                     , daemon=True)"
24769,        self._child_daemon_thread.start()
24770,        # Block manager thread
24771,        self._parent_thread_exit_lock.acquire()
24772,        self._parent_thread_exit_lock.release()
24773,        if self._debug:
24774,"            print(""ExitThread._parent_thread_run exit"")"
24775,
24776,"    def _release_parent_thread_exit_lock(self, _future):"
24777,        if self._debug:
24778,"            print(f""ExitThread._release_parent_thread_exit_lock {self._parent_thread_exit_lock_released} {_future}"")"
24779,        if not self._parent_thread_exit_lock_released:
24780,            self._parent_thread_exit_lock_released = True
24781,            self._parent_thread_exit_lock.release()
24782,
24783,    def _child_daemon_thread_run(self):
24784,        self._workItem.run()
24785,
24786,    def start(self):
24787,        if self._debug:
24788,"            print(f""ExitThread.start {self._started}"")"
24789,        if not self._started:
24790,            self._started = True
24791,            self._parent_thread.start()
24792,
24793,    def exit(self):
24794,        if self._debug:
24795,"            print(f""ExitThread.exit exited: {self._exited} lock_released: {self._parent_thread_exit_lock_released}"")"
24796,        if self._parent_thread_exit_lock_released:
24797,            return
24798,        if not self._exited:
24799,            self._exited = True
24800,            if not self.result_future.cancel():
24801,                if self.result_future.running():
24802,                    self.result_future.set_exception(concurrent.futures.CancelledError())
24803,my_thread = threading.Thread()
24804,my_thread.start()
24805,my_thread._Thread__stop()
24806,signal.pthread_kill
24807,"from signal import pthread_kill, SIGTSTP"
24808,from threading import Thread
24809,from itertools import count
24810,from time import sleep
24811,
24812,def target():
24813,    for num in count():
24814,        print(num)
24815,        sleep(1)
24816,
24817,thread = Thread(target=target)
24818,thread.start()
24819,sleep(5)
24820,"pthread_kill(thread.ident, SIGTSTP)"
24821,0
24822,1
24823,2
24824,3
24825,4
24826,
24827,[14]+  Stopped
24828,multiprocessing
24829,gevent
24830,processIds = []
24831,
24832,def executeRecord(command):
24833,    print(command)
24834,
24835,"    process = subprocess.Popen(command, stdout=subprocess.PIPE)"
24836,    processIds.append(process.pid)
24837,    print(processIds[0])
24838,
24839,    #Command that doesn't return by itself
24840,"    process.stdout.read().decode(""utf-8"")"
24841,    return;
24842,
24843,
24844,"def recordThread(command, timeOut):"
24845,
24846,"    thread = Thread(target=executeRecord, args=(command,))"
24847,    thread.start()
24848,    thread.join(timeOut)
24849,
24850,"    os.kill(processIds.pop(), signal.SIGINT)"
24851,
24852,    return;
24853,from threading import Thread
24854,from time import sleep
24855,
24856,def do_something():
24857,    global thread_work
24858,    while thread_work:
24859,        print('doing something')
24860,        sleep(5)
24861,    print('Thread stopped')
24862,
24863,thread_work = True
24864,Thread(target=do_something).start()
24865,sleep(5)
24866,thread_work = False
24867,from threading import *
24868,
24869,...
24870,
24871,for thread in enumerate():
24872,    if thread.isAlive():
24873,        try:
24874,            thread._Thread__stop()
24875,        except:
24876,            print(str(thread.getName()) + ' could not be terminated'))
24877,thread._Thread__delete()
24878,thread.quit()
24879,quit()
24880,thread._Thread__stop()
24881,quit()
24882,_Thread__stop()
24883,Flask
24884,Flask
24885,render_template
24886,send_file
24887,url_for
24888,Response
24889,import os.path
24890,
24891,"from flask import Flask, Response"
24892,
24893,
24894,app = Flask(__name__)
24895,app.config.from_object(__name__)
24896,
24897,
24898,def root_dir():  # pragma: no cover
24899,    return os.path.abspath(os.path.dirname(__file__))
24900,
24901,
24902,def get_file(filename):  # pragma: no cover
24903,    try:
24904,"        src = os.path.join(root_dir(), filename)"
24905,        # Figure out how flask returns static files
24906,        # Tried:
24907,        # - render_template
24908,        # - send_file
24909,        # This should not be so non-obvious
24910,        return open(src).read()
24911,    except IOError as exc:
24912,        return str(exc)
24913,
24914,
24915,"@app.route('/', methods=['GET'])"
24916,def metrics():  # pragma: no cover
24917,    content = get_file('jenkins_analytics.html')
24918,"    return Response(content, mimetype=""text/html"")"
24919,
24920,
24921,"@app.route('/', defaults={'path': ''})"
24922,@app.route('/<path:path>')
24923,def get_resource(path):  # pragma: no cover
24924,    mimetypes = {
24925,"        "".css"": ""text/css"","
24926,"        "".html"": ""text/html"","
24927,"        "".js"": ""application/javascript"","
24928,    }
24929,"    complete_path = os.path.join(root_dir(), path)"
24930,    ext = os.path.splitext(path)[1]
24931,"    mimetype = mimetypes.get(ext, ""text/html"")"
24932,    content = get_file(complete_path)
24933,"    return Response(content, mimetype=mimetype)"
24934,
24935,
24936,if __name__ == '__main__':  # pragma: no cover
24937,    app.run(port=80)
24938,/static
24939,/static/<path:filename>
24940,filename
24941,static
24942,url_for
24943,"url_for('static', filename='js/analytics.js')"
24944,send_from_directory
24945,from flask import send_from_directory
24946,
24947,@app.route('/reports/<path:path>')
24948,def send_report(path):
24949,"    return send_from_directory('reports', path)"
24950,send_file
24951,send_static_file
24952,send_from_directory
24953,BytesIO
24954,send_file
24955,send_file
24956,web
24957,"app = Flask(__name__,"
24958,"            static_url_path='', "
24959,"            static_folder='web/static',"
24960,            template_folder='web/templates')
24961,static_url_path=''
24962,/static
24963,static_folder='web/static'
24964,web/static
24965,template_folder='web/templates'
24966,"<link rel=""stylesheet"" type=""text/css"" href=""/css/bootstrap.min.css"">"
24967,flask_server.py
24968,"app = Flask(__name__, static_url_path='/static')"
24969,"<link rel=""stylesheet"" type=""text/css"" href=""/static/style.css"">"
24970,project/static/style.css
24971,static_url_path='/static'
24972,"url_for('static', filename='foo.bar')"
24973,'/static/foo.bar'
24974,url_for()
24975,send_static_file(filename)
24976,app = Flask(__name__)
24977,@app.route('/<path:path>')
24978,def static_file(path):
24979,    return app.send_static_file(path)
24980,send_static_file
24981,@app.route('/projects')
24982,def projects():
24983,"    return render_template(""projects.html"", title = 'Projects')"
24984,"<script src=""{{ url_for('static', filename='styles/dist/js/bootstrap.js') }}""></script>"
24985,"from flask import Flask, request"
24986,"app = Flask(__name__, static_url_path='')"
24987,
24988,@app.route('/index/')
24989,def root():
24990,    return app.send_static_file('index.html')
24991,
24992,if __name__ == '__main__':
24993,  app.run(debug=True)
24994,<!DOCTYPE html>
24995,<html>
24996,<head>
24997,    <title>Hello World!</title>
24998,</head>
24999,<body>
25000,    <div>
25001,         <p>
25002,            This is a test.
25003,         </p>
25004,    </div>
25005,</body>
25006,</html>
25007,<projectpath>
25008,.py
25009,<projectpath>\static
25010,html
25011,"app.run(debug=True, host='0.0.0.0')"
25012,@app.route('/<path:path>')
25013,def static_file(path):
25014,    return app.send_static_file(path)
25015,BlackMamba
25016,backend/
25017,|
25018,|------ui/
25019,"|      |------------------build/          <--'static' folder, constructed by Grunt"
25020,|      |--<proj           |----vendors/   <-- angular.js and others here
25021,|      |--     folders>   |----src/       <-- your js
25022,|                         |----index.html <-- your SPA entrypoint 
25023,|------<proj
25024,|------     folders>
25025,|
25026,|------view.py  <-- Flask app here
25027,...
25028,"root = os.path.join(os.path.dirname(os.path.abspath(__file__)), ""ui"", ""build"")"
25029,
25030,"@app.route('/<path:path>', methods=['GET'])"
25031,def static_proxy(path):
25032,"    return send_from_directory(root, path)"
25033,
25034,
25035,"@app.route('/', methods=['GET'])"
25036,def redirect_to_index():
25037,"    return send_from_directory(root, 'index.html')"
25038,...
25039,"app = Flask(__name__, static_folder=""your path to static"")"
25040,"<link href=""{{ url_for('static', filename='vendor/bootstrap/css/bootstrap.min.css') }}"" rel=""stylesheet"">"
25041,from server.AppStarter import AppStarter
25042,import os
25043,
25044,"static_folder_root = os.path.join(os.path.dirname(os.path.abspath(__file__)), ""client"")"
25045,
25046,app = AppStarter()
25047,app.register_routes_to_resources(static_folder_root)
25048,app.run(__name__)
25049,"from flask import Flask, send_from_directory"
25050,"from flask_restful import Api, Resource"
25051,from server.ApiResources.TodoList import TodoList
25052,from server.ApiResources.Todo import Todo
25053,
25054,
25055,class AppStarter(Resource):
25056,    def __init__(self):
25057,        self._static_files_root_folder_path = ''  # Default is current folder
25058,"        self._app = Flask(__name__)  # , static_folder='client', static_url_path='')"
25059,        self._api = Api(self._app)
25060,
25061,"    def _register_static_server(self, static_files_root_folder_path):"
25062,        self._static_files_root_folder_path = static_files_root_folder_path
25063,"        self._app.add_url_rule('/<path:file_relative_path_to_root>', 'serve_page', self._serve_page, methods=['GET'])"
25064,"        self._app.add_url_rule('/', 'index', self._goto_index, methods=['GET'])"
25065,
25066,"    def register_routes_to_resources(self, static_files_root_folder_path):"
25067,
25068,        self._register_static_server(static_files_root_folder_path)
25069,"        self._api.add_resource(TodoList, '/todos')"
25070,"        self._api.add_resource(Todo, '/todos/<todo_id>')"
25071,
25072,    def _goto_index(self):
25073,"        return self._serve_page(""index.html"")"
25074,
25075,"    def _serve_page(self, file_relative_path_to_root):"
25076,"        return send_from_directory(self._static_files_root_folder_path, file_relative_path_to_root)"
25077,
25078,"    def run(self, module_name):"
25079,        if module_name == '__main__':
25080,            self._app.run(debug=True)
25081,"from flask import Flask, render_template"
25082,app = Flask(__name__)
25083,
25084,"@app.route(""/"")"
25085,def index():
25086,"   return render_template(""index.html"")"
25087,
25088,if __name__ == '__main__':
25089,   app.run(debug = True)
25090,<!DOCTYPE html>
25091,<html>
25092,<head>
25093,    <title>Python Web Application</title>
25094,</head>
25095,<body>
25096,    <div>
25097,         <p>
25098,            Welcomes You!!
25099,         </p>
25100,    </div>
25101,</body>
25102,</html>
25103,-demo.py
25104,-templates/index.html
25105,render_template
25106,redirect
25107,url_for
25108,"from flask import redirect, url_for"
25109,
25110,"@app.route('/', methods=['GET'])"
25111,def metrics():
25112,"    return redirect(url_for('static', filename='jenkins_analytics.html'))"
25113,from flask import Flask
25114,app = Flask(__name__)
25115,
25116,@app.route('/loading/')
25117,def hello_world():
25118,    data = open('sample.html').read()    
25119,    return data
25120,
25121,if __name__ == '__main__':
25122,    app.run(host='0.0.0.0')
25123,index.html
25124,static_url_path
25125,static_folder
25126,import os
25127,"from flask import Flask, send_from_directory"
25128,from flask.helpers import safe_join
25129,
25130,app = Flask(__name__)
25131,"static = safe_join(os.path.dirname(__file__), 'static')"
25132,
25133,@app.route('/')
25134,def _home():
25135,"  return send_from_directory(static, 'index.html')"
25136,
25137,@app.route('/<path:path>')
25138,def _static(path):
25139,"  if os.path.isdir(safe_join(static, path)):"
25140,"    path = os.path.join(path, 'index.html')"
25141,"  return send_from_directory(static, path)"
25142,send_file
25143,@app.route('/ApiName')
25144,def ApiFunc():
25145,    try:
25146,        return send_file('some-other-directory-than-root/your-file.extension')
25147,    except Exception as e:
25148,        logging.info(e.args[0])```
25149,/Main Folder
25150,/Main Folder/templates/foo.html
25151,/Main Folder/static/foo.css
25152,/Main Folder/application.py(flask script)
25153,"from flask import Flask, render_template"
25154,
25155,app = Flask(__name__)
25156,
25157,"@app.route(""/"")"
25158,def login():
25159,"    return render_template(""login.html"")"
25160,<!DOCTYPE html>
25161,<html>
25162,    <head>
25163,        <title>Project(1)</title>
25164,"        <link rel=""stylesheet"" href=""/static/styles.css"">"
25165,     </head>
25166,    <body>
25167,        <header>
25168,"            <div class=""container"">"
25169,                <nav>
25170,"                    <a class=""title"" href="""">Kamook</a>"
25171,"                    <a class=""text"" href="""">Sign Up</a>"
25172,"                    <a class=""text"" href="""">Log In</a>"
25173,                </nav>
25174,            </div>
25175,        </header>  
25176,        {% block body %}
25177,        {% endblock %}
25178,    </body>
25179,</html>
25180,"{% extends ""layout.html"" %}"
25181,
25182,{% block body %}
25183,"    <div class=""col"">"
25184,"        <input type=""text"" name=""username"" placeholder=""Username"" required>"
25185,"        <input type=""password"" name=""password"" placeholder=""Password"" required>"
25186,"        <input type=""submit"" value=""Login"">"
25187,    </div>
25188,{% endblock %}
25189,"url_for('static', filename = 'name_of_file')"
25190,"<link rel=""stylesheet"" href=""{{url_for('static', filename='borders.css')}}"" />"
25191,.html
25192,.js
25193,.css
25194,routes
25195,render_template()
25196,templates
25197,.js
25198,app.open_resource()
25199,with app.open_resource('/static/path/yourfile'):
25200,      #code to read the file and do something
25201,static -
25202,       |_ templates
25203,       |_ css
25204,       |_javascript
25205,       |_images
25206,import os
25207,"from flask import Flask, render_template, send_from_directory"
25208,app = Flask(__name__)
25209,
25210,
25211,"root = os.path.join(os.path.dirname(os.path.abspath(__file__)), ""whereyourfilesare"")"
25212,
25213,"@app.route('/', methods=['GET'])"
25214,def main(request):
25215,    path = request.path
25216,    if (path == '/'):
25217,"        return send_from_directory(root, 'index.html')"
25218,    else:
25219,"        return send_from_directory(root, path[1:])"
25220,"from flask import Flask, request, render_template"
25221,from flask.json import JSONEncoder
25222,
25223,"app = Flask(__name__, template_folder='static')"
25224,
25225,
25226,@app.route('/<path:path>')
25227,def serve_static_file(path):
25228,"    # In my case, only html files are having the template code inside them, like include."
25229,    if path.endswith('.html'):
25230,        return render_template(path)
25231,    # Serve all other files from the static folder directly.
25232,    return app.send_static_file(path)
25233,@app.route('/ads.txt')
25234,def send_adstxt():
25235,"    return send_from_directory(app.static_folder, 'ads.txt')"
25236,list(dict.fromkeys(items))
25237,def f7(seq):
25238,    seen = set()
25239,    seen_add = seen.add
25240,    return [x for x in seq if not (x in seen or seen_add(x))]
25241,seen.add
25242,seen_add
25243,seen.add
25244,seen.add
25245,seen.add
25246,seen.add()
25247,None
25248,or
25249,seen.add
25250,dis.dis(f)
25251,LOAD_ATTR
25252,add
25253,seen_add
25254,seen_add = seen.add
25255,dict
25256,collections.OrderedDict
25257,">>> items = [1, 2, 0, 1, 3, 2]"
25258,>>> list(dict.fromkeys(items))  # Or [*dict.fromkeys(items)] if you prefer
25259,"[1, 2, 0, 3]"
25260,list(set(items))
25261,dict
25262,dict.fromkeys
25263,list(set(items))
25264,set
25265,unique_everseen
25266,more_itertools
25267,OrderedDict
25268,OrderedDict.fromkeys
25269,OrderedDict
25270,dict
25271,>>> from collections import OrderedDict
25272,">>> items = [1, 2, 0, 1, 3, 2]"
25273,>>> list(OrderedDict.fromkeys(items))
25274,"[1, 2, 0, 3]"
25275,more_itertools
25276,pip install more_itertools
25277,unique_everseen
25278,not seen.add
25279,>>> from more_itertools import unique_everseen
25280,">>> items = [1, 2, 0, 1, 3, 2]"
25281,>>> list(unique_everseen(items))
25282,"[1, 2, 0, 3]"
25283,unique_everseen
25284,"def unique_everseen(iterable, key=None):"
25285,"    ""List unique elements, preserving order. Remember all elements ever seen."""
25286,    # unique_everseen('AAAABBBCCDAABBB') --> A B C D
25287,"    # unique_everseen('ABBCcAD', str.lower) --> A B C D"
25288,    seen = set()
25289,    seen_add = seen.add
25290,    if key is None:
25291,"        for element in filterfalse(seen.__contains__, iterable):"
25292,            seen_add(element)
25293,            yield element
25294,    else:
25295,        for element in iterable:
25296,            k = key(element)
25297,            if k not in seen:
25298,                seen_add(k)
25299,                yield element
25300,itertools
25301,iterable
25302,O(n²)
25303,O(n)
25304,unique_everseen
25305,set
25306,list
25307,unique_everseen
25308,more_itertools
25309,set
25310,seen = set()
25311,[x for x in seq if x not in seen and not seen.add(x)]
25312, not seen.add(x)
25313,set.add
25314,None
25315,not None
25316,True
25317,O(n)
25318,unique_everseen
25319,O(n²)
25320,TypeError
25321,seen = set(seq)
25322,>>> list(dict.fromkeys('abracadabra'))
25323,"['a', 'b', 'r', 'c', 'd']"
25324,OrderedDict
25325,>>> from collections import OrderedDict
25326,>>> list(OrderedDict.fromkeys('abracadabra'))
25327,"['a', 'b', 'r', 'c', 'd']"
25328,set()
25329,[*dict.fromkeys('abracadabra')]
25330,list(...)
25331,LOAD_GLOBAL
25332,tuple
25333,args
25334,NULL
25335,kwargs
25336,dict
25337,__new__
25338,__init__
25339,list()
25340,import pandas as pd
25341,
25342,"my_list = [0, 1, 2, 3, 4, 1, 2, 3, 5]"
25343,
25344,>>> pd.Series(my_list).drop_duplicates().tolist()
25345,# Output:
25346,"# [0, 1, 2, 3, 4, 5]"
25347,more_itertools.unique_everseen
25348,OrderedDict
25349,">>> lst = [1, 2, 1, 3, 3, 2, 4]"
25350,>>> list(dict.fromkeys(lst))
25351,"[1, 2, 3, 4]"
25352,"sequence = ['1', '2', '3', '3', '6', '4', '5', '6']"
25353,unique = []
25354,[unique.append(item) for item in sequence if item not in unique]
25355,"['1', '2', '3', '6', '4', '5']"
25356,n^2
25357,None
25358,for
25359,from itertools import groupby
25360,"[ key for key,_ in groupby(sortedList)]"
25361,"list1 = ['b','c','d','b','c','a','a']    "
25362,list2 = list(set(list1))    
25363,list2.sort(key=list1.index)    
25364,print list2
25365,"list1 = ['b','c','d','b','c','a','a']  "
25366,"list2 = sorted(set(list1),key=list1.index)  "
25367,print list2 
25368,"list1 = ['b','c','d','b','c','a','a']    "
25369,list2 = []    
25370,for i in list1:    
25371,    if not i in list2:  
25372,        list2.append(i)`    
25373,print list2
25374,"list1 = ['b','c','d','b','c','a','a']    "
25375,list2 = []    
25376,[list2.append(i) for i in list1 if not i in list2]    
25377,print list2 
25378,iteration_utilities.unique_everseen
25379,>>> from iteration_utilities import unique_everseen
25380,">>> lst = [1,1,1,2,3,2,2,2,1,3,4]"
25381,
25382,>>> list(unique_everseen(lst))
25383,"[1, 2, 3, 4]"
25384,OrderedDict.fromkeys
25385,f7
25386,more_itertools.unique_everseen
25387,%matplotlib notebook
25388,
25389,from iteration_utilities import unique_everseen
25390,from collections import OrderedDict
25391,from more_itertools import unique_everseen as mi_unique_everseen
25392,
25393,def f7(seq):
25394,    seen = set()
25395,    seen_add = seen.add
25396,    return [x for x in seq if not (x in seen or seen_add(x))]
25397,
25398,def iteration_utilities_unique_everseen(seq):
25399,    return list(unique_everseen(seq))
25400,
25401,def more_itertools_unique_everseen(seq):
25402,    return list(mi_unique_everseen(seq))
25403,
25404,def odict(seq):
25405,    return list(OrderedDict.fromkeys(seq))
25406,
25407,from simple_benchmark import benchmark
25408,
25409,"b = benchmark([f7, iteration_utilities_unique_everseen, more_itertools_unique_everseen, odict],"
25410,"              {2**i: list(range(2**i)) for i in range(1, 20)},"
25411,              'list size (no duplicates)')
25412,b.plot()
25413,import random
25414,
25415,"b = benchmark([f7, iteration_utilities_unique_everseen, more_itertools_unique_everseen, odict],"
25416,"              {2**i: [random.randint(0, 2**(i-1)) for _ in range(2**i)] for i in range(1, 20)},"
25417,              'list size (lots of duplicates)')
25418,b.plot()
25419,"b = benchmark([f7, iteration_utilities_unique_everseen, more_itertools_unique_everseen, odict],"
25420,"              {2**i: [1]*(2**i) for i in range(1, 20)},"
25421,              'list size (only duplicates)')
25422,b.plot()
25423,iteration_utilities.unique_everseen
25424,iteration_utilities.unique_everseen
25425,O(n*n)
25426,O(n)
25427,">>> lst = [{1}, {1}, {2}, {1}, {3}]"
25428,
25429,>>> list(unique_everseen(lst))
25430,"[{1}, {2}, {3}]"
25431,seen_add = seen.add
25432,dict.fromkeys()
25433,ordereddict.fromkeys
25434,itertools
25435,seen
25436,key
25437,seen.add
25438,f7
25439,ifilterfalse
25440,ifilterfalse
25441,f7
25442,f7
25443,append
25444,yield
25445,list
25446,more-iterools
25447,key
25448,def unique(iterable):
25449,    seen = set()
25450,    seen_add = seen.add
25451,"    for element in itertools.ifilterfalse(seen.__contains__, iterable):"
25452,        seen_add(element)
25453,        yield element
25454,more-itertools
25455,from more_itertools import unique_everseen
25456,list(unique_everseen(items))
25457,def f7_noHash(seq)
25458,    seen = set()
25459,    return [ x for x in seq if str( x ) not in seen and not seen.add( str( x ) )]
25460,">>> l = [5, 6, 6, 1, 1, 2, 2, 3, 4]"
25461,">>> reduce(lambda r, v: v in r[1] and r or (r[0].append(v) or r[1].add(v)) or r, l, ([], set()))[0]"
25462,"[5, 6, 1, 2, 3, 4]"
25463,"default = (list(), set())"
25464,# use list to keep order
25465,# use set to make lookup faster
25466,
25467,"def reducer(result, item):"
25468,    if item not in result[1]:
25469,        result[0].append(item)
25470,        result[1].add(item)
25471,    return result
25472,
25473,">>> reduce(reducer, l, default)[0]"
25474,"[5, 6, 1, 2, 3, 4]"
25475,"list1 = [""hello"", "" "", ""w"", ""o"", ""r"", ""l"", ""d""]"
25476,"sorted(set(list1 ), key=list1.index)"
25477,"[""hello"", "" "", ""w"", ""o"", ""r"", ""l"", ""d""]"
25478,pandas.unique
25479,>>> import pandas as pd
25480,">>> lst = [1, 2, 1, 3, 3, 2, 4]"
25481,>>> pd.unique(lst)
25482,"array([1, 2, 3, 4])"
25483,tolist
25484,list(pd.unique(a))
25485,pd.unique(lst).tolist()
25486,nub
25487,def unique(lst):
25488,"    return [] if lst==[] else [lst[0]] + unique(filter(lambda x: x!= lst[0], lst[1:]))"
25489,"In [118]: unique([1,5,1,1,4,3,4])"
25490,"Out[118]: [1, 5, 4, 3]"
25491,"In [122]: %timeit unique(np.random.randint(5, size=(1)))"
25492,"10000 loops, best of 3: 25.3 us per loop"
25493,
25494,"In [123]: %timeit unique(np.random.randint(5, size=(10)))"
25495,"10000 loops, best of 3: 42.9 us per loop"
25496,
25497,"In [124]: %timeit unique(np.random.randint(5, size=(100)))"
25498,"10000 loops, best of 3: 132 us per loop"
25499,
25500,"In [125]: %timeit unique(np.random.randint(5, size=(1000)))"
25501,"1000 loops, best of 3: 1.05 ms per loop"
25502,
25503,"In [126]: %timeit unique(np.random.randint(5, size=(10000)))"
25504,"100 loops, best of 3: 11 ms per loop"
25505,import operator
25506,"def unique(lst, cmp_op=operator.ne):"
25507,"    return [] if lst==[] else [lst[0]] + unique(filter(lambda x: cmp_op(x, lst[0]), lst[1:]), cmp_op)"
25508,"def test_round(x,y):"
25509,    return round(x) != round(y)
25510,"In [6]: unique([1.2, 5, 1.9, 1.1, 4.2, 3, 4.8], test_round)"
25511,"Out[6]: [1.2, 5, 1.9, 4.2, 3]"
25512,filter
25513,def unique(my_list): 
25514,    return [x for x in my_list if x not in locals()['_[1]']]
25515,"l1 = [1, 2, 3, 4, 1, 2, 3, 4, 5]"
25516,l2 = [x for x in l1 if x not in locals()['_[1]']]
25517,print l2
25518,"[1, 2, 3, 4, 5]"
25519,seen = set()
25520,[x for x in seq if not (x in seen or seen.add(x))]
25521,seen = set()
25522,[x for x in seq if x not in seen and not seen.add(x)]
25523,None
25524,seen.add(x)
25525,x not in seen
25526,seen.add(x)
25527,set
25528,set.add
25529,set
25530,set
25531,seen = set()
25532,[x for x in seq if len(seen) < len(seen.add(x) or seen)]
25533,"reduce(lambda x, y: x + y if y[0] not in x else x, map(lambda x: [x],lst))"
25534,from functools import reduce
25535,"mylist = [x for i,x in enumerate(mylist) if x not in mylist[i+1:]]"
25536,O(n)
25537,O(n^2)
25538,[l[i] for i in range(len(l)) if l.index(l[i]) == i]
25539,"i,e in enumerate(l)"
25540,l[i] for i in range(len(l))
25541,_sorted_
25542,numpy
25543,"b = np.array([1,3,3, 8, 12, 12,12])    "
25544,"numpy.hstack([b[0], [x[0] for x in zip(b[1:], b[:-1]) if x[0]!=x[1]]])"
25545,"array([ 1,  3,  8, 12])"
25546,"l = [1,2,2,3,3,...]"
25547,n = []
25548,n.extend(ele for ele in l if ele not in set(n))
25549,extend
25550,set(n)
25551,ele in n
25552,def uniquefy_list(a):
25553,    return uniquefy_list(a[1:]) if a[0] in a[1:] else [a[0]]+uniquefy_list(a[1:]) if len(a)>1 else [a[0]]
25554,# for hashable sequence
25555,def remove_duplicates(items):
25556,    seen = set()
25557,    for item in items:
25558,        if item not in seen:
25559,            yield item
25560,            seen.add(item)
25561,
25562,"a = [1, 5, 2, 1, 9, 1, 5, 10]"
25563,list(remove_duplicates(a))
25564,"# [1, 5, 2, 9, 10]"
25565,
25566,
25567,
25568,# for unhashable sequence
25569,"def remove_duplicates(items, key=None):"
25570,    seen = set()
25571,    for item in items:
25572,        val = item if key is None else key(item)
25573,        if val not in seen:
25574,            yield item
25575,            seen.add(val)
25576,
25577,"a = [ {'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 1, 'y': 2}, {'x': 2, 'y': 4}]"
25578,"list(remove_duplicates(a, key=lambda d: (d['x'],d['y'])))"
25579,"# [{'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 2, 'y': 4}]"
25580,"x = [1, 2, 1, 3, 1, 4]"
25581,
25582,# brute force method
25583,arr = []
25584,for i in x:
25585,  if not i in arr:
25586,"    arr.insert(x[i],i)"
25587,
25588,# recursive method
25589,tmp = []
25590,def remove_duplicates(j=0):
25591,    if j < len(x):
25592,      if not x[j] in tmp:
25593,        tmp.append(x[j])
25594,      i = j+1  
25595,      remove_duplicates(i)
25596,
25597,      
25598,
25599,remove_duplicates()
25600,"values_non_duplicated = [value for index, value in enumerate(values) if value not in values[ : index]]"
25601,pandas
25602,pandas.Series.drop_duplicates
25603,    import pandas as pd
25604,    import numpy as np
25605,
25606,    uniquifier = lambda alist: pd.Series(alist).drop_duplicates().tolist()
25607,
25608,    # from the chosen answer 
25609,    def f7(seq):
25610,        seen = set()
25611,        seen_add = seen.add
25612,        return [ x for x in seq if not (x in seen or seen_add(x))]
25613,
25614,"    alist = np.random.randint(low=0, high=1000, size=10000).tolist()"
25615,
25616,    print uniquifier(alist) == f7(alist)  # True
25617,    In [104]: %timeit f7(alist)
25618,"    1000 loops, best of 3: 1.3 ms per loop"
25619,    In [110]: %timeit uniquifier(alist)
25620,"    100 loops, best of 3: 4.39 ms per loop"
25621,def deduplicate(l):
25622,    count = {}
25623,"    (read,write) = (0,0)"
25624,    while read < len(l):
25625,        if l[read] in count:
25626,            read += 1
25627,            continue
25628,        count[l[read]] = True
25629,        l[write] = l[read]
25630,        read += 1
25631,        write += 1
25632,    return l[0:write]
25633,"text = ""ask not what your country can do for you ask what you can do for your country"""
25634,"sentence = text.split("" "")"
25635,"noduplicates = [(sentence[i]) for i in range (0,len(sentence)) if sentence[i] not in sentence[:i]]"
25636,print(noduplicates)
25637,"['ask', 'not', 'what', 'your', 'country', 'can', 'do', 'for', 'you']"
25638,del
25639,"for i in range(len(l)-1,0,-1): "
25640,    if l[i] in l[:i]: del l[i] 
25641,"In [91]: from random import randint, seed                                                                                            "
25642,"In [92]: seed('20080808') ; l = [randint(1,6) for _ in range(12)] # Beijing Olympics                                                                 "
25643,"In [93]: for i in range(len(l)-1,0,-1): "
25644,    ...:     print(l) 
25645,"    ...:     print(i, l[i], l[:i], end='') "
25646,    ...:     if l[i] in l[:i]: 
25647,"    ...:          print( ': remove', l[i]) "
25648,    ...:          del l[i] 
25649,    ...:     else: 
25650,    ...:          print() 
25651,    ...: print(l)
25652,"[6, 5, 1, 4, 6, 1, 6, 2, 2, 4, 5, 2]"
25653,"11 2 [6, 5, 1, 4, 6, 1, 6, 2, 2, 4, 5]: remove 2"
25654,"[6, 5, 1, 4, 6, 1, 6, 2, 2, 4, 5]"
25655,"10 5 [6, 5, 1, 4, 6, 1, 6, 2, 2, 4]: remove 5"
25656,"[6, 5, 1, 4, 6, 1, 6, 2, 2, 4]"
25657,"9 4 [6, 5, 1, 4, 6, 1, 6, 2, 2]: remove 4"
25658,"[6, 5, 1, 4, 6, 1, 6, 2, 2]"
25659,"8 2 [6, 5, 1, 4, 6, 1, 6, 2]: remove 2"
25660,"[6, 5, 1, 4, 6, 1, 6, 2]"
25661,"7 2 [6, 5, 1, 4, 6, 1, 6]"
25662,"[6, 5, 1, 4, 6, 1, 6, 2]"
25663,"6 6 [6, 5, 1, 4, 6, 1]: remove 6"
25664,"[6, 5, 1, 4, 6, 1, 2]"
25665,"5 1 [6, 5, 1, 4, 6]: remove 1"
25666,"[6, 5, 1, 4, 6, 2]"
25667,"4 6 [6, 5, 1, 4]: remove 6"
25668,"[6, 5, 1, 4, 2]"
25669,"3 4 [6, 5, 1]"
25670,"[6, 5, 1, 4, 2]"
25671,"2 1 [6, 5]"
25672,"[6, 5, 1, 4, 2]"
25673,1 5 [6]
25674,"[6, 5, 1, 4, 2]"
25675,
25676,In [94]:                                                                                                                             
25677,l[:] = <one of the the faster methods>
25678,a=[1]; b=a; a[:]=[2]
25679,b==[2]
25680,True
25681,Fruit   Date      Name  Number
25682,Apples  10/6/2016 Bob    7
25683,Apples  10/6/2016 Bob    8
25684,Apples  10/6/2016 Mike   9
25685,Apples  10/7/2016 Steve 10
25686,Apples  10/7/2016 Bob    1
25687,Oranges 10/7/2016 Bob    2
25688,Oranges 10/6/2016 Tom   15
25689,Oranges 10/6/2016 Mike  57
25690,Oranges 10/6/2016 Bob   65
25691,Oranges 10/7/2016 Tony   1
25692,Grapes  10/7/2016 Bob    1
25693,Grapes  10/7/2016 Tom   87
25694,Grapes  10/7/2016 Bob   22
25695,Grapes  10/7/2016 Bob   12
25696,Grapes  10/7/2016 Tony  15
25697,Name
25698,Fruit
25699,Fruit
25700,Name
25701,"Bob,Apples,16"
25702,Name
25703,Fruit
25704,GroupBy.sum
25705,"df.groupby(['Fruit','Name']).sum()"
25706,
25707,Out[31]: 
25708,               Number
25709,Fruit   Name         
25710,Apples  Bob        16
25711,        Mike        9
25712,        Steve      10
25713,Grapes  Bob        35
25714,        Tom        87
25715,        Tony       15
25716,Oranges Bob        67
25717,        Mike       57
25718,        Tom        15
25719,        Tony        1
25720,Number
25721,"df.groupby(['Name', 'Fruit'])['Number'].agg('sum')"
25722,Series
25723,GroupBy
25724,DataFrame
25725,'Number'
25726,"df.groupby(['Name', 'Fruit'])[['Number']].agg('sum')"
25727,Fruit
25728,Name
25729,reset_index()
25730,Fruit
25731,Name
25732,"df.groupby(['Fruit','Name'])['Number'].sum().reset_index()"
25733,
25734,Fruit   Name       Number
25735,Apples  Bob        16
25736,Apples  Mike        9
25737,Apples  Steve      10
25738,Grapes  Bob        35
25739,Grapes  Tom        87
25740,Grapes  Tony       15
25741,Oranges Bob        67
25742,Oranges Mike       57
25743,Oranges Tom        15
25744,Oranges Tony        1
25745,"df.groupby(['Fruit','Name'])['Number'].sum()"
25746,
25747,               Number
25748,Fruit   Name         
25749,Apples  Bob        16
25750,        Mike        9
25751,        Steve      10
25752,Grapes  Bob        35
25753,        Tom        87
25754,        Tony       15
25755,Oranges Bob        67
25756,        Mike       57
25757,        Tom        15
25758,        Tony        1
25759,pivot
25760,"df.groupby(['Fruit','Name'],as_index = False).sum().pivot('Fruit','Name').fillna(0)"
25761,
25762,
25763,
25764,Name    Bob     Mike    Steve   Tom    Tony
25765,Fruit                   
25766,Apples  16.0    9.0     10.0    0.0     0.0
25767,Grapes  35.0    0.0     0.0     87.0    15.0
25768,Oranges 67.0    57.0    0.0     15.0    1.0
25769,"df.groupby(['Fruit','Name'])['Number'].sum()"
25770,"df.groupby(['att1', 'att2']).agg({'att1': ""count"", 'att3': ""sum"",'att4': 'mean'})"
25771,"df.groupby(['Name', 'Fruit']).agg({'Number': ""sum""})"
25772,groupby
25773,index
25774,sum
25775,level
25776,"df.set_index(['Fruit','Name']).sum(level=[0,1])"
25777,Out[175]: 
25778,               Number
25779,Fruit   Name         
25780,Apples  Bob        16
25781,        Mike        9
25782,        Steve      10
25783,Oranges Bob        67
25784,        Tom        15
25785,        Mike       57
25786,        Tony        1
25787,Grapes  Bob        35
25788,        Tom        87
25789,        Tony       15
25790,Number
25791,sum
25792,"df['Number'] = df.groupby(['Fruit', 'Name'])['Number'].transform('sum')"
25793,"df = df.drop_duplicates(subset=['Fruit', 'Name']).drop('Date', 1)"
25794,Fruit
25795,Name
25796,Date
25797,1
25798,0
25799,1
25800,# print(df)
25801,
25802,      Fruit   Name  Number
25803,0    Apples    Bob      16
25804,2    Apples   Mike       9
25805,3    Apples  Steve      10
25806,5   Oranges    Bob      67
25807,6   Oranges    Tom      15
25808,7   Oranges   Mike      57
25809,9   Oranges   Tony       1
25810,10   Grapes    Bob      35
25811,11   Grapes    Tom      87
25812,14   Grapes   Tony      15
25813,
25814,# You could achieve the same result with functions discussed by others: 
25815,"# print(df.groupby(['Fruit', 'Name'], as_index=False)['Number'].sum())"
25816,"# print(df.groupby(['Fruit', 'Name'], as_index=False)['Number'].agg('sum'))"
25817,sum
25818,groupby()[].sum()
25819,"df.sql('SELECT fruit, sum(number) GROUP BY fruit')"
25820,Total Number
25821,Total
25822,Number
25823,"df.groupby(['Fruit', 'Name'], as_index=False).agg(**{'Total Number': ('Number', 'sum')})"
25824,"df.groupby(['Fruit', 'Name'], as_index=False).agg(Total=('Number', 'sum'))"
25825,"SELECT Fruit, Name, sum(Number) AS Total"
25826,FROM df 
25827,"GROUP BY Fruit, Name"
25828,pandasql
25829,#! pip install pandasql
25830,from pandasql import sqldf
25831,"sqldf("""""""
25832,"SELECT Fruit, Name, sum(Number) AS Total"
25833,FROM df 
25834,"GROUP BY Fruit, Name"
25835,""""""")"
25836,[x ** 2 for x in range(10)]
25837,"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
25838,>>> l = [] 
25839,>>> for x in range(10):
25840,...     l.append(x**2)
25841,>>> l
25842,"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
25843,map()
25844,lambda
25845,">>> list(map(lambda x: x**2, range(10)))"
25846,"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
25847,>>> [x**2 for x in range(10)]
25848,"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
25849,x
25850,x**2
25851,x
25852,">>> [x.strip() for x in ('foo\n', 'bar\n', 'baz\n')]"
25853,"['foo', 'bar', 'baz']"
25854,x
25855,">>> [int(x) for x in ('1', '2', '3')]"
25856,"[1, 2, 3]"
25857,x
25858,dict
25859,">>> d = {'foo': '10', 'bar': '20', 'baz': '30'}"
25860,">>> [d[x] for x in ['foo', 'baz']]"
25861,"['10', '30']"
25862,">>> d = {'foo': '10', 'bar': '20', 'baz': '30'}"
25863,">>> [int(d[x].rstrip('0')) for x in ['foo', 'baz']]"
25864,"[1, 3]"
25865,if
25866,if...else
25867,range(10)
25868,>>> l = []
25869,>>> for x in range(10):
25870,...     if x%2:
25871,...         l.append(x)
25872,>>> l
25873,"[1, 3, 5, 7, 9]"
25874,>>> [x for x in range(10) if x%2]
25875,"[1, 3, 5, 7, 9]"
25876,if...else
25877,if ... else ...
25878,x
25879,range(10)
25880,>>> [i if i%2 != 0 else None for i in range(10)]
25881,"[None, 1, None, 3, None, 5, None, 7, None, 9]"
25882,for
25883,">>> [i for x in [[1, 2, 3], [4, 5, 6]] for i in x]"
25884,"[1, 2, 3, 4, 5, 6]"
25885,
25886,">>> [j for x in [[[1, 2], [3]], [[4, 5], [6]]] for i in x for j in i]"
25887,"[1, 2, 3, 4, 5, 6]"
25888,"for x in [[1, 2, 3], [4, 5, 6]]"
25889,"[1, 2, 3]"
25890,"[4, 5, 6]"
25891,for i in x
25892,1
25893,2
25894,3
25895,4
25896,5
25897,6
25898,"for x in [[1, 2, 3], [4, 5, 6]]"
25899,for i in x
25900,">>> [j for j in x for x in [[1, 2, 3], [4, 5, 6]]]"
25901,Traceback (most recent call last):
25902,"  File ""<input>"", line 1, in <module>"
25903,NameError: name 'x' is not defined
25904,">>> {x for x in [1, 1, 2, 3, 3, 1]}"
25905,"{1, 2, 3}"
25906,">>> set([i for i in [1, 1, 2, 3, 3, 1]])"
25907,"{1, 2, 3}"
25908,"{key: value for key, value in ...}"
25909,{i: i for i in ...}
25910,{i for i in ...}
25911,>>> {i: i**2 for i in range(5)}
25912,"{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}"
25913,>>> d = {}
25914,>>> for i in range(5):
25915,...     d[i] = i**2
25916,>>> d
25917,"{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}"
25918,(i for i in range(5))
25919,>>> (i for i in range(5))
25920,<generator object <genexpr> at 0x7f52703fbca8>
25921,>>> def gen():
25922,...     for i in range(5):
25923,...         yield i
25924,>>> gen()
25925,<generator object gen at 0x7f5270380db0>
25926,>>> gen = (i for i in range(5))
25927,>>> next(gen)
25928,0
25929,>>> next(gen)
25930,1
25931,>>> list(gen)
25932,"[2, 3, 4]"
25933,>>> next(gen)
25934,Traceback (most recent call last):
25935,"  File ""<input>"", line 1, in <module>"
25936,StopIteration
25937,[]
25938,sum()
25939,>>> sum(i**2 for i in range(5))
25940,30
25941,x if cond else y
25942,[i for i in x if i else y]
25943,[i if i else y for i in x]
25944,[<output expr> <loop expr <input expr>> <optional predicate expr>]
25945,map()
25946,filter()
25947,"When done well, they have a high satisfaction quotient."
25948,# for the example in the question...
25949,
25950,y = []
25951,for x in range(10):
25952,    y += [x**2]
25953,
25954,# is equivalent to...
25955,
25956,y = [x**2 for x in range(10)]
25957,
25958,"# for a slightly more complex example, it is useful"
25959,# to visualize  where the various x's end up...
25960,
25961,"a = [1,2,3,4]"
25962,"b = [3,4,5,6]"
25963,c = []
25964,
25965,for x in a:
25966,          if x in b:
25967,                  c += [x]
25968,#   \         \        /
25969,#    \    _____\______/
25970,#     \  /      \
25971,#      \/        \
25972,#      /\         \
25973,#     /  \         \
25974,#    /    \         \
25975,c = [x for x in a if x in b]
25976,
25977,print(c)
25978,"[3, 4]"
25979,"[1,2,3,4,...]"
25980,[x < 5 for x in range(10)]
25981,"[0,1,2,3,4]"
25982,"[True, True, True, True, True, False, False, False, False, False]"
25983,"[True, True, True, True, True, False, False, False, False, False]"
25984,x < 5
25985,range(10)
25986,# Snippet 1
25987,squares = [n ** 2 for n in range(5)]
25988,
25989,# Snippet 2
25990,squares = []
25991,for n in range(5):
25992,    squares.append(n ** 2)
25993,squares
25994,"[0, 1, 4, 9, 16]"
25995,[EXPRESSION for VARIABLE in SEQUENCE]
25996,EXPRESSION
25997,VARIABLE
25998,SEQUENCE
25999,[n ** 2 for n in range(5)]
26000,EXPRESSION
26001,n ** 2
26002,VARIABLE
26003,n
26004,SEQUENCE
26005,range(5)
26006,squares
26007,>>> type(squares)
26008,<class 'list'>
26009,n ** 2 + 3 * n + 1
26010,f(n)
26011,n
26012,s[::-1]
26013,bar.foo()
26014,>>> [2 * x + 3 for x in range(5)]
26015,"[3, 5, 7, 9, 11]"
26016,">>> [abs(num) for num in range(-5, 5)]"
26017,"[5, 4, 3, 2, 1, 0, 1, 2, 3, 4]"
26018,">>> animals = ['dog', 'cat', 'lion', 'tiger']"
26019,>>> [animal.upper() for animal in animals]
26020,"['DOG', 'CAT', 'LION', 'TIGER']"
26021,SEQUENCE
26022,if
26023,[EXPRESSION for VARIABLE in SEQUENCE if CONDITION]
26024,CONDITION
26025,True
26026,False
26027,VARIABLE
26028,>>> [n ** 2 for n in range(5) if n % 2 == 0]
26029,"[0, 4, 16]"
26030,">>> animals = ['dog', 'cat', 'lion', 'tiger']"
26031,>>> [animal for animal in animals if len(animal) == 3]
26032,"['dog', 'cat']"
26033,class SomeObj():
26034,"    def __init__(self, param):"
26035,        self.param = param
26036,    def query(self):
26037,        self.param += 1
26038,        return self.param
26039,
26040,global_obj = SomeObj(0)
26041,
26042,@app.route('/')
26043,def home():
26044,    flash(global_obj.query())
26045,    render_template('index.html')
26046,self.param
26047,self.param
26048,multiprocessing.Manager
26049,app.run(threaded=True)
26050,app.run(processes=10)
26051,g
26052,session
26053,"from flask import Flask, session"
26054,from flask_session import Session
26055,
26056,app = Flask(__name__)
26057,# Check Configuration section for more details
26058,SESSION_TYPE = 'filesystem'
26059,app.config.from_object(__name__)
26060,Session(app)
26061,
26062,@app.route('/')
26063,def reset():
26064,"    session[""counter""]=0"
26065,
26066,"    return ""counter was reset"""
26067,
26068,@app.route('/inc')
26069,def routeA():
26070,"    if not ""counter"" in session:"
26071,"        session[""counter""]=0"
26072,
26073,"    session[""counter""]+=1"
26074,
26075,"    return ""counter is {}"".format(session[""counter""])"
26076,
26077,@app.route('/dec')
26078,def routeB():
26079,"    if not ""counter"" in session:"
26080,"        session[""counter""] = 0"
26081,
26082,"    session[""counter""] -= 1"
26083,
26084,"    return ""counter is {}"".format(session[""counter""])"
26085,
26086,
26087,if __name__ == '__main__':
26088,    app.run()
26089,pip install Flask-Session
26090,common.py
26091,from flask_caching import Cache
26092,
26093,# Instantiate the cache
26094,cache = Cache()
26095,flask app
26096,# Import cache
26097,from common import cache
26098,
26099,# ...
26100,app = Flask(__name__)
26101,
26102,"cache.init_app(app=app, config={""CACHE_TYPE"": ""filesystem"",'CACHE_DIR': Path('/tmp')})"
26103,# Import cache
26104,from common import cache
26105,
26106,# store a value
26107,"cache.set(""my_value"", 1_000_000)"
26108,
26109,# Get a value
26110,"my_value = cache.get(""my_value"")"
26111,dict
26112,.count
26113,count
26114,">>> [1, 2, 3, 4, 1, 4, 1].count(1)"
26115,3
26116,count
26117,n
26118,count
26119,n
26120,n * n
26121,Counter
26122,n
26123,"mylist = [1,7,7,7,3,9,9,9,7,9,10,0]   print sorted(set([i for i in mylist if mylist.count(i)>2]))"
26124,list.count()
26125,"numpy.unique(list, return_counts = True)"
26126,Counter
26127,Counter
26128,>>> from collections import Counter
26129,">>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']"
26130,>>> Counter(z)
26131,"Counter({'blue': 3, 'red': 2, 'yellow': 1})"
26132,isinstance
26133,isinstance
26134,Counter
26135,isinstance
26136,Counter
26137,Counter
26138,update
26139,itertools.chain
26140,"x = Counter({'a':5, 'b':3, 'c':7})"
26141,x.most_common()
26142,count()
26143,">>> l = [""a"",""b"",""b""]"
26144,">>> l.count(""a"")"
26145,1
26146,">>> l.count(""b"")"
26147,2
26148,l
26149,count()
26150,"[[x,l.count(x)] for x in set(l)]"
26151,"dict((x,l.count(x)) for x in set(l))"
26152,">>> l = [""a"",""b"",""b""]"
26153,">>> [[x,l.count(x)] for x in set(l)]"
26154,"[['a', 1], ['b', 2]]"
26155,">>> dict((x,l.count(x)) for x in set(l))"
26156,"{'a': 1, 'b': 2}"
26157,Counter
26158,collections
26159,Counter(l)
26160,">>> l = [""a"",""b"",""b""]"
26161,>>> from collections import Counter
26162,>>> Counter(l)
26163,"Counter({'b': 2, 'a': 1})"
26164,Counter
26165,n
26166,Counter
26167,from __future__ import print_function
26168,import timeit
26169,
26170,"t1=timeit.Timer('Counter(l)', \"
26171,                'import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]'
26172,                )
26173,
26174,"t2=timeit.Timer('[[x,l.count(x)] for x in set(l)]',"
26175,                'import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]'
26176,                )
26177,
26178,"print(""Counter(): "", t1.repeat(repeat=3,number=10000))"
26179,"print(""count():   "", t2.repeat(repeat=3,number=10000)"
26180,"Counter():  [0.46062711701961234, 0.4022796869976446, 0.3974247490405105]"
26181,"count():    [7.779430688009597, 7.962715800967999, 8.420845870045014]"
26182,Counter
26183,Counter
26184,isinstance
26185,"dict((i, a.count(i)) for i in a)"
26186,n * (number of different items)
26187,collections.Counter
26188,i
26189,"dict((i, a.count(i)) for i in a)"
26190,"dict([(1, 2), (1, 3)])"
26191,{1: 3}
26192,>>> l = list('aaaaabbbbcccdde')
26193,>>> l
26194,"['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'e']"
26195,list.count
26196,list.count
26197,>>> l.count('b')
26198,4
26199,>>> t = tuple('aabbbffffff')
26200,>>> t
26201,"('a', 'a', 'b', 'b', 'b', 'f', 'f', 'f', 'f', 'f', 'f')"
26202,>>> t.count('f')
26203,6
26204,collections.Counter
26205,>>> from collections import Counter
26206,>>> c = Counter(l)
26207,>>> c['b']
26208,4
26209,collections.Counter
26210,>>> c.update(list('bbb'))
26211,>>> c['b']
26212,7
26213,>>> c.subtract(list('bbb'))
26214,>>> c['b']
26215,4
26216,>>> c2 = Counter(list('aabbxyz'))
26217,>>> c - c2                   # set difference
26218,"Counter({'a': 3, 'c': 3, 'b': 2, 'd': 2, 'e': 1})"
26219,>>> c + c2                   # addition of all elements
26220,"Counter({'a': 7, 'b': 6, 'c': 3, 'd': 2, 'e': 1, 'y': 1, 'x': 1, 'z': 1})"
26221,>>> c | c2                   # set union
26222,"Counter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1, 'y': 1, 'x': 1, 'z': 1})"
26223,>>> c & c2                   # set intersection
26224,"Counter({'a': 2, 'b': 2})"
26225,'b'
26226,>>> sum(c == 'b' for c in l)
26227,4
26228,True
26229,True
26230,1
26231,list.count(x)
26232,x
26233,numpy.sum(numpy.array(a) == 1)
26234,numpy.bincount(a)
26235,from collections import Counter
26236,from collections import defaultdict
26237,import numpy
26238,import operator
26239,import pandas
26240,import perfplot
26241,
26242,
26243,def counter(a):
26244,    return Counter(a)
26245,
26246,
26247,def count(a):
26248,"    return dict((i, a.count(i)) for i in set(a))"
26249,
26250,
26251,def bincount(a):
26252,    return numpy.bincount(a)
26253,
26254,
26255,def pandas_value_counts(a):
26256,    return pandas.Series(a).value_counts()
26257,
26258,
26259,def occur_dict(a):
26260,    d = {}
26261,    for i in a:
26262,        if i in d:
26263,            d[i] = d[i]+1
26264,        else:
26265,            d[i] = 1
26266,    return d
26267,
26268,
26269,def count_unsorted_list_items(items):
26270,    counts = defaultdict(int)
26271,    for item in items:
26272,        counts[item] += 1
26273,    return dict(counts)
26274,
26275,
26276,def operator_countof(a):
26277,"    return dict((i, operator.countOf(a, i)) for i in set(a))"
26278,
26279,
26280,perfplot.show(
26281,"    setup=lambda n: list(numpy.random.randint(0, 100, n)),"
26282,"    n_range=[2**k for k in range(20)],"
26283,    kernels=[
26284,"        counter, count, bincount, pandas_value_counts, occur_dict,"
26285,"        count_unsorted_list_items, operator_countof"
26286,"        ],"
26287,"    equality_check=None,"
26288,"    logx=True,"
26289,"    logy=True,"
26290,    )
26291,from collections import Counter
26292,from collections import defaultdict
26293,import numpy
26294,import operator
26295,import pandas
26296,import perfplot
26297,
26298,
26299,def counter(a):
26300,    return Counter(a)
26301,
26302,
26303,def count(a):
26304,"    return dict((i, a.count(i)) for i in set(a))"
26305,
26306,
26307,def bincount(a):
26308,    return numpy.bincount(a)
26309,
26310,
26311,def pandas_value_counts(a):
26312,    return pandas.Series(a).value_counts()
26313,
26314,
26315,def occur_dict(a):
26316,    d = {}
26317,    for i in a:
26318,        if i in d:
26319,            d[i] = d[i] + 1
26320,        else:
26321,            d[i] = 1
26322,    return d
26323,
26324,
26325,def count_unsorted_list_items(items):
26326,    counts = defaultdict(int)
26327,    for item in items:
26328,        counts[item] += 1
26329,    return dict(counts)
26330,
26331,
26332,def operator_countof(a):
26333,"    return dict((i, operator.countOf(a, i)) for i in set(a))"
26334,
26335,
26336,b = perfplot.bench(
26337,"    setup=lambda n: list(numpy.random.randint(0, 100, n)),"
26338,"    n_range=[2 ** k for k in range(20)],"
26339,    kernels=[
26340,"        counter,"
26341,"        count,"
26342,"        bincount,"
26343,"        pandas_value_counts,"
26344,"        occur_dict,"
26345,"        count_unsorted_list_items,"
26346,"        operator_countof,"
26347,"    ],"
26348,"    equality_check=None,"
26349,)
26350,"b.save(""out.png"")"
26351,b.show()
26352,"numpy.random.randint(0, 100, n).tolist()"
26353,"list(numpy.random.randint(0, 100, n))"
26354,bincount
26355,import numpy as np
26356,"a = np.array([1, 2, 3, 4, 1, 4, 1])"
26357,np.bincount(a)
26358,">>> array([0, 3, 1, 1, 2])"
26359,pandas
26360,value_counts
26361,>>> import pandas as pd
26362,">>> a = [1, 2, 3, 4, 1, 4, 1]"
26363,>>> pd.Series(a).value_counts()
26364,1    3
26365,4    2
26366,3    1
26367,2    1
26368,dtype: int64
26369,>>> pd.Series(a).value_counts().reset_index().values.tolist()
26370,"[[1, 3], [4, 2], [3, 1], [2, 1]]"
26371,import pandas as pd
26372,
26373,"my_list = ['a', 'b', 'c', 'd', 'a', 'd', 'a']"
26374,
26375,# converting the list to a Series and counting the values
26376,my_count = pd.Series(my_list).value_counts()
26377,my_count
26378,a    3
26379,d    2
26380,b    1
26381,c    1
26382,dtype: int64
26383,my_count['a']
26384,3
26385,"dict((i,a.count(i)) for i in a)"
26386,def occurDict(items):
26387,    d = {}
26388,    for i in items:
26389,        if i in d:
26390,            d[i] = d[i]+1
26391,        else:
26392,            d[i] = 1
26393,return d
26394,itertools.groupby()
26395,itertools.groupby()
26396,from itertools import groupby
26397,
26398,"L = ['a', 'a', 'a', 't', 'q', 'a', 'd', 'a', 'd', 'c']  # Input list"
26399,
26400,"counts = [(i, len(list(c))) for i,c in groupby(L)]      # Create value-count pairs as list of tuples "
26401,print(counts)
26402,"[('a', 3), ('t', 1), ('q', 1), ('a', 1), ('d', 1), ('a', 1), ('d', 1), ('c', 1)]"
26403,a
26404,a
26405,L
26406,"counts = [(i, len(list(c))) for i,c in groupby(sorted(L))]"
26407,print(counts)
26408,"[('a', 5), ('c', 1), ('d', 2), ('q', 1), ('t', 1)]"
26409,groupby
26410,"# Python >= 2.6 (defaultdict) && < 2.7 (Counter, OrderedDict)"
26411,from collections import defaultdict
26412,def count_unsorted_list_items(items):
26413,"    """""""
26414,    :param items: iterable of hashable items to count
26415,    :type items: iterable
26416,
26417,    :returns: dict of counts like Py2.7 Counter
26418,    :rtype: dict
26419,"    """""""
26420,    counts = defaultdict(int)
26421,    for item in items:
26422,        counts[item] += 1
26423,    return dict(counts)
26424,
26425,
26426,# Python >= 2.2 (generators)
26427,def count_sorted_list_items(items):
26428,"    """""""
26429,    :param items: sorted iterable of items to count
26430,    :type items: sorted iterable
26431,
26432,"    :returns: generator of (item, count) tuples"
26433,    :rtype: generator
26434,"    """""""
26435,    if not items:
26436,        return
26437,    elif len(items) == 1:
26438,"        yield (items[0], 1)"
26439,        return
26440,    prev_item = items[0]
26441,    count = 1
26442,    for item in items[1:]:
26443,        if prev_item == item:
26444,            count += 1
26445,        else:
26446,"            yield (prev_item, count)"
26447,            count = 1
26448,            prev_item = item
26449,"    yield (item, count)"
26450,    return
26451,
26452,
26453,import unittest
26454,class TestListCounters(unittest.TestCase):
26455,    def test_count_unsorted_list_items(self):
26456,        D = (
26457,"            ([], []),"
26458,"            ([2], [(2,1)]),"
26459,"            ([2,2], [(2,2)]),"
26460,"            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),"
26461,            )
26462,"        for inp, exp_outp in D:"
26463,            counts = count_unsorted_list_items(inp) 
26464,"            print inp, exp_outp, counts"
26465,"            self.assertEqual(counts, dict( exp_outp ))"
26466,
26467,"        inp, exp_outp = UNSORTED_WIN = ([2,2,4,2], [(2,3), (4,1)])"
26468,"        self.assertEqual(dict( exp_outp ), count_unsorted_list_items(inp) )"
26469,
26470,
26471,    def test_count_sorted_list_items(self):
26472,        D = (
26473,"            ([], []),"
26474,"            ([2], [(2,1)]),"
26475,"            ([2,2], [(2,2)]),"
26476,"            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),"
26477,            )
26478,"        for inp, exp_outp in D:"
26479,            counts = list( count_sorted_list_items(inp) )
26480,"            print inp, exp_outp, counts"
26481,"            self.assertEqual(counts, exp_outp)"
26482,
26483,"        inp, exp_outp = UNSORTED_FAIL = ([2,2,4,2], [(2,3), (4,1)])"
26484,"        self.assertEqual(exp_outp, list( count_sorted_list_items(inp) ))"
26485,"        # ... [(2,2), (4,1), (2,1)]"
26486,# original numbers in list
26487,"l = [1, 2, 2, 3, 3, 3, 4]"
26488,
26489,# empty dictionary to hold pair of number and its count
26490,d = {}
26491,
26492,# loop through all elements and store count
26493,"[ d.update( {i:d.get(i, 0)+1} ) for i in l ]"
26494,
26495,print(d)
26496,"# {1: 1, 2: 2, 3: 3, 4: 1}"
26497,import time
26498,from collections import Counter
26499,
26500,
26501,def countElement(a):
26502,    g = {}
26503,    for i in a:
26504,        if i in g: 
26505,            g[i] +=1
26506,        else: 
26507,            g[i] =1
26508,    return g
26509,
26510,
26511,"z = [1,1,1,1,2,2,2,2,3,3,4,5,5,234,23,3,12,3,123,12,31,23,13,2,4,23,42,42,34,234,23,42,34,23,423,42,34,23,423,4,234,23,42,34,23,4,23,423,4,23,4]"
26512,
26513,
26514,#Solution 1 - Faster
26515,st = time.monotonic()
26516,for i in range(1000000):
26517,    b = countElement(z)
26518,et = time.monotonic()
26519,print(b)
26520,print('Simple for loop and storing it in dict - Duration: {}'.format(et - st))
26521,
26522,#Solution 2 - Fast
26523,st = time.monotonic()
26524,for i in range(1000000):
26525,    a = Counter(z)
26526,et = time.monotonic()
26527,print (a)
26528,print('Using collections.Counter - Duration: {}'.format(et - st))
26529,
26530,#Solution 3 - Slow
26531,st = time.monotonic()
26532,for i in range(1000000):
26533,"    g = dict([(i, z.count(i)) for i in set(z)])"
26534,et = time.monotonic()
26535,print(g)
26536,print('Using list comprehension - Duration: {}'.format(et - st))
26537,#Solution 1 - Faster
26538,"{1: 4, 2: 5, 3: 4, 4: 6, 5: 2, 234: 3, 23: 10, 12: 2, 123: 1, 31: 1, 13: 1, 42: 5, 34: 4, 423: 3}"
26539,Simple for loop and storing it in dict - Duration: 12.032000000000153
26540,#Solution 2 - Fast
26541,"Counter({23: 10, 4: 6, 2: 5, 42: 5, 1: 4, 3: 4, 34: 4, 234: 3, 423: 3, 5: 2, 12: 2, 123: 1, 31: 1, 13: 1})"
26542,Using collections.Counter - Duration: 15.889999999999418
26543,#Solution 3 - Slow
26544,"{1: 4, 2: 5, 3: 4, 4: 6, 5: 2, 34: 4, 423: 3, 234: 3, 42: 5, 12: 2, 13: 1, 23: 10, 123: 1, 31: 1}"
26545,Using list comprehension - Duration: 33.0
26546,return_counts
26547,"# a = [1, 1, 0, 2, 1, 0, 3, 3]"
26548,"a_uniq, counts = np.unique(a, return_counts=True)  # array([0, 1, 2, 3]), array([2, 3, 1, 2]"
26549,"dict(zip(a_uniq, counts))  # {0: 2, 1: 3, 2: 1, 3: 2}"
26550,">>> a = [['a', 'b', 'b', 'b'], ['a', 'c', 'c', 'a']]"
26551,">>> dict(zip(*np.unique(a, return_counts=True)))"
26552,"{'a': 3, 'b': 3, 'c': 2}"
26553,"li = ['A0','c5','A8','A2','A5','c2','A3','A9']"
26554,
26555,print sum(1 for el in li if el[0]=='A' and el[1] in '01234')
26556,3
26557,sum(bool(el[0]=='A' and el[1] in '01234') for el in li)
26558,countOf
26559,operator
26560,>>> import operator
26561,">>> operator.countOf([1, 2, 3, 4, 1, 4, 1], 1)"
26562,3
26563,countOf
26564,list.count
26565,filter()
26566,">>> lst = [1, 2, 3, 4, 1, 4, 1]"
26567,">>> len(filter(lambda x: x==1, lst))"
26568,3
26569, import numpy as np
26570," X = [1, -1, 1, -1, 1]"
26571,{i:X.count(i) for i in np.unique(X)}
26572,"{-1: 2, 1: 3}"
26573,set
26574, from collections import Counter
26575," mylist = [1,7,7,7,3,9,9,9,7,9,10,0] "
26576, types_counts=Counter(mylist)
26577, print(types_counts)
26578,"arr = np.array(['a','a','b','b','b','c'])"
26579,"print(set(map(lambda x  : (x , list(arr).count(x)) , arr)))"
26580,"{('c', 1), ('b', 3), ('a', 2)}"
26581,dict
26582,"print(dict(map(lambda x  : (x , list(arr).count(x)) , arr)))"
26583,"{'b': 3, 'c': 1, 'a': 2}"
26584,"item_list = ['me', 'me', 'you', 'you', 'you', 'they']"
26585,
26586,occ_dict = {}
26587,
26588,for item in item_list:
26589,    if item not in occ_dict:
26590,        occ_dict[item] = 1
26591,    else:
26592,        occ_dict[item] +=1
26593,
26594,print(occ_dict)
26595,"{'me': 2, 'you': 3, 'they': 1}"
26596,"mot = [""compte"", ""france"", ""zied""]"
26597,"lst = [""compte"", ""france"", ""france"", ""france"", ""france""]"
26598,"dict((x, lst.count(x)) for x in set(mot))"
26599,"{'compte': 1, 'france': 4, 'zied': 0}"
26600,sum([1 for elem in <yourlist> if elem==<your_value>])
26601,>>> from collections import Counter
26602,">>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']"
26603,>>> single_occurrences = Counter(z)
26604,">>> print(single_occurrences.get(""blue""))"
26605,3
26606,>>> print(single_occurrences.values())
26607,"dict_values([3, 2, 1])"
26608,"test = [409.1, 479.0, 340.0, 282.4, 406.0, 300.0, 374.0, 253.3, 195.1, 269.0, 329.3, 250.7, 250.7, 345.3, 379.3, 275.0, 215.2, 300.0]"
26609,
26610,for i in test:
26611,"    print('{} numbers {}'.format(i, test.count(i)))"
26612,import pandas as pd
26613,"test = [409.1, 479.0, 340.0, 282.4, 406.0, 300.0, 374.0, 253.3, 195.1, 269.0, 329.3, 250.7, 250.7, 345.3, 379.3, 275.0, 215.2, 300.0]"
26614,
26615,#turning the list into a temporary dataframe
26616,test  = pd.DataFrame(test)
26617,
26618,#using the very convenient value_counts() function
26619,df_counts = test.value_counts()
26620,df_counts
26621,df_counts.index
26622,df_counts.values
26623,"x = ['Jess', 'Jack', 'Mary', 'Sophia', 'Karen',"
26624,"     'Addison', 'Joseph','Jack', 'Jack', 'Eric', 'Ilona', 'Jason']"
26625,the_item = input('Enter the item that you wish to find : ')
26626,how_many_times = 0 
26627,for occurrence in x:
26628,     if occurrence == the_item : 
26629,          how_many_times += 1
26630,"print('The occurrence of', the_item, 'in', x,'is',how_many_times) "
26631,x
26632,the_item
26633,how_many_times
26634,how_many_times
26635,def countfrequncyinarray(arr1):
26636,    r=len(arr1)
26637,"    return {i:arr1.count(i) for i in range(1,r+1)}"
26638,"arr1=[4,4,4,4]"
26639,a=countfrequncyinarray(arr1)
26640,print(a)
26641,"countfrequncyinarray([4, 4, 4])"
26642,4
26643,-1
26644,sys.maxsize + 1
26645,n = 5
26646,# Test one.
26647,if n == 5:
26648,    print 'Yay!'
26649,
26650,# Test two.
26651,if n is 5:
26652,    print 'Yay!'
26653,list
26654,L = []
26655,L.append(1)
26656,if L == [1]:
26657,    print 'Yay!'
26658,"# Holds true, but..."
26659,
26660,if L is [1]:
26661,    print 'Yay!'
26662,# Doesn't.
26663,==
26664,is
26665,is
26666,True
26667,==
26668,">>> a = [1, 2, 3]"
26669,>>> b = a
26670,>>> b is a 
26671,True
26672,>>> b == a
26673,True
26674,
26675,"# Make a new copy of list `a` via the slice operator, "
26676,# and assign it to variable `b`
26677,>>> b = a[:] 
26678,>>> b is a
26679,False
26680,>>> b == a
26681,True
26682,>>> 1000 is 10**3
26683,False
26684,>>> 1000 == 10**3
26685,True
26686,">>> ""a"" is ""a"""
26687,True
26688,">>> ""aa"" is ""a"" * 2"
26689,True
26690,">>> x = ""a"""
26691,">>> ""aa"" is x * 2"
26692,False
26693,">>> ""aa"" is intern(x*2)"
26694,True
26695,"echo 'import sys;tt=sys.argv[1];print(tt is ""foo"", tt == ""foo"", id(tt)==id(""foo""))'| python3 - foo"
26696,False True False
26697,b = a[:]
26698,1000 is 10**3
26699,int
26700,1000 is 1e3
26701,float
26702,1000 is 10**3
26703,10**3
26704,x=10; 1000 is x**3
26705,False
26706,"SyntaxWarning: ""is"" with a literal. Did you mean ""==""?"
26707,==
26708,is
26709,==
26710,is
26711,==
26712,==
26713,x
26714,is
26715,>>> a = 500
26716,>>> b = 500
26717,>>> a == b
26718,True
26719,>>> a is b
26720,False
26721,a
26722,b
26723,>>> c = 200
26724,>>> d = 200
26725,>>> c == d
26726,True
26727,>>> c is d
26728,True
26729,">>> for i in range(250, 260): a = i; print ""%i: %s"" % (i, a is int(str(i)));"
26730,... 
26731,250: True
26732,251: True
26733,252: True
26734,253: True
26735,254: True
26736,255: True
26737,256: True
26738,257: False
26739,258: False
26740,259: False
26741,is
26742,a=500
26743,b=500
26744,a
26745,b
26746,a is b
26747,True
26748,is
26749,is
26750,==
26751,==
26752,is
26753,==
26754,is
26755,is
26756,is not
26757,x is y
26758,x
26759,y
26760,id()
26761,x is not y
26762,a is b
26763,id(a) == id(b)
26764,id
26765,help(id)
26766,a
26767,b
26768,is
26769,==
26770,is
26771,is
26772,None
26773,==
26774,==
26775,is
26776,None
26777,is
26778,is not
26779,if x
26780,if x is not None
26781,None
26782,is
26783,__eq__
26784,==
26785,!=
26786,x is y
26787,x == y
26788,>>> class Object(object): pass
26789,>>> obj = Object()
26790,>>> obj2 = Object()
26791,">>> obj == obj, obj is obj"
26792,"(True, True)"
26793,">>> obj == obj2, obj is obj2"
26794,"(False, False)"
26795,nan
26796,>>> nan = float('nan')
26797,>>> nan
26798,nan
26799,>>> nan is nan
26800,True
26801,>>> nan == nan           # !!!!!
26802,False
26803,nan
26804,>>> [nan] == [nan]
26805,True
26806,">>> (nan,) == (nan,)"
26807,True
26808,is
26809,is
26810,is None
26811,== None
26812,is
26813,Enum
26814,==
26815,is
26816,is
26817,==
26818,==
26819,is
26820,==
26821,is
26822,value1
26823,value2
26824,int
26825,1000
26826,value1 = 1000
26827,value2 = value1
26828,value2
26829,is
26830,==
26831,True
26832,>>> value1 == value2
26833,True
26834,>>> value1 is value2
26835,True
26836,value1
26837,value2
26838,int
26839,>>> value1 = 1000
26840,>>> value2 = 1000
26841,==
26842,True
26843,is
26844,False
26845,>>> value1 == value2
26846,True
26847,>>> value1 is value2
26848,False
26849,is
26850,is
26851,None
26852,True
26853,False
26854,NotImplemented
26855,Ellipsis
26856,__debug__
26857,int is int
26858,int is float
26859,np.ma.masked
26860,==
26861,==
26862,__eq__
26863,class MyClass(object):
26864,"    def __init__(self, val):"
26865,        self._value = val
26866,
26867,"    def __eq__(self, other):"
26868,        print('__eq__ method called')
26869,        try:
26870,            return self._value == other._value
26871,        except AttributeError:
26872,            raise TypeError('Cannot compare {0} to objects of type {1}'
26873,"                            .format(type(self), type(other)))"
26874,>>> MyClass(10) == MyClass(10)
26875,__eq__ method called
26876,True
26877,__eq__
26878,__eq__
26879,is
26880,class AClass(object):
26881,"    def __init__(self, value):"
26882,        self._value = value
26883,
26884,>>> a = AClass(10)
26885,>>> b = AClass(10)
26886,>>> a == b
26887,False
26888,>>> a == a
26889,__eq__
26890,is
26891,__eq__
26892,True
26893,False
26894,==
26895,>>> import numpy as np
26896,>>> np.arange(10) == 2
26897,"array([False, False,  True, False, False, False, False, False, False, False], dtype=bool)"
26898,is
26899,True
26900,False
26901,is True
26902,is False
26903,if
26904,is True
26905,True
26906,False
26907,==
26908,Yes:   if greeting:
26909,No:    if greeting == True:
26910,Worse: if greeting is True:
26911,is
26912,if __debug__:
26913,if not __debug__:
26914,if __debug__ is True:
26915,if __debug__ == True:
26916,is
26917,None
26918,True
26919,False
26920,__debug__
26921,is True
26922,if False
26923,is
26924,is True
26925,== True
26926,True is True
26927,== True
26928,__eq__
26929,is
26930,is
26931,==
26932,is
26933,">>> ""foo"" + ""bar"" == ""foobar"""
26934,True
26935,">>> ""foo"" + ""bar"" is ""foobar"""
26936,True
26937,">>> ""foo""[:] + ""bar"" == ""foobar"""
26938,True
26939,">>> ""foo""[:] + ""bar"" is ""foobar"""
26940,False
26941,is
26942,==
26943,is
26944,==
26945,__cmp__
26946,__eq__
26947,is
26948,is
26949,==
26950,"a=[1,2,3]"
26951,b=a        #a and b point to the same object
26952,c=list(a)  #c points to different object 
26953,
26954,if a==b:
26955,    print('#')   #output:#
26956,if a is b:
26957,    print('##')  #output:## 
26958,if a==c:
26959,    print('###') #output:## 
26960,if a is c:
26961,    print('####') #no output as c and a point to different object 
26962,==
26963,is
26964,is
26965,==
26966,==
26967,is
26968,str = 'hello'
26969,if (str is 'hello'):
26970,    print ('str is hello')
26971,if (str == 'hello'):
26972,    print ('str == hello')
26973,str is hello
26974,str == hello
26975,==
26976,is
26977,str2 = 'hello sam'
26978,    if (str2 is 'hello sam'):
26979,        print ('str2 is hello sam')
26980,    if (str2 == 'hello sam'):
26981,        print ('str2 == hello sam')
26982,str2 == hello sam
26983,is
26984,is
26985,id
26986,is
26987,str = 'hello'
26988,id('hello')
26989,> 140039832615152
26990,id(str)
26991,> 140039832615152
26992,str2 = 'hello sam'
26993,id('hello sam')
26994,> 140039832615536
26995,id(str2)
26996,> 140039832615792
26997,str is 'hello'
26998,"SyntaxWarning: ""is"" with a literal. Did you mean ""==""?"
26999,==
27000,foo == None
27001,foo is None
27002,is
27003,foo is None
27004,foo
27005,bar
27006,foo == True
27007,foo is True
27008,foo=1
27009,foo==True
27010,foo is True
27011,"list1 = [1,2,3,4]"
27012,"tuple1 = (1,2,3,4)"
27013,
27014,print(list1)
27015,print(tuple1)
27016,print(id(list1))
27017,print(id(tuple1))
27018,
27019,print(list1 == tuple1)
27020,print(list1 is tuple1)
27021,">>> a = b = [1,2,3]"
27022,">>> c = [1,2,3]"
27023,>>> a == b
27024,True
27025,>>> a == c
27026,True
27027,>>> a is b
27028,True
27029,>>> a is c
27030,False
27031,">>> a = [1,2,3]"
27032,">>> b = [1,2]"
27033,>>> a == b
27034,False
27035,>>> a is b
27036,False
27037,>>> del a[2]
27038,>>> a == b
27039,True
27040,>>> a is b
27041,False
27042,"Tip: Avoid using is operator for immutable types such as strings and numbers, the result is unpredictable."
27043,_single_leading_underscore
27044,from M import *
27045,__spam
27046,_classname__spam
27047,classname
27048,>>> class MyClass():
27049,...     def __init__(self):
27050,"...             self.__superprivate = ""Hello"""
27051,"...             self._semiprivate = "", world!"""
27052,...
27053,>>> mc = MyClass()
27054,>>> print mc.__superprivate
27055,Traceback (most recent call last):
27056,"  File ""<stdin>"", line 1, in <module>"
27057,AttributeError: myClass instance has no attribute '__superprivate'
27058,>>> print mc._semiprivate
27059,", world!"
27060,>>> print mc.__dict__
27061,"{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}"
27062,from M import *
27063,_foo
27064,__foo
27065,_classname__foo
27066,__foo__
27067,__foo
27068,instance.__foo()
27069,from module import *
27070,_foo
27071,B
27072,A
27073,foo()
27074,B.foo()
27075,.foo()
27076,A
27077,B
27078,B.foo()
27079,super(B).foo()
27080,__dunder__
27081,from foobar import *
27082,foobar
27083,__all__
27084,raise NotImplementedError
27085,_get
27086,_put
27087,put
27088,get
27089,_var_name
27090,var_name
27091,__all__
27092,__all__
27093,from spam import *
27094,_
27095,_
27096,_
27097,*
27098,__
27099,._variable
27100,.__variable
27101,.__variable__
27102,.__mangled
27103,instance._className__mangled
27104,class Test(object):
27105,    def __init__(self):
27106,        self.__a = 'a'
27107,        self._b = 'b'
27108,
27109,>>> t = Test()
27110,>>> t._b
27111,'b'
27112,>>> t.__a
27113,Traceback (most recent call last):
27114,"  File ""<stdin>"", line 1, in <module>"
27115,AttributeError: 'Test' object has no attribute '__a'
27116,>>> t._Test__a
27117,'a'
27118,instance._className__variable
27119,._variable
27120,from M import *
27121,class BaseForm(StrAndUnicode):
27122,
27123,    def _get_errors(self):
27124,"        ""Returns an ErrorDict for the data provided for the form"""
27125,        if self._errors is None:
27126,            self.full_clean()
27127,        return self._errors
27128,
27129,    errors = property(_get_errors)
27130,errors
27131,class A(object):
27132,    def __test(self):
27133,"        print ""I'm a test method in class A"""
27134,
27135,    def test(self):
27136,        self.__test()
27137,
27138,a = A()
27139,a.test()
27140,# a.__test() # This fails with an AttributeError
27141,a._A__test() # Works! We can access the mangled name directly!
27142,$ python test.py
27143,I'm test method in class A
27144,I'm test method in class A
27145,class B(A):
27146,    def __test(self):
27147,"        print ""I'm test method in class B"""
27148,
27149,b = B()
27150,b.test()
27151,$ python test.py
27152,I'm test method in class A
27153,__this__
27154,">>> name = ""test string"""
27155,>>> name.__len__()
27156,11
27157,>>> len(name)
27158,11
27159,
27160,>>> number = 10
27161,>>> number.__add__(40)
27162,50
27163,>>> number + 50
27164,60
27165,__init__()
27166,__new__()
27167,class FalseCalculator(object):
27168,
27169,"    def __init__(self, number):"
27170,        self.number = number
27171,
27172,"    def __add__(self, number):"
27173,        return self.number - number
27174,
27175,"    def __sub__(self, number):"
27176,        return self.number + number
27177,
27178,number = FalseCalculator(20)
27179,print number + 10      # 10
27180,print number - 20      # 40
27181,_var
27182,var_
27183,__var
27184,__var__
27185,_
27186,def foo(bar):
27187,    return _('my_' + bar)
27188,"from sphinx.locale import l_, _"
27189,class Circle(object):
27190,
27191,"    def __init__(self, radius):"
27192,        self.radius = radius
27193,
27194,    def area(self):
27195,        p = self.__perimeter()
27196,        r = p / math.pi / 2.0
27197,        return math.pi * r ** 2.0
27198,
27199,    def perimeter(self):
27200,        return 2.0 * math.pi * self.radius
27201,
27202,    __perimeter = perimeter  # local reference
27203,
27204,
27205,class Tire(Circle):
27206,
27207,    def perimeter(self):
27208,        return Circle.perimeter(self) * 1.25
27209,perimeter
27210,Circle
27211,Tire
27212,perimeter
27213,area
27214,Tire(5).area()
27215,Circle.perimeter
27216,Tire.perimeter
27217,__perimeter
27218,_perimeter
27219,_perimeter
27220,class Tire(Circle):
27221,
27222,    def perimeter(self):
27223,        return Circle.perimeter(self) * 1.25
27224,
27225,    _perimeter = perimeter
27226,__double_leading_underscore
27227,_var
27228,__all__
27229,# foo.py
27230,
27231,"var = ""var"""
27232,"_var = ""_var"""
27233,# bar.py
27234,
27235,from foo import *
27236,
27237,"print(dir())  # list of defined objects, contains 'var' but not '_var'"
27238,print(var)    # var
27239,print(_var)   # NameError: name '_var' is not defined
27240,_
27241,for
27242,_
27243,for _ in range(10):
27244,"    print(""I must not talk in class"")"
27245,var_
27246,"class_ = ""MyClassName"""
27247,__var
27248,_<Class_name>__<attribute_name>
27249,class MyClass:
27250,"    __an_attribute = ""attribute_value"""
27251,
27252,my_class = MyClass()
27253,"print(my_class._MyClass__an_attribute)  # ""attribute_value"""
27254,print(my_class.__an_attribute)  # AttributeError: 'MyClass' object has no attribute '__an_attribute'
27255,__var__
27256,class PrivateVarC(object):
27257,
27258,    def get_x(self):
27259,        pass
27260,
27261,"    def set_x(self, val):"
27262,        pass
27263,
27264,"    rwvar = property(get_p, set_p)  "
27265,
27266,    ronly = property(get_p) 
27267,class A():
27268,"    here=""abc"""
27269,"    _here=""_abc"""
27270,"    __here=""__abc"""
27271,
27272,
27273,aObject=A()
27274,print(aObject.here) 
27275,print(aObject._here)
27276,# now if we try to print __here then it will fail because it's not public variable 
27277,#print(aObject.__here)
27278,class parent(object):
27279,"    __default = ""parent"""
27280,"    def __init__(self, name=None):"
27281,        self.default = name or self.__default
27282,
27283,    @property
27284,    def default(self):
27285,        return self.__default
27286,
27287,    @default.setter
27288,"    def default(self, value):"
27289,        self.__default = value
27290,
27291,
27292,class child(parent):
27293,"    __default = ""child"""
27294,child_a = child()
27295,child_a.default            # 'parent'
27296,child_a._child__default    # 'child'
27297,child_a._parent__default   # 'parent'
27298,
27299,"child_b = child(""orphan"")"
27300,## this will show 
27301,child_b.default            # 'orphan'
27302,child_a._child__default    # 'child'
27303,child_a._parent__default   # 'orphan'
27304,__init__
27305,__bool__
27306,_
27307,internal
27308,__
27309,protected
27310,_
27311,private
27312,__
27313,# Private methods of MyClass
27314,def _MyClass__do_something(obj:'MyClass'):
27315,    print('_MyClass__do_something() called. type(obj) = {}'.format(type(obj)))
27316,
27317,class MyClass():
27318,    def __init__(self):
27319,        __do_something(self)
27320,
27321,mc = MyClass()
27322,_MyClass__do_something() called. type(obj) = <class '__main__.MyClass'>
27323,NameError: name '_<class><method>' is not defined
27324,count
27325,"['Sp','Mt']"
27326,"['Sp','Mt']"
27327,   Sp   Mt Value   count
27328,0  MM1  S1   a     **3**
27329,1  MM1  S1   n       2
27330,2  MM1  S3   cb    **5**
27331,3  MM2  S3   mk    **8**
27332,4  MM2  S4   bg    **10**
27333,5  MM2  S4   dgd     1
27334,6  MM4  S2   rd      2
27335,7  MM4  S2   cb      2
27336,8  MM4  S2   uyi   **7**
27337,0  MM1  S1   a      **3**
27338,2  MM1  S3   cb     **5**
27339,3  MM2  S3   mk     **8**
27340,4  MM2  S4   bg     **10** 
27341,8  MM4  S2   uyi    **7**
27342,"['Sp','Mt']"
27343,   Sp   Mt   Value  count
27344,4  MM2  S4   bg     10
27345,5  MM2  S4   dgd    1
27346,6  MM4  S2   rd     2
27347,7  MM4  S2   cb     8
27348,8  MM4  S2   uyi    8
27349,count
27350,   Sp   Mt   Value  count
27351,4  MM2  S4   bg     10
27352,7  MM4  S2   cb     8
27353,8  MM4  S2   uyi    8
27354,1 3
27355,In [1]: df
27356,Out[1]:
27357,    Sp  Mt Value  count
27358,0  MM1  S1     a      3
27359,1  MM1  S1     n      2
27360,2  MM1  S3    cb      5
27361,3  MM2  S3    mk      8
27362,4  MM2  S4    bg     10
27363,5  MM2  S4   dgd      1
27364,6  MM4  S2    rd      2
27365,7  MM4  S2    cb      2
27366,8  MM4  S2   uyi      7
27367,
27368,"In [2]: df.groupby(['Mt'], sort=False)['count'].max()"
27369,Out[2]:
27370,Mt
27371,S1     3
27372,S3     8
27373,S4    10
27374,S2     7
27375,Name: count
27376,In [3]: idx = df.groupby(['Mt'])['count'].transform(max) == df['count']
27377,
27378,In [4]: df[idx]
27379,Out[4]:
27380,    Sp  Mt Value  count
27381,0  MM1  S1     a      3
27382,3  MM2  S3    mk      8
27383,4  MM2  S4    bg     10
27384,8  MM4  S2   uyi      7
27385,In [5]: df['count_max'] = df.groupby(['Mt'])['count'].transform(max)
27386,
27387,In [6]: df
27388,Out[6]:
27389,    Sp  Mt Value  count  count_max
27390,0  MM1  S1     a      3          3
27391,1  MM1  S1     n      2          3
27392,2  MM1  S3    cb      5          8
27393,3  MM2  S3    mk      8          8
27394,4  MM2  S4    bg     10         10
27395,5  MM2  S4   dgd      1         10
27396,6  MM4  S2    rd      2          7
27397,7  MM4  S2    cb      2          7
27398,8  MM4  S2   uyi      7          7
27399,idx
27400,transform
27401,"df.sort_values('count', ascending=False).drop_duplicates(['Sp','Mt'])"
27402,inplace = True
27403,drop_duplicates
27404,idxmax()
27405,In [365]: import pandas as pd
27406,
27407,In [366]: df = pd.DataFrame({
27408,"'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4','MM4'],"
27409,"'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27410,"'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27411,"'count' : [3,2,5,8,10,1,2,2,7]"
27412,})
27413,
27414,In [367]: df                                                                                                       
27415,Out[367]: 
27416,   count  mt   sp  val
27417,0      3  S1  MM1    a
27418,1      2  S1  MM1    n
27419,2      5  S3  MM1   cb
27420,3      8  S3  MM2   mk
27421,4     10  S4  MM2   bg
27422,5      1  S4  MM2  dgb
27423,6      2  S2  MM4   rd
27424,7      2  S2  MM4   cb
27425,8      7  S2  MM4  uyi
27426,
27427,
27428,### Apply idxmax() and use .loc() on dataframe to filter the rows with max values:
27429,"In [368]: df.loc[df.groupby([""sp"", ""mt""])[""count""].idxmax()]                                                       "
27430,Out[368]: 
27431,   count  mt   sp  val
27432,0      3  S1  MM1    a
27433,2      5  S3  MM1   cb
27434,3      8  S3  MM2   mk
27435,4     10  S4  MM2   bg
27436,8      7  S2  MM4  uyi
27437,
27438,### Just to show what values are returned by .idxmax() above:
27439,"In [369]: df.groupby([""sp"", ""mt""])[""count""].idxmax().values                                                        "
27440,"Out[369]: array([0, 2, 3, 4, 8])"
27441,"""I want to get ALL the rows where count equals max in each group"""
27442,idxmax
27443,"Return[s] index of first occurrence of maximum over requested axis"""
27444,groupby()
27445,sort_values
27446,drop_duplicates
27447,"df.sort_values('count').drop_duplicates(['Sp', 'Mt'], keep='last')"
27448,Out[190]: 
27449,    Sp  Mt Value  count
27450,0  MM1  S1     a      3
27451,2  MM1  S3    cb      5
27452,8  MM4  S2   uyi      7
27453,3  MM2  S3    mk      8
27454,4  MM2  S4    bg     10
27455,tail
27456,"df.sort_values('count').groupby(['Sp', 'Mt']).tail(1)"
27457,Out[52]: 
27458,    Sp  Mt Value  count
27459,0  MM1  S1     a      3
27460,2  MM1  S3    cb      5
27461,8  MM4  S2   uyi      7
27462,3  MM2  S3    mk      8
27463,4  MM2  S4    bg     10
27464,"na_position=""first"""
27465,sort_values
27466,NaN
27467,df = pd.DataFrame({
27468,"    'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],"
27469,"    'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27470,"    'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27471,"    'count' : [3,2,5,8,10,1,2,2,7]"
27472,    })
27473,
27474,"df_grouped = df.groupby(['sp', 'mt']).agg({'count':'max'})"
27475,
27476,df_grouped = df_grouped.reset_index()
27477,
27478,df_grouped = df_grouped.rename(columns={'count':'count_max'})
27479,
27480,"df = pd.merge(df, df_grouped, how='left', on=['sp', 'mt'])"
27481,
27482,df = df[df['count'] == df['count_max']]
27483,df[df['count'] == df['count_max']]
27484,groupby
27485,idxmax
27486,date
27487,datetime
27488,df['date']=pd.to_datetime(df['date'])
27489,max
27490,date
27491,groupyby ad_id
27492,idx=df.groupby(by='ad_id')['date'].idxmax()
27493,"df_max=df.loc[idx,]"
27494,ad_id  price       date
27495,7     22      2 2018-06-11
27496,6     23      2 2018-06-22
27497,2     24      2 2018-06-30
27498,3     28      5 2018-06-22
27499,df[df['count'] == df.groupby(['Mt'])['count'].transform(max)]
27500,import pandas as pd
27501,import numpy as np
27502,import time
27503,
27504,"df = pd.DataFrame(np.random.randint(1,10,size=(1000000, 2)), columns=list('AB'))"
27505,
27506,start_time = time.time()
27507,df1idx = df.groupby(['A'])['B'].transform(max) == df['B']
27508,df1 = df[df1idx]
27509,"print(""---1 ) %s seconds ---"" % (time.time() - start_time))"
27510,
27511,start_time = time.time()
27512,df2 = df.sort_values('B').groupby(['A']).tail(1)
27513,"print(""---2 ) %s seconds ---"" % (time.time() - start_time))"
27514,
27515,start_time = time.time()
27516,"df3 = df.sort_values('B').drop_duplicates(['A'],keep='last')"
27517,"print(""---3 ) %s seconds ---"" % (time.time() - start_time))"
27518,
27519,start_time = time.time()
27520,"df3b = df.sort_values('B', ascending=False).drop_duplicates(['A'])"
27521,"print(""---3b) %s seconds ---"" % (time.time() - start_time))"
27522,
27523,start_time = time.time()
27524,df4 = df[df['B'] == df.groupby(['A'])['B'].transform(max)]
27525,"print(""---4 ) %s seconds ---"" % (time.time() - start_time))"
27526,
27527,start_time = time.time()
27528,d = df.groupby('A')['B'].nlargest(1)
27529,"df5 = df.iloc[[i[1] for i in d.index], :]"
27530,"print(""---5 ) %s seconds ---"" % (time.time() - start_time))"
27531,df = pd.DataFrame({
27532,"'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4','MM4'],"
27533,"'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27534,"'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27535,"'count' : [3,2,5,8,10,1,2,2,7]"
27536,})
27537,
27538,d = df.groupby('mt')['count'].nlargest(1) # pass 1 since we want the max
27539,
27540,"df.iloc[[i[1] for i in d.index], :] # pass the index of d as list comprehension"
27541,In [85]: import pandas as pd
27542,
27543,In [86]: df = pd.DataFrame({
27544,"    ...: 'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4','MM4'],"
27545,"    ...: 'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27546,"    ...: 'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27547,"    ...: 'count' : [3,2,5,8,10,1,2,2,7]"
27548,    ...: })
27549,
27550,"## Apply nlargest(1) to find the max val df, and nlargest(n) gives top n values for df:"
27551,"In [87]: df.groupby([""sp"", ""mt""]).apply(lambda x: x.nlargest(1, ""count"")).reset_index(drop=True)"
27552,Out[87]:
27553,   count  mt   sp  val
27554,0      3  S1  MM1    a
27555,1      5  S3  MM1   cb
27556,2      8  S3  MM2   mk
27557,3     10  S4  MM2   bg
27558,4      7  S2  MM4  uyi
27559,df = pd.DataFrame({
27560,"    'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4','MM4'],"
27561,"    'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27562,"    'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27563,"    'count' : [3,2,5,8,10,1,2,2,7]"
27564,})
27565,
27566,"df.sort_values(""count"", ascending=False).groupby([""sp"", ""mt""]).first().reset_index()"
27567,df = pd.DataFrame({
27568,"'sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4','MM4'],"
27569,"'mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27570,"'val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27571,"'count' : [3,2,5,8,10,1,2,2,7]"
27572,})
27573,
27574,"df.groupby(['sp', 'mt']).apply(lambda grp: grp.nlargest(1, 'count'))"
27575,df = pd.DataFrame({
27576,"   'Sp' : ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],"
27577,"   'Mt' : ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],"
27578,"   'Val' : ['a', 'n', 'cb', 'mk', 'bg', 'dgb', 'rd', 'cb', 'uyi'],"
27579,"   'Count' : [3,2,5,8,10,1,2,2,7]"
27580,})
27581,
27582,df.groupby('Mt')\
27583,  .apply(lambda group: group[group.Count == group.Count.max()])\
27584,  .reset_index(drop=True)
27585,
27586,    sp  mt  val  count
27587,0  MM1  S1    a      3
27588,1  MM4  S2  uyi      7
27589,2  MM2  S3   mk      8
27590,3  MM2  S4   bg     10
27591,.reset_index(drop=True)
27592,df.loc[df.groupby('mt')['count'].idxmax()]
27593,df
27594,df.reset_index(inplace=True)
27595,functions = []
27596,
27597,for i in range(3):
27598,    def f():
27599,        return i
27600,
27601,    # alternatively: f = lambda: i
27602,
27603,    functions.append(f)
27604,print([f() for f in functions])
27605,"# expected output: [0, 1, 2]"
27606,"# actual output:   [2, 2, 2]"
27607,i
27608,for
27609,i
27610,i
27611,2
27612,def f():
27613,def f(i=i):
27614,def f(i=i):
27615,    return i
27616,i
27617,i=i
27618,i
27619,i
27620,i=i
27621,def
27622,call
27623,f
27624,def make_f(i):
27625,    def f():
27626,        return i
27627,    return f
27628,f = make_f(i)
27629,def
27630,i
27631,f
27632,f
27633,i
27634,global_var = 'foo'
27635,
27636,def my_function():
27637,    print(global_var)
27638,
27639,global_var = 'bar'
27640,my_function()
27641,global_var
27642,f
27643,i
27644,2
27645,i
27646,i
27647,for i in range(3):
27648,    def f(i=i):  # <- right here is the important bit
27649,        return i
27650,
27651,    functions.append(f)
27652,i
27653,>>> i = 0
27654,>>> def f(i=i):
27655,...     pass
27656,>>> f.__defaults__  # this is where the current value of i is stored
27657,"(0,)"
27658,>>> # assigning a new value to i has no effect on the function's default arguments
27659,>>> i = 5
27660,>>> f.__defaults__
27661,"(0,)"
27662,i
27663,i
27664,def f_factory(i):
27665,    def f():
27666,        return i  # i is now a *local* variable of f_factory and can't ever change
27667,    return f
27668,
27669,for i in range(3):           
27670,    f = f_factory(i)
27671,    functions.append(f)
27672,functools.partial
27673,i
27674,f
27675,functools.partial
27676,import functools
27677,
27678,def f(i):
27679,    return i
27680,
27681,for i in range(3):    
27682,"    f_with_i = functools.partial(f, i)  # important: use a different variable than ""f"""
27683,    functions.append(f_with_i)
27684,">>> i = []  # instead of an int, i is now a *mutable* object"
27685,>>> def f(i=i):
27686,"...     print('i =', i)"
27687,...
27688,">>> i.append(5)  # instead of *assigning* a new value to i, we're *mutating* it"
27689,>>> f()
27690,i = [5]
27691,i
27692,i
27693,i
27694,def f(i=i.copy()):
27695,f = f_factory(i.copy())
27696,"f_with_i = functools.partial(f, i.copy())"
27697,f_factory
27698,i
27699,f_factory
27700,f
27701,nonlocal
27702,def f_factory(i):
27703,    def f(offset):
27704,      nonlocal i
27705,      i += offset
27706,      return i  # i is now a *local* variable of f_factory and can't ever change
27707,    return f
27708,
27709,for i in range(3):           
27710,    f = f_factory(i)
27711,    print(f(10))
27712,l=[]
27713,for t in range(10):
27714,    def up(y):
27715,        print(y)
27716,    l.append(up)
27717,l[5]('printing in 5th function')
27718,return
27719,print
27720,print
27721,return
27722,print
27723,return
27724,print
27725,None
27726,print
27727,return
27728,print
27729,print
27730,return
27731,return
27732,return
27733,print
27734,print
27735,print()
27736,return
27737,return
27738,print()
27739,return
27740,def foo():
27741,"    print(""hello from inside of foo"")"
27742,    return 1
27743,if __name__ == '__main__':
27744,"    print(""going to call foo"")"
27745,    x = foo()
27746,"    print(""called foo"")"
27747,"    print(""foo returned "" + str(x))"
27748,.py
27749,going to call foo
27750,hello from inside foo
27751,called foo   
27752,foo returned 1
27753,>>> def foo():
27754,"...     print(""hello from within foo"")"
27755,...     return 1
27756,...
27757,>>> foo()
27758,hello from within foo
27759,1
27760,>>> def bar():
27761,...   return 10 * foo()
27762,...
27763,>>> bar()
27764,hello from within foo
27765,10
27766,foo()
27767,bar()
27768,bar()
27769,print()
27770,return
27771,def square(n):
27772,    return n * n
27773,
27774,def add_one(n):
27775,    return n + 1
27776,
27777,print square(12)
27778,
27779,# square(12) is the same as writing 144
27780,
27781,print add_one(square(12))
27782,print add_one(144)
27783,#These both have the same output
27784,def
27785,return
27786,2
27787,x
27788,f(x) = x + 2
27789,x
27790,x + 2
27791,def f(x):
27792,    return x + 2
27793,def
27794,f
27795,x
27796,x + 2
27797,return
27798,x
27799,print f(2)
27800,>>> 4
27801,def f(x):
27802,    y = x + 2
27803,    return y
27804,def f(x):
27805,    x = x + 2
27806,    return x
27807,x = x + 2
27808,x
27809,return
27810,return x
27811,return
27812,return
27813,print
27814,print
27815,.py
27816,">>> n = ""foo\nbar"" #just assigning a variable. No output"
27817,">>> n #the value is output, but it is in a ""raw form"""
27818,'foo\nbar'
27819,>>> print(n) #the \n is now a newline
27820,foo
27821,bar
27822,>>>
27823,>>> def getN():
27824,"...    return ""foo\nbar"""
27825,...
27826,">>> getN() #When this isn't assigned to something, it is just output"
27827,'foo\nbar'
27828,>>> n = getN() # assigning a variable to the return value. No output
27829,">>> n #the value is output, but it is in a ""raw form"""
27830,'foo\nbar'
27831,>>> print(n) #the \n is now a newline
27832,foo
27833,bar
27834,>>>
27835,def ret(n):
27836,    if n > 9:
27837,"         temp = ""two digits"""
27838,         return temp     #Line 4        
27839,    else:
27840,"         temp = ""one digit"""
27841,         return temp     #Line 8
27842,"    print(""return statement"")"
27843,ret(10)
27844,ret()
27845,return temp
27846,"print(""return statement"")"
27847,two digits   
27848,def ret(n):
27849,    if n > 9:
27850,"        print(""two digits"")"
27851,"        return ""two digits""           "
27852,    else :
27853,"        print(""one digit"")"
27854,"        return ""one digit""        "
27855,ret(25)
27856,two digits
27857,'two digits'
27858,return
27859,return
27860,str.find(sub)
27861,str.index(sub)
27862,index
27863,ValueError
27864,find
27865,-1
27866,try/except
27867,"def find(s: str, sub: str) -> int:"
27868,    try:
27869,        return s.index(sub)
27870,    except ValueError:
27871,        return -1
27872,str.index
27873,ValueError
27874,str.index
27875,find
27876,sub
27877,-1
27878,"def find(s: str, sub: str) -> int:"
27879,    if sub not in s:
27880,        return -1
27881,    return s.index(sub)
27882,return s.index(sub)
27883,try/except
27884,return
27885,return
27886,return
27887,return
27888,print
27889,"def bigger(a, b):"
27890,    if a > b:
27891,        return a
27892,    elif a <b:
27893,        return b
27894,    else:
27895,        return a
27896,"def bigger(a, b):"
27897,    if a > b:
27898,        print a
27899,    elif a <b:
27900,        print b
27901,    else:
27902,        print a
27903,----  
27904,FAILURE
27905,": Test case input: 3, 8."
27906,            Expected result: 8  
27907,FAILURE
27908,": Test case input: 4, 3."
27909,            Expected result: 4  
27910,FAILURE
27911,": Test case input: 3, 3."
27912,            Expected result: 3  
27913,You passed 0 out of 3 test cases
27914,return
27915,print
27916,return
27917,print
27918,def count_number_of(x):
27919,    count = 0
27920,    for item in x:
27921,"        if item == ""what_you_look_for"":"
27922,        count = count + 1
27923,    return count
27924,return
27925,print
27926,return
27927,print
27928,def fact(x):
27929,    if x < 2:
27930,        return 1
27931,    return x * fact(x - 1)
27932,
27933,print(fact(5))
27934,return
27935,print
27936,return
27937,def
27938,def timestwo(x):
27939,    return x*2
27940,return
27941,print
27942,return
27943,print
27944,stdout/cout
27945,C Programming
27946,"def add(a, b):"
27947,"    print ""ADDING %d + %d"" % (a, b)"
27948,    return a + b
27949,
27950,"def subtract(a, b):"
27951,"    print ""SUBTRACTING %d - %d"" % (a, b)"
27952,    return a - b
27953,
27954,"def multiply(a, b):"
27955,"    print ""MULTIPLYING %d * %d"" % (a, b)"
27956,    return a * b
27957,
27958,"def divide(a, b):"
27959,"    print ""DIVIDING %d / %d"" % (a, b)"
27960,    return a / b
27961,
27962,
27963,"print ""Let's do some math with just functions!"""
27964,
27965,"age = add(30, 5)"
27966,"height = subtract(78, 4)"
27967,"weight = multiply(90, 2)"
27968,"iq = divide(100, 2)"
27969,
27970,"print ""Age: %d, Height: %d, Weight: %d, IQ: %d"" % (age, height, weight, iq)"
27971,
27972,
27973,"# A puzzle for the extra credit, type it in anyway."
27974,"print ""Here is a puzzle."""
27975,
27976,"what = add(age, subtract(height, multiply(weight, divide(iq, 2))))"
27977,
27978,"print ""That becomes: "", what, ""Can you do it by hand?"""
27979,"add, subtract, multiply,"
27980,divide
27981,a + b
27982,add
27983,a
27984,b
27985,a + b
27986,a
27987,b
27988,a + b
27989,print
27990,return
27991,print
27992,return
27993,>>> def example():
27994,...     return 1
27995,... 
27996,>>> example()
27997,1
27998,return
27999,.py
28000,1
28001,>>> 1 + 1
28002,2
28003,1 + 1
28004,print
28005,return
28006,print
28007,>>> def example():
28008,...     return 'test'
28009,... 
28010,>>> print(example())
28011,test
28012,print
28013,repr
28014,example
28015,print
28016,str
28017,print
28018,print
28019,print
28020,None
28021,>>> None
28022,>>> [None][0]
28023,>>> def example():
28024,...     pass # see footnote 4
28025,... 
28026,>>> example()
28027,>>> 
28028,.write
28029,repr
28030,.__repr__
28031,str
28032,.__str__
28033,None
28034,def example(n):
28035,    if n == 5:
28036,       return true
28037,    else:
28038,       return false
28039,def example(n):
28040,    if n == 5:
28041,"       print(""number is equal"")"
28042,    else:
28043,"       print(""number is not equal"")"
28044,application
28045,├── app
28046,│   └── folder
28047,│       └── file.py
28048,└── app2
28049,    └── some_folder
28050,        └── some_file.py
28051,file.py
28052,some_file.py
28053,from application.app.folder.file import func_name
28054,application
28055,app1
28056,app2
28057,folder
28058,some_folder
28059,__init__.py
28060,sys.path
28061,    # some_file.py
28062,    import sys
28063,    # caution: path[0] is reserved for script path (or '' in REPL)
28064,"    sys.path.insert(1, '/path/to/application/app/folder')"
28065,
28066,    import file
28067,sys.path.append('/path/to/application/app/folder')
28068,sys.path
28069,list
28070,deque
28071,list
28072,deque
28073,from application.app.folder.file import func_name
28074,folder
28075,__init__.py
28076,PYTHONPATH
28077,PYTHONPATH
28078,A
28079,B
28080,A
28081,__init.py__
28082,B
28083,A
28084,init.py
28085,__init__.py
28086,application/app2/some_folder/some_file.py
28087,application/app2/another_folder/another_file.py
28088,import sys
28089,sys.path.append('../')
28090,sys.path.append(os.path.dirname(os.path.abspath(__file__)))
28091,cli/foo.py
28092,import cli.bar
28093,sys.path.append('.')
28094,from app2.some_folder.some_file import your_function
28095,python3 -m app2.another_folder.another_file
28096, import sys
28097,"sys.path.insert(0, '/the/folder/path/name-package/')"
28098,from name-package import name-module
28099,sys.path.insert
28100,PYTHONPATH
28101,# Linux & OSX
28102,export PYTHONPATH=$HOME/dirWithScripts/:$PYTHONPATH
28103,
28104,# Windows
28105,set PYTHONPATH=C:\path\to\dirWithScripts\;%PYTHONPATH%
28106,from application.app.folder.file import func_name
28107,from .application.app.folder.file import func_name
28108,main.py
28109,|
28110,---- myfolder/myfile.py
28111,myfile.py
28112,def myfunc():
28113,    print('hello')
28114,main.py
28115,from myfolder.myfile import myfunc
28116,myfunc()
28117,__init__.py
28118,__init__.py
28119,from ...app.folder.file import func_name
28120,__init__.py
28121,python -m application.app2.some_folder.some_file
28122,import ..70_foo.test
28123,import 70_foo
28124,foo.py
28125,def announce():
28126,"    print(""Imported!"")"
28127,import importlib.util
28128,
28129,"def module_from_file(module_name, file_path):"
28130,"    spec = importlib.util.spec_from_file_location(module_name, file_path)"
28131,    module = importlib.util.module_from_spec(spec)
28132,    spec.loader.exec_module(module)
28133,    return module
28134,
28135,"foo = module_from_file(""foo"", ""/path/to/foo.py"")"
28136,
28137,"if __name__ == ""__main__"":"
28138,    print(foo)
28139,    print(dir(foo))
28140,    foo.announce()
28141,<module 'foo' from '/path/to/foo.py'>
28142,"['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'announce']"
28143,Imported!
28144,import importlib.util
28145,
28146,"def module_from_file(module_name, file_path):"
28147,"    spec = importlib.util.spec_from_file_location(module_name, file_path)"
28148,    module = importlib.util.module_from_spec(spec)
28149,    spec.loader.exec_module(module)
28150,    return module
28151,
28152,"baz = module_from_file(""bar"", ""/path/to/foo.py"")"
28153,
28154,"if __name__ == ""__main__"":"
28155,    print(baz)
28156,    print(dir(baz))
28157,    baz.announce()
28158,<module 'bar' from '/path/to/foo.py'>
28159,"['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'announce']"
28160,Imported!
28161,__init__.py
28162,sys.path.append(tools_dir)
28163,__init__.py' file in my directory 
28164,sys.path.append
28165,os.path
28166,/home/me/application/app2/some_folder/vanilla.py
28167,/home/me/application/app2/another_folder/mango.py
28168,"import sys, os.path"
28169,"mango_dir = (os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))"
28170,+ '/another_folder/')
28171,sys.path.append(mango_dir)
28172,import mango
28173,>>> import os
28174,>>> mydir = '/home/me/application/app2/some_folder'
28175,">>> newdir = os.path.abspath(os.path.join(mydir, '..'))"
28176,>>> newdir
28177,    '/home/me/application/app2'
28178,">>> newdir = os.path.abspath(os.path.join(mydir, '..')) + '/another_folder'"
28179,>>> 
28180,>>> newdir
28181,'/home/me/application/app2/another_folder'
28182,>>> 
28183,"import os, sys"
28184,
28185,"from os.path import dirname, join, abspath"
28186,"sys.path.insert(0, abspath(join(dirname(__file__), '..')))"
28187,
28188,from root_folder import file_name
28189,bazel
28190,import sys  
28191,sys.path.append(pathToFolderContainingScripts)  
28192,from scriptName import functionName #scriptName without .py extension  
28193,"sys.path.append(""/home/linux/folder/"")"
28194,"""~/folder/"""
28195,application
28196,__init__.py
28197,application
28198,app
28199,folder
28200,some_file.py
28201,import sys
28202,"sys.path.insert(0, r'/from/root/directory/application')"
28203,
28204,from application.app.folder.file import func_name ## You can also use '*' wildcard to import all the functions in file.py file.
28205,func_name()
28206,main_module.py
28207,main_module.py
28208, package/
28209,    |
28210,    |----- __init__.py (Empty file)
28211,    |------- main_module.py (Contains: import subpackage_1.module_1)        
28212,"    |------- module_0.py (Contains: print('module_0 at parent directory, is imported'))"
28213,    |           
28214,    |
28215,    |------- subpackage_1/
28216,    |           |
28217,    |           |----- __init__.py (Empty file)
28218,    |           |----- module_1.py (Contains: print('importing other modules from module_1...')
28219,    |           |                             import module_0
28220,    |           |                             import subpackage_2.module_2
28221,    |           |                             import subpackage_1.sub_subpackage_3.module_3)
28222,    |           |----- photo.png
28223,    |           |
28224,    |           |
28225,    |           |----- sub_subpackage_3/
28226,    |                        |
28227,    |                        |----- __init__.py (Empty file)
28228,"    |                        |----- module_3.py (Contains: print('module_3 at sub directory, is imported')) "
28229,    |
28230,    |------- subpackage_2/
28231,    |           |
28232,    |           |----- __init__.py (Empty file)
28233,"    |           |----- module_2.py (Contains: print('module_2 at same level directory, is imported'))"
28234,main_module.py
28235,>>>'importing other modules from module_1...'
28236,"   'module_0 at parent directory, is imported'"
28237,"   'module_2 at same level directory, is imported'"
28238,"   'module_3 at sub directory, is imported'"
28239,main_module.py
28240,photo.png
28241,module_1.py
28242,module_1.py
28243,image_path = 'subpackage_1/photo.png'
28244,cv2.imread(image_path)
28245,image_path = 'photo.png'
28246,cv2.imread(image_path)
28247,module_1.py
28248,photo.png
28249,├───root
28250,│   ├───dir_a
28251,│   │   ├───file_a.py
28252,│   │   └───file_xx.py
28253,│   ├───dir_b
28254,│   │   ├───file_b.py
28255,│   │   └───file_yy.py
28256,│   ├───dir_c
28257,│   └───dir_n
28258,PYTHONPATH
28259,sys.path
28260,# file_b.py
28261,
28262,import sys
28263,"sys.path.insert(0, '..')"
28264,
28265,from dir_a.file_a import func_name
28266,# some_file.py on mainApp/app2 
28267,import sys
28268,"sys.path.insert(0, sys.path[0]+'\\app2')"
28269,
28270,import some_file
28271,# /opt/path/to/code/log_helper.py
28272,class LogHelper:
28273,    # stuff here
28274,import sys
28275,"sys.path.append(""/opt/path/to/code/"")"
28276,from log_helper import LogHelper
28277,sys.path
28278,\
28279,/
28280,\
28281,sys.path.append('c:\\tools\\mydir')
28282,sys.path.append('..\\mytools')
28283,sys.path.append('c:/tools/mydir')
28284,sys.path.append('../mytools')
28285,/
28286,\
28287,__init__.py
28288,Project 
28289,├── main.py
28290,├── .gitignore
28291,|
28292,├── a
28293,|   └── file_a.py
28294,|
28295,└── b
28296,    └── file_b.py
28297,file_b.py
28298,A
28299,file_a.py
28300,try catch
28301,import sys
28302,try:
28303,    # The insertion index should be 1 because index 0 is this file
28304,"    sys.path.insert(1, '/absolute/path/to/folder/a')  # the type of path is string"
28305,    # because the system path already have the absolute path to folder a
28306,    # so it can recognize file_a.py while searching 
28307,    from file_a import A
28308,"except (ModuleNotFoundError, ImportError) as e:"
28309,"    print(""{} fileure"".format(type(e)))"
28310,else:
28311,"    print(""Import succeeded"")"
28312,try:
28313,    from __future__ import absolute_import
28314,    # now it can reach class A of file_a.py in folder a 
28315,    # by relative import
28316,    from ..a.file_a import A  
28317,"except (ModuleNotFoundError, ImportError) as e:"
28318,"    print(""{} fileure"".format(type(e)))"
28319,else:
28320,"    print(""Import succeeded"")"
28321,a
28322,pip install a
28323,.
28324,├── setup.py
28325,├── MANIFEST.in
28326,└── a
28327,    ├── __init__.py
28328,    ├── a.py
28329,    └── b
28330,        ├── __init__.py
28331,        └── b.py
28332,from setuptools import setup
28333,
28334,setup (
28335,"  name='a',"
28336,"  version='0.0.1',"
28337,"  packages=['a'],"
28338,  package_data={
28339,"    'a': ['b/*'],"
28340,"  },"
28341,)
28342,recursive-include b *.*
28343,from __future__ import absolute_import
28344,
28345,from a.a import cats
28346,import a.b
28347,cats = 0
28348,from __future__ import absolute_import
28349,
28350,from a.b.b import dogs
28351,dogs = 1
28352,MANIFEST.in
28353,python setup.py install
28354,/moustache/armwrestle
28355,import a
28356,dir(a)
28357,a.cats
28358,a.b.dogs
28359,import ...
28360,from <MySubFolder> import <MyFile>
28361,python application/app2/some_folder/some_file.py
28362,python -m application.app2.some_folder.some_file
28363,__init__.py
28364,application
28365,├── app
28366,│   └── folder
28367,│       └── file.py
28368,└── app2
28369,    └── some_folder
28370,        └── some_file.py
28371,import sys
28372,"sys.path.insert(1, 'C:\\Users\\<Your Username>\\application')"
28373,import app2.some_folder.some_file
28374,
28375,some_file.hello_world()
28376,import sys
28377,sys.path.append( '.' )
28378,import app2.some_folder.some_file
28379,
28380,some_file.hello_world()
28381,for path in sys.path:
28382,    print(path)
28383,sys.path.append('..')
28384,def import_module_by_path(path):
28385,    name = os.path.splitext(os.path.basename(path))[0]
28386,    if sys.version_info[0] == 2:   
28387,        # Python 2
28388,        import imp
28389,"        return imp.load_source(name, path)"
28390,"    elif sys.version_info[:2] <= (3, 4):  "
28391,"        # Python 3, version <= 3.4"
28392,        from importlib.machinery import SourceFileLoader
28393,"        return SourceFileLoader(name, path).load_module()"
28394,    else:                            
28395,"        # Python 3, after 3.4"
28396,        import importlib.util
28397,"        spec = importlib.util.spec_from_file_location(name, path)"
28398,        mod = importlib.util.module_from_spec(spec)
28399,        spec.loader.exec_module(mod)
28400,        return mod
28401,psutils.test.__init__.py
28402,"script = ""/home/username/Documents/some_script.py"""
28403,some_module = import_module_by_path(script)
28404,print(some_module.foo())
28405,spec_from_file_location
28406,skylake\
28407,   backend\
28408,      apps\
28409,          example.py
28410,      configuration\
28411,          settings.py
28412,   frontend\
28413,      ...some_stuff
28414,from configuration import settings
28415,"sys.path.extend(['D:\\projects\\skylake', 'D:/projects/skylake'])"
28416,import importlib
28417,
28418,scriptName = 'Snake'
28419,
28420,script = importlib.import_module('Scripts\\.%s' % scriptName)
28421,scriptName
28422,script
28423,Hello()
28424,script.Hello()
28425,ln -s ~/path/to/original/module/my_module ~/symlink/inside/the/destination/directory/my_module
28426,Project 
28427,├── main.py
28428,├── .gitignore
28429,|
28430,├── src
28431,     ├────model
28432,     |    └── user_model.py
28433,     |────controller
28434,          └── user_controller.py
28435,from src.model.user_model.py import UserModel
28436,from src.model.user_model.py import UserModel
28437,__init__.py
28438,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28439,sorted()
28440,"['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']"
28441,">>> from natsort import natsorted, ns"
28442,">>> x = ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']"
28443,">>> natsorted(x, key=lambda y: y.lower())"
28444,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28445,">>> natsorted(x, alg=ns.IGNORECASE)  # or alg=ns.IC"
28446,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28447,natsort
28448,natsort
28449,">>> from natsort import natsort_keygen, ns"
28450,">>> l1 = ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28451,>>> l2 = l1[:]
28452,>>> natsort_key1 = natsort_keygen(key=lambda y: y.lower())
28453,>>> l1.sort(key=natsort_key1)
28454,>>> l1
28455,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28456,>>> natsort_key2 = natsort_keygen(alg=ns.IGNORECASE)
28457,>>> l2.sort(key=natsort_key2)
28458,>>> l2
28459,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28460,natsort
28461,os_sorted
28462,>>> from natsort import os_sorted
28463,>>> os_sorted(list_of_paths)
28464,# your paths sorted like your file system browser
28465,os_sort_keygen
28466,os_sort_key
28467,natsort
28468,"['!2020', '.2020', '2020']"
28469,"['2020', '!2020', '.2020']"
28470,os_sorted
28471,import re
28472,
28473,def natural_sort(l): 
28474,    convert = lambda text: int(text) if text.isdigit() else text.lower()
28475,"    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]"
28476,"    return sorted(l, key=alphanum_key)"
28477,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28478,"return sorted(l, key)"
28479,l.sort(key)
28480,"re.split('([0-9]+)', '0foo')"
28481,"['', '0', 'foo']"
28482,import re
28483,
28484,"def natural_sort_key(s, _nsre=re.compile('([0-9]+)')):"
28485,    return [int(text) if text.isdigit() else text.lower()
28486,            for text in _nsre.split(s)]
28487,list.sort
28488,sorted
28489,max
28490,"lambda s: [int(t) if t.isdigit() else t.lower() for t in re.split('(\d+)', s)]"
28491,import re
28492,"natsort = lambda s: [int(t) if t.isdigit() else t.lower() for t in re.split('(\d+)', s)]"
28493,"L = [""a1"", ""a10"", ""a11"", ""a2"", ""a22"", ""a3""]   "
28494,"print(sorted(L, key=natsort))  "
28495,"# ['a1', 'a2', 'a3', 'a10', 'a11', 'a22'] "
28496,Path
28497,_nsre.split(s)
28498,_nsre.split(str(s))
28499,s
28500,str(s)
28501,"data = ['elm13', 'elm9', 'elm0', 'elm1', 'Elm11', 'Elm2', 'elm10']"
28502,'elm'
28503,data.sort(key=lambda x: '{0:0>8}'.format(x).lower())
28504,print(data)
28505,
28506,">>> ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'elm13']"
28507,for elm in data:
28508,    print('{0:0>8}'.format(elm).lower())
28509,
28510,>>>
28511,0000elm0
28512,0000elm1
28513,0000elm2
28514,0000elm9
28515,000elm10
28516,000elm11
28517,000elm13
28518,"width = max(data, key=len)"
28519,8
28520,"'{0:0>{width}}'.format(x, width=width)"
28521,"data = ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']"
28522,data.sort(key=lambda x: int(x[3:]))
28523,"sorted_data = sorted(data, key=lambda x: int(x[3:]))"
28524,import re
28525,
28526,"def natural_sort(list, key=lambda s:s):"
28527,"    """""""
28528,    Sort the list into natural alphanumeric order.
28529,"    """""""
28530,    def get_alphanum_key_func(key):
28531,        convert = lambda text: int(text) if text.isdigit() else text 
28532,"        return lambda s: [convert(c) for c in re.split('([0-9]+)', key(s))]"
28533,    sort_key = get_alphanum_key_func(key)
28534,    list.sort(key=sort_key)
28535,"my_list = [{'name':'b'}, {'name':'10'}, {'name':'a'}, {'name':'1'}, {'name':'9'}]"
28536,"natural_sort(my_list, key=lambda x: x['name'])"
28537,print my_list
28538,"[{'name': '1'}, {'name': '9'}, {'name': '10'}, {'name': 'a'}, {'name': 'b'}]"
28539,natural_sort_key
28540,list.sort(key=lambda el: natural_sort_key(el['name']))
28541,"from re import compile, split    "
28542,dre = compile(r'(\d+)')
28543,"mylist.sort(key=lambda l: [int(s) if s.isdigit() else s.lower() for s in split(dre, l)])"
28544,#!/usr/bin/python3
28545,# coding=utf-8
28546,""""""""
28547,Natural-Sort Test
28548,""""""""
28549,
28550,"from re import compile, split"
28551,
28552,dre = compile(r'(\d+)')
28553,"mylist = ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13', 'elm']"
28554,"mylist2 = ['e0lm', 'e1lm', 'E2lm', 'e9lm', 'e10lm', 'E12lm', 'e13lm', 'elm', 'e01lm']"
28555,
28556,"mylist.sort(key=lambda l: [int(s) if s.isdigit() else s.lower() for s in split(dre, l)])"
28557,"mylist2.sort(key=lambda l: [int(s) if s.isdigit() else s.lower() for s in split(dre, l)])"
28558,
28559,print(mylist)  
28560,"  # ['elm', 'elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28561,print(mylist2)  
28562,"  # ['e0lm', 'e1lm', 'e01lm', 'E2lm', 'e9lm', 'e10lm', 'E12lm', 'e13lm', 'elm']"
28563,from os.path import split
28564,find_first_digit
28565,split_digits
28566,yield
28567,natural_key
28568,split_digits
28569,tuple
28570,sorted
28571,max
28572,min
28573,"def find_first_digit(s, non=False):"
28574,"    for i, x in enumerate(s):"
28575,        if x.isdigit() ^ non:
28576,            return i
28577,    return -1
28578,
28579,"def split_digits(s, case=False):"
28580,    non = True
28581,    while s:
28582,"        i = find_first_digit(s, non)"
28583,        if i == 0:
28584,            non = not non
28585,        elif i == -1:
28586,            yield int(s) if s.isdigit() else s if case else s.lower()
28587,            s = ''
28588,        else:
28589,"            x, s = s[:i], s[i:]"
28590,            yield int(x) if x.isdigit() else x if case else x.lower()
28591,
28592,"def natural_key(s, *args, **kwargs):"
28593,"    return tuple(split_digits(s, *args, **kwargs))"
28594,# Note that the key has lower case letters
28595,natural_key('asl;dkfDFKJ:sdlkfjdf809lkasdjfa_543_hh')
28596,
28597,"('asl;dkfdfkj:sdlkfjdf', 809, 'lkasdjfa_', 543, '_hh')"
28598,"natural_key('asl;dkfDFKJ:sdlkfjdf809lkasdjfa_543_hh', True)"
28599,
28600,"('asl;dkfDFKJ:sdlkfjdf', 809, 'lkasdjfa_', 543, '_hh')"
28601,sorted(
28602,"    ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13'],"
28603,    key=natural_key
28604,)
28605,
28606,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28607,sorted(
28608,"    ['f_1', 'e_1', 'a_2', 'g_0', 'd_0_12:2', 'd_0_1_:2'],"
28609,    key=natural_key
28610,)
28611,
28612,"['a_2', 'd_0_1_:2', 'd_0_12:2', 'e_1', 'f_1', 'g_0']"
28613,def int_maybe(x):
28614,    return int(x) if str(x).isdigit() else x
28615,
28616,"def split_digits_re(s, case=False):"
28617,"    parts = re.findall('\d+|\D+', s)"
28618,    if not case:
28619,"        return map(int_maybe, (x.lower() for x in parts))"
28620,    else:
28621,"        return map(int_maybe, parts)"
28622,    
28623,"def natural_key_re(s, *args, **kwargs):"
28624,"    return tuple(split_digits_re(s, *args, **kwargs))"
28625,"alist=[""something1"","
28626,"    ""something12"","
28627,"    ""something17"","
28628,"    ""something2"","
28629,"    ""something25and_then_33"","
28630,"    ""something25and_then_34"","
28631,"    ""something29"","
28632,"    ""beta1.1"","
28633,"    ""beta2.3.0"","
28634,"    ""beta2.33.1"","
28635,"    ""a001"","
28636,"    ""a2"","
28637,"    ""z002"","
28638,"    ""z1""]"
28639,
28640,def key(k):
28641,"    nums=set(list(""0123456789""))"
28642,        chars=set(list(k))
28643,    chars=chars-nums
28644,    for i in range(len(k)):
28645,        for c in chars:
28646,"            k=k.replace(c+""0"",c)"
28647,    l=list(k)
28648,    base=10
28649,    j=0
28650,"    for i in range(len(l)-1,-1,-1):"
28651,        try:
28652,            l[i]=int(l[i])*base**j
28653,            j+=1
28654,        except:
28655,            j=0
28656,    l=tuple(l)
28657,    print l
28658,    return l
28659,
28660,"print sorted(alist,key=key)"
28661,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 1)"
28662,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 10, 2)"
28663,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 10, 7)"
28664,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 2)"
28665,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 20, 5, 'a', 'n', 'd', '_', 't', 'h', 'e', 'n', '_', 30, 3)"
28666,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 20, 5, 'a', 'n', 'd', '_', 't', 'h', 'e', 'n', '_', 30, 4)"
28667,"('s', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', 20, 9)"
28668,"('b', 'e', 't', 'a', 1, '.', 1)"
28669,"('b', 'e', 't', 'a', 2, '.', 3, '.')"
28670,"('b', 'e', 't', 'a', 2, '.', 30, 3, '.', 1)"
28671,"('a', 1)"
28672,"('a', 2)"
28673,"('z', 2)"
28674,"('z', 1)"
28675,"['a001', 'a2', 'beta1.1', 'beta2.3.0', 'beta2.33.1', 'something1', 'something2', 'something12', 'something17', 'something25and_then_33', 'something25and_then_34', 'something29', 'z1', 'z002']"
28676,"('b', 1) < ('b', 'e', 't', 'a', 1, '.', 1)"
28677,TypeError: unorderable types: int() < str()
28678,natsort
28679,import re
28680,
28681,"def natural_sort_key(s, _re=re.compile(r'(\d+)')):"
28682,"    return [int(t) if i & 1 else t.lower() for i, t in enumerate(_re.split(s))]"
28683,
28684,...
28685,"my_naturally_sorted_list = sorted(my_list, key=natural_sort_key)"
28686,def
28687,natural_sorted
28688,sorted
28689,"# Copyright (C) 2018, Benjamin Drung <bdrung@posteo.de>"
28690,#
28691,"# Permission to use, copy, modify, and/or distribute this software for any"
28692,"# purpose with or without fee is hereby granted, provided that the above"
28693,# copyright notice and this permission notice appear in all copies.
28694,#
28695,"# THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES"
28696,# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
28697,# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
28698,"# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES"
28699,"# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN"
28700,"# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF"
28701,# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
28702,
28703,import re
28704,
28705,"def natural_sorted(iterable, key=None, reverse=False):"
28706,"    """"""Return a new naturally sorted list from the items in *iterable*."
28707,
28708,    The returned list is in natural sort order. The string is ordered
28709,    lexicographically (using the Unicode code point number to order individual
28710,"    characters), except that multi-digit numbers are ordered as a single"
28711,    character.
28712,
28713,    Has two optional arguments which must be specified as keyword arguments.
28714,
28715,    *key* specifies a function of one argument that is used to extract a
28716,    comparison key from each list element: ``key=str.lower``.  The default value
28717,    is ``None`` (compare the elements directly).
28718,
28719,"    *reverse* is a boolean value.  If set to ``True``, then the list elements are"
28720,    sorted as if each comparison were reversed.
28721,
28722,    The :func:`natural_sorted` function is guaranteed to be stable. A sort is
28723,    stable if it guarantees not to change the relative order of elements that
28724,    compare equal --- this is helpful for sorting in multiple passes (for
28725,"    example, sort by department, then by salary grade)."
28726,"    """""""
28727,"    prog = re.compile(r""(\d+)"")"
28728,
28729,    def alphanum_key(element):
28730,"        """"""Split given key in list of strings and digits"""""""
28731,        return [int(c) if c.isdigit() else c for c in prog.split(key(element)
28732,                if key else element)]
28733,
28734,"    return sorted(iterable, key=alphanum_key, reverse=reverse)"
28735,padzero_with_lower
28736,import re
28737,
28738,def padzero_with_lower(s):
28739,"    return re.sub(r'\d+', lambda m: m.group(0).rjust(10, '0'), s).lower()"
28740,print(padzero_with_lower('file1.txt'))   # file0000000001.txt
28741,print(padzero_with_lower('file12.txt'))  # file0000000012.txt
28742,print(padzero_with_lower('file23.txt'))  # file0000000023.txt
28743,print(padzero_with_lower('file123.txt')) # file0000000123.txt
28744,print(padzero_with_lower('file301.txt')) # file0000000301.txt
28745,print(padzero_with_lower('Dir2/file15.txt'))  # dir0000000002/file0000000015.txt
28746,print(padzero_with_lower('dir2/file123.txt')) # dir0000000002/file0000000123.txt
28747,print(padzero_with_lower('dir15/file2.txt'))  # dir0000000015/file0000000002.txt
28748,print(padzero_with_lower('Dir15/file15.txt')) # dir0000000015/file0000000015.txt
28749,print(padzero_with_lower('elm0'))  # elm0000000000
28750,print(padzero_with_lower('elm1'))  # elm0000000001
28751,print(padzero_with_lower('Elm2'))  # elm0000000002
28752,print(padzero_with_lower('elm9'))  # elm0000000009
28753,print(padzero_with_lower('elm10')) # elm0000000010
28754,print(padzero_with_lower('Elm11')) # elm0000000011 
28755,print(padzero_with_lower('Elm12')) # elm0000000012
28756,print(padzero_with_lower('elm13')) # elm0000000013
28757,"lis = ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28758,lis.sort(key=padzero_with_lower)
28759,print(lis)
28760,"# Output: ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28761,"List[Tuple(str, int)]"
28762,"def string_to_pairs(s, pairs=re.compile(r""(\D*)(\d*)"").findall):"
28763,"    return [(text.lower(), int(digits or 0)) for (text, digits) in pairs(s)[:-1]]"
28764,"sorted(['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9'], key=string_to_pairs)"
28765,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
28766,"assert string_to_pairs("""") == []"
28767,"assert string_to_pairs(""123"") == [("""", 123)]"
28768,"assert string_to_pairs(""abc"") == [(""abc"", 0)]"
28769,"assert string_to_pairs(""123abc"") == [("""", 123), (""abc"", 0)]"
28770,"assert string_to_pairs(""abc123"") == [(""abc"", 123)]"
28771,"assert string_to_pairs(""123abc456"") == [("""", 123), (""abc"", 456)]"
28772,"assert string_to_pairs(""abc123efg"") == [(""abc"", 123), (""efg"", 0)]"
28773,# Some extracts from the test suite of the natsort library. Permalink:
28774,# https://github.com/SethMMorton/natsort/blob/e3c32f5638bf3a0e9a23633495269bea0e75d379/tests/test_natsorted.py
28775,
28776,sort_data = [
28777,    (  # same as test_natsorted_can_sort_as_unsigned_ints_which_is_default()
28778,"        [""a50"", ""a51."", ""a50.31"", ""a-50"", ""a50.4"", ""a5.034e1"", ""a50.300""],"
28779,"        [""a5.034e1"", ""a50"", ""a50.4"", ""a50.31"", ""a50.300"", ""a51."", ""a-50""],"
28780,"    ),"
28781,    (  # same as test_natsorted_numbers_in_ascending_order()
28782,"        [""a2"", ""a5"", ""a9"", ""a1"", ""a4"", ""a10"", ""a6""],"
28783,"        [""a1"", ""a2"", ""a4"", ""a5"", ""a6"", ""a9"", ""a10""],"
28784,"    ),"
28785,    (  # same as test_natsorted_can_sort_as_version_numbers()
28786,"        [""1.9.9a"", ""1.11"", ""1.9.9b"", ""1.11.4"", ""1.10.1""],"
28787,"        [""1.9.9a"", ""1.9.9b"", ""1.10.1"", ""1.11"", ""1.11.4""],"
28788,"    ),"
28789,    (  # different from test_natsorted_handles_filesystem_paths()
28790,        [
28791,"            ""/p/Folder (10)/file.tar.gz"","
28792,"            ""/p/Folder (1)/file (1).tar.gz"","
28793,"            ""/p/Folder/file.x1.9.tar.gz"","
28794,"            ""/p/Folder (1)/file.tar.gz"","
28795,"            ""/p/Folder/file.x1.10.tar.gz"","
28796,"        ],"
28797,        [
28798,"            ""/p/Folder (1)/file (1).tar.gz"","
28799,"            ""/p/Folder (1)/file.tar.gz"","
28800,"            ""/p/Folder (10)/file.tar.gz"","
28801,"            ""/p/Folder/file.x1.9.tar.gz"","
28802,"            ""/p/Folder/file.x1.10.tar.gz"","
28803,"        ],"
28804,"    ),"
28805,    (  # same as test_natsorted_path_extensions_heuristic()
28806,        [
28807,"            ""Try.Me.Bug - 09 - One.Two.Three.[text].mkv"","
28808,"            ""Try.Me.Bug - 07 - One.Two.5.[text].mkv"","
28809,"            ""Try.Me.Bug - 08 - One.Two.Three[text].mkv"","
28810,"        ],"
28811,        [
28812,"            ""Try.Me.Bug - 07 - One.Two.5.[text].mkv"","
28813,"            ""Try.Me.Bug - 08 - One.Two.Three[text].mkv"","
28814,"            ""Try.Me.Bug - 09 - One.Two.Three.[text].mkv"","
28815,"        ],"
28816,"    ),"
28817,    (  # same as ns.IGNORECASE for test_natsorted_supports_case_handling()
28818,"        [""Apple"", ""corn"", ""Corn"", ""Banana"", ""apple"", ""banana""],"
28819,"        [""Apple"", ""apple"", ""Banana"", ""banana"", ""corn"", ""Corn""],"
28820,"    ),"
28821,
28822,]
28823,
28824,"for (given, expected) in sort_data:"
28825,"    assert sorted(given, key=string_to_pairs) == expected"
28826,string_to_pairs()
28827,remove_diacritics()
28828,def natural_sort_key(string_or_number):
28829,"    """""""
28830,    by Scott S. Lawton <scott@ProductArchitect.com> 2014-12-11; public domain and/or CC0 license
28831,
28832,"    handles cases where simple 'int' approach fails, e.g."
28833,"        ['0.501', '0.55'] floating point with different number of significant digits"
28834,"        [0.01, 0.1, 1]    already numeric so regex and other string functions won't work (and aren't required)"
28835,"        ['elm1', 'Elm2']  ASCII vs. letters (not case sensitive)"
28836,"    """""""
28837,
28838,    def try_float(astring):
28839,        try:
28840,            return float(astring)
28841,        except:
28842,            return astring
28843,
28844,"    if isinstance(string_or_number, basestring):"
28845,        string_or_number = string_or_number.lower()
28846,
28847,"        if len(re.findall('[.]\d', string_or_number)) <= 1:"
28848,"            # assume a floating point value, e.g. to correctly sort ['0.501', '0.55']"
28849,"            # '.' for decimal is locale-specific, e.g. correct for the Anglosphere and Asia but not continental Europe"
28850,"            return [try_float(s) for s in re.split(r'([\d.]+)', string_or_number)]"
28851,        else:
28852,"            # assume distinct fields, e.g. IP address, phone number with '.', etc."
28853,            # caveat: might want to first split by whitespace
28854,"            # TBD: for unicode, replace isdigit with isdecimal"
28855,"            return [int(s) if s.isdigit() else s for s in re.split(r'(\d+)', string_or_number)]"
28856,    else:
28857,        # consider: add code to recurse for lists/tuples and perhaps other iterables
28858,        return string_or_number
28859,natsorted
28860,humansorted
28861,natsorted
28862,natsort_keygen()
28863,functools.cmp_to_key()
28864,"Python 2.7.12 (default, Sep 29 2016, 13:30:34) "
28865,">>> (0,""foo"") < (""foo"",0)"
28866,True  
28867,"Python 3.5.2 (default, Oct 14 2016, 12:54:53) "
28868,">>> (0,""foo"") < (""foo"",0)"
28869,Traceback (most recent call last):
28870,"  File ""<stdin>"", line 1, in <module>"
28871,  TypeError: unorderable types: int() < str()
28872,Iterable
28873,str
28874,str
28875,d = lambda s: s.lower()+s.swapcase()
28876,object
28877,functools.total_ordering
28878,import functools
28879,import itertools
28880,
28881,
28882,@functools.total_ordering
28883,class NaturalStringA(str):
28884,    def __repr__(self):
28885,"        return ""{}({})"".format\"
28886,            ( type(self).__name__
28887,"            , super().__repr__()"
28888,            )
28889,"    d = lambda c, s: [ c.NaturalStringPart("""".join(v))"
28890,"                        for k,v in"
28891,"                       itertools.groupby(s, c.isdigit)"
28892,                     ]
28893,    d = classmethod(d)
28894,    @functools.total_ordering
28895,    class NaturalStringPart(str):
28896,"        d = lambda s: """".join(c.lower()+c.swapcase() for c in s)"
28897,        d = staticmethod(d)
28898,"        def __lt__(self, other):"
28899,"            if not isinstance(self, type(other)):"
28900,                return NotImplemented
28901,            try:
28902,                return int(self) < int(other)
28903,            except ValueError:
28904,                if self.isdigit():
28905,                    return True
28906,                elif other.isdigit():
28907,                    return False
28908,                else:
28909,                    return self.d(self) < self.d(other)
28910,"        def __eq__(self, other):"
28911,"            if not isinstance(self, type(other)):"
28912,                return NotImplemented
28913,            try:
28914,                return int(self) == int(other)
28915,            except ValueError:
28916,                if self.isdigit() or other.isdigit():
28917,                    return False
28918,                else:
28919,                    return self.d(self) == self.d(other)
28920,        __le__ = object.__le__
28921,        __ne__ = object.__ne__
28922,        __gt__ = object.__gt__
28923,        __ge__ = object.__ge__
28924,"    def __lt__(self, other):"
28925,        return self.d(self) < self.d(other)
28926,"    def __eq__(self, other):"
28927,        return self.d(self) == self.d(other)
28928,    __le__ = object.__le__
28929,    __ne__ = object.__ne__
28930,    __gt__ = object.__gt__
28931,    __ge__ = object.__ge__
28932,import functools
28933,import itertools
28934,
28935,
28936,@functools.total_ordering
28937,class NaturalStringB(str):
28938,    def __repr__(self):
28939,"        return ""{}({})"".format\"
28940,            ( type(self).__name__
28941,"            , super().__repr__()"
28942,            )
28943,"    d = lambda s: """".join(c.lower()+c.swapcase() for c in s)"
28944,    d = staticmethod(d)
28945,"    def __lt__(self, other):"
28946,"        if not isinstance(self, type(other)):"
28947,            return NotImplemented
28948,"        groups = map(lambda i: itertools.groupby(i, type(self).isdigit), (self, other))"
28949,        zipped = itertools.zip_longest(*groups)
28950,"        for s,o in zipped:"
28951,            if s is None:
28952,                return True
28953,            if o is None:
28954,                return False
28955,"            s_k, s_v = s[0], """".join(s[1])"
28956,"            o_k, o_v = o[0], """".join(o[1])"
28957,            if s_k and o_k:
28958,"                s_v, o_v = int(s_v), int(o_v)"
28959,                if s_v == o_v:
28960,                    continue
28961,                return s_v < o_v
28962,            elif s_k:
28963,                return True
28964,            elif o_k:
28965,                return False
28966,            else:
28967,"                s_v, o_v = self.d(s_v), self.d(o_v)"
28968,                if s_v == o_v:
28969,                    continue
28970,                return s_v < o_v
28971,        return False
28972,"    def __eq__(self, other):"
28973,"        if not isinstance(self, type(other)):"
28974,            return NotImplemented
28975,"        groups = map(lambda i: itertools.groupby(i, type(self).isdigit), (self, other))"
28976,        zipped = itertools.zip_longest(*groups)
28977,"        for s,o in zipped:"
28978,            if s is None or o is None:
28979,                return False
28980,"            s_k, s_v = s[0], """".join(s[1])"
28981,"            o_k, o_v = o[0], """".join(o[1])"
28982,            if s_k and o_k:
28983,"                s_v, o_v = int(s_v), int(o_v)"
28984,                if s_v == o_v:
28985,                    continue
28986,                return False
28987,            elif s_k or o_k:
28988,                return False
28989,            else:
28990,"                s_v, o_v = self.d(s_v), self.d(o_v)"
28991,                if s_v == o_v:
28992,                    continue
28993,                return False
28994,        return True
28995,    __le__ = object.__le__
28996,    __ne__ = object.__ne__
28997,    __gt__ = object.__gt__
28998,    __ge__ = object.__ge__
28999,import functools
29000,import itertools
29001,import enum
29002,
29003,
29004,class OrderingType(enum.Enum):
29005,    PerWordSwapCase         = lambda s: s.lower()+s.swapcase()
29006,"    PerCharacterSwapCase    = lambda s: """".join(c.lower()+c.swapcase() for c in s)"
29007,
29008,
29009,class NaturalOrdering:
29010,    @classmethod
29011,"    def by(cls, ordering):"
29012,        def wrapper(string):
29013,"            return cls(string, ordering)"
29014,        return wrapper
29015,"    def __init__(self, string, ordering=OrderingType.PerCharacterSwapCase):"
29016,        self.string = string
29017,"        self.groups = [ (k,int("""".join(v)))"
29018,                            if k else
29019,"                        (k,ordering("""".join(v)))"
29020,"                            for k,v in"
29021,"                        itertools.groupby(string, str.isdigit)"
29022,                      ]
29023,    def __repr__(self):
29024,"        return ""{}({})"".format\"
29025,            ( type(self).__name__
29026,"            , self.string"
29027,            )
29028,"    def __lesser(self, other, default):"
29029,"        if not isinstance(self, type(other)):"
29030,            return NotImplemented
29031,"        for s,o in itertools.zip_longest(self.groups, other.groups):"
29032,            if s is None:
29033,                return True
29034,            if o is None:
29035,                return False
29036,"            s_k, s_v = s"
29037,"            o_k, o_v = o"
29038,            if s_k and o_k:
29039,                if s_v == o_v:
29040,                    continue
29041,                return s_v < o_v
29042,            elif s_k:
29043,                return True
29044,            elif o_k:
29045,                return False
29046,            else:
29047,                if s_v == o_v:
29048,                    continue
29049,                return s_v < o_v
29050,        return default
29051,"    def __lt__(self, other):"
29052,"        return self.__lesser(other, default=False)"
29053,"    def __le__(self, other):"
29054,"        return self.__lesser(other, default=True)"
29055,"    def __eq__(self, other):"
29056,"        if not isinstance(self, type(other)):"
29057,            return NotImplemented
29058,"        for s,o in itertools.zip_longest(self.groups, other.groups):"
29059,            if s is None or o is None:
29060,                return False
29061,"            s_k, s_v = s"
29062,"            o_k, o_v = o"
29063,            if s_k and o_k:
29064,                if s_v == o_v:
29065,                    continue
29066,                return False
29067,            elif s_k or o_k:
29068,                return False
29069,            else:
29070,                if s_v == o_v:
29071,                    continue
29072,                return False
29073,        return True
29074,    # functools.total_ordering doesn't create single-call wrappers if both
29075,"    # __le__ and __lt__ exist, so do it manually."
29076,"    def __gt__(self, other):"
29077,        op_result = self.__le__(other)
29078,        if op_result is NotImplemented:
29079,            return op_result
29080,        return not op_result
29081,"    def __ge__(self, other):"
29082,        op_result = self.__lt__(other)
29083,        if op_result is NotImplemented:
29084,            return op_result
29085,        return not op_result
29086,"    # __ne__ is the only implied ordering relationship, it automatically"
29087,    # delegates to __eq__
29088,>>> import natsort
29089,>>> import timeit
29090,">>> l1 = ['Apple', 'corn', 'apPlE', 'arbour', 'Corn', 'Banana', 'apple', 'banana']"
29091,">>> l2 = list(map(str, range(30)))"
29092,">>> l3 = [""{} {}"".format(x,y) for x in l1 for y in l2]"
29093,">>> print(timeit.timeit('sorted(l3+[""0""], key=NaturalStringA)', number=10000, globals=globals()))"
29094,362.4729259099986
29095,">>> print(timeit.timeit('sorted(l3+[""0""], key=NaturalStringB)', number=10000, globals=globals()))"
29096,189.7340817489967
29097,">>> print(timeit.timeit('sorted(l3+[""0""], key=NaturalOrdering.by(OrderingType.PerCharacterSwapCase))', number=10000, globals=globals()))"
29098,69.34636392899847
29099,">>> print(timeit.timeit('natsort.natsorted(l3+[""0""], alg=natsort.ns.GROUPLETTERS | natsort.ns.LOWERCASEFIRST)', number=10000, globals=globals()))"
29100,98.2531585780016
29101,unicodedata.normalize(...)
29102,str.casefold()
29103,str.lower()
29104,[0-9]
29105,locale.strxfrm
29106,key
29107,"def natsorted(seq, key=None):"
29108,    def convert(text):
29109,        return int(text) if text.isdigit() else text
29110,
29111,    def alphanum(obj):
29112,        if key is not None:
29113,"            return [convert(c) for c in re.split(r'([0-9]+)', key(obj))]"
29114,"        return [convert(c) for c in re.split(r'([0-9]+)', obj)]"
29115,
29116,"    return sorted(seq, key=alphanum)"
29117,key
29118,"from typing import Tuple, Union, Optional, Generator"
29119,
29120,
29121,"StrOrInt = Union[str, int]"
29122,
29123,
29124,"# On Python 3.6, string concatenation is REALLY fast"
29125,"# Tested myself, and this fella also tested:"
29126,# https://blog.ganssle.io/articles/2019/11/string-concat.html
29127,"def griter(s: str) -> Generator[StrOrInt, None, None]:"
29128,    last_was_digit: Optional[bool] = None
29129,"    cluster: str = """""
29130,    for c in s:
29131,        if last_was_digit is None:
29132,            last_was_digit = c.isdigit()
29133,            cluster += c
29134,            continue
29135,        if c.isdigit() != last_was_digit:
29136,            if last_was_digit:
29137,                yield int(cluster)
29138,            else:
29139,                yield cluster
29140,            last_was_digit = c.isdigit()
29141,"            cluster = """""
29142,        cluster += c
29143,    if last_was_digit:
29144,        yield int(cluster)
29145,    else:
29146,        yield cluster
29147,    return
29148,
29149,
29150,"def grouper(s: str) -> Tuple[StrOrInt, ...]:"
29151,    return tuple(griter(s))
29152,filelist = [
29153,"    'File3', 'File007', 'File3a', 'File10', 'File11', 'File1', 'File4', 'File5',"
29154,"    'File9', 'File8', 'File8b1', 'File8b2', 'File8b11', 'File6'"
29155,]
29156,key=
29157,">>> sorted(filelist, key=grouper)"
29158,"['File1', 'File3', 'File3a', 'File4', 'File5', 'File6', 'File007', 'File8', "
29159,"'File8b1', 'File8b2', 'File8b11', 'File9', 'File10', 'File11']"
29160,isdigit()
29161,isdigit()
29162,\d+
29163,import re
29164,from itertools import cycle
29165,
29166,"_re_digits = re.compile(r""(\d+)"")"
29167,
29168,
29169,def natural_comparison_key(key):
29170,    return tuple(
29171,        int(part) if is_digit else part
29172,"        for part, is_digit in zip(_re_digits.split(key), cycle((False, True)))"
29173,    )
29174,"def natural_sort(l, attrib):"
29175,    convert = lambda text: int(text) if text.isdigit() else text.lower()
29176,"    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key.__dict__[attrib])]"
29177,"    return sorted(l, key=alphanum_key)"
29178,
29179,"results = natural_sort(albums, 'albumid')"
29180,albums
29181,albumid
29182,key
29183,sorted
29184,"to_order= [e2,E1,e5,E4,e3]"
29185,"ordered= sorted(to_order, key= lambda x: x.lower())"
29186,"    # ordered should be [E1,e2,e3,E4,e5]"
29187,a_51
29188,a500
29189,"a = ['H1', 'H100', 'H10', 'H3', 'H2', 'H6', 'H11', 'H50', 'H5', 'H99', 'H8']"
29190,b = ''
29191,c = []
29192,
29193,def bubble(bad_list):#bubble sort method
29194,        length = len(bad_list) - 1
29195,        sorted = False
29196,
29197,        while not sorted:
29198,                sorted = True
29199,                for i in range(length):
29200,                        if bad_list[i] > bad_list[i+1]:
29201,                                sorted = False
29202,"                                bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i] #sort the integer list "
29203,"                                a[i], a[i+1] = a[i+1], a[i] #sort the main list based on the integer list index value"
29204,
29205,for a_string in a: #extract the number in the string character by character
29206,        for letter in a_string:
29207,                if letter.isdigit():
29208,                        #print letter
29209,                        b += letter
29210,        c.append(b)
29211,        b = ''
29212,
29213,print 'Before sorting....'
29214,print a
29215,"c = map(int, c) #converting string list into number list"
29216,print c
29217,bubble(c)
29218,
29219,print 'After sorting....'
29220,print c
29221,print a
29222,>>> import re
29223,">>> sorted(lst, key=lambda x: int(re.findall(r'\d+$', x)[0]))"
29224,"['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']"
29225,selenium.common.exceptions.NoSuchElementException: 
29226,Message: no such element: Unable to locate element
29227,"{""method"":""id"",""selector"":""window1"""
29228,(Session info: chrome=63.0.3239.108
29229,(Driver info: chromedriver=2.34.522913
29230,"(36222509aa6e819815938cbf2709b4849735537c), platform=Linux 4.10.0-42-generic x86_64)"
29231,from selenium import webdriver
29232,from selenium.webdriver.common.action_chains import ActionChains
29233,import time
29234,
29235,browser = webdriver.Chrome()
29236,"browser.set_window_size(640, 480)"
29237,browser.get('http://www.foddy.net/Athletics.html?webgl=true')
29238,browser.implicitly_wait(10)
29239,
29240,"canvas = browser.find_element_by_id(""window1"")"
29241,
29242,canvas.click()
29243,
29244,while (True):
29245,    action = ActionChains(browser)
29246,    action.move_to_element(canvas).perform()
29247,    canvas.click()
29248,"    canvas.send_keys(""q"")"
29249,NoSuchElementException
29250,"exception selenium.common.exceptions.NoSuchElementException(msg=None, screen=None, stacktrace=None)"
29251,NoSuchElementException
29252,"webdriver.find_element_by_*(""expression"")"
29253,"//example : my_element = driver.find_element_by_xpath(""xpath_expression"")"
29254,"element.find_element_by_*(""expression"")"
29255,"//example : my_element = element.find_element_by_*(""expression"")"
29256,selenium.common.exceptions
29257,NoSuchElementException
29258,"    raise exception_class(message, screen, stacktrace)"
29259,"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {""method"":""xpath"",""selector"":"".//*[@id='create-portal-popup']/div[4]/div[1]/button[3]""}"
29260,  (Session info: chrome=61.0.3163.100)
29261,"  (Driver info: chromedriver=2.32.498550 (9dec58e66c31bcc53a9ce3c7226f0c1c5810906a),platform=Windows NT 10.0.10240 x86_64)"
29262,<iframe>
29263,execute_script()
29264,"elem = driver.find_element_by_xpath(""element_xpath"")"
29265,"driver.execute_script(""arguments[0].scrollIntoView();"", elem)"
29266,executeScript()
29267,"elem = driver.find_element_by_xpath(""element_xpath"")"
29268,"driver.execute_script(""arguments[0].removeAttribute('style')"", elem)"
29269,"elem.send_keys(""text_to_send"")"
29270,<iframe>
29271,<iframe>
29272,switchTo()
29273,"driver.switch_to.frame(""iframe_name"")"
29274,"driver.switch_to.frame(""iframe_id"")"
29275,driver.switch_to.frame(1) // 1 represents frame index
29276,"element = WebDriverWait(driver, 20).until(expected_conditions.presence_of_element_located((By.XPATH, ""element_xpath']"")))"
29277,"element = WebDriverWait(driver, 20).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ""element_css"")"
29278,"element = WebDriverWait(driver, 20).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, ""element_link_text"")))"
29279,NoSuchElementException
29280,click()
29281,clickable
29282,"WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, ""//canvas[@id='window1']""))).click()"
29283,"[1, 2, 3, 1]  →  [1, 2, 3]"
29284,"[1, 2, 3, 1]  →  [2, 3]"
29285,set
29286,set()
29287,list()
29288,">>> t = [1, 2, 3, 1, 2, 3, 5, 6, 7, 8]"
29289,>>> list(set(t))
29290,"[1, 2, 3, 5, 6, 7, 8]"
29291,">>> s = [1, 2, 3]"
29292,>>> list(set(t) - set(s))
29293,"[8, 5, 6, 7]"
29294,OrderedDict
29295,>>> from collections import OrderedDict
29296,>>> list(OrderedDict.fromkeys(t))
29297,"[1, 2, 3, 5, 6, 7, 8]"
29298,>>> list(dict.fromkeys(t))
29299,"[1, 2, 3, 5, 6, 7, 8]"
29300,set
29301,OrderedDict
29302,dict
29303,[dict(d) for d in set([frozenset(i.items()) for i in t])]
29304,dict.fromkeys()
29305,list()
29306,>>> from collections import OrderedDict
29307,>>> list(OrderedDict.fromkeys('abracadabra'))
29308,"['a', 'b', 'r', 'c', 'd']"
29309,>>> list(dict.fromkeys('abracadabra'))
29310,"['a', 'b', 'r', 'c', 'd']"
29311,>>> list(dict.fromkeys('abracadabra'))
29312,"['a', 'b', 'r', 'c', 'd']"
29313,unique_everseen
29314,list(set(source_list))
29315,set
29316,from collections import OrderedDict
29317,"OrderedDict((x, True) for x in source_list).keys()"
29318,OrderedDict
29319,True
29320,set
29321,dict
29322,">>> t = [1, 2, 3, 1, 2, 5, 6, 7, 8]"
29323,>>> t
29324,"[1, 2, 3, 1, 2, 5, 6, 7, 8]"
29325,>>> s = []
29326,>>> for i in t:
29327,       if i not in s:
29328,          s.append(i)
29329,>>> s
29330,"[1, 2, 3, 5, 6, 7, 8]"
29331,def remove_duplicates(l):
29332,    return list(set(l))
29333,set
29334,L
29335,"newlist = [ii for n,ii in enumerate(L) if ii not in L[:n]]"
29336,"L = [1, 2, 2, 3, 4, 2, 4, 3, 5]"
29337,newlist
29338,"[1, 2, 3, 4, 5]"
29339,set
29340,OrderedDict
29341,in
29342,.tolist()
29343,"t=['a','a','b','b','b','c','c','c']"
29344,"t2= ['c','c','b','b','b','a','a','a']"
29345,unique()
29346,import pandas as pd
29347,pd.unique(t).tolist()
29348,">>>['a','b','c']"
29349,pd.unique(t2).tolist()
29350,">>>['c','b','a']"
29351,unique()
29352,import numpy as np
29353,np.unique(t).tolist()
29354,">>>['a','b','c']"
29355,np.unique(t2).tolist()
29356,">>>['a','b','c']"
29357,t2
29358,"_, idx = np.unique(t2, return_index=True)"
29359,t2[np.sort(idx)].tolist()
29360,">>>['c','b','a']"
29361,collections.Counter
29362,hash(tuple(my_list))
29363,my_list
29364,"from collections import OrderedDict, Counter"
29365,
29366,class Container:
29367,"    def __init__(self, obj):"
29368,        self.obj = obj
29369,"    def __eq__(self, obj):"
29370,        return self.obj == obj
29371,    def __hash__(self):
29372,        try:
29373,            return hash(self.obj)
29374,        except:
29375,            return id(self.obj)
29376,
29377,"class OrderedCounter(Counter, OrderedDict):"
29378,     'Counter that remembers the order elements are first encountered'
29379,
29380,     def __repr__(self):
29381,"         return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))"
29382,
29383,     def __reduce__(self):
29384,"         return self.__class__, (OrderedDict(self),)"
29385,    
29386,def remd(sequence):
29387,    cnt = Counter()
29388,    for x in sequence:
29389,        cnt[Container(x)] += 1
29390,    return [item.obj for item in cnt]
29391,
29392,def oremd(sequence):
29393,    cnt = OrderedCounter()
29394,    for x in sequence:
29395,        cnt[Container(x)] += 1
29396,    return [item.obj for item in cnt]
29397,remd
29398,oremd
29399,"[list(range(x)) + list(range(x)) for x in range(0, 1000, 10)]"
29400,"[[list(range(y)) + list(range(y)) for y in range(x)] for x in range(0, 1000, 10)]"
29401,step
29402,def ordered_set(in_list):
29403,    out_list = []
29404,    added = set()
29405,    for val in in_list:
29406,        if not val in added:
29407,            out_list.append(val)
29408,            added.add(val)
29409,    return out_list
29410,from random import randint
29411,"x = [randint(0,100) for _ in xrange(100)]"
29412,
29413,In [131]: len(set(x))
29414,Out[131]: 62
29415,In [129]: %timeit list(OrderedDict.fromkeys(x))
29416,"10000 loops, best of 3: 86.4 us per loop"
29417,
29418,In [130]: %timeit ordered_set(x)
29419,"100000 loops, best of 3: 15.1 us per loop"
29420,def ordered_set(inlist):
29421,    out_list = []
29422,    for val in inlist:
29423,        if not val in out_list:
29424,            out_list.append(val)
29425,    return out_list
29426,In [136]: %timeit ordered_set(x)
29427,"10000 loops, best of 3: 52.6 us per loop"
29428,def unique(iterable):
29429,seen = set()
29430,seen_add = seen.add
29431,return [item for item in iterable if not item in seen and not seen_add(item)]
29432,*arg
29433,set
29434,l = [*{*l}]
29435,">>> seq = [1,2,3,'a', 'a', 1,2]"
29436,>> dict.fromkeys(seq).keys()
29437,"['a', 1, 2, 3]"
29438,keys()
29439,"myList = [1, 2, 3, 1, 2, 5, 6, 7, 8]"
29440,cleanlist = []
29441,[cleanlist.append(x) for x in myList if x not in cleanlist]
29442,>>> cleanlist 
29443,"[1, 2, 3, 5, 6, 7, 8]"
29444,in
29445,cleanlist
29446,n
29447,TypeError: unhashable type:
29448,def make_unique(original_list):
29449,    unique_list = []
29450,    [unique_list.append(obj) for obj in original_list if obj not in unique_list]
29451,    return unique_list
29452,def make_unique(original_list):
29453,    unique_list = []
29454,"    map(lambda x: unique_list.append(x) if (x not in unique_list) else False, original_list)"
29455,    return unique_list
29456,map
29457,lambda x: unique_list.append(x)
29458,unique_list.append
29459,OrderedDicts
29460,set
29461,list
29462,key
29463,# from functools import reduce <-- add this import on Python 3
29464,
29465,"def uniq(iterable, key=lambda x: x):"
29466,"    """""""
29467,    Remove duplicates from an iterable. Preserves order. 
29468,    :type iterable: Iterable[Ord => A]
29469,    :param iterable: an iterable of objects of any orderable type
29470,    :type key: Callable[A] -> (Ord => B)
29471,    :param key: optional argument; by default an item (A) is discarded 
29472,"    if another item (B), such that A == B, has already been encountered and taken. "
29473,"    If you provide a key, this condition changes to key(A) == key(B); the callable "
29474,    must return orderable objects.
29475,"    """""""
29476,    # Enumerate the list to restore order lately; reduce the sorted list; restore order
29477,"    def append_unique(acc, item):"
29478,        return acc if key(acc[-1][1]) == key(item[1]) else acc.append(item) or acc 
29479,"    srt_enum = sorted(enumerate(iterable), key=lambda item: key(item[1]))"
29480,"    return [item[1] for item in sorted(reduce(append_unique, srt_enum, [srt_enum[0]]))] "
29481,tuple()
29482,reduce()
29483,srt_enum
29484,sorted
29485,">>> t = [1, 9, 2, 3, 4, 5, 3, 6, 7, 5, 8, 9]"
29486,>>> list(dict.fromkeys(t))
29487,"[1, 9, 2, 3, 4, 5, 6, 7, 8]"
29488,from collections import OrderedDict
29489,ulist=list(OrderedDict.fromkeys(l))
29490,fromkeys
29491,fromkeys
29492,None
29493,">>> t = [1, 2, 3, 3, 2, 4, 5, 6]"
29494,">>> s = [x for i, x in enumerate(t) if i == t.index(x)]"
29495,>>> s
29496,"[1, 2, 3, 4, 5, 6]"
29497,index
29498,list.index
29499,"In [2]: some_list = ['a','a','v','v','v','c','c','d']"
29500,In [3]: list(set(some_list))
29501,"Out[3]: ['a', 'c', 'd', 'v']"
29502,set
29503,mylist = list(set(mylist))
29504,mylist.sort()
29505,set
29506,dict
29507,np.unique
29508,np.unique
29509,import perfplot
29510,import numpy as np
29511,import matplotlib.pyplot as plt
29512,
29513,
29514,def setup_list(n):
29515,    # return list(np.random.permutation(np.arange(n)))
29516,    return [0] * n
29517,
29518,
29519,def setup_np_array(n):
29520,    # return np.random.permutation(np.arange(n))
29521,"    return np.zeros(n, dtype=int)"
29522,
29523,
29524,def list_set(data):
29525,    return list(set(data))
29526,
29527,
29528,def numpy_unique(data):
29529,    return np.unique(data)
29530,
29531,
29532,def list_dict(data):
29533,    return list(dict.fromkeys(data))
29534,
29535,
29536,b = perfplot.bench(
29537,    setup=[
29538,"        setup_list,"
29539,"        setup_list,"
29540,"        setup_list,"
29541,"        setup_np_array,"
29542,"        setup_np_array,"
29543,"        setup_np_array,"
29544,"    ],"
29545,"    kernels=[list_set, numpy_unique, list_dict, list_set, numpy_unique, list_dict],"
29546,    labels=[
29547,"        ""list(set(lst))"","
29548,"        ""np.unique(lst)"","
29549,"        ""list(dict(lst))"","
29550,"        ""list(set(arr))"","
29551,"        ""np.unique(arr)"","
29552,"        ""list(dict(arr))"","
29553,"    ],"
29554,"    n_range=[2 ** k for k in range(23)],"
29555,"    xlabel=""len(array)"","
29556,"    equality_check=None,"
29557,)
29558,"# plt.title(""input array = [0, 1, 2,..., n]"")"
29559,"plt.title(""input array = [0, 0,..., 0]"")"
29560,"b.save(""out.png"")"
29561,b.show()
29562,import sets
29563,"t = sets.Set(['a', 'b', 'c', 'd'])"
29564,"t1 = sets.Set(['a', 'b', 'c'])"
29565,
29566,print t | t1
29567,print t - t1
29568,import pandas as pd
29569,
29570,"myList = [1, 2, 3, 1, 2, 5, 6, 7, 8]"
29571,cleanList = pd.Series(myList).drop_duplicates().tolist()
29572,print(cleanList)
29573,
29574,"#> [1, 2, 3, 5, 6, 7, 8]"
29575,def remove_duplicates(item_list):
29576,    ''' Removes duplicate items from a list '''
29577,    singles_list = []
29578,    for element in item_list:
29579,        if element not in singles_list:
29580,            singles_list.append(element)
29581,    return singles_list
29582,list
29583,list
29584,"l = [5, 6, 6, 1, 1, 2, 2, 3, 4]"
29585,">>> reduce(lambda r, v: v in r and r or r + [v], l, [])"
29586,"[5, 6, 1, 2, 3, 4]"
29587,">>> reduce(lambda r, v: v in r[1] and r or (r[0].append(v) or r[1].add(v)) or r, l, ([], set()))[0]"
29588,"[5, 6, 1, 2, 3, 4]"
29589,"default = (list(), set())"
29590,# user list to keep order
29591,# use set to make lookup faster
29592,
29593,"def reducer(result, item):"
29594,    if item not in result[1]:
29595,        result[0].append(item)
29596,        result[1].add(item)
29597,    return result
29598,
29599,"reduce(reducer, l, default)[0]"
29600,def uniqify(iterable):
29601,    seen = set()
29602,    for item in iterable:
29603,        if item not in seen:
29604,            seen.add(item)
29605,            yield item
29606,"for unique_item in uniqify([1, 2, 3, 4, 3, 2, 4, 5, 6, 7, 6, 8, 8]):"
29607,"    print(unique_item, end=' ')"
29608,
29609,print()
29610,1 2 3 4 5 6 7 8
29611,list
29612,"unique_list = list(uniqify([1, 2, 3, 4, 3, 2, 4, 5, 6, 7, 6, 8, 8]))"
29613,
29614,print(unique_list)
29615,"[1, 2, 3, 4, 5, 6, 7, 8]"
29616,seen = set(iterable); for item in seen: yield item
29617,def rem_dupes(dup_list): 
29618,    yooneeks = [] 
29619,    for elem in dup_list: 
29620,        if elem not in yooneeks: 
29621,            yooneeks.append(elem) 
29622,    return yooneeks
29623,"my_list = ['this','is','a','list','with','dupicates','in', 'the', 'list']"
29624,rem_dupes(my_list)
29625,"a = [0,1,2,3,4,3,3,4]"
29626,a = list(set(a))
29627,print a
29628,import numpy as np
29629,"a = [0,1,2,3,4,3,3,4]"
29630,a = np.unique(a).tolist()
29631,print a
29632,"data=[1, 2, 3, 1, 2, 5, 6, 7, 8]"
29633,uni_data=[]
29634,for dat in data:
29635,    if dat not in uni_data:
29636,        uni_data.append(dat)
29637,
29638,print(uni_data) 
29639,"line = [1, 2, 3, 1, 2, 5, 6, 7, 8]"
29640,"new_line = sorted(set(line), key=line.index) # remove duplicated element"
29641,print(new_line)
29642,"[1, 2, 3, 5, 6, 7, 8]"
29643,TypeError: unhashable type: 'list'
29644,"line=[['16.4966155686595', '-27.59776154691', '52.3786295521147']"
29645,",['16.4966155686595', '-27.59776154691', '52.3786295521147']"
29646,",['17.6508629295574', '-27.143305738671', '47.534955022564']"
29647,",['17.6508629295574', '-27.143305738671', '47.534955022564']"
29648,",['18.8051102904552', '-26.688849930432', '42.6912804930134']"
29649,",['18.8051102904552', '-26.688849930432', '42.6912804930134']"
29650,",['19.5504702331098', '-26.205884452727', '37.7709192714727']"
29651,",['19.5504702331098', '-26.205884452727', '37.7709192714727']"
29652,",['20.2929416861422', '-25.722717575124', '32.8500163147157']"
29653,",['20.2929416861422', '-25.722717575124', '32.8500163147157']]"
29654,
29655,tuple_line = [tuple(pt) for pt in line] # convert list of list into list of tuple
29656,"tuple_new_line = sorted(set(tuple_line),key=tuple_line.index) # remove duplicated element"
29657,new_line = [list(t) for t in tuple_new_line] # convert list of tuple into list of list
29658,
29659,print (new_line)
29660,[
29661,"  ['16.4966155686595', '-27.59776154691', '52.3786295521147'], "
29662,"  ['17.6508629295574', '-27.143305738671', '47.534955022564'], "
29663,"  ['18.8051102904552', '-26.688849930432', '42.6912804930134'], "
29664,"  ['19.5504702331098', '-26.205884452727', '37.7709192714727'], "
29665,"  ['20.2929416861422', '-25.722717575124', '32.8500163147157']"
29666,]
29667,def remove_duplicates(x):
29668,    a = []
29669,    for i in x:
29670,        if i not in a:
29671,            a.append(i)
29672,    return a
29673,
29674,"print remove_duplicates([1,2,2,3,3,4])"
29675,list(set(..))
29676,list(set(..))
29677,visited.add(item)
29678,None
29679,False
29680,or
29681,def deduplicate(sequence):
29682,    visited = set()
29683,    adder = visited.add  # get rid of qualification overhead
29684,    out = [adder(item) or item for item in sequence if item not in visited]
29685,    return out
29686,@make_bold
29687,@make_italic
29688,def say():
29689,"   return ""Hello"""
29690,say()
29691,"""<b><i>Hello</i></b>"""
29692,"def shout(word=""yes""):"
29693,"    return word.capitalize()+""!"""
29694,
29695,print(shout())
29696,# outputs : 'Yes!'
29697,
29698,"# As an object, you can assign the function to a variable like any other object "
29699,scream = shout
29700,
29701,"# Notice we don't use parentheses: we are not calling the function,"
29702,"# we are putting the function ""shout"" into the variable ""scream""."
29703,"# It means you can then call ""shout"" from ""scream"":"
29704,
29705,print(scream())
29706,# outputs : 'Yes!'
29707,
29708,"# More than that, it means you can remove the old name 'shout',"
29709,# and the function will still be accessible from 'scream'
29710,
29711,del shout
29712,try:
29713,    print(shout())
29714,except NameError as e:
29715,    print(e)
29716,"    #outputs: ""name 'shout' is not defined"""
29717,
29718,print(scream())
29719,# outputs: 'Yes!'
29720,def talk():
29721,
29722,"    # You can define a function on the fly in ""talk"" ..."
29723,"    def whisper(word=""yes""):"
29724,"        return word.lower()+""..."""
29725,
29726,    # ... and use it right away!
29727,    print(whisper())
29728,
29729,"# You call ""talk"", that defines ""whisper"" EVERY TIME you call it, then"
29730,"# ""whisper"" is called in ""talk"". "
29731,talk()
29732,# outputs: 
29733,"# ""yes..."""
29734,
29735,"# But ""whisper"" DOES NOT EXIST outside ""talk"":"
29736,
29737,try:
29738,    print(whisper())
29739,except NameError as e:
29740,    print(e)
29741,"    #outputs : ""name 'whisper' is not defined""*"
29742,    #Python's functions are objects
29743,return
29744,"def getTalk(kind=""shout""):"
29745,
29746,    # We define functions on the fly
29747,"    def shout(word=""yes""):"
29748,"        return word.capitalize()+""!"""
29749,
29750,"    def whisper(word=""yes"") :"
29751,"        return word.lower()+""..."""
29752,
29753,    # Then we return one of them
29754,"    if kind == ""shout"":"
29755,"        # We don't use ""()"", we are not calling the function,"
29756,        # we are returning the function object
29757,        return shout  
29758,    else:
29759,        return whisper
29760,
29761,# How do you use this strange beast?
29762,
29763,# Get the function and assign it to a variable
29764,talk = getTalk()      
29765,
29766,"# You can see that ""talk"" is here a function object:"
29767,print(talk)
29768,#outputs : <function shout at 0xb7ea817c>
29769,
29770,# The object is the one returned by the function:
29771,print(talk())
29772,#outputs : Yes!
29773,
29774,# And you can even use it directly if you feel wild:
29775,"print(getTalk(""whisper"")())"
29776,#outputs : yes...
29777,return
29778,def doSomethingBefore(func): 
29779,"    print(""I do something before then I call the function you gave me"")"
29780,    print(func())
29781,
29782,doSomethingBefore(scream)
29783,#outputs: 
29784,#I do something before then I call the function you gave me
29785,#Yes!
29786,# A decorator is a function that expects ANOTHER function as parameter
29787,def my_shiny_new_decorator(a_function_to_decorate):
29788,
29789,"    # Inside, the decorator defines a function on the fly: the wrapper."
29790,    # This function is going to be wrapped around the original function
29791,    # so it can execute code before and after it.
29792,    def the_wrapper_around_the_original_function():
29793,
29794,        # Put here the code you want to be executed BEFORE the original function is called
29795,"        print(""Before the function runs"")"
29796,
29797,        # Call the function here (using parentheses)
29798,        a_function_to_decorate()
29799,
29800,        # Put here the code you want to be executed AFTER the original function is called
29801,"        print(""After the function runs"")"
29802,
29803,"    # At this point, ""a_function_to_decorate"" HAS NEVER BEEN EXECUTED."
29804,    # We return the wrapper function we have just created.
29805,    # The wrapper contains the function and the code to execute before and after. It’s ready to use!
29806,    return the_wrapper_around_the_original_function
29807,
29808,# Now imagine you create a function you don't want to ever touch again.
29809,def a_stand_alone_function():
29810,"    print(""I am a stand alone function, don't you dare modify me"")"
29811,
29812,a_stand_alone_function() 
29813,"#outputs: I am a stand alone function, don't you dare modify me"
29814,
29815,"# Well, you can decorate it to extend its behavior."
29816,"# Just pass it to the decorator, it will wrap it dynamically in "
29817,# any code you want and return you a new function ready to be used:
29818,
29819,a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)
29820,a_stand_alone_function_decorated()
29821,#outputs:
29822,#Before the function runs
29823,"#I am a stand alone function, don't you dare modify me"
29824,#After the function runs
29825,a_stand_alone_function
29826,a_stand_alone_function_decorated
29827,a_stand_alone_function
29828,my_shiny_new_decorator
29829,a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)
29830,a_stand_alone_function()
29831,#outputs:
29832,#Before the function runs
29833,"#I am a stand alone function, don't you dare modify me"
29834,#After the function runs
29835,
29836,# That’s EXACTLY what decorators do!
29837,@my_shiny_new_decorator
29838,def another_stand_alone_function():
29839,"    print(""Leave me alone"")"
29840,
29841,another_stand_alone_function()  
29842,#outputs:  
29843,#Before the function runs
29844,#Leave me alone
29845,#After the function runs
29846,@decorator
29847,another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)
29848,def bread(func):
29849,    def wrapper():
29850,"        print(""</''''''\>"")"
29851,        func()
29852,"        print(""<\______/>"")"
29853,    return wrapper
29854,
29855,def ingredients(func):
29856,    def wrapper():
29857,"        print(""#tomatoes#"")"
29858,        func()
29859,"        print(""~salad~"")"
29860,    return wrapper
29861,
29862,"def sandwich(food=""--ham--""):"
29863,    print(food)
29864,
29865,sandwich()
29866,#outputs: --ham--
29867,sandwich = bread(ingredients(sandwich))
29868,sandwich()
29869,#outputs:
29870,#</''''''\>
29871,# #tomatoes#
29872,# --ham--
29873,# ~salad~
29874,#<\______/>
29875,@bread
29876,@ingredients
29877,"def sandwich(food=""--ham--""):"
29878,    print(food)
29879,
29880,sandwich()
29881,#outputs:
29882,#</''''''\>
29883,# #tomatoes#
29884,# --ham--
29885,# ~salad~
29886,#<\______/>
29887,@ingredients
29888,@bread
29889,"def strange_sandwich(food=""--ham--""):"
29890,    print(food)
29891,
29892,strange_sandwich()
29893,#outputs:
29894,##tomatoes#
29895,#</''''''\>
29896,# --ham--
29897,#<\______/>
29898,# ~salad~
29899,# The decorator to make it bold
29900,def makebold(fn):
29901,    # The new function the decorator returns
29902,    def wrapper():
29903,        # Insertion of some code before and after
29904,"        return ""<b>"" + fn() + ""</b>"""
29905,    return wrapper
29906,
29907,# The decorator to make it italic
29908,def makeitalic(fn):
29909,    # The new function the decorator returns
29910,    def wrapper():
29911,        # Insertion of some code before and after
29912,"        return ""<i>"" + fn() + ""</i>"""
29913,    return wrapper
29914,
29915,@makebold
29916,@makeitalic
29917,def say():
29918,"    return ""hello"""
29919,
29920,print(say())
29921,#outputs: <b><i>hello</i></b>
29922,
29923,# This is the exact equivalent to 
29924,def say():
29925,"    return ""hello"""
29926,say = makebold(makeitalic(say))
29927,
29928,print(say())
29929,#outputs: <b><i>hello</i></b>
29930,"# It’s not black magic, you just have to let the wrapper "
29931,# pass the argument:
29932,
29933,def a_decorator_passing_arguments(function_to_decorate):
29934,"    def a_wrapper_accepting_arguments(arg1, arg2):"
29935,"        print(""I got args! Look: {0}, {1}"".format(arg1, arg2))"
29936,"        function_to_decorate(arg1, arg2)"
29937,    return a_wrapper_accepting_arguments
29938,
29939,"# Since when you are calling the function returned by the decorator, you are"
29940,"# calling the wrapper, passing arguments to the wrapper will let it pass them to "
29941,# the decorated function
29942,
29943,@a_decorator_passing_arguments
29944,"def print_full_name(first_name, last_name):"
29945,"    print(""My name is {0} {1}"".format(first_name, last_name))"
29946,    
29947,"print_full_name(""Peter"", ""Venkman"")"
29948,# outputs:
29949,#I got args! Look: Peter Venkman
29950,#My name is Peter Venkman
29951,self
29952,self
29953,def method_friendly_decorator(method_to_decorate):
29954,"    def wrapper(self, lie):"
29955,"        lie = lie - 3 # very friendly, decrease age even more :-)"
29956,"        return method_to_decorate(self, lie)"
29957,    return wrapper
29958,    
29959,    
29960,class Lucy(object):
29961,    
29962,    def __init__(self):
29963,        self.age = 32
29964,    
29965,    @method_friendly_decorator
29966,"    def sayYourAge(self, lie):"
29967,"        print(""I am {0}, what did you think?"".format(self.age + lie))"
29968,        
29969,l = Lucy()
29970,l.sayYourAge(-3)
29971,"#outputs: I am 26, what did you think?"
29972,"*args, **kwargs"
29973,def a_decorator_passing_arbitrary_arguments(function_to_decorate):
29974,    # The wrapper accepts any arguments
29975,"    def a_wrapper_accepting_arbitrary_arguments(*args, **kwargs):"
29976,"        print(""Do I have args?:"")"
29977,        print(args)
29978,        print(kwargs)
29979,"        # Then you unpack the arguments, here *args, **kwargs"
29980,"        # If you are not familiar with unpacking, check:"
29981,        # http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/
29982,"        function_to_decorate(*args, **kwargs)"
29983,    return a_wrapper_accepting_arbitrary_arguments
29984,
29985,@a_decorator_passing_arbitrary_arguments
29986,def function_with_no_argument():
29987,"    print(""Python is cool, no argument here."")"
29988,
29989,function_with_no_argument()
29990,#outputs
29991,#Do I have args?:
29992,#()
29993,#{}
29994,"#Python is cool, no argument here."
29995,
29996,@a_decorator_passing_arbitrary_arguments
29997,"def function_with_arguments(a, b, c):"
29998,"    print(a, b, c)"
29999,    
30000,"function_with_arguments(1,2,3)"
30001,#outputs
30002,#Do I have args?:
30003,"#(1, 2, 3)"
30004,#{}
30005,#1 2 3 
30006, 
30007,@a_decorator_passing_arbitrary_arguments
30008,"def function_with_named_arguments(a, b, c, platypus=""Why not ?""):"
30009,"    print(""Do {0}, {1} and {2} like platypus? {3}"".format(a, b, c, platypus))"
30010,
30011,"function_with_named_arguments(""Bill"", ""Linus"", ""Steve"", platypus=""Indeed!"")"
30012,#outputs
30013,#Do I have args ? :
30014,"#('Bill', 'Linus', 'Steve')"
30015,#{'platypus': 'Indeed!'}
30016,"#Do Bill, Linus and Steve like platypus? Indeed!"
30017,
30018,class Mary(object):
30019,    
30020,    def __init__(self):
30021,        self.age = 31
30022,    
30023,    @a_decorator_passing_arbitrary_arguments
30024,"    def sayYourAge(self, lie=-3): # You can now add a default value"
30025,"        print(""I am {0}, what did you think?"".format(self.age + lie))"
30026,
30027,m = Mary()
30028,m.sayYourAge()
30029,#outputs
30030,# Do I have args?:
30031,"#(<__main__.Mary object at 0xb7d303ac>,)"
30032,#{}
30033,"#I am 28, what did you think?"
30034,# Decorators are ORDINARY functions
30035,def my_decorator(func):
30036,"    print(""I am an ordinary function"")"
30037,    def wrapper():
30038,"        print(""I am function returned by the decorator"")"
30039,        func()
30040,    return wrapper
30041,
30042,"# Therefore, you can call it without any ""@"""
30043,
30044,def lazy_function():
30045,"    print(""zzzzzzzz"")"
30046,
30047,decorated_function = my_decorator(lazy_function)
30048,#outputs: I am an ordinary function
30049,            
30050,"# It outputs ""I am an ordinary function"", because that’s just what you do:"
30051,# calling a function. Nothing magic.
30052,
30053,@my_decorator
30054,def lazy_function():
30055,"    print(""zzzzzzzz"")"
30056,    
30057,#outputs: I am an ordinary function
30058,my_decorator
30059,@my_decorator
30060,my_decorator
30061,def decorator_maker():
30062,    
30063,"    print(""I make decorators! I am executed only once: """
30064,"          ""when you make me create a decorator."")"
30065,            
30066,    def my_decorator(func):
30067,        
30068,"        print(""I am a decorator! I am executed only when you decorate a function."")"
30069,               
30070,        def wrapped():
30071,"            print(""I am the wrapper around the decorated function. """
30072,"                  ""I am called when you call the decorated function. """
30073,"                  ""As the wrapper, I return the RESULT of the decorated function."")"
30074,            return func()
30075,        
30076,"        print(""As the decorator, I return the wrapped function."")"
30077,        
30078,        return wrapped
30079,    
30080,"    print(""As a decorator maker, I return a decorator"")"
30081,    return my_decorator
30082,            
30083,# Let’s create a decorator. It’s just a new function after all.
30084,new_decorator = decorator_maker()       
30085,#outputs:
30086,#I make decorators! I am executed only once: when you make me create a decorator.
30087,"#As a decorator maker, I return a decorator"
30088,
30089,# Then we decorate the function
30090,            
30091,def decorated_function():
30092,"    print(""I am the decorated function."")"
30093,   
30094,decorated_function = new_decorator(decorated_function)
30095,#outputs:
30096,#I am a decorator! I am executed only when you decorate a function.
30097,"#As the decorator, I return the wrapped function"
30098,     
30099,# Let’s call the function:
30100,decorated_function()
30101,#outputs:
30102,#I am the wrapper around the decorated function. I am called when you call the decorated function.
30103,"#As the wrapper, I return the RESULT of the decorated function."
30104,#I am the decorated function.
30105,def decorated_function():
30106,"    print(""I am the decorated function."")"
30107,decorated_function = decorator_maker()(decorated_function)
30108,#outputs:
30109,#I make decorators! I am executed only once: when you make me create a decorator.
30110,"#As a decorator maker, I return a decorator"
30111,#I am a decorator! I am executed only when you decorate a function.
30112,"#As the decorator, I return the wrapped function."
30113,
30114,# Finally:
30115,decorated_function()    
30116,#outputs:
30117,#I am the wrapper around the decorated function. I am called when you call the decorated function.
30118,"#As the wrapper, I return the RESULT of the decorated function."
30119,#I am the decorated function.
30120,@decorator_maker()
30121,def decorated_function():
30122,"    print(""I am the decorated function."")"
30123,#outputs:
30124,#I make decorators! I am executed only once: when you make me create a decorator.
30125,"#As a decorator maker, I return a decorator"
30126,#I am a decorator! I am executed only when you decorate a function.
30127,"#As the decorator, I return the wrapped function."
30128,
30129,#Eventually: 
30130,decorated_function()    
30131,#outputs:
30132,#I am the wrapper around the decorated function. I am called when you call the decorated function.
30133,"#As the wrapper, I return the RESULT of the decorated function."
30134,#I am the decorated function.
30135,@
30136,"def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):"
30137,    
30138,"    print(""I make decorators! And I accept arguments: {0}, {1}"".format(decorator_arg1, decorator_arg2))"
30139,            
30140,    def my_decorator(func):
30141,        # The ability to pass arguments here is a gift from closures.
30142,"        # If you are not comfortable with closures, you can assume it’s ok,"
30143,        # or read: https://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python
30144,"        print(""I am the decorator. Somehow you passed me arguments: {0}, {1}"".format(decorator_arg1, decorator_arg2))"
30145,               
30146,        # Don't confuse decorator arguments and function arguments!
30147,"        def wrapped(function_arg1, function_arg2) :"
30148,"            print(""I am the wrapper around the decorated function.\n"""
30149,"                  ""I can access all the variables\n"""
30150,"                  ""\t- from the decorator: {0} {1}\n"""
30151,"                  ""\t- from the function call: {2} {3}\n"""
30152,"                  ""Then I can pass them to the decorated function"""
30153,"                  .format(decorator_arg1, decorator_arg2,"
30154,"                          function_arg1, function_arg2))"
30155,"            return func(function_arg1, function_arg2)"
30156,        
30157,        return wrapped
30158,    
30159,    return my_decorator
30160,
30161,"@decorator_maker_with_arguments(""Leonard"", ""Sheldon"")"
30162,"def decorated_function_with_arguments(function_arg1, function_arg2):"
30163,"    print(""I am the decorated function and only knows about my arguments: {0}"""
30164,"           "" {1}"".format(function_arg1, function_arg2))"
30165,          
30166,"decorated_function_with_arguments(""Rajesh"", ""Howard"")"
30167,#outputs:
30168,#I make decorators! And I accept arguments: Leonard Sheldon
30169,#I am the decorator. Somehow you passed me arguments: Leonard Sheldon
30170,#I am the wrapper around the decorated function. 
30171,#I can access all the variables 
30172,#   - from the decorator: Leonard Sheldon 
30173,#   - from the function call: Rajesh Howard 
30174,#Then I can pass them to the decorated function
30175,#I am the decorated function and only knows about my arguments: Rajesh Howard
30176,"c1 = ""Penny"""
30177,"c2 = ""Leslie"""
30178,
30179,"@decorator_maker_with_arguments(""Leonard"", c1)"
30180,"def decorated_function_with_arguments(function_arg1, function_arg2):"
30181,"    print(""I am the decorated function and only knows about my arguments:"""
30182,"           "" {0} {1}"".format(function_arg1, function_arg2))"
30183,
30184,"decorated_function_with_arguments(c2, ""Howard"")"
30185,#outputs:
30186,#I make decorators! And I accept arguments: Leonard Penny
30187,#I am the decorator. Somehow you passed me arguments: Leonard Penny
30188,#I am the wrapper around the decorated function. 
30189,#I can access all the variables 
30190,#   - from the decorator: Leonard Penny 
30191,#   - from the function call: Leslie Howard 
30192,#Then I can pass them to the decorated function
30193,#I am the decorated function and only know about my arguments: Leslie Howard
30194,"*args, **kwargs"
30195,def decorator_with_args(decorator_to_enhance):
30196,"    """""" "
30197,    This function is supposed to be used as a decorator.
30198,"    It must decorate an other function, that is intended to be used as a decorator."
30199,    Take a cup of coffee.
30200,"    It will allow any decorator to accept an arbitrary number of arguments,"
30201,    saving you the headache to remember how to do that every time.
30202,"    """""""
30203,    
30204,    # We use the same trick we did to pass arguments
30205,"    def decorator_maker(*args, **kwargs):"
30206,       
30207,        # We create on the fly a decorator that accepts only a function
30208,        # but keeps the passed arguments from the maker.
30209,        def decorator_wrapper(func):
30210,       
30211,"            # We return the result of the original decorator, which, after all, "
30212,            # IS JUST AN ORDINARY FUNCTION (which returns a function).
30213,            # Only pitfall: the decorator must have this specific signature or it won't work:
30214,"            return decorator_to_enhance(func, *args, **kwargs)"
30215,        
30216,        return decorator_wrapper
30217,    
30218,    return decorator_maker
30219,       
30220,# You create the function you will use as a decorator. And stick a decorator on it :-)
30221,"# Don't forget, the signature is ""decorator(func, *args, **kwargs)"""
30222,@decorator_with_args 
30223,"def decorated_decorator(func, *args, **kwargs): "
30224,"    def wrapper(function_arg1, function_arg2):"
30225,"        print(""Decorated with {0} {1}"".format(args, kwargs))"
30226,"        return func(function_arg1, function_arg2)"
30227,    return wrapper
30228,    
30229,# Then you decorate the functions you wish with your brand new decorated decorator.
30230,
30231,"@decorated_decorator(42, 404, 1024)"
30232,"def decorated_function(function_arg1, function_arg2):"
30233,"    print(""Hello {0} {1}"".format(function_arg1, function_arg2))"
30234,
30235,"decorated_function(""Universe and"", ""everything"")"
30236,#outputs:
30237,"#Decorated with (42, 404, 1024) {}"
30238,#Hello Universe and everything
30239,
30240,# Whoooot!
30241,functools
30242,functools.wraps()
30243,functools.wraps()
30244,"# For debugging, the stacktrace prints you the function __name__"
30245,def foo():
30246,"    print(""foo"")"
30247,    
30248,print(foo.__name__)
30249,#outputs: foo
30250,    
30251,"# With a decorator, it gets messy    "
30252,def bar(func):
30253,    def wrapper():
30254,"        print(""bar"")"
30255,        return func()
30256,    return wrapper
30257,
30258,@bar
30259,def foo():
30260,"    print(""foo"")"
30261,
30262,print(foo.__name__)
30263,#outputs: wrapper
30264,
30265,"# ""functools"" can help for that"
30266,
30267,import functools
30268,
30269,def bar(func):
30270,"    # We say that ""wrapper"", is wrapping ""func"""
30271,    # and the magic begins
30272,    @functools.wraps(func)
30273,    def wrapper():
30274,"        print(""bar"")"
30275,        return func()
30276,    return wrapper
30277,
30278,@bar
30279,def foo():
30280,"    print(""foo"")"
30281,
30282,print(foo.__name__)
30283,#outputs: foo
30284,def benchmark(func):
30285,"    """""""
30286,    A decorator that prints the time a function takes
30287,    to execute.
30288,"    """""""
30289,    import time
30290,"    def wrapper(*args, **kwargs):"
30291,        t = time.clock()
30292,"        res = func(*args, **kwargs)"
30293,"        print(""{0} {1}"".format(func.__name__, time.clock()-t))"
30294,        return res
30295,    return wrapper
30296,
30297,
30298,def logging(func):
30299,"    """""""
30300,    A decorator that logs the activity of the script.
30301,"    (it actually just prints it, but it could be logging!)"
30302,"    """""""
30303,"    def wrapper(*args, **kwargs):"
30304,"        res = func(*args, **kwargs)"
30305,"        print(""{0} {1} {2}"".format(func.__name__, args, kwargs))"
30306,        return res
30307,    return wrapper
30308,
30309,
30310,def counter(func):
30311,"    """""""
30312,    A decorator that counts and prints the number of times a function has been executed
30313,"    """""""
30314,"    def wrapper(*args, **kwargs):"
30315,        wrapper.count = wrapper.count + 1
30316,"        res = func(*args, **kwargs)"
30317,"        print(""{0} has been used: {1}x"".format(func.__name__, wrapper.count))"
30318,        return res
30319,    wrapper.count = 0
30320,    return wrapper
30321,
30322,@counter
30323,@benchmark
30324,@logging
30325,def reverse_string(string):
30326,    return str(reversed(string))
30327,
30328,"print(reverse_string(""Able was I ere I saw Elba""))"
30329,"print(reverse_string(""A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!""))"
30330,
30331,#outputs:
30332,"#reverse_string ('Able was I ere I saw Elba',) {}"
30333,#wrapper 0.0
30334,#wrapper has been used: 1x 
30335,#ablE was I ere I saw elbA
30336,"#reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {}"
30337,#wrapper 0.0
30338,#wrapper has been used: 2x
30339,"#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A"
30340,@counter
30341,@benchmark
30342,@logging
30343,def get_random_futurama_quote():
30344,    from urllib import urlopen
30345,"    result = urlopen(""http://subfusion.net/cgi-bin/quote.pl?quote=futurama"").read()"
30346,    try:
30347,"        value = result.split(""<br><b><hr><br>"")[1].split(""<br><br><hr>"")[0]"
30348,        return value.strip()
30349,    except:
30350,"        return ""No, I'm ... doesn't!"""
30351,
30352,    
30353,print(get_random_futurama_quote())
30354,print(get_random_futurama_quote())
30355,
30356,#outputs:
30357,#get_random_futurama_quote () {}
30358,#wrapper 0.02
30359,#wrapper has been used: 1x
30360,#The laws of science be a harsh mistress.
30361,#get_random_futurama_quote () {}
30362,#wrapper 0.01
30363,#wrapper has been used: 2x
30364,"#Curse you, merciful Poseidon!"
30365,property
30366,staticmethod
30367,__closure__
30368,@decorator
30369,property
30370,classmethod
30371,staticmethod
30372,__wrapped__
30373,from functools import wraps
30374,
30375,def makebold(fn):
30376,    @wraps(fn)
30377,"    def wrapper(*args, **kwargs):"
30378,"        return ""<b>"" + fn(*args, **kwargs) + ""</b>"""
30379,    return wrapper
30380,
30381,def makeitalic(fn):
30382,    @wraps(fn)
30383,"    def wrapper(*args, **kwargs):"
30384,"        return ""<i>"" + fn(*args, **kwargs) + ""</i>"""
30385,    return wrapper
30386,
30387,@makebold
30388,@makeitalic
30389,def hello():
30390,"    return ""hello world"""
30391,
30392,@makebold
30393,@makeitalic
30394,def log(s):
30395,    return s
30396,
30397,"print hello()        # returns ""<b><i>hello world</i></b>"""
30398,"print hello.__name__ # with functools.wraps() this returns ""hello"""
30399,"print log('hello')   # returns ""<b><i>hello</i></b>"""
30400,__name__
30401,*args
30402,**kwargs
30403,*args
30404,**kwargs
30405,decopatch
30406,decorator
30407,from functools import wraps
30408,
30409,def wrap_in_tag(tag):
30410,    def factory(func):
30411,        @wraps(func)
30412,        def decorator():
30413,            return '<%(tag)s>%(rv)s</%(tag)s>' % (
30414,"                {'tag': tag, 'rv': func()})"
30415,        return decorator
30416,    return factory
30417,@wrap_in_tag('b')
30418,@wrap_in_tag('i')
30419,def say():
30420,    return 'hello'
30421,makebold = wrap_in_tag('b')
30422,makeitalic = wrap_in_tag('i')
30423,
30424,@makebold
30425,@makeitalic
30426,def say():
30427,    return 'hello'
30428,from functools import wraps
30429,
30430,def wrap_in_tag(tag):
30431,    def factory(func):
30432,        @wraps(func)
30433,        def decorator(val):
30434,            return func('<%(tag)s>%(val)s</%(tag)s>' %
30435,"                        {'tag': tag, 'val': val})"
30436,        return decorator
30437,    return factory
30438,@wrap_in_tag('b')
30439,@wrap_in_tag('i')
30440,def say(val):
30441,    return val
30442,say('hello')
30443,say = wrap_in_tag('b')(wrap_in_tag('i')(say)))
30444,def wrap_in_tag(*kwargs)
30445,"@wrap_in_tag('b','i')"
30446,@decorator
30447,def func():
30448,    ...
30449,def func():
30450,    ...
30451,func = decorator(func)
30452,@decorator()
30453,@decorator
30454,func = decorator()(func)
30455,func = decorator(func)
30456,func
30457,var = decorator(func)
30458,def makebold(f): 
30459,"    return lambda: ""<b>"" + f() + ""</b>"""
30460,def makeitalic(f): 
30461,"    return lambda: ""<i>"" + f() + ""</i>"""
30462,
30463,@makebold
30464,@makeitalic
30465,def say():
30466,"    return ""Hello"""
30467,
30468,print say()
30469,"makebold = lambda f : lambda ""<b>"" + f() + ""</b>"""
30470,"makebold = lambda f: lambda: ""<b>"" + f() + ""</b>"""
30471,"makebold = lambda f: lambda *a, **k: ""<b>"" + f(*a, **k) + ""</b>"""
30472,functools.wraps
30473,say
30474,@wraps
30475,help(say)
30476,def makeitalic(fn):
30477,    def newFunc():
30478,"        return ""<i>"" + fn() + ""</i>"""
30479,    return newFunc
30480,class foo:
30481,    def bar(self):
30482,"        print ""hi"""
30483,    def foobar(self):
30484,"        print ""hi again"""
30485,def addDashes(fn): # notice it takes a function as an argument
30486,    def newFunction(self): # define a new function
30487,"        print ""---"""
30488,        fn(self) # call the original function
30489,"        print ""---"""
30490,    return newFunction
30491,"    # Return the newly defined function - it will ""replace"" the original"
30492,class foo:
30493,    @addDashes
30494,    def bar(self):
30495,"        print ""hi"""
30496,
30497,    @addDashes
30498,    def foobar(self):
30499,"        print ""hi again"""
30500,self
30501,newFunction()
30502,addDashes()
30503,self
30504,functools.wraps
30505,"*args, **kwargs"
30506,wrapped()
30507,say()
30508,functools.wraps
30509,func.__doc__
30510,wrapped()
30511,from functools import wraps
30512,
30513,def makebold(fn):
30514,    @wraps(fn)
30515,"    def wrapped(*args, **kwargs):"
30516,"        return ""<b>"" + fn(*args, **kwargs) + ""</b>"""
30517,    return wrapped
30518,
30519,def makeitalic(fn):
30520,    @wraps(fn)
30521,"    def wrapped(*args, **kwargs):"
30522,"        return ""<i>"" + fn(*args, **kwargs) + ""</i>"""
30523,    return wrapped
30524,
30525,@makebold
30526,@makeitalic
30527,def say():
30528,    return 'Hello'
30529,
30530,print(say())  # -> <b><i>Hello</i></b>
30531,def html_deco(tag):
30532,    def decorator(fn):
30533,        @wraps(fn)
30534,"        def wrapped(*args, **kwargs):"
30535,"            return '<%s>' % tag + fn(*args, **kwargs) + '</%s>' % tag"
30536,        return wrapped
30537,    return decorator
30538,
30539,@html_deco('b')
30540,@html_deco('i')
30541,def greet(whom=''):
30542,    return 'Hello' + (' ' + whom) if whom else ''
30543,
30544,print(greet('world'))  # -> <b><i>Hello world</i></b>
30545,makebold = html_deco('b')
30546,makeitalic = html_deco('i')
30547,
30548,@makebold
30549,@makeitalic
30550,def greet(whom=''):
30551,    return 'Hello' + (' ' + whom) if whom else ''
30552,
30553,print(greet('world'))  # -> <b><i>Hello world</i></b>
30554,makebolditalic = lambda fn: makebold(makeitalic(fn))
30555,
30556,@makebolditalic
30557,def greet(whom=''):
30558,    return 'Hello' + (' ' + whom) if whom else ''
30559,
30560,print(greet('world'))  # -> <b><i>Hello world</i></b>
30561,lambda
30562,def multi_html_deco(*tags):
30563,"    start_tags, end_tags = [], []"
30564,    for tag in tags:
30565,        start_tags.append('<%s>' % tag)
30566,        end_tags.append('</%s>' % tag)
30567,    start_tags = ''.join(start_tags)
30568,    end_tags = ''.join(reversed(end_tags))
30569,
30570,    def decorator(fn):
30571,        @wraps(fn)
30572,"        def wrapped(*args, **kwargs):"
30573,"            return start_tags + fn(*args, **kwargs) + end_tags"
30574,        return wrapped
30575,    return decorator
30576,
30577,"makebolditalic = multi_html_deco('b', 'i')"
30578,
30579,@makebolditalic
30580,def greet(whom=''):
30581,    return 'Hello' + (' ' + whom) if whom else ''
30582,
30583,print(greet('world'))  # -> <b><i>Hello world</i></b>
30584,class bol(object):
30585,"  def __init__(self, f):"
30586,    self.f = f
30587,  def __call__(self):
30588,"    return ""<b>{}</b>"".format(self.f())"
30589,
30590,class ita(object):
30591,"  def __init__(self, f):"
30592,    self.f = f
30593,  def __call__(self):
30594,"    return ""<i>{}</i>"".format(self.f())"
30595,
30596,@bol
30597,@ita
30598,def sayhi():
30599,  return 'hi'
30600,class sty(object):
30601,"  def __init__(self, tag):"
30602,    self.tag = tag
30603,"  def __call__(self, f):"
30604,    def newf():
30605,"      return ""<{tag}>{res}</{tag}>"".format(res=f(), tag=self.tag)"
30606,    return newf
30607,
30608,@sty('b')
30609,@sty('i')
30610,def sayhi():
30611,  return 'hi'
30612,functools.update_wrapper
30613,"sayhi.__name__ == ""sayhi"""
30614,@makebold
30615,@makeitalic
30616,def say():
30617,"    return ""Hello"""
30618,<b><i>Hello</i></b>
30619,def makeitalic(fn):
30620,    return lambda: '<i>' + fn() + '</i>'
30621,
30622,def makebold(fn):
30623,    return lambda: '<b>' + fn() + '</b>'
30624,@makebold
30625,@makeitalic
30626,def say():
30627,    return 'Hello'
30628,>>> say()
30629,'<b><i>Hello</i></b>'
30630,>>> say
30631,<function <lambda> at 0x4ACFA070>
30632,>>> say.__closure__[0].cell_contents
30633,<function <lambda> at 0x4ACFA030>
30634,>>> say.__closure__[0].cell_contents.__closure__[0].cell_contents
30635,<function say at 0x4ACFA730>
30636,wraps
30637,functools
30638,from functools import wraps
30639,
30640,def makeitalic(fn):
30641,    # must assign/update attributes from wrapped function to wrapper
30642,"    # __module__, __name__, __doc__, and __dict__ by default"
30643,    @wraps(fn) # explicitly give function whose attributes it is applying
30644,"    def wrapped(*args, **kwargs):"
30645,"        return '<i>' + fn(*args, **kwargs) + '</i>'"
30646,    return wrapped
30647,
30648,def makebold(fn):
30649,    @wraps(fn)
30650,"    def wrapped(*args, **kwargs):"
30651,"        return '<b>' + fn(*args, **kwargs) + '</b>'"
30652,    return wrapped
30653,__qualname__
30654,__annotations__
30655,@makebold
30656,@makeitalic
30657,def say():
30658,"    """"""This function returns a bolded, italicized 'hello'"""""""
30659,    return 'Hello'
30660,>>> say
30661,<function say at 0x14BB8F70>
30662,>>> help(say)
30663,Help on function say in module __main__:
30664,
30665,"say(*args, **kwargs)"
30666,"    This function returns a bolded, italicized 'hello'"
30667,wraps
30668,@deco
30669,def do():
30670,    ...
30671,do = deco(do)
30672,def deco(func):
30673,    def inner(letter):
30674,        return func(letter).upper()  #upper
30675,    return inner
30676,@deco
30677,def do(number):
30678,    return chr(number)  # number to letter
30679,def do2(number):
30680,    return chr(number)
30681,
30682,do2 = deco(do2)
30683,print(do(65))
30684,print(do2(65))
30685,>>> B
30686,>>> B
30687,"from abc import ABCMeta, abstractclassmethod"
30688,
30689,class Decorator(metaclass=ABCMeta):
30690,"    """""" Acts as a base class for all decorators """""""
30691,
30692,    def __init__(self):
30693,        self.method = None
30694,
30695,"    def __call__(self, method):"
30696,        self.method = method
30697,        return self.call
30698,
30699,    @abstractclassmethod
30700,"    def call(self, *args, **kwargs):"
30701,"        return self.method(*args, **kwargs)"
30702,class MakeBold(Decorator):
30703,    def call():
30704,"        return ""<b>"" + self.method() + ""</b>"""
30705,
30706,class MakeItalic(Decorator):
30707,    def call():
30708,"        return ""<i>"" + self.method() + ""</i>"""
30709,
30710,@MakeBold()
30711,@MakeItalic()
30712,def say():
30713,"   return ""Hello"""
30714,class ApplyRecursive(Decorator):
30715,"    def __init__(self, *types):"
30716,        super().__init__()
30717,        if not len(types):
30718,"            types = (dict, list, tuple, set)"
30719,        self._types = types
30720,
30721,"    def call(self, arg):"
30722,"        if dict in self._types and isinstance(arg, dict):"
30723,"            return {key: self.call(value) for key, value in arg.items()}"
30724,
30725,"        if set in self._types and isinstance(arg, set):"
30726,            return set(self.call(value) for value in arg)
30727,
30728,"        if tuple in self._types and isinstance(arg, tuple):"
30729,            return tuple(self.call(value) for value in arg)
30730,
30731,"        if list in self._types and isinstance(arg, list):"
30732,            return list(self.call(value) for value in arg)
30733,
30734,        return self.method(arg)
30735,
30736,
30737,"@ApplyRecursive(tuple, set, dict)"
30738,def double(arg):
30739,    return 2*arg
30740,
30741,print(double(1))
30742,"print(double({'a': 1, 'b': 2}))"
30743,"print(double({1, 2, 3}))"
30744,"print(double((1, 2, 3, 4)))"
30745,"print(double([1, 2, 3, 4, 5]))"
30746,2
30747,"{'a': 2, 'b': 4}"
30748,"{2, 4, 6}"
30749,"(2, 4, 6, 8)"
30750,"[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]"
30751,list
30752,#decorator.py
30753,"def makeHtmlTag(tag, *args, **kwds):"
30754,    def real_decorator(fn):
30755,"        css_class = "" class='{0}'"".format(kwds[""css_class""]) \"
30756,"                                 if ""css_class"" in kwds else """""
30757,"        def wrapped(*args, **kwds):"
30758,"            return ""<""+tag+css_class+"">"" + fn(*args, **kwds) + ""</""+tag+"">"""
30759,        return wrapped
30760,    # return decorator dont call it
30761,    return real_decorator
30762,
30763,"@makeHtmlTag(tag=""b"", css_class=""bold_css"")"
30764,"@makeHtmlTag(tag=""i"", css_class=""italic_css"")"
30765,def hello():
30766,"    return ""hello world"""
30767,
30768,print hello()
30769,#class.py
30770,class makeHtmlTagClass(object):
30771,"    def __init__(self, tag, css_class=""""):"
30772,        self._tag = tag
30773,"        self._css_class = "" class='{0}'"".format(css_class) \"
30774,"                                       if css_class != """" else """""
30775,
30776,"    def __call__(self, fn):"
30777,"        def wrapped(*args, **kwargs):"
30778,"            return ""<"" + self._tag + self._css_class+"">""  \"
30779,"                       + fn(*args, **kwargs) + ""</"" + self._tag + "">"""
30780,        return wrapped
30781,
30782,"@makeHtmlTagClass(tag=""b"", css_class=""bold_css"")"
30783,"@makeHtmlTagClass(tag=""i"", css_class=""italic_css"")"
30784,def hello(name):
30785,"    return ""Hello, {}"".format(name)"
30786,
30787,"print hello(""Your name"")"
30788,############################################################
30789,#
30790,#    decorators
30791,#
30792,############################################################
30793,
30794,def bold(fn):
30795,    def decorate():
30796,        # surround with bold tags before calling original function
30797,"        return ""<b>"" + fn() + ""</b>"""
30798,    return decorate
30799,
30800,
30801,def uk(fn):
30802,    def decorate():
30803,        # swap month and day
30804,        fields = fn().split('/')
30805,"        date = fields[1] + ""/"" + fields[0] + ""/"" + fields[2]"
30806,        return date
30807,    return decorate
30808,
30809,import datetime
30810,def getDate():
30811,    now = datetime.datetime.now()
30812,"    return ""%d/%d/%d"" % (now.day, now.month, now.year)"
30813,
30814,@bold
30815,def getBoldDate(): 
30816,    return getDate()
30817,
30818,@uk
30819,def getUkDate():
30820,    return getDate()
30821,
30822,@bold
30823,@uk
30824,def getBoldUkDate():
30825,    return getDate()
30826,
30827,
30828,print getDate()
30829,print getBoldDate()
30830,print getUkDate()
30831,print getBoldUkDate()
30832,# what is happening under the covers
30833,print bold(uk(getDate))()
30834,17/6/2013
30835,<b>17/6/2013</b>
30836,6/17/2013
30837,<b>6/17/2013</b>
30838,<b>6/17/2013</b>
30839,def counter(func):
30840,"    def wrapped(*args, **kws):"
30841,        print 'Called #%i' % wrapped.count
30842,        wrapped.count += 1
30843,"        return func(*args, **kws)"
30844,    wrapped.count = 0
30845,    return wrapped
30846,func_counter1 = counter(func); func_counter2 = counter(func)
30847,def frame_tests(fn):
30848,    def wrapper(*args):
30849,"        print ""\nStart: %s"" %(fn.__name__)"
30850,        fn(*args)
30851,"        print ""End: %s\n"" %(fn.__name__)"
30852,    return wrapper
30853,
30854,@frame_tests
30855,def test_fn1():
30856,"    print ""This is only a test!"""
30857,
30858,@frame_tests
30859,def test_fn2(s1):
30860,"    print ""This is only a test! %s"" %(s1)"
30861,
30862,@frame_tests
30863,"def test_fn3(s1, s2):"
30864,"    print ""This is only a test! %s %s"" %(s1, s2)"
30865,
30866,"if __name__ == ""__main__"":"
30867,    test_fn1()
30868,    test_fn2('OK!')
30869,"    test_fn3('OK!', 'Just a test!')"
30870,Start: test_fn1  
30871,This is only a test!  
30872,End: test_fn1  
30873,  
30874,  
30875,Start: test_fn2  
30876,This is only a test! OK!  
30877,End: test_fn2  
30878,  
30879,  
30880,Start: test_fn3  
30881,This is only a test! OK! Just a test!  
30882,End: test_fn3  
30883,"def wrapper(*args, **kwargs):"
30884,"fn(*args, **kwargs)"
30885,makestyle(style='bold')
30886,@functools.wraps
30887,TypeError
30888,@functools.wraps
30889,*args
30890,**kwargs
30891,decopatch
30892,makefun.wraps
30893,makefun
30894,decorator
30895,"from decopatch import function_decorator, DECORATED"
30896,from makefun import wraps
30897,
30898,@function_decorator
30899,"def makestyle(st='b', fn=DECORATED):"
30900,"    open_tag = ""<%s>"" % st"
30901,"    close_tag = ""</%s>"" % st"
30902,
30903,    @wraps(fn)
30904,"    def wrapped(*args, **kwargs):"
30905,"        return open_tag + fn(*args, **kwargs) + close_tag"
30906,
30907,    return wrapped
30908,decopatch
30909,"from decopatch import function_decorator, WRAPPED, F_ARGS, F_KWARGS"
30910,
30911,@function_decorator
30912,"def makestyle(st='b', fn=WRAPPED, f_args=F_ARGS, f_kwargs=F_KWARGS):"
30913,"    open_tag = ""<%s>"" % st"
30914,"    close_tag = ""</%s>"" % st"
30915,"    return open_tag + fn(*f_args, **f_kwargs) + close_tag"
30916,@makestyle
30917,@makestyle('i')
30918,def hello(who):
30919,"    return ""hello %s"" % who"
30920,
30921,assert hello('world') == '<b><i>hello world</i></b>'    
30922,def jwt_or_redirect(fn):
30923,  @wraps(fn)
30924,"  def decorator(*args, **kwargs):"
30925,    ...
30926,"    return fn(*args, **kwargs)"
30927,  return decorator
30928,
30929,def jwt_refresh(fn):
30930,  @wraps(fn)
30931,"  def decorator(*args, **kwargs):"
30932,    ...
30933,    new_kwargs = {'refreshed_jwt': 'xxxxx-xxxxxx'}
30934,    new_kwargs.update(kwargs)
30935,"    return fn(*args, **new_kwargs)"
30936,  return decorator
30937,@app.route('/')
30938,@jwt_or_redirect
30939,@jwt_refresh
30940,"def home_page(*args, **kwargs):"
30941,  return kwargs['refreched_jwt']
30942,import matplotlib.pylab as plt
30943,
30944,def remove_axis(func):
30945,"    def inner(img, alpha):"
30946,        plt.axis('off')
30947,"        func(img, alpha)"
30948,    return inner
30949,
30950,def plot_gray(func):
30951,"    def inner(img, alpha):"
30952,        plt.gray()
30953,"        func(img, alpha)"
30954,    return inner
30955,
30956,@remove_axis
30957,@plot_gray
30958,"def plot_image(img, alpha):"
30959,"    plt.imshow(img, alpha=alpha)"
30960,    plt.show()
30961,"plot_image(plt.imread('lena_color.jpg'), 0.4)"
30962,remove_axis
30963,plot_gray
30964,cmap='gray'
30965,viridis
30966,"plot_image(plt.imread('lena_bw.jpg'), 0.8)"
30967,"remove_axis(plot_gray(plot_image))(img, alpha)"
30968,import
30969,virtualenv
30970,pip
30971,setuptools
30972,virtualenv
30973,pipenv
30974,import importlib.util
30975,import sys
30976,"spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")"
30977,foo = importlib.util.module_from_spec(spec)
30978,"sys.modules[""module.name""] = foo"
30979,spec.loader.exec_module(foo)
30980,foo.MyClass()
30981,from importlib.machinery import SourceFileLoader
30982,
30983,"foo = SourceFileLoader(""module.name"", ""/path/to/file.py"").load_module()"
30984,foo.MyClass()
30985,import imp
30986,
30987,"foo = imp.load_source('module.name', '/path/to/file.py')"
30988,foo.MyClass()
30989,__import__
30990,imp.load_source
30991,.__name__
30992,imp.load_source()
30993,sys.modules
30994,import sys
30995,"# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py"
30996,sys.path.append('/foo/bar/mock-0.3.1')
30997,
30998,from testcase import TestCase
30999,from testutils import RunTests
31000,"from mock import Mock, sentinel, patch"
31001,sys.path.append
31002,importlib.import_module(mod_name)
31003,sys.path.pop()
31004,import sys
31005,"sys.path.append(""/path/to/my/modules/"")"
31006,import my_module
31007,.bashrc
31008,source ~/.bashrc
31009,"export PYTHONPATH=""${PYTHONPATH}:/path/to/my/modules/"""
31010,"MODULE_PATH = ""/path/to/your/module/__init__.py"""
31011,"MODULE_NAME = ""mymodule"""
31012,import importlib
31013,import sys
31014,"spec = importlib.util.spec_from_file_location(MODULE_NAME, MODULE_PATH)"
31015,module = importlib.util.module_from_spec(spec)
31016,sys.modules[spec.name] = module 
31017,spec.loader.exec_module(module)
31018,mymodule
31019,__init__.py
31020,spec.submodule_search_locations = [os.path.dirname(MODULE_PATH)]
31021,__init__.py
31022,None
31023,from runpy import run_path
31024,"settings = run_path(""/path/to/file.py"")"
31025,result[name]
31026,"result.get('name', default_value)"
31027,runpy.run_path
31028,runpy.run_module
31029,__main__
31030,pymain_run_module
31031,runpy._run_module_as_main
31032,runpy.run_module
31033,__main__
31034,-i
31035,__main__
31036,-m
31037,configfile = '~/config.py'
31038,
31039,import os
31040,import sys
31041,
31042,sys.path.append(os.path.dirname(os.path.expanduser(configfile)))
31043,
31044,import config
31045,"load_source(module_name, path_to_file)"
31046,"imp.load_dynamic(module_name, path_to_file)"
31047,sys.path
31048,/foo/bar.py
31049,import sys
31050,sys.path[0:0] = ['/foo'] # Puts the /foo directory at the start of your path
31051,import bar
31052,sys.path[0:0] = ['/foo']
31053,Explicit is better than implicit.
31054,"sys.path.insert(0, ...)"
31055,sys.path[0:0]
31056,sys.path.append(...)
31057,"config_file = ""/tmp/config.py"""
31058,with open(config_file) as f:
31059,"    code = compile(f.read(), config_file, 'exec')"
31060,"    exec(code, globals(), locals())"
31061,load_source
31062,globals
31063,locals
31064,spec_from_loader
31065,spec_from_file_location
31066,"from importlib.util import spec_from_loader, module_from_spec"
31067,from importlib.machinery import SourceFileLoader 
31068,
31069,"spec = spec_from_loader(""module.name"", SourceFileLoader(""module.name"", ""/path/to/file.py""))"
31070,mod = module_from_spec(spec)
31071,spec.loader.exec_module(mod)
31072,SourceFileLoader
31073,.txt
31074,spec_from_file_location
31075,.txt
31076,importlib.machinery.SOURCE_SUFFIXES
31077,haggis.load.load_module
31078,utils.py
31079,src/main/util/
31080,import sys
31081,sys.path.append('./')
31082,
31083,import src.main.util.utils
31084,#or
31085,from src.main.util.utils import json_converter # json_converter is example method
31086,__import__
31087,chdir
31088,def import_file(full_path_to_module):
31089,    try:
31090,        import os
31091,"        module_dir, module_file = os.path.split(full_path_to_module)"
31092,"        module_name, module_ext = os.path.splitext(module_file)"
31093,        save_cwd = os.getcwd()
31094,        os.chdir(module_dir)
31095,        module_obj = __import__(module_name)
31096,        module_obj.__file__ = full_path_to_module
31097,        globals()[module_name] = module_obj
31098,        os.chdir(save_cwd)
31099,    except Exception as e:
31100,        raise ImportError(e)
31101,    return module_obj
31102,
31103,
31104,import_file('/home/somebody/somemodule.py')
31105,except:
31106,save_cwd = os.getcwd()
31107,try: …
31108,finally: os.chdir(save_cwd)
31109,this is already addressed by the standard library
31110,imp.find_module()
31111,imp.load_module()
31112,/home/mypath/mymodule.py
31113,"imp.find_module('mymodule', '/home/mypath/')"
31114,pkgutil
31115,walk_packages
31116,importlib
31117,import pkgutil
31118,import importlib
31119,
31120,packages = pkgutil.walk_packages(path='.')
31121,"for importer, name, is_package in packages:"
31122,    mod = importlib.import_module(name)
31123,"    # do whatever you want with module now, it's been imported!"
31124,import sys
31125,"sys.path.append(""<project-path>/lib/"")"
31126,from tes1 import Client1
31127,from tes2 import Client2
31128,import tes3
31129,from test import Client1
31130,from test import Client2
31131,from test import test3
31132,from thesmuggler import smuggle
31133,
31134,# À la `import weapons`
31135,weapons = smuggle('weapons.py')
31136,
31137,"# À la `from contraband import drugs, alcohol`"
31138,"drugs, alcohol = smuggle('drugs', 'alcohol', source='contraband.py')"
31139,
31140,"# À la `from contraband import drugs as dope, alcohol as booze`"
31141,"dope, booze = smuggle('drugs', 'alcohol', source='contraband.py')"
31142,def import_module_from_file(full_path_to_module):
31143,"    """""""
31144,    Import a module given the full path/filename of the .py file
31145,
31146,    Python 3.4
31147,
31148,"    """""""
31149,
31150,    module = None
31151,
31152,    try:
31153,
31154,        # Get module name and path from full path
31155,"        module_dir, module_file = os.path.split(full_path_to_module)"
31156,"        module_name, module_ext = os.path.splitext(module_file)"
31157,
31158,"        # Get module ""spec"" from filename"
31159,"        spec = importlib.util.spec_from_file_location(module_name,full_path_to_module)"
31160,
31161,        module = spec.loader.load_module()
31162,
31163,    except Exception as ec:
31164,        # Simple error printing
31165,"        # Insert ""sophisticated"" stuff here"
31166,        print(ec)
31167,
31168,    finally:
31169,        return module
31170,imp
31171,import_file
31172,>>>from import_file import import_file
31173,>>>mylib = import_file('c:\\mylib.py')
31174,>>>another = import_file('relative_subdir/another.py')
31175,"filename = ""directory/module.py"""
31176,
31177,"directory, module_name = os.path.split(filename)"
31178,module_name = os.path.splitext(module_name)[0]
31179,
31180,path = list(sys.path)
31181,"sys.path.insert(0, directory)"
31182,try:
31183,    module = __import__(module_name)
31184,finally:
31185,    sys.path[:] = path # restore
31186,importlib
31187,imp
31188,import importlib
31189,
31190,"dirname, basename = os.path.split(pyfilepath) # pyfilepath: '/my/path/mymodule.py'"
31191,sys.path.append(dirname) # only directories should be added to PYTHONPATH
31192,module_name = os.path.splitext(basename)[0] # '/my/path/mymodule.py' --> 'mymodule'
31193,"module = importlib.import_module(module_name) # name space of defined module (otherwise we would literally look for ""module_name"")"
31194,a = module.myvar
31195,b = module.myfunc(a)
31196,sys.path
31197,sys.path.pop()
31198,from pydoc import importfile
31199,module = importfile('/path/to/module.py')
31200,"path = os.path.join('./path/to/folder/with/py/files', '*.py')"
31201,for infile in glob.glob(path):
31202,    basename = os.path.basename(infile)
31203,    basename_without_extension = basename[:-3]
31204,
31205,    # http://docs.python.org/library/imp.html?highlight=imp#module-imp
31206,"    imp.load_source(basename_without_extension, infile)"
31207,"name, ext = os.path.splitext(os.path.basename(infile))"
31208,###################
31209,##                #
31210,## classloader.py #
31211,##                #
31212,###################
31213,
31214,"import sys, types"
31215,
31216,def _get_mod(modulePath):
31217,    try:
31218,        aMod = sys.modules[modulePath]
31219,"        if not isinstance(aMod, types.ModuleType):"
31220,            raise KeyError
31221,    except KeyError:
31222,        # The last [''] is very important!
31223,"        aMod = __import__(modulePath, globals(), locals(), [''])"
31224,        sys.modules[modulePath] = aMod
31225,    return aMod
31226,
31227,def _get_func(fullFuncName):
31228,"    """"""Retrieve a function object from a full dotted-package name."""""""
31229,
31230,"    # Parse out the path, module, and function"
31231,"    lastDot = fullFuncName.rfind(u""."")"
31232,    funcName = fullFuncName[lastDot + 1:]
31233,    modPath = fullFuncName[:lastDot]
31234,
31235,    aMod = _get_mod(modPath)
31236,"    aFunc = getattr(aMod, funcName)"
31237,
31238,    # Assert that the function is a *callable* attribute.
31239,"    assert callable(aFunc), u""%s is not callable."" % fullFuncName"
31240,
31241,"    # Return a reference to the function itself,"
31242,    # not the results of the function.
31243,    return aFunc
31244,
31245,"def _get_class(fullClassName, parentClass=None):"
31246,"    """"""Load a module and retrieve a class (NOT an instance)."
31247,
31248,"    If the parentClass is supplied, className must be of parentClass"
31249,    or a subclass of parentClass (or None is returned).
31250,"    """""""
31251,    aClass = _get_func(fullClassName)
31252,
31253,    # Assert that the class is a subclass of parentClass.
31254,    if parentClass is not None:
31255,"        if not issubclass(aClass, parentClass):"
31256,"            raise TypeError(u""%s is not a subclass of %s"" %"
31257,"                            (fullClassName, parentClass))"
31258,
31259,"    # Return a reference to the class itself, not an instantiated object."
31260,    return aClass
31261,
31262,
31263,######################
31264,##       Usage      ##
31265,######################
31266,
31267,class StorageManager: pass
31268,class StorageManagerMySQL(StorageManager): pass
31269,
31270,"def storage_object(aFullClassName, allOptions={}):"
31271,"    aStoreClass = _get_class(aFullClassName, StorageManager)"
31272,    return aStoreClass(allOptions)
31273,exec
31274,exec
31275,"""/path/to/module"
31276,foo()
31277,module = dict()
31278,"with open(""/path/to/module"") as f:"
31279,"    exec(f.read(), module)"
31280,module['foo']()
31281,class MyModuleClass(dict):
31282,"    def __getattr__(self, name):"
31283,        return self.__getitem__(name)
31284,ln -s /absolute/path/to/module/module.py /absolute/path/to/script/module.py
31285,/absolute/path/to/script/module.pyc
31286,/absolute/path/to/module/module.py
31287,from module import *
31288,git
31289,git status
31290,import sys
31291,import importlib.machinery
31292,
31293,"def load_module(name, filename):"
31294,    # If the Loader finds the module name in this list it will use
31295,    # module_name.__file__ instead so we need to delete it here
31296,    if name in sys.modules:
31297,        del sys.modules[name]
31298,"    loader = importlib.machinery.ExtensionFileLoader(name, filename)"
31299,    module = loader.load_module()
31300,    locals()[name] = module
31301,    globals()[name] = module
31302,
31303,"load_module('something', r'C:\Path\To\something.pyd')"
31304,something.do_something()
31305,libPath = '../../MyLibs'
31306,import sys
31307,if not libPath in sys.path: sys.path.append(libPath)
31308,import pyfunc as pf
31309,importlib
31310,sys.path
31311,<root>
31312, |
31313, +- test.py
31314, |
31315, +- testlib.py
31316, |
31317, +- /std1
31318, |   |
31319, |   +- testlib.std1.py
31320, |
31321, +- /std2
31322, |   |
31323, |   +- testlib.std2.py
31324, |
31325, +- /std3
31326,     |
31327,     +- testlib.std3.py
31328,test.py
31329,  -> testlib.py
31330,    -> testlib.std1.py
31331,      -> testlib.std2.py
31332,    -> testlib.std3.py
31333,"import os, sys, inspect, copy"
31334,
31335,"SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\','/')"
31336,SOURCE_DIR = os.path.dirname(SOURCE_FILE)
31337,
31338,"print(""test::SOURCE_FILE: "", SOURCE_FILE)"
31339,
31340,# portable import to the global space
31341,sys.path.append(TACKLELIB_ROOT) # TACKLELIB_ROOT - path to the library directory
31342,import tacklelib as tkl
31343,
31344,tkl.tkl_init(tkl)
31345,
31346,# cleanup
31347,"del tkl # must be instead of `tkl = None`, otherwise the variable would be still persist"
31348,sys.path.pop()
31349,
31350,"tkl_import_module(SOURCE_DIR, 'testlib.py')"
31351,
31352,print(globals().keys())
31353,
31354,testlib.base_test()
31355,testlib.testlib_std1.std1_test()
31356,testlib.testlib_std1.testlib_std2.std2_test()
31357,#testlib.testlib.std3.std3_test()                             # does not reachable directly ...
31358,"getattr(globals()['testlib'], 'testlib.std3').std3_test()     # ... but reachable through the `globals` + `getattr`"
31359,
31360,"tkl_import_module(SOURCE_DIR, 'testlib.py', '.')"
31361,
31362,print(globals().keys())
31363,
31364,base_test()
31365,testlib_std1.std1_test()
31366,testlib_std1.testlib_std2.std2_test()
31367,#testlib.std3.std3_test()                                     # does not reachable directly ...
31368,globals()['testlib.std3'].std3_test()                         # ... but reachable through the `globals` + `getattr`
31369,# optional for 3.4.x and higher
31370,"#import os, inspect"
31371,#
31372,"#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\','/')"
31373,#SOURCE_DIR = os.path.dirname(SOURCE_FILE)
31374,
31375,"print(""1 testlib::SOURCE_FILE: "", SOURCE_FILE)"
31376,
31377,"tkl_import_module(SOURCE_DIR + '/std1', 'testlib.std1.py', 'testlib_std1')"
31378,
31379,# SOURCE_DIR is restored here
31380,"print(""2 testlib::SOURCE_FILE: "", SOURCE_FILE)"
31381,
31382,"tkl_import_module(SOURCE_DIR + '/std3', 'testlib.std3.py')"
31383,
31384,"print(""3 testlib::SOURCE_FILE: "", SOURCE_FILE)"
31385,
31386,def base_test():
31387,  print('base_test')
31388,# optional for 3.4.x and higher
31389,"#import os, inspect"
31390,#
31391,"#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\','/')"
31392,#SOURCE_DIR = os.path.dirname(SOURCE_FILE)
31393,
31394,"print(""testlib.std1::SOURCE_FILE: "", SOURCE_FILE)"
31395,
31396,"tkl_import_module(SOURCE_DIR + '/../std2', 'testlib.std2.py', 'testlib_std2')"
31397,
31398,def std1_test():
31399,  print('std1_test')
31400,# optional for 3.4.x and higher
31401,"#import os, inspect"
31402,#
31403,"#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\','/')"
31404,#SOURCE_DIR = os.path.dirname(SOURCE_FILE)
31405,
31406,"print(""testlib.std2::SOURCE_FILE: "", SOURCE_FILE)"
31407,
31408,def std2_test():
31409,  print('std2_test')
31410,# optional for 3.4.x and higher
31411,"#import os, inspect"
31412,#
31413,"#SOURCE_FILE = os.path.abspath(inspect.getsourcefile(lambda:0)).replace('\\','/')"
31414,#SOURCE_DIR = os.path.dirname(SOURCE_FILE)
31415,
31416,"print(""testlib.std3::SOURCE_FILE: "", SOURCE_FILE)"
31417,
31418,def std3_test():
31419,  print('std3_test')
31420,3.7.4
31421,test::SOURCE_FILE:  <root>/test01/test.py
31422,import : <root>/test01/testlib.py as testlib -> []
31423,1 testlib::SOURCE_FILE:  <root>/test01/testlib.py
31424,import : <root>/test01/std1/testlib.std1.py as testlib_std1 -> ['testlib']
31425,"import : <root>/test01/std1/../std2/testlib.std2.py as testlib_std2 -> ['testlib', 'testlib_std1']"
31426,testlib.std2::SOURCE_FILE:  <root>/test01/std1/../std2/testlib.std2.py
31427,2 testlib::SOURCE_FILE:  <root>/test01/testlib.py
31428,import : <root>/test01/std3/testlib.std3.py as testlib.std3 -> ['testlib']
31429,testlib.std3::SOURCE_FILE:  <root>/test01/std3/testlib.std3.py
31430,3 testlib::SOURCE_FILE:  <root>/test01/testlib.py
31431,"dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '__file__', '__cached__', 'os', 'sys', 'inspect', 'copy', 'SOURCE_FILE', 'SOURCE_DIR', 'TackleGlobalImportModuleState', 'tkl_membercopy', 'tkl_merge_module', 'tkl_get_parent_imported_module_state', 'tkl_declare_global', 'tkl_import_module', 'TackleSourceModuleState', 'tkl_source_module', 'TackleLocalImportModuleState', 'testlib'])"
31432,base_test
31433,std1_test
31434,std2_test
31435,std3_test
31436,import : <root>/test01/testlib.py as . -> []
31437,1 testlib::SOURCE_FILE:  <root>/test01/testlib.py
31438,import : <root>/test01/std1/testlib.std1.py as testlib_std1 -> ['testlib']
31439,"import : <root>/test01/std1/../std2/testlib.std2.py as testlib_std2 -> ['testlib', 'testlib_std1']"
31440,testlib.std2::SOURCE_FILE:  <root>/test01/std1/../std2/testlib.std2.py
31441,2 testlib::SOURCE_FILE:  <root>/test01/testlib.py
31442,import : <root>/test01/std3/testlib.std3.py as testlib.std3 -> ['testlib']
31443,testlib.std3::SOURCE_FILE:  <root>/test01/std3/testlib.std3.py
31444,3 testlib::SOURCE_FILE:  <root>/test01/testlib.py
31445,"dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '__file__', '__cached__', 'os', 'sys', 'inspect', 'copy', 'SOURCE_FILE', 'SOURCE_DIR', 'TackleGlobalImportModuleState', 'tkl_membercopy', 'tkl_merge_module', 'tkl_get_parent_imported_module_state', 'tkl_declare_global', 'tkl_import_module', 'TackleSourceModuleState', 'tkl_source_module', 'TackleLocalImportModuleState', 'testlib', 'testlib_std1', 'testlib.std3', 'base_test'])"
31446,base_test
31447,std1_test
31448,std2_test
31449,std3_test
31450,3.7.4
31451,3.2.5
31452,2.7.16
31453,testlib.std.py
31454,testlib
31455,testlib.blabla.py
31456,testlib_blabla
31457,sys.path
31458,SOURCE_FILE
31459,SOURCE_DIR
31460,tkl_import_module
31461,3.4.x
31462,tkl_import_module
31463,named->local->named
31464,local->named->local
31465,3.4.x
31466,tkl_import_module
31467,tkl_declare_global
31468,3.3.x
31469,tkl_import_module
31470,tkl_import_module
31471,3.4.x
31472,tkl_import_module
31473,tkl_import_module
31474,tkl_source_module
31475,source
31476,tkl_declare_global
31477,from pathlib import Path
31478,"from importlib.util import spec_from_file_location, module_from_spec"
31479,from typing import Optional
31480,
31481,
31482,"def get_module_from_path(path: Path, relative_to: Optional[Path] = None):"
31483,    if not relative_to:
31484,        relative_to = Path.cwd()
31485,
31486,    abs_path = path.absolute()
31487,    relative_path = abs_path.relative_to(relative_to.absolute())
31488,"    if relative_path.name == ""__init__.py"":"
31489,        relative_path = relative_path.parent
31490,"    module_name = ""."".join(relative_path.with_suffix("""").parts)"
31491,"    mod = module_from_spec(spec_from_file_location(module_name, path))"
31492,    return mod
31493,
31494,
31495,"def get_modules_from_folder(folder: Optional[Path] = None, glob_str: str = ""*/**/*.py""):"
31496,    if not folder:
31497,"        folder = Path(""."")"
31498,
31499,    mod_list = []
31500,    for file_path in sorted(folder.glob(glob_str)):
31501,        mod_list.append(get_module_from_path(file_path))
31502,
31503,    return mod_list
31504,__init__.py
31505,import pathlib
31506,
31507,def likely_python_module(filename):
31508,    '''
31509,"    Given a filename or Path, return the ""likely"" python module name.  That is, iterate"
31510,    the parent directories until it doesn't contain an __init__.py file.
31511,
31512,    :rtype: str
31513,    '''
31514,    p = pathlib.Path(filename).resolve()
31515,    paths = []
31516,    if p.name != '__init__.py':
31517,        paths.append(p.stem)
31518,    while True:
31519,        p = p.parent
31520,        if not p:
31521,            break
31522,        if not p.is_dir():
31523,            break
31524,
31525,        inits = [f for f in p.iterdir() if f.name == '__init__.py']
31526,        if not inits:
31527,            break
31528,
31529,        paths.append(p.stem)
31530,
31531,    return '.'.join(reversed(paths))
31532,__init__.py
31533,__init__.py
31534,"""C:\meshes\as"""
31535,'\'
31536,'C:/mydir'
31537,'C:\\mydir'
31538,r'C:\mydir'
31539,os.path
31540,"os.path.join(mydir, myfile)"
31541,"pathlib.Path(mydir, myfile)"
31542,pathlib.Path(mydir) / myfile
31543,os.path
31544,"os.path.join( ""C:"", ""meshes"", ""as"" )"
31545,"r""C:\meshes\as"""
31546,"""C:\\meshes\\as.jpg"""
31547,"""C:\"""
31548,join
31549,"""C:\"""
31550,os.path.normpath
31551,"os.path.join( ""C:\\"", ""meshes"", ""as"" )"
31552,\
31553,\a
31554,>>> '\a'
31555,'\x07'
31556,>>> len('\a')
31557,1
31558,>>> 'C:\meshes\as'
31559,'C:\\meshes\x07s'
31560,>>> print('C:\meshes\as')
31561,C:\meshess
31562,\t
31563,\n
31564,\r
31565,>>> list('C:\test')
31566,"['C', ':', '\t', 'e', 's', 't']"
31567,>>> list('C:\nest')
31568,"['C', ':', '\n', 'e', 's', 't']"
31569,>>> list('C:\rest')
31570,"['C', ':', '\r', 'e', 's', 't']"
31571,r
31572,R
31573,>>> r'C:\meshes\as'
31574,'C:\\meshes\\as'
31575,>>> print(r'C:\meshes\as')
31576,C:\meshes\as
31577,os.path.join
31578,>>> import os
31579,">>> os.path.join('C:', os.sep, 'meshes', 'as')"
31580,'C:\\meshes\\as'
31581,pathlib
31582,>>> from pathlib import Path
31583,">>> Path('C:', '/', 'meshes', 'as')"
31584,WindowsPath('C:/meshes/as')
31585,Path
31586,from pathlib import Path
31587,"data_folder = Path(""source_data/text_files/"")"
31588,"file_to_open = data_folder / ""raw_data.txt"""
31589,print(file_to_open.read_text())
31590,Path
31591,os.path.join(...)
31592,normpath(...)
31593,Path(...)
31594,os.path.join(...)
31595,/
31596,normpath(...)
31597,/
31598,os.path.join(...)
31599,"WindowsPath(""C:\meshes\as"")"
31600,WindowsPath(r'C:/meshes/as')
31601,global
31602,CONSTANTS_ARE_CAPITALIZED
31603,globals_are_not
31604,const
31605,global
31606,cache = {}
31607,
31608,def foo(args):
31609,    global cache
31610,
31611,    cache[args] = ...
31612,"d = {'x': 1, 'y': 2, 'z': 3}"
31613,
31614,for key in d:
31615,"    print(key, 'corresponds to', d[key])"
31616,key
31617,key
31618,"for key, value in d.items():"
31619,for
31620,key
31621,for key in d:
31622,"for key, value in d.items():"
31623,"for key, value in d.iteritems():"
31624,key
31625,poop
31626,iteritems()
31627,items()
31628,iteritems()
31629,viewitems()
31630,items()
31631,"(key, value)"
31632,items()
31633,list(d.items())
31634,Keys and values are iterated over in insertion order. 
31635,for k in dict: ...
31636,for k in dict.keys(): ...
31637,for key in dict.iterkeys(): ...
31638,
31639,for value in dict.itervalues(): ...
31640,
31641,"for key, value in dict.iteritems(): ..."
31642,for x in dict
31643,for x in
31644,   dict.iterkeys()
31645,dict.iterkeys()
31646,dict.itervalues()
31647,dict.iteritems()
31648,dict.keys()
31649,dict.values()
31650,dict.items()
31651,dict
31652,">>> d = {'x': 1, 'y': 2, 'z': 3}"
31653,>>> list(d)
31654,"['y', 'x', 'z']"
31655,>>> d.keys()
31656,"['y', 'x', 'z']"
31657,dict.items()
31658,>>> d.items()
31659,"[('y', 2), ('x', 1), ('z', 3)]"
31660,k
31661,v
31662,"for k,v in d.items():"
31663,"    print(k, 'corresponds to', v)"
31664,k
31665,v
31666,dict
31667,"for letter, number in d.items():"
31668,"    print(letter, 'corresponds to', number)"
31669,"for letter, number in d.items():"
31670,"    print('{0} corresponds to {1}'.format(letter, number))"
31671,key
31672,">>> d = {'x': 1, 'y': 2, 'z': 3} "
31673,>>> for my_var in d:
31674,">>>     print my_var, 'corresponds to', d[my_var]"
31675,
31676,x corresponds to 1
31677,y corresponds to 2
31678,z corresponds to 3
31679,"d = {'x': 1, 'y': 2, 'z': 3} "
31680,
31681,"for the_key, the_value in d.iteritems():"
31682,"    print the_key, 'corresponds to', the_value"
31683,"d = {'x': 1, 'y': 2, 'z': 3} "
31684,
31685,"for the_key, the_value in d.items():"
31686,"    print(the_key, 'corresponds to', the_value)"
31687,for .. in ..
31688,dictionary[key]
31689,"for k,v in dict.iteritems()"
31690,"for k,v in dict.items()"
31691,items()
31692,iteritems()
31693,in
31694,for key in dict
31695,for key in dict.keys()
31696,in
31697,in is an operator
31698,"d = {'x': 1, 'y': 2, 'z': 3} "
31699,"for i, (key, value) in enumerate(d.items()):"
31700,"   print(i, key, value)"
31701,ValueError
31702,i
31703,"d = {'x': 1, 'y': 2, 'z': 3} "
31704,for key in d:
31705,    ...
31706,for
31707,"d = {'x': 1, 'y': 2, 'z': 3} "
31708,key
31709,>>> [k for k in d]
31710,"['x', 'y', 'z']"
31711,>>> list(d)
31712,"['x', 'y', 'z']"
31713,__iter__
31714,>>> d.__iter__()
31715,<dict_keyiterator object at 0x7fb1747bee08>
31716,iter
31717,>>> key_iterator = iter(d)
31718,>>> key_iterator
31719,<dict_keyiterator object at 0x7fb172fa9188>
31720,__next__
31721,next
31722,>>> next(key_iterator)
31723,'x'
31724,>>> next(key_iterator)
31725,'y'
31726,>>> next(key_iterator)
31727,'z'
31728,>>> next(key_iterator)
31729,Traceback (most recent call last):
31730,"  File ""<stdin>"", line 1, in <module>"
31731,StopIteration
31732,StopIteration
31733,for
31734,StopIteration
31735,>>> list(key_iterator)
31736,[]
31737,>>> new_key_iterator = iter(d)
31738,>>> list(new_key_iterator)
31739,"['x', 'y', 'z']"
31740,"d = {'x': 1, 'y': 2, 'z': 3} "
31741,for key in d:
31742,>>> for each_key in d:
31743,"...     print(each_key, '=>', d[each_key])"
31744,... 
31745,x => 1
31746,y => 2
31747,z => 3
31748,.values
31749,.items
31750,>>> list(d.values())
31751,"[1, 2, 3]"
31752,>>> list(d.items())
31753,"[('x', 1), ('y', 2), ('z', 3)]"
31754,"for a_key, corresponding_value in d.items():"
31755,"    print(a_key, corresponding_value)"
31756,"dictionary= {1:""a"", 2:""b"", 3:""c""}"
31757,
31758,#To iterate over the keys
31759,for key in dictionary.keys():
31760,    print(key)
31761,
31762,#To Iterate over the values
31763,for value in dictionary.values():
31764,    print(value)
31765,
31766,#To Iterate both the keys and values
31767,"for key, value in dictionary.items():"
31768,"    print(key,'\t', value)"
31769,dicttype
31770,"_PyDict_Next(PyObject *op, Py_ssize_t *ppos, PyObject **pkey,"
31771,"             PyObject **pvalue, Py_hash_t *phash)"
31772,my_dict.keys()
31773,for key in my_dict:
31774,"    my_dict[key+""-1""] = my_dict[key]-1"
31775,for key in my_dict
31776,my_dict.keys()
31777,for key in my_dict.keys()
31778,"cat  = {'name': 'Snowy', 'color': 'White' ,'age': 14}"
31779,"for key , value in cat.items():"
31780,"   print(key, ': ', value)"
31781,name:  Snowy
31782,color:  White
31783,age:  14
31784,"d = {'x': 3, 'y': 1, 'z': 2}"
31785,
31786,def by_value(item):
31787,    return item[1]
31788,
31789,"for key, value in sorted(d.items(), key=by_value):"
31790,"    print(key, '->', value)"
31791,y -> 1
31792,z -> 2
31793,x -> 3
31794,"d = {'x': 1, 'y': 2, 'z': 3} "
31795,for key in d:
31796,"    print (key, 'corresponds to', d[key])"
31797,"d = {'x': 1, 'y': 2, 'z': 3} "
31798,for i in d:
31799,"    print (i, 'corresponds to', d[i])"
31800,"d = {'x': 1, 'y': 2, 'z': 3}"
31801,print(d.keys())
31802,response = urllib2.urlopen(request)
31803,phantomjs
31804,phantomjs
31805,phantomjs --version
31806,# result:
31807,2.1.1
31808,<!DOCTYPE html>
31809,<html>
31810,<head>
31811,"  <meta charset=""utf-8"">"
31812,  <title>Javascript scraping test</title>
31813,</head>
31814,<body>
31815,  <p id='intro-text'>No javascript support</p>
31816,  <script>
31817,     document.getElementById('intro-text').innerHTML = 'Yay! Supports javascript';
31818,  </script> 
31819,</body>
31820,</html>
31821,No javascript support
31822,Yay! Supports javascript
31823,import requests
31824,from bs4 import BeautifulSoup
31825,response = requests.get(my_url)
31826,soup = BeautifulSoup(response.text)
31827,"soup.find(id=""intro-text"")"
31828,# Result:
31829,"<p id=""intro-text"">No javascript support</p>"
31830,from selenium import webdriver
31831,driver = webdriver.PhantomJS()
31832,driver.get(my_url)
31833,p_element = driver.find_element_by_id(id_='intro-text')
31834,print(p_element.text)
31835,# result:
31836,'Yay! Supports javascript'
31837,import dryscrape
31838,from bs4 import BeautifulSoup
31839,session = dryscrape.Session()
31840,session.visit(my_url)
31841,response = session.body()
31842,soup = BeautifulSoup(response)
31843,"soup.find(id=""intro-text"")"
31844,# Result:
31845,"<p id=""intro-text"">Yay! Supports javascript</p>"
31846,@Expenzor
31847,"Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead"
31848,sudo docker run -p 8050:8050 scrapinghub/splash
31849,pip install scrapy-splash
31850,settings.py
31851,settings.py
31852,DOWNLOADER_MIDDLEWARES = {
31853,"      'scrapy_splash.SplashCookiesMiddleware': 723,"
31854,"      'scrapy_splash.SplashMiddleware': 725,"
31855,"      'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,"
31856,}
31857,SPLASH_URL = 'http://localhost:8050'
31858,DUPEFILTER_CLASS = 'scrapy_splash.SplashAwareDupeFilter'
31859,HTTPCACHE_STORAGE = 'scrapy_splash.SplashAwareFSCacheStorage'
31860,SplashRequest
31861,class MySpider(scrapy.Spider):
31862,"    name = ""jsscraper"""
31863,"    start_urls = [""http://quotes.toscrape.com/js/""]"
31864,
31865,    def start_requests(self):
31866,        for url in self.start_urls:
31867,        yield SplashRequest(
31868,"            url=url, callback=self.parse, endpoint='render.html'"
31869,        )
31870,
31871,"    def parse(self, response):"
31872,"        for q in response.css(""div.quote""):"
31873,        quote = QuoteItem()
31874,"        quote[""author""] = q.css("".author::text"").extract_first()"
31875,"        quote[""quote""] = q.css("".text::text"").extract_first()"
31876,        yield quote
31877,pipenv install requests-html
31878,from requests_html import HTMLSession
31879,
31880,session = HTMLSession()
31881,r = session.get(a_page_url)
31882,r.html.render()
31883,r.html
31884,r.html.html
31885,from selenium import webdriver
31886,import time
31887,
31888,driver = webdriver.Firefox()
31889,driver.get(url)
31890,time.sleep(5)
31891,htmlSource = driver.page_source
31892,options = webdriver.ChromeOptions() options.add_argument('--headless') driver = webdriver.Chrome(options=options)
31893,Requests
31894,Requests-HTML
31895,Requests-HTML
31896,from requests_html import HTMLSession
31897,session = HTMLSession()
31898,
31899,r = session.get('http://python-requests.org/')
31900,
31901,r.html.render()
31902,
31903,r.html.search('Python 2 will retire in only {months} months!')['months']
31904,
31905,'<time>25</time>' #This is the result.
31906,'http://python-requests.org/'
31907,.search
31908,import sys  
31909,from PyQt4.QtGui import *  
31910,from PyQt4.QtCore import *  
31911,from PyQt4.QtWebKit import *  
31912,from lxml import html 
31913,
31914,#Take this class for granted.Just use result of rendering.
31915,class Render(QWebPage):  
31916,"  def __init__(self, url):  "
31917,    self.app = QApplication(sys.argv)  
31918,    QWebPage.__init__(self)  
31919,    self.loadFinished.connect(self._loadFinished)  
31920,    self.mainFrame().load(QUrl(url))  
31921,    self.app.exec_()  
31922,
31923,"  def _loadFinished(self, result):  "
31924,    self.frame = self.mainFrame()  
31925,    self.app.quit()  
31926,
31927,url = 'http://pycoders.com/archive/'  
31928,r = Render(url)  
31929,result = r.frame.toHtml()
31930,# This step is important.Converting QString to Ascii for lxml to process
31931,
31932,# The following returns an lxml element tree
31933,archive_links = html.fromstring(str(result.toAscii()))
31934,print archive_links
31935,
31936,# The following returns an array containing the URLs
31937,"raw_links = archive_links.xpath('//div[@class=""campaign""]/a/@href')"
31938,print raw_links
31939,QtWebKit
31940,QtWebEngineWidgets
31941,$ pip install selenium
31942,from selenium import webdriver
31943,
31944,browser = webdriver.Chrome()
31945,
31946,"browser.get(""https://www.python.org/"")"
31947,
31948,"nav = browser.find_element_by_id(""mainnav"")"
31949,
31950,print(nav.text)
31951,from selenium import webdriver
31952,
31953,driver = webdriver.Firefox()
31954,driver.get(url)
31955,driver.execute_script('document.title')
31956,result = driver.execute_script('var text = document.title ; return text')
31957,driver.title
31958,scrapy startproject
31959,import scrapy
31960,
31961,
31962,class MySpider(scrapy.Spider):
31963,    name = 'my_spider'
31964,    start_urls = ['https://somewhere.com']
31965,
31966,    def start_requests(self):
31967,        yield scrapy.Request(url=self.start_urls[0])
31968,
31969,
31970,"    def parse(self, response):"
31971,
31972,"        # do stuff with results, scrape items etc."
31973,        # now were just checking everything worked
31974,
31975,        print(response.body)
31976,__init__
31977,process_request
31978,# import some additional modules that we need
31979,import os
31980,from copy import deepcopy
31981,from time import sleep
31982,
31983,from scrapy import signals
31984,from scrapy.http import HtmlResponse
31985,from selenium import webdriver
31986,
31987,class SampleProjectDownloaderMiddleware(object):
31988,
31989,def __init__(self):
31990,"    SELENIUM_LOCATION = os.environ.get('SELENIUM_LOCATION', 'NOT_HERE')"
31991,    SELENIUM_URL = f'http://{SELENIUM_LOCATION}:4444/wd/hub'
31992,    chrome_options = webdriver.ChromeOptions()
31993,
31994,"    # chrome_options.add_experimental_option(""mobileEmulation"", mobile_emulation)"
31995,"    self.driver = webdriver.Remote(command_executor=SELENIUM_URL,"
31996,                                   desired_capabilities=chrome_options.to_capabilities())
31997,
31998,
31999,"def process_request(self, request, spider):"
32000,
32001,    self.driver.get(request.url)
32002,
32003,    # sleep a bit so the page has time to load
32004,    # or monitor items on page to continue as soon as page ready
32005,    sleep(4)
32006,
32007,"    # if you need to manipulate the page content like clicking and scrolling, you do it here"
32008,    # self.driver.find_element_by_css_selector('.my-class').click()
32009,
32010,    # you only need the now properly and completely rendered html from your page to get results
32011,    body = deepcopy(self.driver.page_source)
32012,
32013,    # copy the current url in case of redirects
32014,    url = deepcopy(self.driver.current_url)
32015,
32016,"    return HtmlResponse(url, body=body, encoding='utf-8', request=request)"
32017,DOWNLOADER_MIDDLEWARES = {
32018,"'sample_project.middlewares.SampleProjectDownloaderMiddleware': 543,}"
32019,Dockerfile
32020,# Use an official Python runtime as a parent image
32021,FROM python:3.6-alpine
32022,
32023,# install some packages necessary to scrapy and then curl because it's  handy for debugging
32024,RUN apk --update add linux-headers libffi-dev openssl-dev build-base libxslt-dev libxml2-dev curl python-dev
32025,
32026,WORKDIR /my_scraper
32027,
32028,ADD requirements.txt /my_scraper/
32029,
32030,RUN pip install -r requirements.txt
32031,
32032,ADD . /scrapers
32033,docker-compose.yaml
32034,version: '2'
32035,services:
32036,  selenium:
32037,    image: selenium/standalone-chrome
32038,    ports:
32039,"      - ""4444:4444"""
32040,    shm_size: 1G
32041,
32042,  my_scraper:
32043,    build: .
32044,    depends_on:
32045,"      - ""selenium"""
32046,    environment:
32047,      - SELENIUM_LOCATION=samplecrawler_selenium_1
32048,    volumes:
32049,      - .:/my_scraper
32050,    # use this command to keep the container running
32051,    command: tail -f /dev/null
32052,docker-compose up -d
32053,docker ps
32054,SELENIUM_LOCATION=samplecrawler_selenium_1
32055,docker exec -ti YOUR_CONTAINER_NAME sh
32056,docker exec -ti samplecrawler_my_scraper_1 sh
32057,scrapy crawl my_spider
32058,from selenium import webdriver
32059,from selenium.webdriver.common.by import By
32060,from selenium.webdriver.support.ui import WebDriverWait
32061,from selenium.webdriver.support import expected_conditions as EC
32062,from bs4 import BeautifulSoup as bs
32063,
32064,driver = webdriver.Firefox()
32065,"driver.get(""http://somedomain/url_that_delays_loading"")"
32066,    try:
32067,"        element = WebDriverWait(driver, 10).until("
32068,"        EC.presence_of_element_located((By.ID, ""myDynamicElement""))) #waits 10 seconds until element is located. Can have other wait conditions  such as visibility_of_element_located or text_to_be_present_in_element"
32069,
32070,        html = driver.page_source
32071,"        soup = bs(html, ""lxml"")"
32072,"        dynamic_text = soup.find_all(""p"", {""class"":""class_name""}) #or other attributes, optional"
32073,    else:
32074,"        print(""Couldnt locate element"")"
32075,from PyQt5.QtWidgets import QApplication
32076,from PyQt5.QtCore import QUrl
32077,from PyQt5.QtWebEngineWidgets import QWebEnginePage
32078,import sys
32079,import bs4 as bs
32080,import urllib.request
32081,
32082,
32083,class Client(QWebEnginePage):
32084,"    def __init__(self,url):"
32085,        global app
32086,        self.app = QApplication(sys.argv)
32087,        QWebEnginePage.__init__(self)
32088,"        self.html = """""
32089,        self.loadFinished.connect(self.on_load_finished)
32090,        self.load(QUrl(url))
32091,        self.app.exec_()
32092,
32093,    def on_load_finished(self):
32094,        self.html = self.toHtml(self.Callable)
32095,"        print(""Load Finished"")"
32096,
32097,"    def Callable(self,data):"
32098,        self.html = data
32099,        self.app.quit()
32100,
32101,"# url = """""
32102,# client_response = Client(url)
32103,# print(client_response.html)
32104,import asyncio
32105,from pyppeteer import launch
32106,
32107,async def main():
32108,"    browser = await launch({""headless"": True})"
32109,    [page] = await browser.pages()
32110,
32111,"    # normally, you go to a live site..."
32112,"    #await page.goto(""http://www.example.com"")"
32113,"    # but for this example, just set the HTML directly:"
32114,"    await page.setContent("""""""
32115,    <body>
32116,    <script>
32117,"    // inject content dynamically with JS, not part of the static HTML!"
32118,    document.body.innerHTML = `<p>hello world</p>`; 
32119,    </script>
32120,    </body>
32121,"    """""")"
32122,    print(await page.content()) # shows that the `<p>` was inserted
32123,
32124,    # evaluate a JS expression in browser context and scrape the data
32125,"    expr = ""document.querySelector('p').textContent"""
32126,"    print(await page.evaluate(expr, force_expr=True)) # => hello world"
32127,
32128,    await browser.close()
32129,
32130,asyncio.get_event_loop().run_until_complete(main())
32131,<body>
32132,<script>
32133,"fetch(""https://jsonplaceholder.typicode.com/posts/1"")"
32134,  .then(res => {
32135,    if (!res.ok) throw Error(res.status);
32136,    
32137,    return res.json();
32138,  })
32139,  .then(data => {
32140,    // inject data dynamically via JS after page load
32141,    document.body.innerText = data.title;
32142,  })
32143,  .catch(err => console.error(err))
32144,;
32145,</script>
32146,</body>
32147,urllib
32148,requests
32149,>>> import requests
32150,">>> res = requests.get(""https://jsonplaceholder.typicode.com/posts/1"")"
32151,>>> data = res.json()
32152,">>> data[""title""]"
32153,'sunt aut facere repellat provident occaecati excepturi optio reprehenderit'
32154,<script>
32155,<body>
32156,<script>
32157,  var someHardcodedData = {
32158,"    userId: 1,"
32159,"    id: 1,"
32160,"    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', "
32161,    body: 'quia et suscipit\nsuscipit recusandae con sequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'
32162,  };
32163,  document.body.textContent = someHardcodedData.title;
32164,</script>
32165,</body>
32166,<script>
32167,import json
32168,import re
32169,from bs4 import BeautifulSoup
32170,
32171,"# pretend we've already used requests to retrieve the data, "
32172,# so we hardcode it for the purposes of this example
32173,"text = """""""
32174,<body>
32175,<script>
32176,  var someHardcodedData = {
32177,"    userId: 1,"
32178,"    id: 1,"
32179,"    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', "
32180,    body: 'quia et suscipit\nsuscipit recusandae con sequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'
32181,  };
32182,  document.body.textContent = someHardcodedData.title;
32183,</script>
32184,</body>
32185,""""""""
32186,"soup = BeautifulSoup(text, ""lxml"")"
32187,"script_text = str(soup.select_one(""script""))"
32188,"pattern = r""title: '(.*?)'"""
32189,"print(re.search(pattern, script_text, re.S).group(1))"
32190,from selenium.webdriver import Firefox
32191,from selenium.webdriver.firefox.options import Options
32192,
32193,options = Options()
32194,options.headless = True
32195,"browser = Firefox(executable_path=""/usr/local/bin/geckodriver"", options=options)"
32196,
32197,"url = ""https://www.example.com"""
32198,browser.get(url)
32199,from gazpacho import Soup
32200,
32201,soup = Soup(browser.page_source)
32202,"soup.find(""a"").attrs['href']"
32203,from requests_html import HTMLSession
32204,session = HTMLSession()
32205,"response = session.request(method=""get"",url=""www.google.com/"")"
32206,response.html.render()
32207,"script = """""""
32208,    () => {
32209,        return {
32210,"            width: document.documentElement.clientWidth,"
32211,"            height: document.documentElement.clientHeight,"
32212,"            deviceScaleFactor: window.devicePixelRatio,"
32213,        }
32214,    } 
32215,""""""""
32216,>>> response.html.render(script=script)
32217,"{'width': 800, 'height': 600, 'deviceScaleFactor': 1}"
32218,return {
32219,    data: window.view.data
32220,}
32221,requests_html
32222,pyppeteer
32223,playwright-python
32224,from playwright.sync_api import sync_playwright
32225,
32226,with sync_playwright() as p:
32227,    browser = p.chromium.launch()
32228,    page = browser.new_page()
32229,"    page.goto(""http://whatsmyuseragent.org/"")"
32230,"    ua = page.query_selector("".user-agent"");"
32231,    print(ua.text_content())
32232,    browser.close()
32233,import requests
32234,"custom_User_agent = ""Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0"""
32235,"url = ""https://www.abc.xyz/your/url"""
32236,"response = requests.get(url, headers={""User-Agent"": custom_User_agent})"
32237,html_text = response.text
32238,<script>
32239,list
32240,os.listdir()
32241,os.path
32242,isfile()
32243,from os import listdir
32244,"from os.path import isfile, join"
32245,"onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
32246,os.walk()
32247,from os import walk
32248,
32249,f = []
32250,"for (dirpath, dirnames, filenames) in walk(mypath):"
32251,    f.extend(filenames)
32252,    break
32253,from os import walk
32254,
32255,"filenames = next(walk(mypath), (None, None, []))[2]  # [] if no file"
32256,"(_, _, filenames) = walk(mypath).next()"
32257,f.extend(filenames)
32258,f = f + filenames
32259,extend
32260,f
32261,extend
32262,+
32263,f += filenames
32264,f.extend(filenames)
32265,f = f + filenames
32266,"_, _, filenames = next(walk(mypath), (None, None, []))"
32267,f += filenames
32268,glob
32269,import glob
32270,"print(glob.glob(""/home/adam/*""))"
32271,import glob
32272,# All files and directories ending with .txt and that don't begin with a dot:
32273,"print(glob.glob(""/home/adam/*.txt"")) "
32274,"# All files and directories ending with .txt with depth of 2 folders, ignoring names beginning with a dot:"
32275,"print(glob.glob(""/home/adam/*/*.txt"")) "
32276,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
32277,glob
32278,.
32279,.*
32280,glob.escape
32281,"print(glob.glob(glob.escape(directory_name) + ""/*.txt""))"
32282,/home/user/foo/bar/hello.txt
32283,foo
32284,"glob(""bar/*.txt"")"
32285,bar/hello.txt
32286,"glob.glob(""*"")"
32287,listdir
32288,os
32289,import os
32290,
32291,arr = os.listdir()
32292,arr = os.listdir('c:\\files')
32293,glob
32294,import glob
32295,
32296,txtfiles = []
32297,"for file in glob.glob(""*.txt""):"
32298,    txtfiles.append(file)
32299,"mylist = [f for f in glob.glob(""*.txt"")]"
32300,import os
32301,from os import listdir
32302,"from os.path import isfile, join"
32303,
32304,cwd = os.getcwd()
32305,"onlyfiles = [os.path.join(cwd, f) for f in os.listdir(cwd) if "
32306,"os.path.isfile(os.path.join(cwd, f))]"
32307,print(onlyfiles) 
32308,
32309,"['G:\\getfilesname\\getfilesname.py', 'G:\\getfilesname\\example.txt']"
32310,os.path.abspath
32311, import os
32312, files_path = [os.path.abspath(x) for x in os.listdir()]
32313, print(files_path)
32314, 
32315," ['F:\\documenti\applications.txt', 'F:\\documenti\collections.txt']"
32316,import os
32317,
32318,# Getting the current work directory (cwd)
32319,thisdir = os.getcwd()
32320,
32321,"# r=root, d=directories, f = files"
32322,"for r, d, f in os.walk(thisdir):"
32323,    for file in f:
32324,"        if file.endswith("".docx""):"
32325,"            print(os.path.join(r, file))"
32326,# Method 1
32327,x = os.listdir('..')
32328,
32329,# Method 2
32330,x= os.listdir('/')
32331,os.listdir()
32332,import os
32333,
32334,"x = os.listdir(""./content"")"
32335, import os
32336, arr = next(os.walk('.'))[2]
32337, print(arr)
32338, 
32339," >>> ['5bs_Turismo1.pdf', '5bs_Turismo1.pptx', 'esperienza.txt']"
32340, import os
32341, arr = []
32342," for d,r,f in next(os.walk(""F:\\_python"")):"
32343,     for file in f:
32344,"         arr.append(os.path.join(r,file))"
32345,
32346, for f in arr:
32347,     print(files)
32348,
32349,>>> F:\\_python\\dict_class.py
32350,>>> F:\\_python\\programmi.txt
32351," [os.path.join(r,file) for r,d,f in next(os.walk(""F:\\_python"")) for file in f]"
32352, 
32353," >>> ['F:\\_python\\dict_class.py', 'F:\\_python\\programmi.txt']"
32354,"x = [os.path.join(r,file) for r,d,f in os.walk(""F:\\_python"") for file in f]"
32355,print(x)
32356,
32357,">>> ['F:\\_python\\dict.py', 'F:\\_python\\progr.txt', 'F:\\_python\\readl.py']"
32358," arr_txt = [x for x in os.listdir() if x.endswith("".txt"")]"
32359, 
32360,glob
32361,from path import path
32362,from glob import glob
32363,
32364,"x = [path(f).abspath() for f in glob(""F:\\*.txt"")]"
32365,os.path.isfile
32366,import os.path
32367,listOfFiles = [f for f in os.listdir() if os.path.isfile(f)]
32368,pathlib
32369,import pathlib
32370,
32371,flist = []
32372,for p in pathlib.Path('.').iterdir():
32373,    if p.is_file():
32374,        print(p)
32375,        flist.append(p)
32376,list comprehension
32377,flist = [p for p in pathlib.Path('.').iterdir() if p.is_file()]
32378,import pathlib
32379,
32380,"py = pathlib.Path().glob(""*.py"")"
32381,import os
32382,x = [i[2] for i in os.walk('.')]
32383,y=[]
32384,for t in x:
32385,    for f in t:
32386,        y.append(f)
32387, import os
32388, x = next(os.walk('F://python'))[2]
32389, import os
32390, next(os.walk('F://python'))[1] # for the current dir use ('.')
32391, 
32392," >>> ['python3','others']"
32393,subdir
32394,walk
32395,"for r,d,f in os.walk(""F:\\_python""):"
32396,    for dirs in d:
32397,        print(dirs)
32398,os.scandir()
32399,import os
32400,x = [f.name for f in os.scandir() if f.is_file()]
32401,
32402,# Another example with `scandir` (a little variation from docs.python.org)
32403,# This one is more efficient than `os.listdir`.
32404,"# In this case, it shows the files only in the current directory"
32405,# where the script is executed.
32406,
32407,import os
32408,with os.scandir() as i:
32409,    for entry in i:
32410,        if entry.is_file():
32411,            print(entry.name)
32412,"[f for f in glob.glob(""*.txt"")]"
32413,"glob.glob(""*.txt"")"
32414,import os
32415,"os.listdir(""somedirectory"")"
32416,glob.glob
32417,os.listdir()
32418,glob.glob()
32419,filenames = next(os.walk(path))[2]
32420,"paths = [os.path.join(path, fn) for fn in next(os.walk(path))[2]]"
32421,import os
32422,glob()
32423,glob()
32424,import os
32425,
32426,def get_filepaths(directory):
32427,"    """""""
32428,    This function will generate the file names in a directory 
32429,    tree by walking the tree either top-down or bottom-up. For each 
32430,"    directory in the tree rooted at directory top (including top itself), "
32431,"    it yields a 3-tuple (dirpath, dirnames, filenames)."
32432,"    """""""
32433,    file_paths = []  # List which will store all of the full filepaths.
32434,
32435,    # Walk the tree.
32436,"    for root, directories, files in os.walk(directory):"
32437,        for filename in files:
32438,            # Join the two strings in order to form the full filepath.
32439,"            filepath = os.path.join(root, filename)"
32440,            file_paths.append(filepath)  # Add it to the list.
32441,
32442,    return file_paths  # Self-explanatory.
32443,
32444,# Run the above function and store its results in a variable.   
32445,"full_file_paths = get_filepaths(""/Users/johnny/Desktop/TEST"")"
32446,print full_file_paths
32447,"['/Users/johnny/Desktop/TEST/file1.txt', '/Users/johnny/Desktop/TEST/file2.txt', '/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat']"
32448,for f in full_file_paths:
32449,"  if f.endswith("".dat""):"
32450,    print f
32451,/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat
32452,os.listdir()
32453,pathlib
32454,>>> import pathlib
32455,>>> [p for p in pathlib.Path('.').iterdir() if p.is_file()]
32456,pathlib
32457,os.scandir()
32458,>>> import os
32459,>>> [entry for entry in os.scandir('.') if entry.is_file()]
32460,os.walk()
32461,os.scandir()
32462,os.listdir()
32463,list
32464,p.name
32465,p
32466,pathlib.Path()
32467,str(p)
32468,os.scandir
32469,os.listdir
32470,os.path.is_file
32471,list
32472,os.scandir
32473,is_file
32474,stat
32475,DirEntry
32476,stat
32477,stat
32478,is_file
32479,is_dir
32480,DirEntry
32481,stat
32482,entry.name
32483,entry.path
32484,>>> import sys
32485,>>> sys.version
32486,"'2.7.10 (default, Mar  8 2016, 15:02:46) [MSC v.1600 64 bit (AMD64)]'"
32487,">>> m = map(lambda x: x, [1, 2, 3])  # Just a dummy lambda function"
32488,">>> m, type(m)"
32489,"([1, 2, 3], <type 'list'>)"
32490,>>> len(m)
32491,3
32492,>>> import sys
32493,>>> sys.version
32494,"'3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)]'"
32495,">>> m = map(lambda x: x, [1, 2, 3])"
32496,">>> m, type(m)"
32497,"(<map object at 0x000001B4257342B0>, <class 'map'>)"
32498,>>> len(m)
32499,Traceback (most recent call last):
32500,"  File ""<stdin>"", line 1, in <module>"
32501,TypeError: object of type 'map' has no len()
32502,>>> lm0 = list(m)  # Build a list from the generator
32503,">>> lm0, type(lm0)"
32504,"([1, 2, 3], <class 'list'>)"
32505,>>>
32506,>>> lm1 = list(m)  # Build a list from the same generator
32507,">>> lm1, type(lm1)  # Empty list now - generator already consumed"
32508,"([], <class 'list'>)"
32509,"E:\Work\Dev\StackOverflow\q003207219>tree /f ""root_dir"""
32510,Folder PATH listing for volume Work
32511,Volume serial number is 00000029 3655:6FED
32512,E:\WORK\DEV\STACKOVERFLOW\Q003207219\ROOT_DIR
32513,¦   file0
32514,¦   file1
32515,¦
32516,+---dir0
32517,¦   +---dir00
32518,¦   ¦   ¦   file000
32519,¦   ¦   ¦
32520,¦   ¦   +---dir000
32521,¦   ¦           file0000
32522,¦   ¦
32523,¦   +---dir01
32524,¦   ¦       file010
32525,¦   ¦       file011
32526,¦   ¦
32527,¦   +---dir02
32528,¦       +---dir020
32529,¦           +---dir0200
32530,+---dir1
32531,¦       file10
32532,¦       file11
32533,¦       file12
32534,¦
32535,+---dir2
32536,¦   ¦   file20
32537,¦   ¦
32538,¦   +---dir20
32539,¦           file200
32540,¦
32541,+---dir3
32542,'.'
32543,'..'
32544,>>> import os
32545,">>> root_dir = ""root_dir""  # Path relative to current dir (os.getcwd())"
32546,>>>
32547,>>> os.listdir(root_dir)  # List all the items in root_dir
32548,"['dir0', 'dir1', 'dir2', 'dir3', 'file0', 'file1']"
32549,>>>
32550,">>> [item for item in os.listdir(root_dir) if os.path.isfile(os.path.join(root_dir, item))]  # Filter items and only keep files (strip out directories)"
32551,"['file0', 'file1']"
32552,import os
32553,from pprint import pformat
32554,
32555,
32556,"def _get_dir_content(path, include_folders, recursive):"
32557,    entries = os.listdir(path)
32558,    for entry in entries:
32559,"        entry_with_path = os.path.join(path, entry)"
32560,        if os.path.isdir(entry_with_path):
32561,            if include_folders:
32562,                yield entry_with_path
32563,            if recursive:
32564,"                for sub_entry in _get_dir_content(entry_with_path, include_folders, recursive):"
32565,                    yield sub_entry
32566,        else:
32567,            yield entry_with_path
32568,
32569,
32570,"def get_dir_content(path, include_folders=True, recursive=True, prepend_folder_name=True):"
32571,    path_len = len(path) + len(os.path.sep)
32572,"    for item in _get_dir_content(path, include_folders, recursive):"
32573,        yield item if prepend_folder_name else item[path_len:]
32574,
32575,
32576,"def _get_dir_content_old(path, include_folders, recursive):"
32577,    entries = os.listdir(path)
32578,    ret = list()
32579,    for entry in entries:
32580,"        entry_with_path = os.path.join(path, entry)"
32581,        if os.path.isdir(entry_with_path):
32582,            if include_folders:
32583,                ret.append(entry_with_path)
32584,            if recursive:
32585,"                ret.extend(_get_dir_content_old(entry_with_path, include_folders, recursive))"
32586,        else:
32587,            ret.append(entry_with_path)
32588,    return ret
32589,
32590,
32591,"def get_dir_content_old(path, include_folders=True, recursive=True, prepend_folder_name=True):"
32592,    path_len = len(path) + len(os.path.sep)
32593,"    return [item if prepend_folder_name else item[path_len:] for item in _get_dir_content_old(path, include_folders, recursive)]"
32594,
32595,
32596,def main():
32597,"    root_dir = ""root_dir"""
32598,"    ret0 = get_dir_content(root_dir, include_folders=True, recursive=True, prepend_folder_name=True)"
32599,    lret0 = list(ret0)
32600,"    print(ret0, len(lret0), pformat(lret0))"
32601,"    ret1 = get_dir_content_old(root_dir, include_folders=False, recursive=True, prepend_folder_name=False)"
32602,"    print(len(ret1), pformat(ret1))"
32603,
32604,
32605,"if __name__ == ""__main__"":"
32606,    main()
32607,"(py35x64_test) E:\Work\Dev\StackOverflow\q003207219>""e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe"" ""code_os_listdir.py"""
32608,"<generator object get_dir_content at 0x000001BDDBB3DF10> 22 ['root_dir\\dir0',"
32609," 'root_dir\\dir0\\dir00',"
32610," 'root_dir\\dir0\\dir00\\dir000',"
32611," 'root_dir\\dir0\\dir00\\dir000\\file0000',"
32612," 'root_dir\\dir0\\dir00\\file000',"
32613," 'root_dir\\dir0\\dir01',"
32614," 'root_dir\\dir0\\dir01\\file010',"
32615," 'root_dir\\dir0\\dir01\\file011',"
32616," 'root_dir\\dir0\\dir02',"
32617," 'root_dir\\dir0\\dir02\\dir020',"
32618," 'root_dir\\dir0\\dir02\\dir020\\dir0200',"
32619," 'root_dir\\dir1',"
32620," 'root_dir\\dir1\\file10',"
32621," 'root_dir\\dir1\\file11',"
32622," 'root_dir\\dir1\\file12',"
32623," 'root_dir\\dir2',"
32624," 'root_dir\\dir2\\dir20',"
32625," 'root_dir\\dir2\\dir20\\file200',"
32626," 'root_dir\\dir2\\file20',"
32627," 'root_dir\\dir3',"
32628," 'root_dir\\file0',"
32629, 'root_dir\\file1']
32630,"11 ['dir0\\dir00\\dir000\\file0000',"
32631," 'dir0\\dir00\\file000',"
32632," 'dir0\\dir01\\file010',"
32633," 'dir0\\dir01\\file011',"
32634," 'dir1\\file10',"
32635," 'dir1\\file11',"
32636," 'dir1\\file12',"
32637," 'dir2\\dir20\\file200',"
32638," 'dir2\\file20',"
32639," 'file0',"
32640, 'file1']
32641,'.'
32642,'..'
32643,>>> import os
32644,">>> root_dir = os.path.join(""."", ""root_dir"")  # Explicitly prepending current directory"
32645,>>> root_dir
32646,'.\\root_dir'
32647,>>>
32648,>>> scandir_iterator = os.scandir(root_dir)
32649,>>> scandir_iterator
32650,<nt.ScandirIterator object at 0x00000268CF4BC140>
32651,>>> [item.path for item in scandir_iterator]
32652,"['.\\root_dir\\dir0', '.\\root_dir\\dir1', '.\\root_dir\\dir2', '.\\root_dir\\dir3', '.\\root_dir\\file0', '.\\root_dir\\file1']"
32653,>>>
32654,>>> [item.path for item in scandir_iterator]  # Will yield an empty list as it was consumed by previous iteration (automatically performed by the list comprehension)
32655,[]
32656,>>>
32657,>>> scandir_iterator = os.scandir(root_dir)  # Reinitialize the generator
32658,>>> for item in scandir_iterator :
32659,...     if os.path.isfile(item.path):
32660,...             print(item.name)
32661,...
32662,file0
32663,file1
32664,os.listdir
32665,dirpath
32666,dirnames
32667,filenames
32668,>>> import os
32669,">>> root_dir = os.path.join(os.getcwd(), ""root_dir"")  # Specify the full path"
32670,>>> root_dir
32671,'E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir'
32672,>>>
32673,>>> walk_generator = os.walk(root_dir)
32674,>>> root_dir_entry = next(walk_generator)  # First entry corresponds to the root dir (passed as an argument)
32675,>>> root_dir_entry
32676,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir', ['dir0', 'dir1', 'dir2', 'dir3'], ['file0', 'file1'])"
32677,>>>
32678,>>> root_dir_entry[1] + root_dir_entry[2]  # Display dirs and files (direct descendants) in a single list
32679,"['dir0', 'dir1', 'dir2', 'dir3', 'file0', 'file1']"
32680,>>>
32681,">>> [os.path.join(root_dir_entry[0], item) for item in root_dir_entry[1] + root_dir_entry[2]]  # Display all the entries in the previous list by their full path"
32682,"['E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0', 'E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir1', 'E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir2', 'E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir3', 'E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\file0', 'E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\file1']"
32683,>>>
32684,>>> for entry in walk_generator:  # Display the rest of the elements (corresponding to every subdir)
32685,...     print(entry)
32686,...
32687,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0', ['dir00', 'dir01', 'dir02'], [])"
32688,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0\\dir00', ['dir000'], ['file000'])"
32689,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0\\dir00\\dir000', [], ['file0000'])"
32690,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0\\dir01', [], ['file010', 'file011'])"
32691,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0\\dir02', ['dir020'], [])"
32692,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0\\dir02\\dir020', ['dir0200'], [])"
32693,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir0\\dir02\\dir020\\dir0200', [], [])"
32694,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir1', [], ['file10', 'file11', 'file12'])"
32695,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir2', ['dir20'], ['file20'])"
32696,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir2\\dir20', [], ['file200'])"
32697,"('E:\\Work\\Dev\\StackOverflow\\q003207219\\root_dir\\dir3', [], [])"
32698,os.scandir
32699,os.listdir
32700,/usr/src/Python-1.5/Makefile
32701,../../Tools/*/*.gif
32702,**
32703,">>> import glob, os"
32704,">>> wildcard_pattern = ""*"""
32705,">>> root_dir = os.path.join(""root_dir"", wildcard_pattern)  # Match every file/dir name"
32706,>>> root_dir
32707,'root_dir\\*'
32708,>>>
32709,>>> glob_list = glob.glob(root_dir)
32710,>>> glob_list
32711,"['root_dir\\dir0', 'root_dir\\dir1', 'root_dir\\dir2', 'root_dir\\dir3', 'root_dir\\file0', 'root_dir\\file1']"
32712,>>>
32713,">>> [item.replace(""root_dir"" + os.path.sep, """") for item in glob_list]  # Strip the dir name and the path separator from begining"
32714,"['dir0', 'dir1', 'dir2', 'dir3', 'file0', 'file1']"
32715,>>>
32716,">>> for entry in glob.iglob(root_dir + ""*"", recursive=True):"
32717,...     print(entry)
32718,...
32719,root_dir\
32720,root_dir\dir0
32721,root_dir\dir0\dir00
32722,root_dir\dir0\dir00\dir000
32723,root_dir\dir0\dir00\dir000\file0000
32724,root_dir\dir0\dir00\file000
32725,root_dir\dir0\dir01
32726,root_dir\dir0\dir01\file010
32727,root_dir\dir0\dir01\file011
32728,root_dir\dir0\dir02
32729,root_dir\dir0\dir02\dir020
32730,root_dir\dir0\dir02\dir020\dir0200
32731,root_dir\dir1
32732,root_dir\dir1\file10
32733,root_dir\dir1\file11
32734,root_dir\dir1\file12
32735,root_dir\dir2
32736,root_dir\dir2\dir20
32737,root_dir\dir2\dir20\file200
32738,root_dir\dir2\file20
32739,root_dir\dir3
32740,root_dir\file0
32741,root_dir\file1
32742,os.listdir
32743,>>> import pathlib
32744,">>> root_dir = ""root_dir"""
32745,>>> root_dir_instance = pathlib.Path(root_dir)
32746,>>> root_dir_instance
32747,WindowsPath('root_dir')
32748,>>> root_dir_instance.name
32749,'root_dir'
32750,>>> root_dir_instance.is_dir()
32751,True
32752,>>>
32753,">>> [item.name for item in root_dir_instance.glob(""*"")]  # Wildcard searching for all direct descendants"
32754,"['dir0', 'dir1', 'dir2', 'dir3', 'file0', 'file1']"
32755,>>>
32756,">>> [os.path.join(item.parent.name, item.name) for item in root_dir_instance.glob(""*"") if not item.is_dir()]  # Display paths (including parent) for files only"
32757,"['root_dir\\file0', 'root_dir\\file1']"
32758,os.listdir
32759,def listdir(path):
32760,"    """"""List directory contents, using cache."""""""
32761,    try:
32762,"        cached_mtime, list = cache[path]"
32763,        del cache[path]
32764,    except KeyError:
32765,"        cached_mtime, list = -1, []"
32766,    mtime = os.stat(path).st_mtime
32767,    if mtime != cached_mtime:
32768,        list = os.listdir(path)
32769,        list.sort()
32770,"    cache[path] = mtime, list"
32771,    return list
32772,#!/usr/bin/env python3
32773,
32774,import sys
32775,"from ctypes import Structure, \"
32776,"    c_ulonglong, c_longlong, c_ushort, c_ubyte, c_char, c_int, \"
32777,"    CDLL, POINTER, \"
32778,"    create_string_buffer, get_errno, set_errno, cast"
32779,
32780,
32781,DT_DIR = 4
32782,DT_REG = 8
32783,
32784,char256 = c_char * 256
32785,
32786,
32787,class LinuxDirent64(Structure):
32788,    _fields_ = [
32789,"        (""d_ino"", c_ulonglong),"
32790,"        (""d_off"", c_longlong),"
32791,"        (""d_reclen"", c_ushort),"
32792,"        (""d_type"", c_ubyte),"
32793,"        (""d_name"", char256),"
32794,    ]
32795,
32796,LinuxDirent64Ptr = POINTER(LinuxDirent64)
32797,
32798,"libc_dll = this_process = CDLL(None, use_errno=True)"
32799,"# ALWAYS set argtypes and restype for functions, otherwise it's UB!!!"
32800,opendir = libc_dll.opendir
32801,readdir = libc_dll.readdir
32802,closedir = libc_dll.closedir
32803,
32804,
32805,def get_dir_content(path):
32806,"    ret = [path, list(), list()]"
32807,    dir_stream = opendir(create_string_buffer(path.encode()))
32808,    if (dir_stream == 0):
32809,"        print(""opendir returned NULL (errno: {:d})"".format(get_errno()))"
32810,        return ret
32811,    set_errno(0)
32812,    dirent_addr = readdir(dir_stream)
32813,    while dirent_addr:
32814,"        dirent_ptr = cast(dirent_addr, LinuxDirent64Ptr)"
32815,        dirent = dirent_ptr.contents
32816,        name = dirent.d_name.decode()
32817,        if dirent.d_type & DT_DIR:
32818,"            if name not in (""."", ""..""):"
32819,                ret[1].append(name)
32820,        elif dirent.d_type & DT_REG:
32821,            ret[2].append(name)
32822,        dirent_addr = readdir(dir_stream)
32823,    if get_errno():
32824,"        print(""readdir returned NULL (errno: {:d})"".format(get_errno()))"
32825,    closedir(dir_stream)
32826,    return ret
32827,
32828,
32829,def main():
32830,"    print(""{:s} on {:s}\n"".format(sys.version, sys.platform))"
32831,"    root_dir = ""root_dir"""
32832,    entries = get_dir_content(root_dir)
32833,    print(entries)
32834,
32835,
32836,"if __name__ == ""__main__"":"
32837,    main()
32838,os.walk
32839,[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q003207219]> ./code_ctypes.py
32840,"3.5.2 (default, Nov 12 2018, 13:43:14)"
32841,[GCC 5.4.0 20160609] on linux
32842,
32843,"['root_dir', ['dir2', 'dir1', 'dir3', 'dir0'], ['file1', 'file0']]"
32844,">>> import os, win32file, win32con"
32845,">>> root_dir = ""root_dir"""
32846,">>> wildcard = ""*"""
32847,">>> root_dir_wildcard = os.path.join(root_dir, wildcard)"
32848,>>> entry_list = win32file.FindFilesW(root_dir_wildcard)
32849,>>> len(entry_list)  # Don't display the whole content as it's too long
32850,8
32851,>>> [entry[-2] for entry in entry_list]  # Only display the entry names
32852,"['.', '..', 'dir0', 'dir1', 'dir2', 'dir3', 'file0', 'file1']"
32853,>>>
32854,">>> [entry[-2] for entry in entry_list if entry[0] & win32con.FILE_ATTRIBUTE_DIRECTORY and entry[-2] not in (""."", "".."")]  # Filter entries and only display dir names (except self and parent)"
32855,"['dir0', 'dir1', 'dir2', 'dir3']"
32856,>>>
32857,">>> [os.path.join(root_dir, entry[-2]) for entry in entry_list if entry[0] & (win32con.FILE_ATTRIBUTE_NORMAL | win32con.FILE_ATTRIBUTE_ARCHIVE)]  # Only display file ""full"" names"
32858,"['root_dir\\file0', 'root_dir\\file1']"
32859,win32file.FindFilesW
32860,os.listdir
32861,os.scandir
32862,win32file.FindFilesW
32863,filter_func=lambda x: True
32864,if not filter_func(entry_with_path): continue
32865,grep
32866,findstr
32867,os.system
32868,subprocess.Popen
32869,"(py35x64_test) E:\Work\Dev\StackOverflow\q003207219>""e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe"" -c ""import os;os.system(\""dir /b root_dir\"")"""
32870,dir0
32871,dir1
32872,dir2
32873,dir3
32874,file0
32875,file1
32876,glob()
32877,*
32878,glob()
32879,join()
32880,expanduser()
32881,os.path
32882,getcwd()
32883,os
32884,from glob import glob
32885,
32886,# Return everything under C:\Users\admin that contains a folder called wlp.
32887,glob('C:\Users\admin\*\wlp')
32888,\
32889,from glob    import glob
32890,from os.path import join
32891,
32892,"# Return everything under Users, admin, that contains a folder called wlp."
32893,"glob(join('Users', 'admin', '*', 'wlp'))"
32894,Users
32895,admin
32896,from glob    import glob
32897,"from os.path import expanduser, join"
32898,
32899,# Return everything under the user directory that contains a folder called wlp.
32900,"glob(join(expanduser('~'), '*', 'wlp'))"
32901,from glob    import glob
32902,from os      import getcwd
32903,from os.path import join
32904,
32905,# Return everything under the current directory that contains a folder called wlp.
32906,"glob(join(getcwd(), '*', 'wlp'))"
32907,**
32908,recursive = True
32909,def list_files(path):
32910,"    # returns a list of names (with extension, without full path) of all files "
32911,    # in folder path
32912,    files = []
32913,    for name in os.listdir(path):
32914,"        if os.path.isfile(os.path.join(path, name)):"
32915,            files.append(name)
32916,    return files 
32917,"from findtools.find_files import (find_files, Match)"
32918,
32919,# Recursively find all *.sh files in **/usr/bin**
32920,"sh_files_pattern = Match(filetype='f', name='*.sh')"
32921,"found_files = find_files(path='/usr/bin', match=sh_files_pattern)"
32922,
32923,for found_file in found_files:
32924,    print found_file
32925,listdir()
32926,os
32927,import os
32928,
32929,def files(path):  
32930,    for file in os.listdir(path):
32931,"        if os.path.isfile(os.path.join(path, file)):"
32932,            yield file
32933,
32934,"for file in files("".""):  "
32935,    print (file)
32936,listdir()
32937,os.path.isfile()
32938,True
32939,yield
32940,"L = [os.path.join(os.getcwd(),f) for f in os.listdir('.') if os.path.isfile(os.path.join(os.getcwd(),f))]"
32941,os.path.abspath(f)
32942,"os.path.join(os.getcwd(),f)"
32943,cwd = os.path.abspath('.')
32944,cwd
32945,'.'
32946,os.getcwd()
32947,"filenames = dir_filter('foo/baz', radical='radical', extension='.txt')"
32948,"def file_filter(filename, radical='', extension=''):"
32949,"    ""Check if a filename matches a radical and extension"""
32950,    if not filename:
32951,        return False
32952,    filename = filename.strip()
32953,    return(filename.startswith(radical) and filename.endswith(extension))
32954,
32955,"def dir_filter(dirname='', radical='', extension=''):"
32956,"    ""Filter filenames in directory according to radical and extension"""
32957,    if not dirname:
32958,        dirname = '.'
32959,    return [filename for filename in os.listdir(dirname)
32960,"                if file_filter(filename, radical, extension)]"
32961,pattern
32962,import os
32963,import os.path
32964,
32965,
32966,def get_files(target_dir):
32967,    item_list = os.listdir(target_dir)
32968,
32969,    file_list = list()
32970,    for item in item_list:
32971,"        item_dir = os.path.join(target_dir,item)"
32972,        if os.path.isdir(item_dir):
32973,            file_list += get_files(item_dir)
32974,        else:
32975,            file_list.append(item_dir)
32976,    return file_list
32977,pathlib
32978,"filter(Path.is_file, Path().rglob('*'))"
32979,import os
32980,def get_files(search_path):
32981,"     for (dirpath, _, filenames) in os.walk(search_path):"
32982,         for filename in filenames:
32983,"             yield os.path.join(dirpath, filename)"
32984,list_files = get_files('.')
32985,for filename in list_files:
32986,    print(filename)
32987,from pathlib import Path
32988,folder = '/foo'
32989,[f for f in Path(folder).glob('*') if f.is_file()]
32990,[f for f in Path(folder).glob('**/*.py') if not f.is_symlink()]
32991,pip install rglob
32992,import rglob
32993,"file_list = rglob.rglob(""/home/base/dir/"", ""*"")"
32994,print file_list
32995,pattern='*.txt'
32996,subfolders=True
32997,import os
32998,import fnmatch
32999,
33000,"def list_paths(folder='.', pattern='*', case_sensitive=False, subfolders=False):"
33001,"    """"""Return a list of the file paths matching the pattern in the specified "
33002,"    folder, optionally including files inside subfolders."
33003,"    """""""
33004,    match = fnmatch.fnmatchcase if case_sensitive else fnmatch.fnmatch
33005,    walked = os.walk(folder) if subfolders else [next(os.walk(folder))]
33006,"    return [os.path.join(root, f)"
33007,"            for root, dirnames, filenames in walked"
33008,"            for f in filenames if match(f, pattern)]"
33009,"[y for x in os.walk(sourcePath) for y in glob(os.path.join(x[0], '*.csv'))]"
33010,glob
33011,"glob('**/*.csv', recursive=True)"
33012,os.walk()
33013,recursive
33014,**
33015,import dircache
33016,list = dircache.listdir(pathname)
33017,i = 0
33018,check = len(list[0])
33019,temp = []
33020,count = len(list)
33021,while count != 0:
33022,  if len(list[i]) != check:
33023,     temp.append(list[i-1])
33024,     check = len(list[i])
33025,  else:
33026,    i = i + 1
33027,    count = count - 1
33028,
33029,print temp
33030,__main__
33031,import cProfile
33032,cProfile.run('foo()')
33033,python -m cProfile myscript.py
33034,python -m cProfile %1
33035,profile euler048.py
33036,1007 function calls in 0.061 CPU seconds
33037,
33038,Ordered by: standard name
33039,ncalls  tottime  percall  cumtime  percall filename:lineno(function)
33040,    1    0.000    0.000    0.061    0.061 <string>:1(<module>)
33041, 1000    0.051    0.000    0.051    0.000 euler048.py:2(<lambda>)
33042,    1    0.005    0.005    0.061    0.061 euler048.py:2(<module>)
33043,    1    0.000    0.000    0.061    0.061 {execfile}
33044,    1    0.002    0.002    0.053    0.053 {map}
33045,    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}
33046,    1    0.000    0.000    0.000    0.000 {range}
33047,    1    0.003    0.003    0.003    0.003 {sum}
33048,python -m cProfile -o <out.profile> <script>
33049,runsnake <out.profile>
33050,cprofile
33051,profile
33052,pycallgraph
33053,pip install pycallgraph
33054,pycallgraph graphviz -- ./mypythonscript.py
33055,from pycallgraph import PyCallGraph
33056,from pycallgraph.output import GraphvizOutput
33057,
33058,with PyCallGraph(output=GraphvizOutput()):
33059,    code_to_profile()
33060,pycallgraph.png
33061,"Traceback (most recent call last): /pycallgraph.py"", line 90, in generate     output.done()   File ""/net_downloaded/pycallgraph-develop/pycallgraph/output/graphviz.py"", line 94, in done     source = self.generate()   File ""/net_downloaded/pycallgraph-develop/pycallgraph/output/graphviz.py"", line 143, in generate     indent_join.join(self.generate_attributes()),   File ""/net_downloaded/pycallgraph-develop/pycallgraph/output/graphviz.py"", line 169, in generate_attributes     section, self.attrs_from_dict(attrs), ValueError: zero length field name in format"
33062,sudo apt-get install graphviz
33063,threading.setprofile()
33064,threading.Thread
33065,class ProfiledThread(threading.Thread):
33066,    # Overrides threading.Thread.run()
33067,    def run(self):
33068,        profiler = cProfile.Profile()
33069,        try:
33070,"            return profiler.runcall(threading.Thread.run, self)"
33071,        finally:
33072,"            profiler.dump_stats('myprofile-%d.profile' % (self.ident,))"
33073,ProfiledThread
33074,target
33075,threading.Thread.run()
33076,threading.setprofile()
33077,python -m cProfile -s time mine.py <args>
33078,python -m cProfile -o output.file mine.py <args>
33079,apt-get install python-profiler 
33080, pip install pycallgraph
33081, pycallgraph mine.py args
33082, gimp pycallgraph.png
33083,pycallgraph -f svg -o pycallgraph.svg mine.py <args>
33084,pip install graphviz
33085,pip install gprof2dot
33086,python -m cProfile -o profile.pstats mine.py
33087,gprof2dot -f pstats profile.pstats | dot -Tsvg -o mine.svg
33088,$ sudo apt-get install graphviz
33089,$ git clone https://github.com/jrfonseca/gprof2dot
33090,"$ ln -s ""$PWD""/gprof2dot/gprof2dot.py ~/bin"
33091,$ cd $PROJECT_DIR
33092,$ gprof2dot.py -f pstats profile.pstats | dot -Tsvg -o callgraph.svg
33093,pwd
33094,ln
33095,dot
33096,python -m cProfile -o profile.pstats main.py 
33097,"gprof2dot -f pstats profile.pstats | ""C:\Program Files (x86)\Graphviz2.38\bin\dot.exe"" -Tsvg -o gprof2dot_pstats.svg"
33098,1. pip install snakeviz
33099,
33100,2. python -m cProfile -o temp.dat <PROGRAM>.py
33101,
33102,3. snakeviz temp.dat
33103,%prun
33104,cProfile
33105,kcachegrind
33106,pyprof2calltree
33107,python -m cProfile -o script.profile script.py
33108,pyprof2calltree -i script.profile -o script.calltree
33109,kcachegrind script.calltree
33110,kcachegrind
33111,qcachegrind
33112,apt-get install kcachegrind 
33113,pip install pyprof2calltree
33114,brew install qcachegrind
33115,kcachegrind
33116,qcachegrind 
33117,export QT_X11_NO_MITSHM=1
33118,gprof2dot
33119,tuna
33120,snakeviz
33121,pycallgraph
33122,kcachegrind
33123,--ipc=host
33124,pip install tuna
33125,python3 -m cProfile -o program.prof yourfile.py
33126,python3 -X importprofile yourfile.py 2> import.log
33127,tuna program.prof
33128,line_profiler
33129,pprofile
33130,line_profiler
33131,[k|q]cachegrind
33132,pprofile
33133,vprof
33134,vprof
33135,py -m vprof -c <config> <src>
33136,cProfile
33137,pyinstrument
33138,$ pip install pyinstrument
33139,$ python -m pyinstrument ./prog.py
33140,def count():
33141,    from math import sqrt
33142,    for x in range(10**5):
33143,        sqrt(x)
33144,
33145,if __name__ == '__main__':
33146,"    import cProfile, pstats"
33147,"    cProfile.run(""count()"", ""{}.profile"".format(__file__))"
33148,"    s = pstats.Stats(""{}.profile"".format(__file__))"
33149,    s.strip_dirs()
33150,"    s.sort_stats(""time"").print_stats(10)"
33151,austin python3 my_script.py
33152,austin python3 my_script.py | flamegraph.pl > my_script_profile.svg
33153,pipx install austin-python
33154,austin2pprof
33155,runcall
33156,self.enable()
33157,self.disable()
33158,cprofile.py
33159,runcall()
33160,prof = cprofile.Profile()
33161,prof.disable()
33162,prof.enable()
33163,prof.disable()
33164,!pip install line_profiler
33165,!pip install memory_profiler
33166,!pip install pympler
33167,%load_ext line_profiler
33168,%load_ext memory_profiler
33169,"%time print('Outputs CPU time,Wall Clock time') "
33170,"#CPU times: user 2 µs, sys: 0 ns, total: 2 µs Wall time: 5.96 µs"
33171,%timeit -r 7 -n 1000 print('Outputs execution time of the snippet') 
33172,"#1000 loops, best of 7: 7.46 ns per loop"
33173,%prun -s cumulative 'Code to profile' 
33174,%memit 'Code to profile'
33175,"#peak memory: 199.45 MiB, increment: 0.00 MiB"
33176,#Example function
33177,def fun():
33178,  for i in range(10):
33179,    print(i)
33180,
33181,#Usage: %lprun <name_of_the_function> function
33182,%lprun -f fun fun()
33183,sys.getsizeof('code to profile')
33184,# 64 bytes
33185,from pympler import asizeof
33186,"obj = [1,2,(""hey"",""ha""),3]"
33187,"print(asizeof.asizeof(obj,stats=4))"
33188,from pympler import tracker
33189,tr = tracker.SummaryTracker()
33190,def fun():
33191,"  li = [1,2,3]"
33192,"  di = {""ha"":""haha"",""duh"":""Umm""}"
33193,fun()
33194,tr.print_diff()
33195,cumulative_profiler
33196,nonlocal
33197,"import cProfile, pstats"
33198,
33199,class _ProfileFunc:
33200,"    def __init__(self, func, sort_stats_by):"
33201,        self.func =  func
33202,        self.profile_runs = []
33203,        self.sort_stats_by = sort_stats_by
33204,
33205,"    def __call__(self, *args, **kwargs):"
33206,        pr = cProfile.Profile()
33207,        pr.enable()  # this is the profiling section
33208,"        retval = self.func(*args, **kwargs)"
33209,        pr.disable()
33210,
33211,        self.profile_runs.append(pr)
33212,        ps = pstats.Stats(*self.profile_runs).sort_stats(self.sort_stats_by)
33213,"        return retval, ps"
33214,
33215,"def cumulative_profiler(amount_of_times, sort_stats_by='time'):"
33216,    def real_decorator(function):
33217,"        def wrapper(*args, **kwargs):"
33218,"            nonlocal function, amount_of_times, sort_stats_by  # for python 2.x remove this row"
33219,
33220,"            profiled_func = _ProfileFunc(function, sort_stats_by)"
33221,            for i in range(amount_of_times):
33222,"                retval, ps = profiled_func(*args, **kwargs)"
33223,            ps.print_stats()
33224,            return retval  # returns the results of the function
33225,        return wrapper
33226,
33227,    if callable(amount_of_times):  # incase you don't want to specify the amount of times
33228,        func = amount_of_times  # amount_of_times is the function in here
33229,        amount_of_times = 5  # the default amount
33230,        return real_decorator(func)
33231,    return real_decorator
33232,baz
33233,import time
33234,
33235,@cumulative_profiler
33236,def baz():
33237,    time.sleep(1)
33238,    time.sleep(2)
33239,    return 1
33240,
33241,baz()
33242,baz
33243,         20 function calls in 15.003 seconds
33244,
33245,   Ordered by: internal time
33246,
33247,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
33248,       10   15.003    1.500   15.003    1.500 {built-in method time.sleep}
33249,        5    0.000    0.000   15.003    3.001 <ipython-input-9-c89afe010372>:3(baz)
33250,        5    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
33251,@cumulative_profiler(3)
33252,def baz():
33253,    ...
33254,line_profiler
33255,line_profiler
33256,line-profiler-pycharm
33257,line_profiler_pycharm.profile
33258,import cProfile
33259,"cProfile.runctx('foo()', None, locals())"
33260,gprof2dot
33261,gprof2dot_magic
33262,pip install gprof2dot_magic
33263,gprof2dot
33264,graphviz
33265,gprof2dot_magic
33266,%load_ext gprof2dot_magic
33267,%gprof2dot print('hello world')
33268,@staticmethod
33269,def startProfiler():
33270,    yappi.start()
33271,
33272,@staticmethod
33273,def stopProfiler():
33274,    yappi.stop()
33275,
33276,@staticmethod
33277,def printProfiler():
33278,"    stats = yappi.get_stats(yappi.SORTTYPE_TTOT, yappi.SORTORDER_DESC, 20)"
33279,    statPrint = '\n'
33280,    namesArr = [len(str(stat[0])) for stat in stats.func_stats]
33281,"    log.debug(""namesArr %s"", str(namesArr))"
33282,    maxNameLen = max(namesArr)
33283,"    log.debug(""maxNameLen: %s"", maxNameLen)"
33284,
33285,    for stat in stats.func_stats:
33286,        nameAppendSpaces = [' ' for i in range(maxNameLen - len(stat[0]))]
33287,"        log.debug('nameAppendSpaces: %s', nameAppendSpaces)"
33288,        blankSpace = ''
33289,        for space in nameAppendSpaces:
33290,            blankSpace += space
33291,
33292,"        log.debug(""adding spaces: %s"", len(nameAppendSpaces))"
33293,"        statPrint = statPrint + str(stat[0]) + blankSpace + "" "" + str(stat[1]).ljust(8) + ""\t"" + str("
33294,"            round(stat[2], 2)).ljust(8 - len(str(stat[2]))) + ""\t"" + str(round(stat[3], 2)) + ""\n"""
33295,
33296,"    log.log(1000, ""\nname"" + ''.ljust(maxNameLen - 4) + "" ncall \tttot \ttsub"")"
33297,"    log.log(1000, statPrint)"
33298,startProfiler
33299,printProfiler
33300,"2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: "
33301,name                                                                                                                                      ncall     ttot    tsub
33302,"2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: "
33303,C:\Python27\lib\sched.py.run:80                                                                                                           22        0.11    0.05
33304,M:\02_documents\_repos\09_aheadRepos\apps\ahdModbusSrv\pyAheadRpcSrv\xmlRpc.py.iterFnc:293                                                22        0.11    0.0
33305,M:\02_documents\_repos\09_aheadRepos\apps\ahdModbusSrv\serverMain.py.makeIteration:515                                                    22        0.11    0.0
33306,M:\02_documents\_repos\09_aheadRepos\apps\ahdModbusSrv\pyAheadRpcSrv\PicklingXMLRPC.py._dispatch:66                                       1         0.0     0.0
33307,C:\Python27\lib\BaseHTTPServer.py.date_time_string:464                                                                                    1         0.0     0.0
33308,c:\users\zasiec~1\appdata\local\temp\easy_install-hwcsr1\psutil-1.1.2-py2.7-win32.egg.tmp\psutil\_psmswindows.py._get_raw_meminfo:243     4         0.0     0.0
33309,C:\Python27\lib\SimpleXMLRPCServer.py.decode_request_content:537                                                                          1         0.0     0.0
33310,c:\users\zasiec~1\appdata\local\temp\easy_install-hwcsr1\psutil-1.1.2-py2.7-win32.egg.tmp\psutil\_psmswindows.py.get_system_cpu_times:148 4         0.0     0.0
33311,<string>.__new__:8                                                                                                                        220       0.0     0.0
33312,C:\Python27\lib\socket.py.close:276                                                                                                       4         0.0     0.0
33313,C:\Python27\lib\threading.py.__init__:558                                                                                                 1         0.0     0.0
33314,<string>.__new__:8                                                                                                                        4         0.0     0.0
33315,C:\Python27\lib\threading.py.notify:372                                                                                                   1         0.0     0.0
33316,C:\Python27\lib\rfc822.py.getheader:285                                                                                                   4         0.0     0.0
33317,C:\Python27\lib\BaseHTTPServer.py.handle_one_request:301                                                                                  1         0.0     0.0
33318,C:\Python27\lib\xmlrpclib.py.end:816                                                                                                      3         0.0     0.0
33319,C:\Python27\lib\SimpleXMLRPCServer.py.do_POST:467                                                                                         1         0.0     0.0
33320,C:\Python27\lib\SimpleXMLRPCServer.py.is_rpc_path_valid:460                                                                               1         0.0     0.0
33321,C:\Python27\lib\SocketServer.py.close_request:475                                                                                         1         0.0     0.0
33322,c:\users\zasiec~1\appdata\local\temp\easy_install-hwcsr1\psutil-1.1.2-py2.7-win32.egg.tmp\psutil\__init__.py.cpu_times:1066               4         0.0     0.0 
33323,printProfiler
33324,@staticmethod
33325,def printProfile():
33326,    yappi.get_func_stats().print_all()
33327,"def printProfiler():     if not yappi_available:         return      stats = yappi.get_func_stats()     stats.print_all(columns={0:(""name"",90), 1:(""ncall"", 5),                     2:(""tsub"", 8), 3:(""ttot"", 8), 4:(""tavg"",8)})"
33328,$ python -m cprofilev /your/python/program
33329,# Go to http://localhost:4000 to view collected statistics.
33330,time python python_prog.py
33331,"@Profiler(depth=4, on_disable=show)"
33332,Install by: pip install auto_profiler
33333,import time # line number 1
33334,import random
33335,
33336,"from auto_profiler import Profiler, Tree"
33337,
33338,def f1():
33339,    mysleep(.6+random.random())
33340,
33341,def mysleep(t):
33342,    time.sleep(t)
33343,
33344,def fact(i):
33345,    f1()
33346,    if(i==1):
33347,        return 1
33348,    return i*fact(i-1)
33349,
33350,
33351,def show(p):
33352,    print('Time   [Hits * PerHit] Function name [Called from] [Function Location]\n'+\
33353,          '-----------------------------------------------------------------------')
33354,"    print(Tree(p.root, threshold=0.5))"
33355,    
33356,"@Profiler(depth=4, on_disable=show)"
33357,def main():
33358,    for i in range(5):
33359,        f1()
33360,
33361,    fact(3)
33362,
33363,
33364,if __name__ == '__main__':
33365,    main()
33366,Time   [Hits * PerHit] Function name [Called from] [function location]
33367,-----------------------------------------------------------------------
33368,8.974s [1 * 8.974]  main  [auto-profiler/profiler.py:267]  [/test/t2.py:30]
33369,├── 5.954s [5 * 1.191]  f1  [/test/t2.py:34]  [/test/t2.py:14]
33370,│   └── 5.954s [5 * 1.191]  mysleep  [/test/t2.py:15]  [/test/t2.py:17]
33371,│       └── 5.954s [5 * 1.191]  <time.sleep>
33372,|
33373,|
33374,|   # The rest is for the example recursive function call fact
33375,└── 3.020s [1 * 3.020]  fact  [/test/t2.py:36]  [/test/t2.py:20]
33376,    ├── 0.849s [1 * 0.849]  f1  [/test/t2.py:21]  [/test/t2.py:14]
33377,    │   └── 0.849s [1 * 0.849]  mysleep  [/test/t2.py:15]  [/test/t2.py:17]
33378,    │       └── 0.849s [1 * 0.849]  <time.sleep>
33379,    └── 2.171s [1 * 2.171]  fact  [/test/t2.py:24]  [/test/t2.py:20]
33380,        ├── 1.552s [1 * 1.552]  f1  [/test/t2.py:21]  [/test/t2.py:14]
33381,        │   └── 1.552s [1 * 1.552]  mysleep  [/test/t2.py:15]  [/test/t2.py:17]
33382,        └── 0.619s [1 * 0.619]  fact  [/test/t2.py:24]  [/test/t2.py:20]
33383,            └── 0.619s [1 * 0.619]  f1  [/test/t2.py:21]  [/test/t2.py:14]
33384,statprof
33385,pip
33386,pip install git+git://github.com/bos/statprof.py@1a33eba91899afe17a8b752c6dfdec6f05dd0c01
33387,import statprof
33388,
33389,with statprof.profile():
33390,    my_questionable_function()
33391,from speed_testpy import ScriptProfilerPy
33392,
33393,"ScriptProfilerPy(""path_to_your_script_to_test.py"").Profiler()"
33394,map()
33395,product
33396,import itertools
33397,
33398,"stuff = [1, 2, 3]"
33399,for L in range(len(stuff) + 1):
33400,"    for subset in itertools.combinations(stuff, L):"
33401,        print(subset)
33402,"from itertools import chain, combinations"
33403,def all_subsets(ss):
33404,"    return chain(*map(lambda x: combinations(ss, x), range(0, len(ss)+1)))"
33405,
33406,for subset in all_subsets(stuff):
33407,    print(subset)
33408,powerset()
33409,itertools
33410,itertools.combinations
33411,print(list(item))
33412,""","".join(items)"
33413,"itertools.combinations(iterable, r)"
33414,"list(itertools.combinations(iterable, r))"
33415,r
33416,itertools.combination_with_replacement
33417,"from itertools import compress, product"
33418,
33419,def combinations(items):
33420,"    return ( set(compress(items,mask)) for mask in product(*[[0,1]]*len(items)) )"
33421,"    # alternative:                      ...in product([0,1], repeat=len(items)) )"
33422,items=abc * mask=###
33423, |
33424, V
33425,000 -> 
33426,001 ->   c
33427,010 ->  b
33428,011 ->  bc
33429,100 -> a
33430,101 -> a c
33431,110 -> ab
33432,111 -> abc
33433,len(...)
33434,items
33435,items
33436,items=list(_itemsArg)
33437,items
33438,"{2,2,1}"
33439,"{2,1,1}"
33440,"{2,1}"
33441,collections.Counter
33442,set
33443,tuple(sorted(Counter(...).elements()))
33444,>>> list(combinations(range(4)))
33445,"[set(), {3}, {2}, {2, 3}, {1}, {1, 3}, {1, 2}, {1, 2, 3}, {0}, {0, 3}, {0, 2}, {0, 2, 3}, {0, 1}, {0, 1, 3}, {0, 1, 2}, {0, 1, 2, 3}]"
33446,
33447,>>> list(combinations('abcd'))
33448,"[set(), {'d'}, {'c'}, {'c', 'd'}, {'b'}, {'b', 'd'}, {'c', 'b'}, {'c', 'b', 'd'}, {'a'}, {'a', 'd'}, {'a', 'c'}, {'a', 'c', 'd'}, {'a', 'b'}, {'a', 'b', 'd'}, {'a', 'c', 'b'}, {'a', 'c', 'b', 'd'}]"
33449,powerset()
33450,itertools
33451,s = list(iterable)
33452,s = list(set(iterable))
33453,iterable
33454,list
33455,"from itertools import chain, combinations"
33456,
33457,def powerset(iterable):
33458,"    ""powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"""
33459,    s = list(iterable)  # allows duplicate elements
33460,"    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))"
33461,
33462,"stuff = [1, 2, 3]"
33463,"for i, combo in enumerate(powerset(stuff), 1):"
33464,"    print('combo #{}: {}'.format(i, combo))"
33465,combo #1: ()
33466,"combo #2: (1,)"
33467,"combo #3: (2,)"
33468,"combo #4: (3,)"
33469,"combo #5: (1, 2)"
33470,"combo #6: (1, 3)"
33471,"combo #7: (2, 3)"
33472,"combo #8: (1, 2, 3)"
33473,list()
33474,def combs(a):
33475,    if len(a) == 0:
33476,        return [[]]
33477,    cs = []
33478,    for c in combs(a[1:]):
33479,"        cs += [c, c+[a[0]]]"
33480,    return cs
33481,
33482,">>> combs([1,2,3,4,5])"
33483,"[[], [1], [2], [2, 1], [3], [3, 1], [3, 2], ..., [5, 4, 3, 2, 1]]"
33484,>>> import copy
33485,">>> def combinations(target,data):"
33486,...     for i in range(len(data)):
33487,...         new_target = copy.copy(target)
33488,...         new_data = copy.copy(data)
33489,...         new_target.append(data[i])
33490,...         new_data = data[i+1:]
33491,...         print new_target
33492,"...         combinations(new_target,"
33493,...                      new_data)
33494,...                      
33495,... 
33496,>>> target = []
33497,">>> data = ['a','b','c','d']"
33498,>>> 
33499,">>> combinations(target,data)"
33500,['a']
33501,"['a', 'b']"
33502,"['a', 'b', 'c']"
33503,"['a', 'b', 'c', 'd']"
33504,"['a', 'b', 'd']"
33505,"['a', 'c']"
33506,"['a', 'c', 'd']"
33507,"['a', 'd']"
33508,['b']
33509,"['b', 'c']"
33510,"['b', 'c', 'd']"
33511,"['b', 'd']"
33512,['c']
33513,"['c', 'd']"
33514,['d']
33515,new_data = copy.copy(data)
33516,0
33517,n
33518,n
33519,itertools.combinations
33520,from itertools import combinations
33521,
33522,"input = ['a', 'b', 'c', 'd']"
33523,
33524,"output = sum([map(list, combinations(input, i)) for i in range(len(input) + 1)], [])"
33525,from itertools import combinations
33526,
33527,"input = ['a', 'b', 'c', 'd']"
33528,
33529,"output = sum([list(map(list, combinations(input, i))) for i in range(len(input) + 1)], [])"
33530,"[[],"
33531," ['a'],"
33532," ['b'],"
33533," ['c'],"
33534," ['d'],"
33535," ['a', 'b'],"
33536," ['a', 'c'],"
33537," ['a', 'd'],"
33538," ['b', 'c'],"
33539," ['b', 'd'],"
33540," ['c', 'd'],"
33541," ['a', 'b', 'c'],"
33542," ['a', 'b', 'd'],"
33543," ['a', 'c', 'd'],"
33544," ['b', 'c', 'd'],"
33545," ['a', 'b', 'c', 'd']]"
33546,"['b', 'a']"
33547,import itertools
33548,
33549,"a = [1,2,3,4]"
33550,"for i in xrange(0,len(a)+1):"
33551,"   print list(itertools.combinations(a,i))"
33552,[()]
33553,"[(1,), (2,), (3,), (4,)]"
33554,"[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]"
33555,"[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]"
33556,"[(1, 2, 3, 4)]"
33557,itertools.combinations()
33558,iterable = range(10)
33559,for s in xrange(len(iterable)+1):
33560,"  for comb in itertools.combinations(iterable, s):"
33561,    yield comb
33562,def powerSet(items):
33563,"    """""""
33564,    Power set generator: get all possible combinations of a list’s elements
33565,
33566,    Input:
33567,        items is a list
33568,    Output:
33569,        returns 2**n combination lists one at a time using a generator 
33570,
33571,    Reference: edx.org 6.00.2x Lecture 2 - Decision Trees and dynamic programming
33572,"    """""""
33573,
33574,    N = len(items)
33575,    # enumerate the 2**N possible combinations
33576,    for i in range(2**N):
33577,        combo = []
33578,        for j in range(N):
33579,            # test bit jth of integer i
33580,            if (i >> j) % 2 == 1:
33581,                combo.append(items[j])
33582,        yield combo
33583,"for i in powerSet([1,2,3,4]):"
33584,"    print (i, "", "",  end="""")"
33585,import sys
33586,
33587,def permutations(a):
33588,"    return combinations(a, len(a))"
33589,
33590,"def combinations(a, n):"
33591,    if n == 1:
33592,        for x in a:
33593,            yield [x]
33594,    else:
33595,        for i in range(len(a)):
33596,"            for x in combinations(a[:i] + a[i+1:], n-1):"
33597,                yield [a[i]] + x
33598,
33599,"def combinationsNoOrder(a, n):"
33600,    if n == 1:
33601,        for x in a:
33602,            yield [x]
33603,    else:
33604,        for i in range(len(a)):
33605,"            for x in combinationsNoOrder(a[:i], n-1):"
33606,                yield [a[i]] + x
33607,    
33608,"if __name__ == ""__main__"":"
33609,"    for s in combinations(list(map(int, sys.argv[2:])), int(sys.argv[1])):"
33610,        print(s)
33611,itertools.combinations
33612,def combs(x):
33613,"    return [c for i in range(len(x)+1) for c in combinations(x,i)]"
33614,">>> combs([1,2,3,4])"
33615,"[(), "
33616," (1,), (2,), (3,), (4,), "
33617," (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), "
33618," (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4), "
33619," (1, 2, 3, 4)]"
33620,more_itertools
33621,from more_itertools import powerset
33622,
33623,"l = [1,2,3]"
33624,list(powerset(l))
33625,
33626,"# [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]"
33627,from more_itertools import ilen
33628,
33629,assert ilen(powerset(range(15))) == 32_768
33630,from itertools import combinations
33631,
33632,
33633,"features = ['A', 'B', 'C']"
33634,tmp = []
33635,for i in range(len(features)):
33636,"    oc = combinations(features, i + 1)"
33637,    for c in oc:
33638,        tmp.append(list(c))
33639,[
33640," ['A'],"
33641," ['B'],"
33642," ['C'],"
33643," ['A', 'B'],"
33644," ['A', 'C'],"
33645," ['B', 'C'],"
33646," ['A', 'B', 'C']"
33647,]
33648,"def combs(xs, i=0):"
33649,    if i==len(xs):
33650,        yield ()
33651,        return
33652,"    for c in combs(xs,i+1):"
33653,        yield c
33654,"        yield c+(xs[i],)"
33655,>>> list( combs(range(5)) )
33656,"[(), (0,), (1,), (1, 0), (2,), (2, 0), (2, 1), (2, 1, 0), (3,), (3, 0), (3, 1), (3, 1, 0), (3, 2), (3, 2, 0), (3, 2, 1), (3, 2, 1, 0), (4,), (4, 0), (4, 1), (4, 1, 0), (4, 2), (4, 2, 0), (4, 2, 1), (4, 2, 1, 0), (4, 3), (4, 3, 0), (4, 3, 1), (4, 3, 1, 0), (4, 3, 2), (4, 3, 2, 0), (4, 3, 2, 1), (4, 3, 2, 1, 0)]"
33657,
33658,">>> list(sorted( combs(range(5)), key=len))"
33659,"[(), "
33660," (0,), (1,), (2,), (3,), (4,), "
33661," (1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3), "
33662," (2, 1, 0), (3, 1, 0), (3, 2, 0), (3, 2, 1), (4, 1, 0), (4, 2, 0), (4, 2, 1), (4, 3, 0), (4, 3, 1), (4, 3, 2), "
33663," (3, 2, 1, 0), (4, 2, 1, 0), (4, 3, 1, 0), (4, 3, 2, 0), (4, 3, 2, 1), "
33664," (4, 3, 2, 1, 0)]"
33665,
33666,>>> len(set(combs(range(5))))
33667,32
33668,"lambda l: [(a, b) for i, a in enumerate(l) for b in l[i+1:]]"
33669,"lambda l: [(a, b, c) for i, a in enumerate(l) for ii, b in enumerate(l[i+1:]) for c in l[i+ii+2:]]"
33670,import itertools
33671,combs_3 = lambda l: [
33672,"    (a, b, c) for i, a in enumerate(l) "
33673,"    for ii, b in enumerate(l[i+1:]) "
33674,    for c in l[i+ii+2:]
33675,]
33676,"data = ((1, 2), 5, ""a"", None)"
33677,"print(""A:"", list(itertools.combinations(data, 3)))"
33678,"print(""B:"", combs_3(data))"
33679,"# A: [((1, 2), 5, 'a'), ((1, 2), 5, None), ((1, 2), 'a', None), (5, 'a', None)]"
33680,"# B: [((1, 2), 5, 'a'), ((1, 2), 5, None), ((1, 2), 'a', None), (5, 'a', None)]"
33681,"def comb(s, res):"
33682,    if not s: return
33683,    res.add(s)
33684,"    for i in range(0, len(s)):"
33685,        t = s[0:i] + s[i + 1:]
33686,"        comb(t, res)"
33687,
33688,res = set()
33689,"comb('game', res) "
33690,
33691,print(res)
33692,itertools.combinations
33693,"def combinations(lst, depth, start=0, items=[]):"
33694,    if depth <= 0:
33695,        return [items]
33696,    out = []
33697,"    for i in range(start, len(lst)):"
33698,"        out += combinations(lst, depth - 1, i + 1, items + [lst[i]])"
33699,    return out
33700,"def combinations(lst, depth, start=0, prepend=[]):"
33701,    if depth <= 0:
33702,        yield prepend
33703,    else:
33704,"        for i in range(start, len(lst)):"
33705,"            for c in combinations(lst, depth - 1, i + 1, prepend + [lst[i]]):"
33706,                yield c
33707,"print([c for c in combinations([1, 2, 3, 4], 3)])"
33708,"# [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]"
33709,
33710,# get a hold of prepend
33711,"prepend = [c for c in combinations([], -1)][0]"
33712,prepend.append(None)
33713,
33714,"print([c for c in combinations([1, 2, 3, 4], 3)])"
33715,"# [[None, 1, 2, 3], [None, 1, 2, 4], [None, 1, 3, 4], [None, 2, 3, 4]]"
33716,itertools
33717,"def combinations(arr, carry):"
33718,    for i in range(len(arr)):
33719,        yield carry + arr[i]
33720,"        yield from combinations(arr[i + 1:], carry + arr[i])"
33721,"carry = """"."
33722,import itertools
33723,"col_names = [""aa"",""bb"", ""cc"", ""dd""]"
33724,"all_combinations = itertools.chain(*[itertools.combinations(col_names,i+1) for i,_ in enumerate(col_names)])"
33725,print(list(all_combinations))
33726,"# FUNCTION getCombos: To generate all combos of an input list, consider the following sets of nested lists..."
33727,#
33728,#           [ [ [] ] ]
33729,"#           [ [ [] ], [ [A] ] ]"
33730,"#           [ [ [] ], [ [A],[B] ],         [ [A,B] ] ]"
33731,"#           [ [ [] ], [ [A],[B],[C] ],     [ [A,B],[A,C],[B,C] ],                   [ [A,B,C] ] ]"
33732,"#           [ [ [] ], [ [A],[B],[C],[D] ], [ [A,B],[A,C],[B,C],[A,D],[B,D],[C,D] ], [ [A,B,C],[A,B,D],[A,C,D],[B,C,D] ], [ [A,B,C,D] ] ]"
33733,#
33734,#  There is a set of lists for each number of items that will occur in a combo (including an empty set).
33735,"#  For each additional item, begin at the back of the list by adding an empty list, then taking the set of"
33736,"#  lists in the previous column (e.g., in the last list, for sets of 3 items you take the existing set of"
33737,#  3-item lists and append to it additional lists created by appending the item (4) to the lists in the
33738,"#  next smallest item count set. In this case, for the three sets of 2-items in the previous list. Repeat"
33739,#  for each set of lists back to the initial list containing just the empty list.
33740,#
33741,
33742,"def getCombos(listIn = ['A','B','C','D','E','F'] ):"
33743,"    listCombos = [ [ [] ] ]     # list of lists of combos, seeded with a list containing only the empty list"
33744,"    listSimple = []             # list to contain the final returned list of items (e.g., characters)"
33745,
33746,    for item in listIn:
33747,        listCombos.append([])   # append an emtpy list to the end for each new item added
33748,"        for index in xrange(len(listCombos)-1, 0, -1):  # set the index range to work through the list"
33749,            for listPrev in listCombos[index-1]:        # retrieve the lists from the previous column
33750,                listCur = listPrev[:]                   # create a new temporary list object to update
33751,                listCur.append(item)                    # add the item to the previous list to make it current
33752,                listCombos[index].append(listCur)       # list length and append it to the current list
33753,
33754,                itemCombo = ''                          # Create a str to concatenate list items into a str
33755,                for item in listCur:                    # concatenate the members of the lists to create
33756,                    itemCombo += item                   # create a string of items
33757,                listSimple.append(itemCombo)            # add to the final output list
33758,
33759,"    return [listSimple, listCombos]"
33760,# END getCombos()
33761,""""""
33762,def combine(inp):
33763,"    return combine_helper(inp, [], [])"
33764,
33765,
33766,"def combine_helper(inp, temp, ans):"
33767,    for i in range(len(inp)):
33768,        current = inp[i]
33769,        remaining = inp[i + 1:]
33770,        temp.append(current)
33771,        ans.append(tuple(temp))
33772,"        combine_helper(remaining, temp, ans)"
33773,        temp.pop()
33774,    return ans
33775,
33776,
33777,"print(combine(['a', 'b', 'c', 'd']))"
33778,def get_combinations(list_of_things):
33779,"""""""gets every combination of things in a list returned as a list of lists"
33780,
33781,Should be read : add all combinations of a certain size to the end of a list for every possible size in the
33782,the list_of_things.
33783,
33784,""""""""
33785,list_of_combinations = [list(combinations_of_a_certain_size)
33786,"                        for possible_size_of_combinations in range(1,  len(list_of_things))"
33787,"                        for combinations_of_a_certain_size in itertools.combinations(list_of_things,"
33788,                                                                                     possible_size_of_combinations)]
33789,return list_of_combinations
33790,"def combinations(iterable, r):"
33791,"    # combinations('ABCD', 2) --> AB AC AD BC BD CD"
33792,"    # combinations(range(4), 3) --> 012 013 023 123"
33793,    pool = tuple(iterable)
33794,    n = len(pool)
33795,    if r > n:
33796,        return
33797,    indices = list(range(r))
33798,    yield tuple(pool[i] for i in indices)
33799,    while True:
33800,        for i in reversed(range(r)):
33801,            if indices[i] != i + n - r:
33802,                break
33803,        else:
33804,            return
33805,        indices[i] += 1
33806,"        for j in range(i+1, r):"
33807,            indices[j] = indices[j-1] + 1
33808,        yield tuple(pool[i] for i in indices)
33809,
33810,
33811,"x = [2, 3, 4, 5, 1, 6, 4, 7, 8, 3, 9]"
33812,"for i in combinations(x, 2):"
33813,    print i
33814,"def selfCombine( list2Combine, length ):"
33815,"    listCombined = str( ['list2Combine[i' + str( i ) + ']' for i in range( length )] ).replace( ""'"", '' ) \"
33816,                     + 'for i0 in range(len( list2Combine ) )'
33817,    if length > 1:
33818,"        listCombined += str( [' for i' + str( i ) + ' in range( i' + str( i - 1 ) + ', len( list2Combine ) )' for i in range( 1, length )] )\"
33819,"            .replace( ""', '"", ' ' )\"
33820,"            .replace( ""['"", '' )\"
33821,"            .replace( ""']"", '' )"
33822,
33823,    listCombined = '[' + listCombined + ']'
33824,    listCombined = eval( listCombined )
33825,
33826,    return listCombined
33827,
33828,"list2Combine = ['A', 'B', 'C']"
33829,"listCombined = selfCombine( list2Combine, 2 )"
33830,"['A', 'A']"
33831,"['A', 'B']"
33832,"['A', 'C']"
33833,"['B', 'B']"
33834,"['B', 'C']"
33835,"['C', 'C']"
33836,"stuff = [1, 2, 3, 4]"
33837,
33838,"def reverse(bla, y):"
33839,"    for subset in itertools.combinations(bla, len(bla)-y):"
33840,        print list(subset)
33841,    if y != len(bla):
33842,        y += 1
33843,"        reverse(bla, y)"
33844,
33845,"reverse(stuff, 1)"
33846,flag = 0
33847,requiredCals =12
33848,"from itertools import chain, combinations"
33849,
33850,def powerset(iterable):
33851,    s = list(iterable)  # allows duplicate elements
33852,"    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))"
33853,
33854,"stuff = [2,9,5,1,6]"
33855,"for i, combo in enumerate(powerset(stuff), 1):"
33856,    if(len(combo)>0):
33857,"        #print(combo , sum(combo))"
33858,        if(sum(combo)== requiredCals):
33859,            flag = 1
33860,            break
33861,if(flag==1):
33862,    print('True')
33863,else:
33864,    print('else')
33865,"lst = [S, T, A, R]"
33866,lstCombos = []
33867,"for Length in range(0,len(lst)+1):"
33868,    for i in lst:
33869,        lstCombos.append(lst[lst.index(i):lst.index(i)+Length])
33870,"lst = [S, T, A, R]"
33871,lstCombos = []
33872,"for Length in range(0,len(lst)+1):"
33873,    for i in lst:
33874,         if not lst[lst.index(i):lst.index(i)+Length]) in lstCombos:
33875,             lstCombos.append(lst[lst.index(i):lst.index(i)+Length])
33876,for subList in lstCombos:
33877,    if subList = '':
33878,         lstCombos.remove(subList)
33879,product
33880,itertools
33881,from itertools import product
33882,
33883,"n = [1, 2, 3]"
33884,
33885,"result = product(n, repeat=3) # You can change the repeat more then n length"
33886,
33887,print(list(result))
33888,"[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1),"
33889," (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2),"
33890," (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), "
33891,"(3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)]"
33892,from itertools import product
33893,
33894,"n = [1, 2, 3]"
33895,
33896,"result = product(n, repeat=4) # Changing repeat to 4"
33897,print(list(result))
33898,"(1, 1, 2, 3), (1, 1, 3, 1), (1, 1, 3, 2), (1, 1, 3, 3), (1, 2, 1, 1), "
33899,"(1, 2, 1, 2), (1, 2, 1, 3), (1, 2, 2, 1), (1, 2, 2, 2), (1, 2, 2, 3), "
33900,"(1, 2, 3, 1), (1, 2, 3, 2), (1, 2, 3, 3), (1, 3, 1, 1), (1, 3, 1, 2), "
33901,"(1, 3, 1, 3), (1, 3, 2, 1), (1, 3, 2, 2), (1, 3, 2, 3), (1, 3, 3, 1), "
33902,"(1, 3, 3, 2), (1, 3, 3, 3), (2, 1, 1, 1), (2, 1, 1, 2), (2, 1, 1, 3), "
33903,"(2, 1, 2, 1), (2, 1, 2, 2), (2, 1, 2, 3), (2, 1, 3, 1), (2, 1, 3, 2),"
33904," (2, 1, 3, 3), (2, 2, 1, 1), (2, 2, 1, 2), (2, 2, 1, 3), (2, 2, 2, 1), "
33905,"(2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 3, 1), (2, 2, 3, 2), (2, 2, 3, 3), "
33906,"(2, 3, 1, 1), (2, 3, 1, 2), (2, 3, 1, 3), (2, 3, 2, 1), (2, 3, 2, 2), "
33907,"(2, 3, 2, 3), (2, 3, 3, 1), (2, 3, 3, 2), (2, 3, 3, 3), (3, 1, 1, 1), "
33908,"(3, 1, 1, 2), (3, 1, 1, 3), (3, 1, 2, 1), (3, 1, 2, 2), (3, 1, 2, 3), "
33909,"(3, 1, 3, 1), (3, 1, 3, 2), (3, 1, 3, 3), (3, 2, 1, 1), (3, 2, 1, 2), "
33910,"(3, 2, 1, 3), (3, 2, 2, 1), (3, 2, 2, 2), (3, 2, 2, 3), (3, 2, 3, 1), "
33911,"(3, 2, 3, 2), (3, 2, 3, 3), (3, 3, 1, 1), (3, 3, 1, 2), (3, 3, 1, 3), "
33912,"(3, 3, 2, 1), (3, 3, 2, 2), (3, 3, 2, 3), (3, 3, 3, 1), (3, 3, 3, 2), "
33913,"(3, 3, 3, 3)]```"
33914,"nums = [1,2,3]"
33915,p = [[]]
33916,"fnl = [[],nums]"
33917,
33918,for i in range(len(nums)):
33919,"    for j in range(i+1,len(nums)):"
33920,"        p[-1].append([i,j])"
33921,
33922,for i in range(len(nums)-3):
33923,    p.append([])
33924,    for m in p[-2]:
33925,        p[-1].append(m+[m[-1]+1])
33926,
33927,for i in p:
33928,    for j in i:
33929,        n = []
33930,        for m in j:
33931,            if m < len(nums):
33932,                n.append(nums[m])
33933,        if n not in fnl:
33934,            fnl.append(n)
33935,
33936,for i in nums:
33937,    if [i] not in fnl:
33938,        fnl.append([i])
33939,
33940,print(fnl)
33941,"[[], [1, 2, 3], [1, 2], [1, 3], [2, 3], [1], [2], [3]]"
33942,"cursor.execute(""INSERT INTO table VALUES var1, var2, var3,"")"
33943,var1
33944,var2
33945,var3
33946,"cursor.execute(""INSERT INTO table VALUES (%s, %s, %s)"", (var1, var2, var3))"
33947,%
33948,%
33949,%
33950,%
33951,%
33952,cursor.execute
33953,"cursor.execute(""INSERT INTO table VALUES (%s, %s, %s)"", (var1, var2, var3))"
33954,"cursor.execute(""INSERT INTO table VALUES (?, ?, ?)"", (var1, var2, var3))"
33955,VALUES
33956,"(:1, :2, :3)"
33957,"(:fee, :fie, :fo)"
33958,"(%(fee)s, %(fie)s, %(fo)s)"
33959,execute
33960,paramstyle
33961,%s
33962,%
33963,# Never do this -- insecure!
33964,symbol = 'RHAT'
33965,"cur.execute(""SELECT * FROM stocks WHERE symbol = '%s'"" % symbol)"
33966,
33967,# Do this instead
33968,"t = ('RHAT',)"
33969,"cur.execute('SELECT * FROM stocks WHERE symbol=?', t)"
33970,print(cur.fetchone())
33971,
33972,# Larger example that inserts many records at a time
33973,"purchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),"
33974,"             ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),"
33975,"             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),"
33976,            ]
33977,"cur.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)"
33978,# Multiple values single statement/execution
33979,"c.execute('SELECT * FROM stocks WHERE symbol=? OR symbol=?', ('RHAT', 'MSO'))"
33980,print c.fetchall()
33981,"c.execute('SELECT * FROM stocks WHERE symbol IN (?, ?)', ('RHAT', 'MSO'))"
33982,print c.fetchall()
33983,"# This also works, though ones above are better as a habit as it's inline with syntax of executemany().. but your choice."
33984,"c.execute('SELECT * FROM stocks WHERE symbol=? OR symbol=?', 'RHAT', 'MSO')"
33985,print c.fetchall()
33986,# Insert a single item
33987,"c.execute('INSERT INTO stocks VALUES (?,?,?,?,?)', ('2006-03-28', 'BUY', 'IBM', 1000, 45.00))"
33988,';DROP TABLE Users;'
33989,cursor.execute
33990,"cursor.execute(""insert into Attendees values (?, ?, ?)"", (name, seminar, paid))"
33991,INSERT INTO mytable (fruit) VALUES (%s)
33992,cursor.execute
33993,"(value,)"
33994,"cursor.execute(""""""INSERT INTO mytable (fruit) VALUES (%s)"""""", ('apple',))"
33995,"cursor.execute(""""""INSERT INTO mytable (fruit) VALUES (%s)"""""", ('apple'))"
33996,location    name    Jan-2010    Feb-2010    March-2010
33997,"A           ""test""  12          20          30"
33998,"B           ""foo""   18          20          25"
33999,location    name    Date        Value
34000,"A           ""test""  Jan-2010    12       "
34001,"A           ""test""  Feb-2010    20"
34002,"A           ""test""  March-2010  30"
34003,"B           ""foo""   Jan-2010    18       "
34004,"B           ""foo""   Feb-2010    20"
34005,"B           ""foo""   March-2010  25"
34006,melt
34007,"df.melt(id_vars=[""location"", ""name""], "
34008,"        var_name=""Date"", "
34009,"        value_name=""Value"")"
34010,
34011,  location    name        Date  Value
34012,"0        A  ""test""    Jan-2010     12"
34013,"1        B   ""foo""    Jan-2010     18"
34014,"2        A  ""test""    Feb-2010     20"
34015,"3        B   ""foo""    Feb-2010     20"
34016,"4        A  ""test""  March-2010     30"
34017,"5        B   ""foo""  March-2010     25"
34018,pd.melt
34019,>>> df
34020,  location  name  Jan-2010  Feb-2010  March-2010
34021,0        A  test        12        20          30
34022,1        B   foo        18        20          25
34023,">>> df2 = pd.melt(df, id_vars=[""location"", ""name""], "
34024,"                  var_name=""Date"", value_name=""Value"")"
34025,>>> df2
34026,  location  name        Date  Value
34027,0        A  test    Jan-2010     12
34028,1        B   foo    Jan-2010     18
34029,2        A  test    Feb-2010     20
34030,3        B   foo    Feb-2010     20
34031,4        A  test  March-2010     30
34032,5        B   foo  March-2010     25
34033,">>> df2 = df2.sort([""location"", ""name""])"
34034,>>> df2
34035,  location  name        Date  Value
34036,0        A  test    Jan-2010     12
34037,2        A  test    Feb-2010     20
34038,4        A  test  March-2010     30
34039,1        B   foo    Jan-2010     18
34040,3        B   foo    Feb-2010     20
34041,5        B   foo  March-2010     25
34042,.reset_index(drop=True)
34043,pd.DataFrame.sort
34044,pd.DataFrame.sort_values
34045,df2
34046,df
34047,"pandas.pivot_table(df2,values='Value',index=['location','name'],columns='Date').reset_index()"
34048,set_index
34049,stack
34050,MultiIndex Series
34051,DataFrame
34052,reset_index
34053,rename
34054,"df1 = (df.set_index([""location"", ""name""])"
34055,         .stack()
34056,         .reset_index(name='Value')
34057,         .rename(columns={'level_2':'Date'}))
34058,print (df1)
34059,  location  name        Date  Value
34060,0        A  test    Jan-2010     12
34061,1        A  test    Feb-2010     20
34062,2        A  test  March-2010     30
34063,3        B   foo    Jan-2010     18
34064,4        B   foo    Feb-2010     20
34065,5        B   foo  March-2010     25
34066,pd.wide_to_long
34067,pd.wide_to_long
34068,pd.melt
34069,"df.columns = np.hstack((df.columns[:2], df.columns[2:].map(lambda x: f'Value{x}')))"
34070,
34071,"res = pd.wide_to_long(df, stubnames=['Value'], i='name', j='Date').reset_index()\"
34072,"        .sort_values(['location', 'name'])"
34073,
34074,print(res)
34075,
34076,   name        Date location  Value
34077,0  test    Jan-2010        A     12
34078,2  test    Feb-2010        A     20
34079,4  test  March-2010        A     30
34080,1   foo    Jan-2010        B     18
34081,3   foo    Feb-2010        B     20
34082,5   foo  March-2010        B     25
34083,pd.stack()
34084,pd.melt()
34085,pd.wide_to_long()
34086,res
34087,"suffix=r"".+"""
34088,wide_to_long
34089,"suffix=""\d+"""
34090,"temp1 = pd.melt(df1, id_vars=[""location""], var_name='Date', value_name='Value')"
34091,"temp2 = pd.melt(df1, id_vars=[""name""], var_name='Date', value_name='Value')"
34092,temp1
34093,temp2
34094,name
34095,temp1['new_column'] = temp2['name']
34096,pandas.melt
34097,"df.melt(id_vars=[""location"", ""name""], "
34098,"    var_name=""date"", "
34099,"    value_name=""value"")"
34100,df.T
34101,__init__.py
34102,__init__
34103,__init__.py
34104,__init__.py
34105,__init__.py
34106,__init__.py
34107,"sys.path.insert(0, '/path/to/datetime')"
34108,from datetime import datetime;datetime.now()
34109,ImportError: attempted relative import with no known parent package
34110,test.py
34111,from .pytohtml import HTML
34112,__init__.py
34113,mydir/spam/__init__.py
34114,mydir/spam/module.py
34115,mydir
34116,module.py
34117,import spam.module
34118,from spam import module
34119,__init__.py
34120,__init__.py
34121,import spam
34122,__init__.py
34123,import spam
34124,import spam
34125,__init__.py
34126,spam
34127,spam
34128,spam/__init__.py
34129,__all__
34130,__init__.py
34131,sessionmaker
34132,Session
34133,database/
34134,    __init__.py
34135,    schema.py
34136,    insertions.py
34137,    queries.py
34138,__init__.py
34139,import os
34140,
34141,from sqlalchemy.orm import sessionmaker
34142,from sqlalchemy import create_engine
34143,
34144,engine = create_engine(os.environ['DATABASE_URL'])
34145,Session = sessionmaker(bind=engine)
34146,Session
34147,from database import Session
34148,session = Session()
34149,Session
34150,from database.create_session import Session
34151,session = Session()
34152,__init__.py
34153,__init__.py
34154,engine
34155,sessionmaker
34156,create_engine
34157,os
34158,database
34159,__all__ = [...]
34160,import *
34161,import *
34162,import os as _os
34163,_os
34164,__init__.py
34165,os
34166,__init__.py
34167,your_package/
34168,  __init__.py
34169,  file1.py
34170,  file2.py
34171,    ...
34172,  fileN.py
34173,# in __init__.py
34174,from .file1 import *
34175,from .file2 import *
34176,...
34177,from .fileN import *
34178,# in file1.py
34179,def add():
34180,    pass
34181, from your_package import add
34182, from your_package.file1 import add
34183, import logging.config
34184, logging.config.dictConfig(Your_logging_config)
34185,__init__.py
34186,__init__.py
34187,__init__.py
34188,__init__.py
34189,$ mkdir -p /tmp/test_init
34190,$ touch /tmp/test_init/module.py /tmp/test_init/__init__.py
34191,$ tree -at /tmp/test_init
34192,/tmp/test_init
34193,├── module.py
34194,└── __init__.py
34195,$ python3
34196,
34197,>>> import sys
34198,">>> sys.path.insert(0, '/tmp')"
34199,>>> from test_init import module
34200,>>> import test_init.module
34201,
34202,$ rm -f /tmp/test_init/__init__.py
34203,$ tree -at /tmp/test_init
34204,/tmp/test_init
34205,└── module.py
34206,$ python3
34207,
34208,>>> import sys
34209,">>> sys.path.insert(0, '/tmp')"
34210,>>> from test_init import module
34211,>>> import test_init.module
34212,__init__.py
34213,__init__.py
34214,main_methods 
34215,    |- methods.py
34216,methods.py
34217,def foo():
34218,    return 'foo'
34219,foo()
34220,from main_methods.methods import foo # Call with foo()
34221,from main_methods import methods # Call with methods.foo()
34222,import main_methods.methods # Call with main_methods.methods.foo()
34223,methods.py
34224,main_methods
34225,main_methods
34226,methods.py
34227,__init__.py
34228,foo()
34229,main_methods
34230,import main_methods
34231,print(main_methods.foo()) # Prints 'foo'
34232,__init__.py
34233,import json
34234,__init__.py
34235,json
34236,Lib/json/__init__.py
34237,__init__.py
34238,__init__.py
34239,package_x/
34240,|--  __init__.py
34241,|--    subPackage_a/
34242,|------  __init__.py
34243,|------  module_m1.py
34244,|--    subPackage_b/
34245,|------  __init__.py
34246,|------  module_n1.py
34247,|------  module_n2.py
34248,|------  module_n3.py
34249,__init__.py
34250,__init__.py
34251,def function_X():
34252,"    print ""function_X in module_n1"""
34253,    return
34254,>>>from package_x.subPackage_b.module_n1 import function_X
34255,>>>function_X()
34256,
34257,function_X in module_n1 
34258,__init__.py
34259,"__all__ = ['module_n2', 'module_n3']"
34260,>>>from package_x.subPackage_b import * 
34261,>>>module_n1.function_X()
34262,
34263,Traceback (most recent call last):
34264,"  File ""<stdin>"", line 1, in <module>"
34265,ImportError: No module named module_n1
34266,__init__.py
34267,from package_x.subPackage_b.module_n1 import function_X
34268,__init__.py
34269,$ find /tmp/mydir/
34270,/tmp/mydir/
34271,/tmp/mydir//spam
34272,/tmp/mydir//spam/__init__.py
34273,/tmp/mydir//spam/module.py
34274,$ cd ~
34275,$ python
34276,>>> import sys
34277,">>> sys.path.insert(0, '/tmp/mydir')"
34278,>>> from spam import module
34279,>>> module.myfun(3)
34280,9
34281,>>> exit()
34282,$ 
34283,$ rm /tmp/mydir/spam/__init__.py*
34284,$ 
34285,$ python
34286,>>> import sys
34287,">>> sys.path.insert(0, '/tmp/mydir')"
34288,>>> from spam import module
34289,Traceback (most recent call last):
34290,"  File ""<stdin>"", line 1, in <module>"
34291,ImportError: No module named spam
34292,>>> 
34293,root\
34294,    stuff\
34295,         other.py
34296,
34297,    morestuff\
34298,         another.py
34299,__init__.py
34300,__init__.py
34301,__init__.py
34302,a()
34303,b.py
34304,from b import a
34305,import sys
34306,"sys.path.insert(0, 'path/to/b.py')"
34307,
34308,from b import a
34309,def foo():
34310,    ...
34311,foo
34312,from util import foo
34313,util
34314,from util import foo
34315,util/
34316,  __init__.py
34317,  util.py
34318,  db.py
34319,from util import *
34320,from util import foo
34321,from util.db import check_schema
34322,util
34323,util
34324,from util import check_schema
34325,from util import *
34326,from util import *
34327,db
34328,import os
34329,import sys
34330,dir_path = os.path.dirname(__file__)
34331,"sys.path.insert(0, dir_path)"
34332,import cheese
34333,from vehicle_parts import *
34334,# etc.
34335,"input_variable = input(""Enter your name: "")"
34336,"print(""your name is"" + input_variable)"
34337,"  line 1, in <module>"
34338,"    input_variable = input(""Enter your name: "")"
34339,"  File ""<string>"", line 1, in <module>"
34340,NameError: name 'dude' is not defined
34341,input
34342,python --version
34343,import sys; print(sys.version)
34344,import sys
34345,print(sys.version_info)
34346,input
34347,raw_input
34348,raw_input
34349,input
34350,raw_input()
34351,input()
34352,input()
34353,sys.stdin
34354,EOFError
34355,input()
34356,eval(input())
34357,input
34358,raw_input
34359,input = eval(raw_input)
34360,">>> dude = ""thefourtheye"""
34361,">>> input_variable = input(""Enter your name: "")"
34362,Enter your name: dude
34363,>>> input_variable
34364,'thefourtheye'
34365,input
34366,dude
34367,dude
34368,thefourtheye
34369,thefourtheye
34370,input_variable
34371,NameError
34372,">>> input(""Enter your name: "")"
34373,Enter your name: dummy
34374,Traceback (most recent call last):
34375,"  File ""<input>"", line 1, in <module>"
34376,"  File ""<string>"", line 1, in <module>"
34377,NameError: name 'dummy' is not defined
34378,input
34379,os
34380,import os
34381,"os.remove(""/etc/hosts"")"
34382,/etc/hosts
34383,input
34384,">>> dude = ""thefourtheye"""
34385,">>> input(""Enter your name: "")"
34386,"Enter your name: input(""Enter your name again: "")"
34387,Enter your name again: dude
34388,"input(""Enter your name: "")"
34389,Enter your name again:
34390,raw_input
34391,"input_variable = raw_input(""Enter your name: "")"
34392,raw_input
34393,int
34394,input
34395,raw_input
34396,raw_input
34397,"input_variable = raw_input (""Enter your name: "")"
34398,"print (""your name is"" + input_variable)"
34399,#!/usr/bin/env python3
34400,#!/usr/bin/env python
34401,#! python
34402,#! python3
34403,from six.moves import input
34404,raw_input
34405,input()
34406,s = input('Name: ')
34407,s
34408,raw_input()
34409,f = raw_input('Name : ')
34410,input_variable = raw_input('Enter Your Name : ')
34411,"print(""Your Name Is  : "" + (input_variable))"
34412,"input_variable = input (""Enter your name: "")"
34413,"print (""your name is"" + input_variable)"
34414,Ex:'dude' -> correct
34415,
34416,    dude -> not correct
34417,s = raw_input()
34418,s = input()
34419,raw_input
34420,#Works in Python 2 and 3:
34421,try: input = raw_input
34422,except NameError: pass
34423,"print(input(""Enter your name: ""))"
34424,"x = raw_input(""enter your name"")"
34425,"print ""your name is %s "" % x"
34426,"x = str(input(""enter your name""))"
34427,"print ""your name is %s"" % x"
34428,string
34429,from six.moves import input
34430,raw_input()
34431,input()
34432,str()
34433,str(input())
34434,input()
34435,raw_input()
34436,raw_input
34437,input
34438,"print(""Enter your name: "")"
34439,x = raw_input()
34440,"print(""Hello, ""+x)"
34441,#!/usr/bin/env python3
34442,./filename.py
34443,-bash: ./filename.py: Permission denied
34444,chmod a+x filename.py
34445,./filename.py
34446,import sys; print(sys.version)
34447,import sys; print(sys.version)
34448,
34449,def ingreso(nombre):
34450,"    print('Hi ', nombre, type(nombre))"
34451,
34452,def bienvenida(nombre):
34453,"    print(""Hi ""+nombre+"", bye "")"
34454,
34455,"nombre = raw_input(""Enter your name: "")"
34456,
34457,ingreso(nombre)
34458,bienvenida(nombre)
34459,
34460,#Works in Python 2 and 3:
34461,try: input = raw_input
34462,except NameError: pass
34463,"print(input(""Your name: ""))"
34464,"print (""your name is"" + input_variable)"
34465,"print (""your name is"", input_variable)"
34466,your name is
34467,raw_input
34468,UnboundLocalError: local variable 'input' referenced before assignment
34469,def input_compatible(prompt=None):
34470,    try:
34471,        input_func = raw_input
34472,    except NameError:
34473,        input_func = input
34474,    return input_func(prompt)
34475,try
34476,def input_compatible(prompt=None):
34477,"    input_func = raw_input if ""raw_input"" in __builtins__.__dict__ else input"
34478,    return input_func(prompt)
34479,six
34480,six.input
34481,NameError
34482,input_compatible
34483,try
34484,raw_input
34485,six
34486,try
34487,subprocess
34488,"callProcess = subprocess.Popen(['ls', '-l'], shell=True)"
34489,"callProcess = subprocess.Popen(['ls', '-l']) # without shell"
34490,shell=True
34491,-l
34492,/bin/sh
34493,ls
34494,shell=True
34495,shell=True
34496,shell=True
34497,False
34498,SHELL
34499,ILS
34500,sendmail
34501,ILS
34502,shell=False
34503,$SHELL
34504,shell=True
34505,/bin/sh
34506,$SHELL
34507,open
34508,IFS
34509,IFS
34510,>>> import subprocess
34511,>>> subprocess.call('echo $HOME')
34512,Traceback (most recent call last):
34513,...
34514,OSError: [Errno 2] No such file or directory
34515,>>>
34516,">>> subprocess.call('echo $HOME', shell=True)"
34517,/user/khong
34518,0
34519,>>> from subprocess import call
34520,">>> filename = input(""What file would you like to display?\n"")"
34521,What file would you like to display?
34522,non_existent; rm -rf / # THIS WILL DELETE EVERYTHING IN ROOT PARTITION!!!
34523,">>> call(""cat "" + filename, shell=True) # Uh-oh. This will end badly..."
34524,shell=False
34525,"call([""rm"", filename1, filename2])"
34526,filename
34527,"""-r"""
34528,../../private/path/filename.txt
34529,shell=True
34530,os.path.expandvars()
34531,shlex
34532,shell=True
34533,subprocess
34534,shell=True
34535,"subprocess.Popen(""command -with -options 'like this' and\\ an\\ argument"", shell=True)"
34536,"subprocess.Popen(['command', '-with','-options', 'like this', 'and an argument'])"
34537,execvp()
34538,shlex.split()
34539,Popen
34540,subprocess
34541,subprocess.run
34542,check=True
34543,stdout=subprocess.PIPE
34544,text=True
34545,universal_newlines=True
34546,bytes
34547,check_output
34548,check_call
34549,"subprocess.run('echo ""$HOME""', shell=True)"
34550,shell=True
34551,subprocess
34552,ps
34553,import time
34554,import subprocess
34555,
34556,"s = subprocess.Popen([""sleep 100""], shell=True)"
34557,"print(""start"")"
34558,print(s.pid)
34559,time.sleep(5)
34560,s.kill()
34561,"print(""finish"")"
34562,start
34563,832758
34564,finish
34565,ps -auxf > 1
34566,finish
34567,ps -auxf > 2
34568,finish
34569,cy         71209  0.0  0.0   9184  4580 pts/6    Ss   Oct20   0:00  |       \_ /bin/bash
34570,cy        832757  0.2  0.0  13324  9600 pts/6    S+   19:31   0:00  |       |   \_ python /home/cy/Desktop/test.py
34571,cy        832758  0.0  0.0   2616   612 pts/6    S+   19:31   0:00  |       |       \_ /bin/sh -c sleep 100
34572,cy        832759  0.0  0.0   5448   532 pts/6    S+   19:31   0:00  |       |           \_ sleep 100
34573,sleep 100
34574,/bin/sh
34575,pid
34576,pid
34577,/bin/sh
34578,s.kill()
34579,/bin/sh
34580,sleep
34581,cy         69369  0.0  0.0 533764  8160 ?        Ssl  Oct20   0:12  \_ /usr/libexec/xdg-desktop-portal
34582,cy         69411  0.0  0.0 491652 14856 ?        Ssl  Oct20   0:04  \_ /usr/libexec/xdg-desktop-portal-gtk
34583,cy        832646  0.0  0.0   5448   596 pts/6    S    19:30   0:00  \_ sleep 100
34584,/bin/sh
34585,shell
34586,/bin/bash
34587,sh
34588,bash
34589,ls
34590,/usr/bin/ls
34591,ls
34592,$
34593,"subprocess.call([""echo $PATH""], shell=True)"
34594,"subprocess.call([""echo"", ""$PATH""])"
34595,if
34596,else
34597,">>> subprocess.run(['ls','-ld','/home','rm','/etc/passwd'])"
34598,ls: rm: No such file or directory
34599,-rw-r--r--    1 root     root          1172 May 28  2020 /etc/passwd
34600,drwxr-xr-x    2 root     root          4096 May 29  2020 /home
34601,"CompletedProcess(args=['ls', '-ld', '/home', 'rm', '/etc/passwd'], returncode=1)"
34602,">>> subprocess.run(['rm','-rf','/home'])"
34603,"CompletedProcess(args=['rm', '-rf', '/home'], returncode=0)"
34604,">>> subprocess.run(['ls','-ld','/home'])"
34605,ls: /home: No such file or directory
34606,"CompletedProcess(args=['ls', '-ld', '/home'], returncode=1)"
34607,>>>
34608,# Python 3.4.3
34609,"s = r'abc123d, hello 3.1415926, this is my book'"
34610,pattern = r'-?[0-9]+(\\.[0-9]*)?|-?\\.[0-9]+'
34611,re.search
34612,"m = re.search(pattern, s)"
34613,"print(m)  # output: <_sre.SRE_Match object; span=(3, 6), match='123'>"
34614,re.findall
34615,"L = re.findall(pattern, s)"
34616,"print(L)  # output: ['', '', '']"
34617,re.findall
34618,"['123', '3.1415926']"
34619,re.findall
34620,r'\\.'
34621,\
34622,findall
34623,re.findall
34624,(a(b)c)
34625,abc
34626,(
34627,(?:
34628,re.finditer
34629,"[x.group() for x in re.finditer(pattern, s)]"
34630,findall
34631,\\
34632,r''
34633,\
34634,-?\d*\.?\d+
34635,-?
34636,\d*
34637,\.?
34638,\d+
34639,import re
34640,"s = r'abc123d, hello 3.1415926, this is my book'"
34641,pattern = r'-?\d*\.?\d+'
34642,"L = re.findall(pattern, s)"
34643,print(L)
34644,"s = r'abc123d, hello 3.1415926, this is my book'"
34645,"print re.findall(r'-?[0-9]+(?:\.[0-9]*)?|-?\.[0-9]+',s)"
34646,"['123', '3.1415926']"
34647,map
34648,"import re,ast"
34649,"s = r'abc123d, hello 3.1415926, this is my book'"
34650,"print map(ast.literal_eval,re.findall(r'-?[0-9]+(?:\.[0-9]*)?|-?\.[0-9]+',s))"
34651,"[123, 3.1415926]"
34652,ast
34653,"@stribizhev, it's not, '3.1415926' should be a float number in the result"
34654,(?=[-\d.])-?(?:\d+(?:\.\d*)?|\.\d+)
34655,search
34656,findall
34657,SRE_Match
34658,string
34659,re
34660,REGEX
34661,groups()
34662,REGEX
34663,group(index)
34664,index > 0
34665,group(0)
34666,REGEX
34667,search
34668,SRE_Match
34669,import re
34670,
34671,s = r'abc123d'
34672,pattern = r'-?[0-9]+(\.[0-9]*)?|-?\.[0-9]+'
34673,"m = re.search(pattern, s)"
34674,print(m.string)  # 'abc123d'
34675,print(m.group(0))  # REGEX matched 123
34676,"print(m.groups())  # there is only one group in REGEX (\.[0-9]*) will  empy string tgis why it return (None,) "
34677,
34678,"s = ', hello 3.1415926, this is my book'"
34679,"m2 = re.search(pattern, s)  # ', hello 3.1415926, this is my book'"
34680,print(m2.string)    # abc123d
34681,print(m2.group(0))  # REGEX matched 3.1415926
34682,print(m2.groups())  # the captured group has captured this part '.1415926'
34683,findall
34684,REGEX
34685,findall
34686,import re
34687,"s = r'abc123d , hello 3.1415926, this is my book'"
34688,pattern = r'-?[0-9]+(\.[0-9]*)?|-?\.[0-9]+'
34689,"m = re.findall(pattern, s)"
34690,"print(m)  # ['', '.1415926']"
34691,element
34692,'123'
34693,''
34694,element
34695,'3.1415926'
34696,'.1415926'
34697,findall
34698,()
34699,REGEX
34700,(?:)
34701,import re
34702,"s = r'abc123d , hello 3.1415926, this is my book'"
34703,pattern = r'-?[0-9]+(?:\.[0-9]*)?|-?\.[0-9]+'
34704,"m = re.findall(pattern, s)"
34705,"print(m)  # ['123', '3.1415926']"
34706,permutations([])
34707,[]
34708,
34709,permutations([1])
34710,[1]
34711,
34712,"permutations([1, 2])"
34713,"[1, 2]"
34714,"[2, 1]"
34715,
34716,"permutations([1, 2, 3])"
34717,"[1, 2, 3]"
34718,"[1, 3, 2]"
34719,"[2, 1, 3]"
34720,"[2, 3, 1]"
34721,"[3, 1, 2]"
34722,"[3, 2, 1]"
34723,itertools.permutations
34724,import itertools
34725,"list(itertools.permutations([1, 2, 3]))"
34726,itertools.permutations
34727,def permutations(elements):
34728,    if len(elements) <= 1:
34729,        yield elements
34730,        return
34731,    for perm in permutations(elements[1:]):
34732,        for i in range(len(elements)):
34733,            # nb elements[0:1] works in both string and list contexts
34734,            yield perm[:i] + elements[0:1] + perm[i:]
34735,itertools.permutations
34736,"def permutations(iterable, r=None):"
34737,"    # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC"
34738,    # permutations(range(3)) --> 012 021 102 120 201 210
34739,    pool = tuple(iterable)
34740,    n = len(pool)
34741,    r = n if r is None else r
34742,    if r > n:
34743,        return
34744,    indices = range(n)
34745,"    cycles = range(n, n-r, -1)"
34746,    yield tuple(pool[i] for i in indices[:r])
34747,    while n:
34748,        for i in reversed(range(r)):
34749,            cycles[i] -= 1
34750,            if cycles[i] == 0:
34751,                indices[i:] = indices[i+1:] + indices[i:i+1]
34752,                cycles[i] = n - i
34753,            else:
34754,                j = cycles[i]
34755,"                indices[i], indices[-j] = indices[-j], indices[i]"
34756,                yield tuple(pool[i] for i in indices[:r])
34757,                break
34758,        else:
34759,            return
34760,itertools.product
34761,"def permutations(iterable, r=None):"
34762,    pool = tuple(iterable)
34763,    n = len(pool)
34764,    r = n if r is None else r
34765,"    for indices in product(range(n), repeat=r):"
34766,        if len(set(indices)) == r:
34767,            yield tuple(pool[i] for i in indices)
34768,for i in range(len(elements))
34769,for i in range(len(elements)+1)
34770,elements[0:1]
34771,len(elements)
34772,len(elements)+1
34773,import itertools
34774,"itertools.permutations([1, 2, 3])"
34775,list(permutations(xs))
34776,r
34777,"itertools.permutations([1,2,3], r=2)"
34778,"[(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]"
34779,itertools
34780,import itertools
34781,"print(list(itertools.permutations([1,2,3,4], 2)))"
34782,"[(1, 2), (1, 3), (1, 4),"
34783,"(2, 1), (2, 3), (2, 4),"
34784,"(3, 1), (3, 2), (3, 4),"
34785,"(4, 1), (4, 2), (4, 3)]"
34786,"print(list(itertools.combinations('123', 2)))"
34787,"[('1', '2'), ('1', '3'), ('2', '3')]"
34788,"print(list(itertools.product([1,2,3], [4,5,6])))"
34789,"[(1, 4), (1, 5), (1, 6),"
34790,"(2, 4), (2, 5), (2, 6),"
34791,"(3, 4), (3, 5), (3, 6)]"
34792,"print(list(itertools.product([1,2], repeat=3)))"
34793,"[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),"
34794,"(2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]"
34795,"def permutations(head, tail=''):"
34796,    if len(head) == 0:
34797,        print(tail)
34798,    else:
34799,        for i in range(len(head)):
34800,"            permutations(head[:i] + head[i+1:], tail + head[i])"
34801,permutations('abc')
34802,perms=[]
34803,print
34804,return perms
34805,#!/usr/bin/env python
34806,
34807,"def perm(a, k=0):"
34808,   if k == len(a):
34809,      print a
34810,   else:
34811,"      for i in xrange(k, len(a)):"
34812,"         a[k], a[i] = a[i] ,a[k]"
34813,"         perm(a, k+1)"
34814,"         a[k], a[i] = a[i], a[k]"
34815,
34816,"perm([1,2,3])"
34817,"[1, 2, 3]"
34818,"[1, 3, 2]"
34819,"[2, 1, 3]"
34820,"[2, 3, 1]"
34821,"[3, 2, 1]"
34822,"[3, 1, 2]"
34823,"perm(list(""ball""))"
34824,"perm(""ball"")"
34825,def permutations (orig_list):
34826,"    if not isinstance(orig_list, list):"
34827,        orig_list = list(orig_list)
34828,
34829,    yield orig_list
34830,
34831,    if len(orig_list) == 1:
34832,        return
34833,
34834,    for n in sorted(orig_list):
34835,        new_list = orig_list[:]
34836,        pos = new_list.index(n)
34837,        del(new_list[pos])
34838,"        new_list.insert(0, n)"
34839,        for resto in permutations(new_list[1:]):
34840,            if new_list[:1] + resto <> orig_list:
34841,                yield new_list[:1] + resto
34842,"def addperm(x,l):"
34843,    return [ l[0:i] + [x] + l[i:]  for i in range(len(l)+1) ]
34844,
34845,def perm(l):
34846,    if len(l) == 0:
34847,        return [[]]
34848,"    return [x for y in perm(l[1:]) for x in addperm(l[0],y) ]"
34849,
34850,print perm([ i for i in range(3)])
34851,"[[0, 1, 2], [1, 0, 2], [1, 2, 0], [0, 2, 1], [2, 0, 1], [2, 1, 0]]"
34852,def permute_in_place(a):
34853,    a.sort()
34854,    yield list(a)
34855,
34856,    if len(a) <= 1:
34857,        return
34858,
34859,    first = 0
34860,    last = len(a)
34861,    while 1:
34862,        i = last - 1
34863,
34864,        while 1:
34865,            i = i - 1
34866,            if a[i] < a[i+1]:
34867,                j = last - 1
34868,                while not (a[i] < a[j]):
34869,                    j = j - 1
34870,"                a[i], a[j] = a[j], a[i] # swap the values"
34871,                r = a[i+1:last]
34872,                r.reverse()
34873,                a[i+1:last] = r
34874,                yield list(a)
34875,                break
34876,            if i == first:
34877,                a.reverse()
34878,                return
34879,
34880,if __name__ == '__main__':
34881,    for n in range(5):
34882,"        for a in permute_in_place(range(1, n+1)):"
34883,            print a
34884,        print
34885,
34886,"    for a in permute_in_place([0, 0, 1, 1, 1]):"
34887,        print a
34888,    print
34889,def permutList(l):
34890,    if not l:
34891,            return [[]]
34892,    res = []
34893,    for e in l:
34894,            temp = l[:]
34895,            temp.remove(e)
34896,            res.extend([[e] + r for r in permutList(temp)])
34897,
34898,    return res
34899,def getPermutations(array):
34900,    if len(array) == 1:
34901,        return [array]
34902,    permutations = []
34903,    for i in range(len(array)): 
34904,        # get all perm's of subarray w/o current item
34905,        perms = getPermutations(array[:i] + array[i+1:])  
34906,        for p in perms:
34907,"            permutations.append([array[i], *p])"
34908,    return permutations
34909,def getPermutations(array):
34910,    if len(array) == 1:
34911,        yield array
34912,    else:
34913,        for i in range(len(array)):
34914,            perms = getPermutations(array[:i] + array[i+1:])
34915,            for p in perms:
34916,"                yield [array[i], *p]"
34917,perms = getPermutations(array[:i] + array[i+1:])
34918,numpy
34919,"getPermutations(np.array([1, 2, 3]))"
34920,array
34921,numba
34922,numpy
34923,"list2Perm = [1, 2.0, 'three']"
34924,"listPerm = [[a, b, c]"
34925,            for a in list2Perm
34926,            for b in list2Perm
34927,            for c in list2Perm
34928,            if ( a != b and b != c and a != c )
34929,            ]
34930,print listPerm
34931,[
34932,"    [1, 2.0, 'three'], "
34933,"    [1, 'three', 2.0], "
34934,"    [2.0, 1, 'three'], "
34935,"    [2.0, 'three', 1], "
34936,"    ['three', 1, 2.0], "
34937,"    ['three', 2.0, 1]"
34938,]
34939,from math import factorial
34940,def permutations(l):
34941,    permutations=[]
34942,    length=len(l)
34943,    for x in xrange(factorial(length)):
34944,        available=list(l)
34945,        newPermutation=[]
34946,"        for radix in xrange(length, 0, -1):"
34947,            placeValue=factorial(radix-1)
34948,            index=x/placeValue
34949,            newPermutation.append(available.pop(index))
34950,            x-=index*placeValue
34951,        permutations.append(newPermutation)
34952,    return permutations
34953,
34954,permutations(range(3))
34955,"[[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]]"
34956,n factorial
34957,n
34958,global result
34959,result = [] 
34960,
34961,def permutation(li):
34962,if li == [] or li == None:
34963,    return
34964,
34965,if len(li) == 1:
34966,    result.append(li[0])
34967,    print result
34968,    result.pop()
34969,    return
34970,
34971,"for i in range(0,len(li)):"
34972,    result.append(li[i])
34973,    permutation(li[:i] + li[i+1:])
34974,    result.pop()    
34975,"permutation([1,2,3])"
34976,"[1, 2, 3]"
34977,"[1, 3, 2]"
34978,"[2, 1, 3]"
34979,"[2, 3, 1]"
34980,"[3, 1, 2]"
34981,"[3, 2, 1]"
34982,def all_perms(elements):
34983,    if len(elements) <= 1:
34984,        yield elements  # Only permutation possible = no permutation
34985,    else:
34986,        # Iteration over the first element in the result permutation:
34987,"        for (index, first_elmt) in enumerate(elements):"
34988,            other_elmts = elements[:index]+elements[index+1:]
34989,            for permutation in all_perms(other_elmts): 
34990,                yield [first_elmt] + permutation
34991,len(elements) <= 1
34992,0
34993,yield
34994,def permutation(list):
34995,    if len(list) == 0:
34996,        return [[]]
34997,    else:
34998,"        return [[x] + ys for x in list for ys in permutation(delete(list, x))]"
34999,
35000,"def delete(list, item):"
35001,    lc = list[:]
35002,    lc.remove(item)
35003,    return lc
35004,"from numpy import empty, uint8"
35005,from math import factorial
35006,
35007,def perms(n):
35008,    f = 1
35009,"    p = empty((2*n-1, factorial(n)), uint8)"
35010,    for i in range(n):
35011,"        p[i, :f] = i"
35012,"        p[i+1:2*i+1, :f] = p[:i, :f]  # constitution de blocs"
35013,        for j in range(i):
35014,"            p[:i+1, f*(j+1):f*(j+2)] = p[j+1:j+i+2, :f]  # copie de blocs"
35015,        f = f*(i+1)
35016,"    return p[:n, :]"
35017,list(itertools.permutations(range(n))
35018,In [1]: %timeit -n10 list(permutations(range(10)))
35019,"10 loops, best of 3: 815 ms per loop"
35020,
35021,In [2]: %timeit -n100 perms(10) 
35022,"100 loops, best of 3: 40 ms per loop"
35023,import itertools
35024,"list(itertools.permutations([1, 2, 3]))"
35025,from collections.abc import Iterable
35026,
35027,
35028,def permute(iterable: Iterable[str]) -> set[str]:
35029,    perms = set()
35030,
35031,    if len(iterable) == 1:
35032,        return {*iterable}
35033,
35034,"    for index, char in enumerate(iterable):"
35035,        perms.update([char + perm for perm in permute(iterable[:index] + iterable[index + 1:])])
35036,
35037,    return perms
35038,
35039,
35040,if __name__ == '__main__':
35041,    print(permute('abc'))
35042,"    # {'bca', 'abc', 'cab', 'acb', 'cba', 'bac'}"
35043,"    print(permute(['1', '2', '3']))"
35044,"    # {'123', '312', '132', '321', '213', '231'}"
35045,import trotter
35046,
35047,"my_permutations = trotter.Permutations(3, [1, 2, 3])"
35048,
35049,print(my_permutations)
35050,
35051,for p in my_permutations:
35052,    print(p)
35053,def permutation(input):
35054,    if len(input) == 1:
35055,"        return input if isinstance(input, list) else [input]"
35056,
35057,    result = []
35058,    for i in range(len(input)):
35059,        first = input[i]
35060,        rest = input[:i] + input[i + 1:]
35061,        rest_permutation = permutation(rest)
35062,        for p in rest_permutation:
35063,            result.append(first + p)
35064,    return result
35065,print(permutation('abcd'))
35066,"print(permutation(['a', 'b', 'c', 'd']))"
35067,"[1, 2, 3]"
35068,"[6, 6, 6, 6, 6, 6]"
35069,"print(permutation(['1','2','3']))"
35070,from __future__ import print_function
35071,
35072,def perm(n):
35073,    p = []
35074,"    for i in range(0,n+1):"
35075,        p.append(i)
35076,    while True:
35077,"        for i in range(1,n+1):"
35078,"            print(p[i], end=' ')"
35079,"        print("""")"
35080,        i = n - 1
35081,        found = 0
35082,        while (not found and i>0):
35083,            if p[i]<p[i+1]:
35084,                found = 1
35085,            else:
35086,                i = i - 1
35087,        k = n
35088,        while p[i]>p[k]:
35089,            k = k - 1
35090,        aux = p[i]
35091,        p[i] = p[k]
35092,        p[k] = aux
35093,"        for j in range(1,(n-i)/2+1):"
35094,            aux = p[i+j]
35095,            p[i+j] = p[n-j+1]
35096,            p[n-j+1] = aux
35097,        if not found:
35098,            break
35099,
35100,perm(5)
35101,"def permute(xs, low=0):"
35102,    if low + 1 >= len(xs):
35103,        yield xs
35104,    else:
35105,"        for p in permute(xs, low + 1):"
35106,            yield p        
35107,"        for i in range(low + 1, len(xs)):        "
35108,"            xs[low], xs[i] = xs[i], xs[low]"
35109,"            for p in permute(xs, low + 1):"
35110,                yield p        
35111,"            xs[low], xs[i] = xs[i], xs[low]"
35112,
35113,"for p in permute([1, 2, 3, 4]):"
35114,    print p
35115,>>> import copy
35116,">>> def perm(prefix,rest):"
35117,...      for e in rest:
35118,...              new_rest=copy.copy(rest)
35119,...              new_prefix=copy.copy(prefix)
35120,...              new_prefix.append(e)
35121,...              new_rest.remove(e)
35122,...              if len(new_rest) == 0:
35123,...                      print new_prefix + new_rest
35124,...                      continue
35125,"...              perm(new_prefix,new_rest)"
35126,... 
35127,">>> perm([],['a','b','c','d'])"
35128,"['a', 'b', 'c', 'd']"
35129,"['a', 'b', 'd', 'c']"
35130,"['a', 'c', 'b', 'd']"
35131,"['a', 'c', 'd', 'b']"
35132,"['a', 'd', 'b', 'c']"
35133,"['a', 'd', 'c', 'b']"
35134,"['b', 'a', 'c', 'd']"
35135,"['b', 'a', 'd', 'c']"
35136,"['b', 'c', 'a', 'd']"
35137,"['b', 'c', 'd', 'a']"
35138,"['b', 'd', 'a', 'c']"
35139,"['b', 'd', 'c', 'a']"
35140,"['c', 'a', 'b', 'd']"
35141,"['c', 'a', 'd', 'b']"
35142,"['c', 'b', 'a', 'd']"
35143,"['c', 'b', 'd', 'a']"
35144,"['c', 'd', 'a', 'b']"
35145,"['c', 'd', 'b', 'a']"
35146,"['d', 'a', 'b', 'c']"
35147,"['d', 'a', 'c', 'b']"
35148,"['d', 'b', 'a', 'c']"
35149,"['d', 'b', 'c', 'a']"
35150,"['d', 'c', 'a', 'b']"
35151,"['d', 'c', 'b', 'a']"
35152,def permute(items):
35153,    length = len(items)
35154,    def inner(ix=[]):
35155,        do_yield = len(ix) == length - 1
35156,"        for i in range(0, length):"
35157,            if i in ix: #avoid duplicates
35158,                continue
35159,            if do_yield:
35160,                yield tuple([items[y] for y in ix + [i]])
35161,            else:
35162,                for p in inner(ix + [i]):
35163,                    yield p
35164,    return inner()
35165,"for p in permute((1,2,3)):"
35166,    print(p)
35167,
35168,"(1, 2, 3)"
35169,"(1, 3, 2)"
35170,"(2, 1, 3)"
35171,"(2, 3, 1)"
35172,"(3, 1, 2)"
35173,"(3, 2, 1)"
35174,"def pzip(c, seq):"
35175,    result = []
35176,    for item in seq:
35177,        for i in range(len(item)+1):
35178,            result.append(item[i:]+c+item[:i])
35179,    return result
35180,
35181,
35182,def perm(line):
35183,    seq = [c for c in line]
35184,    if len(seq) <=1 :
35185,        return seq
35186,    else:
35187,"        return pzip(seq[0], perm(seq[1:]))"
35188,"def calcperm(arr, size):"
35189,    result = set([()])
35190,    for dummy_idx in range(size):
35191,        temp = set()
35192,        for dummy_lst in result:
35193,            for dummy_outcome in arr:
35194,                if dummy_outcome not in dummy_lst:
35195,                    new_seq = list(dummy_lst)
35196,                    new_seq.append(dummy_outcome)
35197,                    temp.add(tuple(new_seq))
35198,        result = temp
35199,    return result
35200,"lst = [1, 2, 3, 4]"
35201,"#lst = [""yellow"", ""magenta"", ""white"", ""blue""]"
35202,seq = 2
35203,"final = calcperm(lst, seq)"
35204,print(len(final))
35205,print(final)
35206,"def calcperm(arr, size, dupes):"
35207,dupes
35208,"def all_insert(x, e, i=0):"
35209,"    return [x[0:i]+[e]+x[i:]] + all_insert(x,e,i+1) if i<len(x)+1 else []"
35210,
35211,"def for_each(X, e):"
35212,"    return all_insert(X[0], e) + for_each(X[1:],e) if X else []"
35213,
35214,def permute(x):
35215,"    return [x] if len(x) < 2 else for_each( permute(x[1:]) , x[0])"
35216,
35217,
35218,"perms = permute([1,2,3])"
35219,@numba.njit()
35220,"def permutations(A, k):"
35221,    r = [[i for i in range(0)]]
35222,    for i in range(k):
35223,        r = [[a] + b for a in A for b in r if (a in b)==False]
35224,    return r
35225,"permutations([1,2,3],3)"
35226,"[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
35227,"%timeit permutations(np.arange(5),5)"
35228,
35229,"243 µs ± 11.1 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)"
35230,time: 406 ms
35231,
35232,"%timeit list(itertools.permutations(np.arange(5),5))"
35233,"15.9 µs ± 8.61 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
35234,time: 12.9 s
35235,import sympy
35236,from sympy.utilities.iterables import multiset_permutations
35237,"t = [1,2,3]"
35238,p = list(multiset_permutations(t))
35239,print(p)
35240,
35241,"# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
35242,"def permutation(flag, k =1 ):"
35243,    N = len(flag)
35244,"    for i in xrange(0, N):"
35245,        if flag[i] != 0:
35246,            continue
35247,        flag[i] = k 
35248,        if k == N:
35249,            print flag
35250,"        permutation(flag, k+1)"
35251,        flag[i] = 0
35252,
35253,"permutation([0, 0, 0])"
35254,range()
35255,'''
35256,Lexicographic permutation generation
35257,
35258,"consider example array state of [1,5,6,4,3,2] for sorted [1,2,3,4,5,6]"
35259,"after 56432(treat as number) ->nothing larger than 6432(using 6,4,3,2) beginning with 5"
35260,so 6 is next larger and 2345(least using numbers other than 6)
35261,"so [1, 6,2,3,4,5]"
35262,'''
35263,"def hasNextPermutation(array, len):"
35264,    ' Base Condition '
35265,    if(len ==1):
35266,        return False
35267,    '''
35268,    Set j = last-2 and find first j such that a[j] < a[j+1]
35269,    If no such j(j==-1) then we have visited all permutations
35270,    after this step a[j+1]>=..>=a[len-1] and a[j]<a[j+1]
35271,
35272,"    a[j]=5 or j=1, 6>5>4>3>2"
35273,    '''
35274,    j = len -2
35275,    while (j >= 0 and array[j] >= array[j + 1]):
35276,        j= j-1
35277,    if(j==-1):
35278,        return False
35279,"    # print(f""After step 2 for j {j}  {array}"")"
35280,    '''
35281,    decrease l (from n-1 to j) repeatedly until a[j]<a[l]
35282,"    Then swap a[j], a[l]"
35283,    a[l] is the smallest element > a[j] that can follow a[l]...a[j-1] in permutation
35284,    before swap we have a[j+1]>=..>=a[l-1]>=a[l]>a[j]>=a[l+1]>=..>=a[len-1]
35285,    after swap -> a[j+1]>=..>=a[l-1]>=a[j]>a[l]>=a[l+1]>=..>=a[len-1]
35286,
35287,"    a[l]=6 or l=2, j=1 just before swap [1, 5, 6, 4, 3, 2] "
35288,"    after swap [1, 6, 5, 4, 3, 2] a[l]=5, a[j]=6"
35289,    '''
35290,    l = len -1
35291,    while(array[j] >= array[l]):
35292,        l = l-1
35293,"    # print(f""After step 3 for l={l}, j={j} before swap {array}"")"
35294,"    array[j], array[l] = array[l], array[j]"
35295,"    # print(f""After step 3 for l={l} j={j} after swap {array}"")"
35296,    '''
35297,    Reverse a[j+1...len-1](both inclusive)
35298,
35299,"    after reversing [1, 6, 2, 3, 4, 5]"
35300,    '''
35301,    array[j+1:len] = reversed(array[j+1:len])
35302,"    # print(f""After step 4 reversing {array}"")"
35303,    return True
35304,
35305,"array = [1,2,4,4,5]"
35306,array.sort()
35307,len = len(array)
35308,count =1
35309,print(array)
35310,'''
35311,The algorithm visits every permutation in lexicographic order
35312,generating one by one
35313,'''
35314,"while(hasNextPermutation(array, len)):"
35315,    print(array)
35316,    count = count +1
35317,"# The number of permutations will be n! if no duplicates are present, else less than that"
35318,"# [1,4,3,3,2] -> 5!/2!=60"
35319,"print(f""Number of permutations: {count}"")"
35320,.destroy()
35321,self
35322,try:
35323,    import tkinter as tk                # python 3
35324,    from tkinter import font as tkfont  # python 3
35325,except ImportError:
35326,    import Tkinter as tk     # python 2
35327,    import tkFont as tkfont  # python 2
35328,
35329,class SampleApp(tk.Tk):
35330,
35331,"    def __init__(self, *args, **kwargs):"
35332,"        tk.Tk.__init__(self, *args, **kwargs)"
35333,
35334,"        self.title_font = tkfont.Font(family='Helvetica', size=18, weight=""bold"", slant=""italic"")"
35335,
35336,        # the container is where we'll stack a bunch of frames
35337,"        # on top of each other, then the one we want visible"
35338,        # will be raised above the others
35339,        container = tk.Frame(self)
35340,"        container.pack(side=""top"", fill=""both"", expand=True)"
35341,"        container.grid_rowconfigure(0, weight=1)"
35342,"        container.grid_columnconfigure(0, weight=1)"
35343,
35344,        self.frames = {}
35345,"        for F in (StartPage, PageOne, PageTwo):"
35346,            page_name = F.__name__
35347,"            frame = F(parent=container, controller=self)"
35348,            self.frames[page_name] = frame
35349,
35350,            # put all of the pages in the same location;
35351,            # the one on the top of the stacking order
35352,            # will be the one that is visible.
35353,"            frame.grid(row=0, column=0, sticky=""nsew"")"
35354,
35355,"        self.show_frame(""StartPage"")"
35356,
35357,"    def show_frame(self, page_name):"
35358,        '''Show a frame for the given page name'''
35359,        frame = self.frames[page_name]
35360,        frame.tkraise()
35361,
35362,
35363,class StartPage(tk.Frame):
35364,
35365,"    def __init__(self, parent, controller):"
35366,"        tk.Frame.__init__(self, parent)"
35367,        self.controller = controller
35368,"        label = tk.Label(self, text=""This is the start page"", font=controller.title_font)"
35369,"        label.pack(side=""top"", fill=""x"", pady=10)"
35370,
35371,"        button1 = tk.Button(self, text=""Go to Page One"","
35372,"                            command=lambda: controller.show_frame(""PageOne""))"
35373,"        button2 = tk.Button(self, text=""Go to Page Two"","
35374,"                            command=lambda: controller.show_frame(""PageTwo""))"
35375,        button1.pack()
35376,        button2.pack()
35377,
35378,
35379,class PageOne(tk.Frame):
35380,
35381,"    def __init__(self, parent, controller):"
35382,"        tk.Frame.__init__(self, parent)"
35383,        self.controller = controller
35384,"        label = tk.Label(self, text=""This is page 1"", font=controller.title_font)"
35385,"        label.pack(side=""top"", fill=""x"", pady=10)"
35386,"        button = tk.Button(self, text=""Go to the start page"","
35387,"                           command=lambda: controller.show_frame(""StartPage""))"
35388,        button.pack()
35389,
35390,
35391,class PageTwo(tk.Frame):
35392,
35393,"    def __init__(self, parent, controller):"
35394,"        tk.Frame.__init__(self, parent)"
35395,        self.controller = controller
35396,"        label = tk.Label(self, text=""This is page 2"", font=controller.title_font)"
35397,"        label.pack(side=""top"", fill=""x"", pady=10)"
35398,"        button = tk.Button(self, text=""Go to the start page"","
35399,"                           command=lambda: controller.show_frame(""StartPage""))"
35400,        button.pack()
35401,
35402,
35403,"if __name__ == ""__main__"":"
35404,    app = SampleApp()
35405,    app.mainloop()
35406,"for F in (StartPage, ...)"
35407,"self.frames[""StartPage""] = StartPage(parent=container, controller=self)"
35408,"self.frames[""PageOne""] = PageOne(parent=container, controller=self)"
35409,"self.frames[""PageTwo""] = PageTwo(parent=container, controller=self)"
35410,
35411,"self.frames[""StartPage""].grid(row=0, column=0, sticky=""nsew"")"
35412,"self.frames[""PageOne""].grid(row=0, column=0, sticky=""nsew"")"
35413,"self.frames[""PageTwo""].grid(row=0, column=0, sticky=""nsew"")"
35414,pack_forget
35415,pack
35416,from tkinter import *
35417,
35418,
35419,def raise_frame(frame):
35420,    frame.tkraise()
35421,
35422,root = Tk()
35423,
35424,f1 = Frame(root)
35425,f2 = Frame(root)
35426,f3 = Frame(root)
35427,f4 = Frame(root)
35428,
35429,"for frame in (f1, f2, f3, f4):"
35430,"    frame.grid(row=0, column=0, sticky='news')"
35431,
35432,"Button(f1, text='Go to frame 2', command=lambda:raise_frame(f2)).pack()"
35433,"Label(f1, text='FRAME 1').pack()"
35434,
35435,"Label(f2, text='FRAME 2').pack()"
35436,"Button(f2, text='Go to frame 3', command=lambda:raise_frame(f3)).pack()"
35437,
35438,"Label(f3, text='FRAME 3').pack(side='left')"
35439,"Button(f3, text='Go to frame 4', command=lambda:raise_frame(f4)).pack(side='left')"
35440,
35441,"Label(f4, text='FRAME 4').pack()"
35442,"Button(f4, text='Goto to frame 1', command=lambda:raise_frame(f1)).pack()"
35443,
35444,raise_frame(f1)
35445,root.mainloop()
35446,tkinter
35447,container
35448,Frame
35449,# Multi-frame tkinter application v2.3
35450,import tkinter as tk
35451,
35452,class SampleApp(tk.Tk):
35453,    def __init__(self):
35454,        tk.Tk.__init__(self)
35455,        self._frame = None
35456,        self.switch_frame(StartPage)
35457,
35458,"    def switch_frame(self, frame_class):"
35459,"        """"""Destroys current frame and replaces it with a new one."""""""
35460,        new_frame = frame_class(self)
35461,        if self._frame is not None:
35462,            self._frame.destroy()
35463,        self._frame = new_frame
35464,        self._frame.pack()
35465,
35466,class StartPage(tk.Frame):
35467,"    def __init__(self, master):"
35468,"        tk.Frame.__init__(self, master)"
35469,"        tk.Label(self, text=""This is the start page"").pack(side=""top"", fill=""x"", pady=10)"
35470,"        tk.Button(self, text=""Open page one"","
35471,                  command=lambda: master.switch_frame(PageOne)).pack()
35472,"        tk.Button(self, text=""Open page two"","
35473,                  command=lambda: master.switch_frame(PageTwo)).pack()
35474,
35475,class PageOne(tk.Frame):
35476,"    def __init__(self, master):"
35477,"        tk.Frame.__init__(self, master)"
35478,"        tk.Label(self, text=""This is page one"").pack(side=""top"", fill=""x"", pady=10)"
35479,"        tk.Button(self, text=""Return to start page"","
35480,                  command=lambda: master.switch_frame(StartPage)).pack()
35481,
35482,class PageTwo(tk.Frame):
35483,"    def __init__(self, master):"
35484,"        tk.Frame.__init__(self, master)"
35485,"        tk.Label(self, text=""This is page two"").pack(side=""top"", fill=""x"", pady=10)"
35486,"        tk.Button(self, text=""Return to start page"","
35487,                  command=lambda: master.switch_frame(StartPage)).pack()
35488,
35489,"if __name__ == ""__main__"":"
35490,    app = SampleApp()
35491,    app.mainloop()
35492,switch_frame()
35493,Frame
35494,_frame
35495,.pack()
35496,tkinter.Frame
35497,v2.3
35498,
35499,- Pack buttons and labels as they are initialized
35500,
35501,v2.2
35502,
35503,- Initialize `_frame` as `None`.
35504,- Check if `_frame` is `None` before calling `.destroy()`.
35505,
35506,v2.1.1
35507,
35508,- Remove type-hinting for backwards compatibility with Python 3.4.
35509,
35510,v2.1
35511,
35512,- Add type-hinting for `frame_class`.
35513,
35514,v2.0
35515,
35516,- Remove extraneous `container` frame.
35517,    - Application now works with any generic `tkinter.frame` instance.
35518,- Remove `controller` argument from frame classes.
35519,    - Frame switching is now done with `master.switch_frame()`.
35520,
35521,v1.6
35522,
35523,- Check if frame attribute exists before destroying it.
35524,- Use `switch_frame()` to set first frame.
35525,
35526,v1.5
35527,
35528,  - Revert 'Initialize new `_frame` after old `_frame` is destroyed'.
35529,      - Initializing the frame before calling `.destroy()` results
35530,        in a smoother visual transition.
35531,
35532,v1.4
35533,
35534,- Pack frames in `switch_frame()`.
35535,- Initialize new `_frame` after old `_frame` is destroyed.
35536,    - Remove `new_frame` variable.
35537,
35538,v1.3
35539,
35540,- Rename `parent` to `master` for consistency with base `Frame` class.
35541,
35542,v1.2
35543,
35544,- Remove `main()` function.
35545,
35546,v1.1
35547,
35548,- Rename `frame` to `_frame`.
35549,    - Naming implies variable should be private.
35550,- Create new frame before destroying old frame.
35551,
35552,v1.0
35553,
35554,- Initial version.
35555,self
35556,Perl/Tk subsystem
35557,Python
35558,pack_forget
35559,pack
35560,import tkinter as tk
35561,
35562,
35563,class App:
35564,"    def __init__(self, root=None):"
35565,        self.root = root
35566,        self.frame = tk.Frame(self.root)
35567,        self.frame.pack()
35568,"        tk.Label(self.frame, text='Main page').pack()"
35569,"        tk.Button(self.frame, text='Go to Page 1',"
35570,                  command=self.make_page_1).pack()
35571,"        self.page_1 = Page_1(master=self.root, app=self)"
35572,
35573,    def main_page(self):
35574,        self.frame.pack()
35575,
35576,    def make_page_1(self):
35577,        self.frame.pack_forget()
35578,        self.page_1.start_page()
35579,
35580,
35581,class Page_1:
35582,"    def __init__(self, master=None, app=None):"
35583,        self.master = master
35584,        self.app = app
35585,        self.frame = tk.Frame(self.master)
35586,"        tk.Label(self.frame, text='Page 1').pack()"
35587,"        tk.Button(self.frame, text='Go back', command=self.go_back).pack()"
35588,
35589,    def start_page(self):
35590,        self.frame.pack()
35591,
35592,    def go_back(self):
35593,        self.frame.pack_forget()
35594,        self.app.main_page()
35595,
35596,
35597,if __name__ == '__main__':
35598,    root = tk.Tk()
35599,    app = App(root)
35600,    root.mainloop()
35601,import foo
35602,"func_name = ""bar"""
35603,"call(foo, func_name)  # calls foo.bar()"
35604,foo
35605,bar
35606,import foo
35607,"bar = getattr(foo, 'bar')"
35608,result = bar()
35609,getattr
35610,foo
35611,globals()
35612,methodToCall = globals()['bar']
35613,locals()
35614,"locals()[""myfunction""]()"
35615,globals()
35616,"globals()[""myfunction""]()"
35617,module = __import__('foo')
35618,"func = getattr(module, 'bar')"
35619,func()
35620,importlib.import_module
35621,__import__
35622,importlib.import_module
35623,# Get class from globals and create an instance
35624,m = globals()['our_class']()
35625,
35626,# Get the function (from the instance) that we need to call
35627,"func = getattr(m, 'function_name')"
35628,
35629,# Call it
35630,func()
35631,class A:
35632,    def __init__(self):
35633,        pass
35634,
35635,"    def sampleFunc(self, arg):"
35636,        print('you called sampleFunc({})'.format(arg))
35637,
35638,m = globals()['A']()
35639,"func = getattr(m, 'sampleFunc')"
35640,func('sample arg')
35641,
35642,"# Sample, all on one line"
35643,"getattr(globals()['A'](), 'sampleFunc')('sample arg')"
35644,def sampleFunc(arg):
35645,    print('you called sampleFunc({})'.format(arg))
35646,
35647,globals()['sampleFunc']('sample arg')
35648,import importlib
35649,function_string = 'mypackage.mymodule.myfunc'
35650,"mod_name, func_name = function_string.rsplit('.',1)"
35651,mod = importlib.import_module(mod_name)
35652,"func = getattr(mod, func_name)"
35653,result = func()
35654,__import__
35655,functions = {'myfoo': foo.bar}
35656,
35657,mystring = 'myfoo'
35658,if mystring in functions:
35659,    functions[mystring]()
35660,"getattr(locals().get(""foo"") or globals().get(""foo""), ""bar"")()"
35661,getattr(
35662,"    locals().get(""foo"") or "
35663,"    globals().get(""foo"") or"
35664,"    __import__(""foo""), "
35665,"""bar"")()"
35666,"getattr(next((x for x in (f(""foo"") for f in "
35667,"                          [locals().get, globals().get, "
35668,"                           self.__dict__.get, __import__]) "
35669,"              if x)),"
35670,"""bar"")()"
35671,"getattr(next((x for x in (f(""foo"") for f in "
35672,"              ([locals().get, globals().get, self.__dict__.get] +"
35673,               [d.get for d in (list(dd.values()) for dd in 
35674,"                                [locals(),globals(),self.__dict__]"
35675,"                                if isinstance(dd,dict))"
35676,"                if isinstance(d,dict)] + "
35677,               [__import__])) 
35678,"        if x)),"
35679,"""bar"")()"
35680,"myFnName  = ""MyFn"""
35681,"myAppName = ""MyApp"""
35682,app = sys.modules[myAppName]
35683,"fn  = getattr(app,myFnName)"
35684,"handler = getattr(sys.modules[__name__], myFnName)"
35685,def say_hello(name):
35686,    print 'Hello {}!'.format(name)
35687,
35688,# get the function by name
35689,method_name = 'say_hello'
35690,method = eval(method_name)
35691,
35692,# call it like a regular function later
35693,args = ['friend']
35694,kwargs = {}
35695,"method(*args, **kwargs)"
35696,eval
35697,"getattr(__module__, method_name)"
35698,class MyClass:
35699,"    def __init__(self, i):"
35700,        self.i = i
35701,
35702,    def get(self):
35703,"        func = getattr(MyClass, 'function{}'.format(self.i))"
35704,"        func(self, 12)   # This one will work"
35705,        # self.func(12)    # But this does NOT work.
35706,
35707,
35708,"    def function1(self, p1):"
35709,        print('function1: {}'.format(p1))
35710,        # do other stuff
35711,
35712,"    def function2(self, p1):"
35713,        print('function2: {}'.format(p1))
35714,        # do other stuff
35715,
35716,
35717,"if __name__ == ""__main__"":"
35718,    class1 = MyClass(1)
35719,    class1.get()
35720,    class2 = MyClass(2)
35721,    class2.get()
35722,<object>.__getattribute__(<string name>)(<params>)
35723,self.__getattribute__('title')
35724,self.title
35725,self.__getattribute__('title')
35726,"func = getattr(self, 'title'); func();"
35727,getattr()
35728,getattr
35729,x = eval('foo.bar')()
35730,"# import module, call module function, pass parameters and print retured value with eval():"
35731,import random
35732,bar = 'random.randint'
35733,"randint = eval(bar)(0,100)"
35734,print(randint) # will print random int from <0;100)
35735,
35736,# also class method returning (or not) value(s) can be used with eval: 
35737,class Say:
35738,    def say(something='nothing'):
35739,        return something
35740,
35741,bar = 'Say.say'
35742,print(eval(bar)('nice to meet you too')) # will print 'nice to meet you' 
35743,# try/except block can be used to catch both errors
35744,try:
35745,    eval('Say.talk')() # raises AttributeError because function does not exist
35746,    eval('Says.say')() # raises NameError because the class does not exist
35747,    # or the same with getattr:
35748,"    getattr(Say, 'talk')() # raises AttributeError"
35749,"    getattr(Says, 'say')() # raises NameError"
35750,except AttributeError:
35751,    # do domething or just...
35752,    print('Function does not exist')
35753,except NameError:
35754,    # do domething or just...
35755,    print('Module does not exist')
35756,__getattribute__
35757,func_name = 'reverse'
35758,
35759,"l = [1, 2, 3, 4]"
35760,print(l)
35761,">> [1, 2, 3, 4]"
35762,
35763,l.__getattribute__(func_name)()
35764,print(l)
35765,">> [4, 3, 2, 1]"
35766,"getattr(obj, attr)"
35767,operator.attrgetter
35768,>>> from operator import attrgetter
35769,">>> l = [1, 2, 3]"
35770,>>> attrgetter('reverse')(l)()
35771,>>> l
35772,"[3, 2, 1]"
35773,>>> 
35774,getattr
35775,"super(self.__class__, self)"
35776,class Base:
35777,    def call_base(func):
35778,"        """"""This does not work"""""""
35779,"        def new_func(self, *args, **kwargs):"
35780,            name = func.__name__
35781,"            getattr(super(self.__class__, self), name)(*args, **kwargs)"
35782,        return new_func
35783,
35784,"    def f(self, *args):"
35785,"        print(f""BASE method invoked."")"
35786,
35787,"    def g(self, *args):"
35788,"        print(f""BASE method invoked."")"
35789,
35790,class Inherit(Base):
35791,    @Base.call_base
35792,"    def f(self, *args):"
35793,"        """"""function body will be ignored by the decorator."""""""
35794,        pass
35795,
35796,    @Base.call_base
35797,"    def g(self, *args):"
35798,"        """"""function body will be ignored by the decorator."""""""
35799,        pass
35800,
35801,"Inherit().f() # The goal is to print ""BASE method invoked."""
35802,eval()
35803,ast.literal_eval()
35804,"""foo.bar"""
35805,x
35806,x()
35807,"str_to_convert = ""foo.bar"""
35808,"exec(f""x = {str_to_convert}"")"
35809,x()
35810,foo
35811,.
35812,{}
35813,"str_to_convert = ""bar"""
35814,"exec(f""x = foo.{str_to_convert}"")"
35815,x()
35816,eval()
35817,exec()
35818,eval()
35819,exec()
35820,eval()
35821,exec()
35822,eval()
35823,exec()
35824,x = eval(str_to_convert)
35825,import foo
35826,method = foo.bar
35827,executed = method(parameter)
35828,"""bar"""
35829,clear
35830,cls
35831,"eval(""os.system(\""clear\"")"")"
35832,"exec(""os.system(\""clear\"")"")"
35833,C:\My_Projects
35834,PYTHONPATH
35835,C:\My_Projects\;
35836,Path
35837,My Computer > Properties > Advanced System Settings > Environment Variables
35838,site
35839,My Computer > Properties > Advanced System Settings > Environment Variables >
35840,PythonPath
35841,C:\Python27\Lib;C:\Python27\DLLs;C:\Python27\Lib\lib-tk;C:\other-folders-on-the-path
35842,C:\Python27
35843,C:\Python27\Lib;C:\Python27\DLLs;C:\Python27\Lib\lib-tk
35844,PYTHONPATH
35845,PATH
35846,site-packages
35847,site-packages
35848,PYTHONPATH
35849,>python [whatever version you are using]
35850,%PY_HOME%;%PY_HOME%\Lib;%PY_HOME%\DLLs;%PY_HOME%\Lib\lib-tk;
35851,%PY_HOME%\Scripts
35852,set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
35853,autoexec.bat
35854,set path=%PATH%;%PYTHONPATH%;
35855,PATH
35856,sys.path
35857,PYTHONPATH
35858,import sys
35859,"if ""C:\\My_Python_Lib"" not in sys.path:"
35860,"    sys.path.append(""C:\\My_Python_Lib"")"
35861,sys.path
35862,sys.path
35863,PYTHONPATH
35864,.pth
35865,PY_HOME
35866,C:\Python27
35867,PYTHONPATH
35868,%PY_HOME%\Lib;%PY_HOME%\DLLs;%PY_HOME%\Lib\lib-tk;C:\another-library
35869,path
35870,%PY_HOME%;%PY_HOME%\Scripts\
35871,.pth
35872,c:\PythonX.X
35873,\site-packages folder
35874,sys.path
35875,set PYTHONPATH=list;of;paths
35876,$env:PYTHONPATH=’list;of;paths’
35877,import sys
35878,"sys.path.append(""path/to/Modules"")"
35879,print sys.path
35880,site
35881,>>> import site
35882,>>> site.USER_SITE
35883,'C:\\Users\\ojdo\\AppData\\Roaming\\Python\\Python37\\site-packages'
35884,...
35885,python -m site --user-site
35886,...
35887,>>> import os
35888,>>> os.makedirs(site.USER_SITE)
35889,...
35890,makedirs -p $(python -m site --user-site)
35891,sitecustomize.py
35892,FIND_MY_PACKAGES
35893,C:\My_Projects
35894,...
35895,">>> FIND_MY_PACKAGES = """""""
35896,import site
35897,site.addsitedir(r'C:\My_Projects')
35898,""""""""
35899,">>> filename = os.path.join(site.USER_SITE, 'sitecustomize.py')"
35900,">>> with open(filename, 'w') as outfile:"
35901,"...     print(FIND_MY_PACKAGES, file=outfile)"
35902,C:\My_Projects 
35903,sys.path
35904,site
35905,sitecustomize
35906,sitecustomize
35907,site.addsitedir
35908,sys.path
35909,dummypackage.py
35910,import dummypackage
35911,site.USER_SITE_ENABLED
35912,True
35913,;D:\Programming\Python34
35914,PYTHONPATH
35915,ArcPY
35916,PYTHONPATH=C:\arcgis\bin
35917,Python34
35918,EXISTING_LINES;C:\Python34;C:\Python34\Scripts\
35919,IRONPYTHONPATH
35920,\
35921,;
35922,:
35923,PYTHONPATH
35924,.
35925,counter = 0
35926,
35927,def increment():
35928,  counter += 1
35929,
35930,increment()
35931,UnboundLocalError
35932,global
35933,counter += 1
35934,counter
35935,increment()
35936,counter
35937,UnboundLocalError
35938,counter
35939,global
35940,increment()
35941,counter
35942,nonlocal
35943,UnboundLocalError
35944,def foo(): bar = deepcopy({'a':1}); from copy import deepcopy; return bar
35945,from copy import deepcopy; foo()
35946,from copy import deepcopy
35947,counter = 0
35948,
35949,def increment():
35950,  global counter
35951,  counter += 1
35952,
35953,increment()
35954,counter
35955,counter
35956,counter
35957,counter = [0]
35958,
35959,def increment():
35960,  counter[0] += 1
35961,
35962,increment()
35963,print counter[0]  # prints '1'
35964,nonlocal
35965,def incrementer():
35966,    counter = 0
35967,    def increment():
35968,        nonlocal counter
35969,        counter += 1
35970,        return counter
35971,    return increment
35972,
35973,increment = incrementer()
35974,
35975,increment()   # 1
35976,increment()   # 2
35977,UnboundLocalError
35978,itertools.count()
35979,>>> from itertools import count
35980,>>> counter = count(0)
35981,>>> counter
35982,count(0)
35983,>>> next(counter)
35984,0
35985,>>> counter
35986,count(1)
35987,>>> next(counter)
35988,1
35989,>>> counter
35990,count(2)
35991,global
35992,counter
35993,x
35994,>>> x = 1
35995,
35996,>>> def f():
35997,>>>  return x
35998,
35999,>>> f()
36000,1
36001,global counter
36002,counter = 0
36003,
36004,def increment():
36005,  global counter
36006,  counter += 1
36007,
36008,increment()
36009,True
36010,False
36011,True
36012,False
36013,bool(value)
36014,True
36015,value
36016,__nonzero__
36017,__bool__
36018,bool
36019,True
36020,False
36021,if
36022,while
36023,None
36024,False
36025,0
36026,0.0
36027,0j
36028,decimal.Decimal(0)
36029,"fraction.Fraction(0, 1)"
36030,[]
36031,list
36032,{}
36033,dict
36034,()
36035,tuple
36036,set()
36037,set
36038,''
36039,str
36040,b''
36041,bytes
36042,bytearray(b'')
36043,bytearray
36044,memoryview(b'')
36045,memoryview
36046,range
36047,range(0)
36048,obj.__bool__()
36049,False
36050,obj.__len__()
36051,0
36052,obj.__bool__
36053,__bool__
36054,__len__
36055,object.__bool__
36056,timedelta(0)
36057,bytearray()
36058,frozenset()
36059,memoryview(b'')
36060,{}.keys()
36061,{}.items()
36062,{}.values()
36063,if len(my_list) != 0:
36064,"   print(""Not empty!"")"
36065,if my_list:
36066,"   print(""Not empty!"")"
36067,[]
36068,[1]
36069,if my_list
36070,if not my_list
36071,if a:
36072,if []:
36073,bool()
36074,True
36075,False
36076,if
36077,while
36078,Vector2d
36079,False
36080,True
36081,import math
36082,class Vector2d(object):
36083,"    def __init__(self, x, y):"
36084,        self.x = float(x)
36085,        self.y = float(y)
36086,
36087,    def __abs__(self):
36088,"        return math.hypot(self.x, self.y)"
36089,
36090,    def __bool__(self):
36091,        return bool(abs(self))
36092,
36093,"a = Vector2d(0,0)"
36094,print(bool(a))        #False
36095,"b = Vector2d(10,0)    "
36096,print(bool(b))        #True
36097,__bool__
36098,>>> bool([])
36099,False
36100,>>> bool([1])
36101,True
36102,>>> bool('')
36103,False
36104,>>> bool('hello')
36105,True
36106,or
36107,s
36108,if len(s) > 0:
36109,    print(s)
36110,else:
36111,    print('Default value')
36112,print(s or 'Default value')
36113,:=
36114,if len(s) == 0:
36115,    s = 'Default value'
36116,do_something(s)
36117,s or (s := 'Default value')
36118,do_something(s)
36119,do_something(s or (s := 'Default value'))
36120,s = s or 'Default value'
36121,do_something(s)
36122,s =...
36123,if len(s)>0:
36124,    s = s # HERE is an extra useless assignment
36125,else:
36126,"    s = ""Default value"""
36127,False
36128,None
36129,False
36130,__nonzero__()
36131,__len__()
36132,False
36133,True
36134,False
36135,True
36136,if (!id) {}
36137,false
36138,true
36139,true
36140,null;
36141,
36142,NaN;
36143,
36144,0;
36145,
36146,"empty string ("""" or '' or ``);"
36147,
36148,undefined.
36149,!
36150,n1 = !null               // !t returns true
36151,n2 = !NaN              // !f returns true
36152,n3 = !''                 // !f returns true
36153,n4 = !'Cat'              // !t returns false
36154,if (id != null) {}
36155,"list = [1, 2, 3]"
36156,"print(list.append(4))   ## WRONG, print does not work, append() returns None"
36157,
36158,## RIGHT:
36159,list.append(4)
36160,"print(list)  ## [1, 2, 3, 4]"
36161,append
36162,append
36163,None
36164,append
36165,void
36166,None
36167,list.pop
36168,append
36169,append
36170,">>> l = [1,2,3]"
36171,>>> l + [4]
36172,"[1,2,3,4]"
36173,>>> l
36174,"[1,2,3]"
36175,append
36176,"m = l.append(""a"")"
36177,"n = l.append(""b"")"
36178,n
36179,"[1,2,3,""b""]"
36180,None
36181,">>> a_list = [3, 2, 1]"
36182,>>> print a_list.sort()
36183,None
36184,>>> a_list
36185,"[1, 2, 3]"
36186,
36187,>>> a_dict = {}
36188,">>> print a_dict.__setitem__('a', 1)"
36189,None
36190,>>> a_dict
36191,{'a': 1}
36192,
36193,>>> a_set = set()
36194,>>> print a_set.add(1)
36195,None
36196,>>> a_set
36197,set([1])
36198,None
36199,list.sort(
36200,list.sort()
36201,sorted()
36202,"list = [1, 2, 3]"
36203,list
36204,"lst = [1, 2, 3]"
36205,lst.append(4)
36206,"print(lst)  ## [1, 2, 3, 4]"
36207,lst
36208,list.append()
36209,list
36210,list
36211,None
36212,a.append()
36213,a
36214,sorted(some_list)
36215,some_list.sort()
36216,"""x"""
36217,a
36218,">>> a = [1, 2, 3, 4]"
36219,">>> b = a[1:] + [""x""]"
36220,>>> b
36221,"[2, 3, 4, 'x']"
36222,">>> a = [1, 2, 3, 4]"
36223,">>> b = a[1:].append(""x"")"
36224,>>> a
36225,"[1, 2, 3, 4]"
36226,>>> a[1:]
36227,"[2, 3, 4]"
36228,>>> type(b)
36229,<class 'NoneType'>
36230,b
36231,None
36232,list.append()
36233,None
36234,a
36235,a
36236,"a.append(""x"")"
36237,">>> b = a.append(""x"")"
36238,>>> a
36239,"[1, 2, 3, 4, 'x']"
36240,>>> type(b)
36241,<class 'NoneType'>
36242,b
36243,None
36244,a
36245,"friends=[""Rajendra V""]"
36246,"friends.append(""John"")"
36247,print(friends)
36248,for
36249,"xs = [8, 23, 45]"
36250,
36251,for x in xs:
36252,"    print(""item #{} = {}"".format(index, x))"
36253,item #1 = 8
36254,item #2 = 23
36255,item #3 = 45
36256,enumerate()
36257,"for idx, x in enumerate(xs):"
36258,"    print(idx, x)"
36259,for i in range(len(xs)): x = xs[i]
36260,enumerate
36261,enumerate
36262,range
36263,enumerate
36264,tuple
36265,tuple
36266,ssize_t
36267,list
36268,for i in range(5)
36269,for i in range(len(ints))
36270,enumerate
36271,enumerate
36272,"for index, item in enumerate(items):"
36273,"    print(index, item)"
36274,count = 0 # in case items is empty and you need it after the loop
36275,"for count, item in enumerate(items, start=1):"
36276,"    print(count, item)"
36277,index = 0            # Python's indexing starts at zero
36278,"for item in items:   # Python's for loops are a ""for each"" loop "
36279,"    print(index, item)"
36280,    index += 1
36281,index = 0
36282,while index < len(items):
36283,"    print(index, items[index])"
36284,    index += 1
36285,for index in range(len(items)):
36286,"    print(index, items[index])"
36287,enumerate
36288,enumerate
36289,"for index, item in enumerate(items, start=0):   # default is zero"
36290,"    print(index, item)"
36291,1
36292,count = 0 # in case items is empty
36293,"for count, item in enumerate(items, start=1):   # default is zero"
36294,    print(item)
36295,
36296,print('there were {0} items printed'.format(count))
36297,"items = ['a', 'b', 'c', 'd', 'e']"
36298,enumerate_object = enumerate(items) # the enumerate object
36299,next
36300,iteration = next(enumerate_object) # first iteration from enumerate
36301,print(iteration)
36302,0
36303,'a'
36304,"(0, 'a')"
36305,"index, item = iteration"
36306,"#   0,  'a' = (0, 'a') # essentially this."
36307,index
36308,item
36309,'a'
36310,>>> print(index)
36311,0
36312,>>> print(item)
36313,a
36314,"for index, item in enumerate(items, start=0):   # Python indexes start at zero"
36315,"    print(index, item)"
36316,items
36317,count = 0
36318,count
36319,1
36320,0
36321,"for index, item in enumerate(iterable, start=1):"
36322,"   print index, item  # Used to print in python<3.x"
36323,"   print(index, item) # Migrate to print() after 3.x+"
36324,   
36325,"index, item"
36326,index
36327,"for index, item in enumerate(ints)"
36328,index
36329,(index)
36330,print
36331,from __future__ import print_function
36332,print
36333,print
36334,"print(index, item)"
36335,index
36336,tuple
36337,for i in range(len(ints)):
36338,"   print(i, ints[i]) # print updated to print() in Python 3.x+ "
36339,xrange
36340,enumerate
36341,i
36342,"lst = [1, 2, 3, 4, 5]"
36343,"for index, element in enumerate(lst):"
36344,    # Do the things that need doing here
36345,for
36346,for index in range(len(lst)):   # or xrange
36347,    # you will have to write extra code to get the element
36348,while
36349,index = 0
36350,while index < len(lst):
36351,    # You will have to write extra code to get the element
36352,    index += 1  # escape infinite recursion
36353,itertools.chain
36354,+=
36355,"items = [8, 23, 45, 12, 78]"
36356,counter = 0
36357,
36358,for value in items:
36359,"    print(counter, value)"
36360,    counter += 1
36361,#    0 8
36362,#    1 23
36363,#    2 45
36364,#    3 12
36365,#    4 78
36366,enumerate()
36367,"items = [8, 23, 45, 12, 78]"
36368,
36369,for i in enumerate(items):
36370,"    print(""index/value"", i)"
36371,"#    index/value (0, 8)"
36372,"#    index/value (1, 23)"
36373,"#    index/value (2, 45)"
36374,"#    index/value (3, 12)"
36375,"#    index/value (4, 78)"
36376,index
36377,value
36378,"items = [8, 23, 45, 12, 78]"
36379,
36380,"for index, value in enumerate(items):"
36381,"    print(""index"", index, ""for value"", value)"
36382,#    index 0 for value 8
36383,#    index 1 for value 23
36384,#    index 2 for value 45
36385,#    index 3 for value 12
36386,#    index 4 for value 78
36387,index
36388,"items = [8, 23, 45, 12, 78]"
36389,
36390,"for i, value in enumerate(items, start=1000):"
36391,"    print(i, value)"
36392,#    1000 8
36393,#    1001 23
36394,#    1002 45
36395,#    1003 12
36396,#    1004 78
36397,range(len(...))
36398,"items = [8, 23, 45, 12, 78]"
36399,
36400,for i in range(len(items)):
36401,"    print(""Index:"", i, ""Value:"", items[i])"
36402,"#    ('Index:', 0, 'Value:', 8)"
36403,"#    ('Index:', 1, 'Value:', 23)"
36404,"#    ('Index:', 2, 'Value:', 45)"
36405,"#    ('Index:', 3, 'Value:', 12)"
36406,"#    ('Index:', 4, 'Value:', 78)"
36407,"items = [8, 23, 45, 12, 78]"
36408,
36409,"def enum(items, start=0):"
36410,    counter = start
36411,
36412,    for value in items:
36413,"        print(counter, value)"
36414,        counter += 1
36415,    
36416,enum(items)
36417,#    0 8
36418,#    1 23
36419,#    2 45
36420,#    3 12
36421,#    4 78
36422,while
36423,"items = [8, 23, 45, 12, 78]"
36424,counter = 0
36425,
36426,while counter < len(items):
36427,"    print(counter, items[counter])"
36428,    counter += 1
36429,#    0 8
36430,#    1 23
36431,#    2 45
36432,#    3 12
36433,#    4 78
36434,yield
36435,def createGenerator():        
36436,"    items = [8, 23, 45, 12, 78]"
36437,
36438,"    for (j, k) in enumerate(items):"
36439,"        yield (j, k)"
36440,        
36441,
36442,generator = createGenerator()
36443,
36444,for i in generator:
36445,    print(i)
36446,"#    (0, 8)"
36447,"#    (1, 23)"
36448,"#    (2, 45)"
36449,"#    (3, 12)"
36450,"#    (4, 78)"
36451,lambda
36452,"items = [8, 23, 45, 12, 78]"
36453,
36454,"xerox = lambda upperBound: [(i, items[i]) for i in range(0, upperBound)]"
36455,print(xerox(5))
36456,"#    [(0, 8), (1, 23), (2, 45), (3, 12), (4, 78)]"
36457,# Using range
36458,def range_loop(iterable):
36459,    for i in range(len(iterable)):
36460,        1 + iterable[i]
36461,
36462,# Using enumerate
36463,def enumerate_loop(iterable):
36464,"    for i, val in enumerate(iterable):"
36465,        1 + val
36466,
36467,# Manual indexing
36468,def manual_indexing_loop(iterable):
36469,    index = 0
36470,    for item in iterable:
36471,        1 + item
36472,        index += 1
36473,from timeit import timeit
36474,
36475,"def measure(l, number=10000):"
36476,"    print(""Measure speed for list with %d items"" % len(l))"
36477,"    print(""range: "", timeit(lambda :range_loop(l), number=number))"
36478,"    print(""enumerate: "", timeit(lambda :enumerate_loop(l), number=number))"
36479,"    print(""manual_indexing: "", timeit(lambda :manual_indexing_loop(l), number=number))"
36480,
36481,# Measure speed for list with 1000 items
36482,measure(range(1000))
36483,# range:  1.161622366
36484,# enumerate:  0.5661940879999996
36485,# manual_indexing:  0.610455682
36486,
36487,# Measure speed for list with 100000 items
36488,measure(range(10000))
36489,# range:  11.794482958
36490,# enumerate:  6.197628574000001
36491,# manual_indexing:  6.935181098000001
36492,
36493,# Measure speed for list with 10000000 items
36494,"measure(range(10000000), number=100)"
36495,# range:  121.416859069
36496,# enumerate:  62.718909123
36497,# manual_indexing:  69.59575057400002
36498,enumerate
36499,for ix in range(len(ints)):
36500,    print(ints[ix])
36501,"[ (ix, ints[ix]) for ix in range(len(ints))]"
36502,
36503,>>> ints
36504,"[1, 2, 3, 4, 5]"
36505,>>> for ix in range(len(ints)): print ints[ix]
36506,... 
36507,1
36508,2
36509,3
36510,4
36511,5
36512,">>> [ (ix, ints[ix]) for ix in range(len(ints))]"
36513,"[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]"
36514,">>> lc = [ (ix, ints[ix]) for ix in range(len(ints))]"
36515,>>> for tup in lc:
36516,...     print(tup)
36517,... 
36518,"(0, 1)"
36519,"(1, 2)"
36520,"(2, 3)"
36521,"(3, 4)"
36522,"(4, 5)"
36523,>>> 
36524,enumerate
36525,"a=[4,5,6,8]"
36526,"for b, val in enumerate(a):"
36527,"    print('item #{} = {}'.format(b+1, val))"
36528,"for x in range(0, 5):"
36529,list[index]
36530,"ints = [8, 23, 45, 12, 78]"
36531,index = 0
36532,
36533,for value in (ints):
36534,    index +=1
36535,"    print index, value"
36536,"ints = [8, 23, 45, 12, 78]"
36537,index = 0
36538,
36539,for value in (ints):
36540,    index +=1
36541,"    print index, value"
36542,    if index >= len(ints)-1:
36543,        index = 0
36544,range
36545,for i in range(len(sequence)):
36546,    # Work with index i
36547,zip
36548,for i in range(len(sequence)):
36549,    e = sequence[i]
36550,    # Work with index i and element e
36551,"for i, e in zip(range(len(sequence)), sequence):"
36552,    # Work with index i and element e
36553,enumerate
36554,"alist = [1, 2, 3, 4, 5]"
36555,
36556,"for n, a in enumerate(alist):"
36557,"    print(""%d %d"" % (n, a))"
36558,0 1
36559,1 2
36560,2 3
36561,3 4
36562,4 5
36563,"for n, a in enumerate(alist[1:-1]):"
36564,"    print(""%d %d"" % (n, a))"
36565,0 2
36566,1 3
36567,2 4
36568,start=n
36569,enumerate()
36570,"for n, a in enumerate(alist, start=1):"
36571,"    print(""%d %d"" % (n, a))"
36572,1 1
36573,2 2
36574,3 3
36575,4 4
36576,5 5
36577,"nums = [1, 2, 3, 4, 5]"
36578,"for i, num in enumerate(nums, start=1):"
36579,"    print(i, num)"
36580,l = len(nums)
36581,for i in range(l):
36582,"    print(i+1, nums[i])"
36583,for i in ints:
36584,    indx = ints.index(i)
36585,"    print(i, indx)"
36586,enumerate
36587,"data = ['itemA.ABC', 'itemB.defg', 'itemC.drug', 'itemD.ashok']"
36588,x = []
36589,"for (i, item) in enumerate(data):"
36590,"      a = (i, str(item).split('.'))"
36591,      x.append(a)
36592,"for index, value in x:"
36593,"     print(index, value)"
36594,"0 ['itemA', 'ABC']"
36595,"1 ['itemB', 'defg']"
36596,"2 ['itemC', 'drug']"
36597,"3 ['itemD', 'ashok']"
36598,index
36599,"ints = [8, 23, 45, 12, 78]"
36600,inds = [ints.index(i) for i in ints]
36601,ints
36602,ints
36603,"ints = [8, 8, 8, 23, 45, 12, 78]"
36604,inds = [tup[0] for tup in enumerate(ints)]
36605,"ints = [8, 8, 8, 23, 45, 12, 78]"
36606,inds = [tup for tup in enumerate(ints)]
36607,ints
36608,enumerate
36609,"arr = [8, 23, 45, 12, 78]"
36610,i = 0
36611,while i < len(arr):
36612,"    print(""Item "", i + 1, "" = "", arr[i])"
36613,    i += 1
36614,Item  1  =  8
36615,Item  2  =  23
36616,Item  3  =  45
36617,Item  4  =  12
36618,Item  5  =  78
36619,count
36620,"ints = [8, 23, 45, 12, 78]"
36621,count = 0
36622,for i in ints:
36623,    count = count + 1
36624,"    print('item #{} = {}'.format(count, i))"
36625,"ints = [8, 23, 45, 12, 78]"
36626,"print [(i,ints[i]) for i in range(len(ints))]"
36627,"[(0, 8), (1, 23), (2, 45), (3, 12), (4, 78)]"
36628,range(len(some_list))
36629,"xs = [8, 23, 45]"
36630,for i in range(len(xs)):
36631,"    print(""item #{} = {}"".format(i + 1, xs[i]))"
36632,enumerate
36633,"xs = [8, 23, 45]"
36634,"for idx, val in enumerate(xs, start=1):"
36635,"    print(""item #{} = {}"".format(idx, val))"
36636,"xs = [8, 23, 45]"
36637,"for x, n in zip(xs, range(1, len(xs)+1)):"
36638,"    print(""item #{} = {}"".format(n, x))"
36639,Final Output:
36640,item #1 = 8
36641,item #2 = 23
36642,item #3 = 45
36643,"listos = [8, 23, 45, 12, 78]"
36644,counter = 1
36645,for i in listos:
36646,"    print('Item #{} = {}'.format(counter, i))"
36647,    counter += 1
36648,Item #1 = 8
36649,Item #2 = 23
36650,Item #3 = 45
36651,Item #4 = 12
36652,Item #5 = 78
36653,counter += 1
36654,for
36655,for
36656,while
36657,while
36658,for
36659,"list1 = [10, 'sumit', 43.21, 'kumar', '43', 'test', 3]"
36660,for x in list1:
36661,"    print('index:', list1.index(x), 'value:', x)"
36662,index()
36663,x
36664,search()
36665,match()
36666,re
36667,re.match
36668,^
36669,MatchObject
36670,None
36671,search()
36672,re.search
36673,MatchObject
36674,None
36675,match
36676,search
36677,match
36678,search
36679,match
36680,search
36681,match
36682,search
36683,'^'
36684,'^'
36685,MULTILINE
36686,match
36687,pos
36688,# example code:
36689,"string_with_newlines = """"""something"
36690,"someotherthing"""""""
36691,
36692,import re
36693,
36694,"print re.match('some', string_with_newlines) # matches"
36695,"print re.match('someother', "
36696,               string_with_newlines) # won't match
36697,"print re.match('^someother', string_with_newlines, "
36698,               re.MULTILINE) # also won't match
36699,"print re.search('someother', "
36700,                string_with_newlines) # finds something
36701,"print re.search('^someother', string_with_newlines, "
36702,                re.MULTILINE) # also finds something
36703,
36704,"m = re.compile('thing$', re.MULTILINE)"
36705,
36706,print m.match(string_with_newlines) # no match
36707,"print m.match(string_with_newlines, pos=4) # matches"
36708,"print m.search(string_with_newlines, "
36709,               re.MULTILINE) # also matches
36710,match
36711,search
36712,match
36713,match
36714,faster
36715,MULTILINE
36716,match
36717,search
36718,search
36719,match
36720,import random
36721,import re
36722,import string
36723,import time
36724,
36725,LENGTH = 10
36726,LIST_SIZE = 1000000
36727,
36728,def generate_word():
36729,    word = [random.choice(string.ascii_lowercase) for _ in range(LENGTH)]
36730,    word = ''.join(word)
36731,    return word
36732,
36733,wordlist = [generate_word() for _ in range(LIST_SIZE)]
36734,
36735,start = time.time()
36736,"[re.search('python', word) for word in wordlist]"
36737,"print('search:', time.time() - start)"
36738,
36739,start = time.time()
36740,"[re.match('(.*?)python(.*?)', word) for word in wordlist]"
36741,"print('match:', time.time() - start)"
36742,'python'
36743,'(.*?)python(.*?)'
36744,match
36745,search
36746,"re.search('^python', word)"
36747,"re.match('python', word)"
36748,"re.match('^python', word)"
36749,match
36750,match
36751,search
36752,match
36753,match
36754,match
36755,"re.search('python', word)"
36756,re.match('python')
36757,re.match('^python')
36758,match
36759,search
36760,"re.search('^python', word)"
36761,search
36762,match
36763,re.search
36764,re.match
36765,fullmatch
36766,re.match
36767,"a = ""123abc"""
36768,"t = re.match(""[a-z]+"",a)"
36769,"t = re.search(""[a-z]+"",a)"
36770,re.match
36771,none
36772,re.search
36773,abc
36774,re.match()
36775,re.search()
36776,re.match()
36777,re.match('pattern')
36778,re.search('^pattern')
36779,$
36780,re.match()
36781,search
36782,match
36783,">>> a = ""123abc"""
36784,">>> re.match(""[a-z]+"",a)"
36785,None
36786,">>> re.search(""[a-z]+"",a)"
36787,abc
36788,"re.search('test', ' test')      # returns a Truthy match object (because the search starts from any index) "
36789,
36790,"re.match('test', ' test')       # returns None (because the search start from 0 index)"
36791,"re.match('test', 'test')        # returns a Truthy match object (match at 0 index)"
36792,">>> print ""hello World"""
36793,"  File ""<stdin>"", line 1"
36794,"    print ""hello World"""
36795,                      ^
36796,SyntaxError: invalid syntax
36797,from __future__ import print_function
36798,print
36799,"print(""Hello World"")"
36800,print('Hello world!')
36801,print statement
36802,print() function
36803,"print(""Hello World"")"
36804,from __future__ import print_function
36805,"Old: print ""The answer is"", 2*2"
36806,"New: print(""The answer is"", 2*2)"
36807,
36808,"Old: print x,           # Trailing comma suppresses newline"
36809,"New: print(x, end="" "")  # Appends a space instead of a newline"
36810,
36811,Old: print              # Prints a newline
36812,New: print()            # You must call the function!
36813,
36814,"Old: print >>sys.stderr, ""fatal error"""
36815,"New: print(""fatal error"", file=sys.stderr)"
36816,
36817,"Old: print (x, y)       # prints repr((x, y))"
36818,"New: print((x, y))      # Not the same as print(x, y)!"
36819,dict
36820,'foo'
36821,'bar'
36822,hash('foo')
36823,-4177197833195190597
36824,hash('bar')
36825,327024216814240868
36826,>>> hash('foo')
36827,-4177197833195190597
36828,>>> hash('foo') % 8
36829,3
36830,>>> hash('bar')
36831,327024216814240868
36832,>>> hash('bar') % 8
36833,4
36834,">>> {'bar': None, 'foo': None}"
36835,"{'foo': None, 'bar': None}"
36836,'foo'
36837,'bar'
36838,bar
36839,baz
36840,4
36841,>>> hash('bar')
36842,327024216814240868
36843,>>> hash('baz')
36844,327024216814240876
36845,>>> hash('bar') % 8
36846,4
36847,>>> hash('baz') % 8
36848,4
36849,">>> {'baz': None, 'bar': None}"
36850,"{'bar': None, 'baz': None}"
36851,">>> {'bar': None, 'baz': None}"
36852,"{'baz': None, 'bar': None}"
36853,dict
36854,dict
36855,OrderedDict
36856,dict
36857,OrderedDict
36858,oset
36859,__hash__
36860,__eq__
36861,dictobject.c
36862,list(myset) == list(myset)
36863,"# A C array; items may be NULL,"
36864,"# a pointer to an object, or a"
36865,# special dummy object
36866,_ _ 4 _ _ 2 _ _ 6
36867,hash(4) % len(storage) = index 2
36868,hash(n) % len(storage)
36869,hash(m) % len(storage)
36870,6 > ²⁄₃·8
36871,hash(n)
36872,n
36873,-1
36874,"v_set = {88,11,1,33,21,3,7,55,37,8}"
36875,len(v_set)
36876,__ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
36877,hash(88) % 32 = 24
36878,hash(11) % 32 = 11
36879,hash(1)  % 32 = 1
36880,hash(33) % 32 = 1
36881,hash(21) % 32 = 21
36882,hash(3)  % 32 = 3
36883,hash(7)  % 32 = 7
36884,hash(55) % 32 = 23
36885,hash(37) % 32 = 5
36886,hash(8)  % 32 = 8
36887,__  1 __  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __
36888,   33 ← Can't also be where 1 is;
36889,        either 1 or 33 has to move
36890,"{[1 or 33], 3, 37, 7, 8, 11, 21, 55, 88}"
36891,       ↓
36892,__  1 33  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __
36893,       ↓
36894,__ 33  1  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __
36895,"{7,5,11,1,4,13,55,12,2,3,6,20,9,10}"
36896,__ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
36897,__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ __ __ 20 __ __ __ __ __ __ __ __ __ __ __
36898,hash(55) % 32
36899,__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ __ __ 20 __ __ 55 __ __ __ __ __ __ __ __
36900,__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ 50 __ 20 __ __ __ __ __ __ __ __ __ __ __
36901,"{1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 20, 50}"
36902,"#>>> {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 50, 20}"
36903,pop
36904,d.items()
36905,"zip(d.keys(), d.values())"
36906,hashtable.c
36907,key_hash = ht->hash_func(key);
36908,index = key_hash & (ht->num_buckets - 1);
36909,ht->num_buckets - 1
36910,(ht->num_buckets - 1)
36911,set
36912,">>> set([0,1919,2000,3,45,33,333,5])"
36913,"set([0, 33, 3, 5, 45, 333, 2000, 1919])"
36914,33
36915,33 & (ht->num_buckets - 1) = 1
36916,'0b100001' & '0b111'= '0b1' # 1 the index of 33
36917,(ht->num_buckets - 1)
36918,8-1=7
36919,0b111
36920,1919
36921,'0b11101111111' & '0b111' = '0b111' # 7 the index of 1919
36922,333
36923,'0b101001101' & '0b111' = '0b101' # 5 the index of 333
36924,">>> map(hash, (0, 1, 2, 3))"
36925,"  [0, 1, 2, 3]"
36926,">>> map(hash, (""namea"", ""nameb"", ""namec"", ""named""))"
36927,"  [-1658398457, -1658398460, -1658398459, -1658398462]"
36928,[i << 16 for i in range(20000)]
36929,int
36930,class int:
36931,    def __hash__(self):
36932,        value = self
36933,        if value == -1:
36934,            value = -2
36935,        return value
36936,open()
36937,"""a"""
36938,"""w"""
36939,"with open(""test.txt"", ""a"") as myfile:"
36940,"    myfile.write(""appended text"")"
36941,with
36942,close()
36943,"with open(""test.txt"") as myfile: myfile.write(""appended text"",'a')"
36944,">>> with open('test1','wb') as f:"
36945,        f.write('test')
36946,">>> with open('test1','ab') as f:"
36947,        f.write('koko')
36948,">>> with open('test1','rb') as f:"
36949,        f.read()
36950,'testkoko'
36951,">>> f = open('test','a+') # Not using 'with' just to simplify the example REPL session"
36952,>>> f.write('hi')
36953,>>> f.seek(0)
36954,>>> f.read()
36955,'hi'
36956,>>> f.seek(0)
36957,>>> f.write('bye') # Will still append despite the seek(0)!
36958,>>> f.seek(0)
36959,>>> f.read()
36960,'hibye'
36961,fopen
36962,"fseek(stream, 0, SEEK_END);"
36963,with
36964,with
36965,">>> open(""test"",""wb"").write(""test"")"
36966,">>> open(""test"",""a+b"").write(""koko"")"
36967,">>> open(""test"",""rb"").read()"
36968,'testkoko'
36969,"f = open('filename.txt', 'a')"
36970,"f.write(""stuff"")"
36971,f.close()
36972,'w'   write text
36973,'r'   read text
36974,'a'   append text
36975,"f = open('filename.txt', 'a') "
36976,f.write('whatever you want to write here (in append mode) here.')
36977,'r+'  read + write text
36978,'w+'  read + write text
36979,'a+'  append + read text
36980,'rb'  read binary
36981,'wb'  write binary
36982,'ab'  append binary
36983,'rb+' read + write binary
36984,'wb+' read + write binary
36985,'ab+' append + read binary
36986,"""a"""
36987,"with open(""foo"", ""a"") as f:"
36988,"    f.write(""cool beans..."")"
36989,"""a"""
36990,file
36991,file
36992,file
36993,print
36994,write
36995,"with open('test.txt', 'a') as f:"
36996,"    print('appended text', file=f)"
36997,"open(filename, ""a"")"
36998,a
36999,"def FileSave(filename,content):"
37000,"    with open(filename, ""a"") as myfile:"
37001,        myfile.write(content)
37002,
37003,"FileSave(""test.txt"",""test1 \n"")"
37004,"FileSave(""test.txt"",""test2 \n"")"
37005,'a'
37006,with open
37007,"def append(txt='\nFunction Successfully Executed', file):"
37008,"    with open(file, 'a') as f:"
37009,        f.write(txt)
37010,'r+'
37011,import os
37012,
37013,"with open(file, 'r+') as f:"
37014,"    f.seek(0, os.SEEK_END)"
37015,"    f.write(""text to add"")"
37016,'w+'
37017,r+
37018,import os
37019,
37020,"with open('text.txt', 'r+') as f:"
37021,"    f.seek(0, os.SEEK_END)"
37022,"    f.write(""text to add"")"
37023,r+
37024,a
37025,a+
37026,"with open(""test.txt"", ""a"") as myfile:"
37027,"    myfile.write(""append me"")"
37028,myfile
37029,test.txt
37030,Example does not work well with multiple processes: 
37031,
37032,"f = open(""logfile"", ""w""); f.seek(0, os.SEEK_END); f.write(""data to write"");"
37033,
37034,writer1: seek to end of file.           position 1000 (for example)
37035,writer2: seek to end of file.           position 1000
37036,writer2: write data at position 1000    end of file is now 1000 + length of data.
37037,writer1: write data at position 1000    writer1's data overwrites writer2's data.
37038,"f = open(""logfile"", ""a""); f.seek(0, os.SEEK_END); f.write(""data to write"");"
37039,"with open('/path/to/file', 'a+') as file:"
37040,"    file.write(""Additions to file"")"
37041,file.close()
37042,a+
37043,open(...)
37044,file.close()
37045,"shortPath  = ""../file_to_be_appended"""
37046,"short = open(shortPath, 'r')"
37047,
37048,## this counts how many line are originally in the file:
37049,"long_path = ""../file_to_be_appended_to"" "
37050,"long = open(long_path, 'r')"
37051,"for i,l in enumerate(long): "
37052,    pass
37053,"print ""%s has %i lines initially"" %(long_path,i)"
37054,long.close()
37055,
37056,"long = open(long_path, 'a') ## now open long file to append"
37057,l = True ## will be a line
37058,c = 0 ## count the number of lines you write
37059,while l: 
37060,    try: 
37061,"        l = short.next() ## when you run out of lines, this breaks and the except statement is run"
37062,        c += 1
37063,        long.write(l)
37064,
37065,    except: 
37066,        l = None
37067,        long.close()
37068,"        print ""Done!, wrote %s lines"" %c "
37069,
37070,"## finally, count how many lines are left. "
37071,"long = open(long_path, 'r')"
37072,"for i,l in enumerate(long): "
37073,    pass
37074,"print ""%s has %i lines after appending new lines"" %(long_path, i)"
37075,long.close()
37076,a = {}
37077,k = 0
37078,while k < 10:
37079,    # dynamically create key
37080,    key = ...
37081,    # calculate value
37082,    value = ...
37083,    a[key] = value 
37084,    k += 1
37085,collections
37086,a
37087,locals()
37088,globals()
37089,globals()
37090,<dynamically create key> 
37091,locals()
37092,locals()
37093,locals()
37094,exec
37095,globals()
37096,"# By default, a module has some hidden variables defined"
37097,"print({k: v for k, v in globals().items() if not k.startswith(""__"")})"
37098,
37099,"for i in range(1, 11):"
37100,"    globals()[f""my_variable_{i}""] = i"
37101,
37102,print()
37103,print(my_variable_1)
37104,print(my_variable_2)
37105,# and so on
37106,
37107,print()
37108,"print({k: v for k, v in globals().items() if not k.startswith(""__"")})"
37109,{}
37110,
37111,1
37112,2
37113,
37114,"{'i': 10, 'my_variable_1': 1, 'my_variable_2': 2, 'my_variable_3': 3, 'my_variable_4': 4, 'my_variable_5': 5, 'my_variable_6': 6, 'my_variable_7': 7, 'my_variable_8': 8, 'my_variable_9': 9, 'my_variable_10': 10}"
37115,globals()
37116,globals()
37117,exec()
37118,">>> c = {""one"": 1, ""two"": 2}"
37119,">>> for k, v in c.items():"
37120,"...     exec(f""{k} = {v}"")"
37121,... 
37122,>>> one
37123,1
37124,>>> two
37125,2
37126,globals()
37127,setattr()
37128,"""send_me_all_your_private_data()"""
37129,d['constant-key'] = value
37130,>>> class Record(object):
37131,...     pass
37132,...
37133,>>> r = Record()
37134,>>> r.foo = 'oof'
37135,">>> setattr(r, 'bar', 'rab')"
37136,>>> r.foo
37137,'oof'
37138,>>> r.bar
37139,'rab'
37140,>>> names = 'id description price'.split()
37141,">>> values = [666, 'duct tape', 3.45]"
37142,>>> s = Record()
37143,">>> for name, value in zip(names, values):"
37144,"...     setattr(s, name, value)"
37145,...
37146,>>> s.__dict__ # If you are suffering from dict withdrawal symptoms
37147,"{'price': 3.45, 'id': 666, 'description': 'duct tape'}"
37148,>>>
37149,vars()['meta_anio_2012'] = 'translate'
37150,locals()['meta_anio_2012'] = 'translate'
37151,vars(sys.modules[__name__])['my_variable'] = 'value'
37152,__dict__
37153,while
37154,**
37155,# create a dictionary
37156,>>> kwargs = {}
37157,"# add a key of name and assign it a value, later we'll use this key as a variable"
37158,>>> kwargs['name'] = 'python'
37159,
37160,# an example function to use the variable
37161,>>> def print_name(name):
37162,...   print name
37163,
37164,# call the example function
37165,>>> print_name(**kwargs)
37166,python
37167,**
37168,kwargs
37169,>>> print_name(kwargs)
37170,{'name': 'python'}
37171,__main__
37172,b.py
37173,#!/usr/bin/env python
37174,# coding: utf-8
37175,
37176,
37177,def set_vars():
37178,    import __main__
37179,"    print '__main__', __main__"
37180,    __main__.B = 1
37181,
37182,try:
37183,    print B
37184,except NameError as e:
37185,    print e
37186,
37187,set_vars()
37188,
37189,print 'B: %s' % B
37190,$ python b.py
37191,name 'B' is not defined
37192,__main__ <module '__main__' from 'b.py'>
37193,B: 1
37194,__main__
37195,b.py
37196,B
37197,b.py
37198,a.py
37199,#!/usr/bin/env python
37200,# coding: utf-8
37201,
37202,try:
37203,    import b
37204,except NameError as e:
37205,    print e
37206,
37207,"print 'in a.py: B', B"
37208,$ python a.py
37209,name 'B' is not defined
37210,__main__ <module '__main__' from 'a.py'>
37211,name 'B' is not defined
37212,in a.py: B 1
37213,__main__
37214,'a.py'
37215,new_var = eval('old_var' + str(count))
37216,import random
37217,
37218,alphabet = tuple('abcdefghijklmnopqrstuvwxyz')
37219,
37220,globkeys = globals().keys()
37221,globkeys.append('globkeys') # because name 'globkeys' is now also in globals()
37222,
37223,"print 'globkeys==',globkeys"
37224,print
37225,"print ""globals().keys()=="",globals().keys()"
37226,
37227,for i in xrange(8):
37228,"    globals()[''.join(random.sample(alphabet,random.randint(3,26)))] = random.choice(alphabet)"
37229,del i
37230,
37231,newnames = [ x for x in globals().keys() if x not in globkeys ]
37232,print
37233,"print 'newnames==',newnames"
37234,
37235,print
37236,"print ""globals().keys()=="",globals().keys()"
37237,
37238,print
37239,"print '\n'.join(repr((u,globals()[u])) for u in newnames)"
37240,"globkeys== ['__builtins__', 'alphabet', 'random', '__package__', '__name__', '__doc__', 'globkeys']"
37241,
37242,"globals().keys()== ['__builtins__', 'alphabet', 'random', '__package__', '__name__', 'globkeys', '__doc__']"
37243,
37244,"newnames== ['fztkebyrdwcigsmulnoaph', 'umkfcvztleoij', 'kbutmzfgpcdqanrivwsxly', 'lxzmaysuornvdpjqfetbchgik', 'wznptbyermclfdghqxjvki', 'lwg', 'vsolxgkz', 'yobtlkqh']"
37245,
37246,"globals().keys()== ['fztkebyrdwcigsmulnoaph', 'umkfcvztleoij', 'newnames', 'kbutmzfgpcdqanrivwsxly', '__builtins__', 'alphabet', 'random', 'lxzmaysuornvdpjqfetbchgik', '__package__', 'wznptbyermclfdghqxjvki', 'lwg', 'x', 'vsolxgkz', '__name__', 'globkeys', '__doc__', 'yobtlkqh']"
37247,
37248,"('fztkebyrdwcigsmulnoaph', 't')"
37249,"('umkfcvztleoij', 'p')"
37250,"('kbutmzfgpcdqanrivwsxly', 'a')"
37251,"('lxzmaysuornvdpjqfetbchgik', 'n')"
37252,"('wznptbyermclfdghqxjvki', 't')"
37253,"('lwg', 'j')"
37254,"('vsolxgkz', 'w')"
37255,"('yobtlkqh', 'c')"
37256,import random
37257,
37258,pool_of_names = []
37259,for i in xrange(1000):
37260,"    v = 'LXM'+str(random.randrange(10,100000))"
37261,    if v not in globals():
37262,        pool_of_names.append(v)
37263,
37264,alphabet = 'abcdefghijklmnopqrstuvwxyz' 
37265,
37266,"print 'globals().keys()==',globals().keys()"
37267,
37268,print
37269,for j in xrange(8):
37270,    globals()[pool_of_names[j]] = random.choice(alphabet)
37271,newnames = pool_of_names[0:j+1]
37272,
37273,print
37274,"print 'globals().keys()==',globals().keys()"
37275,
37276,print
37277,"print '\n'.join(repr((u,globals()[u])) for u in newnames)"
37278,"globals().keys()== ['__builtins__', 'alphabet', 'random', '__package__', 'i', 'v', '__name__', '__doc__', 'pool_of_names']"
37279,
37280,
37281,"globals().keys()== ['LXM7646', 'random', 'newnames', 'LXM95826', 'pool_of_names', 'LXM66380', 'alphabet', 'LXM84070', '__package__', 'LXM8644', '__doc__', 'LXM33579', '__builtins__', '__name__', 'LXM58418', 'i', 'j', 'LXM24703', 'v']"
37282,
37283,"('LXM66380', 'v')"
37284,"('LXM7646', 'a')"
37285,"('LXM8644', 'm')"
37286,"('LXM24703', 'r')"
37287,"('LXM58418', 'g')"
37288,"('LXM84070', 'c')"
37289,"('LXM95826', 'e')"
37290,"('LXM33579', 'j')"
37291,globals()['X']
37292,li.append(X)
37293,v = 48
37294,for i in xrange(20)
37295,"globals()[""v""] = 48"
37296,"for i in range(0, len(ints), 4):"
37297,    # dummy op for example code
37298,    foo += ints[i] * ints[i + 1] + ints[i + 2] * ints[i + 3]
37299,while ints:
37300,    foo += ints[0] * ints[1] + ints[2] * ints[3]
37301,    ints[0:4] = []
37302,"def chunker(seq, size):"
37303,"    return (seq[pos:pos + size] for pos in range(0, len(seq), size))"
37304,"text = ""I am a very, very helpful text"""
37305,
37306,"for group in chunker(text, 7):"
37307,"   print(repr(group),)"
37308,"# 'I am a ' 'very, v' 'ery hel' 'pful te' 'xt'"
37309,
37310,"print('|'.join(chunker(text, 10)))"
37311,"# I am a ver|y, very he|lpful text"
37312,
37313,"animals = ['cat', 'dog', 'rabbit', 'duck', 'bird', 'cow', 'gnu', 'fish']"
37314,
37315,"for group in chunker(animals, 3):"
37316,    print(group)
37317,"# ['cat', 'dog', 'rabbit']"
37318,"# ['duck', 'bird', 'cow']"
37319,"# ['gnu', 'fish']"
37320,itertools
37321,chunker
37322,generator
37323,return [...]
37324,yield
37325,"for pos in xrange(0, len(seq), size): yield seq[pos:pos + size]"
37326,__getitem__
37327,chunker()
37328,itertools
37329,from itertools import zip_longest
37330,
37331,"def grouper(iterable, n, fillvalue=None):"
37332,    args = [iter(iterable)] * n
37333,"    return zip_longest(*args, fillvalue=fillvalue)"
37334,"grouper('ABCDEFG', 3, 'x')  # --> 'ABC' 'DEF' 'Gxx'"
37335,izip_longest
37336,zip_longest
37337,izip_longest
37338,None
37339,chunk_size = 4
37340,"for i in range(0, len(ints), chunk_size):"
37341,    chunk = ints[i:i+chunk_size]
37342,    # process chunk of size <= chunk_size
37343,chunk
37344,import itertools
37345,"def chunks(iterable,size):"
37346,    it = iter(iterable)
37347,"    chunk = tuple(itertools.islice(it,size))"
37348,    while chunk:
37349,        yield chunk
37350,"        chunk = tuple(itertools.islice(it,size))"
37351,
37352,# though this will throw ValueError if the length of ints
37353,# isn't a multiple of four:
37354,"for x1,x2,x3,x4 in chunks(ints,4):"
37355,    foo += x1 + x2 + x3 + x4
37356,
37357,"for chunk in chunks(ints,4):"
37358,    foo += sum(chunk)
37359,import itertools
37360,"def chunks2(iterable,size,filler=None):"
37361,"    it = itertools.chain(iterable,itertools.repeat(filler,size-1))"
37362,"    chunk = tuple(itertools.islice(it,size))"
37363,    while len(chunk) == size:
37364,        yield chunk
37365,"        chunk = tuple(itertools.islice(it,size))"
37366,
37367,"# x2, x3 and x4 could get the value 0 if the length is not"
37368,# a multiple of 4.
37369,"for x1,x2,x3,x4 in chunks2(ints,4,0):"
37370,    foo += x1 + x2 + x3 + x4
37371,size
37372,len
37373,iteration_utilities.grouper
37374,iteration_utilties
37375,from iteration_utilities import grouper
37376,seq = list(range(20))
37377,"for group in grouper(seq, 4):"
37378,    print(group)
37379,"(0, 1, 2, 3)"
37380,"(4, 5, 6, 7)"
37381,"(8, 9, 10, 11)"
37382,"(12, 13, 14, 15)"
37383,"(16, 17, 18, 19)"
37384,from iteration_utilities import grouper
37385,seq = list(range(17))
37386,"for group in grouper(seq, 4):"
37387,    print(group)
37388,"# (0, 1, 2, 3)"
37389,"# (4, 5, 6, 7)"
37390,"# (8, 9, 10, 11)"
37391,"# (12, 13, 14, 15)"
37392,"# (16,)"
37393,
37394,"for group in grouper(seq, 4, fillvalue=None):"
37395,    print(group)
37396,"# (0, 1, 2, 3)"
37397,"# (4, 5, 6, 7)"
37398,"# (8, 9, 10, 11)"
37399,"# (12, 13, 14, 15)"
37400,"# (16, None, None, None)"
37401,
37402,"for group in grouper(seq, 4, truncate=True):"
37403,    print(group)
37404,"# (0, 1, 2, 3)"
37405,"# (4, 5, 6, 7)"
37406,"# (8, 9, 10, 11)"
37407,"# (12, 13, 14, 15)"
37408,iteration_utilities.grouper
37409,simple_benchmark
37410,import iteration_utilities
37411,import itertools
37412,from itertools import zip_longest
37413,
37414,def consume_all(it):
37415,"    return iteration_utilities.consume(it, None)"
37416,
37417,import simple_benchmark
37418,b = simple_benchmark.BenchmarkBuilder()
37419,
37420,@b.add_function()
37421,"def grouper(l, n):"
37422,"    return consume_all(iteration_utilities.grouper(l, n))"
37423,
37424,"def Craz_inner(iterable, n, fillvalue=None):"
37425,    args = [iter(iterable)] * n
37426,"    return zip_longest(*args, fillvalue=fillvalue)"
37427,
37428,@b.add_function()
37429,"def Craz(iterable, n, fillvalue=None):"
37430,"    return consume_all(Craz_inner(iterable, n, fillvalue))"
37431,
37432,"def nosklo_inner(seq, size):"
37433,"    return (seq[pos:pos + size] for pos in range(0, len(seq), size))"
37434,
37435,@b.add_function()
37436,"def nosklo(seq, size):"
37437,"    return consume_all(nosklo_inner(seq, size))"
37438,
37439,"def SLott_inner(ints, chunk_size):"
37440,"    for i in range(0, len(ints), chunk_size):"
37441,        yield ints[i:i+chunk_size]
37442,
37443,@b.add_function()
37444,"def SLott(ints, chunk_size):"
37445,"    return consume_all(SLott_inner(ints, chunk_size))"
37446,
37447,"def MarkusJarderot1_inner(iterable,size):"
37448,    it = iter(iterable)
37449,"    chunk = tuple(itertools.islice(it,size))"
37450,    while chunk:
37451,        yield chunk
37452,"        chunk = tuple(itertools.islice(it,size))"
37453,
37454,@b.add_function()
37455,"def MarkusJarderot1(iterable,size):"
37456,"    return consume_all(MarkusJarderot1_inner(iterable,size))"
37457,
37458,"def MarkusJarderot2_inner(iterable,size,filler=None):"
37459,"    it = itertools.chain(iterable,itertools.repeat(filler,size-1))"
37460,"    chunk = tuple(itertools.islice(it,size))"
37461,    while len(chunk) == size:
37462,        yield chunk
37463,"        chunk = tuple(itertools.islice(it,size))"
37464,
37465,@b.add_function()
37466,"def MarkusJarderot2(iterable,size):"
37467,"    return consume_all(MarkusJarderot2_inner(iterable,size))"
37468,
37469,@b.add_arguments()
37470,def argument_provider():
37471,"    for exp in range(2, 20):"
37472,        size = 2**exp
37473,"        yield size, simple_benchmark.MultiArgument([[0] * size, 10])"
37474,
37475,r = b.run()
37476,iteration_utilities
37477,simple_benchmark
37478,"def chunker(seq, size):"
37479,    res = []
37480,    for el in seq:
37481,        res.append(el)
37482,        if len(res) == size:
37483,            yield res
37484,            res = []
37485,    if res:
37486,        yield res
37487,">>> list(chunker([i for i in range(10)], 3))"
37488,"[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]"
37489,">>> list(chunker(set([i for i in range(10)]), 3))"
37490,"[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]"
37491,">>> list(chunker((i for i in range(10)), 3))"
37492,"[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]"
37493,import more_itertools
37494,"for s in more_itertools.chunked(range(9), 4):"
37495,    print(s)
37496,"[0, 1, 2, 3]"
37497,"[4, 5, 6, 7]"
37498,[8]
37499,chunked
37500,itertools.islice
37501,from itertools import islice
37502,
37503,"list_ = [i for i in range(10, 100)]"
37504,
37505,"def chunker(it, size):"
37506,    iterator = iter(it)
37507,"    while chunk := list(islice(iterator, size)):"
37508,        print(chunk)
37509,"In [2]: chunker(list_, 10)                                                         "
37510,"[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
37511,"[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]"
37512,"[30, 31, 32, 33, 34, 35, 36, 37, 38, 39]"
37513,"[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
37514,"[50, 51, 52, 53, 54, 55, 56, 57, 58, 59]"
37515,"[60, 61, 62, 63, 64, 65, 66, 67, 68, 69]"
37516,"[70, 71, 72, 73, 74, 75, 76, 77, 78, 79]"
37517,"[80, 81, 82, 83, 84, 85, 86, 87, 88, 89]"
37518,"[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]"
37519,"def grouper(n, iterable, fillvalue=None):"
37520,"    #""grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"""
37521,    args = [iter(iterable)] * n
37522,"    return itertools.izip_longest(fillvalue=fillvalue, *args)"
37523,%timeit
37524,"def grouper(size, iterable):"
37525,    i = iter(iterable)
37526,    while True:
37527,        out = []
37528,        try:
37529,            for _ in range(size):
37530,                out.append(i.next())
37531,        except StopIteration:
37532,            yield out
37533,            break
37534,        
37535,        yield out
37536,islice
37537,"def grouper(size, iterable):"
37538,    it = iter(iterable)
37539,    while True:
37540,"        group = tuple(itertools.islice(it, None, size))"
37541,        if not group:
37542,            break
37543,        yield group
37544,filldata
37545,"def grouper(n, iterable, fillvalue=None):"
37546,"    #""grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"""
37547,    args = [iter(iterable)] * n
37548,    # itertools.zip_longest on Python 3
37549,"    for x in itertools.izip_longest(*args, fillvalue=fillvalue):"
37550,        if x[-1] is fillvalue:
37551,            yield tuple(v for v in x if v is not fillvalue)
37552,        else:
37553,            yield x
37554,itertools
37555,map
37556,map
37557,imap
37558,"def grouper(n, it): return takewhile(bool, map(tuple, starmap(islice, repeat((iter(it), n)))))"
37559,fillvalue
37560,fillvalue = object()
37561,if
37562,if i[-1] is fillvalue:
37563,yield tuple(v for v in i if v is not fillvalue)
37564,iterable
37565,islice
37566,n
37567,izip_longest
37568,yield i[:modulo]
37569,args
37570,"args = (iter(iterable),) * n"
37571,None
37572,if None in i
37573,yield
37574,from itertools import izip_longest
37575,
37576,"def chunker(iterable, chunksize, filler):"
37577,"    return izip_longest(*[iter(iterable)]*chunksize, fillvalue=filler)"
37578,izip_longest
37579,zip_longest
37580,"it = iter([1, 2, 3, 4, 5, 6, 7, 8, 9])"
37581,"for chunk in zip(it, it, it, it):"
37582,    print chunk
37583,
37584,">>> (1, 2, 3, 4)"
37585,">>> (5, 6, 7, 8)"
37586,"(9, None, None, None)"
37587,izip_longest
37588,itertools
37589,zip(*([it]*4))
37590,zip()
37591,">>> def chunker(iterable, chunksize):"
37592,...     return zip(*[iter(iterable)]*chunksize)
37593,>>> s = '1234567890'
37594,">>> chunker(s, 3)"
37595,"[('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9')]"
37596,">>> chunker(s, 4)"
37597,"[('1', '2', '3', '4'), ('5', '6', '7', '8')]"
37598,">>> chunker(s, 5)"
37599,"[('1', '2', '3', '4', '5'), ('6', '7', '8', '9', '0')]"
37600,>>> from itertools import izip
37601,">>> def chunker(iterable, chunksize):"
37602,...     return izip(*[iter(iterable)]*chunksize)
37603,">>> from itertools import chain, izip, repeat"
37604,">>> def chunker(iterable, chunksize, fillvalue=None):"
37605,"...     it   = chain(iterable, repeat(fillvalue, chunksize-1))"
37606,...     args = [it] * chunksize
37607,...     return izip(*args)
37608,iter
37609,from itertools import islice
37610,
37611,"def group(it, size):"
37612,    it = iter(it)
37613,"    return iter(lambda: tuple(islice(it, size)), ())"
37614,"from itertools import islice, chain, repeat"
37615,
37616,"def group_pad(it, size, pad=None):"
37617,"    it = chain(iter(it), repeat(pad))"
37618,"    return iter(lambda: tuple(islice(it, size)), (pad,) * size)"
37619,_no_pad = object()
37620,"def group(it, size, pad=_no_pad):"
37621,    if pad == _no_pad:
37622,        it = iter(it)
37623,        sentinel = ()
37624,    else:
37625,"        it = chain(iter(it), repeat(pad))"
37626,"        sentinel = (pad,) * size"
37627,"    return iter(lambda: tuple(islice(it, size)), sentinel)"
37628,">>> def chunker(iterable, chunksize):"
37629,"...   return map(None,*[iter(iterable)]*chunksize)"
37630,>>> s = '1234567890'
37631,">>> chunker(s, 3)"
37632,"[('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9'), ('0', None, None)]"
37633,">>> chunker(s, 4)"
37634,"[('1', '2', '3', '4'), ('5', '6', '7', '8'), ('9', '0', None, None)]"
37635,">>> chunker(s, 5)"
37636,"[('1', '2', '3', '4', '5'), ('6', '7', '8', '9', '0')]"
37637,itertools.izip_longest
37638,itertools.zip_longest
37639,map
37640,None
37641,"def get_chunk(iterable, chunk_size):"
37642,    result = []
37643,    for item in iterable:
37644,        result.append(item)
37645,        if len(result) == chunk_size:
37646,            yield tuple(result)
37647,            result = []
37648,    if len(result) > 0:
37649,        yield tuple(result)
37650,
37651,"for x in get_chunk([1,2,3,4,5,6,7,8,9,10], 3):"
37652,    print x
37653,
37654,"(1, 2, 3)"
37655,"(4, 5, 6)"
37656,"(7, 8, 9)"
37657,"(10,)"
37658,iterable = range(100000000)
37659,chunksize
37660,data = [...]
37661,chunk_size = 10000 # or whatever
37662,"chunks = [data[i:i+chunk_size] for i in xrange(0,len(data),chunk_size)]"
37663,for chunk in chunks:
37664,    ...
37665,len
37666,itertools.repeat
37667,itertools.cycle
37668,[...for...]
37669,(...for...)
37670,x
37671,4
37672,"for a, b, c, d in zip(x[0::4], x[1::4], x[2::4], x[3::4]):"
37673,"    ... do something with a, b, c and d ..."
37674,import itertools
37675,">>> for k, g in itertools.groupby(xrange(35), lambda x: x/10):"
37676,...     list(g)
37677,... 
37678,"0 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
37679,"1 [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
37680,"2 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]"
37681,"3 [30, 31, 32, 33, 34]"
37682,>>> 
37683,groupby
37684,len
37685,"for k,g in itertools.groupby(xrange(35), lambda x: x/10):"
37686,    for i in g:
37687,       # do what you need to do with individual items
37688,    # now do what you need to do with the whole group
37689,    messages = a_generator_which_would_not_be_smart_as_a_list
37690,"    for idx, batch in groupby(messages, lambda x: x/1000):"
37691,        batch_request = BatchHttpRequest()
37692,        for message in batch:
37693,"            batch_request.add(self.service.users().messages().modify(userId='me', id=message['id'], body=msg_labels))"
37694,        http = httplib2.Http()
37695,        self.credentials.authorize(http)
37696,        batch_request.execute(http=http)
37697,"groupby(messages, lambda x: x/3)"
37698,"groupby(enumerate(messages), lambda x: x[0]/3)"
37699,"def chunks(it, n, m):"
37700,"    """"""Make an iterator over m first chunks of size n."
37701,"    """""""
37702,    it = iter(it)
37703,    # Chunks are presented as tuples.
37704,    return (tuple(next(it) for _ in range(n)) for _ in range(m))
37705,ints = ints[4:]
37706,"ints = array([1, 2, 3, 4, 5, 6, 7, 8])"
37707,"for int1, int2 in ints.reshape(-1, 2):"
37708,"    print(int1, int2)"
37709,1 2
37710,3 4
37711,5 6
37712,7 8
37713,"def chunker(iterable, n):"
37714,"    """"""Yield iterable in chunk sizes."
37715,
37716,"    >>> chunks = chunker('ABCDEF', n=4)"
37717,    >>> chunks.next()
37718,"    ['A', 'B', 'C', 'D']"
37719,    >>> chunks.next()
37720,"    ['E', 'F']"
37721,"    """""""
37722,    it = iter(iterable)
37723,    while True:
37724,        chunk = []
37725,        for i in range(n):
37726,            try:
37727,                chunk.append(next(it))
37728,            except StopIteration:
37729,                yield chunk
37730,                raise StopIteration
37731,        yield chunk
37732,
37733,if __name__ == '__main__':
37734,    import doctest
37735,
37736,    doctest.testmod()
37737,"def chunkiter(iterable, size):"
37738,"  def inneriter(first, iterator, size):"
37739,    yield first
37740,    for _ in xrange(size - 1): 
37741,      yield iterator.next()
37742,  it = iter(iterable)
37743,  while True:
37744,"    yield inneriter(it.next(), it, size)"
37745,
37746,"In [2]: i = chunkiter('abcdefgh', 3)"
37747,In [3]: for ii in i:                                                
37748,          for c in ii:
37749,"            print c,"
37750,          print ''
37751,        ...:     
37752,        a b c 
37753,        d e f 
37754,        g h 
37755,for c in tuple(ii)
37756,"def group_by(iterable, size):"
37757,"    """"""Group an iterable into lists that don't exceed the size given."
37758,
37759,"    >>> group_by([1,2,3,4,5], 2)"
37760,"    [[1, 2], [3, 4], [5]]"
37761,
37762,"    """""""
37763,    sublist = []
37764,
37765,"    for index, item in enumerate(iterable):"
37766,        if index > 0 and index % size == 0:
37767,            yield sublist
37768,            sublist = []
37769,
37770,        sublist.append(item)
37771,
37772,    if sublist:
37773,        yield sublist
37774,from funcy import partition
37775,
37776,"for a, b, c, d in partition(4, ints):"
37777,    foo += a * b * c * d
37778,ipartition
37779,ichunks
37780,J.F. Sebastian
37781,"def chunker(iterable, chunksize):"
37782,    return zip(*[iter(iterable)]*chunksize)
37783,''.join(chunker(...))
37784,zip
37785,class IteratorExhausted(Exception):
37786,    pass
37787,
37788,"def translate_StopIteration(iterable, to=IteratorExhausted):"
37789,    for i in iterable:
37790,        yield i
37791,"    raise to # StopIteration would get ignored because this is generator,"
37792,             # but custom exception can leave the generator.
37793,
37794,"def custom_zip(*iterables, reductor=tuple):"
37795,"    iterators = tuple(map(translate_StopIteration, iterables))"
37796,    while True:
37797,        try:
37798,            yield reductor(next(i) for i in iterators)
37799,        except IteratorExhausted: # when any of iterators get exhausted.
37800,            break
37801,"def chunker(data, size, reductor=tuple):"
37802,"    return custom_zip(*[iter(data)]*size, reductor=reductor)"
37803,">>> for i in chunker('12345', 2):"
37804,...     print(repr(i))
37805,...
37806,"('1', '2')"
37807,"('3', '4')"
37808,">>> for i in chunker('12345', 2, ''.join):"
37809,...     print(repr(i))
37810,...
37811,'12'
37812,'34'
37813,zip
37814,"def chunk_iter(iterable, chunk_size):"
37815,it = iter(iterable)
37816,while True:
37817,    chunk = tuple(next(it) for _ in range(chunk_size))
37818,    if not chunk:
37819,        break
37820,    yield chunk
37821,split_groups
37822,import itertools
37823,"def split_groups(iter_in, group_size):"
37824,"    return ((x for _, x in item) for _, item in itertools.groupby(enumerate(iter_in), key=lambda x: x[0] // group_size))"
37825,
37826,"for x, y, z, w in split_groups(range(16), 4):"
37827,    foo += x * y + z * w
37828,#!/usr/bin/env python3
37829,from itertools import zip_longest
37830,
37831,
37832,_UNDEFINED = object()
37833,
37834,
37835,"def chunker(iterable, chunksize, fillvalue=_UNDEFINED):"
37836,"    """""""
37837,    Collect data into chunks and optionally pad it.
37838,
37839,    Performance worsens as `chunksize` approaches 1.
37840,
37841,    Inspired by:
37842,        https://docs.python.org/3/library/itertools.html#itertools-recipes
37843,
37844,"    """""""
37845,    args = [iter(iterable)] * chunksize
37846,"    chunks = zip_longest(*args, fillvalue=fillvalue)"
37847,    yield from (
37848,"        filter(lambda val: val is not _UNDEFINED, chunk)"
37849,        if chunk[-1] is _UNDEFINED
37850,        else chunk
37851,        for chunk in chunks
37852,    ) if fillvalue is _UNDEFINED else chunks
37853,"def chunks(seq, size):"
37854,    it = iter(seq)
37855,    while True:
37856,        ret = tuple(next(it) for _ in range(size))
37857,        if len(ret) == size:
37858,            yield ret
37859,        else:
37860,            raise StopIteration()
37861,>>> def foo():
37862,...     i = 0
37863,...     while True:
37864,...         i += 1
37865,...         yield i
37866,...
37867,">>> c = chunks(foo(), 3)"
37868,>>> c.next()
37869,"(1, 2, 3)"
37870,>>> c.next()
37871,"(4, 5, 6)"
37872,">>> list(chunks('abcdefg', 2))"
37873,"[('a', 'b'), ('c', 'd'), ('e', 'f')]"
37874,"X = ""hello world"""
37875,"X.replace(""hello"", ""goodbye"")"
37876,hello
37877,goodbye
37878,"""hello world"""
37879,"""goodbye world"""
37880,"""hello world"""
37881,"X.replace(""hello"",""goodbye"")"
37882,X
37883,"X.replace(""hello"", ""goodbye"")"
37884,"X = X.replace(""hello"", ""goodbye"")"
37885,replace
37886,strip
37887,translate
37888,lower
37889,upper
37890,join
37891,X  = X.strip(' \t')
37892,X2 = X.translate(...)
37893,Y  = X.lower()
37894,Z  = X.upper()
37895,A  = X.join(':')
37896,B  = X.capitalize()
37897,C  = X.casefold()
37898,x += 'a'
37899,lower
37900,upper
37901,strip
37902,well it is an iterable
37903,x = 'hello'
37904,x[0] = 'i' #'str' object does not support item assignment
37905,"filenames = [""program.c"", ""stdio.hpp"", ""sample.hpp"", ""a.out"", ""math.hpp"", ""hpp.out""]"
37906,# Generate newfilenames as a list containing the new filenames
37907,# using as many lines of code as your chosen method requires.
37908,newfilenames = []
37909,for i in filenames:
37910,"    if i.endswith("".hpp""):"
37911,"        x = i.replace(""hpp"", ""h"")"
37912,        newfilenames.append(x)
37913,    else:
37914,        newfilenames.append(i)
37915,
37916,
37917,print(newfilenames)
37918,"# Should be [""program.c"", ""stdio.h"", ""sample.h"", ""a.out"", ""math.h"", ""hpp.out""]"
37919,AttributeError: 'NoneType' object has no attribute 'something'
37920,AttributeError
37921,NoneType
37922,print
37923,yourobject = somthing_that_is_None
37924,yourobject.babyruth
37925,something_that_is_None
37926,None
37927,None
37928,None
37929,foo = None
37930,foo.something = 1
37931,foo = None
37932,print(foo.something)
37933,AttributeError: 'NoneType'
37934,None
37935,foo = None
37936,foo = something()
37937,something()
37938,None
37939,NoneType
37940,None
37941,mylist = mylist.sort()
37942,sort()
37943,mylist
37944,None
37945,None
37946,mylist
37947,mylist.append(1)
37948,NoneType
37949,None
37950,lifetime
37951,None
37952,return
37953,lifetime
37954,None
37955,None
37956,def return_something(someint):
37957, if  someint > 5:
37958,    return someint
37959,
37960,y = return_something(2)
37961,y.real()
37962,None
37963,None
37964,Null
37965,x1 = None
37966,print(x1.something)
37967,
37968,#or
37969,
37970,x1 = None
37971,"x1.someother = ""Hellow world"""
37972,
37973,#or
37974,x1 = None
37975,x1.some_func()
37976,
37977,# you can avoid some of these error by adding this kind of check
37978,if(x1 is not None):
37979,    ... Do something here
37980,else:
37981,"    print(""X1 variable is Null or None"")"
37982,"class ImputeLags(BaseEstimator, TransformerMixin):"
37983,"    def __init__(self, columns):"
37984,        self.columns = columns
37985,
37986,"    def fit(self, x, y=None):"
37987,"        """""" do something """""""
37988,
37989,"    def transfrom(self, x):"
37990,        return x
37991,return self
37992,return
37993,return None
37994,if something: return value
37995,return None
37996,something
37997,if val is not None:
37998,    print(val)
37999,else:
38000,    # no need for else: really if it doesn't contain anything useful
38001,    pass
38002,NoneType
38003,NoneType
38004,if foo is not None:
38005,   <!-- <td>{{ qual.date_expiry.date() }}</td> -->
38006,<td>{% if qual.date_attained != None %} {{ qual.date_attained.date() }} {% endif %} </td>
38007,def my_method():
38008,   if condition == 'whatever':
38009,      ....
38010,      return o
38011,   else:
38012,      return None
38013,
38014,answer = mymethod()
38015,
38016,if answer == None:
38017,   print('Empty')
38018,else:
38019,   print('Not empty')
38020,"File ""/usr/local/lib/python3.9/site-packages/gitlab/base.py"", line 105, in __eq__"
38021,if self.get_id() and other.get_id():
38022,AttributeError: 'NoneType' object has no attribute 'get_id'
38023,if answer is None:
38024,   print('Empty')
38025,else:
38026,   print('Not empty')
38027,def run_command(cmd):
38028,    # ??????
38029,
38030,print run_command('mysqladmin create test -uroot -pmysqladmin12')
38031,# Should output something like:
38032,# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'
38033,os.system
38034,subprocess.check_output
38035,">>> subprocess.check_output(['ls', '-l'])"
38036,b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
38037,check_output
38038,stdout
38039,stdin
38040,run
38041,Popen
38042,shell=True
38043,check_output
38044,run
38045,run
38046,subprocess
38047,subprocess.PIPE
38048,stdout
38049,stdout
38050,CompletedProcess
38051,>>> import subprocess
38052,">>> result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)"
38053,>>> result.stdout
38054,b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
38055,bytes
38056,decode
38057,>>> result.stdout.decode('utf-8')
38058,'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
38059,">>> subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')"
38060,'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
38061,stdin
38062,bytes
38063,input
38064,">>> cmd = ['awk', 'length($0) > 5']"
38065,>>> ip = 'foo\nfoofoo\n'.encode('utf-8')
38066,">>> result = subprocess.run(cmd, stdout=subprocess.PIPE, input=ip)"
38067,>>> result.stdout.decode('utf-8')
38068,'foofoo\n'
38069,stderr=subprocess.PIPE
38070,result.stderr
38071,stderr=subprocess.STDOUT
38072,result.stdout
38073,run
38074,check=True
38075,returncode
38076,result
38077,shell=True
38078,">>> subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout"
38079,'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
38080,run
38081,run
38082,check_output
38083,check_output
38084,"subprocess.check_output(*popenargs, **kwargs)  "
38085,Popen
38086,check_output
38087,run
38088,check=True
38089,stdout=PIPE
38090,stdout
38091,stderr=subprocess.STDOUT
38092,shell=True
38093,stderr
38094,check_output
38095,Popen
38096,Popen
38097,check_output
38098,run
38099,Popen
38100,Popen
38101,shlex.split
38102,Popen
38103,communicate
38104,"output = subprocess.Popen([""mycmd"", ""myarg""], "
38105,                          stdout=subprocess.PIPE).communicate()[0]
38106,>>> import subprocess
38107,">>> p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, "
38108,...                                    stderr=subprocess.PIPE)
38109,">>> out, err = p.communicate()"
38110,>>> print out
38111,.
38112,..
38113,foo
38114,stdin=PIPE
38115,communicate
38116,stdin
38117,">>> cmd = ['awk', 'length($0) > 5']"
38118,">>> p = subprocess.Popen(cmd, stdout=subprocess.PIPE,"
38119,"...                           stderr=subprocess.PIPE,"
38120,...                           stdin=subprocess.PIPE)
38121,">>> out, err = p.communicate('foo\nfoofoo\n')"
38122,>>> print out
38123,foofoo
38124,stdout
38125,stderr
38126,stdin
38127,PIPE
38128,DEVNULL
38129,communicate
38130,communicate
38131,shell=True
38132,shell=True
38133,run
38134,check_output
38135,Popen
38136,shell=True
38137,">>> subprocess.check_output('cat books/* | wc', shell=True, text=True)"
38138,' 1299377 17005208 101299376\n'
38139,"run(cmd, [stdout=etc...], input=other_output)"
38140,"Popen(cmd, [stdout=etc...]).communicate(other_output)"
38141,check_output()
38142,communicate()
38143,poll()
38144,out
38145,<class 'bytes'>
38146,"out.decode(""utf-8"")"
38147,shell=True
38148,subprocess
38149,shell=True
38150,ps
38151,grep
38152,"subprocess.check_output('cat books/* | wc', shell=True, text=True)"
38153,import commands
38154,print commands.getstatusoutput('wc -l file')
38155,subprocess
38156,"from subprocess import Popen, PIPE"
38157,"output = Popen([""date""],stdout=PIPE)"
38158,response = output.communicate()
38159,print response
38160,def runProcess(exe):    
38161,"    p = subprocess.Popen(exe, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
38162,    while(True):
38163,        # returns None while subprocess is running
38164,        retcode = p.poll() 
38165,        line = p.stdout.readline()
38166,        yield line
38167,        if retcode is not None:
38168,            break
38169,for line in runProcess('mysqladmin create test -uroot -pmysqladmin12'.split()):
38170,"    print line,"
38171,wait
38172,call
38173,PIPE
38174,stdin
38175,Popen
38176,retcode
38177,0
38178,if retcode is not None
38179,if line: yield line
38180,p.stdout.close()
38181,.readlines()
38182,if retcode is not None: yield from  p.stdout.readlines(); break
38183,import subprocess
38184,"output = subprocess.getoutput(""ls -l"")"
38185,print(output)
38186,subprocess.getoutput()
38187,import os
38188,os.system('sample_cmd > tmp')
38189,"print(open('tmp', 'r').read())"
38190,os.remove('tmp')
38191,mktemp
38192,os.remove('tmp')
38193,def run_command(command):
38194,"    p = subprocess.Popen(command,"
38195,"                         stdout=subprocess.PIPE,"
38196,                         stderr=subprocess.STDOUT)
38197,"    return iter(p.stdout.readline, b'')"
38198,command = 'mysqladmin create test -uroot -pmysqladmin12'.split()
38199,for line in run_command(command):
38200,    print(line)
38201,"return iter(p.stdout.readline, b'')"
38202,p.stdout.readline()
38203,p.poll()
38204,None
38205,import os
38206,os.popen('your command here').read()
38207,subprocess.Popen
38208,import subprocess
38209,
38210,"p = subprocess.Popen(""Your command"", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]"
38211,"print p.split(""\n"")"
38212,os.popen()
38213,subprocess.Popen()
38214,subprcess.Popen
38215,subprocess.check_output
38216,import subprocess
38217,from time import sleep
38218,
38219,def run_command(command):
38220,"    p = subprocess.Popen(command,"
38221,"                         stdout=subprocess.PIPE,"
38222,"                         stderr=subprocess.PIPE,"
38223,                         shell=True)
38224,    # Read stdout from subprocess until the buffer is empty !
38225,"    for line in iter(p.stdout.readline, b''):"
38226,        if line: # Don't print blank lines
38227,            yield line
38228,"    # This ensures the process has completed, AND sets the 'returncode' attr"
38229,    while p.poll() is None:                                                                                                                                        
38230,        sleep(.1) #Don't waste CPU-cycles
38231,    # Empty STDERR buffer
38232,    err = p.stderr.read()
38233,    if p.returncode != 0:
38234,       # The run_command() function is responsible for logging STDERR 
38235,"       print(""Error: "" + str(err))"
38236,for line in run_command(cmd):
38237,    print(line)
38238,p.poll()
38239,WindowsError: [Error 6] The handle is invalid
38240,import subprocess
38241,
38242,def run_command(cmd):
38243,"    """"""given shell command, returns communication tuple of stdout and stderr"""""""
38244,"    return subprocess.Popen(cmd, "
38245,"                            stdout=subprocess.PIPE, "
38246,"                            stderr=subprocess.PIPE, "
38247,                            stdin=subprocess.PIPE).communicate()
38248,[0]
38249,stdout
38250,run_command('tracert 11.1.0.1')[0]
38251,def run_command(cmd):
38252,"    """"""given shell command, returns communication tuple of stdout and stderr"""""""
38253,    # instantiate a startupinfo obj:
38254,    startupinfo = subprocess.STARTUPINFO()
38255,"    # set the use show window flag, might make conditional on being in Windows:"
38256,    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
38257,    # pass as the startupinfo keyword argument:
38258,"    return subprocess.Popen(cmd,"
38259,"                            stdout=subprocess.PIPE, "
38260,"                            stderr=subprocess.PIPE, "
38261,"                            stdin=subprocess.PIPE, "
38262,                            startupinfo=startupinfo).communicate()
38263,
38264,run_command('tracert 11.1.0.1')
38265,DEVNULL
38266,subprocess.PIPE
38267,subprocess.run
38268,capture_output=True
38269,import subprocess
38270,"result = subprocess.run(['echo', 'hello', 'world'], capture_output=True)"
38271,print(repr(result.stdout))
38272,b'hello world\n'
38273,text=True
38274,"result = subprocess.run(['echo', 'hello', 'world'], capture_output=True, text=True)"
38275,print(repr(result.stdout))
38276,'hello world\n'
38277,"encoding=""your encoding"""
38278,text=True
38279,"result = subprocess.run(['echo', 'hello', 'world'], capture_output=True, encoding=""utf8"")"
38280,print(repr(result.stdout))
38281,subprocess
38282,shlex.split()
38283,"git log -n 5 --since ""5 years ago"" --until ""2 year ago"""
38284,from subprocess import check_output
38285,from shlex import split
38286,
38287,"res = check_output(split('git log -n 5 --since ""5 years ago"" --until ""2 year ago""'))"
38288,print(res)
38289,>>> b'commit 7696ab087a163e084d6870bb4e5e4d4198bdc61a\nAuthor: Artur Barseghyan...'
38290,shlex.split()
38291,res = check_output([
38292,"    'git', "
38293,"    'log', "
38294,"    '-n', "
38295,"    '5', "
38296,"    '--since', "
38297,"    '5 years ago', "
38298,"    '--until', "
38299,    '2 year ago'
38300,])
38301,print(res)
38302,>>> b'commit 7696ab087a163e084d6870bb4e5e4d4198bdc61a\nAuthor: Artur Barseghyan...'
38303,shlex.split()
38304,"['git', 'log', '-n', '5', '--since', '5 years ago', '--until', '2 year ago']"
38305,import subprocess
38306,
38307,"def run_command(cmd_and_args, print_constantly=False, cwd=None):"
38308,"""""""Runs a system command."
38309,
38310,:param cmd_and_args: the command to run with or without a Pipe (|).
38311,:param print_constantly: If True then the output is logged in continuous until the command ended.
38312,:param cwd: the current working directory (the directory from which you will like to execute the command)
38313,":return: - a tuple containing the return code, the stdout and the stderr of the command"
38314,""""""""
38315,output = []
38316,
38317,"process = subprocess.Popen(cmd_and_args, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd)"
38318,
38319,while True:
38320,    next_line = process.stdout.readline()
38321,    if next_line:
38322,        output.append(str(next_line))
38323,        if print_constantly:
38324,            print(next_line)
38325,    elif not process.poll():
38326,        break
38327,
38328,error = process.communicate()[1]
38329,
38330,"return process.returncode, '\n'.join(output), error"
38331,import os 
38332,
38333,def bash(command):
38334,    output = os.popen(command).read()
38335,    return output
38336,
38337,print_me = bash('ls -l')
38338,print(print_me)
38339,import os
38340,import subprocess
38341,
38342,# Define a function for running commands and capturing stdout line by line
38343,# (Modified from Vartec's solution because it wasn't printing all lines)
38344,def runProcess(exe):    
38345,"    p = subprocess.Popen(exe, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
38346,"    return iter(p.stdout.readline, b'')"
38347,
38348,# Get all filenames in working directory
38349,for filename in os.listdir('./'):
38350,    # This command will be run on each file
38351,    cmd = 'nm ' + filename
38352,
38353,    # Run the command and capture the output line by line.
38354,    for line in runProcess(cmd.split()):
38355,        # Eliminate leading and trailing whitespace
38356,        line.strip()
38357,        # Split the output 
38358,        output = line.split()
38359,
38360,        # Filter the output and print relevant lines
38361,        if len(output) > 2:
38362,            if ((output[2] == 'set_program_name')):
38363,                print filename
38364,                print line
38365,Popen
38366,shell=True
38367,"['nm', filename]"
38368,shell=True
38369,"def sh(cmd, input=""""):"
38370,"    rst = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, input=input.encode(""utf-8""))"
38371,"    assert rst.returncode == 0, rst.stderr.decode(""utf-8"")"
38372,"    return rst.stdout.decode(""utf-8"")"
38373,"sh(""ls -a"")"
38374,"check=True, universal_newlines=True"
38375,subprocess.run()
38376,"from subprocess import Popen, getstatusoutput, PIPE"
38377,def shell_command(cmd):
38378,"    result = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)"
38379,
38380,"    output = iter(result.stdout.readline, b'')"
38381,"    error = iter(result.stderr.readline, b'')"
38382,"    print(""##### OutPut ###"")"
38383,    for line in output:
38384,"        print(line.decode(""utf-8""))"
38385,"    print(""###### Error ########"")"
38386,    for line in error:
38387,"        print(error.decode(""utf-8"")) # Convert bytes to str"
38388,
38389,"    status, terminal_output = run_command(cmd)"
38390,    print(terminal_output)
38391,
38392,"shell_command(""ls"") # this will display all the files & folders in directory"
38393,"from subprocess import Popen, getstatusoutput, PIPE"
38394,
38395,"status_Code, output = getstausoutput(command)"
38396,print(output) # this will give the terminal output
38397,
38398,"# status_code, output = getstatusoutput(""ls"") # this will print the all files & folder available in the directory"
38399,subprocess
38400,try..except
38401,import subprocess
38402,
38403,def command_caller(command=None)
38404,"    sp = subprocess.Popen(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=False)"
38405,"    out, err = sp.communicate()"
38406,    if sp.returncode:
38407,        print(
38408,"            ""Return code: %(ret_code)s Error message: %(err_msg)s"""
38409,"            % {""ret_code"": sp.returncode, ""err_msg"": err}"
38410,            )
38411,"    return sp.returncode, out, err"
38412,subprocess.run()
38413,pip install simppl
38414,simppl
38415,    from simppl.simple_pipeline import SimplePipeline
38416,"    sp = SimplePipeline(start=0, end=100):"
38417,    sp.print_and_run('<YOUR_FIRST_OS_COMMAND>')
38418,    sp.print_and_run('<YOUR_SECOND_OS_COMMAND>') ```
38419,"    commands = ['<YOUR_FIRST_OS_COMMAND>', '<YOUR_SECOND_OS_COMMAND>']"
38420,    max_number_of_processes = 4
38421,"    sp.run_parallel(commands, max_number_of_processes) ```"
38422,    from example_module import example_tool
38423,"    sp.print_and_run_clt(example_tool.run, ['first_number', 'second_nmber'], "
38424,"                                 {'-key1': 'val1', '-key2': 'val2'},"
38425,                                 {'--flag'}) ```
38426,logging
38427,import logging
38428,from logging.config import dictConfig
38429,
38430,logging_config = dict(
38431,"    version = 1,"
38432,    formatters = {
38433,        'f': {'format':
38434,              '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'}
38435,"        },"
38436,    handlers = {
38437,"        'h': {'class': 'logging.StreamHandler',"
38438,"              'formatter': 'f',"
38439,              'level': logging.DEBUG}
38440,"        },"
38441,    root = {
38442,"        'handlers': ['h'],"
38443,"        'level': logging.DEBUG,"
38444,"        },"
38445,)
38446,dictConfig(logging_config)
38447,
38448,from simppl.simple_pipeline import SimplePipeline
38449,"sp = SimplePipeline(0, 100)"
38450,sp.print_and_run('ls')
38451,from IPython.terminal.embed import InteractiveShellEmbed
38452,my_shell = InteractiveShellEmbed()
38453,"result = my_shell.getoutput(""echo hello world"")"
38454,print(result)
38455,
38456,Out: ['hello world']
38457,"var = ""hello world """
38458,"result = my_shell.getoutput(""echo {var*2}"")"
38459,print(result)
38460,
38461,Out: ['hello world hello world']
38462,result = !echo hello world
38463,print(result)
38464,subprocess.check_output(shell=True)
38465,CalledProcessError
38466,output
38467,import subprocess
38468,import os
38469,import tempfile
38470,
38471,def execute_to_file(command):
38472,"    """""""
38473,    This function execute the command
38474,    and pass its output to a tempfile then read it back
38475,    It is usefull for process that deploy child process
38476,"    """""""
38477,    temp_file = tempfile.NamedTemporaryFile(delete=False)
38478,    temp_file.close()
38479,    path = temp_file.name
38480,"    command = command + "" > "" + path"
38481,"    proc = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)"
38482,    if proc.stderr:
38483,        # if command failed return
38484,        os.unlink(path)
38485,        return
38486,"    with open(path, 'r') as f:"
38487,        data = f.read()
38488,    os.unlink(path)
38489,    return data
38490,
38491,"if __name__ == ""__main__"":"
38492,"    path = ""Somepath"""
38493,    command = 'ecls.exe /files ' + path
38494,    print(execute(command))
38495,stdout=temp_file
38496,ecls.exe
38497,"def execute(cmd, output=True, DEBUG_MODE=False):"
38498,"""""""Executes a bash command."
38499,"(cmd, output=True)"
38500,"output: whether print shell output to screen, only affects screen display, does not affect returned values"
38501,return: ...regardless of output=True/False...
38502,        returns shell output as a list with each elment is a line of string (whitespace stripped both sides) from output
38503,        could be 
38504,"        [], ie, len()=0 --> no output;    "
38505,        [''] --> output empty line;     
38506,"        None --> error occured, see below"
38507,
38508,"        if error ocurs, returns None (ie, is None), print out the error message to screen"
38509,""""""""
38510,if not DEBUG_MODE:
38511,"    print ""Command: "" + cmd"
38512,
38513,    # https://stackoverflow.com/a/40139101/2292993
38514,    def _execute_cmd(cmd):
38515,        if os.name == 'nt' or platform.system() == 'Windows':
38516,"            # set stdin, out, err all to PIPE to get results (other than None) after run the Popen() instance"
38517,"            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)"
38518,        else:
38519,            # Use bash; the default is sh
38520,"            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, executable=""/bin/bash"")"
38521,
38522,        # the Popen() instance starts running once instantiated (??)
38523,"        # additionally, communicate(), or poll() and wait process to terminate"
38524,"        # communicate() accepts optional input as stdin to the pipe (requires setting stdin=subprocess.PIPE above), return out, err as tuple"
38525,"        # if communicate(), the results are buffered in memory"
38526,
38527,        # Read stdout from subprocess until the buffer is empty !
38528,"        # if error occurs, the stdout is '', which means the below loop is essentially skipped"
38529,        # A prefix of 'b' or 'B' is ignored in Python 2; 
38530,        # it indicates that the literal should become a bytes literal in Python 3 
38531,        # (e.g. when code is automatically converted with 2to3).
38532,"        # return iter(p.stdout.readline, b'')"
38533,"        for line in iter(p.stdout.readline, b''):"
38534,"            # # Windows has \r\n, Unix has \n, Old mac has \r"
38535,"            # if line not in ['','\n','\r','\r\n']: # Don't print blank lines"
38536,                yield line
38537,        while p.poll() is None:                                                                                                                                        
38538,            sleep(.1) #Don't waste CPU-cycles
38539,        # Empty STDERR buffer
38540,        err = p.stderr.read()
38541,        if p.returncode != 0:
38542,            # responsible for logging STDERR 
38543,"            print(""Error: "" + str(err))"
38544,            yield None
38545,
38546,    out = []
38547,    for line in _execute_cmd(cmd):
38548,        # error did not occur earlier
38549,        if line is not None:
38550,            # trailing comma to avoid a newline (by print itself) being printed
38551,"            if output: print line,"
38552,            out.append(line.strip())
38553,        else:
38554,            # error occured earlier
38555,            out = None
38556,    return out
38557,else:
38558,"    print ""Simulation! The command is "" + cmd"
38559,"    print """""
38560,switch
38561,case
38562,switch
38563,switch
38564,switch
38565,match
38566,case
38567,def f(x):
38568,    match x:
38569,        case 'a':
38570,            return 1
38571,        case 'b':
38572,            return 2
38573,        case _:
38574,            return 0   # 0 is the default case if x is not found
38575,match
38576,case
38577,def f(x):
38578,    return {
38579,"        'a': 1,"
38580,"        'b': 2,"
38581,    }[x]
38582,get
38583,collections.defaultdict
38584,"}.get(x, default)"
38585,"get(key[, default])"
38586,def f(x):
38587,    return {
38588,"        'a': 1,"
38589,        'b': 2
38590,"    }.get(x, 9)    # 9 will be returned default if x is not found"
38591,result = {
38592,"  'a': lambda x: x * 5,"
38593,"  'b': lambda x: x + 7,"
38594,  'c': lambda x: x - 2
38595,}[value](x)
38596,.get()
38597,[value]
38598,value
38599,(x)
38600,x
38601,result
38602,if
38603,elif
38604,else
38605,switch
38606,case
38607,default
38608,if x == 'a':
38609,    # Do the thing
38610,elif x == 'b':
38611,    # Do the other thing
38612,if x in 'bc':
38613,"    # Fall-through by not using elif, but now the default case includes case 'a'!"
38614,elif x in 'xyz':
38615,    # Do yet another thing
38616,else:
38617,    # Do the default
38618,break
38619,if
38620,get
38621,x = the.other.thing
38622,if/elif/else
38623,x in 'bc'
38624,""""" in ""bc"""
38625,True
38626,match
38627,case
38628,switch/case
38629,match/case
38630,switch/case
38631,match something:
38632,    case 1 | 2 | 3:
38633,        # Match 1-3.
38634,    case _:
38635,        # Anything else.
38636,        # 
38637,        # Match will throw an error if this is omitted 
38638,        # and it doesn't match any of the other patterns.
38639,match something:
38640,    case str() | bytes():  
38641,        # Match a string like object.
38642,"    case [str(), int()]:"
38643,        # Match a `str` and an `int` sequence 
38644,        # (`list` or a `tuple` but not a `set` or an iterator). 
38645,"    case [_, _]:"
38646,        # Match a sequence of 2 variables.
38647,"        # To prevent a common mistake, sequence patterns don’t match strings."
38648,"    case {""bandwidth"": 100, ""latency"": 300}:"
38649,        # Match this dict. Extra keys are ignored.
38650,match something:
38651,"    case [name, count]"
38652,        # Match a sequence of any two objects and parse them into the two variables.
38653,"    case [x, y, *rest]:"
38654,"        # Match a sequence of two or more objects, "
38655,        # binding object #3 and on into the rest variable.
38656,    case bytes() | str() as text:
38657,        # Match any string like object and save it to the text variable.
38658,COLOR.RED
38659,match something:
38660,    case 0 | 1 | 2:
38661,"        # Matches 0, 1 or 2 (value)."
38662,"        print(""Small number"")"
38663,    case [] | [_]:
38664,        # Matches an empty or single value sequence (structure).
38665,        # Matches lists and tuples but not sets.
38666,"        print(""A short sequence"")"
38667,    case str() | bytes():
38668,        # Something of `str` or `bytes` type (data type).
38669,"        print(""Something string-like"")"
38670,    case _:
38671,        # Anything not matched by the above.
38672,"        print(""Something else"")"
38673,"choices = {'a': 1, 'b': 2}"
38674,"result = choices.get(key, 'default')"
38675,// C Language version of a simple 'switch/case'.
38676,switch( key ) 
38677,{
38678,    case 'a' :
38679,        result = 1;
38680,        break;
38681,    case 'b' :
38682,        result = 2;
38683,        break;
38684,    default :
38685,        result = -1;
38686,}
38687,"choices = {'a': (1, 2, 3), 'b': (4, 5, 6)}"
38688,"(result1, result2, result3) = choices.get(key, ('default1', 'default2', 'default3'))"
38689,"default = -1; result = choices.get(key, default)"
38690,result=key=='a'?1:key==b?2:-1
38691,result = 1 if key == 'a' else (2 if key == 'b' else 'default')
38692,class switch(object):
38693,    value = None
38694,"    def __new__(class_, value):"
38695,        class_.value = value
38696,        return True
38697,
38698,def case(*args):
38699,    return any((arg == switch.value for arg in args))
38700,while switch(n):
38701,    if case(0):
38702,"        print ""You typed zero."""
38703,        break
38704,"    if case(1, 4, 9):"
38705,"        print ""n is a perfect square."""
38706,        break
38707,    if case(2):
38708,"        print ""n is an even number."""
38709,"    if case(2, 3, 5, 7):"
38710,"        print ""n is a prime number."""
38711,        break
38712,"    if case(6, 8):"
38713,"        print ""n is an even number."""
38714,        break
38715,"    print ""Only single-digit numbers are allowed."""
38716,    break
38717,n = 2
38718,#Result:
38719,#n is an even number.
38720,#n is a prime number.
38721,n = 11
38722,#Result:
38723,#Only single-digit numbers are allowed.
38724,if
38725,case(2)
38726,"case(2, 3, 5, 7)"
38727,class switch(object):
38728,"    def __init__(self, value):"
38729,        self.value = value
38730,        self.fall = False
38731,
38732,    def __iter__(self):
38733,"        """"""Return the match method once, then stop"""""""
38734,        yield self.match
38735,        raise StopIteration
38736,    
38737,"    def match(self, *args):"
38738,"        """"""Indicate whether or not to enter a case suite"""""""
38739,        if self.fall or not args:
38740,            return True
38741,"        elif self.value in args: # changed for v1.5, see below"
38742,            self.fall = True
38743,            return True
38744,        else:
38745,            return False
38746,"# The following example is pretty much the exact use-case of a dictionary,"
38747,# but is included for its simplicity. Note that you can include statements
38748,# in each suite.
38749,v = 'ten'
38750,for case in switch(v):
38751,    if case('one'):
38752,        print 1
38753,        break
38754,    if case('two'):
38755,        print 2
38756,        break
38757,    if case('ten'):
38758,        print 10
38759,        break
38760,    if case('eleven'):
38761,        print 11
38762,        break
38763,"    if case(): # default, could also just omit condition or 'if True'"
38764,"        print ""something else!"""
38765,"        # No need to break here, it'll stop anyway"
38766,
38767,"# break is used here to look as much like the real thing as possible, but"
38768,# elif is generally just as good and more concise.
38769,
38770,"# Empty suites are considered syntax errors, so intentional fall-throughs"
38771,# should contain 'pass'
38772,c = 'z'
38773,for case in switch(c):
38774,    if case('a'): pass # only necessary if the rest of the suite is empty
38775,    if case('b'): pass
38776,    # ...
38777,    if case('y'): pass
38778,    if case('z'):
38779,"        print ""c is lowercase!"""
38780,        break
38781,    if case('A'): pass
38782,    # ...
38783,    if case('Z'):
38784,"        print ""c is uppercase!"""
38785,        break
38786,    if case(): # default
38787,"        print ""I dunno what c was!"""
38788,
38789,"# As suggested by Pierre Quentel, you can even expand upon the"
38790,# functionality of the classic 'case' statement by matching multiple
38791,# cases in a single shot. This greatly benefits operations such as the
38792,# uppercase/lowercase example above:
38793,import string
38794,c = 'A'
38795,for case in switch(c):
38796,    if case(*string.lowercase): # note the * for unpacking as arguments
38797,"        print ""c is lowercase!"""
38798,        break
38799,    if case(*string.uppercase):
38800,"        print ""c is uppercase!"""
38801,        break
38802,"    if case('!', '?', '.'): # normal argument passing style also applies"
38803,"        print ""c is a sentence terminator!"""
38804,        break
38805,    if case(): # default
38806,"        print ""I dunno what c was!"""
38807,with foo as case
38808,for case in foo
38809,class Switch:
38810,"    def __init__(self, value):"
38811,        self.value = value
38812,        self._entered = False
38813,        self._broken = False
38814,        self._prev = None
38815,
38816,    def __enter__(self):
38817,        return self
38818,
38819,"    def __exit__(self, type, value, traceback):"
38820,        return False # Allows a traceback to occur
38821,
38822,"    def __call__(self, *values):"
38823,        if self._broken:
38824,            return False
38825,        
38826,        if not self._entered:
38827,            if values and self.value not in values:
38828,                return False
38829,"            self._entered, self._prev = True, values"
38830,            return True
38831,        
38832,        if self._prev is None:
38833,            self._prev = values
38834,            return True
38835,        
38836,        if self._prev != values:
38837,            self._broken = True
38838,            return False
38839,        
38840,        if self._prev == values:
38841,            self._prev = None
38842,            return False
38843,    
38844,    @property
38845,    def default(self):
38846,        return self()
38847,# Prints 'bar' then 'baz'.
38848,with Switch(2) as case:
38849,    while case(0):
38850,        print('foo')
38851,"    while case(1, 2, 3):"
38852,        print('bar')
38853,"    while case(4, 5):"
38854,        print('baz')
38855,        break
38856,    while case.default:
38857,        print('default')
38858,        break
38859,for case in switch()
38860,with switch() as case
38861,with
38862,break
38863,"if c in set(range(0,9)): print ""digit"" elif c in set(map(chr, range(ord('a'), ord('z')))): print ""lowercase"""
38864,class Switch:
38865,"    def __init__(self, value):"
38866,        self.value = value
38867,
38868,    def __enter__(self):
38869,        return self
38870,
38871,"    def __exit__(self, type, value, traceback):"
38872,        return False # Allows a traceback to occur
38873,
38874,"    def __call__(self, *values):"
38875,        return self.value in values
38876,
38877,
38878,from datetime import datetime
38879,
38880,with Switch(datetime.today().weekday()) as case:
38881,    if case(0):
38882,        # Basic usage of switch
38883,"        print(""I hate mondays so much."")"
38884,        # Note there is no break needed here
38885,"    elif case(1,2):"
38886,        # This switch also supports multiple conditions (in one line)
38887,"        print(""When is the weekend going to be here?"")"
38888,"    elif case(3,4):"
38889,"        print(""The weekend is near."")"
38890,    else:
38891,        # Default would occur here
38892,"        print(""Let's go have fun!"") # Didn't use case for example purposes"
38893,value
38894,case.value
38895,dict
38896,class SMTP:
38897,"    def lookupMethod(self, command):"
38898,"        return getattr(self, 'do_' + command.upper(), None)"
38899,"    def do_HELO(self, rest):"
38900,        return 'Howdy ' + rest
38901,"    def do_QUIT(self, rest):"
38902,        return 'Bye'
38903,
38904,SMTP().lookupMethod('HELO')('foo.bar.com') # => 'Howdy foo.bar.com'
38905,SMTP().lookupMethod('QUIT')('') # => 'Bye'
38906,state_
38907,self.state
38908,do_
38909,do_
38910,HELO
38911,twisted/mail/smtp.py
38912,class SMTP:
38913,    # ...
38914,
38915,"    def do_UNKNOWN(self, rest):"
38916,"        raise NotImplementedError, 'received unknown command'"
38917,
38918,"    def state_COMMAND(self, line):"
38919,        line = line.strip()
38920,"        parts = line.split(None, 1)"
38921,        if parts:
38922,            method = self.lookupMethod(parts[0]) or self.do_UNKNOWN
38923,            if len(parts) == 2:
38924,                return method(parts[1])
38925,            else:
38926,                return method('')
38927,        else:
38928,"            raise SyntaxError, 'bad syntax'"
38929,
38930,SMTP().state_COMMAND('   HELO   foo.bar.com  ') # => Howdy foo.bar.com
38931,'  HELO   foo.bar.com '
38932,'QUIT'
38933,'RCPT TO: foo'
38934,parts
38935,"['HELO', 'foo.bar.com']"
38936,parts[0]
38937,state_COMMAND
38938,"getattr(self, 'state_' + self.mode)"
38939,if something:
38940,"    return ""first thing"""
38941,elif somethingelse:
38942,"    return ""second thing"""
38943,elif yetanotherthing:
38944,"    return ""third thing"""
38945,else:
38946,"    return ""default thing"""
38947,result = {
38948,"  'a': obj.increment(x),"
38949,  'b': obj.decrement(x)
38950,"}.get(value, obj.default(x))"
38951,"func, args = {"
38952,"  'a' : (obj.increment, (x,)),"
38953,"  'b' : (obj.decrement, (x,)),"
38954,"}.get(value, (obj.default, (x,)))"
38955,
38956,result = func(*args)
38957,result = {
38958,"    'case1':     foo1, "
38959,"    'case2':     foo2,"
38960,"    'case3':     foo3,"
38961,}.get(option)(parameters_optional)
38962,option = number['type']
38963,result = {
38964,"    'number':     value_of_int,  # result = value_of_int(number['value'])"
38965,"    'text':       value_of_text, # result = value_of_text(number['value'])"
38966,"    'binary':     value_of_bin,  # result = value_of_bin(number['value'])"
38967,}.get(option)(value['value'])
38968,option = number['type']
38969,result = {
38970,"    'number':     func_for_number, # result = func_for_number()"
38971,"    'text':       func_for_text,   # result = func_for_text()"
38972,"    'binary':     func_for_bin,    # result = func_for_bin()"
38973,}.get(option)()
38974,option = number['type']
38975,result = {
38976,"    'number':    lambda: 10,       # result = 10"
38977,"    'text':      lambda: 'ten',    # result = 'ten'"
38978,"    'binary':    lambda: 0b101111, # result = 47"
38979,}.get(option)()
38980,foo2()
38981,foo1()
38982,foo3()
38983,default()
38984,get(option)()
38985,def first_case():
38986,"    print ""first"""
38987,
38988,def second_case():
38989,"    print ""second"""
38990,
38991,def third_case():
38992,"    print ""third"""
38993,
38994,mycase = {
38995,"'first': first_case, #do not use ()"
38996,"'second': second_case, #do not use ()"
38997,'third': third_case #do not use ()
38998,}
38999,myfunc = mycase['first']
39000,myfunc()
39001,macro switch(arg1):
39002,    while True:
39003,        cont=False
39004,        val=%arg1%
39005,        socket case(arg2):
39006,            if val==%arg2% or cont:
39007,                cont=True
39008,                socket
39009,        socket else:
39010,            socket
39011,        break
39012,a=3
39013,switch(a):
39014,    case(0):
39015,"        print(""Zero"")"
39016,    case(1):
39017,"        print(""Smaller than 2""):"
39018,        break
39019,    else:
39020,"        print (""greater than 1"")"
39021,a=3
39022,while True:
39023,    cont=False
39024,    if a==0 or cont:
39025,        cont=True
39026,"        print (""Zero"")"
39027,    if a==1 or cont:
39028,        cont=True
39029,"        print (""Smaller than 2"")"
39030,        break
39031,"    print (""greater than 1"")"
39032,    break
39033,while True:
39034,break
39035,while True:
39036,break
39037,cont
39038,while True:
39039,break
39040,elif
39041,dict
39042,visit_
39043,"def dispatch(self, value):"
39044,    method_name = 'visit_' + str(value)
39045,"    method = getattr(self, method_name)"
39046,    method()
39047,if x == 1: print('first')
39048,elif x == 2: print('second')
39049,elif x == 3: print('third')
39050,else: print('did not place')
39051,dataclass
39052,enum
39053,elif
39054,def f(x):
39055,    try:
39056,        return {
39057,"            'a': 1,"
39058,"            'b': 2,"
39059,        }[x]
39060,    except KeyError:
39061,        return 'default'
39062,'default'
39063,get
39064,switch ...parameter...
39065,case p1: v1; break;
39066,case p2: v2; break;
39067,default: v3;
39068,(lambda x: v1 if p1(x) else v2 if p2(x) else v3)
39069,(lambda x:
39070,     v1 if p1(x) else
39071,     v2 if p2(x) else
39072,     v3)
39073,parameter
39074,p1==parameter
39075,f = lambda x: 'a' if x==0 else 'b' if x==1 else 'c'
39076,f(2)
39077,'c'
39078,f(1)
39079,'b'
39080,f(0)
39081,'a'
39082,True
39083,False
39084,result = {
39085,"  'a': lambda x: x * 5,"
39086,"  'b': lambda x: x + 7,"
39087,  'c': lambda x: x - 2
39088,"}.get(whatToUse, lambda x: x - 22)(value)"
39089,".get('c', lambda x: x - 22)(23)"
39090,"""lambda x: x - 2"""
39091,x=23
39092,".get('xxx', lambda x: x - 22)(44)"
39093,"""lambda x: x - 22"""
39094,x=44
39095,#!/usr/bin/env python
39096,
39097,
39098,def case1():
39099,"    print(""This is case 1"")"
39100,
39101,def case2():
39102,"    print(""This is case 2"")"
39103,
39104,def case3():
39105,"    print(""This is case 3"")"
39106,
39107,
39108,token_dict = {
39109,"    ""case1"" : case1,"
39110,"    ""case2"" : case2,"
39111,"    ""case3"" : case3,"
39112,}
39113,
39114,
39115,def main():
39116,"    cases = (""case1"", ""case3"", ""case2"", ""case1"")"
39117,    for case in cases:
39118,        token_dict[case]()
39119,
39120,
39121,if __name__ == '__main__':
39122,    main()
39123,This is case 1
39124,This is case 3
39125,This is case 2
39126,This is case 1
39127,"l = ['Dog', 'Cat', 'Bird', 'Bigfoot',"
39128,"     'Dragonfly', 'Snake', 'Bat', 'Loch Ness Monster']"
39129,
39130,for x in l:
39131,"    if x in ('Dog', 'Cat'):"
39132,"        x += "" has four legs"""
39133,"    elif x in ('Bat', 'Bird', 'Dragonfly'):"
39134,"        x += "" has wings."""
39135,"    elif x in ('Snake',):"
39136,"        x += "" has a forked tongue."""
39137,    else:
39138,"        x += "" is a big mystery by default."""
39139,    print(x)
39140,
39141,print()
39142,
39143,for x in range(10):
39144,"    if x in (0, 1):"
39145,"        x = ""Values 0 and 1 caught here."""
39146,"    elif x in (2,):"
39147,"        x = ""Value 2 caught here."""
39148,"    elif x in (3, 7, 8):"
39149,"        x = ""Values 3, 7, 8 caught here."""
39150,"    elif x in (4, 6):"
39151,"        x = ""Values 4 and 6 caught here"""
39152,    else:
39153,"        x = ""Values 5 and 9 caught in default."""
39154,    print(x)
39155,Dog has four legs
39156,Cat has four legs
39157,Bird has wings.
39158,Bigfoot is a big mystery by default.
39159,Dragonfly has wings.
39160,Snake has a forked tongue.
39161,Bat has wings.
39162,Loch Ness Monster is a big mystery by default.
39163,
39164,Values 0 and 1 caught here.
39165,Values 0 and 1 caught here.
39166,Value 2 caught here.
39167,"Values 3, 7, 8 caught here."
39168,Values 4 and 6 caught here
39169,Values 5 and 9 caught in default.
39170,Values 4 and 6 caught here
39171,"Values 3, 7, 8 caught here."
39172,"Values 3, 7, 8 caught here."
39173,Values 5 and 9 caught in default.
39174,break
39175,case
39176,# simple case alternative
39177,
39178,some_value = 5.0
39179,
39180,# this while loop block simulates a case block
39181,
39182,# case
39183,while True:
39184,
39185,    # case 1
39186,    if some_value > 5:
39187,        print ('Greater than five')
39188,        break
39189,
39190,    # case 2
39191,    if some_value == 5:
39192,        print ('Equal to five')
39193,        break
39194,
39195,    # else case 3
39196,    print ( 'Must be less than 5')
39197,    break
39198,def f(x):
39199,"    dictionary = {'a':1, 'b':2, 'c':3}"
39200,"    return dictionary.get(x,'Not Found') "
39201,##Returns the value for the letter x;returns 'Not Found' if x isn't a key in the dictionary
39202,def numbers_to_strings(argument):
39203,    switcher = {
39204,"        0: ""zero"","
39205,"        1: ""one"","
39206,"        2: ""two"","
39207,    }
39208,"    return switcher.get(argument, ""nothing"")"
39209,function(argument){
39210,    switch(argument) {
39211,        case 0:
39212,"            return ""zero"";"
39213,        case 1:
39214,"            return ""one"";"
39215,        case 2:
39216,"            return ""two"";"
39217,        default:
39218,"            return ""nothing"";"
39219,    }
39220,}
39221,x
39222,results[value](value)
39223,In [2]: result = {
39224,"    ...:   'a': lambda x: 'A',"
39225,"    ...:   'b': lambda x: 'B',"
39226,    ...:   'c': lambda x: 'C'
39227,    ...: }
39228,    ...: result['a']('a')
39229,    ...: 
39230,Out[2]: 'A'
39231,
39232,In [3]: result = {
39233,"    ...:   'a': lambda : 'A',"
39234,"    ...:   'b': lambda : 'B',"
39235,"    ...:   'c': lambda : 'C',"
39236,    ...:   None: lambda : 'Nothing else matters'
39237,
39238,    ...: }
39239,    ...: result['a']()
39240,    ...: 
39241,Out[3]: 'A'
39242,None
39243,switch ; case else
39244,result[None]()
39245,"result = {'a': 100, None:5000}; result[None]"
39246,None:
39247,default:
39248,def f(x):
39249,     return 1 if x == 'a' else\
39250,            2 if x in 'bcd' else\
39251,            0 #default
39252,for case in [expression]:
39253,    if case == 1:
39254,        print(end='Was 1. ')
39255,
39256,    if case == 2:
39257,        print(end='Was 2. ')
39258,        break
39259,
39260,"    if case in (1, 2):"
39261,        print(end='Was 1 or 2. ')
39262,
39263,    print(end='Was something. ')
39264,Was 1. Was 1 or 2. Was something.
39265,expression
39266,1
39267,Was 2.
39268,expression
39269,2
39270,Was something.
39271,expression
39272,def ToUpper(lcChar):
39273,    if (lcChar == 'a' or lcChar == 'A'):
39274,        return 'A'
39275,    elif (lcChar == 'b' or lcChar == 'B'):
39276,        return 'B'
39277,    ...
39278,    elif (lcChar == 'z' or lcChar == 'Z'):
39279,        return 'Z'
39280,    else:
39281,        return None        # or something
39282,def ConvertToReason(code):
39283,    if (code == 200):
39284,        return 'Okay'
39285,    elif (code == 400):
39286,        return 'Bad Request'
39287,    elif (code == 404):
39288,        return 'Not Found'
39289,    else:
39290,        return None
39291,"def decision_time( key, *args, **kwargs):"
39292,    def action1()
39293,"        """"""This function is a closure - and has access to all the arguments"""""""
39294,        pass
39295,    def action2()
39296,"        """"""This function is a closure - and has access to all the arguments"""""""
39297,        pass
39298,    def action3()
39299,"        """"""This function is a closure - and has access to all the arguments"""""""
39300,        pass
39301,
39302,"   return {1:action1, 2:action2, 3:action3}.get(key,default)()"
39303,"def switch1(value, options):"
39304,  if value in options:
39305,    options[value]()
39306,def sample1(x):
39307,  local = 'betty'
39308,"  switch1(x, {"
39309,"    'a': lambda: print(""hello""),"
39310,    'b': lambda: (
39311,"      print(""goodbye,"" + local),"
39312,"      print(""!"")),"
39313,    })
39314,"def switch(value, *maps):"
39315,  options = {}
39316,  for m in maps:
39317,    options.update(m)
39318,  if value in options:
39319,    options[value]()
39320,  elif None in options:
39321,    options[None]()
39322,def sample(x):
39323,"  switch(x, {"
39324,"    _: lambda: print(""other"") "
39325,    for _ in 'cdef'
39326,"    }, {"
39327,"    'a': lambda: print(""hello""),"
39328,    'b': lambda: (
39329,"      print(""goodbye,""),"
39330,"      print(""!"")),"
39331,"    None: lambda: print(""I dunno"")"
39332,    })
39333,def case(callable):
39334,"    """"""switch-case decorator"""""""
39335,    class case_class(object):
39336,"        def __init__(self, *args, **kwargs):"
39337,            self.args = args
39338,            self.kwargs = kwargs
39339,
39340,        def do_call(self):
39341,"            return callable(*self.args, **self.kwargs)"
39342,
39343,return case_class
39344,
39345,"def switch(key, cases, default=None):"
39346,"    """"""switch-statement"""""""
39347,    ret = None
39348,    try:
39349,        ret = case[key].do_call()
39350,    except KeyError:
39351,        if default:
39352,            ret = default.do_call()
39353,    finally:
39354,        return ret
39355,@case
39356,@case
39357,def case_1(arg1):
39358,"    print 'case_1: ', arg1"
39359,
39360,@case
39361,"def case_2(arg1, arg2):"
39362,    print 'case_2'
39363,"    return arg1, arg2"
39364,
39365,@case
39366,"def default_case(arg1, arg2, arg3):"
39367,"    print 'default_case: ', arg1, arg2, arg3"
39368,
39369,"ret = switch(somearg, {"
39370,"    1: case_1('somestring'),"
39371,"    2: case_2(13, 42)"
39372,"}, default_case(123, 'astring', 3.14))"
39373,
39374,print ret
39375,pip install NeoPySwitch
39376,u''
39377,r''
39378,ur''
39379,u''
39380,'r'
39381,\
39382,r'...'
39383,ur'...'
39384,r'...'
39385,r'''...'''
39386,"r""..."""
39387,"r""""""..."""""""
39388,u'...'
39389,'...'
39390,>>> sys.getsizeof('ciao')
39391,28
39392,>>> sys.getsizeof(u'ciao')
39393,34
39394,u
39395,r
39396,ur'str'
39397,ru'str'
39398,r
39399,\ 
39400,SyntaxError: EOL while scanning string literal
39401,\\ 
39402,\ 
39403,sys.getsizeof('cioa') == sys.getsizeof(r'cioa') == sys.getsizeof(u'cioa')
39404,type('cioa') == type(r'cioa') == type(u'cioa')
39405,sys.getsizeof('\ncioa') == sys.getsizeof(u'\ncioa') != sys.getsizeof(r'\ncioa')
39406,str
39407,unicode
39408,u
39409,str
39410,u
39411,unicode
39412,r
39413,r
39414,r
39415,ur
39416,str()
39417,str
39418,"r""\"""
39419,'\'
39420,r'\'
39421,'\'
39422,r'xxxxxx\'
39423,str
39424,r'\'
39425,SyntaxError: unterminated string literal
39426,"Even in a raw literal, quotes can be escaped with a backslash, but the backslash remains in the result..."
39427,unicode
39428,str
39429,"len(r""\n"")"
39430,"r""\"""
39431,"""\\n"""
39432,"r""\n"""
39433,32
39434,0x20
39435,0b100000
39436,">>> u = ur""\n"""
39437,">>> print type(u), len(u)"
39438,<type 'unicode'> 2
39439,u
39440,'hello world'
39441,\n
39442,'hello\nworld'
39443,'New updates are ready in c:\windows\updates\new'
39444,'In this lesson we will learn what the \n escape sequence does.'
39445,r
39446,r'hello\nworld'
39447,"string     ::=  ""'"" stringitem* ""'"""
39448,stringitem ::=  stringchar | escapeseq
39449,"stringchar ::=  <any source character except ""\"" or newline or the quote>"
39450,"escapeseq  ::=  ""\"" <any source character>"
39451,'hello'world'
39452,'hello world\'
39453,x=chr(92)
39454,"print type(x), len(x) # <type 'str'> 1"
39455,y='\\'
39456,"print type(y), len(y) # <type 'str'> 1"
39457,x==y   # True
39458,x is y # False
39459,x is y
39460,x is y
39461,True
39462,x == y
39463,s1 == s2
39464,True
39465,s1 is s2
39466,False
39467,is
39468,>>> s1 = 'text'
39469,>>> s2 = 'text'
39470,>>> s1 is s2
39471,True
39472,"input = raw_input(""Decide (y/n): "")"
39473,if input == 'y':
39474,if input is 'y':
39475,is
39476,==
39477,>>> a = 'pub'
39478,">>> b = ''.join(['p', 'u', 'b'])"
39479,>>> a == b
39480,True
39481,>>> a is b
39482,False
39483,a is b
39484,id(a) == id(b)
39485,==
39486,.equals()
39487,==
39488,==
39489,None
39490,is
39491,==
39492,is
39493,==
39494,is
39495,is
39496,==
39497,is
39498,==
39499,is
39500,is
39501,==
39502,is
39503,==
39504,is
39505,==
39506,sys.intern
39507,>>> from sys import intern
39508,>>> a = intern('a')
39509,>>> a2 = intern('a')
39510,>>> a is a2
39511,True
39512,is
39513,is
39514,intern
39515,sys
39516,is
39517,==
39518,is
39519,person
39520,class Person(object):
39521,"   def __init__(self, name, age):"
39522,       self.name = name
39523,       self.age = age
39524,
39525,"   def __eq__(self, other):"
39526,       return self.name == other.name and self.age == other.age
39527,
39528,"jack1 = Person('Jack', 23)"
39529,"jack2 = Person('Jack', 23)"
39530,
39531,jack1 == jack2 # True
39532,jack1 is jack2 # False
39533,jack1.age = 99
39534,jack2.age
39535,jack1 is not jack2
39536,jack1 == jack2
39537,if x is None:
39538,    # Some clauses
39539,>>> a = 1
39540,>>> b = 1
39541,>>> b is a
39542,True
39543,>>> a = 6000
39544,>>> b = 6000
39545,>>> b is a
39546,False
39547,is
39548,==
39549,>>> s1 = u'public'
39550,>>> s2 = 'public'
39551,>>> s1 is s2
39552,False
39553,>>> s1 == s2
39554,True
39555,s1
39556,s2
39557,<type 'unicode'>
39558,<type 'str'>
39559,s1
39560,str
39561,is
39562,==
39563,True
39564,==
39565,is
39566,>>> s = 'one'
39567,>>> s2 = 'two'
39568,>>> s is s2
39569,False
39570,">>> s2 = s2.replace('two', 'one')"
39571,>>> s2
39572,'one'
39573,>>> s2 is s
39574,False
39575,>>> 
39576,s
39577,.replace()
39578,s2 = s2.replace()
39579,s2
39580,s2
39581,"s = s.replace('one', 'one')"
39582,==
39583,is
39584,>>> a = 'banana'
39585,>>> b = 'banana'
39586,>>> a is b
39587,True
39588,a
39589,b
39590,>>> a = 'a longer banana'
39591,>>> b = 'a longer banana'
39592,">>> a == b, a is b"
39593,"(True, False)"
39594,">>> a = [1, 2, 3]"
39595,">>> b = [1, 2, 3]"
39596,>>> a is b
39597,False
39598,a
39599,b = a
39600,">>> a = [1, 2, 3]"
39601,>>> b = a
39602,>>> b is a
39603,True
39604,is
39605,int
39606,tuple
39607,is
39608,==
39609,is
39610,==
39611,is
39612,==
39613,a is b
39614,a == b
39615,>>> nan = float('nan')
39616,>>> nan is nan
39617,True
39618,>>> nan == nan
39619,False
39620,is
39621,if True:
39622,    if False:
39623,        print('foo')
39624,   print('bar')
39625,IndentationError
39626,"  File ""script.py"", line 4"
39627,    print('bar')
39628,               ^
39629,IndentationError: unindent does not match any outer indentation level
39630,IndentationError: unexpected indent
39631,IndentationError: expected an indented block
39632,TabError: inconsistent use of tabs and spaces in indentation
39633,IndentationError: unindent does not match any outer indentation level
39634,else:
39635,for
39636,while
39637,if:
39638,{}
39639,IndentationError
39640,TabError
39641,{}
39642,def perm(l):
39643,        # Compute the list of all permutations of l
39644,    if len(l) <= 1:
39645,                  return [l]
39646,    r = []
39647,    for i in range(len(l)):
39648,             s = l[:i] + l[i+1:]
39649,             p = perm(s)
39650,             for x in p:
39651,              r.append(l[i:i+1] + x)
39652,    return r
39653,def perm(l):
39654,    # Compute the list of all permutations of l
39655,    if len(l) <= 1:
39656,        return [l]
39657,    r = []
39658,    for i in range(len(l)):
39659,        s = l[:i] + l[i+1:]
39660,        p = perm(s)
39661,        for x in p:
39662,            r.append(l[i:i+1] + x)
39663,    return r
39664,TabError
39665,-t
39666,-tt
39667,>>>  print('Hello') # this is indented 
39668,"  File ""<stdin>"", line 1"
39669,    print('Hello') # this is indented 
39670,    ^
39671,IndentationError: unexpected indent
39672,can_drive = True
39673,if
39674,>>> age = 10
39675,>>> can_drive = None
39676,>>> 
39677,>>> if age >= 18:
39678,...     print('You can drive')
39679,...      can_drive = True # incorrectly indented
39680,"  File ""<stdin>"", line 3"
39681,    can_drive = True # incorrectly indented
39682,    ^
39683,IndentationError: unexpected indent
39684,print
39685,>>> print('Hello') # simply unindent the line
39686,Hello
39687,if
39688,can_drive = True
39689,if
39690,>>> age = 10
39691,>>> can_drive = None
39692,>>> 
39693,>>> if age >= 18:
39694,...     print('You can drive')
39695,...     can_drive = True # indent this line at the same level.
39696,... 
39697,SyntaxError: unexpected EOF while parsing
39698,if <condition>:
39699,while <condition>:
39700,if
39701,>>> if True:
39702,... 
39703,"  File ""<stdin>"", line 2"
39704,    
39705,    ^
39706,IndentationError: expected an indented block
39707,for
39708,for
39709,for
39710,">>> names = ['sarah', 'lucy', 'michael']"
39711,>>> for name in names:
39712,... print(name)
39713,"  File ""<stdin>"", line 2"
39714,    print(name)
39715,        ^
39716,IndentationError: expected an indented block
39717,>>> if True:
39718,...     # TODO
39719,...
39720,"  File ""<stdin>"", line 3"
39721,
39722,    ^
39723,IndentationError: expected an indented block
39724,">>> names = ['sarah', 'lucy', 'michael']"
39725,>>> for name in names:
39726,...     print(name) # The for loop body is now correctly indented.
39727,... 
39728,sarah
39729,lucy
39730,michael
39731,pass
39732,pass
39733,pass
39734,def f(arg): pass    # a function that does nothing (yet)
39735,
39736,class C: pass       # a class with no methods (yet)
39737,if
39738,pass
39739,>>> if True:
39740,...     pass # We don't want to define a body.
39741,... 
39742,>>> 
39743,print
39744,>>> if True:
39745,...     if True:
39746,...         print('yes')
39747,...    print()
39748,"  File ""<stdin>"", line 4"
39749,    print()
39750,          ^
39751,IndentationError: unindent does not match any outer indentation level
39752,if
39753,if
39754,>>> if True:
39755,...     if True:
39756,...         print('yes')
39757,...     print() # indentation level now matches former statement's level.
39758,... 
39759,yes
39760,
39761,>>> 
39762,IndentationError
39763,TabError
39764,>>> if True:
39765,...     if True:
39766,...         print()
39767,...     print()
39768,...     print()
39769,"  File ""<stdin>"", line 5"
39770,    print()
39771,          ^
39772,TabError: inconsistent use of tabs and spaces in indentation
39773,TabError
39774,>>> if True:
39775,...     if True: # tab
39776,"...         pass # tab, then 4 spaces"
39777,... 
39778,>>> 
39779,IndentationError
39780,TabError
39781,>>> if True:
39782,...     pass # tab
39783,...     pass # 4 spaces
39784,"  File ""<stdin>"", line 3"
39785,    pass # 4 spaces
39786,                ^
39787,IndentationError: unindent does not match any outer indentation level
39788,-t
39789,-tt
39790,SyntaxError
39791,if True:
39792,    pass
39793,pass # oops! this statement should be indented!.
39794,else:
39795,    pass
39796,SyntaxError
39797,Traceback (most recent call last):
39798,"  File ""python"", line 4"
39799,    else:
39800,       ^
39801,SyntaxError: invalid syntax
39802,SyntaxError
39803,pass
39804,pass
39805,if
39806,else
39807,def
39808,{
39809,"    ""tab_size"": 4,"
39810,"    ""translate_tabs_to_spaces"": true"
39811,}
39812,if True:
39813,    if False:
39814,        print('foo')
39815,   print('bar')
39816,if True:
39817,    if False:
39818,        print('foo')
39819,    print('bar')
39820,\t
39821,View → Indentation → Convert Indentation to Spaces
39822,"""2008-09-03T20:56:35.450686Z"""
39823,datetime
39824,strptime
39825,isoparse
39826,dateutil.parser.isoparse
39827,>>> import dateutil.parser
39828,>>> dateutil.parser.isoparse('2008-09-03T20:56:35.450686Z') # RFC 3339 format
39829,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())"
39830,>>> dateutil.parser.isoparse('2008-09-03T20:56:35.450686') # ISO 8601 extended format
39831,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)"
39832,>>> dateutil.parser.isoparse('20080903T205635.450686') # ISO 8601 basic format
39833,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)"
39834,">>> dateutil.parser.isoparse('20080903') # ISO 8601 basic format, date only"
39835,"datetime.datetime(2008, 9, 3, 0, 0)"
39836,dateutil.parser.parse
39837,isoparse
39838,datetime.datetime.fromisoformat
39839,dateutil.parser.isoparse
39840,fromisoformat
39841,python-dateutil
39842,dateutil
39843,pip install python-dateutil
39844,dateutil.parser
39845,datetime
39846,datetime.isoformat()
39847,datetime.fromisoformat(date_string)
39848,datetime
39849,date_string
39850,date.isoformat()
39851,datetime.isoformat()
39852,YYYY-MM-DD[*HH[:MM[:SS[.mmm[mmm]]]][+HH:MM[:SS[.ffffff]]]]
39853,*
39854,datetime.isoformat()
39855,>>> from datetime import datetime
39856,>>> datetime.fromisoformat('2011-11-04')
39857,"datetime.datetime(2011, 11, 4, 0, 0)"
39858,datetime
39859,tzinfo
39860,datetime.fromisoformat()
39861,isoformat
39862,"""2008-09-03T20:56:35.450686Z"""
39863,Z
39864,"""2008-09-03T20:56:35.450686"""
39865,Z
39866,"date_string.replace(""Z"", ""+00:00"")"
39867,">>> datetime.datetime.strptime(""2008-09-03T20:56:35.450686Z"", ""%Y-%m-%dT%H:%M:%S.%fZ"")"
39868,strptime
39869,"datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')"
39870,datetime.datetime.strptime
39871,2008-09-03T20:56:35.450686Z
39872,strptime
39873,Z
39874,+HH:MM
39875,-HH:MM
39876,+05:00
39877,-10:30
39878,2008-09-03T20:56:35.450686Z
39879,2008-09-03T20:56:35.450686+05:00
39880,2008-09-03T20:56:35.450686-10:30
39881,strptime
39882,strftime
39883,%z
39884,%z
39885,>>> from datetime import datetime
39886,">>> datetime.strptime(""2008-09-03T20:56:35.450686Z"", ""%Y-%m-%dT%H:%M:%S.%f%z"")"
39887,Traceback (most recent call last):
39888,"  File """", line 1, in "
39889,"  File ""/usr/lib/python3.4/_strptime.py"", line 500, in _strptime_datetime"
39890,"    tt, fraction = _strptime(data_string, format)"
39891,"  File ""/usr/lib/python3.4/_strptime.py"", line 337, in _strptime"
39892,"    (data_string, format))"
39893,ValueError: time data '2008-09-03T20:56:35.450686Z' does not match format '%Y-%m-%dT%H:%M:%S.%f%z'
39894,">>> datetime.strptime(""2008-09-03T20:56:35.450686+05:00"", ""%Y-%m-%dT%H:%M:%S.%f%z"")"
39895,Traceback (most recent call last):
39896,"  File """", line 1, in "
39897,"  File ""/usr/lib/python3.4/_strptime.py"", line 500, in _strptime_datetime"
39898,"    tt, fraction = _strptime(data_string, format)"
39899,"  File ""/usr/lib/python3.4/_strptime.py"", line 337, in _strptime"
39900,"    (data_string, format))"
39901,ValueError: time data '2008-09-03T20:56:35.450686+05:00' does not match format '%Y-%m-%dT%H:%M:%S.%f%z'
39902,strptime
39903,%z
39904,strptime
39905,Z
39906,Z
39907,datetime
39908,">>> datetime.strptime(""2008-09-03T20:56:35.450686Z"", ""%Y-%m-%dT%H:%M:%S.%fZ"")"
39909,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)"
39910,">>> datetime.strptime(""2008-09-03T20:56:35.450686+05:00"", ""%Y-%m-%dT%H:%M:%S.%fZ"")"
39911,Traceback (most recent call last):
39912,"  File """", line 1, in "
39913,"  File ""/usr/lib/python3.4/_strptime.py"", line 500, in _strptime_datetime"
39914,"    tt, fraction = _strptime(data_string, format)"
39915,"  File ""/usr/lib/python3.4/_strptime.py"", line 337, in _strptime"
39916,"    (data_string, format))"
39917,ValueError: time data '2008-09-03T20:56:35.450686+05:00' does not match format '%Y-%m-%dT%H:%M:%S.%fZ'
39918,strptime
39919,strptime()
39920,"iso8601.parse_date(""2008-09-03T20:56:35.450686Z"")"
39921,import datetime
39922,"datetime.datetime.strptime('2018-01-31T09:24:31.488670+00:00', '%Y-%m-%dT%H:%M:%S.%f%z')"
39923,datetime.fromisoformat()
39924,datetime.fromisoformat()
39925,datetime.datetime.isoformat('2018-01-31T09:24:31.488670+00:00')
39926,datetime.fromisoformat()
39927,datetime.isoformat()
39928,ValueError: time data '2018-01-31T09:24:31.488670+00:00' does not match format '%Y-%m-%dT%H:%M:%S.%f%z'
39929,%z
39930,+00:00
39931,+0000
39932,%z
39933,">>> datetime.datetime.strptime(""2008-08-12T12:20:30.656234Z"", ""%Y-%m-%dT%H:%M:%S.Z"")"
39934,ValueError: time data did not match format:  data=2008-08-12T12:20:30.656234Z  fmt=%Y-%m-%dT%H:%M:%S.Z
39935,>>> def gt(dt_str):
39936,"        dt, _, us= dt_str.partition(""."")"
39937,"        dt= datetime.datetime.strptime(dt, ""%Y-%m-%dT%H:%M:%S"")"
39938,"        us= int(us.rstrip(""Z""), 10)"
39939,        return dt + datetime.timedelta(microseconds=us)
39940,
39941,">>> gt(""2008-08-12T12:20:30.656234Z"")"
39942,"datetime.datetime(2008, 8, 12, 12, 20, 30, 656234)"
39943,""""""
39944,"""Z"""
39945,'Z'
39946,'+00:00'
39947,fromisoformat
39948,from datetime import datetime
39949,
39950,"s = ""2008-09-03T20:56:35.450686Z"""
39951,
39952,"datetime.fromisoformat(s.replace('Z', '+00:00'))"
39953,"# datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=datetime.timezone.utc)"
39954,strptime
39955,'Z'
39956,fromisoformat
39957,"%timeit datetime.fromisoformat(s.replace('Z', '+00:00'))"
39958,"388 ns ± 48.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
39959,
39960,%timeit dateutil.parser.isoparse(s)
39961,"11 µs ± 1.05 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
39962,
39963,"%timeit datetime.strptime(s, '%Y-%m-%dT%H:%M:%S.%f%z')"
39964,"15.8 µs ± 1.32 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
39965,
39966,%timeit dateutil.parser.parse(s)
39967,"87.8 µs ± 8.54 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
39968,fromisoformat
39969,+00:00
39970,Z
39971,Z+00:00
39972,Z
39973,fromisoformat
39974,+05:30
39975,import re
39976,import datetime
39977,"s = ""2008-09-03T20:56:35.450686Z"""
39978,"d = datetime.datetime(*map(int, re.split(r'[^\d]', s)[:-1]))"
39979,"datetime.datetime(*map(int, re.findall('\d+', s))"
39980,>>> import arrow
39981,">>> date = arrow.get(""2008-09-03T20:56:35.450686Z"")"
39982,>>> date.datetime
39983,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())"
39984,python-dateutil
39985,>>> import dateutil.parser as dp
39986,>>> t = '1984-06-02T19:05:00.000Z'
39987,>>> parsed_t = dp.parse(t)
39988,>>> print(parsed_t)
39989,"datetime.datetime(1984, 6, 2, 19, 5, tzinfo=tzutc())"
39990,455051100
39991,import ciso8601
39992,ciso8601.parse_datetime('2014-01-09T21:48:00.921000+05:30')
39993,datetime.strptime()
39994,datetime.strptime()
39995,datetime.fromisoformat()
39996,"def from_utc(utcTime,fmt=""%Y-%m-%dT%H:%M:%S.%fZ""):"
39997,"    """""""
39998,    Convert UTC time string to time.struct_time
39999,"    """""""
40000,"    # change datetime.datetime to time, return time.struct_time type"
40001,"    return datetime.datetime.strptime(utcTime, fmt)"
40002,"from_utc(""2007-03-04T21:08:12.123Z"")"
40003,"datetime.datetime(2007, 3, 4, 21, 8, 12, 123000)"
40004,strptime
40005,toISOString
40006,dateutil
40007,DateTimeField
40008,"from datetime import datetime, timezone, timedelta"
40009,"datetime.strptime(timestamp, ""%Y-%m-%dT%H:%M:%S.%fZ"").replace("
40010,    tzinfo=timezone(timedelta(0)))
40011,>>> datetime.utcnow().replace(tzinfo=timezone(timedelta(0)))
40012,"... datetime.datetime(2015, 3, 11, 6, 2, 47, 879129, tzinfo=datetime.timezone.utc)"
40013,strptime
40014,timezone.utc
40015,timezone(timedelta(0))
40016,utc
40017,%Z
40018,>>> from iso8601utils import parsers
40019,>>> parsers.datetime('2008-09-03T20:56:35.450686Z')
40020,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)"
40021,datetime.datetime
40022,#!/usr/bin/env python
40023,"from __future__ import with_statement, division, print_function"
40024,import sqlite3
40025,import datetime
40026,
40027,testtimes = [
40028,"    ""2016-08-25T16:01:26.123456Z"","
40029,"    ""2016-08-25T16:01:29"","
40030,]
40031,"db = sqlite3.connect("":memory:"")"
40032,c = db.cursor()
40033,for timestring in testtimes:
40034,"    c.execute(""SELECT strftime('%s', ?)"", (timestring,))"
40035,    converted = c.fetchone()[0]
40036,"    print(""%s is %s after epoch"" % (timestring, converted))"
40037,    dt = datetime.datetime.fromtimestamp(int(converted))
40038,"    print(""datetime is %s"" % dt)"
40039,2016-08-25T16:01:26.123456Z is 1472140886 after epoch
40040,datetime is 2016-08-25 12:01:26
40041,2016-08-25T16:01:29 is 1472140889 after epoch
40042,datetime is 2016-08-25 12:01:29
40043,parse_datetime('2016-08-09T15:12:03.65478Z') =
40044,"datetime.datetime(2016, 8, 9, 15, 12, 3, 654780, tzinfo=<UTC>)"
40045,from django.utils import formats
40046,from django.forms.fields import DateTimeField
40047,from django.utils.dateparse import parse_datetime
40048,
40049,class DateTimeFieldFixed(DateTimeField):
40050,"    def strptime(self, value, format):"
40051,        if format == 'iso-8601':
40052,            return parse_datetime(value)
40053,"        return super().strptime(value, format)"
40054,
40055,DateTimeField.strptime = DateTimeFieldFixed.strptime
40056,"formats.ISO_INPUT_FORMATS['DATETIME_INPUT_FORMATS'].insert(0, 'iso-8601')"
40057,from dateutil import parser
40058,
40059,"date = parser.isoparse(""2008-09-03T20:56:35.450686+01:00"")"
40060,print(date)
40061,2008-09-03 20:56:35.450686+01:00
40062,pandas
40063,Timestamp
40064,pandas
40065,ts_1 = pd.Timestamp('2020-02-18T04:27:58.000Z')    
40066,ts_2 = pd.Timestamp('2020-02-18T04:27:58.000')
40067,datetime.fromisoformat('2021-01-01T00:00:00+01:00').tzinfo.utc
40068,pandas.Timestamp('2021-01-01T00:00:00+01:00').tzinfo.utc
40069,CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]
40070,2016-06-29T19:36:29.3453Z
40071,"datetime.datetime.strptime(timestamp.translate(None, ':-'), ""%Y%m%dT%H%M%S.%fZ"")"
40072,2016-06-29T19:36:29.3453-0400
40073,2008-09-03T20:56:35.450686+05:00
40074,20080903T205635.450686+0500
40075,import re
40076,# this regex removes all colons and all 
40077,# dashes EXCEPT for the dash indicating + or - utc offset for the timezone
40078,"conformed_timestamp = re.sub(r""[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))"", '', timestamp)"
40079,"datetime.datetime.strptime(conformed_timestamp, ""%Y%m%dT%H%M%S.%f%z"" )"
40080,%z
40081,ValueError: 'z' is a bad directive in format '%Y%m%dT%H%M%S.%f%z'
40082,Z
40083,%z
40084,import re
40085,import datetime
40086,
40087,# this regex removes all colons and all 
40088,# dashes EXCEPT for the dash indicating + or - utc offset for the timezone
40089,"conformed_timestamp = re.sub(r""[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))"", '', timestamp)"
40090,
40091,# split on the offset to remove it. use a capture group to keep the delimiter
40092,"split_timestamp = re.split(r""[+|-]"",conformed_timestamp)"
40093,main_timestamp = split_timestamp[0]
40094,if len(split_timestamp) == 3:
40095,    sign = split_timestamp[1]
40096,    offset = split_timestamp[2]
40097,else:
40098,    sign = None
40099,    offset = None
40100,
40101,# generate the datetime object without the offset at UTC time
40102,"output_datetime = datetime.datetime.strptime(main_timestamp +""Z"", ""%Y%m%dT%H%M%S.%fZ"" )"
40103,if offset:
40104,    # create timedelta based on offset
40105,"    offset_delta = datetime.timedelta(hours=int(sign+offset[:-2]), minutes=int(sign+offset[-2:]))"
40106,    # offset datetime with timedelta
40107,    output_datetime = output_datetime + offset_delta
40108,"calendar.timegm(time.strptime(date.split(""."")[0]+""UTC"", ""%Y-%m-%dT%H:%M:%S%Z""))"
40109,from dateutil import parser
40110,ds = '2012-60-31'
40111,try:
40112,  dt = parser.parse(ds)
40113,"except ValueError, e:"
40114,"  print '""%s"" is an invalid date' % ds"
40115,>>> import maya
40116,>>> str = '2008-09-03T20:56:35.450686Z'
40117,>>> maya.MayaDT.from_rfc3339(str).datetime()
40118,"datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=<UTC>)"
40119,class FixedOffset(tzinfo):
40120,"    """"""Fixed offset in minutes: `time = utc_time + utc_offset`."""""""
40121,"    def __init__(self, offset):"
40122,        self.__offset = timedelta(minutes=offset)
40123,"        hours, minutes = divmod(offset, 60)"
40124,        #NOTE: the last part is to remind about deprecated POSIX GMT+h timezones
40125,        #  that have the opposite sign in the name;
40126,"        #  the corresponding numeric value is not used e.g., no minutes"
40127,"        self.__name = '<%+03d%02d>%+d' % (hours, minutes, -hours)"
40128,"    def utcoffset(self, dt=None):"
40129,        return self.__offset
40130,"    def tzname(self, dt=None):"
40131,        return self.__name
40132,"    def dst(self, dt=None):"
40133,        return timedelta(0)
40134,    def __repr__(self):
40135,        return 'FixedOffset(%d)' % (self.utcoffset().total_seconds() / 60)
40136,    def __getinitargs__(self):
40137,"        return (self.__offset.total_seconds()/60,)"
40138,
40139,def parse_isoformat_datetime(isodatetime):
40140,    try:
40141,"        return datetime.strptime(isodatetime, '%Y-%m-%dT%H:%M:%S.%f')"
40142,    except ValueError:
40143,        pass
40144,    try:
40145,"        return datetime.strptime(isodatetime, '%Y-%m-%dT%H:%M:%S')"
40146,    except ValueError:
40147,        pass
40148,    pat = r'(.*?[+-]\d{2}):(\d{2})'
40149,"    temp = re.sub(pat, r'\1\2', isodatetime)"
40150,    naive_date_str = temp[:-5]
40151,    offset_str = temp[-5:]
40152,"    naive_dt = datetime.strptime(naive_date_str, '%Y-%m-%dT%H:%M:%S.%f')"
40153,    offset = int(offset_str[-4:-2])*60 + int(offset_str[-2:])
40154,"    if offset_str[0] == ""-"":"
40155,        offset = -offset
40156,    return naive_dt.replace(tzinfo=FixedOffset(offset))
40157,"from operator import neg, pos"
40158,"from time import strptime, mktime"
40159,"from datetime import datetime, tzinfo, timedelta"
40160,
40161,class MyUTCOffsetTimezone(tzinfo):
40162,    @staticmethod
40163,"    def with_offset(offset_no_signal, signal):  # type: (str, str) -> MyUTCOffsetTimezone"
40164,        return MyUTCOffsetTimezone((pos if signal == '+' else neg)(
40165,"            (datetime.strptime(offset_no_signal, '%H:%M') - datetime(1900, 1, 1))"
40166,          .total_seconds()))
40167,
40168,"    def __init__(self, offset, name=None):"
40169,        self.offset = timedelta(seconds=offset)
40170,        self.name = name or self.__class__.__name__
40171,
40172,"    def utcoffset(self, dt):"
40173,        return self.offset
40174,
40175,"    def tzname(self, dt):"
40176,        return self.name
40177,
40178,"    def dst(self, dt):"
40179,        return timedelta(0)
40180,
40181,
40182,def to_datetime_tz(dt):  # type: (str) -> datetime
40183,    fmt = '%Y-%m-%dT%H:%M:%S.%f'
40184,"    if dt[-6] in frozenset(('+', '-')):"
40185,"        dt, sign, offset = strptime(dt[:-6], fmt), dt[-6], dt[-5:]"
40186,"        return datetime.fromtimestamp(mktime(dt),"
40187,"                                      tz=MyUTCOffsetTimezone.with_offset(offset, sign))"
40188,    elif dt[-1] == 'Z':
40189,"        return datetime.strptime(dt, fmt + 'Z')"
40190,"    return datetime.strptime(dt, fmt)"
40191,from datetime import datetime
40192,
40193,
40194,def to_datetime_tz(dt):  # type: (str) -> datetime
40195,    fmt = '%Y-%m-%dT%H:%M:%S.%f'
40196,"    if dt[-6] in frozenset(('+', '-')):"
40197,"        return datetime.strptime(dt, fmt + '%z')"
40198,    elif dt[-1] == 'Z':
40199,"        return datetime.strptime(dt, fmt + 'Z')"
40200,"    return datetime.strptime(dt, fmt)"
40201,"for dt_in, dt_out in ("
40202,"        ('2019-03-11T08:00:00.000Z', '2019-03-11T08:00:00'),"
40203,"        ('2019-03-11T08:00:00.000+11:00', '2019-03-11T08:00:00+11:00'),"
40204,"        ('2019-03-11T08:00:00.000-11:00', '2019-03-11T08:00:00-11:00')"
40205,    ):
40206,    isoformat = to_datetime_tz(dt_in).isoformat()
40207,"    assert isoformat == dt_out, '{} != {}'.format(isoformat, dt_out)"
40208,"frozenset(('+', '-'))"
40209,"('+', '-')"
40210,def parseISO8601DateTime(datetimeStr):
40211,    import time
40212,"    from datetime import datetime, timedelta"
40213,
40214,    def log_date_string(when):
40215,        gmt = time.gmtime(when)
40216,        if time.daylight and gmt[8]:
40217,            tz = time.altzone
40218,        else:
40219,            tz = time.timezone
40220,        if tz > 0:
40221,            neg = 1
40222,        else:
40223,            neg = 0
40224,            tz = -tz
40225,"        h, rem = divmod(tz, 3600)"
40226,"        m, rem = divmod(rem, 60)"
40227,        if neg:
40228,"            offset = '-%02d%02d' % (h, m)"
40229,        else:
40230,"            offset = '+%02d%02d' % (h, m)"
40231,
40232,"        return time.strftime('%d/%b/%Y:%H:%M:%S ', gmt) + offset"
40233,
40234,"    dt = datetime.strptime(datetimeStr, '%Y-%m-%dT%H:%M:%S.%fZ')"
40235,    timestamp = dt.timestamp()
40236,    return dt + timedelta(hours=dt.hour-time.gmtime(timestamp).tm_hour)
40237,Z
40238,%z
40239,"stringExp = ""2^4"""
40240,intVal = int(stringExp)      # Expected value: 16
40241,Traceback (most recent call last):  
40242,"File ""<stdin>"", line 1, in <module>"
40243,ValueError: invalid literal for int()
40244,with base 10: '2^4'
40245,eval
40246,eval
40247,"eval(""__import__('os').remove('important file')"") # arbitrary commands"
40248,"eval(""9**9**9**9**9**9**9**9"", {'__builtins__': None}) # CPU, memory"
40249,__builtins__
40250,None
40251,"eval('(1).__class__.__bases__[0].__subclasses__()', {'__builtins__': None})"
40252,ast
40253,import ast
40254,import operator as op
40255,
40256,# supported operators
40257,"operators = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul,"
40258,"             ast.Div: op.truediv, ast.Pow: op.pow, ast.BitXor: op.xor,"
40259,             ast.USub: op.neg}
40260,
40261,def eval_expr(expr):
40262,"    """""""
40263,    >>> eval_expr('2^6')
40264,    4
40265,    >>> eval_expr('2**6')
40266,    64
40267,    >>> eval_expr('1 + 2*3**(4^5) / (6 + -7)')
40268,    -5.0
40269,"    """""""
40270,"    return eval_(ast.parse(expr, mode='eval').body)"
40271,
40272,def eval_(node):
40273,"    if isinstance(node, ast.Num): # <number>"
40274,        return node.n
40275,"    elif isinstance(node, ast.BinOp): # <left> <operator> <right>"
40276,"        return operators[type(node.op)](eval_(node.left), eval_(node.right))"
40277,"    elif isinstance(node, ast.UnaryOp): # <operator> <operand> e.g., -1"
40278,        return operators[type(node.op)](eval_(node.operand))
40279,    else:
40280,        raise TypeError(node)
40281,a**b
40282,"def power(a, b):"
40283,"    if any(abs(n) > 100 for n in [a, b]):"
40284,"        raise ValueError((a,b))"
40285,"    return op.pow(a, b)"
40286,operators[ast.Pow] = power
40287,import functools
40288,
40289,def limit(max_=None):
40290,"    """"""Return decorator that limits allowed returned values."""""""
40291,    def decorator(func):
40292,        @functools.wraps(func)
40293,"        def wrapper(*args, **kwargs):"
40294,"            ret = func(*args, **kwargs)"
40295,            try:
40296,                mag = abs(ret)
40297,            except TypeError:
40298,                pass # not applicable
40299,            else:
40300,                if mag > max_:
40301,                    raise ValueError(ret)
40302,            return ret
40303,        return wrapper
40304,    return decorator
40305,
40306,eval_ = limit(max_=10**100)(eval_)
40307,">>> evil = ""__import__('os').remove('important file')"""
40308,>>> eval_expr(evil) #doctest:+IGNORE_EXCEPTION_DETAIL
40309,Traceback (most recent call last):
40310,...
40311,TypeError:
40312,">>> eval_expr(""9**9"")"
40313,387420489
40314,">>> eval_expr(""9**9**9**9**9**9**9**9"") #doctest:+IGNORE_EXCEPTION_DETAIL"
40315,Traceback (most recent call last):
40316,...
40317,ValueError:
40318,import math
40319,ast.parse
40320,"ast.parse('()' * 1000000, '<string>', 'single')"
40321,if len(expr) > 10000: raise ValueError
40322,len(expr)
40323,from __future__ import division
40324,"from pyparsing import (Literal, CaselessLiteral, Word, Combine, Group, Optional,"
40325,"                       ZeroOrMore, Forward, nums, alphas, oneOf)"
40326,import math
40327,import operator
40328,
40329,__author__ = 'Paul McGuire'
40330,__version__ = '$Revision: 0.0 $'
40331,__date__ = '$Date: 2009-03-20 $'
40332,__source__ = '''http://pyparsing.wikispaces.com/file/view/fourFn.py
40333,http://pyparsing.wikispaces.com/message/view/home/15549426
40334,'''
40335,__note__ = '''
40336,"All I've done is rewrap Paul McGuire's fourFn.py as a class, so I can use it"
40337,more easily in other places.
40338,'''
40339,
40340,
40341,class NumericStringParser(object):
40342,    '''
40343,    Most of this code comes from the fourFn.py pyparsing example
40344,
40345,    '''
40346,
40347,"    def pushFirst(self, strg, loc, toks):"
40348,        self.exprStack.append(toks[0])
40349,
40350,"    def pushUMinus(self, strg, loc, toks):"
40351,        if toks and toks[0] == '-':
40352,            self.exprStack.append('unary -')
40353,
40354,    def __init__(self):
40355,"        """""""
40356,        expop   :: '^'
40357,        multop  :: '*' | '/'
40358,        addop   :: '+' | '-'
40359,        integer :: ['+' | '-'] '0'..'9'+
40360,        atom    :: PI | E | real | fn '(' expr ')' | '(' expr ')'
40361,        factor  :: atom [ expop factor ]*
40362,        term    :: factor [ multop factor ]*
40363,        expr    :: term [ addop term ]*
40364,"        """""""
40365,"        point = Literal(""."")"
40366,"        e = CaselessLiteral(""E"")"
40367,"        fnumber = Combine(Word(""+-"" + nums, nums) +"
40368,                          Optional(point + Optional(Word(nums))) +
40369,"                          Optional(e + Word(""+-"" + nums, nums)))"
40370,"        ident = Word(alphas, alphas + nums + ""_$"")"
40371,"        plus = Literal(""+"")"
40372,"        minus = Literal(""-"")"
40373,"        mult = Literal(""*"")"
40374,"        div = Literal(""/"")"
40375,"        lpar = Literal(""("").suppress()"
40376,"        rpar = Literal("")"").suppress()"
40377,        addop = plus | minus
40378,        multop = mult | div
40379,"        expop = Literal(""^"")"
40380,"        pi = CaselessLiteral(""PI"")"
40381,        expr = Forward()
40382,"        atom = ((Optional(oneOf(""- +"")) +"
40383,                 (ident + lpar + expr + rpar | pi | e | fnumber).setParseAction(self.pushFirst))
40384,"                | Optional(oneOf(""- +"")) + Group(lpar + expr + rpar)"
40385,                ).setParseAction(self.pushUMinus)
40386,"        # by defining exponentiation as ""atom [ ^ factor ]..."" instead of"
40387,"        # ""atom [ ^ atom ]..."", we get right-to-left exponents, instead of left-to-right"
40388,"        # that is, 2^3^2 = 2^(3^2), not (2^3)^2."
40389,        factor = Forward()
40390,        factor << atom + \
40391,            ZeroOrMore((expop + factor).setParseAction(self.pushFirst))
40392,        term = factor + \
40393,            ZeroOrMore((multop + factor).setParseAction(self.pushFirst))
40394,        expr << term + \
40395,            ZeroOrMore((addop + term).setParseAction(self.pushFirst))
40396,        # addop_term = ( addop + term ).setParseAction( self.pushFirst )
40397,        # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)
40398,        # expr <<  general_term
40399,        self.bnf = expr
40400,        # map operator symbols to corresponding arithmetic operations
40401,        epsilon = 1e-12
40402,"        self.opn = {""+"": operator.add,"
40403,"                    ""-"": operator.sub,"
40404,"                    ""*"": operator.mul,"
40405,"                    ""/"": operator.truediv,"
40406,"                    ""^"": operator.pow}"
40407,"        self.fn = {""sin"": math.sin,"
40408,"                   ""cos"": math.cos,"
40409,"                   ""tan"": math.tan,"
40410,"                   ""exp"": math.exp,"
40411,"                   ""abs"": abs,"
40412,"                   ""trunc"": lambda a: int(a),"
40413,"                   ""round"": round,"
40414,"                   ""sgn"": lambda a: abs(a) > epsilon and cmp(a, 0) or 0}"
40415,
40416,"    def evaluateStack(self, s):"
40417,        op = s.pop()
40418,        if op == 'unary -':
40419,            return -self.evaluateStack(s)
40420,"        if op in ""+-*/^"":"
40421,            op2 = self.evaluateStack(s)
40422,            op1 = self.evaluateStack(s)
40423,"            return self.opn[op](op1, op2)"
40424,"        elif op == ""PI"":"
40425,            return math.pi  # 3.1415926535
40426,"        elif op == ""E"":"
40427,            return math.e  # 2.718281828
40428,        elif op in self.fn:
40429,            return self.fn[op](self.evaluateStack(s))
40430,        elif op[0].isalpha():
40431,            return 0
40432,        else:
40433,            return float(op)
40434,
40435,"    def eval(self, num_string, parseAll=True):"
40436,        self.exprStack = []
40437,"        results = self.bnf.parseString(num_string, parseAll)"
40438,        val = self.evaluateStack(self.exprStack[:])
40439,        return val
40440,nsp = NumericStringParser()
40441,result = nsp.eval('2^4')
40442,print(result)
40443,# 16.0
40444,
40445,result = nsp.eval('exp(2^4)')
40446,print(result)
40447,# 8886110.520507872
40448,eval()
40449,sympy.sympify().evalf()
40450,sympify
40451,eval
40452,__builtins__
40453,getattr
40454,object.__getattribute__
40455,.
40456,''.__class__.__bases__[0].__subclasses__
40457,getattr
40458,__builtins__
40459,None
40460,object.__getattribute__
40461,object
40462,__getattribute__
40463,.
40464,[0-9]
40465,.
40466,import re
40467,"inp = re.sub(r""\.(?![0-9])"","""", inp)"
40468,"val = eval(inp, {'__builtins__':None})"
40469,1 + 1.
40470,1 + 1.0
40471,.
40472,1 + 1
40473,)
40474,
40475,EOF
40476,.
40477,.
40478,"f""{eval('()' + chr(46) + '__class__')}"""
40479,eval
40480,.
40481,"import ast, math"
40482,
40483,"locals =  {key: value for (key,value) in vars(math).items() if key[0] != '_'}"
40484,"locals.update({""abs"": abs, ""complex"": complex, ""min"": min, ""max"": max, ""pow"": pow, ""round"": round})"
40485,
40486,class Visitor(ast.NodeVisitor):
40487,"    def visit(self, node):"
40488,"       if not isinstance(node, self.whitelist):"
40489,           raise ValueError(node)
40490,       return super().visit(node)
40491,
40492,"    whitelist = (ast.Module, ast.Expr, ast.Load, ast.Expression, ast.Add, ast.Sub, ast.UnaryOp, ast.Num, ast.BinOp,"
40493,"            ast.Mult, ast.Div, ast.Pow, ast.BitOr, ast.BitAnd, ast.BitXor, ast.USub, ast.UAdd, ast.FloorDiv, ast.Mod,"
40494,"            ast.LShift, ast.RShift, ast.Invert, ast.Call, ast.Name)"
40495,
40496,"def evaluate(expr, locals = {}):"
40497,    if any(elem in expr for elem in '\n#') : raise ValueError(expr)
40498,    try:
40499,"        node = ast.parse(expr.strip(), mode='eval')"
40500,        Visitor().visit(node)
40501,"        return eval(compile(node, ""<string>"", ""eval""), {'__builtins__': None}, locals)"
40502,    except Exception: raise ValueError(expr)
40503,">>> evaluate(""7 + 9 * (2 << 2)"")"
40504,79
40505,">>> evaluate(""6 // 2 + 0.0"")"
40506,3.0
40507,eval
40508,exec
40509,compile
40510,eval
40511,exec
40512,eval
40513,"c = compile(stringExp, 'userinput', 'eval')"
40514,if c.co_code[0]==b'd' and c.co_code[3]==b'S':
40515,    return c.co_consts[ord(c.co_code[1])+ord(c.co_code[2])*256]
40516,d
40517,LOAD_CONST
40518,S
40519,RETURN_VALUE
40520,"stringExp = ""1 + cos(2)"""
40521,TOS=stack.pop(); op(TOS); stack.put(TOS)
40522,CALL_FUNCTION
40523,from dis import opmap
40524,from Queue import LifoQueue
40525,"from math import sin,cos"
40526,import operator
40527,
40528,"globs = {'sin':sin, 'cos':cos}"
40529,safe = globs.values()
40530,
40531,stack = LifoQueue()
40532,
40533,class BINARY(object):
40534,"    def __init__(self, operator):"
40535,        self.op=operator
40536,"    def __call__(self, context):"
40537,"        stack.put(self.op(stack.get(),stack.get()))"
40538,
40539,class UNARY(object):
40540,"    def __init__(self, operator):"
40541,        self.op=operator
40542,"    def __call__(self, context):"
40543,        stack.put(self.op(stack.get()))
40544,
40545,
40546,"def CALL_FUNCTION(context, arg):"
40547,    argc = arg[0]+arg[1]*256
40548,    args = [stack.get() for i in range(argc)]
40549,    func = stack.get()
40550,    if func not in safe:
40551,"        raise TypeError(""Function %r now allowed""%func)"
40552,    stack.put(func(*args))
40553,
40554,"def LOAD_CONST(context, arg):"
40555,    cons = arg[0]+arg[1]*256
40556,    stack.put(context['code'].co_consts[cons])
40557,
40558,"def LOAD_NAME(context, arg):"
40559,    name_num = arg[0]+arg[1]*256
40560,    name = context['code'].co_names[name_num]
40561,    if name in context['locals']:
40562,        stack.put(context['locals'][name])
40563,    else:
40564,        stack.put(context['globals'][name])
40565,
40566,def RETURN_VALUE(context):
40567,    return stack.get()
40568,
40569,opfuncs = {
40570,"    opmap['BINARY_ADD']: BINARY(operator.add),"
40571,"    opmap['UNARY_INVERT']: UNARY(operator.invert),"
40572,"    opmap['CALL_FUNCTION']: CALL_FUNCTION,"
40573,"    opmap['LOAD_CONST']: LOAD_CONST,"
40574,    opmap['LOAD_NAME']: LOAD_NAME
40575,"    opmap['RETURN_VALUE']: RETURN_VALUE,"
40576,}
40577,
40578,def VMeval(c):
40579,"    context = dict(locals={}, globals=globs, code=c)"
40580,    bci = iter(c.co_code)
40581,    for bytecode in bci:
40582,        func = opfuncs[ord(bytecode)]
40583,        if func.func_code.co_argcount==1:
40584,            ret = func(context)
40585,        else:
40586,"            args = ord(bci.next()), ord(bci.next())"
40587,"            ret = func(context, args)"
40588,        if ret:
40589,            return ret
40590,
40591,def evaluate(expr):
40592,"    return VMeval(compile(expr, 'userinput', 'eval'))"
40593,STORE_FAST
40594,'x=5;return x+x
40595,goto
40596,for
40597,while
40598,BINARY_POWER
40599,compile
40600,c.co_code[0]==b'd'
40601,False
40602,b'foo'[0]
40603,int
40604,bytes
40605,c.co_code[0:1]==b'd'
40606,chr(c.co_code[0])=='d'
40607,c.co_code[0]==100
40608,eval()
40609,eval()
40610,+
40611,-
40612,*
40613,/
40614,**
40615,(
40616,)
40617,eval()
40618,"eval(""9**9**9**9**9**9**9**9"", {'__builtins__': None})"
40619,>>> import sympy
40620,">>> x, y, z = sympy.symbols('x y z')"
40621,">>> sympy.sympify(""x**3 + sin(y)"").evalf(subs={x:1, y:-3})"
40622,0.858879991940133
40623,from sympy import *
40624,evalf
40625,"sympy.sympify(""""""[].__class__.__base__.__subclasses__()[158]('ls')"""""")"
40626,subprocess.Popen()
40627,ls
40628,rm -rf /
40629,f
40630,f'{2**4}'
40631,=> '16'
40632,str(eval(...))
40633,eval
40634,import re
40635,
40636,# Kept outside simple_eval() just for performance
40637,_re_simple_eval = re.compile(rb'd([\x00-\xFF]+)S\x00')
40638,
40639,def simple_eval(expr):
40640,    try:
40641,"        c = compile(expr, 'userinput', 'eval')"
40642,    except SyntaxError:
40643,"        raise ValueError(f""Malformed expression: {expr}"")"
40644,    m = _re_simple_eval.fullmatch(c.co_code)
40645,    if not m:
40646,"        raise ValueError(f""Not a simple algebraic expression: {expr}"")"
40647,    try:
40648,"        return c.co_consts[int.from_bytes(m.group(1), sys.byteorder)]"
40649,    except IndexError:
40650,"        raise ValueError(f""Expression not evaluated as constant: {expr}"")"
40651,"for expr, res in ("
40652,"    ('2^4',                         6      ),"
40653,"    ('2**4',                       16      ),"
40654,"    ('1 + 2*3**(4^5) / (6 + -7)',  -5.0    ),"
40655,"    ('7 + 9 * (2 << 2)',           79      ),"
40656,"    ('6 // 2 + 0.0',                3.0    ),"
40657,"    ('2+3',                         5      ),"
40658,"    ('6+4/2*2',                    10.0    ),"
40659,"    ('3+2.45/8',                    3.30625),"
40660,"    ('3**3*3/3+3',                 30.0    ),"
40661,):
40662,    result = simple_eval(expr)
40663,    ok = (result == res and type(result) == type(res))
40664,"    print(""{} {} = {}"".format(""OK!"" if ok else ""FAIL!"", expr, result))"
40665,OK! 2^4 = 6
40666,OK! 2**4 = 16
40667,OK! 1 + 2*3**(4^5) / (6 + -7) = -5.0
40668,OK! 7 + 9 * (2 << 2) = 79
40669,OK! 6 // 2 + 0.0 = 3.0
40670,OK! 2+3 = 5
40671,OK! 6+4/2*2 = 10.0
40672,OK! 3+2.45/8 = 3.30625
40673,OK! 3**3*3/3+3 = 30.0
40674,for expr in (
40675,"    'foo bar',"
40676,"    'print(""hi"")',"
40677,"    '2*x',"
40678,"    'lambda: 10',"
40679,"    '2**1234',"
40680,):
40681,    try:
40682,        result = simple_eval(expr)
40683,    except ValueError as e:
40684,        print(e)
40685,        continue
40686,"    print(""OK!"")  # will never happen"
40687,Malformed expression: foo bar
40688,"Not a simple algebraic expression: print(""hi"")"
40689,Expression not evaluated as constant: 2*x
40690,Expression not evaluated as constant: lambda: 10
40691,Expression not evaluated as constant: 2**1234
40692,lambda: 10
40693,MAKE_FUNCTION
40694,LOAD_CONST
40695,2**12345
40696,IndexError: tuple index out of range
40697,eval
40698,>>> ns = {'__builtins__': None}
40699,">>> eval('2 ** 4', ns)"
40700,16
40701,">>> eval('__builtins__.__import__(""os"").system(""echo got through"")', ns)"
40702,Traceback (most recent call last):
40703,"  File ""<stdin>"", line 1, in <module>"
40704,"  File ""<string>"", line 1, in <module>"
40705,AttributeError: 'NoneType' object has no attribute '__import__'
40706,">>> eval('__builtins__.__import__(""os"").system(""echo got through"")')"
40707,got through
40708,0
40709,>>> import math
40710,>>> ns = vars(math).copy()
40711,>>> ns['__builtins__'] = None
40712,">>> eval('cos(pi/3)', ns)"
40713,0.50000000000000011
40714,"eval(""""""[i for i in (1).__class__.__bases__[0].__subclasses__() if i.__name__.endswith('BuiltinImporter')][0]().load_module('sys').modules['sys'].modules['os'].system('/bin/sh')"""""", {'__builtins__': None})"
40715,This is not safe
40716,eval('math.sqrt(2.0)')
40717,$ python -m pytest test.py
40718,from solution import Solutions
40719,
40720,class SolutionsTestCase(unittest.TestCase):
40721,    def setUp(self):
40722,        self.solutions = Solutions()
40723,
40724,    def test_evaluate(self):
40725,        expressions = [
40726,"            '2+3=5',"
40727,"            '6+4/2*2=10',"
40728,"            '3+2.45/8=3.30625',"
40729,"            '3**3*3/3+3=30',"
40730,            '2^4=6'
40731,        ]
40732,        results = [x.split('=')[1] for x in expressions]
40733,        for e in range(len(expressions)):
40734,            if '.' in results[e]:
40735,                results[e] = float(results[e])
40736,            else:
40737,                results[e] = int(results[e])
40738,            self.assertEqual(
40739,"                results[e],"
40740,                self.solutions.evaluate(expressions[e])
40741,            )
40742,class Solutions(object):
40743,"    def evaluate(self, exp):"
40744,        def format(res):
40745,            if '.' in res:
40746,                try:
40747,                    res = float(res)
40748,                except ValueError:
40749,                    pass
40750,            else:
40751,                try:
40752,                    res = int(res)
40753,                except ValueError:
40754,                    pass
40755,            return res
40756,"        def splitter(item, op):"
40757,            mul = item.split(op)
40758,            if len(mul) == 2:
40759,"                for x in ['^', '*', '/', '+', '-']:"
40760,                    if x in mul[0]:
40761,"                        mul = [mul[0].split(x)[1], mul[1]]"
40762,                    if x in mul[1]:
40763,"                        mul = [mul[0], mul[1].split(x)[0]]"
40764,            elif len(mul) > 2:
40765,                pass
40766,            else:
40767,                pass
40768,            for x in range(len(mul)):
40769,                mul[x] = format(mul[x])
40770,            return mul
40771,"        exp = exp.replace(' ', '')"
40772,        if '=' in exp:
40773,            res = exp.split('=')[1]
40774,            res = format(res)
40775,"            exp = exp.replace('=%s' % res, '')"
40776,        while '^' in exp:
40777,            if '^' in exp:
40778,"                itm = splitter(exp, '^')"
40779,                res = itm[0] ^ itm[1]
40780,"                exp = exp.replace('%s^%s' % (str(itm[0]), str(itm[1])), str(res))"
40781,        while '**' in exp:
40782,            if '**' in exp:
40783,"                itm = splitter(exp, '**')"
40784,                res = itm[0] ** itm[1]
40785,"                exp = exp.replace('%s**%s' % (str(itm[0]), str(itm[1])), str(res))"
40786,        while '/' in exp:
40787,            if '/' in exp:
40788,"                itm = splitter(exp, '/')"
40789,                res = itm[0] / itm[1]
40790,"                exp = exp.replace('%s/%s' % (str(itm[0]), str(itm[1])), str(res))"
40791,        while '*' in exp:
40792,            if '*' in exp:
40793,"                itm = splitter(exp, '*')"
40794,                res = itm[0] * itm[1]
40795,"                exp = exp.replace('%s*%s' % (str(itm[0]), str(itm[1])), str(res))"
40796,        while '+' in exp:
40797,            if '+' in exp:
40798,"                itm = splitter(exp, '+')"
40799,                res = itm[0] + itm[1]
40800,"                exp = exp.replace('%s+%s' % (str(itm[0]), str(itm[1])), str(res))"
40801,        while '-' in exp:
40802,            if '-' in exp:
40803,"                itm = splitter(exp, '-')"
40804,                res = itm[0] - itm[1]
40805,"                exp = exp.replace('%s-%s' % (str(itm[0]), str(itm[1])), str(res))"
40806,
40807,        return format(exp)
40808,"from operator import add, sub, mul, truediv, neg, pow"
40809,"from lark import Lark, Transformer, v_args"
40810,
40811,"calc_grammar = f"""""""
40812,    ?start: sum
40813,    ?sum: product
40814,"        | sum ""+"" product   -> {add.__name__}"
40815,"        | sum ""-"" product   -> {sub.__name__}"
40816,    ?product: power
40817,"        | product ""*"" power  -> {mul.__name__}"
40818,"        | product ""/"" power  -> {truediv.__name__}"
40819,    ?power: atom
40820,"        | power ""^"" atom -> {pow.__name__}"
40821,    ?atom: NUMBER           -> number
40822,"         | ""-"" atom         -> {neg.__name__}"
40823,"         | ""("" sum "")"""
40824,
40825,    %import common.NUMBER
40826,    %import common.WS_INLINE
40827,
40828,    %ignore WS_INLINE
40829,""""""""
40830,
40831,
40832,@v_args(inline=True)
40833,class CalculateTree(Transformer):
40834,    add = add
40835,    sub = sub
40836,    neg = neg
40837,    mul = mul
40838,    truediv = truediv
40839,    pow = pow
40840,    number = float
40841,
40842,
40843,"calc_parser = Lark(calc_grammar, parser=""lalr"", transformer=CalculateTree())"
40844,calc = calc_parser.parse
40845,
40846,
40847,def eval_expr(expression: str) -> float:
40848,    return calc(expression)
40849,
40850,
40851,"print(eval_expr(""2^4""))"
40852,"print(eval_expr(""-1*2^4""))"
40853,"print(eval_expr(""-2^3 + 1""))"
40854,"print(eval_expr(""2**4""))  # Error"
40855,from py_expression.core import Exp
40856,exp = Exp()
40857,
40858,parsed_formula = exp.parse('a+4')
40859,
40860,"result = exp.eval(parsed_formula, {""a"":2})"
40861,_
40862,for
40863,if tbh.bag:
40864,    n = 0
40865,    for _ in tbh.bag.atom_set():
40866,        n += 1
40867,len(tbh.bag.atom_set())
40868,__len__
40869,sum(1 for _ in tbh.bag.atom_set())
40870,pylint
40871,dummy_
40872,pylint
40873,pylint
40874,pylint
40875,__
40876,_
40877,"raise forms.ValidationError(_(""Please enter a correct username""))"
40878,"label, has_label, _ = text.partition(':')"
40879,def
40880,lambda
40881,def callback(_):
40882,    return True
40883,_
40884,__
40885,"year, month, day = date()"
40886,day
40887,day
40888,"year, month, _ = date()"
40889,lambda arg: 1.0
40890,lambda _: 1.0
40891,day
40892,dya
40893,match
40894,_
40895,_
40896,del name
40897,_
40898,gettext
40899,__
40900,_
40901,"a, __, c = iterable"
40902,"a, b, c = iterable"
40903,a
40904,b
40905,c
40906,_
40907,_
40908,_
40909,_
40910,_
40911,>>> 10 
40912,10
40913,
40914,>>> _ 
40915,10
40916,
40917,>>> _ * 3 
40918,30
40919,_
40920,"x, _, y = (1, 2, 3)"
40921,
40922,>>> x
40923,1
40924,
40925,>>> y 
40926,3
40927,for _ in range(10):     
40928,    do_something()
40929,"_(""Hello world!"")"
40930,dis
40931,_
40932,_foo
40933,foo_
40934,_f_o_o_
40935,match
40936,case
40937,match
40938,_
40939,_
40940,  # iteration disregarding content
40941,  sum(1 for _ in some_iterable)
40942,  # unpacking disregarding specific elements
40943,"  head, *_ = values"
40944,  # function disregarding its argument
40945,  def callback(_): return True
40946,builtins._
40947,_
40948,builtins
40949,_
40950,_
40951,_
40952,builtins._
40953,  >>> 42
40954,  42
40955,  >>> f'the last answer is {_}'
40956,  'the last answer is 42'
40957,  >>> _
40958,  'the last answer is 42'
40959,  >>> _ = 4  # shadow ``builtins._`` with global ``_``
40960,  >>> 23
40961,  23
40962,  >>> _
40963,  4
40964,ipython
40965,builtins._
40966,_
40967,_
40968,_()
40969,str
40970,float
40971,"""545.2222""  →  545.2222"
40972,str
40973,int
40974,"""31""        →  31"
40975,type(my_object)
40976,type(100)
40977,int
40978,int(my_object)
40979,my_object
40980,">>> a = ""545.2222"""
40981,>>> float(a)
40982,545.22220000000004
40983,>>> int(float(a))
40984,545
40985,int(a)
40986,int(float(a))
40987,int(a)
40988,ValueError: invalid literal for int() with base 10: '545.222'
40989,ValueError
40990,def is_float(value):
40991,  try:
40992,    float(value)
40993,    return True
40994,  except:
40995,    return False
40996,is_convertible_to_float(value)
40997,val                   is_float(val) Note
40998,--------------------  ----------   --------------------------------
40999,"""""                    False        Blank string"
41000,"""127""                 True         Passed string"
41001,True                  True         Pure sweet Truth
41002,"""True""                False        Vile contemptible lie"
41003,False                 True         So false it becomes true
41004,"""123.456""             True         Decimal"
41005,"""      -127    ""      True         Spaces trimmed"
41006,"""\t\n12\r\n""          True         whitespace ignored"
41007,"""NaN""                 True         Not a number"
41008,"""NaNanananaBATMAN""    False        I am Batman"
41009,"""-iNF""                True         Negative infinity"
41010,"""123.E4""              True         Exponential notation"
41011,""".1""                  True         mantissa only"
41012,"""1,234""               False        Commas gtfo"
41013,u'\x30'               True         Unicode is fine.
41014,"""NULL""                False        Null is not special"
41015,0x3fade               True         Hexadecimal
41016,"""6e7777777777777""     True         Shrunk to infinity"
41017,"""1.797693e+308""       True         This is max value"
41018,"""infinity""            True         Same as inf"
41019,"""infinityandBEYOND""   False        Extra characters wreck it"
41020,"""12.34.56""            False        Only one dot allowed"
41021,u'四'                 False        Japanese '4' is not a float.
41022,"""#56""                 False        Pound sign"
41023,"""56%""                 False        Percent of what?"
41024,"""0E0""                 True         Exponential, move dot 0 places"
41025,0**0                  True         0___0  Exponentiation
41026,"""-5e-5""               True         Raise to a negative number"
41027,"""+1e1""                True         Plus is OK with exponent"
41028,"""+1e1^5""              False        Fancy exponent not interpreted"
41029,"""+1e1.3""              False        No decimals in exponent"
41030,"""-+1""                 False        Make up your mind"
41031,"""(1)""                 False        Parenthesis is bad"
41032,float(...)
41033,UTF-8
41034,4
41035,UTF-8
41036,"""- 12.3"""
41037,"""45 e6"""
41038,"TypeError, ValueError"
41039,def num(s):
41040,    try:
41041,        return int(s)
41042,    except ValueError:
41043,        return float(s)
41044,/
41045,try
41046,s = u'\u0000'
41047,ValueError
41048,except
41049,>>> import ast
41050,">>> ast.literal_eval(""545.2222"")"
41051,545.2222
41052,">>> ast.literal_eval(""31"")"
41053,31
41054,python >>> import ast >>> ast.literal_eval('1-800-555-1212') -2566 >>> 
41055,ast.literal_eval
41056,ast
41057,ast.literal_eval()
41058,"float(""545,545.2222"")"
41059,locale
41060,locale.atof
41061,>>> import locale
41062,">>> a = u'545,545.2222'"
41063,">>> locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')"
41064,'en_US.UTF-8'
41065,>>> locale.atof(a)
41066,545545.2222
41067,>>> int(locale.atof(a))
41068,545545
41069,>>>
41070,>>> import locale
41071,">>> b = u'545,2222'"
41072,">>> locale.setlocale(locale.LC_ALL, 'fr_FR')"
41073,'fr_FR'
41074,>>> locale.atof(b)
41075,545.2222
41076,locale.atoi
41077,x = '1'; locale.atof(x)
41078,1.0
41079,1
41080,locale.atof(x) if locale.localeconv().get('decimal_point') in x else locale.atoi(x)
41081,locale.atoi
41082,locale.atof
41083,float(x) if '.' in x else int(x)
41084,"float(""nan"")"
41085,192.168.0.1
41086,"""This is not a good approach. :)"""
41087,>>> from fastnumbers import fast_real
41088,">>> fast_real(""545.2222"")"
41089,545.2222
41090,">>> type(fast_real(""545.2222""))"
41091,float
41092,">>> fast_real(""31"")"
41093,31
41094,">>> type(fast_real(""31""))"
41095,int
41096,">>> x = [""545.0"", ""545.6"", ""999.2""]"
41097,">>> map(float, x)"
41098,"[545.0, 545.60000000000002, 999.20000000000005]"
41099,>>>
41100,"""545.2222"""
41101,">>> float(""545.2222"")"
41102,545.2222
41103,"""31"""
41104,">>> int(""31"")"
41105,31
41106,">>> int(""0b11111"", 2)"
41107,31
41108,">>> int(""11111"", 2)"
41109,31
41110,">>> int('0o37', 8)"
41111,31
41112,">>> int('37', 8)"
41113,31
41114,">>> int('0x1f', 16)"
41115,31
41116,">>> int('1f', 16)"
41117,31
41118,0
41119,">>> int(""0b11111"", 0)"
41120,31
41121,">>> int('0o37', 0)"
41122,31
41123,">>> int('0x1f', 0)"
41124,31
41125,0b
41126,>>> 0b11111
41127,31
41128,0o
41129,>>> 0o37
41130,31
41131,0x
41132,>>> 0x1f
41133,31
41134,>>> 0b10101 # binary flags
41135,21
41136,">>> 0o755 # read, write, execute perms for owner, read & ex for group & others"
41137,493
41138,">>> 0xffffff # the color, white, max values for red, green, and blue"
41139,16777215
41140,>>> 037
41141,31
41142,37
41143,SyntaxError
41144,>>> 037
41145,"  File ""<stdin>"", line 1"
41146,    037
41147,      ^
41148,SyntaxError: invalid token
41149,0o
41150,>>> 0o37
41151,31
41152,   >>> import string
41153,   >>> parseStr = lambda x: x.isalpha() and x or x.isdigit() and \
41154,   ...                      int(x) or x.isalnum() and x or \
41155,   ...                      len(set(string.punctuation).intersection(x)) == 1 and \
41156,   ...                      x.count('.') == 1 and float(x) or x
41157,   >>> parseStr('123')
41158,   123
41159,   >>> parseStr('123.3')
41160,   123.3
41161,   >>> parseStr('3HC1')
41162,   '3HC1'
41163,   >>> parseStr('12.e5')
41164,   1200000.0
41165,   >>> parseStr('12$5')
41166,   '12$5'
41167,   >>> parseStr('12.2.2')
41168,   '12.2.2'
41169,1e3
41170,"float(""545.2222"")"
41171,"int(float(""545.2222""))"
41172,yaml.load()
41173,type(result)
41174,>>> import yaml
41175,
41176,">>> a = ""545.2222"""
41177,>>> result = yaml.load(a)
41178,>>> result
41179,545.22220000000004
41180,>>> type(result)
41181,<type 'float'>
41182,
41183,">>> b = ""31"""
41184,>>> result = yaml.load(b)
41185,>>> result
41186,31
41187,>>> type(result)
41188,<type 'int'>
41189,
41190,">>> c = ""HI"""
41191,>>> result = yaml.load(c)
41192,>>> result
41193,'HI'
41194,>>> type(result)
41195,<type 'str'>
41196,json
41197,import ast
41198,
41199,def parse_str(s):
41200,   try:
41201,      return ast.literal_eval(str(s))
41202,   except:
41203,      return
41204,value = parse_str('1')  # Returns Integer
41205,value = parse_str('1.5')  # Returns Float
41206,parse_str(' 1')
41207,None
41208,1
41209,def get_int_or_float(v):
41210,    number_as_float = float(v)
41211,    number_as_int = int(number_as_float)
41212,    return number_as_int if number_as_float == number_as_int else number_as_float
41213,except
41214,int
41215,float
41216,def num(s):
41217,"    """"""num(s)"
41218,"    num(3),num(3.7)-->3"
41219,"    num('3')-->3, num('3.7')-->3.7"
41220,"    num('3,700')-->ValueError"
41221,"    num('3a'),num('a3'),-->ValueError"
41222,    num('3e4') --> 30000.0
41223,"    """""""
41224,    try:
41225,        return int(s)
41226,    except ValueError:
41227,        try:
41228,            return float(s)
41229,        except ValueError:
41230,            raise ValueError('argument is not a string of number')
41231,json.loads
41232,>>> import json
41233,>>> json.loads('123.456')
41234,123.456
41235,>>> type(_)
41236,<class 'float'>
41237,>>> 
41238,float
41239,int(5.1)
41240,int(5.6)
41241,int(5.6 + 0.5)
41242,def convert(n):
41243,    try:
41244,        return int(n)
41245,    except ValueError:
41246,        return float(n + 0.5)
41247,int
41248,float
41249,n
41250,int
41251,round
41252,int(round(float(input)))
41253,import re
41254,"def parseNumber(value, as_int=False):"
41255,    try:
41256,"        number = float(re.sub('[^.\-\d]', '', value))"
41257,        if as_int:
41258,            return int(number + 0.5)
41259,        else:
41260,            return number
41261,    except ValueError:
41262,        return float('nan')  # or None if you wish
41263,"parseNumber('13,345')"
41264,> 13345.0
41265,
41266,parseNumber('- 123 000')
41267,> -123000.0
41268,
41269,parseNumber('99999\n')
41270,> 99999.0
41271,import numbers
41272,def is_number(value):
41273,"    return isinstance(value, numbers.Number)"
41274,"    # will work with int, float, long, Decimal"
41275,def string_to_number(str):
41276,"  if(""."" in str):"
41277,    try:
41278,      res = float(str)
41279,    except:
41280,      res = str  
41281,  elif(str.isdigit()):
41282,    res = int(str)
41283,  else:
41284,    res = str
41285,  return(res)
41286,"print(type(string_to_number(""124"")))"
41287,<class 'int'>
41288,"print(type(string_to_number(""12.4"")))"
41289,<class 'float'>
41290,"print(type(string_to_number(""hello"")))"
41291,<class 'str'>
41292,"print(type(string_to_number(""hel.lo"")))"
41293,<class 'str'>
41294,string_to_number
41295,typecast
41296,">>>float(""23.333"")"
41297,   23.333
41298,__float__
41299,__float__
41300,float(myobject)
41301,def to_number(n):
41302,    ''' Convert any number representation to a number 
41303,"    This covers: float, decimal, hex, and octal numbers."
41304,    '''
41305,
41306,    try:
41307,"        return int(str(n), 0)"
41308,    except:
41309,        try:
41310,"            # python 3 doesn't accept ""010"" as a valid octal.  You must use the"
41311,            # '0o' prefix
41312,"            return int('0o' + n, 0)"
41313,        except:
41314,            return float(n)
41315,======================== CAPTURED OUTPUT =========================
41316,to_number(3735928559)   = 3735928559 == 3735928559
41317,"to_number(""0xFEEDFACE"") = 4277009102 == 4277009102"
41318,"to_number(""0x0"")        =          0 ==          0"
41319,to_number(100)          =        100 ==        100
41320,"to_number(""42"")         =         42 ==         42"
41321,to_number(8)            =          8 ==          8
41322,"to_number(""0o20"")       =         16 ==         16"
41323,"to_number(""020"")        =         16 ==         16"
41324,to_number(3.14)         =       3.14 ==       3.14
41325,"to_number(""2.72"")       =       2.72 ==       2.72"
41326,"to_number(""1e3"")        =     1000.0 ==       1000"
41327,to_number(0.001)        =      0.001 ==      0.001
41328,"to_number(""0xA"")        =         10 ==         10"
41329,"to_number(""012"")        =         10 ==         10"
41330,"to_number(""0o12"")       =         10 ==         10"
41331,"to_number(""0b01010"")    =         10 ==         10"
41332,"to_number(""10"")         =         10 ==         10"
41333,"to_number(""10.0"")       =       10.0 ==         10"
41334,"to_number(""1e1"")        =       10.0 ==         10"
41335,class test_to_number(unittest.TestCase):
41336,
41337,    def test_hex(self):
41338,        # All of the following should be converted to an integer
41339,        #
41340,        values = [
41341,
41342,                 #          HEX
41343,                 # ----------------------
41344,                 # Input     |   Expected
41345,                 # ----------------------
41346,"                (0xDEADBEEF  , 3735928559), # Hex"
41347,"                (""0xFEEDFACE"", 4277009102), # Hex"
41348,"                (""0x0""       ,          0), # Hex"
41349,
41350,                 #        Decimals
41351,                 # ----------------------
41352,                 # Input     |   Expected
41353,                 # ----------------------
41354,"                (100         ,        100), # Decimal"
41355,"                (""42""        ,         42), # Decimal"
41356,            ]
41357,
41358,
41359,
41360,        values += [
41361,                 #        Octals
41362,                 # ----------------------
41363,                 # Input     |   Expected
41364,                 # ----------------------
41365,"                (0o10        ,          8), # Octal"
41366,"                (""0o20""      ,         16), # Octal"
41367,"                (""020""       ,         16), # Octal"
41368,            ]
41369,
41370,
41371,        values += [
41372,                 #        Floats
41373,                 # ----------------------
41374,                 # Input     |   Expected
41375,                 # ----------------------
41376,"                (3.14        ,       3.14), # Float"
41377,"                (""2.72""      ,       2.72), # Float"
41378,"                (""1e3""       ,       1000), # Float"
41379,"                (1e-3        ,      0.001), # Float"
41380,            ]
41381,
41382,        values += [
41383,                 #        All ints
41384,                 # ----------------------
41385,                 # Input     |   Expected
41386,                 # ----------------------
41387,"                (""0xA""       ,         10), "
41388,"                (""012""       ,         10), "
41389,"                (""0o12""      ,         10), "
41390,"                (""0b01010""   ,         10), "
41391,"                (""10""        ,         10), "
41392,"                (""10.0""      ,         10), "
41393,"                (""1e1""       ,         10), "
41394,            ]
41395,
41396,"        for _input, expected in values:"
41397,            value = to_number(_input)
41398,
41399,"            if isinstance(_input, str):"
41400,"                cmd = 'to_number(""{}"")'.format(_input)"
41401,            else:
41402,                cmd = 'to_number({})'.format(_input)
41403,
41404,"            print(""{:23} = {:10} == {:10}"".format(cmd, value, expected))"
41405,"            self.assertEqual(value, expected)"
41406,a = int(float(a)) if int(float(a)) == float(a) else float(a)
41407,int
41408,float
41409,  def get_int_or_float(v):
41410,        number_as_float = float(v)
41411,        number_as_int = int(number_as_float)
41412,        return number_as_int if number_as_float == number_as_int else 
41413,        number_as_float
41414,def parse_num(candidate):
41415,"    """"""parse string to number if possible"
41416,"    work equally well with negative and positive numbers, integers and floats."
41417,
41418,    Args:
41419,        candidate (str): string to convert
41420,
41421,    Returns:
41422,        float | int | None: float or int if possible otherwise None
41423,"    """""""
41424,    try:
41425,        float_value = float(candidate)
41426,    except ValueError:
41427,        return None
41428,
41429,    # optional part if you prefer int to float when decimal part is 0 
41430,    if float_value.is_integer():
41431,        return int(float_value)
41432,    # end of the optional part
41433,
41434,    return float_value
41435,
41436,# test
41437,"candidates = ['34.77', '-13', 'jh', '8990', '76_3234_54']"
41438,"res_list = list(map(parse_num, candidates))"
41439,print('Before:')
41440,print(candidates)
41441,print('After:')
41442,print(res_list)
41443,Before:
41444,"['34.77', '-13', 'jh', '8990', '76_3234_54']"
41445,After:
41446,"[34.77, -13, None, 8990, 76323454]"
41447,def num(s):
41448,    try:
41449,        for each in s:
41450,            yield int(each)
41451,    except ValueError:
41452,        yield float(each)
41453,"a = num([""123.55"",""345"",""44""])"
41454,print a.next()
41455,print a.next()
41456,float
41457,try
41458,catch
41459,for
41460,">>> str_float = ""545.2222"""
41461,>>> float(str_float)
41462,545.2222
41463,>>> type(_) # Check its type
41464,<type 'float'>
41465,
41466,">>> str_int = ""31"""
41467,>>> int(str_int)
41468,31
41469,>>> type(_) # Check its type
41470,<type 'int'>
41471,object
41472,str
41473,int
41474,float
41475,int
41476,float
41477,__float
41478,__int__
41479,__float__
41480,"def conv_to_num(x, num_type='asis'):"
41481,    '''Converts an object to a number if possible.
41482,"    num_type: int, float, 'asis'"
41483,    Defaults to floating point in case of ambiguity.
41484,    '''
41485,    import numbers
41486,
41487,"    is_num, is_str, is_other = [False]*3"
41488,
41489,"    if isinstance(x, numbers.Number):"
41490,        is_num = True
41491,"    elif isinstance(x, str):"
41492,        is_str = True
41493,
41494,"    is_other = not any([is_num, is_str])"
41495,
41496,    if is_num:
41497,        res = x
41498,    elif is_str:
41499,"        is_float, is_int, is_char = [False]*3"
41500,        try:
41501,            res = float(x)
41502,            if '.' in x:
41503,                is_float = True
41504,            else:
41505,                is_int = True
41506,        except ValueError:
41507,            res = x
41508,            is_char = True
41509,
41510,    else:
41511,        if num_type == 'asis':
41512,"            funcs = [int, float]"
41513,        else:
41514,            funcs = [num_type]
41515,
41516,        for func in funcs:
41517,            try:
41518,                res = func(x)
41519,                break
41520,            except TypeError:
41521,                continue
41522,        else:
41523,            res = x
41524,"s=""45.8"""
41525,print(float(s))
41526,
41527,y='67'
41528,print(int(y))
41529,"string_for_int = ""498 results should get"""
41530,"string_for_float = ""498.45645765 results should get"""
41531, import re
41532,
41533, #for get integer part:
41534," print(int(re.search(r'\d+', string_for_int).group())) #498"
41535,
41536, #for get float part:
41537," print(float(re.search(r'\d+\.\d+', string_for_float).group())) #498.45645765"
41538,"value1 = ""10"""
41539,"value2 = ""10.2"""
41540,print(int(value1)) #10
41541,print(float(value2)) #10.2
41542,def parseIntOrFloat( aString ):
41543,    return eval( aString )
41544,">>> parseIntOrFloat(""545.2222"")"
41545,545.22220000000004
41546,">>> parseIntOrFloat(""545"")"
41547,545
41548,"""import os; os.abort()"""
41549,eval()
41550,try: int(s) except: float(s)
41551,eval
41552,*args
41553,**kwargs
41554,*args
41555,**kwargs
41556,*args
41557,**kwargs
41558,*args
41559,**kwargs
41560,*args
41561,**kwargs
41562,func_*_args()
41563,"explicit args, then *args, then **kwargs"
41564,"def foo (arg1, arg2, *args, **kwargs): ..."
41565,arguments
41566,*
41567,**
41568,*args
41569,**kwargs
41570,*args
41571,>>> def print_everything(*args):
41572,"        for count, thing in enumerate(args):"
41573,"...         print( '{0}. {1}'.format(count, thing))"
41574,...
41575,">>> print_everything('apple', 'banana', 'cabbage')"
41576,0. apple
41577,1. banana
41578,2. cabbage
41579,**kwargs
41580,>>> def table_things(**kwargs):
41581,"...     for name, value in kwargs.items():"
41582,"...         print( '{0} = {1}'.format(name, value))"
41583,...
41584,">>> table_things(apple = 'fruit', cabbage = 'vegetable')"
41585,cabbage = vegetable
41586,apple = fruit
41587,*args
41588,**kwargs
41589,"def table_things(titlestring, **kwargs)"
41590,*args
41591,**kwargs
41592,*
41593,**
41594,">>> def print_three_things(a, b, c):"
41595,"...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))"
41596,...
41597,">>> mylist = ['aardvark', 'baboon', 'cat']"
41598,>>> print_three_things(*mylist)
41599,"a = aardvark, b = baboon, c = cat"
41600,*
41601,"function_call(arg1,arg2,*expanded_list_args,arg4,arg5)"
41602,"a, b, *c, d, e = 1, 2, 3, 4, 5, 6"
41603,mylist
41604,an array
41605,print_three_things
41606,*mylist
41607,*
41608,spreading operator
41609,*args
41610,**kwargs
41611,class Foo(object):
41612,"    def __init__(self, value1, value2):"
41613,        # do something with the values
41614,"        print value1, value2"
41615,
41616,class MyFoo(Foo):
41617,"    def __init__(self, *args, **kwargs):"
41618,"        # do something else, don't care about the args"
41619,        print 'myfoo'
41620,"        super(MyFoo, self).__init__(*args, **kwargs)"
41621,value2
41622,args
41623,"def func(required_arg, *args, **kwargs):"
41624,    # required_arg is a positional-only parameter.
41625,    print required_arg
41626,
41627,"    # args is a tuple of positional arguments,"
41628,    # because the parameter name has * prepended.
41629,    if args: # If args is not empty.
41630,        print args
41631,
41632,"    # kwargs is a dictionary of keyword arguments,"
41633,    # because the parameter name has ** prepended.
41634,    if kwargs: # If kwargs is not empty.
41635,        print kwargs
41636,
41637,>>> func()
41638,Traceback (most recent call last):
41639,"  File ""<stdin>"", line 1, in <module>"
41640,TypeError: func() takes at least 1 argument (0 given)
41641,
41642,">>> func(""required argument"")"
41643,required argument
41644,
41645,">>> func(""required argument"", 1, 2, '3')"
41646,required argument
41647,"(1, 2, '3')"
41648,
41649,">>> func(""required argument"", 1, 2, '3', keyword1=4, keyword2=""foo"")"
41650,required argument
41651,"(1, 2, '3')"
41652,"{'keyword2': 'foo', 'keyword1': 4}"
41653,**
41654,mynum = 1000
41655,mystr = 'Hello World!'
41656,"print(""{mystr} New-style formatting is {mynum}x more fun!"".format(**locals()))"
41657,format
41658,f'{mystr} New-style formatting is {mynum}x more fun!'
41659,def mydecorator( f ):
41660,   @functools.wraps( f )
41661,"   def wrapper( *args, **kwargs ):"
41662,"      print ""Calling f"", args, kwargs"
41663,"      v = f( *args, **kwargs )"
41664,"      print ""f returned"", v"
41665,      return v
41666,   return wrapper
41667,def sumFunction(*args):
41668,  result = 0
41669,  for x in args:
41670,    result += x
41671,  return result
41672,def someFunction(**kwargs):
41673,  if 'text' in kwargs:
41674,    print kwargs['text']
41675,>>> import operator
41676,>>> def multiply(*args):
41677,"...  return reduce(operator.mul, args)"
41678,">>> multiply(1,2,3)"
41679,6
41680,
41681,or
41682,
41683,">>> numbers = [1,2,3]"
41684,>>> multiply(*numbers)
41685,6
41686,*args
41687,**kwargs
41688,**kw
41689,struct.unpack()
41690,struct.pack()
41691,struck.pack()
41692,"tuple_of_data = struct.unpack(format_str, data)"
41693,# ... manipulate the data
41694,"new_data = struct.pack(format_str, *tuple_of_data)"
41695,"new_data = struct.pack(format_str, tuple_of_data[0], tuple_of_data[1], tuple_of_data[2],...)"
41696,def myprint(*args):
41697,    print *args
41698,def myprint(*args):
41699,    print args
41700,def myprint(*args):
41701,    for arg in args:
41702,"        print arg,"
41703,    print
41704,from __future__ import print_function
41705,"def foo(bar=2, baz=5):"
41706,"    print bar, baz"
41707,
41708,"def proxy(x, *args, **kwargs): # reqire parameter x and accept any number of additional arguments"
41709,    print x
41710,"    foo(*args, **kwargs) # applies the ""non-x"" parameter to foo"
41711,
41712,"proxy(23, 5, baz='foo') # calls foo with bar=5 and baz=foo"
41713,proxy(6)# calls foo with its default arguments
41714,"proxy(7, bar='asdas') # calls foo with bar='asdas' and leave baz default argument"
41715,myfunction(myarg=1)
41716,**kwargs
41717,read()
41718,f = f.open()
41719,
41720,# get the year
41721,"match = re.search(r'Popularity in (\d+)', f.read())"
41722,
41723,if match:
41724,  print match.group(1)
41725,
41726,# get all the names
41727,"matches = re.findall(r'<td>(\d+)</td><td>(\w+)</td><td>(\w+)</td>', f.read())"
41728,
41729,if matches:
41730,  # matches is always None
41731,read()
41732,read()
41733,readline()
41734,readlines()
41735,for line in handle:
41736,read()
41737,seek(0)
41738,read()
41739,findall
41740,with
41741,seek()
41742,>>> a = open('file.txt')
41743,>>> a.read()
41744,#output
41745,>>> a.seek(0)
41746,>>> a.read()
41747,#same output
41748,read()
41749,f = f.open()
41750,text = f.read() # read the file into a local variable
41751,# get the year
41752,"match = re.search(r'Popularity in (\d+)', text)"
41753,if match:
41754,  print match.group(1)
41755,# get all the names
41756,"matches = re.findall(r'<td>(\d+)</td><td>(\w+)</td><td>(\w+)</td>', text)"
41757,if matches:
41758,  # matches will now not always be None
41759,from pathlib import Path; text = Path(filename).read_text()
41760,seek()
41761,read(10)
41762,read(10)
41763,read()
41764,read()
41765,seek
41766,read()
41767,read()
41768,read(n)
41769,n
41770,"def smaller(x, y):"
41771,    if x > y:
41772,        print(y) 
41773,    else:
41774,        print(x) 
41775,
41776,"print(smaller(2, 3))"
41777,>>>
41778,2
41779,None
41780,None
41781,return
41782,print
41783,None
41784,print
41785,return
41786,return None
41787,"def jiskya(x, y):"
41788,    if x > y:
41789,        return y
41790,    else:
41791,        return x
41792,
41793,"print(jiskya(2, 3))"
41794,return None
41795,return None
41796,return None
41797,None
41798,return None
41799,return
41800,return
41801,return
41802,None
41803,None
41804,"print(jiskya(2, 3))"
41805,print(print(2))
41806,print(2)
41807,None
41808,def hello():
41809,    return 2
41810,print(hello())
41811,return
41812,return
41813,return someVariable
41814,print
41815,print print someVariable
41816,None
41817,None
41818,"def jiskya(x, y):"
41819,    if x > y:
41820,        print(y)
41821,    else:
41822,        print(x)
41823,"def jiskya(x, y):"
41824,    if x > y:
41825,        return y
41826,    else:
41827,        return x
41828,None
41829,None
41830,None
41831,NoneType
41832,x
41833,y
41834,None
41835,None
41836,"def yourfunction(x, y):"
41837,    if x > y:
41838,        return y
41839,    else:
41840,        return x
41841,">>> print yourfunction(2, 3)"
41842,2
41843,"print jiskya(2,3)"
41844,jiskya
41845,print
41846,jiskya
41847,x
41848,y
41849,print
41850,"print jiskya(2, 3)"
41851,"print jiskya(2,3)"
41852,">> Executing jiskya with arguments 2, 3"
41853,>> jiskya evaulates `print x`
41854,>> 2 is printed
41855,>> Function jiskya exits with no return value
41856,print None
41857,>> None is printed
41858,def test1():
41859,
41860,"    print(""code...!!!"")"
41861,
41862,type(test1())
41863,
41864,Output: code...!!!
41865,        NoneType
41866,def test1():
41867,
41868,"    a= print(""code...!!!"")"
41869,    
41870,    return a
41871,
41872,type(test1())
41873,
41874,
41875,Output: code...!!!
41876,        NoneType
41877,def test1():
41878,
41879,"    a = ""First code...!!!"""
41880,    
41881,    return a
41882,
41883,type(test1())
41884,
41885,
41886,Output: str
41887,.to_clipboard
41888,.to_clipboard
41889,import pandas as pd
41890,import numpy as np
41891,from datetime import datetime
41892,from string import ascii_lowercase as al
41893,
41894,np.random.seed(365)
41895,rows = 15
41896,cols = 2
41897,"data = np.random.randint(0, 10, size=(rows, cols))"
41898,"index = pd.bdate_range(datetime.today(), freq='d', periods=rows)"
41899,
41900,"df = pd.DataFrame(data=data, index=index, columns=list(al[:cols]))"
41901,
41902,            a  b
41903,2020-07-30  2  4
41904,2020-07-31  1  5
41905,2020-08-01  2  2
41906,2020-08-02  9  8
41907,2020-08-03  4  0
41908,2020-08-04  3  3
41909,2020-08-05  7  7
41910,2020-08-06  7  0
41911,2020-08-07  8  4
41912,2020-08-08  3  2
41913,2020-08-09  6  2
41914,2020-08-10  6  8
41915,2020-08-11  9  6
41916,2020-08-12  1  6
41917,2020-08-13  5  7
41918,"df.head(10).to_clipboard(sep=',', index=True)"
41919,pandas.DataFrame.to_clipboard
41920,"df.head(10).to_clipboard(sep=',', index=True)"
41921,code block
41922,",a,b"
41923,"2020-07-30,2,4"
41924,"2020-07-31,1,5"
41925,"2020-08-01,2,2"
41926,"2020-08-02,9,8"
41927,"2020-08-03,4,0"
41928,"2020-08-04,3,3"
41929,"2020-08-05,7,7"
41930,"2020-08-06,7,0"
41931,"2020-08-07,8,4"
41932,"2020-08-08,3,2"
41933,"df = pd.read_clipboard(sep=',')"
41934,.head(10)
41935,.iloc
41936,"df.iloc[3:12, :].to_clipboard(sep=',')"
41937,pd.read_clipboard
41938,.to_clipboard()
41939,.to_dict()
41940,"# if you have a datetime column, convert it to a str"
41941,df['date'] = df['date'].astype('str')
41942,
41943,"# if you have a datetime index, convert it to a str"
41944,df.index = df.index.astype('str')
41945,
41946,# output to a dict
41947,df.head(10).to_dict(orient='index')
41948,
41949,# which will look like
41950,"{'2020-07-30': {'a': 2, 'b': 4},"
41951," '2020-07-31': {'a': 1, 'b': 5},"
41952," '2020-08-01': {'a': 2, 'b': 2},"
41953," '2020-08-02': {'a': 9, 'b': 8},"
41954," '2020-08-03': {'a': 4, 'b': 0},"
41955," '2020-08-04': {'a': 3, 'b': 3},"
41956," '2020-08-05': {'a': 7, 'b': 7},"
41957," '2020-08-06': {'a': 7, 'b': 0},"
41958," '2020-08-07': {'a': 8, 'b': 4},"
41959," '2020-08-08': {'a': 3, 'b': 2}}"
41960,
41961,# copy the previous dict and paste into a code block on SO
41962,# the dict can be converted to a dataframe with 
41963,"# df = pd.DataFrame.from_dict(d, orient='index')  # d is the name of the dict"
41964,# convert datatime column or index back to datetime
41965,.to_dict()
41966,print(df.head(20))
41967,pd.read_clipboard()
41968,pandas
41969,multiindex
41970,if #Function that checks for mouse clicked on Sprite:
41971,"    print (""You have opened a chest!"")"
41972,sprites
41973,MOUSEBUTTONDOWN
41974,MOUSEBUTTONUP
41975,while ... # your main loop
41976,  # get all events
41977,  ev = pygame.event.get()
41978,
41979,  # proceed events
41980,  for event in ev:
41981,
41982,    # handle MOUSEBUTTONUP
41983,    if event.type == pygame.MOUSEBUTTONUP:
41984,      pos = pygame.mouse.get_pos()
41985,
41986,      # get a list of all sprites that are under the mouse cursor
41987,      clicked_sprites = [s for s in sprites if s.rect.collidepoint(pos)]
41988,      # do something with the clicked sprites...
41989,if pygame.mouse.get_pressed()[0] and mysprite.rect.collidepoint(pygame.mouse.get_pos()):
41990,"  print (""You have opened a chest!"")"
41991,handled = False
41992,
41993,while ... // your loop
41994,
41995,  if pygame.mouse.get_pressed()[0] and mysprite.rect.collidepoint(pygame.mouse.get_pos()) and not handled:
41996,"    print (""You have opened a chest!"")"
41997,    handled = pygame.mouse.get_pressed()[0]
41998,Sprite
41999,is_clicked
42000,class MySprite(Sprite):
42001,  ...
42002,
42003,  def is_clicked(self):
42004,    return pygame.mouse.get_pressed()[0] and self.rect.collidepoint(pygame.mouse.get_pos())
42005,event.pos
42006,event.pos
42007,mouse.get_pos
42008,MOUSEBUTTONDOWN
42009,MOUSEBUTTONUP
42010,pygame.event.Event()
42011,pos
42012,button
42013,pygame.event
42014,rect
42015,pygame.sprite.Sprite
42016,collidepoint
42017,update
42018,pygame.sprite.Group
42019,class SpriteObject(pygame.sprite.Sprite):
42020,    # [...]
42021,
42022,"    def update(self, event_list):"
42023,
42024,        for event in event_list:
42025,            if event.type == pygame.MOUSEBUTTONDOWN:
42026,                if self.rect.collidepoint(event.pos):
42027,                    # [...]
42028,
42029,my_sprite = SpriteObject()
42030,group = pygame.sprite.Group(my_sprite)
42031,
42032,# [...]
42033,
42034,run = True
42035,while run:
42036,    event_list = pygame.event.get()
42037,    for event in event_list:
42038,        if event.type == pygame.QUIT:
42039,            run = False 
42040,
42041,    group.update(event_list)
42042,
42043,    # [...]
42044,import pygame
42045,
42046,class SpriteObject(pygame.sprite.Sprite):
42047,"    def __init__(self, x, y, color):"
42048,        super().__init__() 
42049,"        self.original_image = pygame.Surface((50, 50), pygame.SRCALPHA)"
42050,"        pygame.draw.circle(self.original_image, color, (25, 25), 25)"
42051,"        self.click_image = pygame.Surface((50, 50), pygame.SRCALPHA)"
42052,"        pygame.draw.circle(self.click_image, color, (25, 25), 25)"
42053,"        pygame.draw.circle(self.click_image, (255, 255, 255), (25, 25), 25, 4)"
42054,        self.image = self.original_image 
42055,"        self.rect = self.image.get_rect(center = (x, y))"
42056,        self.clicked = False
42057,
42058,"    def update(self, event_list):"
42059,        for event in event_list:
42060,            if event.type == pygame.MOUSEBUTTONDOWN:
42061,                if self.rect.collidepoint(event.pos):
42062,                    self.clicked = not self.clicked
42063,
42064,        self.image = self.click_image if self.clicked else self.original_image
42065,
42066,pygame.init()
42067,"window = pygame.display.set_mode((300, 300))"
42068,clock = pygame.time.Clock()
42069,
42070,"sprite_object = SpriteObject(*window.get_rect().center, (128, 128, 0))"
42071,group = pygame.sprite.Group([
42072,"    SpriteObject(window.get_width() // 3, window.get_height() // 3, (128, 0, 0)),"
42073,"    SpriteObject(window.get_width() * 2 // 3, window.get_height() // 3, (0, 128, 0)),"
42074,"    SpriteObject(window.get_width() // 3, window.get_height() * 2 // 3, (0, 0, 128)),"
42075,"    SpriteObject(window.get_width() * 2// 3, window.get_height() * 2 // 3, (128, 128, 0)),"
42076,])
42077,
42078,run = True
42079,while run:
42080,    clock.tick(60)
42081,    event_list = pygame.event.get()
42082,    for event in event_list:
42083,        if event.type == pygame.QUIT:
42084,            run = False 
42085,
42086,    group.update(event_list)
42087,
42088,    window.fill(0)
42089,    group.draw(window)
42090,    pygame.display.flip()
42091,
42092,pygame.quit()
42093,exit()
42094,pygame.mouse.get_pos()
42095,pygame.mouse.get_pressed()
42096,True
42097,False
42098,True
42099,True
42100,Update
42101,pygame.sprite.Sprite
42102,class SpriteObject(pygame.sprite.Sprite):
42103,    # [...]
42104,
42105,"    def update(self, event_list):"
42106,
42107,        mouse_pos = pygame.mouse.get_pos()
42108,        mouse_buttons = pygame.mouse.get_pressed()
42109,
42110,        if  self.rect.collidepoint(mouse_pos) and any(mouse_buttons):
42111,            # [...]
42112,
42113,my_sprite = SpriteObject()
42114,group = pygame.sprite.Group(my_sprite)
42115,
42116,# [...]
42117,
42118,run = True
42119,while run:
42120,    for event in pygame.event.get():
42121,        if event.type == pygame.QUIT:
42122,            run = False
42123,
42124,    group.update(event_list)
42125,
42126,    # [...]
42127,import pygame
42128,
42129,class SpriteObject(pygame.sprite.Sprite):
42130,"    def __init__(self, x, y, color):"
42131,        super().__init__() 
42132,"        self.original_image = pygame.Surface((50, 50), pygame.SRCALPHA)"
42133,"        pygame.draw.circle(self.original_image, color, (25, 25), 25)"
42134,"        self.hover_image = pygame.Surface((50, 50), pygame.SRCALPHA)"
42135,"        pygame.draw.circle(self.hover_image, color, (25, 25), 25)"
42136,"        pygame.draw.circle(self.hover_image, (255, 255, 255), (25, 25), 25, 4)"
42137,        self.image = self.original_image 
42138,"        self.rect = self.image.get_rect(center = (x, y))"
42139,        self.hover = False
42140,
42141,    def update(self):
42142,        mouse_pos = pygame.mouse.get_pos()
42143,        mouse_buttons = pygame.mouse.get_pressed()
42144,
42145,        #self.hover = self.rect.collidepoint(mouse_pos)
42146,        self.hover = self.rect.collidepoint(mouse_pos) and any(mouse_buttons)
42147,
42148,        self.image = self.hover_image if self.hover else self.original_image
42149,
42150,pygame.init()
42151,"window = pygame.display.set_mode((300, 300))"
42152,clock = pygame.time.Clock()
42153,
42154,"sprite_object = SpriteObject(*window.get_rect().center, (128, 128, 0))"
42155,group = pygame.sprite.Group([
42156,"    SpriteObject(window.get_width() // 3, window.get_height() // 3, (128, 0, 0)),"
42157,"    SpriteObject(window.get_width() * 2 // 3, window.get_height() // 3, (0, 128, 0)),"
42158,"    SpriteObject(window.get_width() // 3, window.get_height() * 2 // 3, (0, 0, 128)),"
42159,"    SpriteObject(window.get_width() * 2// 3, window.get_height() * 2 // 3, (128, 128, 0)),"
42160,])
42161,
42162,run = True
42163,while run:
42164,    clock.tick(60)
42165,    for event in pygame.event.get():
42166,        if event.type == pygame.QUIT:
42167,            run = False 
42168,
42169,    group.update()
42170,
42171,    window.fill(0)
42172,    group.draw(window)
42173,    pygame.display.flip()
42174,
42175,pygame.quit()
42176,exit()
42177,pygame.mouse.get_pressed
42178,pygame.mouse.get_pos
42179,pygame.sprite.collide_rect()
42180,# Python 3.4.3 with Pygame
42181,from sys import exit
42182,import pygame
42183,pygame.init()
42184,
42185,WIDTH = HEIGHT = 300
42186,"window = pygame.display.set_mode((WIDTH, HEIGHT))"
42187,pygame.display.set_caption('Crash!')
42188,
42189,# Draw Once
42190,"rectangle = pygame.draw.rect(window, (255, 0, 0), (100, 100, 100, 100))"
42191,pygame.display.update()
42192,
42193,# Main Loop
42194,while True:
42195,    # Mouse position and button clicking
42196,    pos = pygame.mouse.get_pos()
42197,    pressed1 = pygame.mouse.get_pressed()[0]
42198,
42199,    # Check if rectangle collided with pos and if the left mouse button was pressed
42200,    if rectangle.collidepoint(pos) and pressed1:
42201,"        print(""You have opened a chest!"")"
42202,
42203,    # Quit pygame
42204,    for event in pygame.event.get():
42205,        if event.type == pygame.QUIT:
42206,            pygame.quit()
42207,            exit()
42208,"""Hello %s"" % name"
42209,"""Hello {}"".format(name)"
42210,str.format
42211,"f""{name}"""
42212,"name = ""Alice"""
42213,
42214,"""Hello %s"" % name"
42215,"""Hello {0}"".format(name)"
42216,"f""Hello {name}"""
42217,
42218,# Using named arguments:
42219,"""Hello %(kwarg)s"" % {'kwarg': name}"
42220,"""Hello {kwarg}"".format(kwarg=name)"
42221,"f""Hello {name}"""
42222,%
42223,format()
42224,%
42225,format()
42226,%
42227,.format
42228,%
42229,"""Hello %s"" % name"
42230,name
42231,"(1, 2, 3)"
42232,TypeError
42233,"""Hello %s"" % (name,)   # supply the single argument as a single-item tuple"
42234,.format
42235,.format
42236,"log.debug(""some debug info: %s"" % some_info)"
42237,"""some debug info: roflcopters are active"""
42238,log.debug()
42239,"""%(a)s, %(a)s"" % {'a':'test'}"
42240,"log.debug(""something: %s"" % x)"
42241,"log.debug(""something: %s"", x)"
42242,"'{0}, {0}'.format('test')"
42243,man sprintf
42244,$
42245,%
42246,"printf(""%2$d"", 1, 3)"
42247,"tu = (12,45,22222,103,6)"
42248,print '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*tu)
42249,12 22222 45 22222 103 22222 6 22222
42250,format()
42251,"li = [12,45,78,784,2,69,1254,4785,984]"
42252,"print map('the number is {}'.format,li)   "
42253,
42254,print
42255,
42256,"from datetime import datetime,timedelta"
42257,
42258,"once_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)"
42259,"delta = timedelta(days=13, hours=8,  minutes=20)"
42260,
42261,gen =(once_upon_a_time +x*delta for x in xrange(20))
42262,
42263,"print '\n'.join(map('{:%Y-%m-%d %H:%M:%S}'.format, gen))"
42264,"['the number is 12', 'the number is 45', 'the number is 78', 'the number is 784', 'the number is 2', 'the number is 69', 'the number is 1254', 'the number is 4785', 'the number is 984']"
42265,
42266,2010-07-01 12:00:00
42267,2010-07-14 20:20:00
42268,2010-07-28 04:40:00
42269,2010-08-10 13:00:00
42270,2010-08-23 21:20:00
42271,2010-09-06 05:40:00
42272,2010-09-19 14:00:00
42273,2010-10-02 22:20:00
42274,2010-10-16 06:40:00
42275,2010-10-29 15:00:00
42276,2010-11-11 23:20:00
42277,2010-11-25 07:40:00
42278,2010-12-08 16:00:00
42279,2010-12-22 00:20:00
42280,2011-01-04 08:40:00
42281,2011-01-17 17:00:00
42282,2011-01-31 01:20:00
42283,2011-02-13 09:40:00
42284,2011-02-26 18:00:00
42285,2011-03-12 02:20:00
42286,map
42287,"map('some_format_string_%s'.__mod__, some_iterable)"
42288,"printf(""%2$s %1$s\n"", ""One"", ""Two"");"
42289,gcc -std=c99 test.c -o test
42290,Two One
42291,sprintf
42292,C
42293,Posix
42294,%
42295,logging
42296,.debug()
42297,"log.debug(""some debug info: %s"", some_info)"
42298,"log.debug(""some debug info: %(this)s and %(that)s"",     dict(this='Tom', that='Jerry'))"
42299,.format()
42300,">>> origin = ""London"""
42301,">>> destination = ""Paris"""
42302,">>> f""from {origin} to {destination}"""
42303,'from London to Paris'
42304,"f"""
42305,SyntaxError
42306,%
42307,.format
42308,%
42309,%
42310,.format
42311,'{}'.format(unicode_string)
42312,"Python 2.7.2 (default, Aug 27 2012, 19:52:55) "
42313,[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
42314,; s='й'
42315,; u=u'й'
42316,; s
42317,'\xd0\xb9'
42318,; u
42319,u'\u0439'
42320,s
42321,u
42322,; '%s' % s
42323,'\xd0\xb9'
42324,; '%s' % u
42325,u'\u0439'
42326,%
42327,; '{}'.format(s)
42328,'\xd0\xb9'
42329,; '{}'.format(u)
42330,Traceback (most recent call last):
42331,"  File ""<stdin>"", line 1, in <module>"
42332,UnicodeEncodeError: 'latin-1' codec can't encode character u'\u0439' in position 0: ordinal not in range(256)
42333,.format
42334,; u'{}'.format(s)
42335,u'\xd0\xb9'
42336,; u'{}'.format(u)
42337,u'\u0439'
42338,; '{}'.format(u'i')
42339,'i'
42340,format
42341,%
42342,"""p1=%s p2=%d"" % ""abc"", 2"
42343,"""p1=%s p2=%s"" % (tuple_p1_p2,)"
42344,%s
42345,%02d
42346,"""p1=%s p2=%02d"".format(""abc"", 2)"
42347,{{}}
42348,%
42349,format
42350,import timeit
42351,"print 'format:', timeit.timeit(""'{}{}{}'.format(1, 1.23, 'hello')"")"
42352,"print '%:', timeit.timeit(""'%s%s%s' % (1, 1.23, 'hello')"")"
42353,> format: 0.470329046249
42354,> %: 0.357107877731
42355,import timeit
42356,"print('format:', timeit.timeit(""'{}{}{}'.format(1, 1.23, 'hello')""))"
42357,"print('%:', timeit.timeit(""'%s%s%s' % (1, 1.23, 'hello')""))"
42358,> format: 0.5864730989560485
42359,> %: 0.013593495357781649
42360,%
42361,format
42362,> format: 0.86600608
42363,> %: 0.630180146
42364,import timeit
42365,"print('format:', timeit.timeit(""'{}{}{}'.format(1, 1.23, 'hello')""))"
42366,"print('%:', timeit.timeit(""'%s%s%s' % (1, 1.23, 'hello')""))"
42367,"print('f-string:', timeit.timeit(""f'{1}{1.23}{\""hello\""}'""))"
42368,format: 0.8331376779999999
42369,%: 0.6314778750000001
42370,f-string: 0.766649943
42371,%
42372,format
42373,str.format
42374,'{0:%Y-%m-%d}'.format(datetime.datetime.utcnow())
42375,%
42376,printf
42377,%
42378,format()
42379,.format
42380,In [12]: class A(object):
42381,"   ....:     def __init__(self, x, y):"
42382,   ....:         self.x = x
42383,   ....:         self.y = y
42384,   ....:         
42385,
42386,"In [13]: a = A(2,3)"
42387,
42388,"In [14]: 'x is {0.x}, y is {0.y}'.format(a)"
42389,"Out[14]: 'x is 2, y is 3'"
42390,"In [15]: 'x is {a.x}, y is {a.y}'.format(a=a)"
42391,"Out[15]: 'x is 2, y is 3'"
42392,%
42393,"'x is {0}, y is {1}'.format(a.x, a.y)"
42394,a.x
42395,"'x is {a.x}, y is {a.y}'.format(a=a)"
42396,"'x is {a.x}, y is {a.y}'.format(**vars())"
42397,'{foo[bar]}'.format(foo={'bar': 'baz'})
42398,"Your order, number {order[number]} was processed at {now:%Y-%m-%d %H:%M:%S}, will be ready at about {order[eta]:%H:%M:%S}"
42399,%
42400,Decimal
42401,#!/usr/bin/env python3
42402,
42403,from decimal import *
42404,
42405,getcontext().prec = 50
42406,"d = Decimal('3.12375239e-24') # no magic number, I rather produced it by banging my head on my keyboard"
42407,
42408,print('%.50f' % d)
42409,print('{0:.50f}'.format(d))
42410,format()
42411,str(d)
42412,float(d)
42413,str(d)
42414,"""3.12375239e-24"""
42415,"""0.00000000000000000000000312375239000000000000000000"""
42416,"In [1]: params=['Hello', 'adam', 42]"
42417,
42418,"In [2]: %timeit ""%s %s, the answer to everything is %d.""%(params[0],params[1],params[2])"
42419,"448 ns ± 1.48 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
42420,
42421,"In [3]: %timeit ""{} {}, the answer to everything is {}."".format(*params)"
42422,"449 ns ± 1.42 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
42423,
42424,"In [4]: %timeit f""{params[0]} {params[1]}, the answer to everything is {params[2]}."""
42425,"12.7 ns ± 0.0129 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)"
42426,logging.debug
42427,logging.info
42428,__str__
42429,str(message_object)
42430,import logging
42431,
42432,
42433,class NewStyleLogMessage(object):
42434,"    def __init__(self, message, *args, **kwargs):"
42435,        self.message = message
42436,        self.args = args
42437,        self.kwargs = kwargs
42438,
42439,    def __str__(self):
42440,        args = (i() if callable(i) else i for i in self.args)
42441,"        kwargs = dict((k, v() if callable(v) else v) for k, v in self.kwargs.items())"
42442,
42443,"        return self.message.format(*args, **kwargs)"
42444,
42445,N = NewStyleLogMessage
42446,
42447,# Neither one of these messages are formatted (or calculated) until they're
42448,# needed
42449,
42450,"# Emits ""Lazily formatted log entry: 123 foo"" in log"
42451,"logging.debug(N('Lazily formatted log entry: {0} {keyword}', 123, keyword='foo'))"
42452,
42453,
42454,def expensive_func():
42455,    # Do something that takes a long time...
42456,    return 'foo'
42457,
42458,"# Emits ""Expensive log entry: foo"" in log"
42459,"logging.debug(N('Expensive log entry: {keyword}', keyword=expensive_func))"
42460,expensive_func
42461,format
42462,__str__
42463,logging
42464,N
42465,logging.Formatter(style='{')
42466,%
42467,'{type_names} [a-z]{2}'.format(type_names='triangle|square')
42468,IndexError
42469,'%(type_names)s [a-z]{2}' % {'type_names': 'triangle|square'}
42470,'{type_names} [a-z]{{2}}'
42471,'{type_names} [a-z]{{2}}'.format(type_names='triangle|square')
42472,.format()
42473,"""One situation where % may help is when you are formatting regex expressions."""
42474,"a=r""[a-z]{2}"""
42475,c1 = b + a
42476,c2 = a
42477,c1
42478,format
42479,b
42480,c2
42481,"a=r""[a-z]{2}"""
42482,c2
42483,"a=r""[a-z]{{2}}"""
42484,c1.format(...)
42485,"foo = ""john"""
42486,"bar = ""smith"""
42487,"print(f""My name is {foo} {bar}"")"
42488,"mylist = [""foo"", ""bar""]"
42489,"print(f""mylist = {mylist}"")"
42490,"print(f'Hello, here is the date : {time.strftime(""%d/%m/%Y"")}')"
42491,#!/usr/bin/env python
42492,import timeit
42493,
42494,def time_it(fn):
42495,"    """""""
42496,    Measure time of execution of a function
42497,"    """""""
42498,"    def wrapper(*args, **kwargs):"
42499,        t0 = timeit.default_timer()
42500,"        fn(*args, **kwargs)"
42501,        t1 = timeit.default_timer()
42502,"        print(""{0:.10f} seconds"".format(t1 - t0))"
42503,    return wrapper
42504,
42505,
42506,@time_it
42507,def new_new_format(s):
42508,"    print(""new_new_format:"", f""{s[0]} {s[1]} {s[2]} {s[3]} {s[4]}"")"
42509,
42510,
42511,@time_it
42512,def new_format(s):
42513,"    print(""new_format:"", ""{0} {1} {2} {3} {4}"".format(*s))"
42514,
42515,
42516,@time_it
42517,def old_format(s):
42518,"    print(""old_format:"", ""%s %s %s %s %s"" % s)"
42519,
42520,
42521,def main():
42522,"    samples = ((""uno"", ""dos"", ""tres"", ""cuatro"", ""cinco""), (1,2,3,4,5), (1.1, 2.1, 3.1, 4.1, 5.1), (""uno"", 2, 3.14, ""cuatro"", 5.5),) "
42523,    for s in samples:
42524,        new_new_format(s)
42525,        new_format(s)
42526,        old_format(s)
42527,"        print(""-----"")"
42528,
42529,
42530,if __name__ == '__main__':
42531,    main()
42532,new_new_format: uno dos tres cuatro cinco
42533,0.0000170280 seconds
42534,new_format: uno dos tres cuatro cinco
42535,0.0000046750 seconds
42536,old_format: uno dos tres cuatro cinco
42537,0.0000034820 seconds
42538,-----
42539,new_new_format: 1 2 3 4 5
42540,0.0000043980 seconds
42541,new_format: 1 2 3 4 5
42542,0.0000062590 seconds
42543,old_format: 1 2 3 4 5
42544,0.0000041730 seconds
42545,-----
42546,new_new_format: 1.1 2.1 3.1 4.1 5.1
42547,0.0000092650 seconds
42548,new_format: 1.1 2.1 3.1 4.1 5.1
42549,0.0000055340 seconds
42550,old_format: 1.1 2.1 3.1 4.1 5.1
42551,0.0000052130 seconds
42552,-----
42553,new_new_format: uno 2 3.14 cuatro 5.5
42554,0.0000053380 seconds
42555,new_format: uno 2 3.14 cuatro 5.5
42556,0.0000047570 seconds
42557,old_format: uno 2 3.14 cuatro 5.5
42558,0.0000045320 seconds
42559,-----
42560,s1='albha'
42561,s2='beta'
42562,
42563,f'{s1}{s2:>10}'
42564,
42565,#output
42566,'albha      beta'
42567,%
42568,">>> '{{0}, {1}}'.format(1,2)"
42569,Traceback (most recent call last):
42570,"  File ""<pyshell#3>"", line 1, in <module>"
42571,"    '{{0}, {1}}'.format(1,2)"
42572,ValueError: Single '}' encountered in format string
42573,">>> '{%s, %s}'%(1,2)"
42574,"'{1, 2}'"
42575,>>> 
42576,static
42577,static
42578,static
42579,static
42580,>>> class MyClass:
42581,...     i = 3
42582,...
42583,>>> MyClass.i
42584,3 
42585,i
42586,i
42587,>>> m = MyClass()
42588,>>> m.i = 4
42589,">>> MyClass.i, m.i"
42590,">>> (3, 4)"
42591,class C:
42592,    @staticmethod
42593,"    def f(arg1, arg2, ...): ..."
42594,@classmethod
42595,@staticmethod
42596,const.py
42597,PI = 3.14
42598,from const import PI
42599,i = 3
42600,i
42601,i
42602,>>> class Test(object):
42603,...     i = 3
42604,...
42605,>>> Test.i
42606,3
42607,>>> t = Test()
42608,">>> t.i     # ""static"" variable accessed via instance"
42609,3
42610,>>> t.i = 5 # but if we assign to the instance ...
42611,">>> Test.i  # we have not changed the ""static"" variable"
42612,3
42613,>>> t.i     # we have overwritten Test.i on t by creating a new attribute t.i
42614,5
42615,">>> Test.i = 6 # to change the ""static"" variable we do it by assigning to the class"
42616,>>> t.i
42617,5
42618,>>> Test.i
42619,6
42620,>>> u = Test()
42621,>>> u.i
42622,6           # changes to t do not affect new instances of Test
42623,
42624,# Namespaces are one honking great idea -- let's do more of those!
42625,>>> Test.__dict__
42626,"{'i': 6, ...}"
42627,>>> t.__dict__
42628,{'i': 5}
42629,>>> u.__dict__
42630,{}
42631,t.i
42632,i
42633,t
42634,i
42635,t
42636,Test
42637,class Test(object):
42638,    @staticmethod
42639,"    def f(arg1, arg2, ...):"
42640,        ...
42641,class Test(object):
42642,    i = 3 # class (or static) variable
42643,    @classmethod
42644,"    def g(cls, arg):"
42645,        # here we can use 'cls' instead of the class name (Test)
42646,        if arg > cls.i:
42647,            cls.i = arg # would be the same as Test.i = arg1
42648,class Test(object):
42649,_i = 3
42650,@property
42651,def i(self)
42652,return type(self)._i
42653,@i.setter
42654,"def i(self,val):"
42655,type(self)._i = val
42656,x = Test()
42657,x.i = 12
42658,assert x.i == Test.i
42659,class Test(object):
42660,
42661,    # regular instance method:
42662,    def my_method(self):
42663,        pass
42664,
42665,    # class method:
42666,    @classmethod
42667,    def my_class_method(cls):
42668,        pass
42669,
42670,    # static method:
42671,    @staticmethod
42672,    def my_static_method():
42673,        pass
42674,my_method()
42675,my_class_method()
42676,Test
42677,my_static_method()
42678,class Test(object):
42679,    i = 3  # This is a class attribute
42680,
42681,x = Test()
42682,x.i = 12   # Attempt to change the value of the class attribute using x instance
42683,assert x.i == Test.i  # ERROR
42684,assert Test.i == 3    # Test.i was not affected
42685,assert x.i == 12      # x.i is a different object than Test.i
42686,x.i = 12
42687,i
42688,x
42689,Test
42690,i
42691,class Test(object):
42692,
42693,    _i = 3
42694,
42695,    @property
42696,    def i(self):
42697,        return type(self)._i
42698,
42699,    @i.setter
42700,"    def i(self,val):"
42701,        type(self)._i = val
42702,
42703,## ALTERNATIVE IMPLEMENTATION - FUNCTIONALLY EQUIVALENT TO ABOVE ##
42704,## (except with separate methods for getting and setting i) ##
42705,
42706,class Test(object):
42707,
42708,    _i = 3
42709,
42710,    def get_i(self):
42711,        return type(self)._i
42712,
42713,"    def set_i(self,val):"
42714,        type(self)._i = val
42715,
42716,"    i = property(get_i, set_i)"
42717,x1 = Test()
42718,x2 = Test()
42719,x1.i = 50
42720,assert x2.i == x1.i  # no error
42721,assert x2.i == 50    # the property is synced
42722,_i
42723,i
42724,property
42725,property
42726,property
42727,class Test(object):
42728,
42729,    _i = 3
42730,
42731,    @property
42732,    def i(self):
42733,        return type(self)._i
42734,
42735,## ALTERNATIVE IMPLEMENTATION - FUNCTIONALLY EQUIVALENT TO ABOVE ##
42736,## (except with separate methods for getting i) ##
42737,
42738,class Test(object):
42739,
42740,    _i = 3
42741,
42742,    def get_i(self):
42743,        return type(self)._i
42744,
42745,    i = property(get_i)
42746,i
42747,AttributeError
42748,x = Test()
42749,assert x.i == 3  # success
42750,x.i = 12         # ERROR
42751,x = Test()
42752,assert x.i == Test.i  # ERROR
42753,
42754,# x.i and Test.i are two different objects:
42755,type(Test.i)  # class 'property'
42756,type(x.i)     # class 'int'
42757,assert Test.i == x.i
42758,i
42759,Test
42760,x
42761,Test
42762,    i = property(get_i) 
42763,i
42764,Test
42765,property
42766,property
42767,property
42768,assert Test.i = x.i
42769,Test.i == x.i
42770,type
42771,type(int)  # class 'type'
42772,type(str)  # class 'type'
42773,class Test(): pass
42774,type(Test) # class 'type'
42775,class MyMeta(type): pass
42776,class MyClass(metaclass = MyMeta):
42777,    pass
42778,
42779,type(MyClass)  # class MyMeta
42780,StaticVarMeta.statics
42781,from functools import wraps
42782,
42783,class StaticVarsMeta(type):
42784,"    '''A metaclass for creating classes that emulate the ""static variable"" behavior"
42785,    of other languages. I do not advise actually using this for anything!!!
42786,    
42787,"    Behavior is intended to be similar to classes that use __slots__. However, ""normal"""
42788,    attributes and __statics___ can coexist (unlike with __slots__). 
42789,    
42790,    Example usage: 
42791,        
42792,        class MyBaseClass(metaclass = StaticVarsMeta):
42793,"            __statics__ = {'a','b','c'}"
42794,            i = 0  # regular attribute
42795,            a = 1  # static var defined (optional)
42796,            
42797,        class MyParentClass(MyBaseClass):
42798,"            __statics__ = {'d','e','f'}"
42799,            j = 2              # regular attribute
42800,"            d, e, f = 3, 4, 5  # Static vars"
42801,"            a, b, c = 6, 7, 8  # Static vars (inherited from MyBaseClass, defined/re-defined here)"
42802,            
42803,        class MyChildClass(MyParentClass):
42804,"            __statics__ = {'a','b','c'}"
42805,            j = 2  # regular attribute (redefines j from MyParentClass)
42806,"            d, e, f = 9, 10, 11   # Static vars (inherited from MyParentClass, redefined here)"
42807,"            a, b, c = 12, 13, 14  # Static vars (overriding previous definition in MyParentClass here)'''"
42808,    statics = {}
42809,"    def __new__(mcls, name, bases, namespace):"
42810,        # Get the class object
42811,"        cls = super().__new__(mcls, name, bases, namespace)"
42812,"        # Establish the ""statics resolution order"""
42813,"        cls.__sro__ = tuple(c for c in cls.__mro__ if isinstance(c,mcls))"
42814,                        
42815,"        # Replace class getter, setter, and deleter for instance attributes"
42816,"        cls.__getattribute__ = StaticVarsMeta.__inst_getattribute__(cls, cls.__getattribute__)"
42817,"        cls.__setattr__ = StaticVarsMeta.__inst_setattr__(cls, cls.__setattr__)"
42818,"        cls.__delattr__ = StaticVarsMeta.__inst_delattr__(cls, cls.__delattr__)"
42819,        # Store the list of static variables for the class object
42820,"        # This list is permanent and cannot be changed, similar to __slots__"
42821,        try:
42822,"            mcls.statics[cls] = getattr(cls,'__statics__')"
42823,        except AttributeError:
42824,            mcls.statics[cls] = namespace['__statics__'] = set() # No static vars provided
42825,        # Check and make sure the statics var names are strings
42826,"        if any(not isinstance(static,str) for static in mcls.statics[cls]):"
42827,"            typ = dict(zip((not isinstance(static,str) for static in mcls.statics[cls]), map(type,mcls.statics[cls])))[True].__name__"
42828,"            raise TypeError('__statics__ items must be strings, not {0}'.format(typ))"
42829,"        # Move any previously existing, not overridden statics to the static var parent class(es)"
42830,        if len(cls.__sro__) > 1:
42831,"            for attr,value in namespace.items():"
42832,                if attr not in StaticVarsMeta.statics[cls] and attr != ['__statics__']:
42833,                    for c in cls.__sro__[1:]:
42834,                        if attr in StaticVarsMeta.statics[c]:
42835,"                            setattr(c,attr,value)"
42836,"                            delattr(cls,attr)"
42837,        return cls
42838,"    def __inst_getattribute__(self, orig_getattribute):"
42839,        '''Replaces the class __getattribute__'''
42840,        @wraps(orig_getattribute)
42841,"        def wrapper(self, attr):"
42842,"            if StaticVarsMeta.is_static(type(self),attr):"
42843,"                return StaticVarsMeta.__getstatic__(type(self),attr)"
42844,            else:
42845,"                return orig_getattribute(self, attr)"
42846,        return wrapper
42847,"    def __inst_setattr__(self, orig_setattribute):"
42848,        '''Replaces the class __setattr__'''
42849,        @wraps(orig_setattribute)
42850,"        def wrapper(self, attr, value):"
42851,"            if StaticVarsMeta.is_static(type(self),attr):"
42852,"                StaticVarsMeta.__setstatic__(type(self),attr, value)"
42853,            else:
42854,"                orig_setattribute(self, attr, value)"
42855,        return wrapper
42856,"    def __inst_delattr__(self, orig_delattribute):"
42857,        '''Replaces the class __delattr__'''
42858,        @wraps(orig_delattribute)
42859,"        def wrapper(self, attr):"
42860,"            if StaticVarsMeta.is_static(type(self),attr):"
42861,"                StaticVarsMeta.__delstatic__(type(self),attr)"
42862,            else:
42863,"                orig_delattribute(self, attr)"
42864,        return wrapper
42865,"    def __getstatic__(cls,attr):"
42866,        '''Static variable getter'''
42867,        for c in cls.__sro__:
42868,            if attr in StaticVarsMeta.statics[c]:
42869,                try:
42870,"                    return getattr(c,attr)"
42871,                except AttributeError:
42872,                    pass
42873,"        raise AttributeError(cls.__name__ + "" object has no attribute '{0}'"".format(attr))"
42874,"    def __setstatic__(cls,attr,value):"
42875,        '''Static variable setter'''
42876,        for c in cls.__sro__:
42877,            if attr in StaticVarsMeta.statics[c]:
42878,"                setattr(c,attr,value)"
42879,                break
42880,"    def __delstatic__(cls,attr):"
42881,        '''Static variable deleter'''
42882,        for c in cls.__sro__:
42883,            if attr in StaticVarsMeta.statics[c]:
42884,                try:
42885,"                    delattr(c,attr)"
42886,                    break
42887,                except AttributeError:
42888,                    pass
42889,"        raise AttributeError(cls.__name__ + "" object has no attribute '{0}'"".format(attr))"
42890,"    def __delattr__(cls,attr):"
42891,        '''Prevent __sro__ attribute from deletion'''
42892,        if attr == '__sro__':
42893,            raise AttributeError('readonly attribute')
42894,        super().__delattr__(attr)
42895,"    def is_static(cls,attr):"
42896,        '''Returns True if an attribute is a static variable of any class in the __sro__'''
42897,        if any(attr in StaticVarsMeta.statics[c] for c in cls.__sro__):
42898,            return True
42899,        return False
42900,Test
42901,Test.i = 0
42902,>>> class X:
42903,...     pass
42904,... 
42905,>>> X.bar = 0
42906,>>> x = X()
42907,>>> x.bar
42908,0
42909,>>> x.foo
42910,Traceback (most recent call last):
42911,"  File ""<interactive input>"", line 1, in <module>"
42912,AttributeError: X instance has no attribute 'foo'
42913,>>> X.foo = 1
42914,>>> x.foo
42915,1
42916,class X:
42917,  l = []
42918,  def __init__(self):
42919,    self.l.append(1)
42920,
42921,print X().l
42922,print X().l
42923,
42924,>python test.py
42925,[1]
42926,"[1, 1]"
42927,class myObj(object):
42928,   def myMethod(cls)
42929,     ...
42930,   myMethod = classmethod(myMethod) 
42931,class myObj(object):
42932,   @classmethod
42933,   def myMethod(cls)
42934,class my_cls:
42935,  my_prop = 0
42936,
42937,#static property
42938,print my_cls.my_prop  #--> 0
42939,
42940,#assign value to static property
42941,my_cls.my_prop = 1 
42942,print my_cls.my_prop  #--> 1
42943,
42944,#access static property thru' instance
42945,my_inst = my_cls()
42946,print my_inst.my_prop #--> 1
42947,
42948,#instance property is different from static property 
42949,#after being assigned a value
42950,my_inst.my_prop = 2
42951,print my_cls.my_prop  #--> 1
42952,print my_inst.my_prop #--> 2
42953,class MyClass:
42954,
42955,    def myInstanceMethod(self):
42956,        print 'output from an instance method'
42957,
42958,    @classmethod
42959,    def myStaticMethod(cls):
42960,        print 'output from a static method'
42961,
42962,>>> MyClass.myInstanceMethod()
42963,Traceback (most recent call last):
42964,"  File ""<stdin>"", line 1, in <module>"
42965,TypeError: unbound method myInstanceMethod() must be called [...]
42966,
42967,>>> MyClass.myStaticMethod()
42968,output from a static method
42969,>>> MyClass.myInstanceMethod(MyClass())
42970,output from an instance method
42971,@staticmethod
42972,@classmethod
42973,static
42974,static variable
42975,class Static:
42976,"    def __init__(self, value, doc=None):"
42977,        self.deleted = False
42978,        self.value = value
42979,        self.__doc__ = doc
42980,"    def __get__(self, inst, cls=None):"
42981,        if self.deleted:
42982,            raise AttributeError('Attribute not set')
42983,        return self.value
42984,"    def __set__(self, inst, value):"
42985,        self.deleted = False
42986,        self.value = value
42987,"    def __delete__(self, inst):"
42988,        self.deleted = True
42989,
42990,class StaticType(type):
42991,"    def __delattr__(cls, name):"
42992,        obj = cls.__dict__.get(name)
42993,"        if isinstance(obj, Static):"
42994,            obj.__delete__(name)
42995,        else:
42996,"            super(StaticType, cls).__delattr__(name)"
42997,"    def __getattribute__(cls, *args):"
42998,"        obj = super(StaticType, cls).__getattribute__(*args)"
42999,"        if isinstance(obj, Static):"
43000,"            obj = obj.__get__(cls, cls.__class__)"
43001,        return obj
43002,"    def __setattr__(cls, name, val):"
43003,        # check if object already exists
43004,        obj = cls.__dict__.get(name)
43005,"        if isinstance(obj, Static):"
43006,"            obj.__set__(name, val)"
43007,        else:
43008,"            super(StaticType, cls).__setattr__(name, val)"
43009,class MyStatic(metaclass=StaticType):
43010,"    """""""
43011,    Testing static vars
43012,"    """""""
43013,    a = Static(9)
43014,    b = Static(12)
43015,    c = 3
43016,
43017,class YourStatic(MyStatic):
43018,    d = Static('woo hoo')
43019,    e = Static('doo wop')
43020,ms1 = MyStatic()
43021,ms2 = MyStatic()
43022,ms3 = MyStatic()
43023,assert ms1.a == ms2.a == ms3.a == MyStatic.a
43024,assert ms1.b == ms2.b == ms3.b == MyStatic.b
43025,assert ms1.c == ms2.c == ms3.c == MyStatic.c
43026,ms1.a = 77
43027,assert ms1.a == ms2.a == ms3.a == MyStatic.a
43028,ms2.b = 99
43029,assert ms1.b == ms2.b == ms3.b == MyStatic.b
43030,MyStatic.a = 101
43031,assert ms1.a == ms2.a == ms3.a == MyStatic.a
43032,MyStatic.b = 139
43033,assert ms1.b == ms2.b == ms3.b == MyStatic.b
43034,del MyStatic.b
43035,"for inst in (ms1, ms2, ms3):"
43036,    try:
43037,"        getattr(inst, 'b')"
43038,    except AttributeError:
43039,        pass
43040,    else:
43041,        print('AttributeError not raised on %r' % attr)
43042,ms1.c = 13
43043,ms2.c = 17
43044,ms3.c = 19
43045,assert ms1.c == 13
43046,assert ms2.c == 17
43047,assert ms3.c == 19
43048,MyStatic.c = 43
43049,assert ms1.c == 13
43050,assert ms2.c == 17
43051,assert ms3.c == 19
43052,
43053,ys1 = YourStatic()
43054,ys2 = YourStatic()
43055,ys3 = YourStatic()
43056,MyStatic.b = 'burgler'
43057,assert ys1.a == ys2.a == ys3.a == YourStatic.a == MyStatic.a
43058,assert ys1.b == ys2.b == ys3.b == YourStatic.b == MyStatic.b
43059,assert ys1.d == ys2.d == ys3.d == YourStatic.d
43060,assert ys1.e == ys2.e == ys3.e == YourStatic.e
43061,ys1.a = 'blah'
43062,assert ys1.a == ys2.a == ys3.a == YourStatic.a == MyStatic.a
43063,ys2.b = 'kelp'
43064,assert ys1.b == ys2.b == ys3.b == YourStatic.b == MyStatic.b
43065,ys1.d = 'fee'
43066,assert ys1.d == ys2.d == ys3.d == YourStatic.d
43067,ys2.e = 'fie'
43068,assert ys1.e == ys2.e == ys3.e == YourStatic.e
43069,MyStatic.a = 'aargh'
43070,assert ys1.a == ys2.a == ys3.a == YourStatic.a == MyStatic.a
43071,#!/usr/bin/python
43072,
43073,class A:
43074,    var=1
43075,
43076,    def printvar(self):
43077,"        print ""self.var is %d"" % self.var"
43078,"        print ""A.var is %d"" % A.var"
43079,
43080,
43081,    a = A()
43082,    a.var = 2
43083,    a.printvar()
43084,
43085,    A.var = 3
43086,    a.printvar()
43087,self.var is 2
43088,A.var is 1
43089,self.var is 2
43090,A.var is 3
43091,__init__()
43092,@dataclass
43093,typing.ClassVar
43094,ClassVar
43095,from typing import ClassVar
43096,from dataclasses import dataclass
43097,
43098,@dataclass
43099,class Test:
43100,    i: ClassVar[int] = 10
43101,    x: int
43102,    y: int
43103,    
43104,    def __repr__(self):
43105,"        return f""Test({self.x=}, {self.y=}, {Test.i=})"""
43106,"> test1 = Test(5, 6)"
43107,"> test2 = Test(10, 11)"
43108,
43109,> test1
43110,"Test(self.x=5, self.y=6, Test.i=10)"
43111,> test2
43112,"Test(self.x=10, self.y=11, Test.i=10)"
43113,class StaticClassError(Exception):
43114,    pass
43115,
43116,
43117,class StaticClass:
43118,    __metaclass__ = abc.ABCMeta
43119,
43120,"    def __new__(cls, *args, **kw):"
43121,"        raise StaticClassError(""%s is a static class and cannot be initiated."""
43122,                                % cls)
43123,
43124,class MyClass(StaticClass):
43125,    a = 1
43126,    b = 3
43127,
43128,    @staticmethod
43129,"    def add(x, y):"
43130,        return x+y
43131,__new__
43132,class A(object):
43133,
43134,"  label=""Amazing"""
43135,
43136,"  def __init__(self,d): "
43137,      self.data=d
43138,
43139,  def say(self): 
43140,"      print(""%s %s!""%(self.label,self.data))"
43141,
43142,class B(A):
43143,"  label=""Bold""  # overrides A.label"
43144,
43145,A(5).say()      # Amazing 5!
43146,B(3).say()      # Bold 3!
43147,self
43148,label
43149,    >>> class A:
43150,"        ...my_var = ""shagun"""
43151,
43152,    >>> print(A.my_var)
43153,        shagun
43154,   >>> a = A()
43155,"   >>> a.my_var = ""pruthi"""
43156,"   >>> print(A.my_var,a.my_var)"
43157,       shagun pruthi
43158,    >>> class A:
43159,   ...     @staticmethod
43160,   ...     def my_static_method():
43161,"   ...             print(""Yippey!!"")"
43162,   ... 
43163,   >>> A.my_static_method()
43164,   Yippey!!
43165,class ConstantAttribute(object):
43166,    '''You can initialize my value but not change it.'''
43167,"    def __init__(self, value):"
43168,        self.value = value
43169,
43170,"    def __get__(self, obj, type=None):"
43171,        return self.value
43172,
43173,"    def __set__(self, obj, val):"
43174,        pass
43175,
43176,
43177,class Demo(object):
43178,    x = ConstantAttribute(10)
43179,
43180,
43181,class SubDemo(Demo):
43182,    x = 10
43183,
43184,
43185,demo = Demo()
43186,subdemo = SubDemo()
43187,# should not change
43188,demo.x = 100
43189,# should change
43190,subdemo.x = 100
43191,"print ""small demo"", demo.x"
43192,"print ""small subdemo"", subdemo.x"
43193,"print ""big demo"", Demo.x"
43194,"print ""big subdemo"", SubDemo.x"
43195,small demo 10
43196,small subdemo 100
43197,big demo 10
43198,big subdemo 10
43199,pass
43200,class StaticAttribute(object):
43201,"    def __init__(self, value):"
43202,        self.value = value
43203,
43204,"    def __get__(self, obj, type=None):"
43205,        return self.value
43206,
43207,"    def __set__(self, obj, val):"
43208,        self.value = val
43209,@property
43210,bool
43211,int
43212,float
43213,str
43214,class A:
43215,    static = 1
43216,
43217,
43218,class B(A):
43219,    pass
43220,
43221,
43222,"print(f""int {A.static}"")  # get 1 correctly"
43223,"print(f""int {B.static}"")  # get 1 correctly"
43224,
43225,A.static = 5
43226,"print(f""int {A.static}"")  # get 5 correctly"
43227,"print(f""int {B.static}"")  # get 5 correctly"
43228,
43229,B.static = 6
43230,"print(f""int {A.static}"")  # expected 6, but get 5 incorrectly"
43231,"print(f""int {B.static}"")  # get 6 correctly"
43232,
43233,A.static = 7
43234,"print(f""int {A.static}"")  # get 7 correctly"
43235,"print(f""int {B.static}"")  # get unchanged 6"
43236,from refdatatypes.refint import RefInt
43237,
43238,
43239,class AAA:
43240,    static = RefInt(1)
43241,
43242,
43243,class BBB(AAA):
43244,    pass
43245,
43246,
43247,"print(f""refint {AAA.static.value}"")  # get 1 correctly"
43248,"print(f""refint {BBB.static.value}"")  # get 1 correctly"
43249,
43250,AAA.static.value = 5
43251,"print(f""refint {AAA.static.value}"")  # get 5 correctly"
43252,"print(f""refint {BBB.static.value}"")  # get 5 correctly"
43253,
43254,BBB.static.value = 6
43255,"print(f""refint {AAA.static.value}"")  # get 6 correctly"
43256,"print(f""refint {BBB.static.value}"")  # get 6 correctly"
43257,
43258,AAA.static.value = 7
43259,"print(f""refint {AAA.static.value}"")  # get 7 correctly"
43260,"print(f""refint {BBB.static.value}"")  # get 7 correctly"
43261,class A:
43262,    counter =0
43263,    def callme (self):
43264,        A.counter +=1
43265,    def getcount (self):
43266,        return self.counter  
43267,>>> x=A()
43268,>>> y=A()
43269,>>> print(x.getcount())
43270,>>> print(y.getcount())
43271,>>> x.callme() 
43272,>>> print(x.getcount())
43273,>>> print(y.getcount())
43274,0
43275,0
43276,1
43277,1
43278,here object (x) alone increment the counter variable
43279,"from 0 to 1 by not object y. But result it as ""static counter"""
43280,class staticFlag:
43281,    def __init__(self):
43282,        self.__success = False
43283,    def isSuccess(self):
43284,        return self.__success
43285,    def succeed(self):
43286,        self.__success = True
43287,
43288,class tryIt:
43289,"    def __init__(self, staticFlag):"
43290,        self.isSuccess = staticFlag.isSuccess
43291,        self.succeed = staticFlag.succeed
43292,
43293,tryArr = []
43294,flag = staticFlag()
43295,for i in range(10):
43296,    tryArr.append(tryIt(flag))
43297,    if i == 5:
43298,        tryArr[i].succeed()
43299,    print tryArr[i].isSuccess()
43300,staticFlag
43301,__success
43302,tryIt
43303,staticFlag
43304,tryArr
43305,False
43306,False
43307,False
43308,False
43309,False
43310,True
43311,True
43312,True
43313,True
43314,True
43315,class Calculator:
43316,    @staticmethod
43317,"    def multiply(n1, n2, *args):"
43318,        Res = 1
43319,        for num in args: Res *= num
43320,        return n1 * n2 * Res
43321,
43322,"print(Calculator.multiply(1, 2, 3, 4))              # 24"
43323,class Calculator:
43324,"    def add(n1, n2, *args):"
43325,        return n1 + n2 + sum(args)
43326,
43327,Calculator.add = staticmethod(Calculator.add)
43328,"print(Calculator.add(1, 2, 3, 4))                   # 10"
43329,class Calculator:
43330,    num = 0
43331,"    def __init__(self, digits) -> None:"
43332,        Calculator.num = int(''.join(digits))
43333,
43334,    @classmethod
43335,"    def get_digits(cls, num):"
43336,        digits = list(str(num))
43337,        calc = cls(digits)
43338,        return calc.num
43339,
43340,print(Calculator.get_digits(314159))                # 314159
43341,class Calculator:
43342,"    def divide(cls, n1, n2, *args):"
43343,        Res = 1
43344,        for num in args: Res *= num
43345,        return n1 / n2 / Res
43346,
43347,Calculator.divide = classmethod(Calculator.divide)
43348,
43349,"print(Calculator.divide(15, 3, 5))                  # 1.0"
43350,class Calculator:   
43351,"    def subtract(n1, n2, *args):"
43352,        return n1 - n2 - sum(args)
43353,
43354,"print(Calculator.subtract(10, 2, 3, 4))             # 1"
43355,class Calculator:
43356,    num = 0
43357,"    def __init__(self, digits) -> None:"
43358,        Calculator.num = int(''.join(digits))
43359,    
43360,    
43361,    @staticmethod
43362,"    def multiply(n1, n2, *args):"
43363,        Res = 1
43364,        for num in args: Res *= num
43365,        return n1 * n2 * Res
43366,
43367,
43368,"    def add(n1, n2, *args):"
43369,        return n1 + n2 + sum(args)
43370,    
43371,
43372,    @classmethod
43373,"    def get_digits(cls, num):"
43374,        digits = list(str(num))
43375,        calc = cls(digits)
43376,        return calc.num
43377,
43378,
43379,"    def divide(cls, n1, n2, *args):"
43380,        Res = 1
43381,        for num in args: Res *= num
43382,        return n1 / n2 / Res
43383,
43384,
43385,"    def subtract(n1, n2, *args):"
43386,        return n1 - n2 - sum(args)
43387,    
43388,
43389,
43390,
43391,Calculator.add = staticmethod(Calculator.add)
43392,Calculator.divide = classmethod(Calculator.divide)
43393,
43394,"print(Calculator.multiply(1, 2, 3, 4))              # 24"
43395,"print(Calculator.add(1, 2, 3, 4))                   # 10"
43396,print(Calculator.get_digits(314159))                # 314159
43397,"print(Calculator.divide(15, 3, 5))                  # 1.0"
43398,"print(Calculator.subtract(10, 2, 3, 4))             # 1"
43399,int(''.join(digits))
43400,nonlocal
43401,>>> def SomeFactory(some_var=None):
43402,...     class SomeClass(object):
43403,...         nonlocal some_var
43404,...         def print():
43405,...             print(some_var)
43406,...     return SomeClass
43407,... 
43408,">>> SomeFactory(some_var=""hello world"").print()"
43409,hello world
43410,"hasattr(SomeClass, 'x')"
43411,False
43412,some_var
43413,some_var
43414,nonlocal
43415,nonlocal some_var
43416,eval(str)
43417,class
43418,import Records
43419,object_name = 'RecordOne'
43420,cur_type = eval(object_name)
43421,cur_inst = cur_type(args)
43422,cur_type.getName()
43423,class Fud:
43424,
43425,     class_vars = {'origin_open':False}
43426,
43427,"     def __init__(self, origin = True):"
43428,         self.origin = origin
43429,         self.opened = True
43430,         if origin:
43431,             self.class_vars['origin_open'] = True
43432,
43433,
43434,     def make_another_fud(self):
43435,         ''' Generating another Fud() from the origin instance '''
43436,
43437,         return Fud(False)
43438,
43439,
43440,     def close(self):
43441,         self.opened = False
43442,         if self.origin:
43443,             self.class_vars['origin_open'] = False
43444,
43445,
43446,fud1 = Fud()
43447,fud2 = fud1.make_another_fud()
43448,
43449,"print (f""is this the original fud: {fud2.origin}"")"
43450,"print (f""is the original fud open: {fud2.class_vars['origin_open']}"")"
43451,# is this the original fud: False
43452,# is the original fud open: True
43453,
43454,fud1.close()
43455,
43456,"print (f""is the original fud open: {fud2.class_vars['origin_open']}"")"
43457,# is the original fud open: False
43458,# -*- coding: utf-8 -*-
43459,class Worker:
43460,    id = 1
43461,
43462,    def __init__(self):
43463,        self.name = ''
43464,        self.document = ''
43465,        self.id = Worker.id
43466,        Worker.id += 1
43467,
43468,    def __str__(self):
43469,"        return u""{}.- {} {}"".format(self.id, self.name, self.document).encode('utf8')"
43470,
43471,
43472,class Workers:
43473,    def __init__(self):
43474,        self.list = []
43475,
43476,"    def add(self, name, doc):"
43477,        worker = Worker()
43478,        worker.name = name
43479,        worker.document = doc
43480,        self.list.append(worker)
43481,
43482,
43483,"if __name__ == ""__main__"":"
43484,    workers = Workers()
43485,"    for item in (('Fiona', '0009898'), ('Maria', '66328191'), (""Sandra"", '2342184'), ('Elvira', '425872')):"
43486,"        workers.add(item[0], item[1])"
43487,    for worker in workers.list:
43488,        print(worker)
43489,"    print(""next id: %i"" % Worker.id)"
43490,class Student:
43491,
43492,    the correct way of static declaration
43493,    i = 10
43494,
43495,    incorrect
43496,    self.i = 10
43497,@staticmethod
43498,instance = MyClass()
43499,print(instance.i)
43500,print(MyClass.i)
43501,class MyClass:
43502,  i: str
43503,i is not attribute of MyClass
43504,from contextlib import contextmanager
43505,
43506,class Sheldon(object):
43507,    foo = 73
43508,
43509,"    def __init__(self, n):"
43510,        self.n = n
43511,
43512,    def times(self):
43513,        cls = self.__class__
43514,        return cls.foo * self.n
43515,        #self.foo * self.n would give the same result here but is less readable
43516,        # it will also create a local variable which will make it easier to break your code
43517,    
43518,    def updatefoo(self):
43519,        cls = self.__class__
43520,        cls.foo *= self.n
43521,        #self.foo *= self.n will not work here
43522,        # assignment will try to create a instance variable foo
43523,
43524,    @classmethod
43525,    @contextmanager
43526,    def reset_after_test(cls):
43527,        originalfoo = cls.foo
43528,        yield
43529,        cls.foo = originalfoo
43530,        #if you don't do this then running a full test suite will fail
43531,        #updates to foo in one test will be kept for later tests
43532,Sheldon.foo
43533,def test_times():
43534,    with Sheldon.reset_after_test():
43535,        s = Sheldon(2)
43536,        assert s.times() == 146
43537,
43538,def test_update():
43539,    with Sheldon.reset_after_test():
43540,        s = Sheldon(2)
43541,        s.updatefoo()
43542,        assert Sheldon.foo == 146
43543,
43544,def test_two_instances():
43545,    with Sheldon.reset_after_test():
43546,        s = Sheldon(2)
43547,        s3 = Sheldon(3)
43548,        assert s.times() == 146
43549,        assert s3.times() == 219
43550,        s3.updatefoo()
43551,        assert s.times() == 438
43552,class Douglas(Sheldon):
43553,    foo = 42
43554,def test_subclassing():
43555,"    with Sheldon.reset_after_test(), Douglas.reset_after_test():"
43556,        s = Sheldon(2)
43557,        d = Douglas(2)
43558,        assert d.times() == 84
43559,        assert s.times() == 146
43560,        d.updatefoo()
43561,        assert d.times() == 168 #Douglas.Foo was updated
43562,        assert s.times() == 146 #Seldon.Foo is still 73
43563,
43564,def test_subclassing_reset():
43565,"    with Sheldon.reset_after_test(), Douglas.reset_after_test():"
43566,        s = Sheldon(2)
43567,        d = Douglas(2)
43568,        assert d.times() == 84 #Douglas.foo was reset after the last test
43569,        assert s.times() == 146 #and so was Sheldon.foo
43570,"d = {'ac': 33, 'gw': 20, 'ap': 102, 'za': 321, 'bs': 10}"
43571,dict
43572,"d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}"
43573,dict
43574,collections.OrderedDict()
43575,dict
43576,move_to_end()
43577,iter(dictview)
43578,from collections import OrderedDict
43579,"OrderedDict((word, True) for word in words)"
43580,"OrderedDict([('He', True), ('will', True), ('be', True), ('the', True), ('winner', True)])"
43581,True
43582,"OrderedDict.fromkeys(words, True)"
43583,"OrderedDict(FUTURE=[], TODAY=[], PAST=[])"
43584,"OrderedDict([('FUTURE', []), ('TODAY', []), ('PAST', [])])"
43585,>>> from collections import OrderedDict
43586,>>> my_dictionary=OrderedDict()
43587,>>> my_dictionary['foo']=3
43588,>>> my_dictionary['aol']=1
43589,>>> my_dictionary
43590,"OrderedDict([('foo', 3), ('aol', 1)])"
43591,>>> dict(my_dictionary)
43592,"{'foo': 3, 'aol': 1}"
43593,OrderedDict
43594,"{'aol': 1, 'foo': 3}"
43595,OrderedDict.update()
43596,"d1.upate([(key1, val1), (key2, val2)])"
43597,"test_dict = dict( val1 = ""hi"", val2 = ""bye"", val3 = ""huh?"", val4 = ""what...."")"
43598,"test_tuple = ( 'val1', 'val2', 'val3', 'val4')"
43599,for key in test_tuple: print(test_dict[key])
43600,"d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}"
43601,"{""ac"":33,""gw"":20,""ap"":102,""za"":321,""bs"":10}"
43602,"r = json.load(open('file.json'), object_pairs_hook=OrderedDict)"
43603,print json.dumps(r)
43604,from collections import OrderedDict
43605,"list1 = ['k1', 'k2']"
43606,"list2 = ['v1', 'v2']"
43607,"new_ordered_dict = OrderedDict(zip(list1, list2))"
43608,print new_ordered_dict
43609,"# OrderedDict([('k1', 'v1'), ('k2', 'v2')])"
43610,dataframe
43611,from django.utils.datastructures import SortedDict
43612,d2 = SortedDict()
43613,d2['b'] = 1
43614,d2['a'] = 2
43615,d2['c'] = 3
43616,collections.OrderedDict
43617,__contains__
43618,__getitem__
43619,__delitem__
43620,__setitem__
43621,">>> list =[[1,2],[2,3]]"
43622,>>> for i in list:
43623,...     print i[0]
43624,...     print i[1]
43625,
43626,1
43627,2
43628,2
43629,3
43630,dictionary_items = {}
43631,"fields = [['Name', 'Himanshu Kanojiya'], ['email id', 'hima@gmail.com']]"
43632,l = fields[0][0]
43633,m = fields[0][1]
43634,n = fields[1][0]
43635,q = fields[1][1]
43636,dictionary_items[l] = m
43637,dictionary_items[n] = q
43638,print dictionary_items
43639,█
43640,http://stackoverflow.com/questions/8465226/using-extended-ascii-codes-with-python
43641,class bcolors:
43642,    HEADER = '\033[95m'
43643,    OKBLUE = '\033[94m'
43644,    OKCYAN = '\033[96m'
43645,    OKGREEN = '\033[92m'
43646,    WARNING = '\033[93m'
43647,    FAIL = '\033[91m'
43648,    ENDC = '\033[0m'
43649,    BOLD = '\033[1m'
43650,    UNDERLINE = '\033[4m'
43651,"print(bcolors.WARNING + ""Warning: No active frommets remain. Continue?"" + bcolors.ENDC)"
43652,"print(f""{bcolors.WARNING}Warning: No active frommets remain. Continue?{bcolors.ENDC}"")"
43653,tput
43654,disable
43655,cat
43656,import ctypes;
43657,kernel32 = ctypes.WinDLL('kernel32');
43658,hStdOut = kernel32.GetStdHandle(-11);
43659,mode = ctypes.c_ulong();
43660,"kernel32.GetConsoleMode(hStdOut, ctypes.byref(mode));"
43661,mode.value |= 4;
43662,"kernel32.SetConsoleMode(hStdOut, mode)"
43663,print('\033[94mfoo')
43664,from termcolor import colored
43665,
43666,"print colored('hello', 'red'), colored('world', 'green')"
43667,"print(colored('hello', 'red'), colored('world', 'green'))"
43668,os.system('color')
43669,termcolor.COLORS
43670,os.system('color')
43671,from colorama import Fore
43672,from colorama import Style
43673,
43674,"print(f""This is {Fore.GREEN}color{Style.RESET_ALL}!"")"
43675,<b>bold</b>
43676,'\x1b[0m'
43677,print('\x1b[6;30;42m' + 'Success!' + '\x1b[0m')
43678,def print_format_table():
43679,"    """""""
43680,    prints table of formatted text format options
43681,"    """""""
43682,    for style in range(8):
43683,"        for fg in range(30,38):"
43684,            s1 = ''
43685,"            for bg in range(40,48):"
43686,"                format = ';'.join([str(style), str(fg), str(bg)])"
43687,"                s1 += '\x1b[%sm %s \x1b[0m' % (format, format)"
43688,            print(s1)
43689,        print('\n')
43690,
43691,print_format_table()
43692,CRED = '\033[91m'
43693,CEND = '\033[0m'
43694,"print(CRED + ""Error, does not compute!"" + CEND)"
43695,urxvt
43696,\33[5m
43697,\33[6m
43698,CEND      = '\33[0m'
43699,CBOLD     = '\33[1m'
43700,CITALIC   = '\33[3m'
43701,CURL      = '\33[4m'
43702,CBLINK    = '\33[5m'
43703,CBLINK2   = '\33[6m'
43704,CSELECTED = '\33[7m'
43705,
43706,CBLACK  = '\33[30m'
43707,CRED    = '\33[31m'
43708,CGREEN  = '\33[32m'
43709,CYELLOW = '\33[33m'
43710,CBLUE   = '\33[34m'
43711,CVIOLET = '\33[35m'
43712,CBEIGE  = '\33[36m'
43713,CWHITE  = '\33[37m'
43714,
43715,CBLACKBG  = '\33[40m'
43716,CREDBG    = '\33[41m'
43717,CGREENBG  = '\33[42m'
43718,CYELLOWBG = '\33[43m'
43719,CBLUEBG   = '\33[44m'
43720,CVIOLETBG = '\33[45m'
43721,CBEIGEBG  = '\33[46m'
43722,CWHITEBG  = '\33[47m'
43723,
43724,CGREY    = '\33[90m'
43725,CRED2    = '\33[91m'
43726,CGREEN2  = '\33[92m'
43727,CYELLOW2 = '\33[93m'
43728,CBLUE2   = '\33[94m'
43729,CVIOLET2 = '\33[95m'
43730,CBEIGE2  = '\33[96m'
43731,CWHITE2  = '\33[97m'
43732,
43733,CGREYBG    = '\33[100m'
43734,CREDBG2    = '\33[101m'
43735,CGREENBG2  = '\33[102m'
43736,CYELLOWBG2 = '\33[103m'
43737,CBLUEBG2   = '\33[104m'
43738,CVIOLETBG2 = '\33[105m'
43739,CBEIGEBG2  = '\33[106m'
43740,CWHITEBG2  = '\33[107m'
43741,x = 0
43742,for i in range(24):
43743,"  colors = """""
43744,  for j in range(5):
43745,    code = str(x+j)
43746,"    colors = colors + ""\33["" + code + ""m\\33["" + code + ""m\033[0m """
43747,  print(colors)
43748,  x = x + 5
43749,\33[25m
43750,"os.system("""")"
43751,import os
43752,
43753,# System call
43754,"os.system("""")"
43755,
43756,# Class of different styles
43757,class style():
43758,    BLACK = '\033[30m'
43759,    RED = '\033[31m'
43760,    GREEN = '\033[32m'
43761,    YELLOW = '\033[33m'
43762,    BLUE = '\033[34m'
43763,    MAGENTA = '\033[35m'
43764,    CYAN = '\033[36m'
43765,    WHITE = '\033[37m'
43766,    UNDERLINE = '\033[4m'
43767,    RESET = '\033[0m'
43768,
43769,"print(style.YELLOW + ""Hello, World!"")"
43770,"os.system("""")"
43771,"if sys.platform.lower() == ""win32"": os.system('color')"
43772,os.system('')
43773,color
43774,dir
43775,cd
43776,abcdef
43777,color
43778,os.system(command)
43779,"os.system("""")"
43780,"printf(fmt, ...);"
43781,"system("""");"
43782,include <stdlib.h>
43783,"CSI = ""\x1B["""
43784,"print(CSI+""31;40m"" + ""Colored Text"" + CSI + ""0m"")"
43785,"print(u""\u2588"")"
43786,"print(CSI+""31;40m"" + u""\u2588"" + CSI + ""0m"")"
43787,"def d(*v): return '\x1B['+';'.join(map(str, v))+'m'"
43788,"print ' '.join([d(k,i)+str(i%10)+d(0) for i in range(30,38)+range(40,48) for k in range(2)])"
43789,"""31;40m"" "
43790,"""0m"""
43791,0m
43792,sys.stdout
43793,"from sty import fg, bg, ef, rs"
43794,
43795,foo = fg.red + 'This is red text!' + fg.rs
43796,bar = bg.blue + 'This has a blue background!' + bg.rs
43797,baz = ef.italic + 'This is italic text' + rs.italic
43798,qux = fg(201) + 'This is pink text using 8bit colors' + fg.rs
43799,"qui = fg(255, 10, 10) + 'This is red text using 24bit colors.' + fg.rs"
43800,
43801,# Add custom colors:
43802,
43803,"from sty import Style, RgbFg"
43804,
43805,"fg.orange = Style(RgbFg(255, 150, 50))"
43806,
43807,"buf = fg.orange + 'Yay, Im orange.' + fg.rs"
43808,
43809,"print(foo, bar, baz, qux, qui, buf, sep='\n')"
43810,fg.rs
43811,bg.rs
43812,from rich import print
43813,"print(""[red]Color[/] in the [bold magenta]Terminal[/]!"")"
43814,from blessings import Terminal
43815,
43816,t = Terminal()
43817,print t.red('This is red.')
43818,print t.bold_bright_red_on_black('Bright red on black')
43819,print t.on_green(' ')
43820,"with t.location(0, 5):"
43821,    print t.on_yellow(' ')
43822,print '{t.clear_eol}You just cleared a {t.bold}whole{t.normal} line!'.format(t=t)
43823,getattr
43824,can just pass
43825,for
43826,class colors:
43827,    '''Colors class:
43828,    Reset all colors with colors.reset
43829,    Two subclasses fg for foreground and bg for background.
43830,    Use as colors.subclass.colorname.
43831,    i.e. colors.fg.red or colors.bg.green
43832,"    Also, the generic bold, disable, underline, reverse, strikethrough,"
43833,    and invisible work with the main class
43834,    i.e. colors.bold
43835,    '''
43836,    reset='\033[0m'
43837,    bold='\033[01m'
43838,    disable='\033[02m'
43839,    underline='\033[04m'
43840,    reverse='\033[07m'
43841,    strikethrough='\033[09m'
43842,    invisible='\033[08m'
43843,    class fg:
43844,        black='\033[30m'
43845,        red='\033[31m'
43846,        green='\033[32m'
43847,        orange='\033[33m'
43848,        blue='\033[34m'
43849,        purple='\033[35m'
43850,        cyan='\033[36m'
43851,        lightgrey='\033[37m'
43852,        darkgrey='\033[90m'
43853,        lightred='\033[91m'
43854,        lightgreen='\033[92m'
43855,        yellow='\033[93m'
43856,        lightblue='\033[94m'
43857,        pink='\033[95m'
43858,        lightcyan='\033[96m'
43859,    class bg:
43860,        black='\033[40m'
43861,        red='\033[41m'
43862,        green='\033[42m'
43863,        orange='\033[43m'
43864,        blue='\033[44m'
43865,        purple='\033[45m'
43866,        cyan='\033[46m'
43867,        lightgrey='\033[47m'
43868,"def colored(r, g, b, text):"
43869,"    return f""\033[38;2;{r};{g};{b}m{text}\033[0m"""
43870,"text = 'Hello, World!'"
43871,"colored_text = colored(255, 0, 0, text)"
43872,print(colored_text)
43873,
43874,#or
43875,
43876,"print(colored(255, 0, 0, 'Hello, World!'))"
43877,"text = colored(255, 0, 0, 'Hello, ') + colored(0, 255, 0, 'World')"
43878,print(text)
43879,def prRed(prt):
43880,"    print(f""\033[91m{prt}\033[00m"")"
43881,
43882,def prGreen(prt):
43883,"    print(f""\033[92m{prt}\033[00m"")"
43884,
43885,def prYellow(prt):
43886,"    print(f""\033[93m{prt}\033[00m"")"
43887,
43888,def prLightPurple(prt):
43889,"    print(f""\033[94m{prt}\033[00m"")"
43890,
43891,def prPurple(prt):
43892,"    print(f""\033[95m{prt}\033[00m"")"
43893,
43894,def prCyan(prt):
43895,"    print(f""\033[96m{prt}\033[00m"")"
43896,
43897,def prLightGray(prt):
43898,"    print(f""\033[97m{prt}\033[00m"")"
43899,
43900,def prBlack(prt):
43901,"    print(f""\033[98m{prt}\033[00m"")"
43902,
43903,def prReset(prt):
43904,"    print(f""\033[0m{prt}\033[00m"")"
43905,
43906,"prGreen(""Hello, Green World!"")"
43907,"prBlack(""Hello, Black World!"")"
43908,"prCyan(""Hello, Cyan World!"")"
43909,"prGreen(""Hello, Green World!"")"
43910,"prLightGray(""Hello, Light Grey World!"")"
43911,"prLightPurple(""Hello, Light Purple World!"")"
43912,"prPurple(""Hello, Purple World!"")"
43913,"prRed(""Hello, Red World!"")"
43914,"prYellow(""Hello, Yellow World!"")"
43915,"prReset(""Hello, Reset World!"")"
43916,# python2
43917,"    def prRed(prt): print(""\033[91m {}\033[00m"" .format(prt))"
43918,"    def prGreen(prt): print(""\033[92m {}\033[00m"" .format(prt))"
43919,"    def prYellow(prt): print(""\033[93m {}\033[00m"" .format(prt))"
43920,"    def prLightPurple(prt): print(""\033[94m {}\033[00m"" .format(prt))"
43921,"    def prPurple(prt): print(""\033[95m {}\033[00m"" .format(prt))"
43922,"    def prCyan(prt): print(""\033[96m {}\033[00m"" .format(prt))"
43923,"    def prLightGray(prt): print(""\033[97m {}\033[00m"" .format(prt))"
43924,"    def prBlack(prt): print(""\033[98m {}\033[00m"" .format(prt))"
43925,
43926,"    prGreen(""Hello, World!"")"
43927,"def prGreen: return '""\033[91m {}\033[00m"" .format(prt)"
43928,"print(f'This will turn {prGreen(""Hello world"")} and change back')"
43929,from colorit import *
43930,
43931,# Use this to ensure that ColorIt will be usable by certain command line interfaces
43932,# Note: This clears the terminal
43933,init_colorit()
43934,
43935,# Foreground
43936,"print(color(""This text is red"", Colors.red))"
43937,"print(color(""This text is orange"", Colors.orange))"
43938,"print(color(""This text is yellow"", Colors.yellow))"
43939,"print(color(""This text is green"", Colors.green))"
43940,"print(color(""This text is blue"", Colors.blue))"
43941,"print(color(""This text is purple"", Colors.purple))"
43942,"print(color(""This text is white"", Colors.white))"
43943,
43944,# Background
43945,"print(background(""This text has a background that is red"", Colors.red))"
43946,"print(background(""This text has a background that is orange"", Colors.orange))"
43947,"print(background(""This text has a background that is yellow"", Colors.yellow))"
43948,"print(background(""This text has a background that is green"", Colors.green))"
43949,"print(background(""This text has a background that is blue"", Colors.blue))"
43950,"print(background(""This text has a background that is purple"", Colors.purple))"
43951,"print(background(""This text has a background that is white"", Colors.white))"
43952,
43953,# Custom
43954,"print(color(""This color has a custom grey text color"", (150, 150, 150)))"
43955,"print(background(""This color has a custom grey background"", (150, 150, 150)))"
43956,
43957,# Combination
43958,print(
43959,    background(
43960,"        color(""This text is blue with a white background"", Colors.blue), Colors.white"
43961,    )
43962,)
43963,
43964,"# If you are using Windows Command Line, this is so that it doesn't close immediately"
43965,input()
43966,colorit
43967,pip install color-it
43968,pip3 install color-it
43969,pip3
43970,pip
43971,pip3 install color-it
43972,pip install color-it
43973,import colorit
43974,init_colorit()
43975,"# Pure Python 3.x demo, 256 colors"
43976,# Works with bash under Linux and MacOS
43977,
43978,"fg = lambda text, color: ""\33[38;5;"" + str(color) + ""m"" + text + ""\33[0m"""
43979,"bg = lambda text, color: ""\33[48;5;"" + str(color) + ""m"" + text + ""\33[0m"""
43980,
43981,"def print_six(row, format, end=""\n""):"
43982,    for col in range(6):
43983,        color = row*6 + col - 2
43984,        if color>=0:
43985,"            text = ""{:3d}"".format(color)"
43986,"            print (format(text,color), end="" "")"
43987,        else:
43988,"            print(end=""    "")   # four spaces"
43989,    print(end=end)
43990,
43991,"for row in range(0, 43):"
43992,"    print_six(row, fg, "" "")"
43993,"    print_six(row, bg)"
43994,
43995,"# Simple usage: print(fg(""text"", 160))"
43996,"""\33[38;5;"" "
43997,'\33'
43998,import ctypes
43999,
44000,# Constants from the Windows API
44001,STD_OUTPUT_HANDLE = -11
44002,FOREGROUND_RED    = 0x0004 # text color contains red.
44003,
44004,def get_csbi_attributes(handle):
44005,"    # Based on IPython's winconsole.py, written by Alexander Belchenko"
44006,    import struct
44007,    csbi = ctypes.create_string_buffer(22)
44008,"    res = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(handle, csbi)"
44009,    assert res
44010,
44011,"    (bufx, bufy, curx, cury, wattr,"
44012,"    left, top, right, bottom, maxx, maxy) = struct.unpack(""hhhhHhhhhhh"", csbi.raw)"
44013,    return wattr
44014,
44015,
44016,handle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)
44017,reset = get_csbi_attributes(handle)
44018,
44019,"ctypes.windll.kernel32.SetConsoleTextAttribute(handle, FOREGROUND_RED)"
44020,"print ""Cherry on top"""
44021,"ctypes.windll.kernel32.SetConsoleTextAttribute(handle, reset)"
44022,def enable():
44023,    HEADER = '\033[95m'
44024,    OKBLUE = '\033[94m'
44025,    OKGREEN = '\033[92m'
44026,    WARNING = '\033[93m'
44027,    FAIL = '\033[91m'
44028,    ENDC = '\033[0m'
44029,"    BOLD = ""\033[1m"""
44030,
44031,def disable():
44032,    HEADER = ''
44033,    OKBLUE = ''
44034,    OKGREEN = ''
44035,    WARNING = ''
44036,    FAIL = ''
44037,    ENDC = ''
44038,
44039,def infog(msg):
44040,    print(OKGREEN + msg + ENDC)
44041,
44042,def info(msg):
44043,    print(OKBLUE + msg + ENDC)
44044,
44045,def warn(msg):
44046,    print(WARNING + msg + ENDC)
44047,
44048,def err(msg):
44049,    print(FAIL + msg + ENDC)
44050,
44051,enable()
44052,import log
44053,"log.info(""Hello, World!"")"
44054,"log.err(""System Error"")"
44055,def black(text):
44056,"    print('\033[30m', text, '\033[0m', sep='')"
44057,
44058,def red(text):
44059,"    print('\033[31m', text, '\033[0m', sep='')"
44060,
44061,def green(text):
44062,"    print('\033[32m', text, '\033[0m', sep='')"
44063,
44064,def yellow(text):
44065,"    print('\033[33m', text, '\033[0m', sep='')"
44066,
44067,def blue(text):
44068,"    print('\033[34m', text, '\033[0m', sep='')"
44069,
44070,def magenta(text):
44071,"    print('\033[35m', text, '\033[0m', sep='')"
44072,
44073,def cyan(text):
44074,"    print('\033[36m', text, '\033[0m', sep='')"
44075,
44076,def gray(text):
44077,"    print('\033[90m', text, '\033[0m', sep='')"
44078,
44079,
44080,"black(""BLACK"")"
44081,"red(""RED"")"
44082,"green(""GREEN"")"
44083,"yellow(""YELLOW"")"
44084,"blue(""BLACK"")"
44085,"magenta(""MAGENTA"")"
44086,"cyan(""CYAN"")"
44087,"gray(""GRAY"")"
44088,#
44089,os.system('')
44090,formatters = {
44091,"    'RED': '\033[91m',"
44092,"    'GREEN': '\033[92m',"
44093,"    'END': '\033[0m',"
44094,}
44095,
44096,print 'Master is currently {RED}red{END}!'.format(**formatters)
44097,print 'Help make master {GREEN}green{END} again!'.format(**formatters)
44098,class PrintInColor:
44099,    RED = '\033[91m'
44100,    GREEN = '\033[92m'
44101,    YELLOW = '\033[93m'
44102,    LIGHT_PURPLE = '\033[94m'
44103,    PURPLE = '\033[95m'
44104,    END = '\033[0m'
44105,
44106,    @classmethod
44107,"    def red(cls, s, **kwargs):"
44108,"        print(cls.RED + s + cls.END, **kwargs)"
44109,
44110,    @classmethod
44111,"    def green(cls, s, **kwargs):"
44112,"        print(cls.GREEN + s + cls.END, **kwargs)"
44113,
44114,    @classmethod
44115,"    def yellow(cls, s, **kwargs):"
44116,"        print(cls.YELLOW + s + cls.END, **kwargs)"
44117,
44118,    @classmethod
44119,"    def lightPurple(cls, s, **kwargs):"
44120,"        print(cls.LIGHT_PURPLE + s + cls.END, **kwargs)"
44121,
44122,    @classmethod
44123,"    def purple(cls, s, **kwargs):"
44124,"        print(cls.PURPLE + s + cls.END, **kwargs)"
44125,"PrintInColor.red('hello', end=' ')"
44126,PrintInColor.green('world')
44127,print
44128,print
44129,"def purple(cls, *args, **kwargs):     print(cls.PURPLE, *args, cls.END, **kwargs)"
44130,pip install -U lazyme
44131,from lazyme.string import color_print
44132,>>> color_print('abc')
44133,abc
44134,">>> color_print('abc', color='pink')"
44135,abc
44136,">>> color_print('abc', color='red')"
44137,abc
44138,">>> color_print('abc', color='yellow')"
44139,abc
44140,">>> color_print('abc', color='green')"
44141,abc
44142,">>> color_print('abc', color='blue', underline=True)"
44143,abc
44144,">>> color_print('abc', color='blue', underline=True, bold=True)"
44145,abc
44146,">>> color_print('abc', color='pink', underline=True, bold=True)"
44147,abc
44148,color_print
44149,">>> from lazyme.string import palette, highlighter, formatter"
44150,>>> from lazyme.string import color_print
44151,>>> palette.keys() # Available colors.
44152,"['pink', 'yellow', 'cyan', 'magenta', 'blue', 'gray', 'default', 'black', 'green', 'white', 'red']"
44153,>>> highlighter.keys() # Available highlights.
44154,"['blue', 'pink', 'gray', 'black', 'yellow', 'cyan', 'green', 'magenta', 'white', 'red']"
44155,">>> formatter.keys() # Available formatter,"
44156,"['hide', 'bold', 'italic', 'default', 'fast_blinking', 'faint', 'strikethrough', 'underline', 'blinking', 'reverse']"
44157,italic
44158,fast blinking
44159,strikethrough
44160,">>> color_print('foo bar', color='pink', highlight='white')"
44161,foo bar
44162,">>> color_print('foo bar', color='pink', highlight='white', reverse=True)"
44163,foo bar
44164,">>> color_print('foo bar', color='pink', highlight='white', bold=True)"
44165,foo bar
44166,">>> color_print('foo bar', color='pink', highlight='white', faint=True)"
44167,foo bar
44168,">>> color_print('foo bar', color='pink', highlight='white', faint=True, reverse=True)"
44169,foo bar
44170,">>> color_print('foo bar', color='pink', highlight='white', underline=True, reverse=True)"
44171,foo bar
44172,with
44173,"from colorama import Fore, Style"
44174,import sys
44175,
44176,class Highlight:
44177,"  def __init__(self, clazz, color):"
44178,    self.color = color
44179,    self.clazz = clazz
44180,  def __enter__(self):
44181,"    print(self.color, end="""")"
44182,"  def __exit__(self, type, value, traceback):"
44183,    if self.clazz == Fore:
44184,"      print(Fore.RESET, end="""")"
44185,    else:
44186,      assert self.clazz == Style
44187,"      print(Style.RESET_ALL, end="""")"
44188,    sys.stdout.flush()
44189,
44190,"with Highlight(Fore, Fore.GREEN):"
44191,"  print(""this is highlighted"")"
44192,"print(""this is not"")"
44193,"print(Style.BRIGHT + ""Header Test"")"
44194,print (Style.DIM + word)
44195,contextlib
44196,@contextlib.contextmanager
44197,from clint.textui import colored
44198,print colored.red('some warning message')
44199,print colored.green('nicely done!')
44200,for i in range(255):
44201,"    print i, chr(i)"
44202,⚠️
44203,🛑
44204,📕: error message
44205,📙: warning message
44206,📗: ok status message
44207,📘: action message
44208,📓: canceled status message
44209,📔: Or anything you like and want to recognize immediately by color
44210,"print "" ""+ ""\033[01;41m"" + "" "" +""\033[01;46m""  + ""  "" + ""\033[01;42m"""
44211,cprint
44212,termcolor
44213,"%s, %d"
44214,"print colors.draw(""i'm yellow"", bold=True, fg_yellow=True)"
44215,"print colors.error('sorry, ')"
44216,table = [
44217,"    ['a',  '1.2',  '4.2' ],"
44218,"    ['b',  '70',   '0.03'],"
44219,"    ['x',  '5',    '0'   ],"
44220,]
44221,
44222,df = pd.DataFrame(table)
44223,to_numeric()
44224,to_datetime()
44225,to_timedelta()
44226,astype()
44227,infer_objects()
44228,convert_dtypes()
44229,pd.NA
44230,to_numeric()
44231,pandas.to_numeric()
44232,to_numeric()
44233,">>> s = pd.Series([""8"", 6, ""7.5"", 3, ""0.9""]) # mixed string and numeric values"
44234,>>> s
44235,0      8
44236,1      6
44237,2    7.5
44238,3      3
44239,4    0.9
44240,dtype: object
44241,
44242,>>> pd.to_numeric(s) # convert everything to float values
44243,0    8.0
44244,1    6.0
44245,2    7.5
44246,3    3.0
44247,4    0.9
44248,dtype: float64
44249,# convert Series
44250,my_series = pd.to_numeric(my_series)
44251,
44252,"# convert column ""a"" of a DataFrame"
44253,"df[""a""] = pd.to_numeric(df[""a""])"
44254,apply()
44255,# convert all columns of DataFrame
44256,df = df.apply(pd.to_numeric) # convert all columns of DataFrame
44257,
44258,"# convert just columns ""a"" and ""b"""
44259,"df[[""a"", ""b""]] = df[[""a"", ""b""]].apply(pd.to_numeric)"
44260,to_numeric()
44261,errors
44262,NaN
44263,s
44264,">>> s = pd.Series(['1', '2', '4.7', 'pandas', '10'])"
44265,>>> s
44266,0         1
44267,1         2
44268,2       4.7
44269,3    pandas
44270,4        10
44271,dtype: object
44272,">>> pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')"
44273,ValueError: Unable to parse string
44274,NaN
44275,errors
44276,">>> pd.to_numeric(s, errors='coerce')"
44277,0     1.0
44278,1     2.0
44279,2     4.7
44280,3     NaN
44281,4    10.0
44282,dtype: float64
44283,errors
44284,">>> pd.to_numeric(s, errors='ignore')"
44285,# the original Series is returned untouched
44286,"df.apply(pd.to_numeric, errors='ignore')"
44287,to_numeric()
44288,int64
44289,float64
44290,float32
44291,int8
44292,to_numeric()
44293,'integer'
44294,'signed'
44295,'unsigned'
44296,'float'
44297,s
44298,">>> s = pd.Series([1, 2, -7])"
44299,>>> s
44300,0    1
44301,1    2
44302,2   -7
44303,dtype: int64
44304,'integer'
44305,">>> pd.to_numeric(s, downcast='integer')"
44306,0    1
44307,1    2
44308,2   -7
44309,dtype: int8
44310,'float'
44311,">>> pd.to_numeric(s, downcast='float')"
44312,0    1.0
44313,1    2.0
44314,2   -7.0
44315,dtype: float32
44316,astype()
44317,astype()
44318,np.int16
44319,astype()
44320,# convert all DataFrame columns to the int64 dtype
44321,df = df.astype(int)
44322,
44323,"# convert column ""a"" to int64 dtype and ""b"" to complex type"
44324,"df = df.astype({""a"": int, ""b"": complex})"
44325,
44326,# convert Series to float16 type
44327,s = s.astype(np.float16)
44328,
44329,# convert Series to Python strings
44330,s = s.astype(str)
44331,
44332,# convert Series to categorical type - see docs for more details
44333,s = s.astype('category')
44334,astype()
44335,NaN
44336,inf
44337,errors='ignore'
44338,astype()
44339,">>> s = pd.Series([1, 2, -7])"
44340,>>> s
44341,0    1
44342,1    2
44343,2   -7
44344,dtype: int64
44345,>>> s.astype(np.uint8)
44346,0      1
44347,1      2
44348,2    249
44349,dtype: uint8
44350,"pd.to_numeric(s, downcast='unsigned')"
44351,infer_objects()
44352,infer_objects()
44353,">>> df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')"
44354,>>> df.dtypes
44355,a    object
44356,b    object
44357,dtype: object
44358,infer_objects()
44359,>>> df = df.infer_objects()
44360,>>> df.dtypes
44361,a     int64
44362,b    object
44363,dtype: object
44364,df.astype(int)
44365,convert_dtypes()
44366,convert_dtypes()
44367,pd.NA
44368,Int64
44369,int32
44370,Int32
44371,object
44372,df
44373,>>> df.convert_dtypes().dtypes                                             
44374,a     Int64
44375,b    string
44376,dtype: object
44377,Int64
44378,int64
44379,string
44380,infer_objects=False
44381,>>> df.convert_dtypes(infer_objects=False).dtypes                          
44382,a    object
44383,b    string
44384,dtype: object
44385,infer_dtype
44386,.convert_objects
44387,0.17
44388,df.to_numeric
44389,error=coerce
44390,astype()
44391,"a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]"
44392,"df = pd.DataFrame(a, columns=['one', 'two', 'three'])"
44393,df
44394,Out[16]: 
44395,  one  two three
44396,0   a  1.2   4.2
44397,1   b   70  0.03
44398,2   x    5     0
44399,
44400,df.dtypes
44401,Out[17]: 
44402,one      object
44403,two      object
44404,three    object
44405,
44406,"df[['two', 'three']] = df[['two', 'three']].astype(float)"
44407,
44408,df.dtypes
44409,Out[19]: 
44410,one       object
44411,two      float64
44412,three    float64
44413,pd.DataFrame
44414,dtype
44415,"SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_index,col_indexer] = value instead"
44416,ValueError: Cannot convert NA to integer
44417,"df = pd.DataFrame(a, columns=['one', 'two', 'three'], dtype={'one': str, 'two': int, 'three': float})"
44418,dict(enumerate(my_list))
44419,"df[['col.name1', 'col.name2'...]] = df[['col.name1', 'col.name2'..]].astype('data_type')"
44420,bool
44421,True
44422,"dataframe = dataframe.astype({'col_name_1':'int','col_name_2':'float64', etc. ...})"
44423,"a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]"
44424,"df = pd.DataFrame(a, columns=['col_name_1', 'col_name_2', 'col_name_3'])"
44425,"df = df.astype({'col_name_2':'float64', 'col_name_3':'float64'})"
44426,"# df is the DataFrame, and column_list is a list of columns as strings (e.g [""col1"",""col2"",""col3""])"
44427,# dependencies: pandas
44428,
44429,"def coerce_df_columns_to_numeric(df, column_list):"
44430,"    df[column_list] = df[column_list].apply(pd.to_numeric, errors='coerce')"
44431,import pandas as pd
44432,
44433,"def coerce_df_columns_to_numeric(df, column_list):"
44434,"    df[column_list] = df[column_list].apply(pd.to_numeric, errors='coerce')"
44435,
44436,"a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]"
44437,"df = pd.DataFrame(a, columns=['col1','col2','col3'])"
44438,
44439,"coerce_df_columns_to_numeric(df, ['col2','col3'])"
44440,.astype(str)
44441,"df = pd.DataFrame({'a': ['1', '2', '3'], 'b': [4, 5, 6]}, dtype=object)"
44442,df.dtypes                                                                  
44443,
44444,a    object
44445,b    object
44446,dtype: object
44447,
44448,# Actually converts string to numeric - hard conversion
44449,df.apply(pd.to_numeric).dtypes                                             
44450,
44451,a    int64
44452,b    int64
44453,dtype: object
44454,
44455,# Infers better data types for object data - soft conversion
44456,df.infer_objects().dtypes                                                  
44457,
44458,a    object  # no change
44459,b     int64
44460,dtype: object
44461,
44462,"# Same as infer_objects, but converts to equivalent ExtensionType"
44463,df.convert_dtypes().dtypes                                                     
44464,"d1 = pd.DataFrame(columns=[ 'float_column' ], dtype=float)"
44465,"d1 = d1.append(pd.DataFrame(columns=[ 'string_column' ], dtype=str))"
44466,In[8}:  d1.dtypes
44467,Out[8]: 
44468,float_column     float64
44469,string_column     object
44470,dtype: object
44471,"df = df.astype({""columnname"": str})"
44472,type
44473, #   Column  Non-Null Count  Dtype  
44474,---  ------  --------------  -----  
44475, 0   date    132 non-null    object 
44476, 1   temp    132 non-null    float64
44477,df['temp'] = df['temp'].astype('int64')
44478,  #   Column  Non-Null Count  Dtype 
44479, ---  ------  --------------  ----- 
44480,  0   date    132 non-null    object
44481,  1   temp    132 non-null    int64 
44482,pandas.DataFrame.convert_dtypes
44483,In [40]: df = pd.DataFrame(
44484,    ...:     {
44485,"    ...:         ""a"": pd.Series([1, 2, 3], dtype=np.dtype(""int32"")),"
44486,"    ...:         ""b"": pd.Series([""x"", ""y"", ""z""], dtype=np.dtype(""O"")),"
44487,"    ...:         ""c"": pd.Series([True, False, np.nan], dtype=np.dtype(""O"")),"
44488,"    ...:         ""d"": pd.Series([""h"", ""i"", np.nan], dtype=np.dtype(""O"")),"
44489,"    ...:         ""e"": pd.Series([10, np.nan, 20], dtype=np.dtype(""float"")),"
44490,"    ...:         ""f"": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(""float"")),"
44491,    ...:     }
44492,    ...: )
44493,
44494,In [41]: dff = df.copy()
44495,
44496,In [42]: df 
44497,Out[42]: 
44498,   a  b      c    d     e      f
44499,0  1  x   True    h  10.0    NaN
44500,1  2  y  False    i   NaN  100.5
44501,2  3  z    NaN  NaN  20.0  200.0
44502,
44503,In [43]: df.dtypes
44504,Out[43]: 
44505,a      int32
44506,b     object
44507,c     object
44508,d     object
44509,e    float64
44510,f    float64
44511,dtype: object
44512,
44513,In [44]: df = df.convert_dtypes()
44514,
44515,In [45]: df.dtypes
44516,Out[45]: 
44517,a      Int32
44518,b     string
44519,c    boolean
44520,d     string
44521,e      Int64
44522,f    float64
44523,dtype: object
44524,
44525,In [46]: dff = dff.convert_dtypes(convert_boolean = False)
44526,
44527,In [47]: dff.dtypes
44528,Out[47]: 
44529,a      Int32
44530,b     string
44531,c     object
44532,d     string
44533,e      Int64
44534,f    float64
44535,dtype: object
44536,import pandas as pd 
44537,import numpy as np
44538,dataurl = 'https://raw.githubusercontent.com/RubenGavidia/Pandas_Portfolio.py/main/Wes_Mckinney.py/nutrition.csv'
44539,"nutrition = pd.read_csv(dataurl,index_col=[0])"
44540,nutrition.head(3)
44541,
44542,    name    serving_size    calories    total_fat   saturated_fat   cholesterol sodium  choline folate  folic_acid  ... fat saturated_fatty_acids   monounsaturated_fatty_acids polyunsaturated_fatty_acids fatty_acids_total_trans alcohol ash caffeine    theobromine water
44543,0   Cornstarch  100 g   381 0.1g    NaN 0   9.00 mg 0.4 mg  0.00 mcg    0.00 mcg    ... 0.05 g  0.009 g 0.016 g 0.025 g 0.00 mg 0.0 g   0.09 g  0.00 mg 0.00 mg 8.32 g
44544,"1   Nuts, pecans    100 g   691 72g 6.2g    0   0.00 mg 40.5 mg 22.00 mcg   0.00 mcg    ... 71.97 g 6.180 g 40.801 g    21.614 g    0.00 mg 0.0 g   1.49 g  0.00 mg 0.00 mg 3.52 g"
44545,"2   Eggplant, raw   100 g   25  0.2g    NaN 0   2.00 mg 6.9 mg  22.00 mcg   0.00 mcg    ... 0.18 g  0.034 g 0.016 g 0.076 g 0.00 mg 0.0 g   0.66 g  0.00 mg 0.00 mg 92.30 g"
44546,3 rows × 76 columns
44547,
44548,nutrition.dtypes
44549,name             object
44550,serving_size     object
44551,calories          int64
44552,total_fat        object
44553,saturated_fat    object
44554,                  ...  
44555,alcohol          object
44556,ash              object
44557,caffeine         object
44558,theobromine      object
44559,water            object
44560,"Length: 76, dtype: object"
44561,
44562,nutrition.dtypes.value_counts()
44563,object    74
44564,int64      2
44565,dtype: int64
44566,"nutrition.index = pd.RangeIndex(start = 0, stop = 8789, step= 1)"
44567,"nutrition.set_index('name',inplace = True)"
44568,"nutrition.replace('[a-zA-Z]','', regex= True, inplace=True)"
44569,nutrition=nutrition.astype(float)
44570,nutrition.head(3)
44571,
44572,serving_size    calories    total_fat   saturated_fat   cholesterol sodium  choline folate  folic_acid  niacin  ... fat saturated_fatty_acids   monounsaturated_fatty_acids polyunsaturated_fatty_acids fatty_acids_total_trans alcohol ash caffeine    theobromine water
44573,name                                                                                    
44574,Cornstarch  100.0   381.0   0.1 NaN 0.0 9.0 0.4 0.0 0.0 0.000   ... 0.05    0.009   0.016   0.025   0.0 0.0 0.09    0.0 0.0 8.32
44575,"Nuts, pecans    100.0   691.0   72.0    6.2 0.0 0.0 40.5    22.0    0.0 1.167   ... 71.97   6.180   40.801  21.614  0.0 0.0 1.49    0.0 0.0 3.52"
44576,"Eggplant, raw   100.0   25.0    0.2 NaN 0.0 2.0 6.9 22.0    0.0 0.649   ... 0.18    0.034   0.016   0.076   0.0 0.0 0.66    0.0 0.0 92.30"
44577,3 rows × 75 columns
44578,
44579,nutrition.dtypes
44580,serving_size     float64
44581,calories         float64
44582,total_fat        float64
44583,saturated_fat    float64
44584,cholesterol      float64
44585,                  ...   
44586,alcohol          float64
44587,ash              float64
44588,caffeine         float64
44589,theobromine      float64
44590,water            float64
44591,"Length: 75, dtype: object"
44592,
44593,nutrition.dtypes.value_counts()
44594,float64    75
44595,dtype: int64
44596,cholesterol_mg
44597,"nutrition.index = pd.RangeIndex(start = 0, stop = 8789, step= 1)"
44598,"nutrition.set_index('name',inplace = True)"
44599,"nutrition.astype(str).replace('[^a-zA-Z]','', regex= True)"
44600,"units = nutrition.astype(str).replace('[^a-zA-Z]','', regex= True)"
44601,units = units.mode()
44602,"units = units.replace('', np.nan).dropna(axis=1)"
44603,"mapper = { k: k + ""_"" + units[k].at[0] for k in units}"
44604,"nutrition.rename(columns=mapper, inplace=True)"
44605,"nutrition.replace('[a-zA-Z]','', regex= True, inplace=True)"
44606,nutrition=nutrition.astype(float)
44607,DataFrame.from_records
44608,read_csv(dtype=...)
44609,DataFrame.from_records
44610,"x = [['foo', '1.2', '70'], ['bar', '4.2', '5']]"
44611,
44612,df = pd.DataFrame.from_records(np.array(
44613,"    [tuple(row) for row in x], # pass a list-of-tuples (x can be a list-of-lists or 2D array)"
44614,"    'object, float, int'       # define the column types"
44615,))
44616,>>> df.dtypes
44617,# f0     object
44618,# f1    float64
44619,# f2      int64
44620,# dtype: object
44621,read_csv(dtype=...)
44622,dtype
44623,read_csv
44624,rating
44625,genre
44626,lines = '''
44627,"foo,biography,5"
44628,"bar,crime,4"
44629,"baz,fantasy,3"
44630,"qux,history,2"
44631,"quux,horror,1"
44632,'''
44633,"columns = ['name', 'genre', 'rating']"
44634,csv = io.StringIO(lines * 6_000_000) # 30M lines
44635,
44636,"df = pd.read_csv(csv, names=columns, dtype={'rating': 'int8', 'genre': 'category'})"
44637,>>> df.info(memory_usage='deep')
44638,# memory usage: 1.8 GB
44639,>>> pd.read_csv(io.StringIO(lines * 6_000_000)).info(memory_usage='deep')
44640,# memory usage: 3.7 GB
44641,"a = [['a', 1.2, 4.2], ['b', 70, 0.03], ['x', 5, 0]]"
44642,df = pd.DataFrame(np.array(a))
44643,
44644,df
44645,Out[5]: 
44646,   0    1     2
44647,0  a  1.2   4.2
44648,1  b   70  0.03
44649,2  x    5     0
44650,
44651,df[1].dtype
44652,Out[7]: dtype('O')
44653,df = pd.DataFrame(a)
44654,
44655,df
44656,Out[10]: 
44657,   0     1     2
44658,0  a   1.2  4.20
44659,1  b  70.0  0.03
44660,2  x   5.0  0.00
44661,
44662,df[1].dtype
44663,Out[11]: dtype('float64')
44664,firstCol = list(df.columns)[0]
44665,"df[firstCol] = df[firstCol].fillna('').astype(str).apply(lambda x: x.replace('.0', ''))"
44666,"[{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}]"
44667,name
44668,"[{'name': 'Bart', 'age': 10}, {'name': 'Homer', 'age': 39}]"
44669,"[{'name':'Bart', 'age':10, 'note':3},{'name':'Homer','age':10,'note':2},{'name':'Vasile','age':20,'note':3}]"
44670,"from operator import itemgetter newlist = sorted(old_list, key=itemgetter(-'note','name')"
44671,sorted()
44672,key=
44673,"newlist = sorted(list_to_be_sorted, key=lambda d: d['name']) "
44674,operator.itemgetter
44675,from operator import itemgetter
44676,"newlist = sorted(list_to_be_sorted, key=itemgetter('name')) "
44677,reverse=True
44678,"newlist = sorted(list_to_be_sorted, key=itemgetter('name'), reverse=True)"
44679,itemgetter(i)
44680,i
44681,itemgetter
44682,"itemgetter(1,2,3)"
44683,"obj[1], obj[2], obj[3]"
44684,import operator
44685,list_of_dicts.sort(key=operator.itemgetter('name'))
44686,list_of_dicts.sort(key=operator.itemgetter('age'))
44687,"key=lambda k: (k['name'], k['age'])"
44688,"key=itemgetter('name', 'age')"
44689,cmp
44690,key
44691,list.sort()
44692,list
44693,"my_list = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]"
44694,
44695,"my_list.sort(lambda x,y : cmp(x['name'], y['name']))"
44696,my_list
44697,key
44698,"my_list = sorted(my_list, key=lambda k: k['name'])"
44699,operator.itemgetter
44700,key=lambda k: list(k.values())[0]
44701,"my_list = [{'name':'Homer', 'age':39}, {'name':'Milhouse', 'age':10}, {'name':'Bart', 'age':10} ]"
44702,"sortedlist = sorted(my_list , key=lambda elem: ""%02d %s"" % (elem['age'], elem['name']))"
44703,"a = [{'name':'Homer', 'age':39}, ...]"
44704,
44705,# This changes the list a
44706,a.sort(key=lambda k : k['name'])
44707,
44708,# This returns a new list (a is not modified)
44709,"sorted(a, key=lambda k : k['name']) "
44710,import operator
44711,a_list_of_dicts.sort(key=operator.itemgetter('name'))
44712,"[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]"
44713,"sorted(l,cmp=lambda x,y: cmp(x['name'],y['name']))"
44714,def mykey(adict): return adict['name']
44715,"x = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]"
44716,"sorted(x, key=mykey)"
44717,itemgetter
44718,from operator import itemgetter
44719,"x = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]"
44720,"sorted(x, key=itemgetter('name'))"
44721,"py = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]"
44722,"sort_on = ""name"""
44723,"decorated = [(dict_[sort_on], dict_) for dict_ in py]"
44724,decorated.sort()
44725,"result = [dict_ for (key, dict_) in decorated]"
44726,>>> result
44727,"[{'age': 10, 'name': 'Bart'}, {'age': 39, 'name': 'Homer'}]"
44728,key=
44729,.sort
44730,lower()
44731,"lists = [{'name':'Homer', 'age':39},"
44732,"  {'name':'Bart', 'age':10},"
44733,"  {'name':'abby', 'age':9}]"
44734,
44735,"lists = sorted(lists, key=lambda k: k['name'])"
44736,print(lists)
44737,"# [{'name':'Bart', 'age':10}, {'name':'Homer', 'age':39}, {'name':'abby', 'age':9}]"
44738,
44739,"lists = sorted(lists, key=lambda k: k['name'].lower())"
44740,print(lists)
44741,"# [ {'name':'abby', 'age':9}, {'name':'Bart', 'age':10}, {'name':'Homer', 'age':39}]"
44742,import pandas as pd
44743,
44744,"listOfDicts = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]"
44745,df = pd.DataFrame(listOfDicts)
44746,df = df.sort_values('name')
44747,sorted_listOfDicts = df.T.to_dict().values()
44748,"setup_large = ""listOfDicts = [];\"
44749,"[listOfDicts.extend(({'name':'Homer', 'age':39}, {'name':'Bart', 'age':10})) for _ in range(50000)];\"
44750,from operator import itemgetter;import pandas as pd;\
44751,"df = pd.DataFrame(listOfDicts);"""
44752,
44753,"setup_small = ""listOfDicts = [];\"
44754,"listOfDicts.extend(({'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}));\"
44755,from operator import itemgetter;import pandas as pd;\
44756,"df = pd.DataFrame(listOfDicts);"""
44757,
44758,"method1 = ""newlist = sorted(listOfDicts, key=lambda k: k['name'])"""
44759,"method2 = ""newlist = sorted(listOfDicts, key=itemgetter('name')) """
44760,"method3 = ""df = df.sort_values('name');\"
44761,"sorted_listOfDicts = df.T.to_dict().values()"""
44762,
44763,import timeit
44764,"t = timeit.Timer(method1, setup_small)"
44765,print('Small Method LC: ' + str(t.timeit(100)))
44766,"t = timeit.Timer(method2, setup_small)"
44767,print('Small Method LC2: ' + str(t.timeit(100)))
44768,"t = timeit.Timer(method3, setup_small)"
44769,print('Small Method Pandas: ' + str(t.timeit(100)))
44770,
44771,"t = timeit.Timer(method1, setup_large)"
44772,print('Large Method LC: ' + str(t.timeit(100)))
44773,"t = timeit.Timer(method2, setup_large)"
44774,print('Large Method LC2: ' + str(t.timeit(100)))
44775,"t = timeit.Timer(method3, setup_large)"
44776,print('Large Method Pandas: ' + str(t.timeit(1)))
44777,
44778,#Small Method LC: 0.000163078308105
44779,#Small Method LC2: 0.000134944915771
44780,#Small Method Pandas: 0.0712950229645
44781,#Large Method LC: 0.0321750640869
44782,#Large Method LC2: 0.0206089019775
44783,#Large Method Pandas: 5.81405615807
44784,def sort_key_func(item):
44785,"    """""" Helper function used to sort list of dicts"
44786,
44787,    :param item: dict
44788,"    :return: sorted list of tuples (k, v)"
44789,"    """""""
44790,    pairs = []
44791,"    for k, v in item.items():"
44792,"        pairs.append((k, v))"
44793,    return sorted(pairs)
44794,"sorted(A, key=sort_key_func)"
44795,list
44796,dictionaries
44797,sort()
44798,def get_name(d):
44799,"    """""" Return the value of a key in a dictionary. """""""
44800,
44801,"    return d[""name""]"
44802,list
44803,"data_one = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}]"
44804,data_one.sort(key=get_name)
44805,list
44806,sorted()
44807,list
44808,list
44809,"data_two = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}]"
44810,"new_data = sorted(data_two, key=get_name)"
44811,data_one
44812,new_data
44813,>>> print(data_one)
44814,"[{'name': 'Bart', 'age': 10}, {'name': 'Homer', 'age': 39}]"
44815,>>> print(new_data)
44816,"[{'name': 'Bart', 'age': 10}, {'name': 'Homer', 'age': 39}]"
44817,D
44818,sorted
44819,"D = {'eggs': 3, 'ham': 1, 'spam': 2}"
44820,def get_count(tuple):
44821,    return tuple[1]
44822,
44823,"sorted(D.items(), key = get_count, reverse=True)"
44824,# Or
44825,"sorted(D.items(), key = lambda x: x[1], reverse=True)  # Avoiding get_count function call"
44826,"sorted_list = sorted(list_to_sort, key= lambda x: x['name'])"
44827,# Returns list of values
44828,list_to_sort.sort(key=operator.itemgetter('name'))
44829,"# Edits the list, and does not return a new list"
44830,# First option
44831,"python3.6 -m timeit -s ""list_to_sort = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}, {'name':'Faaa', 'age':57}, {'name':'Errr', 'age':20}]"" -s ""sorted_l=[]"" ""sorted_l = sorted(list_to_sort, key=lambda e: e['name'])"""
44832,# Second option
44833,"python3.6 -m timeit -s ""list_to_sort = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}, {'name':'Faaa', 'age':57}, {'name':'Errr', 'age':20}]"" -s ""sorted_l=[]"" -s ""import operator"" ""list_to_sort.sort(key=operator.itemgetter('name'))"""
44834,operator.itemgetter
44835,lambda
44836,itemgetter
44837,lambda
44838,lambda
44839,itemgetter
44840,import random
44841,import operator
44842,
44843,# Create a list of 100 dicts with random 8-letter names and random ages from 0 to 100.
44844,"l = [{'name': ''.join(random.choices(string.ascii_lowercase, k=8)), 'age': random.randint(0, 100)} for i in range(100)]"
44845,
44846,# Test the performance with a lambda function sorting on name
44847,"%timeit sorted(l, key=lambda x: x['name'])"
44848,"13 µs ± 388 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
44849,
44850,# Test the performance with itemgetter sorting on name
44851,"%timeit sorted(l, key=operator.itemgetter('name'))"
44852,"10.7 µs ± 38.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
44853,
44854,# Check that each technique produces the same sort order
44855,"sorted(l, key=lambda x: x['name']) == sorted(l, key=operator.itemgetter('name'))"
44856,True
44857,list_to_be_sorted = [
44858,"                      {'name':'Homer', 'age':39}, "
44859,"                      {'name':'Milhouse', 'age':10}, "
44860,"                      {'name':'Bart', 'age':10} "
44861,                    ]
44862,'age'
44863,'name'
44864,"ORDER BY age, name"
44865,"newlist = sorted( list_to_be_sorted, key=lambda k: (k['age'], k['name']) )"
44866,import operator
44867,"newlist = sorted( list_to_be_sorted, key=operator.itemgetter('age','name') )"
44868,print(newlist)
44869,"def cmpfun(a, b):"
44870,"    for (name, inv) in cmps:"
44871,"        res = cmp(a[name], b[name])"
44872,        if res != 0:
44873,            return res * inv
44874,    return 0
44875,
44876,data = [
44877,"    dict(name='alice', age=10), "
44878,"    dict(name='baruch', age=9), "
44879,"    dict(name='alice', age=11),"
44880,]
44881,
44882,all_cmps = [
44883,"    [('name', 1), ('age', -1)], "
44884,"    [('name', 1), ('age', 1)], "
44885,"    [('name', -1), ('age', 1)],]"
44886,
44887,"print 'data:', data"
44888,"for cmps in all_cmps: print 'sort:', cmps; print sorted(data, cmpfun)"
44889,super()
44890,Base.__init__
44891,super().__init__
44892,class Base(object):
44893,    def __init__(self):
44894,"        print ""Base created"""
44895,        
44896,class ChildA(Base):
44897,    def __init__(self):
44898,        Base.__init__(self)
44899,        
44900,class ChildB(Base):
44901,    def __init__(self):
44902,"        super(ChildB, self).__init__()"
44903,        
44904,ChildA() 
44905,ChildB()
44906,class Event(tuple)
44907,"e = Event(description=""stored the current time"")"
44908,Event
44909,"(1653520485,""stored..."")"
44910,__init__()
44911,self
44912,dict
44913,super().__init__
44914,self
44915,super()
44916,super().__init__()
44917,"super(ChildB, self).__init__()"
44918,super()
44919,"super([type [, object]])"
44920,type
44921,ChildB
44922,"isinstance(object, type)"
44923,super()
44924,super
44925,class ChildB(Base):
44926,    def __init__(self):
44927,        super().__init__()
44928,super
44929,self
44930,"        super(ChildB, self).__init__()"
44931,        Base.__init__(self) # Avoid this.
44932,class ChildA(Base):
44933,    def __init__(self):
44934,        Base.__init__(self)
44935,
44936,class ChildB(Base):
44937,    def __init__(self):
44938,        super().__init__()
44939,ChildB
44940,__init__
44941,super
44942,__init__
44943,super
44944,super
44945,class ChildB(Base):
44946,    def __init__(self):
44947,        mro = type(self).mro()
44948,        check_next = mro.index(ChildB) + 1 # next after *this* class.
44949,        while check_next < len(mro):
44950,            next_class = mro[check_next]
44951,            if '__init__' in next_class.__dict__:
44952,                next_class.__init__(self)
44953,                break
44954,            check_next += 1
44955,class ChildB(Base):
44956,    def __init__(self):
44957,        mro = type(self).mro()
44958,        for next_class in mro[mro.index(ChildB) + 1:]: # slice to end
44959,"            if hasattr(next_class, '__init__'):"
44960,                next_class.__init__(self)
44961,                break
44962,super
44963,__class__
44964,super
44965,super
44966,class Base(object):
44967,    def __init__(self):
44968,"        print(""Base init'ed"")"
44969,
44970,class ChildA(Base):
44971,    def __init__(self):
44972,"        print(""ChildA init'ed"")"
44973,        Base.__init__(self)
44974,
44975,class ChildB(Base):
44976,    def __init__(self):
44977,"        print(""ChildB init'ed"")"
44978,        super().__init__()
44979,class UserDependency(Base):
44980,    def __init__(self):
44981,"        print(""UserDependency init'ed"")"
44982,        super().__init__()
44983,ChildB
44984,ChildA
44985,"class UserA(ChildA, UserDependency):"
44986,    def __init__(self):
44987,"        print(""UserA init'ed"")"
44988,        super().__init__()
44989,
44990,"class UserB(ChildB, UserDependency):"
44991,    def __init__(self):
44992,"        print(""UserB init'ed"")"
44993,        super().__init__()
44994,UserA
44995,>>> UserA()
44996,UserA init'ed
44997,ChildA init'ed
44998,Base init'ed
44999,<__main__.UserA object at 0x0000000003403BA8>
45000,UserB
45001,ChildB
45002,super
45003,>>> UserB()
45004,UserB init'ed
45005,ChildB init'ed
45006,UserDependency init'ed
45007,Base init'ed
45008,<__main__.UserB object at 0x0000000003403438>
45009,"super(self.__class__, self).__init__()  # DON'T DO THIS! EVER."
45010,self.__class__
45011,super()
45012,super
45013,super
45014,RuntimeError
45015,>>> class Polygon(object):
45016,"...     def __init__(self, id):"
45017,...         self.id = id
45018,...
45019,>>> class Rectangle(Polygon):
45020,"...     def __init__(self, id, width, height):"
45021,"...         super(self.__class__, self).__init__(id)"
45022,"...         self.shape = (width, height)"
45023,...
45024,>>> class Square(Rectangle):
45025,...     pass
45026,...
45027,">>> Square('a', 10, 10)"
45028,Traceback (most recent call last):
45029,"  File ""<stdin>"", line 1, in <module>"
45030,"  File ""<stdin>"", line 3, in __init__"
45031,TypeError: __init__() missing 2 required positional arguments: 'width' and 'height'
45032,super()
45033,super()
45034,tk.Tk.__init__(self)
45035,super().__init__()
45036,tk.Tk.__init__(self)
45037,super().__init__()
45038,Base.__init__(self)
45039,super()
45040,super
45041,"hasattr(next_class, '__init__')"
45042,"class A(): ...; class B(A): ...; class C(A): ...; class D(B, C): ..."
45043,A
45044,С
45045,__init__
45046,D
45047,__init__
45048,D().__init__()
45049,A.__init__
45050,C.__init__
45051,if '__init__' in next_class.__dict__:
45052,super().__init__()
45053,self.__class__
45054,"super(self.__class__, self).__init__()  # DON'T DO THIS!"
45055,super
45056,self.__class__
45057,class Polygon(object):
45058,"    def __init__(self, id):"
45059,        self.id = id
45060,
45061,class Rectangle(Polygon):
45062,"    def __init__(self, id, width, height):"
45063,"        super(self.__class__, self).__init__(id)"
45064,"        self.shape = (width, height)"
45065,
45066,class Square(Rectangle):
45067,    pass
45068,Square
45069,Rectangle
45070,Square
45071,Rectangle
45072,Square
45073,"mSquare = Square('a', 10,10)"
45074,Rectangle
45075,Square
45076,Rectangle
45077,"super(self.__class__,self)"
45078,mSquare
45079,Rectangle
45080,super(...).__init__()
45081,Rectangle
45082,"super(self.__class__, self).__init__()"
45083,__init__
45084,echo
45085,python
45086,Base = ChildB
45087,
45088,Base()
45089,Base = ChildA
45090,
45091,Base()
45092,super()
45093,super()
45094,object
45095,"BaseClassName.__init__(self, args)"
45096,super()
45097,super()
45098,cls.__mro__
45099,__init__
45100,__init__
45101,super()
45102,ChildA.__init__
45103,Base.__init__
45104,ChildB.__init__
45105,__init__
45106,ChildB
45107,self
45108,ClassC
45109,class Mixin(Base):
45110,  def __init__(self):
45111,"    print ""Mixin stuff"""
45112,"    super(Mixin, self).__init__()"
45113,
45114,"class ChildC(ChildB, Mixin):  # Mixin is now between ChildB and Base"
45115,  pass
45116,
45117,ChildC()
45118,help(ChildC) # shows that the Method Resolution Order is ChildC->ChildB->Mixin->Base
45119,Base
45120,ChildB
45121,ChildC
45122,"super(ChildB, self)"
45123,Mixin
45124,self
45125,ChildC
45126,Mixin
45127,ChildB
45128,Base
45129,super()
45130,super
45131,"super(ChildB, self)"
45132,self
45133,ChildB
45134,super()
45135,ChildB
45136,"{2:3, 1:89, 4:5, 3:0}"
45137,"{1:89, 2:3, 3:0, 4:5}"
45138,TreeMap
45139,dict
45140,OrderedDict
45141,In [1]: import collections
45142,
45143,"In [2]: d = {2:3, 1:89, 4:5, 3:0}"
45144,
45145,In [3]: od = collections.OrderedDict(sorted(d.items()))
45146,
45147,In [4]: od
45148,"Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
45149,od
45150,In [11]: od[1]
45151,Out[11]: 89
45152,
45153,In [12]: od[3]
45154,Out[12]: 0
45155,
45156,"In [13]: for k, v in od.iteritems(): print k, v"
45157,   ....: 
45158,1 89
45159,2 3
45160,3 0
45161,4 5
45162,.items()
45163,.iteritems()
45164,"In [13]: for k, v in od.items(): print(k, v)"
45165,   ....: 
45166,1 89
45167,2 3
45168,3 0
45169,4 5
45170,sorted_dict = dict(sorted(unsorted_dict.items()))
45171,"mydict = {'carl':40,"
45172,"          'alan':2,"
45173,"          'bob':1,"
45174,          'danny':3}
45175,
45176,for key in sorted(mydict):
45177,"    print ""%s: %s"" % (key, mydict[key])"
45178,alan: 2
45179,bob: 1
45180,carl: 40
45181,danny: 3
45182,keylist = mydict.keys()
45183,keylist.sort()
45184,for key in keylist:
45185,"    print ""%s: %s"" % (key, mydict[key])"
45186,"for key, value in sorted(mydict.items())"""
45187,">>> d = {2:3, 1:89, 4:5, 3:0}"
45188,>>> dict(sorted(d.items()))
45189,"{1: 89, 2: 3, 3: 0, 4: 5}"
45190,{key:d[key] for key in sorted(d.keys())}
45191,sorted
45192,{}
45193,{sorted(d.items())}
45194,{key:d[key] for key in sorted(d)}
45195,sorted(d)
45196,sorted(d.items())
45197,collections
45198,>>> from collections import OrderedDict
45199,
45200,>>> # regular unsorted dictionary
45201,">>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}"
45202,
45203,>>> # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works
45204,">>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))"
45205,"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])"
45206,
45207,>>> # dictionary sorted by value
45208,">>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))"
45209,"OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])"
45210,
45211,>>> # dictionary sorted by length of the key string
45212,">>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))"
45213,"OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
45214,reverse=True
45215,"OrderedDict(sorted(d.items(), reverse=True, key=lambda t: t[0]))"
45216,"Unexpected type(s): (List[str]) Possible types: (Mapping) (Iterable[Tuple[Any, Any]])"
45217,>>> from sortedcontainers import SortedDict
45218,">>> d = {2:3, 1:89, 4:5, 3:0}"
45219,>>> s = SortedDict(d)
45220,>>> s.items()
45221,"[(1, 89), (2, 3), (3, 0), (4, 5)]"
45222,>>> s.iloc[-1]
45223,4
45224,>>> del s.iloc[2]
45225,>>> s.keys()
45226,"SortedSet([1, 2, 4])"
45227,"d = {2:3, 1:89, 4:5, 3:0}"
45228,sd = sorted(d.items())
45229,
45230,"for k,v in sd:"
45231,"    print k, v"
45232,1 89
45233,2 3
45234,3 0
45235,4 5
45236,sd
45237,"print k, v"
45238,print
45239,"test_dict = {'a': 1, 'c': 3, 'b': {'b2': 2, 'b1': 1}}"
45240,
45241,def dict_reorder(item):
45242,"    return {k: dict_reoder(v) if isinstance(v, dict) else v for k, v in sorted(item.items())}"
45243,
45244,reordered_dict = dict_reorder(test_dict)
45245,sort_dict()
45246,dict_reoder()
45247,__str__
45248,dict
45249,class SortedDisplayDict(dict):
45250,   def __str__(self):
45251,"       return ""{"" + "", "".join(""%r: %r"" % (key, self[key]) for key in sorted(self)) + ""}"""
45252,
45253,
45254,">>> d = SortedDisplayDict({2:3, 1:89, 4:5, 3:0})"
45255,>>> d
45256,"{1: 89, 2: 3, 3: 0, 4: 5}"
45257,print
45258,import json
45259,"print json.dumps(d, sort_keys = True)"
45260,"d = {2:3, 1:89, 4:5, 3:0}"
45261,
45262,s = {k : d[k] for k in sorted(d)}
45263,
45264,s
45265,"Out[1]: {1: 89, 2: 3, 3: 0, 4: 5} "
45266,">>> D1 = {2:3, 1:89, 4:5, 3:0}"
45267,>>> for key in sorted(D1):
45268,"    print (key, D1[key])"
45269,1 89
45270,2 3
45271,3 0
45272,4 5
45273,"d = {2: 'c', 1: 'b', 0: 'a', 3: 'd'}"
45274,"# Converts to list, sorts, re-converts to dict"
45275,"{k: v for k, v in sorted(list(d.items()))}"
45276,"{k: v for k, v in sorted(d.items(), key=lambda v: ord(v[1]))}"
45277,sorted(list(d))
45278,sorted(d.items())
45279,.items()
45280,.items()
45281,"d = {2:3, 1:89, 4:5, 3:0}"
45282,"d1 = dict(sorted(d.items(), key = lambda x:x[0]))"
45283,d1 = dict(sorted(d.items()))
45284,pprint
45285,">>> x = {'a': 10, 'cd': 20, 'b': 30, 'az': 99} "
45286,>>> print x
45287,"{'a': 10, 'b': 30, 'az': 99, 'cd': 20}"
45288,>>> import pprint 
45289,>>> pprint.pprint(x)
45290,"{'a': 10, 'az': 99, 'b': 30, 'cd': 20}"
45291,"c={2:3, 1:89, 4:5, 3:0}"
45292,y=sorted(c.items())
45293,print y
45294,"[(1, 89), (2, 3), (3, 0), (4, 5)]"
45295,"d={""John"":36,""Lucy"":24,""Albert"":32,""Peter"":18,""Bill"":41}"
45296,x=sorted(d.keys())
45297,print x
45298,"['Albert', 'Bill', 'John', 'Lucy', 'Peter']"
45299,y=sorted(d.values())
45300,print y
45301,"[18, 24, 32, 36, 41]"
45302,z=sorted(d.items())
45303,print z
45304,"[('Albert', 32), ('Bill', 41), ('John', 36), ('Lucy', 24), ('Peter', 18)]"
45305,dict = {}
45306,sorted()
45307,"sorted_dict = {k:v for k,v in sorted(dict.items())}"
45308," D1 = {2:3, 1:89, 4:5, 3:0}"
45309,
45310, sort_dic = {}
45311,
45312, for i in sorted(D1):
45313,     sort_dic.update({i:D1[i]})
45314, print sort_dic
45315,
45316,
45317,"{1: 89, 2: 3, 3: 0, 4: 5}"
45318,from collections import OrderedDict
45319,"sorted_dict = OrderedDict(sorted(D1.items(), key=lambda t: t[0]))"
45320,from collections import OrderedDict
45321,from sortedcontainers import SortedDict
45322,import json
45323,
45324,keys = np.random.rand(100000)
45325,vals = np.random.rand(100000)
45326,
45327,"d = dict(zip(keys, vals))"
45328,
45329,timeit SortedDict(d)
45330,"#45.8 ms ± 780 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
45331,
45332,timeit sorted(d.items())
45333,"#91.9 ms ± 707 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
45334,
45335,"timeit OrderedDict(sorted(d.items(), key=lambda x: x[0]))"
45336,"#93.7 ms ± 1.52 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
45337,
45338,timeit dict(sorted(dic.items()))
45339,"#113 ms ± 824 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
45340,
45341,timeit OrderedDict(sorted(dic.items()))
45342,"#122 ms ± 2.65 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
45343,
45344,"timeit json.dumps(d, sort_keys=True)"
45345,"#259 ms ± 9.42 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
45346,"dict1 = {'renault': 3, 'ford':4, 'volvo': 1, 'toyota': 2} "
45347,dict2 = {}                  # create an empty dict to store the sorted values
45348,for key in sorted(dict1.keys()):
45349,"    if not key in dict2:    # Depending on the goal, this line may not be neccessary"
45350,        dict2[key] = dict1[key]
45351,"dict1 = {'renault': 3, 'ford':4, 'volvo': 1, 'toyota': 2} "
45352,dict2 = {}                  # create an empty dict to store the sorted     values
45353,for key in sorted(dict1.keys()):
45354,"    if not key in dict2:    # Depending on the goal, this line may not be  neccessary"
45355,        value = dict1[key]
45356,        dict2[key] = value
45357,">> a = {2:3, 1:89, 4:5, 3:0}"
45358,>> c = {i:a[i] for i in sorted(a.keys())}
45359,>> print(c)
45360,"{1: 89, 2: 3, 3: 0, 4: 5}"
45361,[Finished in 0.4s]
45362,collections.OrderedDict
45363,"ordered_dict = collections.OrderedDict([(k, d[k]) for k in sorted(d.keys())])"
45364,# create the dict
45365,"d = {k1:v1, k2:v2,...}"
45366,# iterate by keys in sorted order
45367,for k in sorted(d.keys()):
45368,    value = d[k]
45369,"    # do something with k, value like print"
45370,"    print k, value"
45371,values = [d[k] for k in sorted(d.keys())]
45372,"for k,value in sorted(d.items()):"
45373,dict
45374,OrderedDict
45375,from collections import OrderedDict
45376,
45377,def sort_dict(d):
45378,"    items = [[k, v] for k, v in sorted(d.items(), key=lambda x: x[0])]"
45379,    for item in items:
45380,"        if isinstance(item[1], dict):"
45381,            item[1] = sort_dict(item[1])
45382,    return OrderedDict(items)
45383,    #return dict(items)
45384,"a1 = {'a':1, 'b':13, 'd':4, 'c':2, 'e':30}"
45385,"a1_sorted_keys = sorted(a1, key=a1.get, reverse=True)"
45386,for r in a1_sorted_keys:
45387,"    print r, a1[r]"
45388,e 30
45389,b 13
45390,d 4
45391,c 2
45392,a 1
45393,sort(...)
45394,O(N*log(N))
45395,N
45396,sort(...)
45397,sort(...)
45398,from pprint import pprint
45399,"Dict={'B':1,'A':2,'C':3}"
45400,pprint(Dict)
45401,"{'A':2,'B':1,'C':3}"
45402,from operator import itemgetter
45403,# if you would like to play with multiple dictionaries then here you go:
45404,# Three dictionaries that are composed of first name and last name.
45405,user = [
45406,"    {'fname': 'Mo', 'lname': 'Mahjoub'},"
45407,"    {'fname': 'Abdo', 'lname': 'Al-hebashi'},"
45408,"    {'fname': 'Ali', 'lname': 'Muhammad'}"
45409,]
45410,#  This loop will sort by the first and the last names.
45411,# notice that in a dictionary order doesn't matter. So it could put the first name first or the last name first. 
45412,"for k in sorted (user, key=itemgetter ('fname', 'lname')):"
45413,    print (k)
45414,
45415,# This one will sort by the first name only.
45416,"for x in sorted (user, key=itemgetter ('fname')):"
45417,    print (x)
45418,"dictionary = {1:[2],2:[],5:[4,5],4:[5],3:[1]}"
45419,
45420,temp=sorted(dictionary)
45421,"sorted_dict = dict([(k,dictionary[k]) for i,k in enumerate(temp)])"
45422,
45423,sorted_dict:
45424,"         {1: [2], 2: [], 3: [1], 4: [5], 5: [4, 5]}"
45425,">>> setup_string = ""a = sorted(dict({2:3, 1:89, 4:5, 3:0}).items())"""
45426,">>> timeit.timeit(stmt=""[(k, val) for k, val in a]"", setup=setup_string, number=10000)"
45427,0.003599141953657181
45428,
45429,">>> setup_string = ""from collections import OrderedDict\n"""
45430,">>> setup_string += ""a = OrderedDict({1:89, 2:3, 3:0, 4:5})\n"""
45431,">>> setup_string += ""b = a.items()"""
45432,">>> timeit.timeit(stmt=""[(k, val) for k, val in b]"", setup=setup_string, number=10000)"
45433,0.003581275490432745 
45434,pandas
45435,">>> d={'B':1,'A':2,'C':3}"
45436,">>> df=pd.DataFrame(d,index=[0]).sort_index(axis=1)"
45437,   A  B  C
45438,0  2  1  3
45439,>>> df.to_dict('int')[0]
45440,"{'A': 2, 'B': 1, 'C': 3}"
45441,>>> 
45442,l = dict.keys()
45443,l2 = l
45444,l2.append(0)
45445,l3 = []
45446,"for repeater in range(0, len(l)):"
45447,"    smallnum = float(""inf"")"
45448,    for listitem in l2:
45449,        if listitem < smallnum:
45450,            smallnum = listitem
45451,    l2.remove(smallnum)
45452,    l3.append(smallnum)
45453,l3.remove(0)
45454,l = l3
45455,
45456,for listitem in l:
45457,    print(listitem)
45458,while running:
45459,    setup_background()
45460,    spriteimg = plumberright
45461,
45462,"    screen.blit(spriteimg,(x1, y1))"
45463,
45464,    for event in pygame.event.get():
45465,         if event.type == pygame.QUIT:
45466,             running = False
45467,         elif event.type == pygame.KEYDOWN:
45468,             if event.key == pygame.K_UP:
45469,                 x1 = x1 + 0
45470,                 y1 = y1 - 1
45471,             elif event.key == pygame.K_DOWN:
45472,                 x1 = x1 + 0
45473,                 y1 = y1 + 1
45474,             elif event.key == pygame.K_LEFT:
45475,                 x1 = x1 -1
45476,                 y1 = y1 + 0
45477,             elif event.key == pygame.K_RIGHT:
45478,                 x1 = x1 + 1
45479,                 y1 = y1 + 0
45480,
45481,    pygame.display.flip()
45482,    clock.tick(120)
45483,while running:
45484,    keys = pygame.key.get_pressed()  #checking pressed keys
45485,    if keys[pygame.K_UP]:
45486,        y1 -= 1
45487,    if keys[pygame.K_DOWN]:
45488,        y1 += 1
45489,KEYDOWN
45490,KEYUP
45491,pygame.key.get_pressed()
45492,pygame.key.get_pressed()
45493,True
45494,False
45495,pygame.key.get_pressed()
45496,while running:
45497,    for event in pygame.event.get():
45498,         if event.type == pygame.QUIT:
45499,             running = False
45500,
45501,    keys = pygame.key.get_pressed()
45502,    if keys[pygame.K_LEFT]:
45503,        x1 -= 1
45504,    if keys[pygame.K_RIGHT]:
45505,        x1 += 1
45506,    if keys[pygame.K_UP]:
45507,        y1 -= 1
45508,    if keys[pygame.K_DOWN]:
45509,        y1 += 1
45510,
45511,    setup_background()
45512,    spriteimg = plumberright
45513,"    screen.blit(spriteimg, (x1, y1))"
45514,
45515,    pygame.display.flip()
45516,    clock.tick(100)
45517,import pygame
45518,
45519,pygame.init()
45520,"window = pygame.display.set_mode((300, 300))"
45521,clock = pygame.time.Clock()
45522,
45523,"rect = pygame.Rect(0, 0, 20, 20)"
45524,rect.center = window.get_rect().center
45525,vel = 5
45526,
45527,run = True
45528,while run:
45529,    clock.tick(60)
45530,    for event in pygame.event.get():
45531,        if event.type == pygame.QUIT:
45532,            run = False
45533,        if event.type == pygame.KEYDOWN:
45534,            print(pygame.key.name(event.key))
45535,
45536,    keys = pygame.key.get_pressed()
45537,    
45538,    rect.x += (keys[pygame.K_RIGHT] - keys[pygame.K_LEFT]) * vel
45539,    rect.y += (keys[pygame.K_DOWN] - keys[pygame.K_UP]) * vel
45540,        
45541,    rect.centerx = rect.centerx % window.get_width()
45542,    rect.centery = rect.centery % window.get_height()
45543,
45544,    window.fill(0)
45545,"    pygame.draw.rect(window, (255, 0, 0), rect)"
45546,    pygame.display.flip()
45547,
45548,pygame.quit()
45549,exit()
45550,        if event.type == pygame.KEYDOWN:
45551,            if event.key == pygame.K_a:
45552,                playerX_change = -0.1
45553,            if event.key == pygame.K_d:
45554,                playerX_change = 0.1
45555,        if event.type == pygame.KEYUP:
45556,            if event.key == pygame.K_a or event.key == pygame.K_d:
45557,                playerX_change = 0
45558,
45559,    playerX += playerX_change
45560,"    player(playerX, playerY)"
45561,    pygame.display.update()
45562,pygame.key.get_pressed
45563,for event in pygame.event.get():
45564,    if event.type == pygame.KEYUP:
45565,        if event.key==K_DOWN:
45566,"            print(""down key is not pressed"")"
45567,    elif event.type == pygame.KEYDOWN:
45568,        if event.key==K_DOWN:
45569,            print('down key is not pressed now')
45570,    
45571,    pygame.event.clear() #optional only if your code requires 
45572,    #this will clear all event and the for loop will executed only once
45573,while running:
45574,spriteimg = plumberright
45575,"screen.blit(spriteimg,(x1, y1))"
45576,spriteimg_x = 0
45577,spriteimg_y = 0
45578,spriteimg_speed = 0.2
45579,dt = clock.tick(120)
45580,    if event.type == pygame.KEYDOWN:
45581,         if event.key == pygame.K_UP:
45582,             x1 = x1 + 0
45583,             spriteimg_y -= spriteimg_speed
45584,         elif event.key == pygame.K_DOWN:
45585,             x1 = x1 + 0
45586,             spriteimg_y += spriteimg_speed
45587,         elif event.key == pygame.K_LEFT:
45588,             spriteimg_x -= spriteimg_speed
45589,             y1 = y1 + 0
45590,         elif event.key == pygame.K_RIGHT:
45591,             spriteimg_y -= spriteimg_speed
45592,             y1 = y1 + 0
45593,    x1 += spriteimg_speed * dt
45594,    y1 += spriteimg_speed * dt
45595,keys=pygame.key.get_pressed()
45596,if keys[K_LEFT]:
45597,    location-=1
45598,    if location==-1:
45599,        location=0
45600,if keys[K_RIGHT]:
45601,    location+=1
45602,    if location==5:
45603,        location=4
45604,KEYDOWN
45605,get_pressed()
45606,KEYDOWN
45607,events = pygame.event.get()
45608,for event in events:
45609,    if event.type == pygame.KEYDOWN:
45610,        if event.key == pygame.K_LEFT:
45611,            location -= 1
45612,        if event.key == pygame.K_RIGHT:
45613,            location += 1
45614,move_ticker = 0
45615,keys=pygame.key.get_pressed()
45616,if keys[K_LEFT]:
45617,    if move_ticker == 0:
45618,        move_ticker = 10
45619,        location -= 1
45620,        if location == -1:
45621,            location = 0
45622,if keys[K_RIGHT]:
45623,    if move_ticker == 0:   
45624,        move_ticker = 10     
45625,        location+=1
45626,        if location == 5:
45627,            location = 4
45628,if move_ticker > 0:
45629,    move_ticker -= 1
45630,pygame.key.get_pressed()
45631,1
45632,0
45633,pygame.key.get_pressed()
45634,while True:
45635,
45636,    keys = pygame.key.get_pressed()
45637,    if keys[pygame.K_LEFT]:
45638,        x -= speed
45639,    if keys[pygame.K_RIGHT]:
45640,        x += speed
45641,    if keys[pygame.K_UP]:
45642,        y -= speed
45643,    if keys[pygame.K_DOWN]:
45644,        y += speed
45645,while True:
45646,
45647,    keys = pygame.key.get_pressed()
45648,    x += (keys[pygame.K_RIGHT] - keys[pygame.K_LEFT]) * speed
45649,    y += (keys[pygame.K_DOWN] - keys[pygame.K_UP]) * speed
45650,KEYDOWN
45651,KEYUP
45652,while True:
45653,
45654,    for event in pygame.event.get():
45655,        if event.type == pygame.KEYDOWN:
45656,            if event.key == pygame.K_LEFT:
45657,                x -= speed
45658,            if event.key == pygame.K_RIGHT:
45659,                x += speed
45660,            if event.key == pygame.K_UP:
45661,                y -= speed
45662,            if event.key == pygame.K_DOWN:
45663,                y += speed
45664,import pygame
45665,
45666,pygame.init()
45667,"window = pygame.display.set_mode((300, 300))"
45668,clock = pygame.time.Clock()
45669,
45670,"rect = pygame.Rect(0, 0, 20, 20)"
45671,rect.center = window.get_rect().center
45672,vel = 5
45673,
45674,run = True
45675,while run:
45676,    clock.tick(60)
45677,    for event in pygame.event.get():
45678,        if event.type == pygame.QUIT:
45679,            run = False
45680,        if event.type == pygame.KEYDOWN:
45681,            print(pygame.key.name(event.key))
45682,
45683,    keys = pygame.key.get_pressed()
45684,    
45685,    rect.x += (keys[pygame.K_RIGHT] - keys[pygame.K_LEFT]) * vel
45686,    rect.y += (keys[pygame.K_DOWN] - keys[pygame.K_UP]) * vel
45687,        
45688,    rect.centerx = rect.centerx % window.get_width()
45689,    rect.centery = rect.centery % window.get_height()
45690,
45691,    window.fill(0)
45692,"    pygame.draw.rect(window, (255, 0, 0), rect)"
45693,    pygame.display.flip()
45694,
45695,pygame.quit()
45696,exit()
45697,import pygame
45698,pygame.init()
45699,
45700,"window = pygame.display.set_mode((500, 200))"
45701,clock = pygame.time.Clock()
45702,
45703,"tank_surf = pygame.Surface((60, 40), pygame.SRCALPHA)"
45704,"pygame.draw.rect(tank_surf, (0, 96, 0), (0, 00, 50, 40))"
45705,"pygame.draw.rect(tank_surf, (0, 128, 0), (10, 10, 30, 20))"
45706,"pygame.draw.rect(tank_surf, (32, 32, 96), (20, 16, 40, 8))"
45707,"tank_rect = tank_surf.get_rect(midleft = (20, window.get_height() // 2))"
45708,
45709,"bullet_surf = pygame.Surface((10, 10), pygame.SRCALPHA)"
45710,"pygame.draw.circle(bullet_surf, (64, 64, 62), bullet_surf.get_rect().center, bullet_surf.get_width() // 2)"
45711,bullet_list = []
45712,
45713,run = True
45714,while run:
45715,    clock.tick(60)
45716,    current_time = pygame.time.get_ticks()
45717,    for event in pygame.event.get():
45718,        if event.type == pygame.QUIT:
45719,            run = False
45720,
45721,        if event.type == pygame.KEYDOWN:
45722,"            bullet_list.insert(0, tank_rect.midright)"
45723,
45724,"    for i, bullet_pos in enumerate(bullet_list):"
45725,"        bullet_list[i] = bullet_pos[0] + 5, bullet_pos[1]"
45726,        if bullet_surf.get_rect(center = bullet_pos).left > window.get_width():
45727,            del bullet_list[i:]
45728,            break
45729,
45730,"    window.fill((224, 192, 160))"
45731,"    window.blit(tank_surf, tank_rect)"
45732,    for bullet_pos in bullet_list:
45733,"        window.blit(bullet_surf, bullet_surf.get_rect(center = bullet_pos))"
45734,    pygame.display.flip()
45735,
45736,pygame.quit()
45737,exit()
45738,import pygame
45739,pygame.init()
45740,pygame.display.set_mode()
45741,while True:
45742,    for event in pygame.event.get():
45743,        if event.type == pygame.QUIT:
45744,            pygame.quit(); #sys.exit() if sys is imported
45745,        if event.type == pygame.KEYDOWN:
45746,            if event.key == pygame.K_0:
45747,"                print(""Hey, you pressed the key, '0'!"")"
45748,            if event.key == pygame.K_1:
45749,"                print(""Doing whatever"")"
45750,tab
45751,pygame.time.delay(delayTime)
45752,delayTime
45753,clock = pygame.time.Clock()
45754,flag = true
45755,while flag :
45756,    clock.tick(60)
45757,tick()
45758,tick(20)
45759,keys=pygame.key.get_pressed()
45760,if keys[K_LEFT]:
45761,    if count == 10:
45762,        location-=1
45763,        count=0
45764,    else:
45765,        count +=1
45766,    if location==-1:
45767,        location=0
45768,if keys[K_RIGHT]:
45769,    if count == 10:
45770,        location+=1
45771,        count=0
45772,    else:
45773,        count +=1
45774,    if location==5:
45775,        location=4
45776,location-=1
45777,if location==-1:
45778,    location=0
45779,location -= 1
45780,"location = max(0, location)"
45781,clock.tick(10)
45782,keys=pygame.key.get_pressed()
45783,if keys[K_LEFT]:
45784,    location -= 0.1 #or 0.01
45785,    if location==-1:
45786,    location=0
45787,if keys[K_RIGHT]:
45788,    location += 0.1 #or 0.01
45789,    if location==5:
45790,        location=4
45791,pygame.clock.tick(10)
45792,append()
45793,extend()
45794,append
45795,">>> x = [1, 2, 3]"
45796,">>> x.append([4, 5])"
45797,>>> print(x)
45798,"[1, 2, 3, [4, 5]]"
45799,extend
45800,">>> x = [1, 2, 3]"
45801,">>> x.extend([4, 5])"
45802,>>> print(x)
45803,"[1, 2, 3, 4, 5]"
45804,extend
45805,"x = x + [4, 5]"
45806,"x + [4, 5]"
45807,x.extend()
45808,"x += [4,5]"
45809,append
45810,extend
45811,append
45812,extend
45813,">>> xs = ['A', 'B']"
45814,>>> xs
45815,"['A', 'B']"
45816,
45817,">>> xs.append(""D"")"
45818,>>> xs
45819,"['A', 'B', 'D']"
45820,
45821,">>> xs.append([""E"", ""F""])"
45822,>>> xs
45823,"['A', 'B', 'D', ['E', 'F']]"
45824,
45825,">>> xs.insert(2, ""C"")"
45826,>>> xs
45827,"['A', 'B', 'C', 'D', ['E', 'F']]"
45828,
45829,">>> xs.extend([""G"", ""H""])"
45830,>>> xs
45831,"['A', 'B', 'C', 'D', ['E', 'F'], 'G', 'H']"
45832,append
45833,extend
45834,append
45835,list.append
45836,my_list.append(object) 
45837,my_list
45838,>>> my_list
45839,"['foo', 'bar']"
45840,>>> my_list.append('baz')
45841,>>> my_list
45842,"['foo', 'bar', 'baz']"
45843,">>> another_list = [1, 2, 3]"
45844,>>> my_list.append(another_list)
45845,>>> my_list
45846,"['foo', 'bar', 'baz', [1, 2, 3]]"
45847,                     #^^^^^^^^^--- single item at the end of the list.
45848,extend
45849,list.extend
45850,my_list.extend(iterable)
45851,>>> my_list
45852,"['foo', 'bar']"
45853,">>> another_list = [1, 2, 3]"
45854,>>> my_list.extend(another_list)
45855,>>> my_list
45856,"['foo', 'bar', 1, 2, 3]"
45857,>>> my_list.extend('baz')
45858,>>> my_list
45859,"['foo', 'bar', 1, 2, 3, 'b', 'a', 'z']"
45860,__add__
45861,+
45862,__iadd__
45863,+=
45864,+
45865,+=
45866,list
45867,my_list + another_list
45868,my_list += another_list
45869,my_list = my_list + another_list
45870,+=
45871,append
45872,"    /* This over-allocates proportional to the list size, making room"
45873,"     * for additional growth.  The over-allocation is mild, but is"
45874,     * enough to give linear-time amortized behavior over a long
45875,     * sequence of appends() in the presence of a poorly-performing
45876,     * system realloc().
45877,"def append(alist, iterable):"
45878,    for item in iterable:
45879,        alist.append(item)
45880,        
45881,"def extend(alist, iterable):"
45882,    alist.extend(iterable)
45883,import timeit
45884,
45885,">>> min(timeit.repeat(lambda: append([], ""abcdefghijklmnopqrstuvwxyz"")))"
45886,2.867846965789795
45887,">>> min(timeit.repeat(lambda: extend([], ""abcdefghijklmnopqrstuvwxyz"")))"
45888,0.8060121536254883
45889,extend
45890,append
45891,"def append_one(a_list, element):"
45892,    a_list.append(element)
45893,
45894,"def extend_one(a_list, element):"
45895,"    """"""creating a new list is semantically the most direct"
45896,"    way to create an iterable to give to extend"""""""
45897,    a_list.extend([element])
45898,
45899,import timeit
45900,">>> min(timeit.repeat(lambda: append_one([], 0)))"
45901,0.2082819009956438
45902,">>> min(timeit.repeat(lambda: extend_one([], 0)))"
45903,0.2397019260097295
45904,extend
45905,extend
45906,append
45907,append
45908,ex1 = 0
45909,ex2 = [0]
45910,l1 += l2
45911,l1.extend(l2)
45912,l1 += l2
45913,l1.extend(l2)
45914,list_extend
45915,listobject.c
45916,+=
45917,l1
45918,list
45919,l1
45920,"t = ([],)"
45921,t[0] += lst
45922,t[0].extend(lst)
45923,l1 += l2
45924,l1.extend(l2)
45925,+=
45926,extend
45927,+=
45928,l1
45929,extend
45930,list
45931,self.l1 += l2
45932,self.l1.extend(l2)
45933,self.l1 = self.l1.__iadd__(l2)
45934,STORE_ATTR
45935,self.l1.extend(l2)
45936,+=
45937,STORE_FAST
45938,list
45939,+=
45940,extend
45941,l1
45942,STORE_GLOBAL
45943,l1
45944,local.l1
45945,STORE_ATTR
45946,+=
45947,extend
45948,extend
45949,append
45950,extend
45951,">>> a = [1, 2, 3]"
45952,">>> a.append([4, 5, 6])"
45953,>>> a
45954,"[1, 2, 3, [4, 5, 6]]"
45955,">>> a = [1,2]"
45956,>>> a.append(3)
45957,>>> a
45958,"[1,2,3]"
45959,">>> a.append([4,5])"
45960,>>> a
45961,">>> [1,2,3,[4,5]]"
45962,">>> a = [1,2]"
45963,>>> a.extend([3])
45964,>>> a
45965,"[1,2,3]"
45966,">>> a.extend([4,5,6])"
45967,>>> a
45968,"[1,2,3,4,5,6]"
45969,">>> x = [1,2]"
45970,>>> x.append(3)
45971,>>> x
45972,"[1,2,3]"
45973,">>> x = [1,2]"
45974,>>> x.extend([3])
45975,>>> x
45976,"[1,2,3]"
45977,">>> x = [1,2]"
45978,">>> x.append([3,4])"
45979,>>> x
45980,"[1,2,[3,4]]"
45981,">>> z = [1,2] "
45982,">>> z.extend([3,4])"
45983,>>> z
45984,"[1,2,3,4]"
45985,for item in iterator:
45986,    a_list.append(item)
45987,a_list.extend(iterator)
45988,extend()
45989,append()
45990,extend()
45991,__len__()
45992,append()
45993,"x = [1, 2, 3]"
45994,"x.append([4, 5])"
45995,x.append('abc')
45996,print(x)
45997,# gives you
45998,"[1, 2, 3, [4, 5], 'abc']"
45999,extend()
46000,"x = [1, 2, 3]"
46001,"x.extend([4, 5])"
46002,x.extend('abc')
46003,print(x)
46004,# gives you
46005,"[1, 2, 3, 4, 5, 'a', 'b', 'c']"
46006,extend
46007,['abc']
46008,x.extend('abc')
46009,x.extend(6)
46010,x.extend([6])
46011,l1=range(10)
46012,
46013,l1+[11]
46014,
46015,"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11]"
46016,
46017,"l2=range(10,1,-1)"
46018,
46019,l1+l2
46020,
46021,"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
46022,+=
46023,append
46024,extend
46025,+=
46026,append
46027,extend
46028,list.extend([item])
46029,list.append(item)
46030,append(object)
46031,x = [20]
46032,# List passed to the append(object) method is treated as a single object.
46033,"x.append([21, 22, 23])"
46034,# Hence the resultant list length will be 2
46035,print(x)
46036,"--> [20, [21, 22, 23]]"
46037,extend(list)
46038,x = [20]
46039,# The parameter passed to extend(list) method is treated as a list.
46040,# Eventually it is two lists being concatenated.
46041,"x.extend([21, 22, 23])"
46042,# Here the resultant list's length is 4
46043,print(x)
46044,"--> [20, 21, 22, 23]"
46045,append
46046,extend
46047,+
46048,">>> x = [1,2,3]"
46049,>>> x
46050,"[1, 2, 3]"
46051,">>> x = x + [4,5,6] # Extend"
46052,>>> x
46053,"[1, 2, 3, 4, 5, 6]"
46054,">>> x = x + [[7,8]] # Append"
46055,>>> x
46056,"[1, 2, 3, 4, 5, 6, [7, 8]]"
46057,extend()
46058,"list2d = [[1,2,3],[4,5,6], [7], [8,9]]"
46059,>>>
46060,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
46061,itertools.chain.from_iterable()
46062,def from_iterable(iterables):
46063,"    # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F"
46064,    for it in iterables:
46065,        for element in it:
46066,            yield element
46067,import itertools
46068,"list2d = [[1,2,3],[4,5,6], [7], [8,9]]"
46069,merged = list(itertools.chain.from_iterable(list2d))
46070,extend()
46071,merged = []
46072,merged.extend(itertools.chain.from_iterable(list2d))
46073,print(merged)
46074,>>>
46075,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
46076,">> a = [1, 2, 3, 4]"
46077,>> a.append(5)
46078,>> print(a)
46079,">> a = [1, 2, 3, 4, 5]"
46080,">> a = [1, 2, 3, 4]"
46081,">> a.append([5, 6])"
46082,>> print(a)
46083,">> a = [1, 2, 3, 4, [5, 6]]"
46084,">> a = [1, 2, 3, 4]"
46085,">> b = [5, 6, 7, 8]"
46086,>> a.extend(b)
46087,>> print(a)
46088,">> a = [1, 2, 3, 4, 5, 6, 7, 8]"
46089,">> a = [1, 2, 3, 4]"
46090,">> a.extend([5, 6])"
46091,>> print(a)
46092,">> a = [1, 2, 3, 4, 5, 6]"
46093,extend
46094,"list1 = [123, 456, 678]"
46095,"list2 = [111, 222]"
46096,append
46097,"result = [123, 456, 678, [111, 222]]"
46098,extend
46099,"result = [123, 456, 678, 111, 222]"
46100,append
46101,extend
46102,append
46103,extend
46104,append
46105,extend
46106,list(iterable)
46107,append
46108,extend
46109,None
46110,"lis = [1, 2, 3]"
46111,
46112,# 'extend' is equivalent to this
46113,lis = lis + list(iterable)
46114,
46115,# 'append' simply appends its argument as the last element to the list
46116,# as long as the argument is a valid Python object
46117,list.append(object)
46118,Info
46119,extend
46120,for
46121,Info
46122,extend
46123,append
46124,extend
46125,"l1 = ['a', 'b', 'c']"
46126,"l2 = ['d', 'e', 'f']"
46127,l1.append(l2)
46128,l1
46129,"['a', 'b', 'c', ['d', 'e', 'f']]"
46130,l1
46131,"# Reset l1 = ['a', 'b', 'c']"
46132,l1.extend(l2)
46133,l1
46134,"['a', 'b', 'c', 'd', 'e', 'f']"
46135,"list_methods = {'Add': {'extend', 'append', 'insert'},"
46136,"                'Remove': {'pop', 'remove', 'clear'}"
46137,"                'Sort': {'reverse', 'sort'},"
46138,"                'Search': {'count', 'index'},"
46139,"                'Copy': {'copy'},"
46140,                }
46141,extend(L)
46142,L
46143,>>> a
46144,"[1, 2, 3]"
46145,a.extend([4])  #is eqivalent of a[len(a):] = [4]
46146,>>> a
46147,"[1, 2, 3, 4]"
46148,"a = [1, 2, 3]"
46149,>>> a
46150,"[1, 2, 3]"
46151,>>> a[len(a):] = [4]
46152,>>> a
46153,"[1, 2, 3, 4]"
46154,append
46155,extend
46156,str
46157,append
46158,extend
46159,append
46160,extend
46161,"def append_o(a_list, element):"
46162,    a_list.append(element)
46163,"    print('append:', end = ' ')"
46164,    for item in a_list:
46165,"        print(item, end = ',')"
46166,    print()
46167,
46168,"def extend_o(a_list, element):"
46169,    a_list.extend(element)
46170,"    print('extend:', end = ' ')"
46171,    for item in a_list:
46172,"        print(item, end = ',')"
46173,    print()
46174,"append_o(['ab'],'cd')"
46175,
46176,"extend_o(['ab'],'cd')"
46177,"append_o(['ab'],['cd', 'ef'])"
46178,"extend_o(['ab'],['cd', 'ef'])"
46179,"append_o(['ab'],['cd'])"
46180,"extend_o(['ab'],['cd'])"
46181,"append: ab,cd,"
46182,"extend: ab,c,d,"
46183,"append: ab,['cd', 'ef'],"
46184,"extend: ab,cd,ef,"
46185,"append: ab,['cd'],"
46186,"extend: ab,cd,"
46187,"my_list = [1,2,3,4]"
46188,my_list.append(5)
46189,"Example: my_list = [1,2,3,4]"
46190,"my_list[4, 'a']"
46191,my_list
46192,"[1,2,3,4,'a']"
46193,"a = [1,2]"
46194,b = [3]
46195,a.append(b)
46196,print (a)
46197,"[1,2,[3]]"
46198,"a = [1,2]"
46199,b = [3]
46200,a.extend(b)
46201,print (a)
46202,"[1,2,3]"
46203,a = [1]
46204,b = [2]
46205,c = [3]
46206,a.extend(b+c)
46207,print (a)
46208,"[1,2,3]"
46209,"keys = ['name', 'age', 'food']"
46210,"values = ['Monty', 42, 'spam']"
46211,"{'name': 'Monty', 'age': 42, 'food': 'spam'}"
46212,"keys = ['a', 'b', 'c']"
46213,"values = [1, 2, 3]"
46214,"dictionary = dict(zip(keys, values))"
46215,"print(dictionary) # {'a': 1, 'b': 2, 'c': 3}"
46216,dict
46217,zip
46218,"dictionary = {zip(keys, values)}"
46219,dict(...)
46220,{thing}
46221,set()
46222,{*iterable}
46223,set
46224,{k:v}
46225,{**mapping}
46226,dict
46227,{}
46228,type({})
46229,dict
46230,type({thing})
46231,set
46232,"{k:v for k, v in zip(keys, values)}"
46233,"{[thing1, thing2, … thingN]}"
46234,N != 0
46235,N == 0
46236,dict
46237,set()
46238,dict
46239,set
46240,"keys = ('name', 'age', 'food')"
46241,"values = ('Monty', 42, 'spam')"
46242,"dict = {'name' : 'Monty', 'age' : 42, 'food' : 'spam'}"
46243,dict
46244,zip
46245,"new_dict = dict(zip(keys, values))"
46246,"dict(zip(keys, values))"
46247,dict
46248,zip
46249,"new_dict = {k: v for k, v in zip(keys, values)}"
46250,zip
46251,izip
46252,from itertools import izip as zip
46253,"new_dict = {k: v for k, v in zip(keys, values)}"
46254,izip
46255,itertools
46256,zip
46257,izip
46258,from itertools import izip
46259,"new_dict = dict(izip(keys, values))"
46260,>>> new_dict
46261,"{'age': 42, 'name': 'Monty', 'food': 'spam'}"
46262,dict
46263,>>> help(dict)
46264,
46265,class dict(object)
46266, |  dict() -> new empty dictionary
46267, |  dict(mapping) -> new dictionary initialized from a mapping object's
46268," |      (key, value) pairs"
46269, |  dict(iterable) -> new dictionary initialized as if via:
46270, |      d = {}
46271," |      for k, v in iterable:"
46272, |          d[k] = v
46273, |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
46274," |      in the keyword argument list.  For example:  dict(one=1, two=2)"
46275,">>> zip(keys, values)"
46276,"[('name', 'Monty'), ('age', 42), ('food', 'spam')]"
46277,">>> list(zip(keys, values))"
46278,"[('name', 'Monty'), ('age', 42), ('food', 'spam')]"
46279,zip
46280,">>> zip(keys, values)"
46281,<zip object at 0x7f0e2ad029c8>
46282,zip
46283,"generator_expression = ((k, v) for k, v in zip(keys, values))"
46284,dict(generator_expression)
46285,"dict((k, v) for k, v in zip(keys, values))"
46286,"dict([(k, v) for k, v in zip(keys, values)])"
46287,">>> min(timeit.repeat(lambda: dict(zip(keys, values))))"
46288,0.6695233230129816
46289,">>> min(timeit.repeat(lambda: {k: v for k, v in zip(keys, values)}))"
46290,0.6941362579818815
46291,>>> min(timeit.repeat(lambda: {keys[i]: values[i] for i in range(len(keys))}))
46292,0.8782548159942962
46293,>>> 
46294,">>> min(timeit.repeat(lambda: dict([(k, v) for k, v in zip(keys, values)])))"
46295,1.077607496001292
46296,">>> min(timeit.repeat(lambda: dict((k, v) for k, v in zip(keys, values))))"
46297,1.1840861019445583
46298,"dict(zip(keys, values))"
46299,min
46300,mean
46301,max
46302,min
46303,mean
46304,max
46305,dict
46306,dict(zip(...
46307,mean
46308,max
46309,import numpy
46310,import timeit
46311,l1 = list(numpy.random.random(100))
46312,l2 = list(numpy.random.random(100))
46313,dict(zip(...
46314,">>> min(timeit.repeat(lambda: {k: v for k, v in zip(l1, l2)}))"
46315,9.698965263989521
46316,">>> min(timeit.repeat(lambda: dict(zip(l1, l2))))"
46317,7.9965161079890095
46318,"dict(zip(headList, textList))"
46319,"{k: v for k, v in zip(headList, textList)}"
46320,"dict(zip(keys, values))"
46321,from future_builtins import zip
46322,from itertools import izip as zip
46323,zip
46324,zip
46325,future_builtins.zip
46326,itertools.izip
46327,>>> import itertools
46328,">>> keys = ('name', 'age', 'food')"
46329,">>> values = ('Monty', 42, 'spam')"
46330,">>> adict = dict(itertools.izip(keys,values))"
46331,>>> adict
46332,"{'food': 'spam', 'age': 42, 'name': 'Monty'}"
46333,zip
46334,zip
46335,six
46336,zip
46337,itertools.izip
46338,"keys = ('name', 'age', 'food')"
46339,"values = ('Monty', 42, 'spam')"
46340,"out = dict(zip(keys, values))"
46341,"{'food': 'spam', 'age': 42, 'name': 'Monty'}"
46342,">>> keys = ('name', 'age', 'food')"
46343,">>> values = ('Monty', 42, 'spam')"
46344,">>> {k: v for k, v in zip(keys, values)}"
46345,"{'food': 'spam', 'age': 42, 'name': 'Monty'}"
46346,"keys = ('name', 'age', 'food')"
46347,"values = ('Monty', 42, 'spam')    "
46348,dict = {keys[i]: values[i] for i in range(len(keys))}
46349,dict
46350,">>> adict = dict((str(k), v) for k, v in zip(['a', 1, 'b'], [2, 'c', 3])) "
46351,"keys = ('name', 'age', 'food')"
46352,"values = ('Monty', 42, 'spam')"
46353,
46354,"dic = {k:v for k,v in zip(keys, values)}"
46355,
46356,print(dic)
46357,>>> print {i : chr(65+i) for i in range(4)}
46358,"    {0 : 'A', 1 : 'B', 2 : 'C', 3 : 'D'}"
46359,zip
46360,"List1 = ['This', 'is', 'a', 'list']"
46361,"List2 = ['Put', 'this', 'into', 'dictionary']"
46362,d = {List1[n]: List2[n] for n in range(len(List1))}
46363,List1
46364,List2
46365,for n in range(len(List1))
46366,"dict(zip(['name', 'age', 'food'], ['Monty', 42, 'spam']))"
46367,"In [92]: keys = ('name', 'age', 'food')"
46368,"...: values = ('Monty', 42, 'spam')"
46369,...: 
46370,
46371,"In [93]: dt = dict(zip(keys, values))"
46372,In [94]: dt
46373,"Out[94]: {'age': 42, 'food': 'spam', 'name': 'Monty'}"
46374,"    lst = [('name', 'Monty'), ('age', 42), ('food', 'spam')]"
46375,"    keys, values = zip(*lst)"
46376,    In [101]: keys
46377,"    Out[101]: ('name', 'age', 'food')"
46378,    In [102]: values
46379,"    Out[102]: ('Monty', 42, 'spam')"
46380,"list1 = [""Name"", ""Surname"", ""Age""]"
46381,"list2 = [[""Cyd"", ""JEDD"", ""JESS""], [""DEY"", ""AUDIJE"", ""PONGARON""], [21, 32, 47]]"
46382,"dic = dict(zip(list1, list2))"
46383,print(dic)
46384,"{'Name': ['Cyd', 'JEDD', 'JESS'], 'Surname': ['DEY', 'AUDIJE', 'PONGARON'], 'Age': [21, 32, 47]}"
46385,import timeit
46386,def dictionary_creation(n_nodes):
46387,    dummy_dict = dict()
46388,    for node in range(n_nodes):
46389,        dummy_dict[node] = []
46390,    return dummy_dict
46391,
46392,
46393,def dictionary_creation_1(n_nodes):
46394,    keys = list(range(n_nodes))
46395,    values = [[] for i in range(n_nodes)]
46396,"    graph = dict(zip(keys, values))"
46397,    return graph
46398,
46399,
46400,"def wrapper(func, *args, **kwargs):"
46401,    def wrapped():
46402,"        return func(*args, **kwargs)"
46403,    return wrapped
46404,
46405,"iteration = wrapper(dictionary_creation, n_nodes)"
46406,"shorthand = wrapper(dictionary_creation_1, n_nodes)"
46407,
46408,"for trail in range(1, 8):"
46409,"    print(f'Itertion: {timeit.timeit(iteration, number=trails)}\nShorthand: {timeit.timeit(shorthand, number=trails)}')"
46410,"keys = ['name', 'age', 'food']"
46411,"values = ['Monty', 42, 'spam']"
46412,dic = {}
46413,c = 0
46414,for i in keys:
46415,    dic[i] = values[c]
46416,    c += 1
46417,
46418,print(dic)
46419,"{'name': 'Monty', 'age': 42, 'food': 'spam'}"
46420,"keys = ['name', 'age', 'food']"
46421,"values = ['Monty', 42, 'spam'] "
46422,
46423,dict = {}
46424,
46425,for i in range(len(keys)):
46426,    dict[keys[i]] = values[i]
46427,    
46428,print(dict)
46429,
46430,"{'name': 'Monty', 'age': 42, 'food': 'spam'}"
46431,"dict = {item : values[index] for index, item in enumerate(keys)}"
46432,dict = {}
46433,"for index, item in enumerate(keys):"
46434,    dict[item] = values[index]
46435,"def as_dict_list(data: list, columns: list):"
46436,"    return [dict((zip(columns, row))) for row in data]"
46437,"l1 = [1,2,3,4,5]"
46438,"l2 = ['a','b','c','d','e']"
46439,d1 = {}
46440,for l1_ in l1:
46441,    for l2_ in l2:
46442,        d1[l1_] = l2_
46443,        l2.remove(l2_)
46444,        break  
46445,
46446,print (d1)
46447,
46448,
46449,"{1: 'd', 2: 'b', 3: 'e', 4: 'a', 5: 'c'}"
46450,"dict(zip(key, value))"
46451,"y = [1,2,3,4]"
46452,"x = [""a"",""b"",""c"",""d""]"
46453,
46454,# This below is a brute force method
46455,obj = {}
46456,for i in range(len(y)):
46457,    obj[y[i]] = x[i]
46458,print(obj)
46459,
46460,# Recursive approach 
46461,obj = {}
46462,"def map_two_lists(a,b,j=0):"
46463,    if j < len(a):
46464,        obj[b[j]] = a[j]
46465,        j +=1
46466,"        map_two_lists(a, b, j)"
46467,        return obj
46468,      
46469,
46470,
46471,"res = map_two_lists(x,y)"
46472,print(res)
46473,"{1: 'a', 2: 'b', 3: 'c', 4: 'd'}  "
46474,sys.stdout
46475,-u
46476,sys.stdout
46477,PYTHONUNBUFFERED
46478,"sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)"
46479,sys
46480,sys.stdout
46481,-u
46482,__main__.py
46483,python -u
46484,#!/usr/bin/env python -u
46485,class Unbuffered(object):
46486,"   def __init__(self, stream):"
46487,       self.stream = stream
46488,"   def write(self, data):"
46489,       self.stream.write(data)
46490,       self.stream.flush()
46491,"   def writelines(self, datas):"
46492,       self.stream.writelines(datas)
46493,       self.stream.flush()
46494,"   def __getattr__(self, attr):"
46495,"       return getattr(self.stream, attr)"
46496,
46497,import sys
46498,sys.stdout = Unbuffered(sys.stdout)
46499,print 'Hello'
46500,#!/usr/bin/env python -u
46501,__getattr__
46502,iter()
46503,while
46504,"for line in iter(pipe.readline, ''):"
46505,for line in pipe:
46506,"print('Hello World!', flush=True)"
46507,# reopen stdout file descriptor with write mode
46508,# and 0 as the buffer size (unbuffered)
46509,"import io, os, sys"
46510,try:
46511,"    # Python 3, open as binary, then wrap in a TextIOWrapper with write-through."
46512,"    sys.stdout = io.TextIOWrapper(open(sys.stdout.fileno(), 'wb', 0), write_through=True)"
46513,"    # If flushing on newlines is sufficient, as of 3.7 you can instead just call:"
46514,    # sys.stdout.reconfigure(line_buffering=True)
46515,except TypeError:
46516,    # Python 2
46517,"    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)"
46518,flush=True
46519,print()
46520,"os.fdopen(sys.stdout.fileno(), 'wb', 0)"
46521,TextIO
46522,TextIOWrapper
46523,write_through
46524,line_buffering=True
46525,sys.stdout.reconfigure(line_buffering=True)
46526,flush
46527,import functools
46528,"print = functools.partial(print, flush=True)"
46529,flush=False
46530,print
46531,stdout
46532,stderr
46533,sys.stdout
46534,flush
46535,print
46536,flush
46537,def disable_stdout_buffering():
46538,    # Appending to gc.garbage is a way to stop an object from being
46539,"    # destroyed.  If the old sys.stdout is ever collected, it will"
46540,"    # close() stdout, which is not good."
46541,    gc.garbage.append(sys.stdout)
46542,"    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)"
46543,
46544,# Then this will give output in the correct order:
46545,disable_stdout_buffering()
46546,"print ""hello"""
46547,"subprocess.call([""echo"", ""bye""])"
46548,Traceback (most recent call last):
46549,"  File ""test/buffering.py"", line 17, in <module>"
46550,"    print ""hello"""
46551,IOError: [Errno 9] Bad file descriptor
46552,close failed: [Errno 9] Bad file descriptor
46553,def disable_stdout_buffering():
46554,    fileno = sys.stdout.fileno()
46555,    temp_fd = os.dup(fileno)
46556,    sys.stdout.close()
46557,"    os.dup2(temp_fd, fileno)"
46558,    os.close(temp_fd)
46559,"    sys.stdout = os.fdopen(fileno, ""w"", 0)"
46560,stdout
46561,sys.__stdout__
46562,ValueError: can't have unbuffered text I/O
46563,print()
46564,import os
46565,import sys
46566,buf_arg = 0
46567,if sys.version_info[0] == 3:
46568,    os.environ['PYTHONUNBUFFERED'] = '1'
46569,    buf_arg = 1
46570,"sys.stdout = os.fdopen(sys.stdout.fileno(), 'a+', buf_arg)"
46571,"sys.stderr = os.fdopen(sys.stderr.fileno(), 'a+', buf_arg)"
46572,OSError: [Errno 29] Illegal seek
46573,"sys.stdout = os.fdopen(sys.stdout.fileno(), 'a+', buf_arg)"
46574,_orig_print = print
46575,
46576,"def print(*args, **kwargs):"
46577,"    _orig_print(*args, flush=True, **kwargs)"
46578,functools.partial
46579,"print = functools.partial(print, flush=True)"
46580,functools.partial
46581,"print = functools.partial(print, flush=True)"
46582,"import builtins; builtins.print = partial(print, flush=True)"
46583,stdbuf -oL python <script>
46584,-oL
46585,end=''
46586,"print(..., end='', flush=True)"
46587,flush
46588,flush
46589,import sys 
46590,"myFile= open( ""a.log"", ""w"", 0 ) "
46591,sys.stdout= myFile
46592,buffering=1
46593,0
46594,"fl = fcntl.fcntl(fd.fileno(), fcntl.F_GETFL)"
46595,fl |= os.O_SYNC # or os.O_DSYNC (if you don't care the file timestamp updates)
46596,"fcntl.fcntl(fd.fileno(), fcntl.F_SETFL, fl)"
46597,write
46598,sys.stdout
46599,flush
46600,"def write_flush(args, w=stdout.write):"
46601,    w(args)
46602,    stdout.flush()
46603,w
46604,write
46605,write_flush
46606,write
46607,stdout.write = write_flush
46608,stdout
46609,from sys import stdout
46610,sys.stderr
46611,sys.stdout
46612,sys.stdout.flush()
46613,import sys; sys.stdout = sys.stderr
46614,"print ""Hello World!"""
46615,print
46616,"print >>sys.stderr, ""Hello World!"""
46617,sys.stdout = sys.__stdout__
46618,def DisOutBuffering():
46619,    if sys.stdout.name == '<stdout>':
46620,"        sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)"
46621,
46622,    if sys.stderr.name == '<stderr>':
46623,"        sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 0)"
46624,sys.stdout is sys.__stdout__
46625,\n'
46626,flush()
46627,for line in sys.stdin:
46628,flush()
46629,while True:
46630,   line=sys.stdin.readline()
46631,for line in sys.stdin
46632,"for line in iter(sys.stdin.readline, """")"
46633,for line in sys.stdin
46634,pandas dataframe
46635,a
46636,b
46637,In [7]: a
46638,Out[7]: 
46639,    var1  var2
46640,"0  a,b,c     1"
46641,"1  d,e,f     2"
46642,
46643,In [8]: b
46644,Out[8]: 
46645,  var1  var2
46646,0    a     1
46647,1    b     1
46648,2    c     1
46649,3    d     2
46650,4    e     2
46651,5    f     2
46652,.apply
46653,.transform
46654,from pandas import DataFrame
46655,import numpy as np
46656,"a = DataFrame([{'var1': 'a,b,c', 'var2': 1},"
46657,"               {'var1': 'd,e,f', 'var2': 2}])"
46658,"b = DataFrame([{'var1': 'a', 'var2': 1},"
46659,"               {'var1': 'b', 'var2': 1},"
46660,"               {'var1': 'c', 'var2': 1},"
46661,"               {'var1': 'd', 'var2': 2},"
46662,"               {'var1': 'e', 'var2': 2},"
46663,"               {'var1': 'f', 'var2': 2}])"
46664,def fun(row):
46665,    letters = row['var1']
46666,"    letters = letters.split(',')"
46667,    out = np.array([row] * len(letters))
46668,    out['var1'] = letters
46669,a['idx'] = range(a.shape[0])
46670,z = a.groupby('idx')
46671,z.transform(fun)
46672,Series.explode()
46673,DataFrame.explode()
46674,"In [1]: df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],"
46675,"   ...:                    'B': 1,"
46676,"   ...:                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})"
46677,
46678,In [2]: df
46679,Out[2]:
46680,           A  B          C
46681,"0  [0, 1, 2]  1  [a, b, c]"
46682,1        foo  1        NaN
46683,2         []  1         []
46684,"3     [3, 4]  1     [d, e]"
46685,
46686,In [3]: df.explode('A')
46687,Out[3]:
46688,     A  B          C
46689,"0    0  1  [a, b, c]"
46690,"0    1  1  [a, b, c]"
46691,"0    2  1  [a, b, c]"
46692,1  foo  1        NaN
46693,2  NaN  1         []
46694,"3    3  1     [d, e]"
46695,"3    4  1     [d, e]"
46696,"In [4]: df.explode(['A', 'C'])"
46697,Out[4]:
46698,     A  B    C
46699,0    0  1    a
46700,0    1  1    b
46701,0    2  1    c
46702,1  foo  1  NaN
46703,2  NaN  1  NaN
46704,3    3  1    d
46705,3    4  1    e
46706,normal
46707,list
46708,"def explode(df, lst_cols, fill_value='', preserve_index=False):"
46709,    # make sure `lst_cols` is list-alike
46710,    if (lst_cols is not None
46711,        and len(lst_cols) > 0
46712,"        and not isinstance(lst_cols, (list, tuple, np.ndarray, pd.Series))):"
46713,        lst_cols = [lst_cols]
46714,    # all columns except `lst_cols`
46715,    idx_cols = df.columns.difference(lst_cols)
46716,    # calculate lengths of lists
46717,    lens = df[lst_cols[0]].str.len()
46718,    # preserve original index values    
46719,"    idx = np.repeat(df.index.values, lens)"
46720,"    # create ""exploded"" DF"
46721,    res = (pd.DataFrame({
46722,"                col:np.repeat(df[col].values, lens)"
46723,"                for col in idx_cols},"
46724,                index=idx)
46725,"             .assign(**{col:np.concatenate(df.loc[lens>0, col].values)"
46726,                            for col in lst_cols}))
46727,    # append those rows that have empty lists
46728,    if (lens == 0).any():
46729,        # at least one list in cells is empty
46730,"        res = (res.append(df.loc[lens==0, idx_cols], sort=False)"
46731,                  .fillna(fill_value))
46732,    # revert the original index order
46733,    res = res.sort_index()
46734,    # reset index if requested
46735,    if not preserve_index:        
46736,        res = res.reset_index(drop=True)
46737,    return res
46738,list
46739,list
46740,In [134]: df
46741,Out[134]:
46742,   aaa  myid        num          text
46743,"0   10     1  [1, 2, 3]  [aa, bb, cc]"
46744,1   11     2         []            []
46745,"2   12     3     [1, 2]      [cc, dd]"
46746,3   13     4         []            []
46747,
46748,"In [135]: explode(df, ['num','text'], fill_value='')"
46749,Out[135]:
46750,   aaa  myid num text
46751,0   10     1   1   aa
46752,1   10     1   2   bb
46753,2   10     1   3   cc
46754,3   11     2
46755,4   12     3   1   cc
46756,5   12     3   2   dd
46757,6   13     4
46758,"In [136]: explode(df, ['num','text'], fill_value='', preserve_index=True)"
46759,Out[136]:
46760,   aaa  myid num text
46761,0   10     1   1   aa
46762,0   10     1   2   bb
46763,0   10     1   3   cc
46764,1   11     2
46765,2   12     3   1   cc
46766,2   12     3   2   dd
46767,3   13     4
46768,df = pd.DataFrame({
46769," 'aaa': {0: 10, 1: 11, 2: 12, 3: 13},"
46770," 'myid': {0: 1, 1: 2, 2: 3, 3: 4},"
46771," 'num': {0: [1, 2, 3], 1: [], 2: [1, 2], 3: []},"
46772," 'text': {0: ['aa', 'bb', 'cc'], 1: [], 2: ['cc', 'dd'], 3: []}"
46773,})
46774,In [46]: df
46775,Out[46]:
46776,        var1  var2 var3
46777,"0      a,b,c     1   XX"
46778,"1  d,e,f,x,y     2   ZZ"
46779,
46780,"In [47]: explode(df.assign(var1=df.var1.str.split(',')), 'var1')"
46781,Out[47]:
46782,  var1  var2 var3
46783,0    a     1   XX
46784,1    b     1   XX
46785,2    c     1   XX
46786,3    d     2   ZZ
46787,4    e     2   ZZ
46788,5    f     2   ZZ
46789,6    x     2   ZZ
46790,7    y     2   ZZ
46791,list
46792,"In [48]: df.assign(var1=df.var1.str.split(','))"
46793,Out[48]:
46794,              var1  var2 var3
46795,"0        [a, b, c]     1   XX"
46796,"1  [d, e, f, x, y]     2   ZZ"
46797,In [177]: df
46798,Out[177]:
46799,        var1  var2 var3
46800,"0      a,b,c     1   XX"
46801,"1  d,e,f,x,y     2   ZZ"
46802,In [178]: lst_col = 'var1' 
46803,
46804,"In [179]: x = df.assign(**{lst_col:df[lst_col].str.split(',')})"
46805,
46806,In [180]: x
46807,Out[180]:
46808,              var1  var2 var3
46809,"0        [a, b, c]     1   XX"
46810,"1  [d, e, f, x, y]     2   ZZ"
46811,In [181]: pd.DataFrame({
46812,"     ...:     col:np.repeat(x[col].values, x[lst_col].str.len())"
46813,     ...:     for col in x.columns.difference([lst_col])
46814,     ...: }).assign(**{lst_col:np.concatenate(x[lst_col].values)})[x.columns.tolist()]
46815,     ...:
46816,Out[181]:
46817,  var1  var2 var3
46818,0    a     1   XX
46819,1    b     1   XX
46820,2    c     1   XX
46821,3    d     2   ZZ
46822,4    e     2   ZZ
46823,5    f     2   ZZ
46824,6    x     2   ZZ
46825,7    y     2   ZZ
46826,In [2]: df = pd.DataFrame(
46827,"   ...:    [{'var1': 'a,b,c', 'var2': 1, 'var3': 'XX'},"
46828,"   ...:     {'var1': 'd,e,f,x,y', 'var2': 2, 'var3': 'ZZ'}]"
46829,   ...: )
46830,
46831,In [3]: df
46832,Out[3]:
46833,        var1  var2 var3
46834,"0      a,b,c     1   XX"
46835,"1  d,e,f,x,y     2   ZZ"
46836,
46837,"In [4]: (df.set_index(df.columns.drop('var1',1).tolist())"
46838,"   ...:    .var1.str.split(',', expand=True)"
46839,   ...:    .stack()
46840,   ...:    .reset_index()
46841,   ...:    .rename(columns={0:'var1'})
46842,"   ...:    .loc[:, df.columns]"
46843,   ...: )
46844,Out[4]:
46845,  var1  var2 var3
46846,0    a     1   XX
46847,1    b     1   XX
46848,2    c     1   XX
46849,3    d     2   ZZ
46850,4    e     2   ZZ
46851,5    f     2   ZZ
46852,6    x     2   ZZ
46853,7    y     2   ZZ
46854,.explode()
46855,"b = DataFrame(a.var1.str.split(',').tolist(), index=a.var2).stack()"
46856,"b = b.reset_index()[[0, 'var2']] # var1 variable is currently labeled 0"
46857,"b.columns = ['var1', 'var2'] # renaming var1"
46858,TypeError: object of type 'float' has no len()
46859,"DataFrame(df.var1.str.split(',').tolist())"
46860,NaN
46861,"b = DataFrame(a.var1.str.split(',').values.tolist(), index=a.var2).stack()"
46862,.explode()
46863,explode
46864,"df = pd.DataFrame({'var1': ['a,b,c', 'd,e,f'], 'var2': [1, 2]})"
46865,df
46866,    var1  var2
46867,"0  a,b,c     1"
46868,"1  d,e,f     2"
46869,
46870,"df.assign(var1=df['var1'].str.split(',')).explode('var1')"
46871,
46872,  var1  var2
46873,0    a     1
46874,0    b     1
46875,0    c     1
46876,1    d     2
46877,1    e     2
46878,1    f     2
46879,explode
46880,"df = pd.DataFrame({'var1': ['d,e,f', '', np.nan], 'var2': [1, 2, 3]})"
46881,df
46882,    var1  var2
46883,"0  d,e,f     1"
46884,1            2
46885,2    NaN     3
46886,
46887,"df['var1'].str.split(',')"
46888,
46889,"0    [d, e, f]"
46890,1           []
46891,2          NaN
46892,
46893,"df.assign(var1=df['var1'].str.split(',')).explode('var1')"
46894,
46895,  var1  var2
46896,0    d     1
46897,0    e     1
46898,0    f     1
46899,1          2  # empty list entry becomes empty string after exploding 
46900,2  NaN     3  # NaN left un-touched
46901,ravel
46902,repeat
46903,df.explode
46904,"df = pd.DataFrame({'var1': ['a,b,c', 'd,e,f'], "
46905,"                   'var2': ['i,j,k', 'l,m,n'], "
46906,"                   'var3': [1, 2]})"
46907,df
46908,    var1   var2  var3
46909,"0  a,b,c  i,j,k     1"
46910,"1  d,e,f  l,m,n     2"
46911,
46912,(df.set_index(['var3']) 
46913,"       .apply(lambda col: col.str.split(','))"
46914,"       .explode(['var1', 'var2'])"
46915,       .reset_index()
46916,"       .reindex(df.columns, axis=1))"
46917,
46918,  var1 var2  var3
46919,0    a    i     1
46920,1    b    j     1
46921,2    c    k     1
46922,3    d    l     2
46923,4    e    m     2
46924,5    f    n     2
46925,explode
46926,(df.set_index(['var3']) 
46927,"   .apply(lambda col: col.str.split(',').explode())"
46928,   .reset_index()
46929,"   .reindex(df.columns, axis=1))"
46930,apply
46931,"df.assign(var3=df['var1'].str.split(',')).explode('var1')"
46932,var1
46933,var3
46934,"df = df.assign(var1=df['var1'].str.split(',')).explode('var1')"
46935,df = df.explode('var1')
46936,"In [55]: pd.concat([Series(row['var2'], row['var1'].split(','))              "
46937,"                    for _, row in a.iterrows()]).reset_index()"
46938,Out[55]: 
46939,  index  0
46940,0     a  1
46941,1     b  1
46942,2     c  1
46943,3     d  2
46944,4     e  2
46945,5     f  2
46946,Series
46947,stack
46948,"def tidy_split(df, column, sep='|', keep=False):"
46949,"    """""""
46950,    Split the values of a column and expand so the new DataFrame has one split
46951,    value per row. Filters rows where the column is missing.
46952,
46953,    Params
46954,    ------
46955,    df : pandas.DataFrame
46956,        dataframe with the column to split and expand
46957,    column : str
46958,        the column to split and expand
46959,    sep : str
46960,        the string used to split the column's values
46961,    keep : bool
46962,        whether to retain the presplit value as it's own row
46963,
46964,    Returns
46965,    -------
46966,    pandas.DataFrame
46967,        Returns a dataframe with the same columns as `df`.
46968,"    """""""
46969,    indexes = list()
46970,    new_values = list()
46971,    df = df.dropna(subset=[column])
46972,"    for i, presplit in enumerate(df[column].astype(str)):"
46973,        values = presplit.split(sep)
46974,        if keep and len(values) > 1:
46975,            indexes.append(i)
46976,            new_values.append(presplit)
46977,        for value in values:
46978,            indexes.append(i)
46979,            new_values.append(value)
46980,"    new_df = df.iloc[indexes, :].copy()"
46981,    new_df[column] = new_values
46982,    return new_df
46983,"tidy_split(a, 'var1', sep=',')"
46984,">> a=pd.DataFrame({""var1"":""a,b,c d,e,f"".split(),""var2"":[1,2]})"
46985,">> s = a.var1.str.split("","").apply(pd.Series, 1).stack()"
46986,>> s.index = s.index.droplevel(-1)
46987,>> del a['var1']
46988,>> a.join(s)
46989,   var2 var1
46990,0     1    a
46991,0     1    b
46992,0     1    c
46993,1     2    d
46994,1     2    e
46995,1     2    f
46996,s.name = 'var1' 
46997,    var1    var2
46998,"0   a,b,c   1"
46999,"1   d,e,f   2"
47000,
47001,
47002,
47003,#Get the indexes which are repetative with the split 
47004,"df['var1'] = df['var1'].str.split(',')"
47005,df = df.explode('var1')
47006,    var1    var2
47007,0   a   1
47008,0   b   1
47009,0   c   1
47010,1   d   2
47011,1   e   2
47012,1   f   2
47013,Filename    RGB                                             RGB_type
47014,"0   A   [[0, 1650, 6, 39], [0, 1691, 1, 59], [50, 1402...   [r, g, b]"
47015,"1   B   [[0, 1423, 16, 38], [0, 1445, 16, 46], [0, 141...   [r, g, b]"
47016,df = df.reindex(df.index.repeat(df['RGB_type'].apply(len)))
47017,df = df.groupby('Filename').apply(lambda x:x.apply(lambda y: pd.Series(y.iloc[0])))
47018,df.reset_index(drop=True).ffill()
47019,                Filename    RGB_type    Top 1 colour    Top 1 frequency Top 2 colour    Top 2 frequency
47020,    Filename                            
47021, A  0       A   r   0   1650    6   39
47022,    1       A   g   0   1691    1   59
47023,    2       A   b   50  1402    49  187
47024, B  0       B   r   0   1423    16  38
47025,    1       B   g   0   1445    16  46
47026,    2       B   b   0   1419    16  39
47027,import pandas as pd
47028,import numpy as np
47029,
47030,"def explode_str(df, col, sep):"
47031,    s = df[col]
47032,    i = np.arange(len(s)).repeat(s.str.count(sep) + 1)
47033,    return df.iloc[i].assign(**{col: sep.join(s).split(sep)})
47034,
47035,"def explode_list(df, col):"
47036,    s = df[col]
47037,    i = np.arange(len(s)).repeat(s.str.len())
47038,    return df.iloc[i].assign(**{col: np.concatenate(s)})
47039,"explode_str(a, 'var1', ',')"
47040,
47041,  var1  var2
47042,0    a     1
47043,0    b     1
47044,0    c     1
47045,1    d     2
47046,1    e     2
47047,1    f     2
47048,d
47049,"d = a.assign(var1=lambda d: d.var1.str.split(','))"
47050,
47051,"explode_list(d, 'var1')"
47052,
47053,  var1  var2
47054,0    a     1
47055,0    b     1
47056,0    c     1
47057,1    d     2
47058,1    e     2
47059,1    f     2
47060,np.arange
47061,repeat
47062,iloc
47063,loc
47064,loc
47065,values
47066,values
47067,object
47068,iloc
47069,values
47070,assign
47071,assign
47072,iloc
47073,reset_index(drop=True)
47074,sep
47075,sep
47076,join
47077,split
47078,"def explode_str(df, col, sep):"
47079,    s = df[col]
47080,    i = np.arange(len(s)).repeat(s.str.count(sep) + 1)
47081,    return df.iloc[i].assign(**{col: sep.join(s).split(sep)})
47082,sep
47083,concatenate
47084,import pandas as pd
47085,import numpy as np
47086,
47087,"def explode_list(df, col):"
47088,    s = df[col]
47089,    i = np.arange(len(s)).repeat(s.str.len())
47090,    return df.iloc[i].assign(**{col: np.concatenate(s)})
47091,"def splitDataFrameList(df,target_column,separator):"
47092,"    ''' df = dataframe to split,"
47093,    target_column = the column containing the values to split
47094,    separator = the symbol used to perform the split
47095,
47096,"    returns: a dataframe with each entry for the target column separated, with each element moved into a new row. "
47097,    The values in the other columns are duplicated across the newly divided rows.
47098,    '''
47099,"    def splitListToRows(row,row_accumulator,target_column,separator):"
47100,        split_row = row[target_column].split(separator)
47101,        for s in split_row:
47102,            new_row = row.to_dict()
47103,            new_row[target_column] = s
47104,            row_accumulator.append(new_row)
47105,    new_rows = []
47106,"    df.apply(splitListToRows,axis=1,args = (new_rows,target_column,separator))"
47107,    new_df = pandas.DataFrame(new_rows)
47108,    return new_df
47109,split
47110,str
47111,np.repeat
47112,"var1 = df.var1.str.split(',', expand=True).values.ravel()"
47113,"var2 = np.repeat(df.var2.values, len(var1) / len(df))"
47114,
47115,"pd.DataFrame({'var1': var1,"
47116,              'var2': var2})
47117,
47118,  var1  var2
47119,0    a     1
47120,1    b     1
47121,2    c     1
47122,3    d     2
47123,4    e     2
47124,5    f     2
47125,"split(___, expand=True)"
47126,level
47127,name
47128,reset_index()
47129,">>> b = a.var1.str.split(',', expand=True).set_index(a.var2).stack().reset_index(level=0, name='var1')"
47130,>>> b
47131,   var2 var1
47132,0     1    a
47133,1     1    b
47134,2     1    c
47135,0     2    d
47136,1     2    e
47137,2     2    f
47138,b
47139,">>> b = b.reset_index(drop=True)[['var1', 'var2']]"
47140,>>> b
47141,  var1  var2
47142,0    a     1
47143,1    b     1
47144,2    c     1
47145,3    d     2
47146,4    e     2
47147,5    f     2
47148,change_column_order
47149,"def change_column_order(df, col_name, index):"
47150,    cols = df.columns.tolist()
47151,    cols.remove(col_name)
47152,"    cols.insert(index, col_name)"
47153,    return df[cols]
47154,
47155,"def split_df(dataframe, col_name, sep):"
47156,    orig_col_index = dataframe.columns.tolist().index(col_name)
47157,    orig_index_name = dataframe.index.name
47158,    orig_columns = dataframe.columns
47159,    dataframe = dataframe.reset_index()  # we need a natural 0-based index for proper merge
47160,    index_col_name = (set(dataframe.columns) - set(orig_columns)).pop()
47161,    df_split = pd.DataFrame(
47162,        pd.DataFrame(dataframe[col_name].str.split(sep).tolist())
47163,"        .stack().reset_index(level=1, drop=1), columns=[col_name])"
47164,"    df = dataframe.drop(col_name, axis=1)"
47165,"    df = pd.merge(df, df_split, left_index=True, right_index=True, how='inner')"
47166,    df = df.set_index(index_col_name)
47167,    df.index.name = orig_index_name
47168,"    # merge adds the column to the last place, so we need to move it back"
47169,"    return change_column_order(df, col_name, orig_col_index)"
47170,"df = pd.DataFrame([['a:b', 1, 4], ['c:d', 2, 5], ['e:f:g:h', 3, 6]], "
47171,"                  columns=['Name', 'A', 'B'], index=[10, 12, 13])"
47172,df
47173,        Name    A   B
47174,    10   a:b     1   4
47175,    12   c:d     2   5
47176,    13   e:f:g:h 3   6
47177,
47178,"split_df(df, 'Name', ':')"
47179,    Name    A   B
47180,10   a       1   4
47181,10   b       1   4
47182,12   c       2   5
47183,12   d       2   5
47184,13   e       3   6
47185,13   f       3   6    
47186,13   g       3   6    
47187,13   h       3   6    
47188,(a.var1
47189,"  .str.split("","",expand=True)"
47190,  .set_index(a.var2)
47191,  .stack()
47192,"  .reset_index(level=1, drop=True)"
47193,  .reset_index()
47194,"  .rename(columns={0:""var1""}))"
47195,iterrows()
47196,"# First, reset_index to make the index a column"
47197,a = a.reset_index().rename(columns={'index':'duplicated_idx'})
47198,
47199,# Get a longer series with exploded cells to rows
47200,series = pd.DataFrame(a['var1'].str.split('/')
47201,"                      .tolist(), index=a.duplicated_idx).stack()"
47202,
47203,# New df from series and merge with the old one
47204,"b = series.reset_index([0, 'duplicated_idx'])"
47205,b = b.rename(columns={0:'var1'})
47206,
47207,"# Optional & Advanced: In case, there are other columns apart from var1 & var2"
47208,b.merge(
47209,"    a[a.columns.difference(['var1'])],"
47210,    on='duplicated_idx')
47211,
47212,"# Optional: Delete the ""duplicated_index""'s column, and reorder columns"
47213,b = b[a.columns.difference(['duplicated_idx'])]
47214,assign
47215,explode
47216,    col1  col2
47217,"0  a,b,c     1"
47218,"1  d,e,f     2"
47219,
47220,"df.assign(col1 = df.col1.str.split(',')).explode('col1', ignore_index=True)"
47221,  col1  col2
47222,0    a     1
47223,1    b     1
47224,2    c     1
47225,3    d     2
47226,4    e     2
47227,5    f     2
47228,"def splitDataFrameList(df,target_column,separator):"
47229,"''' df = dataframe to split,"
47230,target_column = the column containing the values to split
47231,separator = the symbol used to perform the split
47232,
47233,"returns: a dataframe with each entry for the target column separated, with each element moved into a new row. "
47234,The values in the other columns are duplicated across the newly divided rows.
47235,'''
47236,"def splitListToRows(row, row_accumulator, target_columns, separator):"
47237,    split_rows = []
47238,    for target_column in target_columns:
47239,        split_rows.append(row[target_column].split(separator))
47240,    # Seperate for multiple columns
47241,    for i in range(len(split_rows[0])):
47242,        new_row = row.to_dict()
47243,        for j in range(len(split_rows)):
47244,            new_row[target_columns[j]] = split_rows[j][i]
47245,        row_accumulator.append(new_row)
47246,new_rows = []
47247,"df.apply(splitListToRows,axis=1,args = (new_rows,target_column,separator))"
47248,new_df = pd.DataFrame(new_rows)
47249,return new_df
47250,"def explode(df, lst_cols, fill_value='', preserve_index=False):"
47251,"    """""""
47252,    usage:
47253,        In [134]: df
47254,        Out[134]:
47255,           aaa  myid        num          text
47256,"        0   10     1  [1, 2, 3]  [aa, bb, cc]"
47257,        1   11     2         []            []
47258,"        2   12     3     [1, 2]      [cc, dd]"
47259,        3   13     4         []            []
47260,
47261,"        In [135]: explode(df, ['num','text'], fill_value='')"
47262,        Out[135]:
47263,           aaa  myid num text
47264,        0   10     1   1   aa
47265,        1   10     1   2   bb
47266,        2   10     1   3   cc
47267,        3   11     2
47268,        4   12     3   1   cc
47269,        5   12     3   2   dd
47270,        6   13     4
47271,"    """""""
47272,    # make sure `lst_cols` is list-alike
47273,    if (lst_cols is not None
47274,        and len(lst_cols) > 0
47275,"        and not isinstance(lst_cols, (list, tuple, np.ndarray, pd.Series))):"
47276,        lst_cols = [lst_cols]
47277,    # all columns except `lst_cols`
47278,    idx_cols = df.columns.difference(lst_cols)
47279,    # calculate lengths of lists
47280,    lens = df[lst_cols[0]].str.len()
47281,    # preserve original index values    
47282,"    idx = np.repeat(df.index.values, lens)"
47283,    res = (pd.DataFrame({
47284,"                col:np.repeat(df[col].values, lens)"
47285,"                for col in idx_cols},"
47286,                index=idx)
47287,"             .assign(**{col:np.concatenate(df.loc[lens>0, col].values)"
47288,                            for col in lst_cols}))
47289,    # append those rows that have empty lists
47290,    if (lens == 0).any():
47291,        # at least one list in cells is empty
47292,"        res = (res.append(df.loc[lens==0, idx_cols], sort=False)"
47293,                  .fillna(fill_value))
47294,    # revert the original index order
47295,    res = res.sort_index()
47296,    # reset index if requested
47297,    if not preserve_index:        
47298,        res = res.reset_index(drop=True)
47299,
47300,    # if original index is MultiIndex build the dataframe from the multiindex
47301,"    # create ""exploded"" DF"
47302,"    if isinstance(df.index, pd.MultiIndex):"
47303,        res = res.reindex(
47304,            index=pd.MultiIndex.from_tuples(
47305,"                res.index,"
47306,"                names=['number', 'color']"
47307,            )
47308,    )
47309,    return res
47310,# Original problem
47311,from pandas import DataFrame
47312,import numpy as np
47313,"a = DataFrame([{'var1': 'a,b,c', 'var2': 1},"
47314,"               {'var1': 'd,e,f', 'var2': 2}])"
47315,"b = DataFrame([{'var1': 'a', 'var2': 1},"
47316,"               {'var1': 'b', 'var2': 1},"
47317,"               {'var1': 'c', 'var2': 1},"
47318,"               {'var1': 'd', 'var2': 2},"
47319,"               {'var1': 'e', 'var2': 2},"
47320,"               {'var1': 'f', 'var2': 2}])"
47321,### My solution
47322,import pandas as pd
47323,import functools
47324,"def expand_on_cols(df, fuse_cols, delim="",""):"
47325,"    def expand_on_col(df, fuse_col):"
47326,        col_order = df.columns
47327,        df_expanded = pd.DataFrame(
47328,            df.set_index([x for x in df.columns if x != fuse_col])[fuse_col]
47329,            .apply(lambda x: x.split(delim))
47330,            .explode()
47331,        ).reset_index()
47332,        return df_expanded[col_order]
47333,"    all_expanded = functools.reduce(expand_on_col, fuse_cols, df)"
47334,    return all_expanded
47335,
47336,"assert(b.equals(expand_on_cols(a, [""var1""], delim="","")))"
47337,def iter_var1(d):
47338,"    for _, row in d.iterrows():"
47339,"        for v in row[""var1""].split("",""):"
47340,"            yield (v, row[""var2""])"
47341,
47342,"new_a = DataFrame.from_records([i for i in iter_var1(a)],"
47343,"        columns=[""var1"", ""var2""])"
47344,import copy
47345,new_observations = list()
47346,"def pandas_explode(df, column_to_explode):"
47347,    new_observations = list()
47348,    for row in df.to_dict(orient='records'):
47349,        explode_values = row[column_to_explode]
47350,        del row[column_to_explode]
47351,        if type(explode_values) is list or type(explode_values) is tuple:
47352,            for explode_value in explode_values:
47353,                new_observation = copy.deepcopy(row)
47354,                new_observation[column_to_explode] = explode_value
47355,                new_observations.append(new_observation) 
47356,        else:
47357,            new_observation = copy.deepcopy(row)
47358,            new_observation[column_to_explode] = explode_values
47359,            new_observations.append(new_observation) 
47360,    return_df = pd.DataFrame(new_observations)
47361,    return return_df
47362,
47363,"df = pandas_explode(df, column_name)"
47364,import pandas_explode
47365,pandas_explode.patch()
47366,df_zlp_people_cnt3 = df_zlp_people_cnt2.explode('people')
47367,import re
47368,import pandas as pd
47369,
47370,"def separate_row(df, column_name):"
47371,    ls = []
47372,    for row_dict in df.to_dict('records'):
47373,"        for word in re.split(',', row_dict[column_name]):"
47374,            row = row_dict.copy()
47375,            row[column_name]=word
47376,            ls.append(row)
47377,    return pd.DataFrame(ls)
47378,>>> from pandas import DataFrame
47379,>>> import numpy as np
47380,">>> a = DataFrame([{'var1': 'a,b,c', 'var2': 1},"
47381,"               {'var1': 'd,e,f', 'var2': 2}])"
47382,>>> a
47383,    var1  var2
47384,"0  a,b,c     1"
47385,"1  d,e,f     2"
47386,">>> separate_row(a, ""var1"")"
47387,  var1  var2
47388,0    a     1
47389,1    b     1
47390,2    c     1
47391,3    d     2
47392,4    e     2
47393,5    f     2
47394,"def split_df_rows_for_semicolon_separated_key(key, df):"
47395,"    df=df.set_index(df.columns.drop(key,1).tolist())[key].str.split(';', expand=True).stack().reset_index().rename(columns={0:key}).loc[:, df.columns]"
47396,    df=df[df[key] != '']
47397,    return df
47398,"vals = np.array(a.var1.str.split("","").values.tolist())    "
47399,"var = np.repeat(a.var2, vals.shape[1])"
47400,
47401,"out = pd.DataFrame(np.column_stack((var, vals.ravel())), columns=a.columns)"
47402,display(out)
47403,
47404,      var1 var2
47405,    0   1   a
47406,    1   1   b
47407,    2   1   c
47408,    3   2   d
47409,    4   2   e
47410,    5   2   f
47411,split
47412,explode
47413,"a.assign(var1=a['var1'].str.split(',')).explode('var1')"
47414,   var1 var2
47415,0   a   1
47416,0   b   1
47417,0   c   1
47418,1   d   2
47419,1   e   2
47420,1   f   2
47421,while running:
47422,    setup_background()
47423,    spriteimg = plumberright
47424,
47425,"    screen.blit(spriteimg,(x1, y1))"
47426,
47427,    for event in pygame.event.get():
47428,         if event.type == pygame.QUIT:
47429,             running = False
47430,         elif event.type == pygame.KEYDOWN:
47431,             if event.key == pygame.K_UP:
47432,                 x1 = x1 + 0
47433,                 y1 = y1 - 1
47434,             elif event.key == pygame.K_DOWN:
47435,                 x1 = x1 + 0
47436,                 y1 = y1 + 1
47437,             elif event.key == pygame.K_LEFT:
47438,                 x1 = x1 -1
47439,                 y1 = y1 + 0
47440,             elif event.key == pygame.K_RIGHT:
47441,                 x1 = x1 + 1
47442,                 y1 = y1 + 0
47443,
47444,    pygame.display.flip()
47445,    clock.tick(120)
47446,while running:
47447,    keys = pygame.key.get_pressed()  #checking pressed keys
47448,    if keys[pygame.K_UP]:
47449,        y1 -= 1
47450,    if keys[pygame.K_DOWN]:
47451,        y1 += 1
47452,KEYDOWN
47453,KEYUP
47454,pygame.key.get_pressed()
47455,pygame.key.get_pressed()
47456,True
47457,False
47458,pygame.key.get_pressed()
47459,while running:
47460,    for event in pygame.event.get():
47461,         if event.type == pygame.QUIT:
47462,             running = False
47463,
47464,    keys = pygame.key.get_pressed()
47465,    if keys[pygame.K_LEFT]:
47466,        x1 -= 1
47467,    if keys[pygame.K_RIGHT]:
47468,        x1 += 1
47469,    if keys[pygame.K_UP]:
47470,        y1 -= 1
47471,    if keys[pygame.K_DOWN]:
47472,        y1 += 1
47473,
47474,    setup_background()
47475,    spriteimg = plumberright
47476,"    screen.blit(spriteimg, (x1, y1))"
47477,
47478,    pygame.display.flip()
47479,    clock.tick(100)
47480,import pygame
47481,
47482,pygame.init()
47483,"window = pygame.display.set_mode((300, 300))"
47484,clock = pygame.time.Clock()
47485,
47486,"rect = pygame.Rect(0, 0, 20, 20)"
47487,rect.center = window.get_rect().center
47488,vel = 5
47489,
47490,run = True
47491,while run:
47492,    clock.tick(60)
47493,    for event in pygame.event.get():
47494,        if event.type == pygame.QUIT:
47495,            run = False
47496,        if event.type == pygame.KEYDOWN:
47497,            print(pygame.key.name(event.key))
47498,
47499,    keys = pygame.key.get_pressed()
47500,    
47501,    rect.x += (keys[pygame.K_RIGHT] - keys[pygame.K_LEFT]) * vel
47502,    rect.y += (keys[pygame.K_DOWN] - keys[pygame.K_UP]) * vel
47503,        
47504,    rect.centerx = rect.centerx % window.get_width()
47505,    rect.centery = rect.centery % window.get_height()
47506,
47507,    window.fill(0)
47508,"    pygame.draw.rect(window, (255, 0, 0), rect)"
47509,    pygame.display.flip()
47510,
47511,pygame.quit()
47512,exit()
47513,        if event.type == pygame.KEYDOWN:
47514,            if event.key == pygame.K_a:
47515,                playerX_change = -0.1
47516,            if event.key == pygame.K_d:
47517,                playerX_change = 0.1
47518,        if event.type == pygame.KEYUP:
47519,            if event.key == pygame.K_a or event.key == pygame.K_d:
47520,                playerX_change = 0
47521,
47522,    playerX += playerX_change
47523,"    player(playerX, playerY)"
47524,    pygame.display.update()
47525,pygame.key.get_pressed
47526,for event in pygame.event.get():
47527,    if event.type == pygame.KEYUP:
47528,        if event.key==K_DOWN:
47529,"            print(""down key is not pressed"")"
47530,    elif event.type == pygame.KEYDOWN:
47531,        if event.key==K_DOWN:
47532,            print('down key is not pressed now')
47533,    
47534,    pygame.event.clear() #optional only if your code requires 
47535,    #this will clear all event and the for loop will executed only once
47536,while running:
47537,spriteimg = plumberright
47538,"screen.blit(spriteimg,(x1, y1))"
47539,spriteimg_x = 0
47540,spriteimg_y = 0
47541,spriteimg_speed = 0.2
47542,dt = clock.tick(120)
47543,    if event.type == pygame.KEYDOWN:
47544,         if event.key == pygame.K_UP:
47545,             x1 = x1 + 0
47546,             spriteimg_y -= spriteimg_speed
47547,         elif event.key == pygame.K_DOWN:
47548,             x1 = x1 + 0
47549,             spriteimg_y += spriteimg_speed
47550,         elif event.key == pygame.K_LEFT:
47551,             spriteimg_x -= spriteimg_speed
47552,             y1 = y1 + 0
47553,         elif event.key == pygame.K_RIGHT:
47554,             spriteimg_y -= spriteimg_speed
47555,             y1 = y1 + 0
47556,    x1 += spriteimg_speed * dt
47557,    y1 += spriteimg_speed * dt
47558,a
47559,round
47560,>>> a
47561,13.949999999999999
47562,">>> round(a, 2)"
47563,13.949999999999999
47564,>>> 125650429603636838/(2**53)
47565,13.949999999999999
47566,
47567,>>> 234042163/(2**24)
47568,13.949999988079071
47569,
47570,>>> a = 13.946
47571,>>> print(a)
47572,13.946
47573,">>> print(""%.2f"" % a)"
47574,13.95
47575,">>> round(a,2)"
47576,13.949999999999999
47577,">>> print(""%.2f"" % round(a, 2))"
47578,13.95
47579,">>> print(""{:.2f}"".format(a))"
47580,13.95
47581,">>> print(""{:.2f}"".format(round(a, 2)))"
47582,13.95
47583,">>> print(""{:.15f}"".format(round(a, 2)))"
47584,13.949999999999999
47585,"""%.2f"" % round(a,2)"
47586,str()
47587,float
47588,Decimal
47589,"""{:.2f}"".format(13.949999999999999)"
47590,float(...)
47591,"float(""{:.2f}"".format(13.949999999999999))"
47592,float()
47593,>>> x = 13.949999999999999999
47594,>>> x
47595,13.95
47596,">>> g = float(""{:.2f}"".format(x))"
47597,>>> g
47598,13.95
47599,>>> x == g
47600,True
47601,">>> h = round(x, 2)"
47602,>>> h
47603,13.95
47604,>>> x == h
47605,True
47606,"'{0:,.2f}'.format(1333.949999999)"
47607,"'1,333.95'"
47608,float()
47609,"float(""{0:.2f}"".format(13.9499999))"
47610,"f""Result is {result:.2f}"""
47611,round()
47612,">>> round(14.22222223, 2)"
47613,14.22
47614,"round(2.16, 1)"
47615,2.2
47616,truncate
47617,">>> round(2.675, 2) 2.67"
47618,"Note The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float."
47619,>>> f'{a:.2f}'
47620,>>> print(f'Completed in {time.time() - start:.2f}s')
47621,format()
47622,a = 13.949999999999999
47623,"format(a, '.2f')"
47624,
47625,13.95
47626,">>> ""%.2f"" % 3.14159"
47627,'3.14'
47628,">>> ""%.2f"" % 13.9499999"
47629,'13.95'
47630,"print""{:.2f}"".format(a)"
47631,"print""{0:.2f}"".format(a)"
47632,>>> a = 0.99334
47633,>>> a = int((a * 100) + 0.5) / 100.0 # Adding 0.5 rounds it up
47634,>>> print a
47635,0.99
47636,round
47637,round
47638,round()
47639,str -> float() -> repr() -> float() ...
47640,Decimal -> float -> str -> Decimal
47641,>>> 0.3
47642,0.3
47643,>>> float(repr(0.3)) == 0.3
47644,True
47645,Decimal
47646,repr()
47647,>>> 0.1 + 0.2
47648,0.30000000000000004
47649,">>> 0.1, 0.2, 0.3"
47650,"(0.1, 0.2, 0.3)"
47651,str(float(...))
47652,import random
47653,from decimal import Decimal
47654,for _ in range(1000000):
47655,    x = random.random()
47656,    assert x == float(repr(x)) == float(Decimal(repr(x)))  # Reversible repr()
47657,    assert str(x) == repr(x)
47658,"    assert len(repr(round(x, 12))) <= 14         # no excessive decimal places."
47659,marshal
47660,pickle
47661,json
47662,float
47663,numpy.float64
47664,np.float64.__repr__
47665,repr(float(number_as_string))
47666,float.__repr__
47667,float
47668,round
47669,1
47670,a*b
47671,b*a
47672,float_number = 12.234325335563
47673,"round(float_number, 2)"
47674,12.23
47675,>>> a = 13.95
47676,>>> a
47677,13.949999999999999
47678,">>> print ""%.2f"" % a"
47679,13.95
47680,# Option one 
47681,"older_method_string = ""%.9f"" % numvar"
47682,
47683,# Option two (note ':' before the '.9f')
47684,"newer_method_string = ""{:.9f}"".format(numvar)"
47685,numvar=12.456
47686,"""{:.2f}"".format(numvar)"
47687,12.46
47688,"""{:2i}"".format(numvar)"
47689,12
47690,"print(format(14.4499923, '.2f')) // output is 14.45"
47691,a = 13.949999999999999
47692,"output = float(""%0.2f""%a)"
47693,print output
47694,output
47695,a
47696,print a
47697,print output
47698,13.95
47699,print a
47700,a
47701,a == output
47702,True
47703,value = 2.34558
47704,precision = 2
47705,width = 4
47706,
47707,print(f'result: {value:{width}.{precision}f}')
47708,result: 2.35
47709,x = 1.090675765757
47710,"g = float(""{:.2f}"".format(x))"
47711,print(g)
47712,x = 1.090675765757
47713,"g =  round(x, 2)"
47714,print(g)
47715,>>> 0.1
47716,0.10000000000000001
47717,round()
47718,">>> round(0.1, 1)"
47719,0.10000000000000001
47720,“0.1”
47721,1/10
47722,0.1
47723,1/10
47724,0.1
47725,1.0
47726,>>> sum = 0.0
47727,>>> for i in range(10):
47728,...     sum += 0.1
47729,...
47730,>>> sum
47731,0.99999999999999989
47732,decimal
47733,Python 3.7.3
47734,>>> from decimal import Decimal
47735,>>> d1 = Decimal (13.949999999999999) # define a Decimal
47736,>>> d1 
47737,Decimal('13.949999999999999289457264239899814128875732421875')
47738,">>> d2 = round(d1, 2) # round to 2 decimals"
47739,>>> d2
47740,Decimal('13.95')
47741,from decimal import Decimal
47742,
47743,
47744,"def round_float(v, ndigits=2, rt_str=False):"
47745,    d = Decimal(v)
47746,"    v_str = (""{0:.%sf}"" % ndigits).format(round(d, ndigits))"
47747,    if rt_str:
47748,        return v_str
47749,    return Decimal(v_str)
47750,"Python 3.6.1 (default, Dec 11 2018, 17:41:10)"
47751,>>> round_float(3.1415926)
47752,Decimal('3.14')
47753,>>> round_float(3.1445926)
47754,Decimal('3.14')
47755,>>> round_float(3.1455926)
47756,Decimal('3.15')
47757,">>> round_float(3.1455926, rt_str=True)"
47758,'3.15'
47759,>>> str(round_float(3.1455926))
47760,'3.15'
47761,Decimal
47762,float
47763,"def round_float(v, ndigits=2) -> float:         d = Decimal(v);     v_str = (""{0:.%sf}"" % ndigits).format(round(d, ndigits));     return float(v_str)"
47764,orig_float = 232569 / 16000.0
47765,"short_float = float(""{:.2f}"".format(orig_float)) "
47766,# For example:
47767,a = 70000
47768,b = 0.14
47769,c = a * b
47770,
47771,print c # Prints 980.0000000002
47772,# Try to fix
47773,c = int(c * 10000)/100000
47774,print c # Prints 980
47775,from decimal import *
47776,getcontext().prec = 6
47777,Decimal(1) / Decimal(7)
47778,# Results in 6 precision -> Decimal('0.142857')
47779,
47780,getcontext().prec = 28
47781,Decimal(1) / Decimal(7)
47782,# Results in 28 precision -> Decimal('0.1428571428571428571428571429')
47783,getcontext().prec = 6
47784,   d.quantize(Decimal('0.01'))
47785,Decimal('10000000.00')
47786,"    def round_decimal(number, exponent='0.01'):"
47787,        decimal_value = Decimal(number)
47788,        return decimal_value.quantize(Decimal(exponent))
47789,"    def round_decimal(number, decimal_places=2):"
47790,        decimal_value = Decimal(number)
47791,        return decimal_value.quantize(Decimal(10) ** -decimal_places)
47792,"arred = lambda x,n : x*(10**n)//1/(10**n)"
47793,"arred(3.141591657,2)"
47794,3.14
47795,value = 5.34343
47796,"rounded_value = round(value, 2) # 5.34"
47797,8/3
47798,float
47799,float
47800,"value = round(8/3, 2)"
47801,"float(format(num, '.2f'))"
47802,"from decimal import Decimal, ROUND_HALF_UP"
47803,
47804,"# amount can be integer, string, tuple, float, or another Decimal object"
47805,def to_money(amount) -> Decimal:
47806,"    money = Decimal(amount).quantize(Decimal('.00'), rounding=ROUND_HALF_UP)"
47807,    return money
47808,>>> import numpy as np
47809,>>> value = 13.949999999999999
47810,>>> resolution = 0.01
47811,>>> newValue = int(np.round(value/resolution))*resolution
47812,>>> print newValue
47813,13.95
47814,
47815,>>> resolution = 0.5
47816,>>> newValue = int(np.round(value/resolution))*resolution
47817,>>> print newValue
47818,14.0
47819,numpy.round
47820,numpy.float64
47821,float
47822,"round(value, 2)"
47823,int
47824,float
47825,import decimal
47826,        
47827,"def value_to_decimal(value, decimal_places):"
47828,    decimal.getcontext().rounding = decimal.ROUND_HALF_UP  # define rounding method
47829,    return decimal.Decimal(str(float(value))).quantize(decimal.Decimal('1e-{}'.format(decimal_places)))
47830,reverse
47831,str
47832,str
47833,>>> 'hello world'[::-1]
47834,'dlrow olleh'
47835,[start:stop:step]
47836,start
47837,stop
47838,step = -1
47839,b = a.decode('utf8')[::-1].encode('utf8')
47840,.decode('utf8')
47841,a
47842,"""🇬🇧""[::-1]"
47843,"""🇧🇬"""
47844,"reversed_string = """".join(list(grapheme.graphemes(input_string))[::-1])"
47845,s[::-1]
47846,''.join(reversed(s))
47847,join
47848,''.join(list(reversed(s)))
47849,-1
47850,>>> 'a string'[::-1]
47851,'gnirts a'
47852,str.join
47853,>>> ''.join(reversed('a string'))
47854,'gnirts a'
47855,def reversed_string(a_string):
47856,    return a_string[::-1]
47857,>>> reversed_string('a_string')
47858,'gnirts_a'
47859,string[subscript]
47860,    string[start:stop:step]
47861,"    slice_obj = slice(start, stop, step)"
47862,    string[slice_obj]
47863,''.join(reversed('foo'))
47864,str.join
47865,def reverse_string_readable_answer(string):
47866,    return ''.join(reversed(string))
47867,'foo'[::-1]
47868,start = stop = None
47869,step = -1
47870,"reverse_slice = slice(start, stop, step)"
47871,'foo'[reverse_slice]
47872,def reversed_string(a_string):
47873,    return a_string[::-1]
47874,reversed_string('foo')
47875,def reverse_a_string_slowly(a_string):
47876,    new_string = ''
47877,    index = len(a_string)
47878,    while index:
47879,        index -= 1                    # index = index - 1
47880,        new_string += a_string[index] # new_string = new_string + character
47881,    return new_string
47882,new_string
47883,def reverse_a_string_more_slowly(a_string):
47884,    new_strings = []
47885,    index = len(a_string)
47886,    while index:
47887,        index -= 1                       
47888,        new_strings.append(a_string[index])
47889,    return ''.join(new_strings)
47890,>>> a_string = 'amanaplanacanalpanama' * 10
47891,>>> min(timeit.repeat(lambda: reverse_string_readable_answer(a_string)))
47892,10.38789987564087
47893,>>> min(timeit.repeat(lambda: reversed_string(a_string)))
47894,0.6622700691223145
47895,>>> min(timeit.repeat(lambda: reverse_a_string_slowly(a_string)))
47896,25.756799936294556
47897,>>> min(timeit.repeat(lambda: reverse_a_string_more_slowly(a_string)))
47898,38.73570013046265
47899,while
47900,"for i in range(len(a_string)-1, -1, -1): "
47901,### example01 -------------------
47902,mystring  =   'coup_ate_grouping'
47903,backwards =   mystring[::-1]
47904,print(backwards)
47905,
47906,### ... or even ...
47907,mystring  =   'coup_ate_grouping'[::-1]
47908,print(mystring)
47909,
47910,### result01 -------------------
47911,'''
47912,gnipuorg_eta_puoc
47913,'''
47914,string.reverse()
47915,string.reverse()
47916,print 'coup_ate_grouping'[-4:]    ## => 'ping'
47917,print 'coup_ate_grouping'[-4:-1]  ## => 'pin'
47918,print 'coup_ate_grouping'[-1]  ## => 'g'
47919,[-1]
47920,string.reverse()
47921,### example02 -------------------
47922,## start (with positive integers)
47923,print 'coup_ate_grouping'[0]  ## => 'c'
47924,print 'coup_ate_grouping'[1]  ## => 'o' 
47925,print 'coup_ate_grouping'[2]  ## => 'u' 
47926,
47927,## start (with negative integers)
47928,print 'coup_ate_grouping'[-1]  ## => 'g'
47929,print 'coup_ate_grouping'[-2]  ## => 'n' 
47930,print 'coup_ate_grouping'[-3]  ## => 'i' 
47931,
47932,## start:end 
47933,print 'coup_ate_grouping'[0:4]    ## => 'coup'    
47934,print 'coup_ate_grouping'[4:8]    ## => '_ate'    
47935,print 'coup_ate_grouping'[8:12]   ## => '_gro'    
47936,
47937,## start:end 
47938,print 'coup_ate_grouping'[-4:]    ## => 'ping' (counter-intuitive)
47939,print 'coup_ate_grouping'[-4:-1]  ## => 'pin'
47940,print 'coup_ate_grouping'[-4:-2]  ## => 'pi'
47941,print 'coup_ate_grouping'[-4:-3]  ## => 'p'
47942,print 'coup_ate_grouping'[-4:-4]  ## => ''
47943,print 'coup_ate_grouping'[0:-1]   ## => 'coup_ate_groupin'
47944,print 'coup_ate_grouping'[0:]     ## => 'coup_ate_grouping' (counter-intuitive)
47945,
47946,## start:end:step (or start:end:stride)
47947,print 'coup_ate_grouping'[-1::1]  ## => 'g'   
47948,print 'coup_ate_grouping'[-1::-1] ## => 'gnipuorg_eta_puoc'
47949,
47950,## combinations
47951,print 'coup_ate_grouping'[-1::-1][-4:] ## => 'puoc'
47952,"list_comprehension  : min:   0.6μs, mean:   0.6μs, max:    2.2μs"
47953,"reverse_func        : min:   1.9μs, mean:   2.0μs, max:    7.9μs"
47954,"reverse_reduce      : min:   5.7μs, mean:   5.9μs, max:   10.2μs"
47955,"reverse_loop        : min:   3.0μs, mean:   3.1μs, max:    6.8μs"
47956,"list_comprehension  : min:   4.2μs, mean:   4.5μs, max:   31.7μs"
47957,"reverse_func        : min:  75.4μs, mean:  76.6μs, max:  109.5μs"
47958,"reverse_reduce      : min: 749.2μs, mean: 882.4μs, max: 2310.4μs"
47959,"reverse_loop        : min: 469.7μs, mean: 577.2μs, max: 1227.6μs"
47960,reversed = string[::-1]
47961,"example = ""👈🏾👆"""
47962,original: LMU                    👈🏾👆
47963,reversed: UML (above solutions)  ☝🏾👈
47964,reversed: ULM (correct reversal) 👆👈🏾
47965,>>> import grapheme
47966,">>> g = grapheme.graphemes(""👈🏾👆"")"
47967,>>> list(g)
47968,"['👈🏾', '👆']"
47969,def reverse_graphemes(string):
47970,    g = list(grapheme.graphemes(string))
47971,    return ''.join(g[::-1])
47972,"list_comprehension  : min:    0.5μs, mean:    0.5μs, max:    2.1μs"
47973,"reverse_func        : min:   68.9μs, mean:   70.3μs, max:  111.4μs"
47974,"reverse_reduce      : min:  742.7μs, mean:  810.1μs, max: 1821.9μs"
47975,"reverse_loop        : min:  513.7μs, mean:  552.6μs, max: 1125.8μs"
47976,"reverse_graphemes   : min: 3882.4μs, mean: 4130.9μs, max: 6416.2μs"
47977,#!/usr/bin/env python
47978,
47979,import numpy as np
47980,import random
47981,import timeit
47982,from functools import reduce
47983,random.seed(0)
47984,
47985,
47986,def main():
47987,"    longstring = ''.join(random.choices(""ABCDEFGHIJKLM"", k=2000))"
47988,"    functions = [(list_comprehension, 'list_comprehension', longstring),"
47989,"                 (reverse_func, 'reverse_func', longstring),"
47990,"                 (reverse_reduce, 'reverse_reduce', longstring),"
47991,"                 (reverse_loop, 'reverse_loop', longstring)"
47992,                 ]
47993,    duration_list = {}
47994,"    for func, name, params in functions:"
47995,"        durations = timeit.repeat(lambda: func(params), repeat=100, number=3)"
47996,        duration_list[name] = list(np.array(durations) * 1000)
47997,        print('{func:<20}: '
47998,"              'min: {min:5.1f}μs, mean: {mean:5.1f}μs, max: {max:6.1f}μs'"
47999,"              .format(func=name,"
48000,"                      min=min(durations) * 10**6,"
48001,"                      mean=np.mean(durations) * 10**6,"
48002,"                      max=max(durations) * 10**6,"
48003,                      ))
48004,"        create_boxplot('Reversing a string of length {}'.format(len(longstring)),"
48005,                       duration_list)
48006,
48007,
48008,def list_comprehension(string):
48009,    return string[::-1]
48010,
48011,
48012,def reverse_func(string):
48013,    return ''.join(reversed(string))
48014,
48015,
48016,def reverse_reduce(string):
48017,"    return reduce(lambda x, y: y + x, string)"
48018,
48019,
48020,def reverse_loop(string):
48021,"    reversed_str = """""
48022,    for i in string:
48023,        reversed_str = i + reversed_str
48024,    return reversed_str
48025,
48026,
48027,"def create_boxplot(title, duration_list, showfliers=False):"
48028,    import seaborn as sns
48029,    import matplotlib.pyplot as plt
48030,    import operator
48031,"    plt.figure(num=None, figsize=(8, 4), dpi=300,"
48032,"               facecolor='w', edgecolor='k')"
48033,"    sns.set(style=""whitegrid"")"
48034,"    sorted_keys, sorted_vals = zip(*sorted(duration_list.items(),"
48035,                                           key=operator.itemgetter(1)))
48036,"    flierprops = dict(markerfacecolor='0.75', markersize=1,"
48037,                      linestyle='none')
48038,"    ax = sns.boxplot(data=sorted_vals, width=.3, orient='h',"
48039,"                     flierprops=flierprops,"
48040,                     showfliers=showfliers)
48041,"    ax.set(xlabel=""Time in ms"", ylabel="""")"
48042,"    plt.yticks(plt.yticks()[0], sorted_keys)"
48043,    ax.set_title(title)
48044,    plt.tight_layout()
48045,"    plt.savefig(""output-string.png"")"
48046,
48047,
48048,if __name__ == '__main__':
48049,    main()
48050,def rev_string(s): 
48051,    return s[::-1]
48052,def rev_string(s): 
48053,    return ''.join(reversed(s))
48054,def rev_string(s): 
48055,    if len(s) == 1:
48056,        return s
48057,
48058,    return s[-1] + rev_string(s[:-1])
48059,RecursionError: maximum recursion depth exceeded while calling a Python object
48060,"rev_string(""abcdef""*1000)"
48061,string = 'happy'
48062,print(string)
48063,string_reversed = string[-1::-1]
48064,print(string_reversed)
48065,-1
48066,def reverse(test):
48067,    n = len(test)
48068,"    x="""""
48069,"    for i in range(n-1,-1,-1):"
48070,        x += test[i]
48071,    return x
48072,def reverse_words_1(s):
48073,    rev = ''
48074,    for i in range(len(s)):
48075,        j = ~i  # equivalent to j = -(i + 1)
48076,        rev += s[j]
48077,    return rev
48078,def reverse_words_2(s):
48079,    rev = ''
48080,    for i in reversed(range(len(s)):
48081,        rev += s[i]
48082,    return rev
48083,"b = bytearray('Reverse this!', 'UTF-8')"
48084,b.reverse()
48085,b.decode('UTF-8')`
48086,'!siht esreveR'
48087,def reverse(input):
48088,"    return reduce(lambda x,y : y+x, input)"
48089,def reverse(text):
48090,    r_text = ''
48091,    index = len(text) - 1
48092,
48093,    while index >= 0:
48094,        r_text += text[index] #string canbe concatenated
48095,        index -= 1
48096,
48097,    return r_text
48098,
48099,"print reverse(""hello, world!"")"
48100,"original = ""string"""
48101,
48102,rev_index = original[::-1]
48103,rev_func = list(reversed(list(original))) #nsfw
48104,
48105,print(original)
48106,print(rev_index)
48107,print(''.join(rev_func))
48108,def reverse_a_string(string: str) -> str:
48109,"    """""""
48110,    This method is used to reverse a string.
48111,    Args:
48112,        string: a string to reverse
48113,
48114,    Returns: a reversed string
48115,"    """""""
48116,    if type(string) != str:
48117,"        raise TypeError(""{0} This not a string, Please provide a string!"".format(type(string)))"
48118,"    string_place_holder = """""
48119,    start = 0
48120,    end = len(string) - 1
48121,    if end >= 1:
48122,        while start <= end:
48123,            string_place_holder = string_place_holder + string[end]
48124,            end -= 1
48125,        return string_place_holder
48126,    else:
48127,        return string
48128,
48129,
48130,"a = ""hello world"""
48131,rev = reverse_a_string(a)
48132,print(rev)
48133,dlrow olleh
48134,"string = ""python"""
48135,rev_string = string[::-1]
48136,print(rev_string)
48137,"string = ""python"""
48138,rev= reversed(string) 
48139,"rev_string = """".join(rev) "
48140,print(rev_string)
48141,"string = ""python"""
48142,def reverse(string):
48143,  if len(string)==0:
48144,    return string
48145,  else:
48146,    return reverse(string[1:])+string[0]
48147,print(reverse(string))
48148,"string = ""python"""
48149,"rev_string ="""""
48150,for s in string:
48151,  rev_string = s+ rev_string
48152,print(rev_string)
48153,"string = ""python"""
48154,"rev_str ="""""
48155,length = len(string)-1
48156,while length >=0:
48157,  rev_str += string[length]
48158,  length -= 1
48159,print(rev_str)
48160,def reverse(s): return s[0] if len(s)==1 else s[len(s)-1] + reverse(s[0:len(s)-1])
48161,"print(reverse(""Hello!""))    #!olleH"
48162,def reverse_string(string):
48163,    length = len(string)
48164,    temp = ''
48165,    for i in range(length):
48166,        temp += string[length - i - 1]
48167,    return temp
48168,
48169,"print(reverse_string('foo')) #prints ""oof"""
48170, a=input()
48171, print(a[::-1])
48172,>>> Happy 
48173,>>> yppaH
48174,>>> Have a happy day
48175,>>> yad yppah a evaH
48176,"a=input().split() #Splits the input on the basis of space ("" "")"
48177,for b in a: #declares that var (b) is any value in the list (a)
48178,"    print(b[::-1], end="" "") #End declares to print the character in its quotes ("" "") without a new line."
48179,>>> Have a happy day
48180,>>> evaH a yppah yad
48181,>>> Have a happy day
48182,>>> evaH
48183,>>> a
48184,>>> yppah
48185,>>> yad
48186,"for i in range(1,6):"
48187,     print(i) #Without end()
48188,>>> 1
48189,>>> 2
48190,>>> 3
48191,>>> 4
48192,>>> 5
48193,"for i in range(1,6):"
48194,"    print(i, end="" || "")"
48195,>>> 1 || 2 || 3 || 4 || 5 ||
48196,"string = ""hello,world"""
48197,"for i in range(-1,-len(string)-1,-1):"
48198,"    print (string[i], end=("" ""))"
48199,[::-1]
48200,reversed
48201,def reverse(text):
48202,    new_string = []
48203,    n = len(text)
48204,    while (n > 0):
48205,        new_string.append(text[n-1])
48206,        n -= 1
48207,    return ''.join(new_string)
48208,"print reverse(""abcd"")"
48209,+=
48210,join()
48211,def reverse(_str):
48212,    list_char = list(_str) # Create a hypothetical list. because string is immutable
48213,
48214,    for i in range(len(list_char)/2): # just t(n/2) to reverse a big string
48215,"        list_char[i], list_char[-i - 1] = list_char[-i - 1], list_char[i]"
48216,
48217,    return ''.join(list_char)
48218,
48219,"print(reverse(""Ehsan""))"
48220,>>> a = 'hello world'
48221,>>> ''.join(a[len(a) - i - 1] for i in range(len(a)))
48222,'dlrow olleh'
48223,>>> 
48224,"my_str = ""hello"
48225,my_str[::-1]
48226,""""".join(reversed(my_str))"
48227,[::-1]
48228,"_list = [12, 34, 5, 6, 7, 8, 98, 44, 25]"
48229,
48230,"for count, x in enumerate(_list, start=1):"
48231,    print(_list[len(_list) - count])
48232,.join
48233,[::-1]
48234,[::-1]
48235,timeit
48236,def reverse_string(phrase):
48237,"    reversed = """""
48238,    length = len(phrase)
48239,    for i in range(length):
48240,        reversed += phrase[length-1-i]
48241,    return reversed
48242,
48243,"phrase = raw_input(""Provide a string: "")"
48244,print reverse_string(phrase)
48245,s = 'hello'
48246,ln = len(s)
48247,i = 1
48248,while True:
48249,    rev = s[ln-i]
48250,"    print rev,"
48251,    i = i + 1
48252,    if i == ln + 1 :
48253,        break
48254,o l l e h
48255,string = [ char for char in reversed(string)]
48256,.join
48257,[c for c in string]
48258,list(string)
48259,"def recursive_function(n, sum):"
48260,    if n < 1:
48261,        return sum
48262,    else:
48263,"        return recursive_function(n-1, sum+n)"
48264,
48265,c = 998
48266,"print(recursive_function(c, 0))"
48267,n=997
48268,RecursionError: maximum recursion depth exceeded in comparison
48269,"line <n>, in <module>"
48270,n=1
48271,n < 1
48272,n=1
48273,997 + 2
48274,998 + 2
48275,recursive_function(997)
48276,998
48277,recursive_function(998)
48278,sys.getrecursionlimit
48279,import sys
48280,print(sys.getrecursionlimit())
48281,sys.setrecursionlimit
48282,sys.setrecursionlimit(1500)
48283,sys
48284,resource
48285,import sys
48286,sys.setrecursionlimit(1500)
48287,sys.setrecursionlimit
48288,sys.getrecursionlimit()
48289,setrecursionlimit()
48290,import sys
48291,
48292,class recursionlimit:
48293,"    def __init__(self, limit):"
48294,        self.limit = limit
48295,
48296,    def __enter__(self):
48297,        self.old_limit = sys.getrecursionlimit()
48298,        sys.setrecursionlimit(self.limit)
48299,
48300,"    def __exit__(self, type, value, tb):"
48301,        sys.setrecursionlimit(self.old_limit)
48302,with recursionlimit(1500):
48303,"    print(fib(1000, 0))"
48304,with
48305,ulimit
48306,limits.conf(5)
48307,resource
48308,setrecursionlimit
48309,resource.setrlimit
48310,getrlimit
48311,setrlimit
48312,resource
48313,sys.setrecursionlimit
48314,import resource
48315,import sys
48316,
48317,print resource.getrlimit(resource.RLIMIT_STACK)
48318,print sys.getrecursionlimit()
48319,print
48320,
48321,# Will segfault without this line.
48322,"resource.setrlimit(resource.RLIMIT_STACK, [0x10000000, resource.RLIM_INFINITY])"
48323,sys.setrecursionlimit(0x100000)
48324,
48325,def f(i):
48326,    print i
48327,    sys.stdout.flush()
48328,    f(i + 1)
48329,f(0)
48330,setrlimit
48331,ulimit -s
48332,ulimit -s 10000
48333,rlimit_stack
48334,ulimit -s
48335,def fibonacci(n):
48336,"    f = [0,1,1]"
48337,"    for i in xrange(3,n):"
48338,        f.append(f[i-1] + f[i-2])
48339,"    return 'The %.0fth fibonacci number is: %.0f' % (n,f[-1])"
48340,xrange
48341,range
48342,os.walk
48343,"from math import floor, sqrt"
48344,
48345,def fib(n):                                                     
48346,    return int(floor(((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))+0.5))
48347,2**n
48348,Fibonacci(n)
48349,n
48350,(1+sqrt(5))**n
48351,(1+sqrt(5))**(n+1)
48352,2**n
48353,from numpy import matrix
48354,
48355,def fib(n):
48356,"    return (matrix('0 1; 1 1', dtype='object') ** n).item(1)"
48357,@lru_cache
48358,setrecursionlimit()
48359,import sys
48360,from functools import lru_cache
48361,
48362,sys.setrecursionlimit(15000)
48363,
48364,
48365,@lru_cache(128)
48366,def fib(n: int) -> int:
48367,    if n == 0:
48368,        return 0
48369,    if n == 1:
48370,        return 1
48371,
48372,    return fib(n - 2) + fib(n - 1)
48373,
48374,
48375,print(fib(14000))

48377,def fib(n):
48378,    def fibseq(n):
48379,"        """""" Iteratively return the first n Fibonacci numbers, starting from 0. """""""
48380,"        a, b = 0, 1"
48381,        for _ in xrange(n):
48382,            yield a
48383,"            a, b = b, a + b"
48384,
48385,    return sum(v for v in fibseq(n))
48386,
48387,"print format(fib(100000), ',d')  # -> no recursion depth error"
48388,import sys
48389,"print(""Python Recursive Limitation = "", sys.getrecursionlimit())"
48390,import sys
48391,sys.setrecursionlimit(3000)
48392,sys.getrecursionlimit(n)
48393,def fib():
48394,"    a, b = 0, 1"
48395,    while True:
48396,        yield a
48397,"        a, b = b, a + b"
48398,
48399,fibs = fib() #seems to be the only way to get the following line to work is to
48400,             #assign the infinite generator to a variable
48401,
48402,f = [fibs.next() for x in xrange(1001)]
48403,
48404,for num in f:
48405,        print num
48406,fib()
48407,[fibs().next() for ...]
48408,islice
48409,islice
48410,"value = next(islice(fib(), 1000, 1001))"
48411,def fib(n):
48412,"    a,b = 1,1"
48413,    for i in range(n-1):
48414,"        a,b = b,a+b"
48415,    return a
48416,print fib(5)
48417,cache = {}
48418,def fib_dp(n):
48419,    if n in cache:
48420,        return cache[n]
48421,    if n == 0: return 0
48422,    elif n == 1: return 1
48423,    else:
48424,        value = fib_dp(n-1) + fib_dp(n-2)
48425,    cache[n] = value
48426,    return value
48427,
48428,print(fib_dp(998))
48429,import sys
48430,sys.setrecursionlimit(1500)
48431,
48432,"def fib(n, sum):"
48433,    if n < 1:
48434,        return sum
48435,    else:
48436,"        return fib(n-1, sum+n)"
48437,
48438,c = 998
48439,"print(fib(c, 0))"
48440,def fib_bottom_up(n):
48441,
48442,    bottom_up = [None] * (n+1)
48443,    bottom_up[0] = 1
48444,    bottom_up[1] = 1
48445,
48446,"    for i in range(2, n+1):"
48447,        bottom_up[i] = bottom_up[i-1] + bottom_up[i-2]
48448,
48449,    return bottom_up[n]
48450,
48451,print(fib_bottom_up(20000))
48452,def tail_recursive(func):
48453,  y_operator = (lambda f: (lambda y: y(y))(lambda x: f(lambda *args: lambda: x(x)(*args))))(func)
48454,  def wrap_func_tail(*args):
48455,    out = y_operator(*args)
48456,    while callable(out): out = out()
48457,    return out
48458,  return wrap_func_tail
48459,def my_recursive_func(g):
48460,"  def wrapped(some_arg, acc):"
48461,    if <condition>: return acc
48462,"    return g(some_arg, acc)"
48463,  return wrapped
48464,
48465,# and finally you call it in code
48466,
48467,"(tail_recursive(my_recursive_func))(some_arg, acc)"
48468,def fib(g):
48469,"  def wrapped(n_1, n_2, n):"
48470,    if n == 0: return n_1
48471,"    return g(n_2, n_1 + n_2, n-1)"
48472,  return wrapped
48473,
48474,"print((tail_recursive(fib))(0, 1, 1000000))"
48475,..684684301719893411568996526838242546875
48476,df
48477,a b
48478,A 1
48479,A 2
48480,B 5
48481,B 5
48482,B 4
48483,C 6
48484,"A [1,2]"
48485,"B [5,5,4]"
48486,C [6]
48487,groupby
48488,apply
48489,list
48490,"In [1]: df = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6]})"
48491,        df
48492,
48493,Out[1]: 
48494,   a  b
48495,0  A  1
48496,1  A  2
48497,2  B  5
48498,3  B  5
48499,4  B  4
48500,5  C  6
48501,
48502,In [2]: df.groupby('a')['b'].apply(list)
48503,Out[2]: 
48504,a
48505,"A       [1, 2]"
48506,"B    [5, 5, 4]"
48507,C          [6]
48508,"Name: b, dtype: object"
48509,
48510,In [3]: df1 = df.groupby('a')['b'].apply(list).reset_index(name='new')
48511,        df1
48512,Out[3]: 
48513,   a        new
48514,"0  A     [1, 2]"
48515,"1  B  [5, 5, 4]"
48516,2  C        [6]
48517,tuple
48518,df.groupby('a').agg({'b':lambda x: list(x)})
48519,lambda args: f(args)
48520,f
48521,agg(list)
48522,df.groupby('a').apply(list)
48523,df.groupby('a').agg({'b':list})
48524,"df.groupby('a').agg({'c':'first', 'b': lambda x: x.unique().tolist()})"
48525,import numpy as np
48526,
48527,"df = pd.DataFrame({'a': np.random.randint(0, 60, 600), 'b': [1, 2, 5, 5, 4, 6]*100})"
48528,
48529,def f(df):
48530,"         keys, values = df.sort_values('a').values.T"
48531,"         ukeys, index = np.unique(keys, True)"
48532,"         arrays = np.split(values, index[1:])"
48533,"         df2 = pd.DataFrame({'a':ukeys, 'b':[list(a) for a in arrays]})"
48534,         return df2
48535,In [301]: %timeit f(df)
48536,"1000 loops, best of 3: 1.64 ms per loop"
48537,
48538,In [302]: %timeit df.groupby('a')['b'].apply(list)
48539,"100 loops, best of 3: 5.26 ms per loop"
48540,".groupby([df.index.month, df.index.day])"
48541,.groupby('a')
48542,"In [5]: df = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6],'c'"
48543,"   ...: :[3,3,3,4,4,4]})"
48544,
48545,In [6]: df
48546,Out[6]: 
48547,   a  b  c
48548,0  A  1  3
48549,1  A  2  3
48550,2  B  5  3
48551,3  B  5  4
48552,4  B  4  4
48553,5  C  6  4
48554,
48555,In [7]: df.groupby('a').agg(lambda x: list(x))
48556,Out[7]: 
48557,           b          c
48558,a                      
48559,"A     [1, 2]     [3, 3]"
48560,"B  [5, 5, 4]  [3, 4, 4]"
48561,C        [6]        [4]
48562,groupby
48563,agg
48564,# Setup
48565,df = pd.DataFrame({
48566,"  'a': ['A', 'A', 'B', 'B', 'B', 'C'],"
48567,"  'b': [1, 2, 5, 5, 4, 6],"
48568,"  'c': ['x', 'y', 'z', 'x', 'y', 'z']"
48569,})
48570,df
48571,
48572,   a  b  c
48573,0  A  1  x
48574,1  A  2  y
48575,2  B  5  z
48576,3  B  5  x
48577,4  B  4  y
48578,5  C  6  z
48579,df.groupby('a').agg(list)
48580,df.groupby('a').agg(pd.Series.tolist)
48581,
48582,           b          c
48583,a                      
48584,"A     [1, 2]     [x, y]"
48585,"B  [5, 5, 4]  [z, x, y]"
48586,C        [6]        [z]
48587,SeriesGroupBy
48588,SeriesGroupBy.agg
48589,df.groupby('a').agg({'b': list})  # 4.42 ms 
48590,df.groupby('a')['b'].agg(list)    # 2.76 ms - faster
48591,
48592,a
48593,"A       [1, 2]"
48594,"B    [5, 5, 4]"
48595,C          [6]
48596,"Name: b, dtype: object"
48597,"groupby(..., sort=False)"
48598,df.groupby('a')['b'].agg(lambda x: list(set(x)))
48599,df.groupby('a').agg(lambda x: x.to_numpy().ravel().tolist())
48600,groupby
48601,pd.DataFrame
48602," L = ['A','A','B','B','B','C']"
48603," N = [1,2,5,5,4,6]"
48604,
48605, import pandas as pd
48606," df = pd.DataFrame(zip(L,N),columns = list('LN'))"
48607,
48608,
48609, groups = df.groupby(df.L)
48610,
48611, groups.groups
48612,"      {'A': [0, 1], 'B': [2, 3, 4], 'C': [5]}"
48613, groups.get_group('A')
48614,
48615,     L  N
48616,  0  A  1
48617,  1  A  2
48618,
48619,  groups.get_group('B')
48620,
48621,     L  N
48622,  2  B  5
48623,  3  B  5
48624,  4  B  4
48625,agg
48626,apply
48627,"df = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6], 'c': [1,2,5,5,4,6]})"
48628,pd.DataFrame
48629,"df.groupby('a')[['b', 'c']].agg(list)"
48630,# or 
48631,df.groupby('a').agg(list)
48632,ps.Series
48633,df.groupby('a')['b'].agg(list)
48634,#or
48635,df.groupby('a')['b'].apply(list)
48636,pd.DataFrame
48637,ps.Series
48638,pandas.pivot_table
48639,"""""""data"""""""
48640,"df = pd.DataFrame( {'a':['A','A','B','B','B','C'],"
48641,"                    'b':[1,2,5,5,4,6],"
48642,"                    'c':[1,2,1,1,1,6]})"
48643,print(df)
48644,
48645,   a  b  c
48646,0  A  1  1
48647,1  A  2  2
48648,2  B  5  1
48649,3  B  5  1
48650,4  B  4  1
48651,5  C  6  6
48652,"""""""pivot_table"""""""
48653,"pt = pd.pivot_table(df,"
48654,"                    values=['b', 'c'],"
48655,"                    index='a',"
48656,"                    aggfunc={'b': list,"
48657,                             'c': set})
48658,print(pt)
48659,           b       c
48660,a                   
48661,"A     [1, 2]  {1, 2}"
48662,"B  [5, 5, 4]     {1}"
48663,C        [6]     {6}
48664,df.groupby('a').agg(lambda x: list(set(x))).reset_index()
48665,"df.groupby('a').agg(b=('b','unique'), c=('c','unique'))"
48666,1.19.2
48667,1.2.1
48668,import pandas as pd
48669,import numpy as np
48670,
48671,np.random.seed(0)
48672,"df = pd.DataFrame({'a': np.random.randint(0, 10, 90), 'b': [1,2,3]*30, 'c':list('abcefghij')*10, 'd': list('hij')*30})"
48673,
48674,
48675,"def f_multi(df,col_names):"
48676,"    if not isinstance(col_names,list):"
48677,        col_names = [col_names]
48678,        
48679,    values = df.sort_values(col_names).values.T
48680,
48681,    col_idcs = [df.columns.get_loc(cn) for cn in col_names]
48682,"    other_col_names = [name for idx, name in enumerate(df.columns) if idx not in col_idcs]"
48683,    other_col_idcs = [df.columns.get_loc(cn) for cn in other_col_names]
48684,
48685,    # split df into indexing colums(=keys) and data colums(=vals)
48686,"    keys = values[col_idcs,:]"
48687,"    vals = values[other_col_idcs,:]"
48688,    
48689,    # list of tuple of key pairs
48690,    multikeys = list(zip(*keys))
48691,    
48692,    # remember unique key pairs and ther indices
48693,"    ukeys, index = np.unique(multikeys, return_index=True, axis=0)"
48694,    
48695,    # split data columns according to those indices
48696,"    arrays = np.split(vals, index[1:], axis=1)"
48697,
48698,    # resulting list of subarrays has same number of subarrays as unique key pairs
48699,    # each subarray has the following shape:
48700,    #    rows = number of non-grouped data columns
48701,    #    cols = number of data points grouped into that unique key pair
48702,    
48703,    # prepare multi index
48704,"    idx = pd.MultiIndex.from_arrays(ukeys.T, names=col_names) "
48705,
48706,    list_agg_vals = dict()
48707,"    for tup in zip(*arrays, other_col_names):"
48708,        col_vals = tup[:-1] # first entries are the subarrays from above 
48709,        col_name = tup[-1]  # last entry is data-column name
48710,        
48711,        list_agg_vals[col_name] = col_vals
48712,
48713,"    df2 = pd.DataFrame(data=list_agg_vals, index=idx)"
48714,    return df2
48715,"In [227]: %timeit f_multi(df, ['a','d'])"
48716,
48717,"2.54 ms ± 64.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
48718,
48719,"In [228]: %timeit df.groupby(['a','d']).agg(list)"
48720,
48721,"4.56 ms ± 61.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
48722,df.groupby
48723,Series
48724,"pd.Series({x : y.b.tolist() for x , y in df.groupby('a')})"
48725,Out[664]: 
48726,"A       [1, 2]"
48727,"B    [5, 5, 4]"
48728,C          [6]
48729,dtype: object
48730,    import pandas as pd
48731,
48732,    df = pd.read_csv('input.csv')
48733,
48734,    df
48735,    Out[1]:
48736,      Area  Keywords
48737,    0  A  1
48738,    1  A  2
48739,    2  B  5
48740,    3  B  5
48741,    4  B  4
48742,    5  C  6
48743,
48744,    df.dropna(inplace =  True)
48745,    df['Area']=df['Area'].apply(lambda x:x.lower().strip())
48746,    print df.columns
48747,"    df_op = df.groupby('Area').agg({""Keywords"":lambda x : ""|"".join(x)})"
48748,
48749,    df_op.to_csv('output.csv')
48750,    Out[2]:
48751,    df_op
48752,    Area  Keywords
48753,
48754,    A       [1| 2]
48755,    B    [5| 5| 4]
48756,    C          [6]
48757,"groupby is notoriously slow and memory hungry, what you could do is sort by column A, then find the idxmin and idxmax (probably store this in a dict) and use this to slice your dataframe would be faster I think "
48758,"df = pd.DataFrame(columns=['a', 'b'])"
48759,"df['a'] = (np.random.randint(low=0, high=500000, size=(20000000,))).astype(str)"
48760,df['b'] = list(range(20000000))
48761,print(df.shape)
48762,df.head()
48763,# Sort data by first column 
48764,"df.sort_values(by=['a'], ascending=True, inplace=True)"
48765,"df.reset_index(drop=True, inplace=True)"
48766,
48767,# Create a temp column
48768,df['temp_idx'] = list(range(df.shape[0]))
48769,
48770,# Take all values of b in a separate list
48771,all_values_b = list(df.b.values)
48772,print(len(all_values_b))
48773,"# For each category in column a, find min and max indexes"
48774,"gp_df = df.groupby(['a']).agg({'temp_idx': [np.min, np.max]})"
48775,gp_df.reset_index(inplace=True)
48776,"gp_df.columns = ['a', 'temp_idx_min', 'temp_idx_max']"
48777,
48778,"# Now create final list_b column, using min and max indexes for each category of a and filtering list of b. "
48779,"gp_df['list_b'] = gp_df[['temp_idx_min', 'temp_idx_max']].apply(lambda x: all_values_b[x[0]:x[1]+1], axis=1)"
48780,
48781,print(gp_df.shape)
48782,gp_df.head()
48783,O(nlog(n))
48784,pd.Series.to_list
48785,import pandas as pd
48786,from string import ascii_lowercase
48787,import random
48788,
48789,def generate_string(case=4):
48790,    return ''.join([random.choice(ascii_lowercase) for _ in range(case)])
48791,
48792,"df = pd.DataFrame({'num_val':[random.randint(0,100) for _ in range(20000000)],'string_val':[generate_string() for _ in range(20000000)]})"
48793,
48794,
48795,%timeit df.groupby('string_val').agg({'num_val':pd.Series.to_list})
48796,17.2 seconds
48797,apply(list)
48798,19.2
48799,20.6s
48800,Button
48801,for
48802,"def a(self, name):"
48803,    print(name)
48804,
48805,"users = {""Test"": ""127.0.0.0"", ""Test2"": ""128.0.0.0""}"
48806,row = 1
48807,for name in users:
48808,"    user_button = Tkinter.Button(self.root, text=name,"
48809,                                 command=lambda: self.a(name))
48810,"    user_button.grid(row=row, column=0)"
48811,    row += 1
48812,"""Test"""
48813,"""Test2"""
48814,"""Test2"""
48815,lambda
48816,for
48817,name
48818,name
48819,for
48820,name
48821,lambda
48822,"user_button = Tkinter.Button(self.root, text=name,"
48823,                             command=lambda name=name: self.a(name))
48824,name
48825,name
48826,pip install dulwich
48827,error: Unable to find vcvarsall.bat
48828,> python setup.py install
48829,running build_ext
48830,building 'dulwich._objects' extension
48831,error: Unable to find vcvarsall.bat
48832,C:\Users\User\libfreenect\wrappers\python>python setup.py install
48833,running install running build running build_ext building 'freenect' extension error: Unable to find vcvarsall.bat
48834,VS90COMNTOOLS
48835,setup.py
48836,SET VS90COMNTOOLS=%VS100COMNTOOLS%
48837,SET VS90COMNTOOLS=%VS110COMNTOOLS%
48838,SET VS90COMNTOOLS=%VS120COMNTOOLS%
48839,SET VS90COMNTOOLS=%VS140COMNTOOLS%
48840,C:\programs\mingw\
48841,c:\programs\MinGW\bin;
48842,C:\Python26\Lib\distutils\distutils.cfg
48843,[build]
48844,compiler=mingw32
48845,easy_install.exe amara
48846,cmd.exe
48847,C:\msysgit\mingw\mingw32\bin
48848,C:\msysgit\mingw\bin
48849,pip install
48850,gcc: error: unrecognized command line option '-mno-cygwin' error: Setup script exited with error: command 'gcc' failed with exit status 1
48851,easy_install.exe amara
48852,C:\Python27\Lib\distutils\cygwincompiler.py
48853,–mno-cygwin
48854,–mno-cygwin
48855,easy_install binary_installer_built_with_distutils.exe
48856,wheel convert ....exe
48857,python -m pip install <filename>
48858,python.exe
48859,get_build_version
48860,MSC v.1000 -> Visual C++ 4.x        
48861,MSC v.1100 -> Visual C++ 5          
48862,MSC v.1200 -> Visual C++ 6          
48863,MSC v.1300 -> Visual C++ .NET       
48864,MSC v.1310 -> Visual C++ .NET 2003  
48865,MSC v.1400 -> Visual C++ 2005  (8.0)
48866,MSC v.1500 -> Visual C++ 2008  (9.0)
48867,MSC v.1600 -> Visual C++ 2010 (10.0)
48868,MSC v.1700 -> Visual C++ 2012 (11.0)
48869,MSC v.1800 -> Visual C++ 2013 (12.0)
48870,MSC v.1900 -> Visual C++ 2015 (14.0)
48871,MSC v.1910 -> Visual C++ 2017 (15.0)
48872,MSC v.1911 -> Visual C++ 2017 (15.3)
48873,MSC v.1912 -> Visual C++ 2017 (15.5)
48874,MSC v.1913 -> Visual C++ 2017 (15.6)
48875,MSC v.1914 -> Visual C++ 2017 (15.7)
48876,MSC v.1915 -> Visual C++ 2017 (15.8)
48877,MSC v.1916 -> Visual C++ 2017 (15.9)   
48878,Developer Tools >> Visual C++ Compilers
48879,cmd.exe
48880,C:\Program Files\
48881,"""C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat"""
48882,"""C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\vsvars64.bat"""
48883,Program Files (x86)
48884,vcvars64.bat
48885,vcvarsx86_amd64.bat
48886,amd64
48887,x86_amd64
48888,error: ... was unexpected at this time.
48889,...
48890,Setting environment for using Microsoft Visual Studio 20xx x86 tools.
48891,Setting environment for using Microsoft Visual Studio 20xx x64 tools.
48892,python setup.py install
48893,pip install pkg-name
48894,...\VC\bin\vcvarsamd64.bat
48895,...\VC\bin\amd64\vcvarsamd64.bat
48896,setup.py
48897,setuptools
48898,6.0
48899,pip install setuptools --upgrade
48900,sys.version
48901,MSC
48902,MSC v.1500
48903,setuptools
48904,setuptools.setup()
48905,distutils
48906,setuptools
48907,pip install setuptools --upgrade
48908,setuptools
48909,distutils
48910,distutils
48911,setuptools
48912,setuptools
48913,distutils
48914,distitutils
48915,error: Unable to find vcvarsall.bat
48916,setup.py install build --compiler=mingw32
48917,configure: error: cannot run C compiled programs.
48918,cc1.exe: error: unrecognized command line option '-mno-cygwin' 
48919,error: command 'gcc' failed with exit status 1
48920,-c mingw32
48921,python setup.py install -c mingw32
48922,python setup.py build --compiler=mingw32
48923,python setup.py install
48924,C:\programs\mingw\bin;
48925,C:\Python27\Lib\distutils\distutils.cfg
48926,[build]
48927,compiler=mingw32
48928,"  self.set_executables(compiler='gcc -O -Wall',"
48929,"                         compiler_so='gcc -mdll -O -Wall',"
48930,"                         compiler_cxx='g++ -O -Wall',"
48931,"                         linker_exe='gcc',"
48932,                         linker_so='%s %s %s'
48933,"                                    % (self.linker_dll, shared_option,"
48934,                                       entry_point))
48935,setup.py
48936,distutils.core.setup()
48937,setuptools.setup()
48938,distutils.core.setup()
48939,python setup.py build
48940,pip
48941,setup.py
48942,python setup.py build
48943,distutils.core.setup()
48944,SET DISTUTILS_USE_SDK=1
48945,SET MSSdk=1
48946,cd
48947,python setup.py build
48948,python setup.py install
48949,set VS90COMNTOOLS=%VS80COMNTOOLS%
48950,python.exe setup.py install
48951,vcvars64.bat
48952,C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64
48953,"CALL ""C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd"" /x64"
48954,pip install numpy
48955,"File ""numpy\core\setup.py"", line 686, in get_mathlib_info"
48956,"raise RuntimeError(""Broken toolchain: cannot link a simple C program"")"
48957,RuntimeError: Broken toolchain: cannot link a simple C program
48958,mfinfo
48959,None
48960,C:\Python34\Lib\distutils\msvc9compiler.py
48961,pip install numpy
48962,numpy
48963,numpy‑1.9.2+mkl‑cp34‑none‑win_amd64.whl
48964,pip install numpy‑1.9.2+mkl‑cp34‑none‑win_amd64.whl
48965,C:\Users\Andreas\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0
48966,C:/Python27/lib/distutils
48967,"productdir = os.path.join(toolsdir, os.pardir, os.pardir, ""VC"")"
48968,productdir = os.path.join(toolsdir)
48969,%userprofile%\Appdata\Local\Programs\Common
48970,visualcppbuildtools_full.exe
48971,Python 3.6 on Windows 7 64-bit
48972,Python 3.7 on Windows Server 2016 (64-bit system)
48973,Python 3.8 on Windows 10 64-bit
48974,vcvarsall.bat
48975,C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC
48976,C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools
48977,query_vcvarsall    raise ValueError(str(list(result.keys())))ValueError: [u'path']
48978,installation failed with return code 5100
48979,C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin
48980,CALL setenv /x64
48981,C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64\vcvars64.bat
48982,CALL setenv /x64
48983,"    #productdir = os.path.join(toolsdir, os.pardir, os.pardir, ""VC"")"
48984,"    productdir = os.path.join(toolsdir, os.pardir, os.pardir)"
48985,import setuptools
48986,vcvars32.bat
48987,# cython_setup.py
48988,"import sys, os, time, platform, subprocess"
48989,"from setuptools import setup, find_packages"
48990,from Cython.Build import cythonize
48991,from traceback import format_exc
48992,
48993,# USAGE:
48994,#
48995,#   from cython_setup import run
48996,#   run(pyx_path)
48997,
48998,"# vcvars = r""C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"""
48999,
49000,# NOTE: to use visual studio 2017 you must have setuptools version 34+
49001,"vcvars = r""C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars32.bat"""
49002,
49003,
49004,def _build_ext():
49005,    try:
49006,        pyx_path = sys.argv.pop(-1)
49007,        pyx_path = os.path.abspath(pyx_path)
49008,        if not os.path.exists(pyx_path):
49009,"            raise FileNotFoundError(f""{pyx_path} does not exist"")"
49010,        project_name = sys.argv.pop(-1)
49011,        os.chdir(os.path.abspath(os.path.dirname(pyx_path)))
49012,
49013,"        print(""cwd: %s"" % os.getcwd())"
49014,"        print(os.path.abspath(""build""))"
49015,        setup(
49016,"            name=project_name,"
49017,"            # cmdclass = {'build_ext': build_ext},"
49018,"            packages=find_packages(),"
49019,            # ext_modules=cythonize(extensions)
49020,"            ext_modules=cythonize(pyx_path,"
49021,"                                  compiler_directives={'language_level': 3, 'infer_types': True, 'binding': False},"
49022,"                                  annotate=True),"
49023,            # include_dirs = [numpy.get_include()]
49024,"            build_dir=os.path.abspath(""build"")"
49025,        )
49026,    except:
49027,        input(format_exc())
49028,
49029,
49030,def retry(func):
49031,"    def wrapper(*args, **kw):"
49032,        tries = 0
49033,        while True:
49034,            try:
49035,"                return func(*args, **kw)"
49036,            except Exception:
49037,                tries += 1
49038,                if tries > 4:
49039,                    raise
49040,                time.sleep(0.4)
49041,
49042,    return wrapper
49043,
49044,
49045,@retry
49046,def cleanup(pyx_path):
49047,    from send2trash import send2trash
49048,"    c_file = os.path.splitext(pyx_path)[0] + "".c"""
49049,    if os.path.exists(c_file):
49050,        os.remove(c_file)
49051,
49052,"    if os.path.exists(""build""):"
49053,"        send2trash(""build"")"
49054,
49055,
49056,def move_pyd_files(pyx_path):
49057,    pyx_dir = os.path.dirname(pyx_path)
49058,"    build_dir = os.path.join(pyx_dir, ""build"")"
49059,    if not os.path.exists(build_dir):
49060,"        raise RuntimeError(f""build_dir {build_dir} did not exist...."")"
49061,    found_pyd = False
49062,"    for top, dirs, nondirs in os.walk(build_dir):"
49063,        for name in nondirs:
49064,"            if name.lower().endswith("".pyd"") or name.lower().endswith("".so""):"
49065,                found_pyd = True
49066,"                old_path = os.path.join(top, name)"
49067,"                new_path = os.path.join(pyx_dir, name)"
49068,                if os.path.exists(new_path):
49069,"                    print(f""removing {new_path}"")"
49070,                    os.remove(new_path)
49071,"                print(f""file created at {new_path}"")"
49072,"                os.rename(old_path, new_path)"
49073,    if not found_pyd:
49074,"        raise RuntimeError(""Never found .pyd file to move"")"
49075,
49076,def run(pyx_path):
49077,"    """""""
49078,    :param pyx_path:
49079,    :type pyx_path:
49080,"    :return: this function creates the batch file, which in turn calls this module, which calls cythonize, once done"
49081,"    the batch script deletes itself... I'm sure theres a less convoluted way of doing this, but it works"
49082,    :rtype:
49083,"    """""""
49084,    try:
49085,        project_name = os.path.splitext(os.path.basename(pyx_path))[0]
49086,"        run_script(project_name, os.path.abspath(pyx_path))"
49087,    except:
49088,        input(format_exc())
49089,
49090,
49091,"def run_script(project_name, pyx_path):"
49092,    dirname = os.path.dirname(pyx_path)
49093,    # ------------------------------
49094,    os.chdir(dirname)
49095,    if os.path.exists(vcvars):
49096,        #  raise RuntimeError(
49097,"        # f""Could not find vcvars32.bat at {vcvars}\nis Visual Studio Installed?\nIs setuptools version > 34?"")"
49098,"        subprocess.check_call(f'call ""{vcvars}""', shell=True)"
49099,
49100,"    cmd = ""python"" if platform.system() == ""Windows"" else ""python3"""
49101,"    subprocess.check_call(f'{cmd} ""{__file__}"" build_ext ""{project_name}"" ""{pyx_path}""', shell=True)"
49102,    move_pyd_files(pyx_path)
49103,    cleanup(pyx_path)
49104,
49105,
49106,if len(sys.argv) > 2:
49107,    _build_ext()
49108,setuptools
49109,pip install --upgrade setuptools
49110,pip install --global-option build_ext --global-option --compiler=mingw32 packagename
49111,error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from http://aka.ms/vcpython27
49112,vcpython27
49113,> iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
49114,> choco install python2 -y
49115,> choco install vcpython27 -y
49116,distutils
49117,setuptools
49118,setuptools
49119,distutils
49120,[python installation directory or virtualenv]\Lib\site-packages
49121,error: Setup script exited with error: Unable to find vcvarsall.bat
49122,def get_primes(n):
49123,"    numbers = set(range(n, 1, -1))"
49124,    primes = []
49125,    while numbers:
49126,        p = numbers.pop()
49127,        primes.append(p)
49128,"        numbers.difference_update(set(range(p*2, n+1, p)))"
49129,    return primes
49130,
49131,">>> timeit.Timer(stmt='get_primes.get_primes(1000000)', setup='import   get_primes').timeit(1)"
49132,1.1499958793645562
49133,numbers
49134,numbers.pop()
49135,>>> sum(get_primes(2000000))
49136,142913828922L
49137,#That's the correct sum of all numbers below 2 million
49138,>>> 529 in get_primes(1000)
49139,False
49140,>>> 529 in get_primes(530)
49141,True
49142,timeit
49143,+---------------------+-------+
49144,| Method              | ms    |
49145,+---------------------+-------+
49146,| rwh_primes1         | 43.0  |
49147,| sieveOfAtkin        | 46.4  |
49148,| rwh_primes          | 57.4  |
49149,| sieve_wheel_30      | 63.0  |
49150,| rwh_primes2         | 67.8  |    
49151,| sieveOfEratosthenes | 147.0 |
49152,| ambi_sieve_plain    | 152.0 |
49153,| sundaram3           | 194.0 |
49154,+---------------------+-------+
49155,+---------------------+-------+
49156,| Method              | ms    |
49157,+---------------------+-------+
49158,| rwh_primes2         | 68.1  |
49159,| rwh_primes1         | 93.7  |
49160,| rwh_primes          | 94.6  |
49161,| sieve_wheel_30      | 97.4  |
49162,| sieveOfEratosthenes | 178.0 |
49163,| ambi_sieve_plain    | 286.0 |
49164,| sieveOfAtkin        | 314.0 |
49165,| sundaram3           | 416.0 |
49166,+---------------------+-------+
49167,+---------------------+-------+
49168,| Method              | ms    |
49169,+---------------------+-------+
49170,| primesfrom2to       | 15.9  |
49171,| primesfrom3to       | 18.4  |
49172,| ambi_sieve          | 29.3  |
49173,+---------------------+-------+
49174,"python -mtimeit -s""import primes"" ""primes.{method}(1000000)"""
49175,{method}
49176,#!/usr/bin/env python
49177,import psyco; psyco.full()
49178,"from math import sqrt, ceil"
49179,import numpy as np
49180,
49181,def rwh_primes(n):
49182,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49183,"    """""" Returns  a list of primes < n """""""
49184,    sieve = [True] * n
49185,"    for i in xrange(3,int(n**0.5)+1,2):"
49186,        if sieve[i]:
49187,            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
49188,"    return [2] + [i for i in xrange(3,n,2) if sieve[i]]"
49189,
49190,def rwh_primes1(n):
49191,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49192,"    """""" Returns  a list of primes < n """""""
49193,    sieve = [True] * (n/2)
49194,"    for i in xrange(3,int(n**0.5)+1,2):"
49195,        if sieve[i/2]:
49196,            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)
49197,"    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]"
49198,
49199,def rwh_primes2(n):
49200,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49201,"    """""" Input n>=6, Returns a list of primes, 2 <= p < n """""""
49202,    correction = (n%6>1)
49203,"    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]"
49204,    sieve = [True] * (n/3)
49205,    sieve[0] = False
49206,    for i in xrange(int(n**0.5)/3+1):
49207,      if sieve[i]:
49208,        k=3*i+1|1
49209,        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)
49210,        sieve[(k*k+4*k-2*k*(i&1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&1))/6-1)/k+1)
49211,"    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]"
49212,
49213,def sieve_wheel_30(N):
49214,    # http://zerovolt.com/?p=88
49215,    ''' Returns a list of primes <= N using wheel criterion 2*3*5 = 30
49216,
49217,Copyright 2009 by zerovolt.com
49218,"This code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work."
49219,"If you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''"
49220,"    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,"
49221,"    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,"
49222,"    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,"
49223,"    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,"
49224,"    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,"
49225,"    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,"
49226,"    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,"
49227,"    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,"
49228,"    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,"
49229,"    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,"
49230,"    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)"
49231,
49232,"    wheel = (2, 3, 5)"
49233,    const = 30
49234,    if N < 2:
49235,        return []
49236,    if N <= const:
49237,        pos = 0
49238,        while __smallp[pos] <= N:
49239,            pos += 1
49240,        return list(__smallp[:pos])
49241,    # make the offsets list
49242,"    offsets = (7, 11, 13, 17, 19, 23, 29, 1)"
49243,    # prepare the list
49244,"    p = [2, 3, 5]"
49245,    dim = 2 + N // const
49246,    tk1  = [True] * dim
49247,    tk7  = [True] * dim
49248,    tk11 = [True] * dim
49249,    tk13 = [True] * dim
49250,    tk17 = [True] * dim
49251,    tk19 = [True] * dim
49252,    tk23 = [True] * dim
49253,    tk29 = [True] * dim
49254,    tk1[0] = False
49255,    # help dictionary d
49256,"    # d[a , b] = c  ==> if I want to find the smallest useful multiple of (30*pos)+a"
49257,"    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]"
49258,"    # in general. If b < a, I need [(30*pos)+a][(30*(pos+1))+b]"
49259,    d = {}
49260,    for x in offsets:
49261,        for y in offsets:
49262,            res = (x*y) % const
49263,            if res in offsets:
49264,"                d[(x, res)] = y"
49265,    # another help dictionary: gives tkx calling tmptk[x]
49266,"    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}"
49267,"    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))"
49268,    # inner functions definition
49269,"    def del_mult(tk, start, step):"
49270,"        for k in xrange(start, len(tk), step):"
49271,            tk[k] = False
49272,    # end of inner functions definition
49273,    cpos = const * pos
49274,    while prime < stop:
49275,        # 30k + 7
49276,        if tk7[pos]:
49277,            prime = cpos + 7
49278,            p.append(prime)
49279,            lastadded = 7
49280,            for off in offsets:
49281,"                tmp = d[(7, off)]"
49282,                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp < 7 else 0) + tmp) )//const
49283,"                del_mult(tmptk[off], start, prime)"
49284,        # 30k + 11
49285,        if tk11[pos]:
49286,            prime = cpos + 11
49287,            p.append(prime)
49288,            lastadded = 11
49289,            for off in offsets:
49290,"                tmp = d[(11, off)]"
49291,                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp < 11 else 0) + tmp) )//const
49292,"                del_mult(tmptk[off], start, prime)"
49293,        # 30k + 13
49294,        if tk13[pos]:
49295,            prime = cpos + 13
49296,            p.append(prime)
49297,            lastadded = 13
49298,            for off in offsets:
49299,"                tmp = d[(13, off)]"
49300,                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp < 13 else 0) + tmp) )//const
49301,"                del_mult(tmptk[off], start, prime)"
49302,        # 30k + 17
49303,        if tk17[pos]:
49304,            prime = cpos + 17
49305,            p.append(prime)
49306,            lastadded = 17
49307,            for off in offsets:
49308,"                tmp = d[(17, off)]"
49309,                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp < 17 else 0) + tmp) )//const
49310,"                del_mult(tmptk[off], start, prime)"
49311,        # 30k + 19
49312,        if tk19[pos]:
49313,            prime = cpos + 19
49314,            p.append(prime)
49315,            lastadded = 19
49316,            for off in offsets:
49317,"                tmp = d[(19, off)]"
49318,                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp < 19 else 0) + tmp) )//const
49319,"                del_mult(tmptk[off], start, prime)"
49320,        # 30k + 23
49321,        if tk23[pos]:
49322,            prime = cpos + 23
49323,            p.append(prime)
49324,            lastadded = 23
49325,            for off in offsets:
49326,"                tmp = d[(23, off)]"
49327,                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp < 23 else 0) + tmp) )//const
49328,"                del_mult(tmptk[off], start, prime)"
49329,        # 30k + 29
49330,        if tk29[pos]:
49331,            prime = cpos + 29
49332,            p.append(prime)
49333,            lastadded = 29
49334,            for off in offsets:
49335,"                tmp = d[(29, off)]"
49336,                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp < 29 else 0) + tmp) )//const
49337,"                del_mult(tmptk[off], start, prime)"
49338,"        # now we go back to top tk1, so we need to increase pos by 1"
49339,        pos += 1
49340,        cpos = const * pos
49341,        # 30k + 1
49342,        if tk1[pos]:
49343,            prime = cpos + 1
49344,            p.append(prime)
49345,            lastadded = 1
49346,            for off in offsets:
49347,"                tmp = d[(1, off)]"
49348,                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const
49349,"                del_mult(tmptk[off], start, prime)"
49350,    # time to add remaining primes
49351,"    # if lastadded == 1, remove last element and start adding them from tk1"
49352,"    # this way we don't need an ""if"" within the last while"
49353,    if lastadded == 1:
49354,        p.pop()
49355,    # now complete for every other possible prime
49356,    while pos < len(tk1):
49357,        cpos = const * pos
49358,        if tk1[pos]: p.append(cpos + 1)
49359,        if tk7[pos]: p.append(cpos + 7)
49360,        if tk11[pos]: p.append(cpos + 11)
49361,        if tk13[pos]: p.append(cpos + 13)
49362,        if tk17[pos]: p.append(cpos + 17)
49363,        if tk19[pos]: p.append(cpos + 19)
49364,        if tk23[pos]: p.append(cpos + 23)
49365,        if tk29[pos]: p.append(cpos + 29)
49366,        pos += 1
49367,    # remove exceeding if present
49368,    pos = len(p) - 1
49369,    while p[pos] > N:
49370,        pos -= 1
49371,    if pos < len(p) - 1:
49372,        del p[pos+1:]
49373,    # return p list
49374,    return p
49375,
49376,def sieveOfEratosthenes(n):
49377,"    """"""sieveOfEratosthenes(n): return the list of the primes < n."""""""
49378,"    # Code from: <dickinsm@gmail.com>, Nov 30 2006"
49379,    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d
49380,    if n <= 2:
49381,        return []
49382,"    sieve = range(3, n, 2)"
49383,    top = len(sieve)
49384,    for si in sieve:
49385,        if si:
49386,            bottom = (si*si - 3) // 2
49387,            if bottom >= top:
49388,                break
49389,            sieve[bottom::si] = [0] * -((bottom - top) // si)
49390,    return [2] + [el for el in sieve if el]
49391,
49392,def sieveOfAtkin(end):
49393,"    """"""sieveOfAtkin(end): return a list of all the prime numbers <end"
49394,"    using the Sieve of Atkin."""""""
49395,"    # Code by Steve Krenzel, <Sgk284@gmail.com>, improved"
49396,    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83
49397,    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin
49398,    assert end > 0
49399,    lng = ((end-1) // 2)
49400,    sieve = [False] * (lng + 1)
49401,
49402,"    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4"
49403,"    for xd in xrange(4, 8*x_max + 2, 8):"
49404,        x2 += xd
49405,        y_max = int(sqrt(end-x2))
49406,"        n, n_diff = x2 + y_max*y_max, (y_max << 1) - 1"
49407,        if not (n & 1):
49408,            n -= n_diff
49409,            n_diff -= 2
49410,"        for d in xrange((n_diff - 1) << 1, -1, -8):"
49411,            m = n % 12
49412,            if m == 1 or m == 5:
49413,                m = n >> 1
49414,                sieve[m] = not sieve[m]
49415,            n -= d
49416,
49417,"    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3"
49418,"    for xd in xrange(3, 6 * x_max + 2, 6):"
49419,        x2 += xd
49420,        y_max = int(sqrt(end-x2))
49421,"        n, n_diff = x2 + y_max*y_max, (y_max << 1) - 1"
49422,        if not(n & 1):
49423,            n -= n_diff
49424,            n_diff -= 2
49425,"        for d in xrange((n_diff - 1) << 1, -1, -8):"
49426,            if n % 12 == 7:
49427,                m = n >> 1
49428,                sieve[m] = not sieve[m]
49429,            n -= d
49430,
49431,"    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3"
49432,"    for x in xrange(1, x_max + 1):"
49433,        x2 += xd
49434,        xd += 6
49435,        if x2 >= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) << 1) - 2) << 1
49436,"        n, n_diff = ((x*x + x) << 1) - 1, (((x-1) << 1) - 2) << 1"
49437,"        for d in xrange(n_diff, y_min, -8):"
49438,            if n % 12 == 11:
49439,                m = n >> 1
49440,                sieve[m] = not sieve[m]
49441,            n += d
49442,
49443,"    primes = [2, 3]"
49444,    if end <= 3:
49445,"        return primes[:max(0,end-2)]"
49446,
49447,"    for n in xrange(5 >> 1, (int(sqrt(end))+1) >> 1):"
49448,        if sieve[n]:
49449,            primes.append((n << 1) + 1)
49450,            aux = (n << 1) + 1
49451,            aux *= aux
49452,"            for k in xrange(aux, end, 2 * aux):"
49453,                sieve[k >> 1] = False
49454,
49455,    s  = int(sqrt(end)) + 1
49456,    if s  % 2 == 0:
49457,        s += 1
49458,"    primes.extend([i for i in xrange(s, end, 2) if sieve[i >> 1]])"
49459,
49460,    return primes
49461,
49462,def ambi_sieve_plain(n):
49463,"    s = range(3, n, 2)"
49464,"    for m in xrange(3, int(n**0.5)+1, 2): "
49465,        if s[(m-3)/2]: 
49466,"            for t in xrange((m*m-3)/2,(n>>1)-1,m):"
49467,                s[t]=0
49468,    return [2]+[t for t in s if t>0]
49469,
49470,def sundaram3(max_n):
49471,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279
49472,"    numbers = range(3, max_n+1, 2)"
49473,    half = (max_n)//2
49474,    initial = 4
49475,
49476,"    for step in xrange(3, max_n+1, 2):"
49477,"        for i in xrange(initial, half, step):"
49478,            numbers[i-1] = 0
49479,        initial += 2*(step+1)
49480,
49481,        if initial > half:
49482,"            return [2] + filter(None, numbers)"
49483,
49484,################################################################################
49485,# Using Numpy:
49486,def ambi_sieve(n):
49487,    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html
49488,"    s = np.arange(3, n, 2)"
49489,"    for m in xrange(3, int(n ** 0.5)+1, 2): "
49490,        if s[(m-3)/2]: 
49491,            s[(m*m-3)/2::m]=0
49492,"    return np.r_[2, s[s>0]]"
49493,
49494,def primesfrom3to(n):
49495,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49496,"    """""" Returns a array of primes, p < n """""""
49497,    assert n>=2
49498,"    sieve = np.ones(n/2, dtype=np.bool)"
49499,"    for i in xrange(3,int(n**0.5)+1,2):"
49500,        if sieve[i/2]:
49501,            sieve[i*i/2::i] = False
49502,"    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    "
49503,
49504,def primesfrom2to(n):
49505,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49506,"    """""" Input n>=6, Returns a array of primes, 2 <= p < n """""""
49507,"    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)"
49508,    sieve[0] = False
49509,    for i in xrange(int(n**0.5)/3+1):
49510,        if sieve[i]:
49511,            k=3*i+1|1
49512,            sieve[      ((k*k)/3)      ::2*k] = False
49513,            sieve[(k*k+4*k-2*k*(i&1))/3::2*k] = False
49514,"    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]"
49515,
49516,if __name__=='__main__':
49517,    import itertools
49518,    import sys
49519,
49520,"    def test(f1,f2,num):"
49521,        print('Testing {f1} and {f2} return same results'.format(
49522,"            f1=f1.func_name,"
49523,            f2=f2.func_name))
49524,"        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):"
49525,"            sys.exit(""Error: %s(%s) != %s(%s)""%(f1.func_name,num,f2.func_name,num))"
49526,
49527,    n=1000000
49528,"    test(sieveOfAtkin,sieveOfEratosthenes,n)"
49529,"    test(sieveOfAtkin,ambi_sieve,n)"
49530,"    test(sieveOfAtkin,ambi_sieve_plain,n) "
49531,"    test(sieveOfAtkin,sundaram3,n)"
49532,"    test(sieveOfAtkin,sieve_wheel_30,n)"
49533,"    test(sieveOfAtkin,primesfrom3to,n)"
49534,"    test(sieveOfAtkin,primesfrom2to,n)"
49535,"    test(sieveOfAtkin,rwh_primes,n)"
49536,"    test(sieveOfAtkin,rwh_primes1,n)         "
49537,"    test(sieveOfAtkin,rwh_primes2,n)"
49538,gmpy
49539,next_prime
49540,mpz
49541,def primes(n):
49542,"    """""" Returns  a list of primes < n """""""
49543,    sieve = [True] * n
49544,"    for i in range(3,int(n**0.5)+1,2):"
49545,        if sieve[i]:
49546,            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)
49547,"    return [2] + [i for i in range(3,n,2) if sieve[i]]"
49548,def primes1(n):
49549,"    """""" Returns  a list of primes < n """""""
49550,    sieve = [True] * (n//2)
49551,"    for i in range(3,int(n**0.5)+1,2):"
49552,        if sieve[i//2]:
49553,            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
49554,"    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]"
49555,import numpy
49556,def primesfrom3to(n):
49557,"    """""" Returns a array of primes, 3 <= p < n """""""
49558,"    sieve = numpy.ones(n//2, dtype=bool)"
49559,"    for i in range(3,int(n**0.5)+1,2):"
49560,        if sieve[i//2]:
49561,            sieve[i*i//2::i] = False
49562,    return 2*numpy.nonzero(sieve)[0][1::]+1
49563,import numpy
49564,def primesfrom2to(n):
49565,"    """""" Input n>=6, Returns a array of primes, 2 <= p < n """""""
49566,"    sieve = numpy.ones(n//3 + (n%6==2), dtype=bool)"
49567,"    for i in range(1,int(n**0.5)//3+1):"
49568,        if sieve[i]:
49569,            k=3*i+1|1
49570,            sieve[       k*k//3     ::2*k] = False
49571,            sieve[k*(k-2*(i&1)+4)//3::2*k] = False
49572,"    return numpy.r_[2,3,((3*numpy.nonzero(sieve)[0][1:]+1)|1)]"
49573,def primes2(n):
49574,"    """""" Input n>=6, Returns a list of primes, 2 <= p < n """""""
49575,"    n, correction = n-n%6+6, 2-(n%6>1)"
49576,    sieve = [True] * (n//3)
49577,"    for i in range(1,int(n**0.5)//3+1):"
49578,      if sieve[i]:
49579,        k=3*i+1|1
49580,        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)
49581,        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)
49582,"    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]"
49583,len()
49584,[False]*len(sieve[((k*k)//3)::2*k])
49585,bitarray
49586,primesfrom2to()
49587,import itertools
49588,def erat2( ):
49589,    D = {  }
49590,    yield 2
49591,"    for q in itertools.islice(itertools.count(3), 0, None, 2):"
49592,"        p = D.pop(q, None)"
49593,        if p is None:
49594,            D[q*q] = q
49595,            yield q
49596,        else:
49597,            x = p + q
49598,            while x in D or not (x&1):
49599,                x += p
49600,            D[x] = p
49601,def get_primes_erat(n):
49602,"  return list(itertools.takewhile(lambda p: p<n, erat2()))"
49603,$ python2.5 -mtimeit -s'import pri' 'pri.get_primes(1000000)'
49604,"10 loops, best of 3: 1.69 sec per loop"
49605,$ python2.5 -mtimeit -s'import pri' 'pri.get_primes_erat(1000000)'
49606,"10 loops, best of 3: 673 msec per loop"
49607,def sundaram3(max_n):
49608,"    numbers = range(3, max_n+1, 2)"
49609,    half = (max_n)//2
49610,    initial = 4
49611,
49612,"    for step in xrange(3, max_n+1, 2):"
49613,"        for i in xrange(initial, half, step):"
49614,            numbers[i-1] = 0
49615,        initial += 2*(step+1)
49616,
49617,        if initial > half:
49618,"            return [2] + filter(None, numbers)"
49619,"C:\USERS>python -m timeit -n10 -s ""import get_primes"" ""get_primes.get_primes_erat(1000000)"""
49620,"10 loops, best of 3: 710 msec per loop"
49621,
49622,"C:\USERS>python -m timeit -n10 -s ""import get_primes"" ""get_primes.daniel_sieve_2(1000000)"""
49623,"10 loops, best of 3: 435 msec per loop"
49624,
49625,"C:\USERS>python -m timeit -n10 -s ""import get_primes"" ""get_primes.sundaram3(1000000)"""
49626,"10 loops, best of 3: 327 msec per loop"
49627,None
49628,zero.__sub__
49629,sundaram3(9)
49630,"[2, 3, 5, 7, 9]"
49631,>>> sorted(get_primes(530))
49632,"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,"
49633,"79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,"
49634,"167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,"
49635,"257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,"
49636,"353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,"
49637,"449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 527, 529]"
49638,>>> 17*31
49639,527
49640,>>> 23*23
49641,529
49642,numbers.pop()
49643,pop()
49644,"for pos,i in enumerate(primes):"
49645,    if i > N:
49646,        print primes[:pos]
49647,N > primes[-1]
49648,pip install sympy
49649,from sympy import sieve
49650,"primes = list(sieve.primerange(1, 10**6))"
49651,primesfrom2to(10000)
49652,[   2    3    5 ... 9949 9967 9973]
49653,nd.array
49654,import itertools
49655,izip = itertools.zip_longest
49656,chain = itertools.chain.from_iterable
49657,compress = itertools.compress
49658,def rwh_primes2_python3(n):
49659,"    """""" Input n>=6, Returns a list of primes, 2 <= p < n """""""
49660,    zero = bytearray([False])
49661,    size = n//3 + (n % 6 == 2)
49662,    sieve = bytearray([True]) * size
49663,    sieve[0] = False
49664,    for i in range(int(n**0.5)//3+1):
49665,      if sieve[i]:
49666,        k=3*i+1|1
49667,        start = (k*k+4*k-2*k*(i&1))//3
49668,        sieve[(k*k)//3::2*k]=zero*((size - (k*k)//3 - 1) // (2 * k) + 1)
49669,        sieve[  start ::2*k]=zero*((size -   start  - 1) // (2 * k) + 1)
49670,"    ans = [2,3]"
49671,"    poss = chain(izip(*[range(i, n, 6) for i in (1,5)]))"
49672,"    ans.extend(compress(poss, sieve))"
49673,    return ans
49674,">>> timeit.timeit('primes.rwh_primes2(10**6)', setup='import primes', number=1)"
49675,0.0652179726976101
49676,">>> timeit.timeit('primes.rwh_primes2_python3(10**6)', setup='import primes', number=1)"
49677,0.03267321276325674
49678,">>> timeit.timeit('primes.rwh_primes2(10**8)', setup='import primes', number=1)"
49679,6.394284538007014
49680,">>> timeit.timeit('primes.rwh_primes2_python3(10**8)', setup='import primes', number=1)"
49681,3.833829450302801
49682,pip install primesieve
49683,import primesieve
49684,primes = primesieve.generate_primes(10**8)
49685,count_primes
49686,generate_primes
49687,from itertools import compress
49688,
49689,def rwh_primes1v1(n):
49690,"    """""" Returns  a list of primes < n for n > 2 """""""
49691,    sieve = bytearray([True]) * (n//2)
49692,"    for i in range(3,int(n**0.5)+1,2):"
49693,        if sieve[i//2]:
49694,            sieve[i*i//2::i] = bytearray((n-i*i-1)//(2*i)+1)
49695,"    return [2,*compress(range(3,n,2), sieve[1:])]"
49696,
49697,def rwh_primes1v2(n):
49698,"    """""" Returns a list of primes < n for n > 2 """""""
49699,    sieve = bytearray([True]) * (n//2+1)
49700,"    for i in range(1,int(n**0.5)//2+1):"
49701,        if sieve[i]:
49702,            sieve[2*i*(i+1)::2*i+1] = bytearray((n//2-2*i*(i+1))//(2*i+1)+1)
49703,"    return [2,*compress(range(3,n,2), sieve[1:])]"
49704,n
49705,"primesfrom{2,3}to"
49706,import perfplot
49707,"from math import sqrt, ceil"
49708,import numpy as np
49709,import sympy
49710,
49711,
49712,def rwh_primes(n):
49713,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49714,"    """""" Returns  a list of primes < n """""""
49715,    sieve = [True] * n
49716,"    for i in range(3, int(n ** 0.5) + 1, 2):"
49717,        if sieve[i]:
49718,            sieve[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1)
49719,"    return [2] + [i for i in range(3, n, 2) if sieve[i]]"
49720,
49721,
49722,def rwh_primes1(n):
49723,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49724,"    """""" Returns  a list of primes < n """""""
49725,    sieve = [True] * (n // 2)
49726,"    for i in range(3, int(n ** 0.5) + 1, 2):"
49727,        if sieve[i // 2]:
49728,            sieve[i * i // 2::i] = [False] * ((n - i * i - 1) // (2 * i) + 1)
49729,"    return [2] + [2 * i + 1 for i in range(1, n // 2) if sieve[i]]"
49730,
49731,
49732,def rwh_primes2(n):
49733,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
49734,"    """"""Input n>=6, Returns a list of primes, 2 <= p < n"""""""
49735,    assert n >= 6
49736,    correction = n % 6 > 1
49737,"    n = {0: n, 1: n - 1, 2: n + 4, 3: n + 3, 4: n + 2, 5: n + 1}[n % 6]"
49738,    sieve = [True] * (n // 3)
49739,    sieve[0] = False
49740,    for i in range(int(n ** 0.5) // 3 + 1):
49741,        if sieve[i]:
49742,            k = 3 * i + 1 | 1
49743,            sieve[((k * k) // 3)::2 * k] = [False] * (
49744,                (n // 6 - (k * k) // 6 - 1) // k + 1
49745,            )
49746,            sieve[(k * k + 4 * k - 2 * k * (i & 1)) // 3::2 * k] = [False] * (
49747,                (n // 6 - (k * k + 4 * k - 2 * k * (i & 1)) // 6 - 1) // k + 1
49748,            )
49749,"    return [2, 3] + [3 * i + 1 | 1 for i in range(1, n // 3 - correction) if sieve[i]]"
49750,
49751,
49752,def sieve_wheel_30(N):
49753,    # http://zerovolt.com/?p=88
49754,"    """""" Returns a list of primes <= N using wheel criterion 2*3*5 = 30"
49755,
49756,Copyright 2009 by zerovolt.com
49757,"This code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work."
49758,"If you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com."""""""
49759,    __smallp = (
49760,"        2,"
49761,"        3,"
49762,"        5,"
49763,"        7,"
49764,"        11,"
49765,"        13,"
49766,"        17,"
49767,"        19,"
49768,"        23,"
49769,"        29,"
49770,"        31,"
49771,"        37,"
49772,"        41,"
49773,"        43,"
49774,"        47,"
49775,"        53,"
49776,"        59,"
49777,"        61,"
49778,"        67,"
49779,"        71,"
49780,"        73,"
49781,"        79,"
49782,"        83,"
49783,"        89,"
49784,"        97,"
49785,"        101,"
49786,"        103,"
49787,"        107,"
49788,"        109,"
49789,"        113,"
49790,"        127,"
49791,"        131,"
49792,"        137,"
49793,"        139,"
49794,"        149,"
49795,"        151,"
49796,"        157,"
49797,"        163,"
49798,"        167,"
49799,"        173,"
49800,"        179,"
49801,"        181,"
49802,"        191,"
49803,"        193,"
49804,"        197,"
49805,"        199,"
49806,"        211,"
49807,"        223,"
49808,"        227,"
49809,"        229,"
49810,"        233,"
49811,"        239,"
49812,"        241,"
49813,"        251,"
49814,"        257,"
49815,"        263,"
49816,"        269,"
49817,"        271,"
49818,"        277,"
49819,"        281,"
49820,"        283,"
49821,"        293,"
49822,"        307,"
49823,"        311,"
49824,"        313,"
49825,"        317,"
49826,"        331,"
49827,"        337,"
49828,"        347,"
49829,"        349,"
49830,"        353,"
49831,"        359,"
49832,"        367,"
49833,"        373,"
49834,"        379,"
49835,"        383,"
49836,"        389,"
49837,"        397,"
49838,"        401,"
49839,"        409,"
49840,"        419,"
49841,"        421,"
49842,"        431,"
49843,"        433,"
49844,"        439,"
49845,"        443,"
49846,"        449,"
49847,"        457,"
49848,"        461,"
49849,"        463,"
49850,"        467,"
49851,"        479,"
49852,"        487,"
49853,"        491,"
49854,"        499,"
49855,"        503,"
49856,"        509,"
49857,"        521,"
49858,"        523,"
49859,"        541,"
49860,"        547,"
49861,"        557,"
49862,"        563,"
49863,"        569,"
49864,"        571,"
49865,"        577,"
49866,"        587,"
49867,"        593,"
49868,"        599,"
49869,"        601,"
49870,"        607,"
49871,"        613,"
49872,"        617,"
49873,"        619,"
49874,"        631,"
49875,"        641,"
49876,"        643,"
49877,"        647,"
49878,"        653,"
49879,"        659,"
49880,"        661,"
49881,"        673,"
49882,"        677,"
49883,"        683,"
49884,"        691,"
49885,"        701,"
49886,"        709,"
49887,"        719,"
49888,"        727,"
49889,"        733,"
49890,"        739,"
49891,"        743,"
49892,"        751,"
49893,"        757,"
49894,"        761,"
49895,"        769,"
49896,"        773,"
49897,"        787,"
49898,"        797,"
49899,"        809,"
49900,"        811,"
49901,"        821,"
49902,"        823,"
49903,"        827,"
49904,"        829,"
49905,"        839,"
49906,"        853,"
49907,"        857,"
49908,"        859,"
49909,"        863,"
49910,"        877,"
49911,"        881,"
49912,"        883,"
49913,"        887,"
49914,"        907,"
49915,"        911,"
49916,"        919,"
49917,"        929,"
49918,"        937,"
49919,"        941,"
49920,"        947,"
49921,"        953,"
49922,"        967,"
49923,"        971,"
49924,"        977,"
49925,"        983,"
49926,"        991,"
49927,"        997,"
49928,    )
49929,"    # wheel = (2, 3, 5)"
49930,    const = 30
49931,    if N < 2:
49932,        return []
49933,    if N <= const:
49934,        pos = 0
49935,        while __smallp[pos] <= N:
49936,            pos += 1
49937,        return list(__smallp[:pos])
49938,    # make the offsets list
49939,"    offsets = (7, 11, 13, 17, 19, 23, 29, 1)"
49940,    # prepare the list
49941,"    p = [2, 3, 5]"
49942,    dim = 2 + N // const
49943,    tk1 = [True] * dim
49944,    tk7 = [True] * dim
49945,    tk11 = [True] * dim
49946,    tk13 = [True] * dim
49947,    tk17 = [True] * dim
49948,    tk19 = [True] * dim
49949,    tk23 = [True] * dim
49950,    tk29 = [True] * dim
49951,    tk1[0] = False
49952,    # help dictionary d
49953,"    # d[a , b] = c  ==> if I want to find the smallest useful multiple of (30*pos)+a"
49954,"    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]"
49955,"    # in general. If b < a, I need [(30*pos)+a][(30*(pos+1))+b]"
49956,    d = {}
49957,    for x in offsets:
49958,        for y in offsets:
49959,            res = (x * y) % const
49960,            if res in offsets:
49961,"                d[(x, res)] = y"
49962,    # another help dictionary: gives tkx calling tmptk[x]
49963,"    tmptk = {1: tk1, 7: tk7, 11: tk11, 13: tk13, 17: tk17, 19: tk19, 23: tk23, 29: tk29}"
49964,"    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))"
49965,
49966,    # inner functions definition
49967,"    def del_mult(tk, start, step):"
49968,"        for k in range(start, len(tk), step):"
49969,            tk[k] = False
49970,
49971,    # end of inner functions definition
49972,    cpos = const * pos
49973,    while prime < stop:
49974,        # 30k + 7
49975,        if tk7[pos]:
49976,            prime = cpos + 7
49977,            p.append(prime)
49978,            lastadded = 7
49979,            for off in offsets:
49980,"                tmp = d[(7, off)]"
49981,                start = (
49982,                    (pos + prime)
49983,                    if off == 7
49984,                    else (prime * (const * (pos + 1 if tmp < 7 else 0) + tmp)) // const
49985,                )
49986,"                del_mult(tmptk[off], start, prime)"
49987,        # 30k + 11
49988,        if tk11[pos]:
49989,            prime = cpos + 11
49990,            p.append(prime)
49991,            lastadded = 11
49992,            for off in offsets:
49993,"                tmp = d[(11, off)]"
49994,                start = (
49995,                    (pos + prime)
49996,                    if off == 11
49997,                    else (prime * (const * (pos + 1 if tmp < 11 else 0) + tmp)) // const
49998,                )
49999,"                del_mult(tmptk[off], start, prime)"
50000,        # 30k + 13
50001,        if tk13[pos]:
50002,            prime = cpos + 13
50003,            p.append(prime)
50004,            lastadded = 13
50005,            for off in offsets:
50006,"                tmp = d[(13, off)]"
50007,                start = (
50008,                    (pos + prime)
50009,                    if off == 13
50010,                    else (prime * (const * (pos + 1 if tmp < 13 else 0) + tmp)) // const
50011,                )
50012,"                del_mult(tmptk[off], start, prime)"
50013,        # 30k + 17
50014,        if tk17[pos]:
50015,            prime = cpos + 17
50016,            p.append(prime)
50017,            lastadded = 17
50018,            for off in offsets:
50019,"                tmp = d[(17, off)]"
50020,                start = (
50021,                    (pos + prime)
50022,                    if off == 17
50023,                    else (prime * (const * (pos + 1 if tmp < 17 else 0) + tmp)) // const
50024,                )
50025,"                del_mult(tmptk[off], start, prime)"
50026,        # 30k + 19
50027,        if tk19[pos]:
50028,            prime = cpos + 19
50029,            p.append(prime)
50030,            lastadded = 19
50031,            for off in offsets:
50032,"                tmp = d[(19, off)]"
50033,                start = (
50034,                    (pos + prime)
50035,                    if off == 19
50036,                    else (prime * (const * (pos + 1 if tmp < 19 else 0) + tmp)) // const
50037,                )
50038,"                del_mult(tmptk[off], start, prime)"
50039,        # 30k + 23
50040,        if tk23[pos]:
50041,            prime = cpos + 23
50042,            p.append(prime)
50043,            lastadded = 23
50044,            for off in offsets:
50045,"                tmp = d[(23, off)]"
50046,                start = (
50047,                    (pos + prime)
50048,                    if off == 23
50049,                    else (prime * (const * (pos + 1 if tmp < 23 else 0) + tmp)) // const
50050,                )
50051,"                del_mult(tmptk[off], start, prime)"
50052,        # 30k + 29
50053,        if tk29[pos]:
50054,            prime = cpos + 29
50055,            p.append(prime)
50056,            lastadded = 29
50057,            for off in offsets:
50058,"                tmp = d[(29, off)]"
50059,                start = (
50060,                    (pos + prime)
50061,                    if off == 29
50062,                    else (prime * (const * (pos + 1 if tmp < 29 else 0) + tmp)) // const
50063,                )
50064,"                del_mult(tmptk[off], start, prime)"
50065,"        # now we go back to top tk1, so we need to increase pos by 1"
50066,        pos += 1
50067,        cpos = const * pos
50068,        # 30k + 1
50069,        if tk1[pos]:
50070,            prime = cpos + 1
50071,            p.append(prime)
50072,            lastadded = 1
50073,            for off in offsets:
50074,"                tmp = d[(1, off)]"
50075,                start = (
50076,                    (pos + prime)
50077,                    if off == 1
50078,                    else (prime * (const * pos + tmp)) // const
50079,                )
50080,"                del_mult(tmptk[off], start, prime)"
50081,    # time to add remaining primes
50082,"    # if lastadded == 1, remove last element and start adding them from tk1"
50083,"    # this way we don't need an ""if"" within the last while"
50084,    if lastadded == 1:
50085,        p.pop()
50086,    # now complete for every other possible prime
50087,    while pos < len(tk1):
50088,        cpos = const * pos
50089,        if tk1[pos]:
50090,            p.append(cpos + 1)
50091,        if tk7[pos]:
50092,            p.append(cpos + 7)
50093,        if tk11[pos]:
50094,            p.append(cpos + 11)
50095,        if tk13[pos]:
50096,            p.append(cpos + 13)
50097,        if tk17[pos]:
50098,            p.append(cpos + 17)
50099,        if tk19[pos]:
50100,            p.append(cpos + 19)
50101,        if tk23[pos]:
50102,            p.append(cpos + 23)
50103,        if tk29[pos]:
50104,            p.append(cpos + 29)
50105,        pos += 1
50106,    # remove exceeding if present
50107,    pos = len(p) - 1
50108,    while p[pos] > N:
50109,        pos -= 1
50110,    if pos < len(p) - 1:
50111,        del p[pos + 1 :]
50112,    # return p list
50113,    return p
50114,
50115,
50116,def sieve_of_eratosthenes(n):
50117,"    """"""sieveOfEratosthenes(n): return the list of the primes < n."""""""
50118,"    # Code from: <dickinsm@gmail.com>, Nov 30 2006"
50119,    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d
50120,    if n <= 2:
50121,        return []
50122,"    sieve = list(range(3, n, 2))"
50123,    top = len(sieve)
50124,    for si in sieve:
50125,        if si:
50126,            bottom = (si * si - 3) // 2
50127,            if bottom >= top:
50128,                break
50129,            sieve[bottom::si] = [0] * -((bottom - top) // si)
50130,    return [2] + [el for el in sieve if el]
50131,
50132,
50133,def sieve_of_atkin(end):
50134,"    """"""return a list of all the prime numbers <end using the Sieve of Atkin."""""""
50135,"    # Code by Steve Krenzel, <Sgk284@gmail.com>, improved"
50136,    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83
50137,    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin
50138,    assert end > 0
50139,    lng = (end - 1) // 2
50140,    sieve = [False] * (lng + 1)
50141,
50142,"    x_max, x2, xd = int(sqrt((end - 1) / 4.0)), 0, 4"
50143,"    for xd in range(4, 8 * x_max + 2, 8):"
50144,        x2 += xd
50145,        y_max = int(sqrt(end - x2))
50146,"        n, n_diff = x2 + y_max * y_max, (y_max << 1) - 1"
50147,        if not (n & 1):
50148,            n -= n_diff
50149,            n_diff -= 2
50150,"        for d in range((n_diff - 1) << 1, -1, -8):"
50151,            m = n % 12
50152,            if m == 1 or m == 5:
50153,                m = n >> 1
50154,                sieve[m] = not sieve[m]
50155,            n -= d
50156,
50157,"    x_max, x2, xd = int(sqrt((end - 1) / 3.0)), 0, 3"
50158,"    for xd in range(3, 6 * x_max + 2, 6):"
50159,        x2 += xd
50160,        y_max = int(sqrt(end - x2))
50161,"        n, n_diff = x2 + y_max * y_max, (y_max << 1) - 1"
50162,        if not (n & 1):
50163,            n -= n_diff
50164,            n_diff -= 2
50165,"        for d in range((n_diff - 1) << 1, -1, -8):"
50166,            if n % 12 == 7:
50167,                m = n >> 1
50168,                sieve[m] = not sieve[m]
50169,            n -= d
50170,
50171,"    x_max, y_min, x2, xd = int((2 + sqrt(4 - 8 * (1 - end))) / 4), -1, 0, 3"
50172,"    for x in range(1, x_max + 1):"
50173,        x2 += xd
50174,        xd += 6
50175,        if x2 >= end:
50176,            y_min = (((int(ceil(sqrt(x2 - end))) - 1) << 1) - 2) << 1
50177,"        n, n_diff = ((x * x + x) << 1) - 1, (((x - 1) << 1) - 2) << 1"
50178,"        for d in range(n_diff, y_min, -8):"
50179,            if n % 12 == 11:
50180,                m = n >> 1
50181,                sieve[m] = not sieve[m]
50182,            n += d
50183,
50184,"    primes = [2, 3]"
50185,    if end <= 3:
50186,"        return primes[: max(0, end - 2)]"
50187,
50188,"    for n in range(5 >> 1, (int(sqrt(end)) + 1) >> 1):"
50189,        if sieve[n]:
50190,            primes.append((n << 1) + 1)
50191,            aux = (n << 1) + 1
50192,            aux *= aux
50193,"            for k in range(aux, end, 2 * aux):"
50194,                sieve[k >> 1] = False
50195,
50196,    s = int(sqrt(end)) + 1
50197,    if s % 2 == 0:
50198,        s += 1
50199,"    primes.extend([i for i in range(s, end, 2) if sieve[i >> 1]])"
50200,
50201,    return primes
50202,
50203,
50204,def ambi_sieve_plain(n):
50205,"    s = list(range(3, n, 2))"
50206,"    for m in range(3, int(n ** 0.5) + 1, 2):"
50207,        if s[(m - 3) // 2]:
50208,"            for t in range((m * m - 3) // 2, (n >> 1) - 1, m):"
50209,                s[t] = 0
50210,    return [2] + [t for t in s if t > 0]
50211,
50212,
50213,def sundaram3(max_n):
50214,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279
50215,"    numbers = range(3, max_n + 1, 2)"
50216,    half = (max_n) // 2
50217,    initial = 4
50218,
50219,"    for step in range(3, max_n + 1, 2):"
50220,"        for i in range(initial, half, step):"
50221,            numbers[i - 1] = 0
50222,        initial += 2 * (step + 1)
50223,
50224,        if initial > half:
50225,"            return [2] + filter(None, numbers)"
50226,
50227,
50228,# Using Numpy:
50229,def ambi_sieve(n):
50230,    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html
50231,"    s = np.arange(3, n, 2)"
50232,"    for m in range(3, int(n ** 0.5) + 1, 2):"
50233,        if s[(m - 3) // 2]:
50234,            s[(m * m - 3) // 2::m] = 0
50235,"    return np.r_[2, s[s > 0]]"
50236,
50237,
50238,def primesfrom3to(n):
50239,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
50240,"    """""" Returns an array of primes, p < n """""""
50241,    assert n >= 2
50242,"    sieve = np.ones(n // 2, dtype=bool)"
50243,"    for i in range(3, int(n ** 0.5) + 1, 2):"
50244,        if sieve[i // 2]:
50245,            sieve[i * i // 2::i] = False
50246,"    return np.r_[2, 2 * np.nonzero(sieve)[0][1::] + 1]"
50247,
50248,
50249,def primesfrom2to(n):
50250,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
50251,"    """""" Input n>=6, Returns an array of primes, 2 <= p < n """""""
50252,    assert n >= 6
50253,"    sieve = np.ones(n // 3 + (n % 6 == 2), dtype=bool)"
50254,    sieve[0] = False
50255,    for i in range(int(n ** 0.5) // 3 + 1):
50256,        if sieve[i]:
50257,            k = 3 * i + 1 | 1
50258,            sieve[((k * k) // 3)::2 * k] = False
50259,            sieve[(k * k + 4 * k - 2 * k * (i & 1)) // 3::2 * k] = False
50260,"    return np.r_[2, 3, ((3 * np.nonzero(sieve)[0] + 1) | 1)]"
50261,
50262,
50263,def sympy_sieve(n):
50264,"    return list(sympy.sieve.primerange(1, n))"
50265,
50266,
50267,b = perfplot.bench(
50268,"    setup=lambda n: n,"
50269,    kernels=[
50270,"        rwh_primes,"
50271,"        rwh_primes1,"
50272,"        rwh_primes2,"
50273,"        sieve_wheel_30,"
50274,"        sieve_of_eratosthenes,"
50275,"        sieve_of_atkin,"
50276,"        # ambi_sieve_plain,"
50277,"        # sundaram3,"
50278,"        ambi_sieve,"
50279,"        primesfrom3to,"
50280,"        primesfrom2to,"
50281,"        sympy_sieve,"
50282,"    ],"
50283,"    n_range=[2 ** k for k in range(3, 25)],"
50284,"    xlabel=""n"","
50285,)
50286,"b.save(""out.png"")"
50287,b.show()
50288,$ python -mtimeit -s'import sieve' 'sieve.sieve(1000000)' 
50289,"10 loops, best of 3: 445 msec per loop"
50290,$ cat sieve.py
50291,from math import sqrt
50292,
50293,def sieve(size):
50294, prime=[True]*size
50295, rng=xrange
50296, limit=int(sqrt(size))
50297,
50298," for i in rng(3,limit+1,+2):"
50299,  if prime[i]:
50300,   prime[i*i::+i]=[False]*len(prime[i*i::+i])
50301,
50302," return [2]+[i for i in rng(3,size,+2) if prime[i]]"
50303,
50304,if __name__=='__main__':
50305, print sieve(100)
50306,upto=10**6
50307,primesfrom2to()
50308,prime6()
50309,"python -m timeit -r10 -s""from sympy import sieve"" ""primes = list(sieve.primerange(1, 10**6))"""
50310,"10 loops, best of 10: 12.2 msec per loop"
50311,"pypy -m timeit -r10 -s""from sympy import sieve"" ""primes = list(sieve.primerange(1, 10**6))"""
50312,"10 loops, best of 10: 2.03 msec per loop"
50313,from itertools import compress
50314,
50315,def half_sieve(n):
50316,"    """""""
50317,    Returns a list of prime numbers less than `n`.
50318,"    """""""
50319,    if n <= 2:
50320,        return []
50321,    sieve = bytearray([True]) * (n // 2)
50322,"    for i in range(3, int(n ** 0.5) + 1, 2):"
50323,        if sieve[i // 2]:
50324,            sieve[i * i // 2::i] = bytearray((n - i * i - 1) // (2 * i) + 1)
50325,"    primes = list(compress(range(1, n, 2), sieve))"
50326,    primes[0] = 2
50327,    return primes
50328,from time import clock
50329,import platform
50330,
50331,"def benchmark(iterations, limit):"
50332,    start = clock()
50333,    for x in range(iterations):
50334,        half_sieve(limit)
50335,    end = clock() - start
50336,    print(f'{end/iterations:.4f} seconds for primes < {limit}')
50337,
50338,if __name__ == '__main__':
50339,    print(platform.python_version())
50340,    print(platform.platform())
50341,    print(platform.processor())
50342,    it = 10
50343,"    for pw in range(4, 9):"
50344,"        benchmark(it, 10**pw)"
50345,>>> 3.6.7
50346,>>> Windows-10-10.0.17763-SP0
50347,">>> Intel64 Family 6 Model 78 Stepping 3, GenuineIntel"
50348,>>> 0.0003 seconds for primes < 10000
50349,>>> 0.0021 seconds for primes < 100000
50350,>>> 0.0204 seconds for primes < 1000000
50351,>>> 0.2389 seconds for primes < 10000000
50352,>>> 2.6702 seconds for primes < 100000000
50353,import sys
50354,
50355,"def miller_rabin_pass(a, n):"
50356,    d = n - 1
50357,    s = 0
50358,    while d % 2 == 0:
50359,        d >>= 1
50360,        s += 1
50361,
50362,"    a_to_power = pow(a, d, n)"
50363,    if a_to_power == 1:
50364,        return True
50365,    for i in range(s-1):
50366,        if a_to_power == n - 1:
50367,            return True
50368,        a_to_power = (a_to_power * a_to_power) % n
50369,    return a_to_power == n - 1
50370,
50371,
50372,def miller_rabin(n):
50373,    if n <= 2:
50374,        return n == 2
50375,
50376,    if n < 2_047:
50377,"        return miller_rabin_pass(2, n)"
50378,
50379,"    return all(miller_rabin_pass(a, n) for a in (31, 73))"
50380,
50381,
50382,n = int(sys.argv[1])
50383,primes = [2]
50384,"for p in range(3,n,2):"
50385,  if miller_rabin(p):
50386,    primes.append(p)
50387,print len(primes)
50388,def daniel_sieve_2(maxNumber):
50389,"    """""""
50390,"    Given a number, returns all numbers less than or equal to"
50391,    that number which are prime.
50392,"    """""""
50393,"    allNumbers = range(3, maxNumber+1, 2)"
50394,"    for mIndex, number in enumerate(xrange(3, maxNumber+1, 2)):"
50395,        if allNumbers[mIndex] == 0:
50396,            continue
50397,        # now set all multiples to 0
50398,"        for index in xrange(mIndex+number, (maxNumber-3)/2+1, number):"
50399,            allNumbers[index] = 0
50400,"    return [2] + filter(lambda n: n!=0, allNumbers)"
50401,">>>mine = timeit.Timer(""daniel_sieve_2(1000000)"","
50402,"...                    ""from sieves import daniel_sieve_2"")"
50403,">>>prev = timeit.Timer(""get_primes_erat(1000000)"","
50404,"...                    ""from sieves import get_primes_erat"")"
50405,">>>print ""Mine: {0:0.4f} ms"".format(min(mine.repeat(3, 1))*1000)"
50406,Mine: 428.9446 ms
50407,">>>print ""Previous Best {0:0.4f} ms"".format(min(prev.repeat(3, 1))*1000)"
50408,Previous Best 621.3581 ms
50409,def primeSieveSeq(MAX_Int):
50410,    if MAX_Int > 5*10**8:
50411,        import ctypes
50412,        int16Array = ctypes.c_ushort * (MAX_Int >> 1)
50413,        sieve = int16Array()
50414,"        #print 'uses ctypes ""unsigned short int Array""'"
50415,    else:
50416,        sieve = (MAX_Int >> 1) * [False]
50417,        #print 'uses python list() of long long int'
50418,    if MAX_Int < 10**8:
50419,        sieve[4::3] = [True]*((MAX_Int - 8)/6+1)
50420,        sieve[12::5] = [True]*((MAX_Int - 24)/10+1)
50421,"    r = [2, 3, 5]"
50422,    n = 0
50423,    for i in xrange(int(MAX_Int**0.5)/30+1):
50424,        n += 3
50425,        if not sieve[n]:
50426,            n2 = (n << 1) + 1
50427,            r.append(n2)
50428,            n2q = (n2**2) >> 1
50429,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50430,        n += 2
50431,        if not sieve[n]:
50432,            n2 = (n << 1) + 1
50433,            r.append(n2)
50434,            n2q = (n2**2) >> 1
50435,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50436,        n += 1
50437,        if not sieve[n]:
50438,            n2 = (n << 1) + 1
50439,            r.append(n2)
50440,            n2q = (n2**2) >> 1
50441,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50442,        n += 2
50443,        if not sieve[n]:
50444,            n2 = (n << 1) + 1
50445,            r.append(n2)
50446,            n2q = (n2**2) >> 1
50447,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50448,        n += 1
50449,        if not sieve[n]:
50450,            n2 = (n << 1) + 1
50451,            r.append(n2)
50452,            n2q = (n2**2) >> 1
50453,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50454,        n += 2
50455,        if not sieve[n]:
50456,            n2 = (n << 1) + 1
50457,            r.append(n2)
50458,            n2q = (n2**2) >> 1
50459,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50460,        n += 3
50461,        if not sieve[n]:
50462,            n2 = (n << 1) + 1
50463,            r.append(n2)
50464,            n2q = (n2**2) >> 1
50465,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50466,        n += 1
50467,        if not sieve[n]:
50468,            n2 = (n << 1) + 1
50469,            r.append(n2)
50470,            n2q = (n2**2) >> 1
50471,            sieve[n2q::n2] = [True]*(((MAX_Int >> 1) - n2q - 1) / n2 + 1)
50472,    if MAX_Int < 10**8:
50473,"        return [2, 3, 5]+[(p << 1) + 1 for p in [n for n in xrange(3, MAX_Int >> 1) if not sieve[n]]]"
50474,    n = n >> 1
50475,    try:
50476,        for i in xrange((MAX_Int-2*n)/30 + 1):
50477,            n += 3
50478,            if not sieve[n]:
50479,                r.append((n << 1) + 1)
50480,            n += 2
50481,            if not sieve[n]:
50482,                r.append((n << 1) + 1)
50483,            n += 1
50484,            if not sieve[n]:
50485,                r.append((n << 1) + 1)
50486,            n += 2
50487,            if not sieve[n]:
50488,                r.append((n << 1) + 1)
50489,            n += 1
50490,            if not sieve[n]:
50491,                r.append((n << 1) + 1)
50492,            n += 2
50493,            if not sieve[n]:
50494,                r.append((n << 1) + 1)
50495,            n += 3
50496,            if not sieve[n]:
50497,                r.append((n << 1) + 1)
50498,            n += 1
50499,            if not sieve[n]:
50500,                r.append((n << 1) + 1)
50501,    except:
50502,        pass
50503,    return r
50504,#!/usr/bin/env python
50505,
50506,import lib
50507,import timeit
50508,import sys
50509,import math
50510,import datetime
50511,
50512,import prettyplotlib as ppl
50513,import numpy as np
50514,
50515,import matplotlib.pyplot as plt
50516,from prettyplotlib import brewer2mpl
50517,
50518,primenumbers_gen = [
50519,"    'sieveOfEratosthenes',"
50520,"    'ambi_sieve',"
50521,"    'ambi_sieve_plain',"
50522,"    'sundaram3',"
50523,"    'sieve_wheel_30',"
50524,"    'primesfrom3to',"
50525,"    'primesfrom2to',"
50526,"    'rwh_primes',"
50527,"    'rwh_primes1',"
50528,"    'rwh_primes2',"
50529,]
50530,
50531,def human_format(num):
50532,    # https://stackoverflow.com/questions/579310/formatting-long-numbers-as-strings-in-python?answertab=active#tab-top
50533,    magnitude = 0
50534,    while abs(num) >= 1000:
50535,        magnitude += 1
50536,        num /= 1000.0
50537,    # add more suffixes if you need them
50538,"    return '%.2f%s' % (num, ['', 'K', 'M', 'G', 'T', 'P'][magnitude])"
50539,
50540,
50541,if __name__=='__main__':
50542,
50543,    # Vars
50544,    n = 10000000 # number itereration generator
50545,    nbcol = 5 # For decompose prime number generator
50546,    nb_benchloop = 3 # Eliminate false positive value during the test (bench average time)
50547,    datetimeformat = '%Y-%m-%d %H:%M:%S.%f'
50548,    config = 'from __main__ import n; import lib'
50549,    primenumbers_gen = {
50550,"        'sieveOfEratosthenes': {'color': 'b'},"
50551,"        'ambi_sieve': {'color': 'b'},"
50552,"        'ambi_sieve_plain': {'color': 'b'},"
50553,"         'sundaram3': {'color': 'b'},"
50554,"        'sieve_wheel_30': {'color': 'b'},"
50555,"# # #        'primesfrom2to': {'color': 'b'},"
50556,"        'primesfrom3to': {'color': 'b'},"
50557,"        # 'rwh_primes': {'color': 'b'},"
50558,"        # 'rwh_primes1': {'color': 'b'},"
50559,"        'rwh_primes2': {'color': 'b'},"
50560,    }
50561,
50562,
50563,    # Get n in command line
50564,    if len(sys.argv)>1:
50565,        n = int(sys.argv[1])
50566,
50567,    step = int(math.ceil(n / float(nbcol)))
50568,"    nbs = np.array([i * step for i in range(1, int(nbcol) + 1)])"
50569,"    set2 = brewer2mpl.get_map('Paired', 'qualitative', 12).mpl_colors"
50570,
50571,    print datetime.datetime.now().strftime(datetimeformat)
50572,"    print(""Compute prime number to %(n)s"" % locals())"
50573,"    print("""")"
50574,
50575,    results = dict()
50576,    for pgen in primenumbers_gen:
50577,        results[pgen] = dict()
50578,        benchtimes = list()
50579,        for n in nbs:
50580,"            t = timeit.Timer(""lib.%(pgen)s(n)"" % locals(), setup=config)"
50581,"            execute_times = t.repeat(repeat=nb_benchloop,number=1)"
50582,            benchtime = np.mean(execute_times)
50583,            benchtimes.append(benchtime)
50584,        results[pgen] = {'benchtimes':np.array(benchtimes)}
50585,
50586,"fig, ax = plt.subplots(1)"
50587,plt.ylabel('Computation time (in second)')
50588,plt.xlabel('Numbers computed')
50589,i = 0
50590,for pgen in primenumbers_gen:
50591,
50592,    bench = results[pgen]['benchtimes']
50593,"    avgs = np.divide(bench,nbs)"
50594,"    avg = np.average(bench, weights=nbs)"
50595,
50596,    # Compute linear regression
50597,"    A = np.vstack([nbs, np.ones(len(nbs))]).T"
50598,"    a, b = np.linalg.lstsq(A, nbs*avgs)[0]"
50599,
50600,    # Plot
50601,    i += 1
50602,"    #label=""%(pgen)s"" % locals()"
50603,"    #ppl.plot(nbs, nbs*avgs, label=label, lw=1, linestyle='--', color=set2[i % 12])"
50604,"    label=""%(pgen)s avg"" % locals()"
50605,"    ppl.plot(nbs, a * nbs + b, label=label, lw=2, color=set2[i % 12])"
50606,print datetime.datetime.now().strftime(datetimeformat)
50607,
50608,"ppl.legend(ax, loc='upper left', ncol=4)"
50609,
50610,# Change x axis label
50611,ax.get_xaxis().get_major_formatter().set_scientific(False)
50612,fig.canvas.draw()
50613,labels = [human_format(int(item.get_text())) for item in ax.get_xticklabels()]
50614,
50615,ax.set_xticklabels(labels)
50616,ax = plt.gca()
50617,
50618,plt.show()
50619,def rwh_primes2(n):
50620,    correction = (n%6>1)
50621,"    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]"
50622,    sieve = [True] * (n//3)
50623,    sieve[0] = False
50624,    for i in range(int(n**0.5)//3+1):
50625,      if sieve[i]:
50626,        k=3*i+1|1
50627,        sieve[      ((k*k)//3)      ::2*k]=[False]*((n//6-(k*k)//6-1)//k+1)
50628,        sieve[(k*k+4*k-2*k*(i&1))//3::2*k]=[False]*((n//6-(k*k+4*k-2*k*(i&1))//6-1)//k+1)
50629,"    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]"
50630,numba
50631,import numpy as np
50632,from numba import njit
50633,
50634,@njit
50635,def nb_primes(n):
50636,    # Generates prime numbers 2 <= p <= n
50637,    # Atkin's sieve -- see https://en.wikipedia.org/w/index.php?title=Prime_number&oldid=111775466
50638,    sqrt_n = int(np.sqrt(n)) + 1
50639,
50640,    # initialize the sieve
50641,"    s = np.full(n + 1, -1, dtype=np.int8)"
50642,    s[2] = 1
50643,    s[3] = 1
50644,
50645,    # put in candidate primes:
50646,    # integers which have an odd number of
50647,    # representations by certain quadratic forms
50648,"    for x in range(1, sqrt_n):"
50649,        x2 = x * x
50650,"        for y in range(1, sqrt_n):"
50651,            y2 = y * y
50652,            k = 4 * x2 + y2
50653,            if k <= n and (k % 12 == 1 or k % 12 == 5): s[k] *= -1
50654,            k = 3 * x2 + y2
50655,            if k <= n and (k % 12 == 7): s[k] *= -1
50656,            k = 3 * x2 - y2
50657,            if k <= n and x > y and k % 12 == 11: s[k] *= -1
50658,
50659,    # eliminate composites by sieving
50660,"    for k in range(5, sqrt_n):"
50661,        if s[k]:
50662,            k2 = k*k
50663,"            # k is prime, omit multiples of its square; this is sufficient because"
50664,            # composites which managed to get on the list cannot be square-free
50665,"            for i in range(1, n // k2 + 1):"
50666,"                j = i * k2 # j ∈ {k², 2k², 3k², ..., n}"
50667,                s[j] = -1
50668,    return np.nonzero(s>0)[0]
50669,
50670,"# initial run for ""compilation"" "
50671,nb_primes(10)
50672,In[10]:
50673,%timeit nb_primes(1_000_000)
50674,
50675,Out[10]:
50676,"2.47 ms ± 36.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
50677,
50678,In[11]:
50679,%timeit nb_primes(10_000_000)
50680,
50681,Out[11]:
50682,"33.4 ms ± 373 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
50683,
50684,In[12]:
50685,%timeit nb_primes(100_000_000)
50686,
50687,Out[12]:
50688,"828 ms ± 5.64 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
50689,#!/usr/bin/env python
50690,import time
50691,
50692,def GetPrimes(n):
50693,
50694,    Sieve = [1 for x in xrange(n)]
50695,
50696,    Done = False
50697,    w = 3
50698,
50699,    while not Done:
50700,
50701,"        for q in xrange (3, n, 2):"
50702,            Prod = w*q
50703,            if Prod < n:
50704,                Sieve[Prod] = 0
50705,            else:
50706,                break
50707,
50708,        if w > (n/2):
50709,            Done = True
50710,        w += 2
50711,
50712,    return Sieve
50713,
50714,
50715,
50716,start = time.clock()
50717,
50718,d = 10000000
50719,Primes = GetPrimes(d)
50720,
50721,count = 1 #This is for 2
50722,
50723,"for x in xrange (3, d, 2):"
50724,    if Primes[x]:
50725,        count+=1
50726,
50727,elapsed = (time.clock() - start)
50728,"print ""\nFound"", count, ""primes in"", elapsed, ""seconds!\n"""
50729,#!/usr/bin/env python
50730,import time
50731,
50732,def GetPrimes2(n):
50733,
50734,    Sieve = [1 for x in xrange(n)]
50735,
50736,"    for q in xrange (3, n, 2):"
50737,        k = q
50738,"        for y in xrange(k*3, n, k*2):"
50739,            Sieve[y] = 0
50740,
50741,    return Sieve
50742,
50743,
50744,
50745,start = time.clock()
50746,
50747,d = 10000000
50748,Primes = GetPrimes2(d)
50749,
50750,count = 1 #This is for 2
50751,
50752,"for x in xrange (3, d, 2):"
50753,    if Primes[x]:
50754,        count+=1
50755,
50756,elapsed = (time.clock() - start)
50757,"print ""\nFound"", count, ""primes in"", elapsed, ""seconds!\n"""
50758,#!/usr/bin/env python
50759,import time
50760,
50761,def GetPrimes3(n):
50762,
50763,    Sieve = [1 for x in xrange(n)]
50764,
50765,"    for q in xrange (3, n, 2):"
50766,        k = q
50767,"        for y in xrange(k*k, n, k << 1):"
50768,            Sieve[y] = 0
50769,
50770,    return Sieve
50771,
50772,
50773,
50774,start = time.clock()
50775,
50776,d = 10000000
50777,Primes = GetPrimes3(d)
50778,
50779,count = 1 #This is for 2
50780,
50781,"for x in xrange (3, d, 2):"
50782,    if Primes[x]:
50783,        count+=1
50784,
50785,elapsed = (time.clock() - start)
50786,"print ""\nFound"", count, ""primes in"", elapsed, ""seconds!\n"""
50787,primes = []
50788,"for n in range(low, high + 1):"
50789,    if all(n % i for i in primes):
50790,        primes.append(n)
50791,.pyc
50792,def erat3( ):
50793,"    from itertools import islice, count"
50794,
50795,    # q is the running integer that's checked for primeness.
50796,    # yield 2 and no other even number thereafter
50797,    yield 2
50798,    D = {}
50799,    # no need to mark D[4] as we will test odd numbers only
50800,"    for q in islice(count(3),0,None,2):"
50801,        if q in D:                  #  is composite
50802,            p = D[q]
50803,            del D[q]
50804,            # q is composite. p=D[q] is the first prime that
50805,"            # divides it. Since we've reached q, we no longer"
50806,"            # need it in the map, but we'll mark the next"
50807,            # multiple of its witnesses to prepare for larger
50808,            # numbers.
50809,            x = q + p+p        # next odd(!) multiple
50810,            while x in D:      # skip composites
50811,                x += p+p
50812,            D[x] = p
50813,        else:                  # is prime
50814,            # q is a new prime.
50815,            # Yield it and mark its first multiple that isn't
50816,            # already marked in previous iterations.
50817,            D[q*q] = q
50818,            yield q
50819,from bitarray import bitarray
50820,def primes_to(n):
50821,    size = n//2
50822,    sieve = bitarray(size)
50823,    sieve.setall(1)
50824,    limit = int(n**0.5)
50825,"    for i in range(1,limit):"
50826,        if sieve[i]:
50827,            val = 2*i+1
50828,            sieve[(i+i*val)::val] = 0
50829,"    return [2] + [2*i+1 for i, v in enumerate(sieve) if v and i > 0]"
50830,
50831,"python -m timeit -n10 -s ""import euler"" ""euler.primes_to(1000000000)"""
50832,"10 loops, best of 3: 46.5 sec per loop"
50833,import numpy as np 
50834,def generate_primes(n):
50835,"    is_prime = np.ones(n+1,dtype=bool)"
50836,    is_prime[0:2] = False
50837,    for i in range(int(n**0.5)+1):
50838,        if is_prime[i]:
50839,            is_prime[i**2::i]=False
50840,    return np.where(is_prime)[0]
50841,import time    
50842,"for i in range(2,10):"
50843,    timer =time.time()
50844,    generate_primes(10**i)
50845,"    print('n = 10^',i,' time =', round(time.time()-timer,6))"
50846,
50847,>> n = 10^ 2  time = 5.6e-05
50848,>> n = 10^ 3  time = 6.4e-05
50849,>> n = 10^ 4  time = 0.000114
50850,>> n = 10^ 5  time = 0.000593
50851,>> n = 10^ 6  time = 0.00467
50852,>> n = 10^ 7  time = 0.177758
50853,>> n = 10^ 8  time = 1.701312
50854,>> n = 10^ 9  time = 19.322478
50855,"noprimes = [j for i in range(2, 8) for j in range(i*2, 50, i)]"
50856,"primes = [x for x in range(2, 50) if x not in noprimes]"
50857,primesfrom2to
50858,import numpy as np
50859,from bitarray import bitarray
50860,
50861,
50862,def bit_primes(n):
50863,    bit_sieve = bitarray(n // 3 + (n % 6 == 2))
50864,    bit_sieve.setall(1)
50865,    bit_sieve[0] = False
50866,
50867,    for i in range(int(n ** 0.5) // 3 + 1):
50868,        if bit_sieve[i]:
50869,            k = 3 * i + 1 | 1
50870,            bit_sieve[k * k // 3::2 * k] = False
50871,            bit_sieve[(k * k + 4 * k - 2 * k * (i & 1)) // 3::2 * k] = False
50872,
50873,"    np_sieve = np.unpackbits(np.frombuffer(bit_sieve.tobytes(), dtype=np.uint8)).view(bool)"
50874,"    return np.concatenate(((2, 3), ((3 * np.flatnonzero(np_sieve) + 1) | 1)))"
50875,primesfrom2to
50876,"python3 -m timeit -s ""import fast_primes"" ""fast_primes.bit_primes(1000000)"""
50877,"200 loops, best of 5: 1.19 msec per loop"
50878,
50879,"python3 -m timeit -s ""import fast_primes"" ""fast_primes.primesfrom2to(1000000)"""
50880,"200 loops, best of 5: 1.23 msec per loop"
50881,bit_primes
50882,n
50883,bit_primes
50884,"python3 -m timeit -s ""import fast_primes"" ""fast_primes.bit_primes(500_000_000)"""
50885,"1 loop, best of 5: 540 msec per loop"
50886,
50887,"python3 -m timeit -s ""import fast_primes"" ""fast_primes.primesfrom2to(500_000_000)"""
50888,"1 loop, best of 5: 1.15 sec per loop"
50889,primesfrom2to
50890,def primesfrom2to(n):
50891,    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
50892,"    """""" Input n>=6, Returns a array of primes, 2 <= p < n"""""""
50893,"    sieve = np.ones(n // 3 + (n % 6 == 2), dtype=np.bool)"
50894,    sieve[0] = False
50895,    for i in range(int(n ** 0.5) // 3 + 1):
50896,        if sieve[i]:
50897,            k = 3 * i + 1 | 1
50898,            sieve[((k * k) // 3)::2 * k] = False
50899,            sieve[(k * k + 4 * k - 2 * k * (i & 1)) // 3::2 * k] = False
50900,"    return np.r_[2, 3, ((3 * np.nonzero(sieve)[0] + 1) | 1)]"
50901,"""these are words"""
50902,"[""these"", ""are"", ""words""]"
50903,print(word)
50904,sentence
50905,words
50906,words = sentence.split()
50907,text
50908,words = text.split()      
50909,text
50910,""","""
50911,"words = text.split("","")   "
50912,words
50913,list
50914,text
50915,str.split()
50916,">>> line = ""a sentence with a few words"""
50917,>>> line.split()
50918,"['a', 'sentence', 'with', 'a', 'few', 'words']"
50919,import nltk
50920,words = nltk.word_tokenize(raw_sentence)
50921,>>> import nltk
50922,">>> s = ""The fox's foot grazed the sleeping dog, waking it."""
50923,>>> words = nltk.word_tokenize(s)
50924,>>> words
50925,"['The', 'fox', ""'s"", 'foot', 'grazed', 'the', 'sleeping', 'dog', ',', "
50926,"'waking', 'it', '.']"
50927,string.split()
50928,split()
50929,"','"
50930,"""'s"""
50931,"""fox's"""
50932,we're
50933,>>> text
50934,"""'Oh, you can't help that,' said the Cat: 'we're all mad here. I'm mad. You're mad.'"""
50935,
50936,>>> text.split()
50937,"[""'Oh,"", 'you', ""can't"", 'help', ""that,'"", 'said', 'the', 'Cat:', ""'we're"", 'all', 'mad', 'here.', ""I'm"", 'mad.', ""You're"", ""mad.'""]"
50938,
50939,>>> import string
50940,>>> [word.strip(string.punctuation) for word in text.split()]
50941,"['Oh', 'you', ""can't"", 'help', 'that', 'said', 'the', 'Cat', ""we're"", 'all', 'mad', 'here', ""I'm"", 'mad', ""You're"", 'mad']"
50942,e.g.
50943,Mrs.
50944,frogs'
50945,frogs' legs
50946,Mr.
50947,Mrs.
50948,"print(list(""word""))"
50949,"#  ['w', 'o', 'r', 'd']"
50950,
50951,
50952,"print(list(""some sentence""))"
50953,"#  ['s', 'o', 'm', 'e', ' ', 's', 'e', 'n', 't', 'e', 'n', 'c', 'e']"
50954,str().split()
50955,">>> the_string = ""this is a sentence"""
50956,">>> words = the_string.split("" "")"
50957,>>> print(words)
50958,"['this', 'is', 'a', 'sentence']"
50959,>>> type(words)
50960,<type 'list'> # or <class 'list'> in Python 3.0
50961,.split()
50962,str.split()
50963,>>> import shlex
50964,">>> shlex.split(""sudo echo 'foo && bar'"")"
50965,"['sudo', 'echo', 'foo && bar']"
50966,"""It's good."""
50967,ValueError: No closing quotation
50968,def split_into_words(line):
50969,    import re
50970,"    word_regex_improved = r""(\w[\w']*\w|\w)"""
50971,    word_matcher = re.compile(word_regex_improved)
50972,    return word_matcher.findall(line)
50973,
50974,#Example 1
50975,
50976,"input_1 = ""computational power (see Moore's law) and """
50977,split_into_words(input_1)
50978,
50979,# output 
50980,"['computational', 'power', 'see', ""Moore's"", 'law', 'and']"
50981,
50982,#Example 2
50983,
50984,"input_2 = """"""Oh, you can't help that,' said the Cat: 'we're all mad here. I'm mad. You're mad."""""""
50985,
50986,split_into_words(input_2)
50987,#output
50988,"['Oh',"
50989," 'you',"
50990," ""can't"","
50991," 'help',"
50992," 'that',"
50993," 'said',"
50994," 'the',"
50995," 'Cat',"
50996," ""we're"","
50997," 'all',"
50998," 'mad',"
50999," 'here',"
51000," ""I'm"","
51001," 'mad',"
51002," ""You're"","
51003, 'mad']
51004,bytes
51005,>>> from subprocess import *
51006,">>> command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]"
51007,>>>
51008,>>> command_stdout
51009,b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
51010,>>> print(command_stdout)
51011,-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
51012,-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2
51013,binascii.b2a_qp()
51014,bytes
51015,>>> binascii.b2a_qp(command_stdout)
51016,b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
51017,bytes
51018,str
51019,str(text_bytes)
51020,str(text_bytes)
51021,text_bytes.decode('cp1250
51022,text_bytes.decode('utf-8')
51023,str
51024,utf-8
51025,var = var.decode('utf-8')
51026,"unicode_text = str(bytestring, character_encoding)"
51027,unicode_text = bytestring.decode(character_encoding)
51028,str(bytes_obj)
51029,bytes_obj
51030,"str(b'\xb6', 'cp1252') == b'\xb6'.decode('cp1252') == '¶'"
51031,"str(b'\xb6') == ""b'\\xb6'"" == repr(b'\xb6') != '¶'"
51032,bytes
51033,">>> b""abcde"".decode(""utf-8"") "
51034,'abcde'
51035,bytes
51036,"""windows-1252"""
51037,sys.stdout.encoding
51038,"b""\x80\x02\x03"".decode(""utf-8"")"
51039,UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 0: invalid start byte
51040,utf-8
51041,encoding = 'utf-8'
51042,b'hello'.decode(encoding)
51043,"str(b'hello', encoding)"
51044,encoding = 'utf-8'
51045,'hello'.decode(encoding)
51046,"unicode('hello', encoding)"
51047,variable = b'hello'
51048,unicode_text = variable.decode(character_encoding)
51049,variable = variable.decode()
51050,encoding
51051,bytes.decode
51052,">>> bytes_data = [112, 52, 52]"
51053,">>> """".join(map(chr, bytes_data))"
51054,'p44'
51055,a.decode('latin-1')
51056,"a = bytearray([112, 52, 52])"
51057,latin-1
51058,"bytes([112, 52, 52])"
51059,"PY3K = sys.version_info >= (3, 0)"
51060,
51061,lines = []
51062,for line in stream:
51063,    if not PY3K:
51064,        lines.append(line)
51065,    else:
51066,        lines.append(line.decode('cp437'))
51067,cp437
51068,>>> b'\x00\x01\xffsd'.decode('utf-8')
51069,Traceback (most recent call last):
51070,"  File ""<stdin>"", line 1, in <module>"
51071,UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 2: invalid
51072,start byte
51073,latin-1
51074,ordinal not in range
51075,surrogateescape
51076,[binary] -> [str] -> [binary]
51077,backslashreplace
51078,"PY3K = sys.version_info >= (3, 0)"
51079,
51080,lines = []
51081,for line in stream:
51082,    if not PY3K:
51083,        lines.append(line)
51084,    else:
51085,"        lines.append(line.decode('utf-8', 'backslashreplace'))"
51086,cp437
51087,# --- preparation
51088,
51089,import codecs
51090,
51091,def slashescape(err):
51092,"    """""" codecs error handler. err is UnicodeDecode instance. return"
51093,    a tuple with a replacement for the unencodable part of the input
51094,"    and a position where encoding should continue"""""""
51095,"    #print err, dir(err), err.start, err.end, err.object[:err.start]"
51096,    thebyte = err.object[err.start:err.end]
51097,    repl = u'\\x'+hex(ord(thebyte))[2:]
51098,"    return (repl, err.end)"
51099,
51100,"codecs.register_error('slashescape', slashescape)"
51101,
51102,# --- processing
51103,
51104,stream = [b'\x80abc']
51105,
51106,lines = []
51107,for line in stream:
51108,"    lines.append(line.decode('utf-8', 'slashescape'))"
51109,"b'\x00\x01\xffsd'.decode('utf-8', 'ignore')"
51110,"b'\x80abc'.decode(""utf-8"", ""backslashreplace"")"
51111,'\\x80abc'
51112,"""utf-8"""
51113,b'hello'.decode()
51114,"b'hello'.decode(encoding=""utf-8"")"
51115,b'hello'.decode(encoding)
51116,encoding
51117,>>> from subprocess import *
51118,">>> command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]"
51119,>>> command_text = command_stdout.decode(encoding='windows-1252')
51120,open()
51121,Popen()
51122,universal_newlines=True
51123,locale.getpreferredencoding(False)
51124,'latin-1'
51125,'latin-1'
51126,dir
51127,\xb6
51128,\x14
51129,subprocess
51130,subprocess.check_output
51131,text=True
51132,"text = subprocess.check_output([""ls"", ""-l""], text=True)"
51133,Popen
51134,">>> from subprocess import Popen, PIPE"
51135,">>> text = Popen(['ls', '-l'], stdout=PIPE, encoding='utf-8').communicate()[0]"
51136,>>> type(text)
51137,str
51138,>>> print(text)
51139,total 0
51140,-rw-r--r-- 1 wim badger 0 May 31 12:45 some_file.txt
51141,>>> b'abcde'.decode()
51142,'abcde'
51143,sys.getdefaultencoding()
51144,sys.getdefaultencoding()
51145,decode
51146,>>> b'caf\xe9'.decode('cp1250')
51147,'café'
51148,ls
51149,utf-8
51150,encoding
51151,text
51152,subprocess
51153,Popen
51154,subprocess.run
51155,check_call
51156,check_output
51157,"command_stdout = Popen(['ls', '-l'], stdout=PIPE, universal_newlines=True).communicate()[0]"
51158,text=True
51159,universal_newlines=True
51160,unicode_text = bytestring.decode(character_encoding)
51161,>>> b'\xc2\xb5'.decode('utf-8')
51162,'µ'
51163,ls
51164,b'/'
51165,b'\0'
51166,">>> open(bytes(range(0x100)).translate(None, b'\0/'), 'w').close()"
51167,UnicodeDecodeError
51168,>>> '—'.encode('utf-8').decode('cp1252')
51169,'â€”'
51170,chardet
51171,ls
51172,os.fsdecode()
51173,sys.getfilesystemencoding()
51174,surrogateescape
51175,import os
51176,import subprocess
51177,
51178,output = os.fsdecode(subprocess.check_output('ls'))
51179,os.fsencode()
51180,universal_newlines=True
51181,subprocess
51182,locale.getpreferredencoding(False)
51183,cp1252
51184,io.TextIOWrapper()
51185,dir
51186,cmd
51187,"output = subprocess.check_output('dir', shell=True, encoding='cp437')"
51188,os.listdir()
51189,'\xb6'
51190,'\x14'
51191,b'\x14'
51192,command_stdout.decode()
51193,decode()
51194,"codecs.decode(obj, encoding='utf-8', errors='strict')"
51195,.decode()
51196,'utf-8'
51197,.decode()
51198,decode()
51199,>>> my_byte_str
51200,b'Hello World'
51201,
51202,">>> str(my_byte_str, 'utf-8')"
51203,'Hello World'
51204,utf-8 codec can't decode byte 0x8a
51205,"bytes = b""abcdefg"""
51206,"string = bytes.decode(""utf-8"", ""ignore"") "
51207,m=b'This is bytes'
51208,"m.decode(""utf-8"")"
51209,m.decode()
51210,import codecs
51211,"codecs.decode(m,encoding=""utf-8"")"
51212,import codecs
51213,codecs.decode(m)
51214,"str(m,encoding=""utf-8"")"
51215,str(m)[1:-1]
51216,'This is bytes'
51217,"def cleanLists(self, lista):"
51218,    lista = [x.strip() for x in lista]
51219,"    lista = [x.replace('\n', '') for x in lista]"
51220,"    lista = [x.replace('\b', '') for x in lista]"
51221,    lista = [x.encode('utf8') for x in lista]
51222,    lista = [x.decode('utf8') for x in lista]
51223,
51224,    return lista
51225,.strip
51226,.replace
51227,.encode
51228,\r\n
51229,"String = Bytes.decode(""utf-8"").replace(""\r\n"", ""\n"")"
51230,"Bytes = open(""Input.txt"", ""rb"").read()"
51231,"String = Bytes.decode(""utf-8"")"
51232,"open(""Output.txt"", ""w"").write(String)"
51233,\r\r\n
51234,\n
51235,"Bytes = open(""Input.txt"", ""rb"").read()"
51236,"String = Bytes.decode(""utf-8"").replace(""\r\n"", ""\n"")"
51237,"open(""Output.txt"", ""w"").write(String)"
51238,".replace(""\r\n"", ""\n"")"
51239,byte
51240,string
51241,def byte_to_str(bytes_or_str):
51242,"    if isinstance(bytes_or_str, bytes): # Check if it's in bytes"
51243,        print(bytes_or_str.decode('utf-8'))
51244,    else:
51245,"        print(""Object not of byte type"")"
51246,
51247,byte_to_str(b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n')
51248,total 0
51249,-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
51250,-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2
51251,byte_to_str
51252,bytes.decode
51253,subprocess.run
51254,text=True
51255,capture_output=True
51256,"command_result = subprocess.run([""ls"", ""-l""], capture_output=True, text=True)"
51257,command_result.stdout  # is a `str` containing your program's stdout
51258,text
51259,universal_newlines
51260,universal_newlines=True
51261,text=True
51262,sys.stdout.buffer.write(b'abc')
51263,bytes
51264,.decode()
51265,'utf-8'
51266,"bytes.decode(encoding='utf-8', errors='strict')"
51267,Python3
51268,"byte_value = b""abcde"""
51269,"print(""Initial value = {}"".format(byte_value))"
51270,"print(""Initial value type = {}"".format(type(byte_value)))"
51271,"string_value = byte_value.decode(""utf-8"")"
51272,"# utf-8 is used here because it is a very common encoding, but you need to use the encoding your data is actually in."
51273,"print(""------------"")"
51274,"print(""Converted value = {}"".format(string_value))"
51275,"print(""Converted value type = {}"".format(type(string_value)))"
51276,Initial value = b'abcde'
51277,Initial value type = <class 'bytes'>
51278,------------
51279,Converted value = abcde
51280,Converted value type = <class 'str'>
51281,utf-8
51282,"<byte_string>.decode(""utf-8"")"
51283,<byte_string>.decode()
51284,def toString(string):    
51285,    try:
51286,"        return v.decode(""utf-8"")"
51287,    except ValueError:
51288,        return string
51289,
51290,b = b'97.080.500'
51291,s = '97.080.500'
51292,print(toString(b))
51293,print(toString(s))
51294,"with open(""bytesfile"", ""rb"") as infile:"
51295,    str = base64.b85encode(imageFile.read())
51296,
51297,"with open(""bytesfile"", ""rb"") as infile:"
51298,    str2 = json.dumps(list(infile.read()))
51299,bytes.fromhex('c3a9').decode('utf-8') 
51300,utf-8
51301,python3.6
51302,"def bin2str(text, encoding = 'utf-8'):"
51303,"    """"""Converts a binary to Unicode string by removing all non Unicode char"
51304,    text: binary string to work on
51305,"    encoding: output encoding *utf-8"""""""
51306,
51307,"    return text.decode(encoding, 'ignore')"
51308,ignore
51309,string
51310,sys.getdefaultencoding()
51311,<foo>
51312,   <bar>
51313,"      <type foobar=""1""/>"
51314,"      <type foobar=""2""/>"
51315,   </bar>
51316,</foo>
51317,foobar
51318,"""1"""
51319,"""2"""
51320,ElementTree
51321,lxml
51322,cElementTree
51323,ElementTree
51324,root
51325,import xml.etree.ElementTree as ET
51326,root = ET.parse('thefile.xml').getroot()
51327,ElementTree
51328,for type_tag in root.findall('bar/type'):
51329,    value = type_tag.get('foobar')
51330,    print(value)
51331,1
51332,2
51333,lxml
51334,Warning The xml.etree.ElementTree module is not secure against maliciously constructed data. If you need to parse untrusted or unauthenticated data see XML vulnerabilities.
51335,minidom
51336,<data>
51337,    <items>
51338,"        <item name=""item1""></item>"
51339,"        <item name=""item2""></item>"
51340,"        <item name=""item3""></item>"
51341,"        <item name=""item4""></item>"
51342,    </items>
51343,</data>
51344,from xml.dom import minidom
51345,
51346,dom = minidom.parse('items.xml')
51347,elements = dom.getElementsByTagName('item')
51348,
51349,"print(f""There are {len(elements)} items:"")"
51350,
51351,for element in elements:
51352,    print(element.attributes['name'].value)
51353,There are 4 items:
51354,item1
51355,item2
51356,item3
51357,item4
51358,minidom
51359,item
51360,data->items
51361,data->secondSetOfItems
51362,item
51363,item
51364,for s in itemlist:     print(s.attributes['name'].value)
51365,from bs4 import BeautifulSoup
51366,
51367,"x=""""""<foo>"
51368,   <bar>
51369,"      <type foobar=""1""/>"
51370,"      <type foobar=""2""/>"
51371,   </bar>
51372,"</foo>"""""""
51373,
51374,y=BeautifulSoup(x)
51375,">>> y.foo.bar.type[""foobar""]"
51376,u'1'
51377,
51378,">>> y.foo.bar.findAll(""type"")"
51379,"[<type foobar=""1""></type>, <type foobar=""2""></type>]"
51380,
51381,">>> y.foo.bar.findAll(""type"")[0][""foobar""]"
51382,u'1'
51383,">>> y.foo.bar.findAll(""type"")[1][""foobar""]"
51384,u'2'
51385,BeautifulStoneSoup
51386,"BeautifulSoup(source_xml, features=""xml"")"
51387,ElementTree
51388,BeautifulSoup
51389,readlines
51390,library                         time    space
51391,xml.dom.minidom (Python 2.1)    6.3 s   80000K
51392,gnosis.objectify                2.0 s   22000k
51393,xml.dom.minidom (Python 2.4)    1.4 s   53000k
51394,ElementTree 1.2                 1.6 s   14500k  
51395,ElementTree 1.2.4/1.3           1.1 s   14500k  
51396,cDomlette (C extension)         0.540 s 20500k
51397,PyRXPU (C extension)            0.175 s 10850k
51398,libxml2 (C extension)           0.098 s 16000k
51399,readlines (read as utf-8)       0.093 s 8850k
51400,cElementTree (C extension)  --> 0.047 s 4900K <--
51401,readlines (read as ascii)       0.032 s 5050k   
51402,cElementTree
51403,from xml.etree import cElementTree as ElementTree
51404,from xml.etree import ElementTree
51405,from xml.etree import cElementTree as ElementTree
51406,from xml.etree import ElementTree
51407,ElementTree
51408,minidom
51409,>>> e = '<foo>
51410,             <bar>
51411,"                 <type foobar=""1""/>"
51412,"                 <type foobar=""2""/>"
51413,             </bar>
51414,        </foo> '
51415,
51416,>>> import xmltodict
51417,>>> result = xmltodict.parse(e)
51418,>>> result
51419,
51420,"OrderedDict([(u'foo', OrderedDict([(u'bar', OrderedDict([(u'type', [OrderedDict([(u'@foobar', u'1')]), OrderedDict([(u'@foobar', u'2')])])]))]))])"
51421,
51422,>>> result['foo']
51423,
51424,"OrderedDict([(u'bar', OrderedDict([(u'type', [OrderedDict([(u'@foobar', u'1')]), OrderedDict([(u'@foobar', u'2')])])]))])"
51425,
51426,>>> result['foo']['bar']
51427,
51428,"OrderedDict([(u'type', [OrderedDict([(u'@foobar', u'1')]), OrderedDict([(u'@foobar', u'2')])])])"
51429,"result[""foo""][""bar""][""type""]"
51430,<type>
51431,from lxml import objectify
51432,from collections import defaultdict
51433,
51434,count = defaultdict(int)
51435,
51436,root = objectify.fromstring(text)
51437,
51438,for item in root.bar.type:
51439,"    count[item.attrib.get(""foobar"")] += 1"
51440,
51441,print dict(count)
51442,"{'1': 1, '2': 1}"
51443,count
51444,collections.Counter
51445,xml.parsers.expat
51446,"stringofxml = """"""<foo>"
51447,    <bar>
51448,"        <type arg=""value"" />"
51449,"        <type arg=""value"" />"
51450,"        <type arg=""value"" />"
51451,    </bar>
51452,    <bar>
51453,"        <type arg=""value"" />"
51454,    </bar>
51455,"</foo>"""""""
51456,count = 0
51457,"def start(name, attr):"
51458,    global count
51459,    if name == 'type':
51460,        count += 1
51461,
51462,p = expat.ParserCreate()
51463,p.StartElementHandler = start
51464,p.Parse(stringofxml)
51465,
51466,print count # prints 4
51467,pip install untangle
51468,<foo>
51469,"   <bar name=""bar_name"">"
51470,"      <type foobar=""1""/>"
51471,   </bar>
51472,</foo>
51473,untangle
51474,import untangle
51475,
51476,obj = untangle.parse('/path_to_xml_file/file.xml')
51477,
51478,print obj.foo.bar['name']
51479,print obj.foo.bar.type['foobar']
51480,bar_name
51481,1
51482,import declxml as xml
51483,
51484,"xml_string = """""""
51485,<foo>
51486,   <bar>
51487,"      <type foobar=""1""/>"
51488,"      <type foobar=""2""/>"
51489,   </bar>
51490,</foo>
51491,""""""""
51492,
51493,"processor = xml.dictionary('foo', ["
51494,"    xml.dictionary('bar', ["
51495,"        xml.array(xml.integer('type', attribute='foobar'))"
51496,    ])
51497,])
51498,
51499,"xml.parse_from_string(processor, xml_string)"
51500,"{'bar': {'foobar': [1, 2]}}"
51501,data = {'bar': {
51502,"    'foobar': [7, 3, 21, 16, 11]"
51503,}}
51504,
51505,"xml.serialize_to_string(processor, data, indent='    ')"
51506,"<?xml version=""1.0"" ?>"
51507,<foo>
51508,    <bar>
51509,"        <type foobar=""7""/>"
51510,"        <type foobar=""3""/>"
51511,"        <type foobar=""21""/>"
51512,"        <type foobar=""16""/>"
51513,"        <type foobar=""11""/>"
51514,    </bar>
51515,</foo>
51516,import declxml as xml
51517,
51518,class Bar:
51519,
51520,    def __init__(self):
51521,        self.foobars = []
51522,
51523,    def __repr__(self):
51524,        return 'Bar(foobars={})'.format(self.foobars)
51525,
51526,
51527,"xml_string = """""""
51528,<foo>
51529,   <bar>
51530,"      <type foobar=""1""/>"
51531,"      <type foobar=""2""/>"
51532,   </bar>
51533,</foo>
51534,""""""""
51535,
51536,"processor = xml.dictionary('foo', ["
51537,"    xml.user_object('bar', Bar, ["
51538,"        xml.array(xml.integer('type', attribute='foobar'), alias='foobars')"
51539,    ])
51540,])
51541,
51542,"xml.parse_from_string(processor, xml_string)"
51543,"{'bar': Bar(foobars=[1, 2])}"
51544,cElementTree
51545,try:
51546,    import cElementTree as ET
51547,except ImportError:
51548,  try:
51549,    # Python 2.5 need to import a different module
51550,    import xml.etree.cElementTree as ET
51551,  except ImportError:
51552,"    exit_err(""Failed to import cElementTree from any known place"")      "
51553,
51554,"def find_in_tree(tree, node):"
51555,    found = tree.find(node)
51556,    if found == None:
51557,"        print ""No %s in file"" % node"
51558,        found = []
51559,    return found  
51560,
51561,# Parse a xml file (specify the path)
51562,"def_file = ""xml_file_name.xml"""
51563,try:
51564,"    dom = ET.parse(open(def_file, ""r""))"
51565,    root = dom.getroot()
51566,except:
51567,"    exit_err(""Unable to open and parse input definition file: "" + def_file)"
51568,
51569,# Parse to find the child nodes list of node 'myNode'
51570,"fwdefs = find_in_tree(root,""myNode"")"
51571,<foo>
51572,   <bar>
51573,"      <type foobar=""1""/>"
51574,"      <type foobar=""2""/>"
51575,   </bar>
51576,</foo>
51577,import xml.etree.cElementTree as ET
51578,
51579,"tree = ET.parse(""foo.xml"")"
51580,root = tree.getroot() 
51581,root_tag = root.tag
51582,print(root_tag) 
51583,
51584,"for form in root.findall(""./bar/type""):"
51585,    x=(form.attrib)
51586,    z=list(x)
51587,    for i in z:
51588,        print(x[i])
51589,foo
51590,1
51591,2
51592,python-benedict
51593,dict
51594,pip install python-benedict
51595,from benedict import benedict as bdict
51596,
51597,"# data-source can be an url, a filepath or data-string (as in this example)"
51598,"data_source = """""""
51599,<foo>
51600,   <bar>
51601,"      <type foobar=""1""/>"
51602,"      <type foobar=""2""/>"
51603,   </bar>
51604,"</foo>"""""""
51605,
51606,data = bdict.from_xml(data_source)
51607,"t_list = data['foo.bar'] # yes, keypath supported"
51608,for t in t_list:
51609,   print(t['@foobar'])
51610,Base64
51611,CSV
51612,JSON
51613,TOML
51614,XML
51615,YAML
51616,query-string
51617,"standalone=""no"""
51618,.node
51619,sourceline
51620,import xml.etree.ElementTree as ET
51621,data = '''<foo>
51622,           <bar>
51623,"               <type foobar=""1""/>"
51624,"               <type foobar=""2""/>"
51625,          </bar>
51626,       </foo>'''
51627,tree = ET.fromstring(data)
51628,lst = tree.findall('bar/type')
51629,for item in lst:
51630,    print item.get('foobar')
51631,foobar
51632,simplified_scrapy
51633,from simplified_scrapy import SimplifiedDoc
51634,xml = '''
51635,<foo>
51636,   <bar>
51637,"      <type foobar=""1""/>"
51638,"      <type foobar=""2""/>"
51639,   </bar>
51640,</foo>
51641,'''
51642,
51643,doc = SimplifiedDoc(xml)
51644,types = doc.selects('bar>type')
51645,print (len(types)) # 2
51646,"print (types.foobar) # ['1', '2']"
51647,"print (doc.selects('bar>type>foobar()')) # ['1', '2']"
51648,#If the xml is in the form of a string as shown below then
51649,"from lxml  import etree, objectify"
51650,'''sample xml as a string with a name space {http://xmlns.abc.com}'''
51651,"message =b'<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<pa:Process xmlns:pa=""http://xmlns.abc.com"">\r\n\t<pa:firsttag>SAMPLE</pa:firsttag></pa:Process>\r\n'  # this is a sample xml which is a string"
51652,
51653,
51654,print('************message coversion and parsing starts*************')
51655,
51656,message=message.decode('utf-8') 
51657,"message=message.replace('<?xml version=""1.0"" encoding=""UTF-8""?>\r\n','') #replace is used to remove unwanted strings from the 'message'"
51658,"message=message.replace('pa:Process>\r\n','pa:Process>')"
51659,print (message)
51660,
51661,print ('******Parsing starts*************')
51662,parser = etree.XMLParser(remove_blank_text=True) #the name space is removed here
51663,"root = etree.fromstring(message, parser) #parsing of xml happens here"
51664,print ('******Parsing completed************')
51665,
51666,
51667,dict={}
51668,for child in root: # parsed xml is iterated using a for loop and values are stored in a dictionary
51669,"    print(child.tag,child.text)"
51670,    print('****Derving from xml tree*****')
51671,"    if child.tag ==""{http://xmlns.abc.com}firsttag"":"
51672,"        dict[""FIRST_TAG""]=child.text"
51673,        print(dict)
51674,
51675,
51676,### output
51677,'''************message coversion and parsing starts*************
51678,"<pa:Process xmlns:pa=""http://xmlns.abc.com"">"
51679,
51680,    <pa:firsttag>SAMPLE</pa:firsttag></pa:Process>
51681,******Parsing starts*************
51682,******Parsing completed************
51683,{http://xmlns.abc.com}firsttag SAMPLE
51684,****Derving from xml tree*****
51685,{'FIRST_TAG': 'SAMPLE'}'''
51686,xml
51687,dictionary
51688,<tag/>
51689,<tag var=val/>
51690,import re
51691,
51692,def getdict(content):
51693,"    res=re.findall(""<(?P<var>\S*)(?P<attr>[^/>]*)(?:(?:>(?P<val>.*?)</(?P=var)>)|(?:/>))"",content)"
51694,    if len(res)>=1:
51695,"        attreg=""(?P<avr>\S+?)(?:(?:=(?P<quote>['\""])(?P<avl>.*?)(?P=quote))|(?:=(?P<avl1>.*?)(?:\s|$))|(?P<avl2>[\s]+)|$)"""
51696,        if len(res)>1:
51697,"            return [{i[0]:[{""@attributes"":[{j[0]:(j[2] or j[3] or j[4])} for j in re.findall(attreg,i[1].strip())]},{""$values"":getdict(i[2])}]} for i in res]"
51698,        else:
51699,"            return {res[0]:[{""@attributes"":[{j[0]:(j[2] or j[3] or j[4])} for j in re.findall(attreg,res[1].strip())]},{""$values"":getdict(res[2])}]}"
51700,    else:
51701,        return content
51702,
51703,"with open(""test.xml"",""r"") as f:"
51704,"    print(getdict(f.read().replace('\n','')))"
51705,"<details class=""4b"" count=1 boy>"
51706,"    <name type=""firstname"">John</name>"
51707,    <age>13</age>
51708,    <hobby>Coin collection</hobby>
51709,    <hobby>Stamp collection</hobby>
51710,    <address>
51711,        <country>USA</country>
51712,        <state>CA</state>
51713,    </address>
51714,</details>
51715,"<details empty=""True""/>"
51716,<details/>
51717,"<details class=""4a"" count=2 girl>"
51718,"    <name type=""firstname"">Samantha</name>"
51719,    <age>13</age>
51720,    <hobby>Fishing</hobby>
51721,    <hobby>Chess</hobby>
51722,"    <address current=""no"">"
51723,        <country>Australia</country>
51724,        <state>NSW</state>
51725,    </address>
51726,</details>
51727,[
51728,  {
51729,"    ""details"": ["
51730,      {
51731,"        ""@attributes"": ["
51732,          {
51733,"            ""class"": ""4b"""
51734,"          },"
51735,          {
51736,"            ""count"": ""1"""
51737,"          },"
51738,          {
51739,"            ""boy"": """""
51740,          }
51741,        ]
51742,"      },"
51743,      {
51744,"        ""$values"": ["
51745,          {
51746,"            ""name"": ["
51747,              {
51748,"                ""@attributes"": ["
51749,                  {
51750,"                    ""type"": ""firstname"""
51751,                  }
51752,                ]
51753,"              },"
51754,              {
51755,"                ""$values"": ""John"""
51756,              }
51757,            ]
51758,"          },"
51759,          {
51760,"            ""age"": ["
51761,              {
51762,"                ""@attributes"": []"
51763,"              },"
51764,              {
51765,"                ""$values"": ""13"""
51766,              }
51767,            ]
51768,"          },"
51769,          {
51770,"            ""hobby"": ["
51771,              {
51772,"                ""@attributes"": []"
51773,"              },"
51774,              {
51775,"                ""$values"": ""Coin collection"""
51776,              }
51777,            ]
51778,"          },"
51779,          {
51780,"            ""hobby"": ["
51781,              {
51782,"                ""@attributes"": []"
51783,"              },"
51784,              {
51785,"                ""$values"": ""Stamp collection"""
51786,              }
51787,            ]
51788,"          },"
51789,          {
51790,"            ""address"": ["
51791,              {
51792,"                ""@attributes"": []"
51793,"              },"
51794,              {
51795,"                ""$values"": ["
51796,                  {
51797,"                    ""country"": ["
51798,                      {
51799,"                        ""@attributes"": []"
51800,"                      },"
51801,                      {
51802,"                        ""$values"": ""USA"""
51803,                      }
51804,                    ]
51805,"                  },"
51806,                  {
51807,"                    ""state"": ["
51808,                      {
51809,"                        ""@attributes"": []"
51810,"                      },"
51811,                      {
51812,"                        ""$values"": ""CA"""
51813,                      }
51814,                    ]
51815,                  }
51816,                ]
51817,              }
51818,            ]
51819,          }
51820,        ]
51821,      }
51822,    ]
51823,"  },"
51824,  {
51825,"    ""details"": ["
51826,      {
51827,"        ""@attributes"": ["
51828,          {
51829,"            ""empty"": ""True"""
51830,          }
51831,        ]
51832,"      },"
51833,      {
51834,"        ""$values"": """""
51835,      }
51836,    ]
51837,"  },"
51838,  {
51839,"    ""details"": ["
51840,      {
51841,"        ""@attributes"": []"
51842,"      },"
51843,      {
51844,"        ""$values"": """""
51845,      }
51846,    ]
51847,"  },"
51848,  {
51849,"    ""details"": ["
51850,      {
51851,"        ""@attributes"": ["
51852,          {
51853,"            ""class"": ""4a"""
51854,"          },"
51855,          {
51856,"            ""count"": ""2"""
51857,"          },"
51858,          {
51859,"            ""girl"": """""
51860,          }
51861,        ]
51862,"      },"
51863,      {
51864,"        ""$values"": ["
51865,          {
51866,"            ""name"": ["
51867,              {
51868,"                ""@attributes"": ["
51869,                  {
51870,"                    ""type"": ""firstname"""
51871,                  }
51872,                ]
51873,"              },"
51874,              {
51875,"                ""$values"": ""Samantha"""
51876,              }
51877,            ]
51878,"          },"
51879,          {
51880,"            ""age"": ["
51881,              {
51882,"                ""@attributes"": []"
51883,"              },"
51884,              {
51885,"                ""$values"": ""13"""
51886,              }
51887,            ]
51888,"          },"
51889,          {
51890,"            ""hobby"": ["
51891,              {
51892,"                ""@attributes"": []"
51893,"              },"
51894,              {
51895,"                ""$values"": ""Fishing"""
51896,              }
51897,            ]
51898,"          },"
51899,          {
51900,"            ""hobby"": ["
51901,              {
51902,"                ""@attributes"": []"
51903,"              },"
51904,              {
51905,"                ""$values"": ""Chess"""
51906,              }
51907,            ]
51908,"          },"
51909,          {
51910,"            ""address"": ["
51911,              {
51912,"                ""@attributes"": ["
51913,                  {
51914,"                    ""current"": ""no"""
51915,                  }
51916,                ]
51917,"              },"
51918,              {
51919,"                ""$values"": ["
51920,                  {
51921,"                    ""country"": ["
51922,                      {
51923,"                        ""@attributes"": []"
51924,"                      },"
51925,                      {
51926,"                        ""$values"": ""Australia"""
51927,                      }
51928,                    ]
51929,"                  },"
51930,                  {
51931,"                    ""state"": ["
51932,                      {
51933,"                        ""@attributes"": []"
51934,"                      },"
51935,                      {
51936,"                        ""$values"": ""NSW"""
51937,                      }
51938,                    ]
51939,                  }
51940,                ]
51941,              }
51942,            ]
51943,          }
51944,        ]
51945,      }
51946,    ]
51947,  }
51948,]
51949,"<pa:Process xmlns:pa=""http://sssss"">"
51950,        <pa:firsttag>SAMPLE</pa:firsttag>
51951,    </pa:Process>
51952,"from lxml import etree, objectify"
51953,metadata = 'C:\\Users\\PROCS.xml' # this is sample xml file the contents are shown above
51954,parser = etree.XMLParser(remove_blank_text=True) # this line removes the  name space from the xml in this sample the name space is --> http://sssss
51955,"tree = etree.parse(metadata, parser) # this line parses the xml file which is PROCS.xml"
51956,root = tree.getroot() # we get the root of xml which is process and iterate using a for loop
51957,for elem in root.getiterator():
51958,"    if not hasattr(elem.tag, 'find'): continue  # (1)"
51959,    i = elem.tag.find('}')
51960,    if i >= 0:
51961,        elem.tag = elem.tag[i+1:]
51962,
51963,dict={}  # a python dictionary is declared
51964,for elem in tree.iter(): #iterating through the xml tree using a for loop
51965,"    if elem.tag ==""firsttag"": # if the tag name matches the name that is equated then the text in the tag is stored into the dictionary"
51966,"        dict[""FIRST_TAG""]=str(elem.text)"
51967,        print(dict)
51968,{'FIRST_TAG': 'SAMPLE'}
51969,"di = {1: ""A"", 2: ""B""}"
51970,col1
51971,     col1   col2
51972,0       w      a
51973,1       1      2
51974,2       2    NaN
51975,     col1   col2
51976,0       w      a
51977,1       A      2
51978,2       B    NaN
51979,.replace
51980,">>> df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})"
51981,">>> di = {1: ""A"", 2: ""B""}"
51982,>>> df
51983,  col1 col2
51984,0    w    a
51985,1    1    2
51986,2    2  NaN
51987,">>> df.replace({""col1"": di})"
51988,  col1 col2
51989,0    w    a
51990,1    A    2
51991,2    B  NaN
51992,Series
51993,"df[""col1""].replace(di, inplace=True)"
51994,col```` is tuple. The error info is 
51995,"'3.6.1 |Anaconda custom (64-bit)| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]'"
51996,map
51997,replace
51998,map
51999,replace
52000,df['col1'].map(di)       # note: if the dictionary does not exhaustively map all
52001,                         # entries then non-matched entries are changed to NaNs
52002,map
52003,fillna
52004,df['col1'].map(di).fillna(df['col1'])
52005,"di = {1: ""A"", 2: ""B"", 3: ""C"", 4: ""D"", 5: ""E"", 6: ""F"", 7: ""G"", 8: ""H"" }"
52006,"df = pd.DataFrame({ 'col1': np.random.choice( range(1,9), 100000 ) })"
52007,%timeit
52008,map
52009,replace
52010,map
52011,df.replace
52012,map
52013,replace
52014,.map
52015,.map
52016,.replace
52017,.map
52018,di
52019,di
52020,df['col1']
52021,di
52022,di
52023,update
52024,df['col1'].update(pd.Series(di))
52025,import pandas as pd
52026,import numpy as np
52027,
52028,"df = pd.DataFrame({'col1':['w', 10, 20],"
52029,"                   'col2': ['a', 30, np.nan]},"
52030,"                  index=[1,2,0])"
52031,#   col1 col2
52032,# 1    w    a
52033,# 2   10   30
52034,# 0   20  NaN
52035,
52036,"di = {0: ""A"", 2: ""B""}"
52037,
52038,"# The value at the 0-index is mapped to 'A', the value at the 2-index is mapped to 'B'"
52039,df['col1'].update(pd.Series(di))
52040,print(df)
52041,  col1 col2
52042,1    w    a
52043,2    B   30
52044,0    A  NaN
52045,update
52046,di
52047,di
52048,df['col1']
52049,replace
52050,import pandas as pd
52051,import numpy as np
52052,
52053,"df = pd.DataFrame({'col1':['w', 10, 20],"
52054,"                   'col2': ['a', 30, np.nan]},"
52055,"                  index=[1,2,0])"
52056,print(df)
52057,#   col1 col2
52058,# 1    w    a
52059,# 2   10   30
52060,# 0   20  NaN
52061,
52062,"di = {10: ""A"", 20: ""B""}"
52063,
52064,# The values 10 and 20 are replaced by 'A' and 'B'
52065,"df['col1'].replace(di, inplace=True)"
52066,print(df)
52067,  col1 col2
52068,1    w    a
52069,2    A   30
52070,0    B  NaN
52071,di
52072,df['col1']
52073,di
52074,"df['col1'].put(di.keys(), di.values())"
52075,"df = pd.DataFrame({'col1':['w', 10, 20],"
52076,"                   'col2': ['a', 30, np.nan]},"
52077,"                  index=[1,2,0])"
52078,"di = {0: ""A"", 2: ""B""}"
52079,
52080,# The values at the 0 and 2 index locations are replaced by 'A' and 'B'
52081,"df['col1'].put(di.keys(), di.values())"
52082,print(df)
52083,  col1 col2
52084,1    A    a
52085,2   10   30
52086,0    B  NaN
52087,di
52088,0
52089,2
52090,replace
52091,update()
52092,replace()
52093,import pandas as pd
52094,
52095,"df = pd.DataFrame({'col1': [1, 2, 2, 3, 1],"
52096,"            'col2': ['negative', 'positive', 'neutral', 'neutral', 'positive']})"
52097,
52098,"conversion_dict = {'negative': -1, 'neutral': 0, 'positive': 1}"
52099,df['converted_column'] = df['col2'].replace(conversion_dict)
52100,
52101,print(df.head())
52102,   col1      col2  converted_column
52103,0     1  negative                -1
52104,1     2  positive                 1
52105,2     2   neutral                 0
52106,3     3   neutral                 0
52107,4     1  positive                 1
52108,Series.map()
52109,map
52110,NaN
52111,mask
52112,.fillna
52113,NaN
52114,import pandas as pd
52115,import numpy as np
52116,
52117,"d = {'m': 'Male', 'f': 'Female', 'missing': np.NaN}"
52118,"df = pd.DataFrame({'gender': ['m', 'f', 'missing', 'Male', 'U']})"
52119,"keep_nan = [k for k,v in d.items() if pd.isnull(v)]"
52120,s = df['gender']
52121,
52122,df['mapped'] = s.map(d).fillna(s.mask(s.isin(keep_nan)))
52123,    gender  mapped
52124,0        m    Male
52125,1        f  Female
52126,2  missing     NaN
52127,3     Male    Male
52128,4        U       U
52129,"def remap(data,dict_labels):"
52130,"    """""""
52131,    This function take in a dictionnary of labels : dict_labels 
52132,    and replace the values (previously labelencode) into the string.
52133,
52134,"    ex: dict_labels = {{'col1':{1:'A',2:'B'}}"
52135,
52136,"    """""""
52137,"    for field,values in dict_labels.items():"
52138,"        print(""I am remapping %s""%field)"
52139,"        data.replace({field:values},inplace=True)"
52140,"    print(""DONE"")"
52141,
52142,    return data
52143,DataFrame.replace()
52144,"df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd', np.nan]})"
52145,"map_ = {'a': 'A', 'b': 'B', 'd': np.nan}"
52146,
52147,# Get mapping from df
52148,uniques = df['col1'].unique()
52149,"map_new = dict(zip(uniques, uniques))"
52150,"# {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', nan: nan}"
52151,
52152,# Update mapping
52153,map_new.update(map_)
52154,"# {'a': 'A', 'b': 'B', 'c': 'c', 'd': nan, nan: nan}"
52155,
52156,df['col2'] = df['col1'].map(dct_map_new)
52157,  col1 col2
52158,0    a    A
52159,1    b    B
52160,2    c    c
52161,3    d  NaN
52162,4  NaN  NaN
52163,apply
52164,"df['col1'].apply(lambda x: {1: ""A"", 2: ""B""}.get(x,x))"
52165,">>> df['col1']=df['col1'].apply(lambda x: {1: ""A"", 2: ""B""}.get(x,x))"
52166,>>> df
52167,  col1 col2
52168,0    w    a
52169,1    1    2
52170,2    2  NaN
52171,>>> 
52172,di
52173,labels = features['col1'].unique()
52174,"labels_dict = dict(zip(labels, range(len(labels))))"
52175,"features = features.replace({""col1"": labels_dict})"
52176,"df.loc[:,['col1','col2']].transform(lambda x: x.map(lambda x: {1: ""A"", 2: ""B""}.get(x,x))"
52177,.transform()
52178,.apply()
52179,map()
52180,".get(x,x)"
52181,.map()
52182,.transform()
52183,.apply()
52184,apply()
52185,loc
52186,"df[[""col1"", ""col2""]].apply(lambda col: col.map(lambda elem: my_dict.get(elem, elem)))"
52187,".get(x,x)"
52188,.map()
52189,fillna()
52190,"def multiple_replace(dict, text):"
52191,  # Create a regular expression  from the dictionary keys
52192,"  regex = re.compile(""(%s)"" % ""|"".join(map(re.escape, dict.keys())))"
52193,
52194,"  # For each match, look-up corresponding value in dictionary"
52195,"  return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text) "
52196,"di = {1: ""A"", 2: ""B""}"
52197,"df['col1'] = df.apply(lambda row: multiple_replace(di, row['col1']), axis=1)"
52198,[image for image in menuitem for menuitem in list_of_menuitems]
52199,NameError
52200,name 'menuitem' is not defined
52201,reduce
52202,"reduce(list.__add__, map(lambda x: list(x), list_of_menuitems))"
52203,list(x)
52204,QuerySet
52205,">>> reduce(list.__add__, (list(mi) for mi in list_of_menuitems))"
52206,>>> [image for mi in list_of_menuitems for image in mi]
52207,itertools.chain
52208,>>> from itertools import chain
52209,>>> list(chain(*list_of_menuitems))
52210,chain.from_iterable
52211,">>> chain = itertools.chain.from_iterable([[1,2],[3],[5,89],[],[6]])"
52212,>>> print(list(chain))
52213,">>> [1, 2, 3, 5, 89, 6]"
52214,">>> list_of_menuitems = [['image00', 'image01'], ['image10'], []]"
52215,>>> import itertools
52216,>>> chain = itertools.chain(*list_of_menuitems)
52217,>>> print(list(chain))
52218,"['image00', 'image01', 'image10']"
52219,QuerySet
52220,chain
52221,list(chain)
52222,itertools.chain.from_iterable
52223,*
52224,.extend
52225,from_iterable
52226,for
52227,for
52228,for inner_list in outer_list:
52229,    for item in inner_list:
52230,        ...
52231,[... for inner_list in outer_list for item in inner_list]
52232,[image for menuitem in list_of_menuitems for image in menuitem]
52233,[... for item in inner_list]
52234,for i in list: ...
52235,... for i in list
52236,#!/usr/bin/env python2.6
52237,
52238,"""""""Usage: %prog item_count"""""""
52239,
52240,from __future__ import print_function
52241,
52242,import collections
52243,import itertools
52244,import operator
52245,from timeit import Timer
52246,import sys
52247,
52248,import matplotlib.pyplot as pyplot
52249,
52250,def itertools_flatten(iter_lst):
52251,    return list(itertools.chain(*iter_lst))
52252,
52253,def itertools_iterable_flatten(iter_iter):
52254,    return list(itertools.chain.from_iterable(iter_iter))
52255,
52256,def reduce_flatten(iter_lst):
52257,"    return reduce(operator.add, map(list, iter_lst))"
52258,
52259,def reduce_lambda_flatten(iter_lst):
52260,"    return reduce(operator.add, map(lambda x: list(x), [i for i in iter_lst]))"
52261,
52262,def comprehension_flatten(iter_lst):
52263,    return list(item for iter_ in iter_lst for item in iter_)
52264,
52265,"METHODS = ['itertools', 'itertools_iterable', 'reduce', 'reduce_lambda',"
52266,           'comprehension']
52267,
52268,def _time_test_assert(iter_lst):
52269,"    """"""Make sure all methods produce an equivalent value."
52270,"    :raise AssertionError: On any non-equivalent value."""""""
52271,    callables = (globals()[method + '_flatten'] for method in METHODS)
52272,    results = [callable(iter_lst) for callable in callables]
52273,    if not all(result == results[0] for result in results[1:]):
52274,        raise AssertionError
52275,
52276,"def time_test(partition_count, item_count_per_partition, test_count=10000):"
52277,"    """"""Run flatten methods on a list of :param:`partition_count` iterables."
52278,    Normalize results over :param:`test_count` runs.
52279,    :return: Mapping from method to (normalized) microseconds per pass.
52280,"    """""""
52281,    iter_lst = [[dict()] * item_count_per_partition] * partition_count
52282,"    print('Partition count:    ', partition_count)"
52283,"    print('Items per partition:', item_count_per_partition)"
52284,    _time_test_assert(iter_lst)
52285,    test_str = 'flatten(%r)' % iter_lst
52286,    result_by_method = {}
52287,    for method in METHODS:
52288,        setup_str = 'from test import %s_flatten as flatten' % method
52289,"        t = Timer(test_str, setup_str)"
52290,        per_pass = test_count * t.timeit(number=test_count) / test_count
52291,"        print('%20s: %.2f usec/pass' % (method, per_pass))"
52292,        result_by_method[method] = per_pass
52293,    return result_by_method
52294,
52295,if __name__ == '__main__':
52296,    if len(sys.argv) != 2:
52297,        raise ValueError('Need a number of items to flatten')
52298,    item_count = int(sys.argv[1])
52299,    partition_counts = []
52300,    pass_times_by_method = collections.defaultdict(list)
52301,"    for partition_count in xrange(1, item_count):"
52302,        if item_count % partition_count != 0:
52303,            continue
52304,        items_per_partition = item_count / partition_count
52305,"        result_by_method = time_test(partition_count, items_per_partition)"
52306,        partition_counts.append(partition_count)
52307,"        for method, result in result_by_method.iteritems():"
52308,            pass_times_by_method[method].append(result)
52309,"    for method, pass_times in pass_times_by_method.iteritems():"
52310,"        pyplot.plot(partition_counts, pass_times, label=method)"
52311,    pyplot.legend()
52312,    pyplot.title('Flattening Comparison for %d Items' % item_count)
52313,    pyplot.xlabel('Number of Partitions')
52314,    pyplot.ylabel('Microseconds')
52315,    pyplot.show()
52316,METHODS
52317,"sum_flatten = lambda iter_lst: sum(map(list, iter_lst), [])"
52318,reduce(operator.iadd
52319,chain.from_iterable()
52320,"sum(list_of_lists, [])"
52321,"l = [['image00', 'image01'], ['image10'], []]"
52322,"print sum(l,[]) # prints ['image00', 'image01', 'image10']"
52323,iter[::-1]
52324,"sorted(iter, reverse=True)"
52325,def flatten(x):
52326,    result = []
52327,    for el in x:
52328,"        if hasattr(el, ""__iter__"") and not isinstance(el, basestring):"
52329,            result.extend(flatten(el))
52330,        else:
52331,            result.append(el)
52332,    return result
52333,"hasattr(el, '__getitem__')"
52334,iter()
52335,__getitem__
52336,__iter__
52337,str
52338,basestring
52339,RECURSION ERROR ON
52340,"A = ['str1', [[[['str2']]]], [['str3'], 'str4'], 'str5'] and input "
52341,chain.from_iterable()
52342,>>> from itertools import chain
52343,>>> list(chain.from_iterable(mi.image_set.all() for mi in h.get_image_menu()))
52344,import itertools
52345,def itertools_flatten( aList ):
52346,    return list( itertools.chain(*aList) )
52347,
52348,from operator import add
52349,def reduce_flatten1( aList ):
52350,"    return reduce(add, map(lambda x: list(x), [mi for mi in aList]))"
52351,
52352,def reduce_flatten2( aList ):
52353,"    return reduce(list.__add__, map(list, aList))"
52354,
52355,def comprehension_flatten( aList ):
52356,    return list(y for x in aList for y in x)
52357,itertools_flatten     0.00554
52358,comprehension_flatten 0.00815
52359,reduce_flatten2       0.01103
52360,reduce_flatten1       0.01404
52361,"map(lambda x: list(x), [mi for mi in aList]))"
52362,"map(list, aList)"
52363,"reduce_flatten = lambda list_of_iters: reduce(list.__add__, map(list, list_of_iters))"
52364,itertools_flatten2 = lambda aList: list(itertools.chain.from_iterable(aList))
52365,"sum_flatten = lambda aList: sum(map(list, aList), [])"
52366,operator.add
52367,concat
52368,operator.concat
52369,">>> list2d = ((1,2,3),(4,5,6), (7,), (8,9))"
52370,">>> reduce(operator.concat, list2d)"
52371,"(1, 2, 3, 4, 5, 6, 7, 8, 9)"
52372,">>> list2d = [[1,2,3],[4,5,6], [7], [8,9]]"
52373,">>> reduce(operator.concat, list2d)"
52374,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
52375,">>> list2d = [[1,2,3],[4,5,6], [7], [8,9]]"
52376,>>> %timeit list(itertools.chain.from_iterable(list2d))
52377,"1000000 loops, best of 3: 1.36 µs per loop"
52378,">>> list2d = ((1,2,3),(4,5,6), (7,), (8,9))"
52379,">>> %timeit reduce(operator.concat, list2d)"
52380,"1000000 loops, best of 3: 492 ns per loop"
52381,"reduce(list.__add__, map(list, [mi.image_set.all() for mi in list_of_menuitems]))"
52382,"reduce(list.__add__, [list(mi.image_set.all()) for mi in list_of_menuitems])"
52383,"sum([list(mi.image_set.all()) for mi in list_of_menuitems], [])"
52384,>>> join = lambda it: (y for x in it for y in x)
52385,">>> list(join([[1,2],[3,4,5],[]]))"
52386,"[1, 2, 3, 4, 5]"
52387,[image for menuitem in list_of_menuitems for image in menuitem.image_set.all()]
52388,join
52389,join(menuitem.image_set.all() for menuitem in list_of_menuitems)
52390,for
52391,def list_or_tuple(l):
52392,"    return isinstance(l,(list,tuple))"
52393,## predicate will select the container  to be flattened
52394,## write your own as required
52395,## this one flattens every list/tuple
52396,
52397,
52398,"def flatten(seq,predicate=list_or_tuple):        "
52399,    ## recursive generator 
52400,    for i in seq:
52401,        if predicate(seq):
52402,            for j in flatten(i):
52403,                yield j
52404,        else:
52405,            yield i
52406,def flat_list(list_to_flat):
52407,"    if not isinstance(list_to_flat, list):"
52408,        yield list_to_flat
52409,    else:
52410,        for item in list_to_flat:
52411,            yield from flat_list(item)
52412,list()
52413,yield from
52414,">>> a = [1, [2, 3], [1, [2, 3, [1, [2, 3]]]]]"
52415,>>> print(list(flat_list(a)))
52416,"[1, 2, 3, 1, 2, 3, 1, 2, 3]"
52417,RECURSION ERROR ON :
52418,"A = ['str1', [[[['str2']]]], [['str3'], 'str4'], 'str5']"
52419,"A = [1.0, 2, 'a', [4,], [[6,], [8,]], [[[8,],[9,]], [[12,],[10]]]]"
52420,"or isinstance(list_to_flat, str)"
52421,"A = [1, [[[[2]]]], [[3], 4], 5]"
52422,collectons.Iterable
52423,import collections
52424,
52425,"def flatten(o, flatten_condition=lambda i: isinstance(i,"
52426,"               collections.Iterable) and not isinstance(i, str)):"
52427,    result = []
52428,    for i in o:
52429,        if flatten_condition(i):
52430,"            result.extend(flatten(i, flatten_condition))"
52431,        else:
52432,            result.append(i)
52433,    return result
52434,RecursionError: maximum recursion depth exceeded in comparison
52435,"A = ['image1', [[[['image2']]]], [['image3'], 'image4'], 'image5']"
52436,"A = [1,[2,3],[4,5,[6,[7,8],9]]]"
52437,yield
52438,result
52439,"l=[[1,2,3],[4,5,6], [7], [8,9]]*33"
52440,
52441,"run(""list(flatten(l))"")"
52442,         3732 function calls (3303 primitive calls) in 0.007 seconds
52443,
52444,   Ordered by: standard name
52445,
52446,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52447,        1    0.000    0.000    0.007    0.007 <string>:1(<module>)
52448,      429    0.001    0.000    0.001    0.000 cbook.py:475(iterable)
52449,      429    0.002    0.000    0.003    0.000 cbook.py:484(is_string_like)
52450,      429    0.002    0.000    0.006    0.000 cbook.py:565(is_scalar_or_string)
52451,  727/298    0.001    0.000    0.007    0.000 cbook.py:605(flatten)
52452,      429    0.000    0.000    0.001    0.000 core.py:5641(isMaskedArray)
52453,      858    0.001    0.000    0.001    0.000 {isinstance}
52454,      429    0.000    0.000    0.000    0.000 {iter}
52455,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52456,
52457,
52458,
52459,"l=[[1,2,3],[4,5,6], [7], [8,9]]*66"
52460,
52461,"run(""list(flatten(l))"")"
52462,         7461 function calls (6603 primitive calls) in 0.007 seconds
52463,
52464,   Ordered by: standard name
52465,
52466,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52467,        1    0.000    0.000    0.007    0.007 <string>:1(<module>)
52468,      858    0.001    0.000    0.001    0.000 cbook.py:475(iterable)
52469,      858    0.002    0.000    0.003    0.000 cbook.py:484(is_string_like)
52470,      858    0.002    0.000    0.006    0.000 cbook.py:565(is_scalar_or_string)
52471, 1453/595    0.001    0.000    0.007    0.000 cbook.py:605(flatten)
52472,      858    0.000    0.000    0.001    0.000 core.py:5641(isMaskedArray)
52473,     1716    0.001    0.000    0.001    0.000 {isinstance}
52474,      858    0.000    0.000    0.000    0.000 {iter}
52475,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52476,
52477,
52478,
52479,"l=[[1,2,3],[4,5,6], [7], [8,9]]*99"
52480,
52481,"run(""list(flatten(l))"")"
52482,         11190 function calls (9903 primitive calls) in 0.010 seconds
52483,
52484,   Ordered by: standard name
52485,
52486,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52487,        1    0.000    0.000    0.010    0.010 <string>:1(<module>)
52488,     1287    0.002    0.000    0.002    0.000 cbook.py:475(iterable)
52489,     1287    0.003    0.000    0.004    0.000 cbook.py:484(is_string_like)
52490,     1287    0.002    0.000    0.009    0.000 cbook.py:565(is_scalar_or_string)
52491, 2179/892    0.001    0.000    0.010    0.000 cbook.py:605(flatten)
52492,     1287    0.001    0.000    0.001    0.000 core.py:5641(isMaskedArray)
52493,     2574    0.001    0.000    0.001    0.000 {isinstance}
52494,     1287    0.000    0.000    0.000    0.000 {iter}
52495,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52496,
52497,
52498,
52499,"l=[[1,2,3],[4,5,6], [7], [8,9]]*132"
52500,
52501,"run(""list(flatten(l))"")"
52502,         14919 function calls (13203 primitive calls) in 0.013 seconds
52503,
52504,   Ordered by: standard name
52505,
52506,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52507,        1    0.000    0.000    0.013    0.013 <string>:1(<module>)
52508,     1716    0.002    0.000    0.002    0.000 cbook.py:475(iterable)
52509,     1716    0.004    0.000    0.006    0.000 cbook.py:484(is_string_like)
52510,     1716    0.003    0.000    0.011    0.000 cbook.py:565(is_scalar_or_string)
52511,2905/1189    0.002    0.000    0.013    0.000 cbook.py:605(flatten)
52512,     1716    0.001    0.000    0.001    0.000 core.py:5641(isMaskedArray)
52513,     3432    0.001    0.000    0.001    0.000 {isinstance}
52514,     1716    0.001    0.000    0.001    0.000 {iter}
52515,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler'
52516,"l=[[1,2,3],[4,5,6], [7], [8,9]]*33"
52517,
52518,"run(""flattenlist(l)"")"
52519,         564 function calls (432 primitive calls) in 0.000 seconds
52520,
52521,   Ordered by: standard name
52522,
52523,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52524,    133/1    0.000    0.000    0.000    0.000 <ipython-input-55-39b139bad497>:4(flattenlist)
52525,        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
52526,      429    0.000    0.000    0.000    0.000 {isinstance}
52527,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52528,
52529,
52530,
52531,"l=[[1,2,3],[4,5,6], [7], [8,9]]*66"
52532,
52533,"run(""flattenlist(l)"")"
52534,         1125 function calls (861 primitive calls) in 0.001 seconds
52535,
52536,   Ordered by: standard name
52537,
52538,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52539,    265/1    0.001    0.000    0.001    0.001 <ipython-input-55-39b139bad497>:4(flattenlist)
52540,        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
52541,      858    0.000    0.000    0.000    0.000 {isinstance}
52542,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52543,
52544,
52545,
52546,"l=[[1,2,3],[4,5,6], [7], [8,9]]*99"
52547,
52548,"run(""flattenlist(l)"")"
52549,         1686 function calls (1290 primitive calls) in 0.001 seconds
52550,
52551,   Ordered by: standard name
52552,
52553,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52554,    397/1    0.001    0.000    0.001    0.001 <ipython-input-55-39b139bad497>:4(flattenlist)
52555,        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
52556,     1287    0.000    0.000    0.000    0.000 {isinstance}
52557,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52558,
52559,
52560,
52561,"l=[[1,2,3],[4,5,6], [7], [8,9]]*132"
52562,
52563,"run(""flattenlist(l)"")"
52564,         2247 function calls (1719 primitive calls) in 0.002 seconds
52565,
52566,   Ordered by: standard name
52567,
52568,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52569,    529/1    0.001    0.000    0.002    0.002 <ipython-input-55-39b139bad497>:4(flattenlist)
52570,        1    0.000    0.000    0.002    0.002 <string>:1(<module>)
52571,     1716    0.001    0.000    0.001    0.000 {isinstance}
52572,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52573,
52574,
52575,
52576,"l=[[1,2,3],[4,5,6], [7], [8,9]]*1320"
52577,
52578,"run(""flattenlist(l)"")"
52579,         22443 function calls (17163 primitive calls) in 0.016 seconds
52580,
52581,   Ordered by: standard name
52582,
52583,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52584,   5281/1    0.011    0.000    0.016    0.016 <ipython-input-55-39b139bad497>:4(flattenlist)
52585,        1    0.000    0.000    0.016    0.016 <string>:1(<module>)
52586,    17160    0.005    0.000    0.005    0.000 {isinstance}
52587,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52588,"l=[[1,2,3],[4,5,6], [7], [8,9]]*1320"
52589,
52590,new=[l]*33
52591,
52592,"run(""flattenlist(new)"")"
52593,         740589 function calls (566316 primitive calls) in 0.418 seconds
52594,
52595,   Ordered by: standard name
52596,
52597,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52598, 174274/1    0.281    0.000    0.417    0.417 <ipython-input-55-39b139bad497>:4(flattenlist)
52599,        1    0.001    0.001    0.418    0.418 <string>:1(<module>)
52600,   566313    0.136    0.000    0.136    0.000 {isinstance}
52601,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52602,
52603,
52604,
52605,new=[l]*66
52606,
52607,"run(""flattenlist(new)"")"
52608,         1481175 function calls (1132629 primitive calls) in 0.809 seconds
52609,
52610,   Ordered by: standard name
52611,
52612,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52613, 348547/1    0.542    0.000    0.807    0.807 <ipython-input-55-39b139bad497>:4(flattenlist)
52614,        1    0.002    0.002    0.809    0.809 <string>:1(<module>)
52615,  1132626    0.266    0.000    0.266    0.000 {isinstance}
52616,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52617,
52618,
52619,
52620,new=[l]*99
52621,
52622,"run(""flattenlist(new)"")"
52623,         2221761 function calls (1698942 primitive calls) in 1.211 seconds
52624,
52625,   Ordered by: standard name
52626,
52627,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52628, 522820/1    0.815    0.000    1.208    1.208 <ipython-input-55-39b139bad497>:4(flattenlist)
52629,        1    0.002    0.002    1.211    1.211 <string>:1(<module>)
52630,  1698939    0.393    0.000    0.393    0.000 {isinstance}
52631,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52632,
52633,
52634,
52635,new=[l]*132
52636,
52637,"run(""flattenlist(new)"")"
52638,         2962347 function calls (2265255 primitive calls) in 1.630 seconds
52639,
52640,   Ordered by: standard name
52641,
52642,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52643, 697093/1    1.091    0.000    1.627    1.627 <ipython-input-55-39b139bad497>:4(flattenlist)
52644,        1    0.003    0.003    1.630    1.630 <string>:1(<module>)
52645,  2265252    0.536    0.000    0.536    0.000 {isinstance}
52646,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52647,
52648,
52649,
52650,new=[l]*1320
52651,
52652,"run(""flattenlist(new)"")"
52653,         29623443 function calls (22652523 primitive calls) in 16.103 seconds
52654,
52655,   Ordered by: standard name
52656,
52657,   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
52658,6970921/1   10.842    0.000   16.069   16.069 <ipython-input-55-39b139bad497>:4(flattenlist)
52659,        1    0.034    0.034   16.103   16.103 <string>:1(<module>)
52660, 22652520    5.227    0.000    5.227    0.000 {isinstance}
52661,        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
52662,"typ=(list,tuple)"
52663,
52664,
52665,def flattenlist(d):
52666,    thelist = []
52667,    for x in d:
52668,"        if not isinstance(x,typ):"
52669,            thelist += [x]
52670,        else:
52671,            thelist += flattenlist(x)
52672,    return thelist
52673,flat_list = []
52674,"map(flat_list.extend, list_of_list)"
52675,list_of_list = [range(10)]*1000
52676,"%timeit flat_list=[]; map(flat_list.extend, list_of_list)"
52677,"#10000 loops, best of 3: 119 µs per loop"
52678,%timeit flat_list=list(itertools.chain.from_iterable(list_of_list))
52679,"#1000 loops, best of 3: 210 µs per loop"
52680,%timeit flat_list=[i for sublist in list_of_list for i in sublist]
52681,"#1000 loops, best of 3: 525 µs per loop"
52682,"%timeit flat_list=reduce(list.__add__,list_of_list)"
52683,"#100 loops, best of 3: 18.1 ms per loop"
52684,list_of_list = [range(1000)]*10
52685,"%timeit flat_list=[]; map(flat_list.extend, list_of_list)"
52686,"#10000 loops, best of 3: 60.7 µs per loop"
52687,%timeit flat_list=list(itertools.chain.from_iterable(list_of_list))
52688,"#10000 loops, best of 3: 176 µs per loop"
52689,class SquaredRange(object):
52690,"    def __init__(self, n): "
52691,        self.range = range(n)
52692,    def __iter__(self):
52693,        for i in self.range: 
52694,            yield i**2
52695,
52696,list_of_list = [SquaredRange(5)]*3
52697,flat_list = []
52698,"map(flat_list.extend, list_of_list)"
52699,print flat_list
52700,"#[0, 1, 4, 9, 16, 0, 1, 4, 9, 16, 0, 1, 4, 9, 16]"
52701,def is_iterable(item):
52702,"   return isinstance(item, list) or isinstance(item, tuple)"
52703,
52704,
52705,def flatten(items):
52706,    for i in items:
52707,        if is_iterable(item):
52708,            for m in flatten(i):
52709,                yield m
52710,        else:
52711,            yield i
52712,"print list(flatten2([1.0, 2, 'a', (4,), ((6,), (8,)), (((8,),(9,)), ((12,),(10)))]))"
52713,for m in flatten(i):   [Previous line repeated 996 more times] RecursionError: maximum recursion depth exceeded
52714,"A = [1.0, 2, 'a', (4,), ((6,), (8,)), (((8,),(9,)), ((12,),(10)))]"
52715,"A = ['str1', [[[['str2']]]], [['str3'], 'str4'], 'str5']"
52716,"A = [1, [[[[2]]]], [[3], 4], 5]"
52717,"and not isinstance(i,str )"
52718,hasattr
52719,isinstance
52720,set
52721,from operator import add
52722,"reduce(add, map(lambda x: list(x.image_set.all()), [mi for mi in list_of_menuitems]))"
52723,"a = [[1, 2, 3], [4, 5, 6]"
52724,b = [i[x] for i in a for x in range(len(i))]
52725,print b
52726,"[1, 2, 3, 4, 5, 6]"
52727,re
52728,">>> flattener = re.compile(""\'.*?\'"")"
52729,>>> flattener
52730,<_sre.SRE_Pattern object at 0x10d439ca8>
52731,>>> stred = str(in_list)
52732,>>> outed = flattener.findall(stred)
52733,import numpy as np
52734,"print np.concatenate([[1,2],[3],[5,89],[],[6]])"
52735,"# array([  1.,   2.,   3.,   5.,  89.,   6.])"
52736,"print list(np.concatenate([[1,2],[3],[5,89],[],[6]]))"
52737,"# [  1.,   2.,   3.,   5.,  89.,   6.]"
52738,pip install morph
52739,import morph
52740,
52741,"list = [[1,2],[3],[5,89],[],[6]]"
52742,"flattened_list = morph.flatten(list)  # returns [1, 2, 3, 5, 89, 6]"
52743,[*innerlist for innerlist in outer_list]
52744,SyntaxError: can use starred expression only as assignment target
52745,from pyvirtualdisplay import Display
52746,from selenium import webdriver
52747,
52748,"display = Display(visible=1, size=(1600, 902))"
52749,display.start()
52750,chrome_options = webdriver.ChromeOptions()
52751,chrome_options.add_argument('--disable-extensions')
52752,chrome_options.add_argument('--profile-directory=Default')
52753,"chrome_options.add_argument(""--incognito"")"
52754,"chrome_options.add_argument(""--disable-plugins-discovery"");"
52755,"chrome_options.add_argument(""--start-maximized"")"
52756,driver = webdriver.Chrome(chrome_options=chrome_options)
52757,driver.delete_all_cookies()
52758,"driver.set_window_size(800,800)"
52759,"driver.set_window_position(0,0)"
52760,print 'arguments done'
52761,driver.get('http://stubhub.com')
52762,"{""appName"":""Netscape"",""platform"":""Linuxx86_64"",""cookies"":1,""syslang"":""en-US"",""userlang"":""en-"
52763,"US"",""cpu"":"""",""productSub"":""20030107"",""setTimeout"":1,""setInterval"":1,""plugins"":"
52764,"{""0"":""ChromePDFViewer"",""1"":""ShockwaveFlash"",""2"":""WidevineContentDecryptionMo"
52765,"dule"",""3"":""NativeClient"",""4"":""ChromePDFViewer""},""mimeTypes"":"
52766,"{""0"":""application/pdf"",""1"":""ShockwaveFlashapplication/x-shockwave-"
52767,"flash"",""2"":""FutureSplashPlayerapplication/futuresplash"",""3"":""WidevineContent"
52768,DecryptionModuleapplication/x-ppapi-widevine-
52769,"cdm"",""4"":""NativeClientExecutableapplication/x-"
52770,"nacl"",""5"":""PortableNativeClientExecutableapplication/x-"
52771,"pnacl"",""6"":""PortableDocumentFormatapplication/x-google-chrome-"
52772,"pdf""},""screen"":{""width"":1600,""height"":900,""colorDepth"":24},""fonts"":"
52773,"{""0"":""monospace"",""1"":""DejaVuSerif"",""2"":""Georgia"",""3"":""DejaVuSans"",""4"":""Trebu"
52774,"chetMS"",""5"":""Verdana"",""6"":""AndaleMono"",""7"":""DejaVuSansMono"",""8"":""LiberationM"
52775,"ono"",""9"":""NimbusMonoL"",""10"":""CourierNew"",""11"":""Courier""}}"
52776,distill
52777,akamaitechnologies.com
52778,95.100.59.245
52779,104.70.243.66
52780,23.202.161.241
52781,$cdc_
52782,$wdc_
52783,$cdc_
52784,$cdc_
52785,function getPageCache(opt_doc) {
52786,  var doc = opt_doc || document;
52787,  //var key = '$cdc_asdjflasutopfhvcZLmcfl_';
52788,  var key = 'randomblabla_';
52789,  if (!(key in doc))
52790,    doc[key] = new Cache();
52791,  return doc[key];
52792,}
52793,$cdc_
52794,randomblabla_
52795,runBotDetection = function () {
52796,    var documentDetectionKeys = [
52797,"        ""__webdriver_evaluate"","
52798,"        ""__selenium_evaluate"","
52799,"        ""__webdriver_script_function"","
52800,"        ""__webdriver_script_func"","
52801,"        ""__webdriver_script_fn"","
52802,"        ""__fxdriver_evaluate"","
52803,"        ""__driver_unwrapped"","
52804,"        ""__webdriver_unwrapped"","
52805,"        ""__driver_evaluate"","
52806,"        ""__selenium_unwrapped"","
52807,"        ""__fxdriver_unwrapped"","
52808,    ];
52809,
52810,    var windowDetectionKeys = [
52811,"        ""_phantom"","
52812,"        ""__nightmare"","
52813,"        ""_selenium"","
52814,"        ""callPhantom"","
52815,"        ""callSelenium"","
52816,"        ""_Selenium_IDE_Recorder"","
52817,    ];
52818,
52819,    for (const windowDetectionKey in windowDetectionKeys) {
52820,        const windowDetectionKeyValue = windowDetectionKeys[windowDetectionKey];
52821,        if (window[windowDetectionKeyValue]) {
52822,            return true;
52823,        }
52824,    };
52825,    for (const documentDetectionKey in documentDetectionKeys) {
52826,        const documentDetectionKeyValue = documentDetectionKeys[documentDetectionKey];
52827,        if (window['document'][documentDetectionKeyValue]) {
52828,            return true;
52829,        }
52830,    };
52831,
52832,    for (const documentKey in window['document']) {
52833,        if (documentKey.match(/\$[a-z]dc_/) && window['document'][documentKey]['cache_']) {
52834,            return true;
52835,        }
52836,    }
52837,
52838,    if (window['external'] && window['external'].toString() && (window['external'].toString()['indexOf']('Sequentum') != -1)) return true;
52839,
52840,    if (window['document']['documentElement']['getAttribute']('selenium')) return true;
52841,    if (window['document']['documentElement']['getAttribute']('webdriver')) return true;
52842,    if (window['document']['documentElement']['getAttribute']('driver')) return true;
52843,
52844,    return false;
52845,};
52846,$cdc
52847,xxxx
52848,chromedriver.exe
52849,cdc_
52850,vim
52851,perl
52852,cdc_
52853,chromedriver
52854,vim
52855,perl
52856,chromedriver
52857,cdc_
52858,$cdc_lasutopfhvcZLmcfl
52859,chromedriver version 2.41.578706
52860,vim /path/to/chromedriver
52861,cdc_
52862,dog_
52863,:%s/cdc_/dog_/g
52864,dog_
52865,cdc_
52866,chromedriver
52867,:wq!
52868,return
52869,:q!
52870,return
52871,cdc_
52872,dog_
52873,perl -pi -e 's/cdc_/dog_/g' /path/to/chromedriver
52874,dog_
52875,cdc_
52876,chromedriver
52877,cdc_
52878,"grep ""cdc_"" /path/to/chromedriver"
52879,chromedriver
52880,killed
52881,chromedriver
52882,chromedriver
52883,cdc_
52884,$cdc
52885,fake_useragent
52886,from selenium import webdriver
52887,from selenium.webdriver.chrome.options import Options
52888,from fake_useragent import UserAgent
52889,
52890,options = Options()
52891,ua = UserAgent()
52892,userAgent = ua.random
52893,print(userAgent)
52894,options.add_argument(f'user-agent={userAgent}')
52895,"driver = webdriver.Chrome(chrome_options=options, executable_path=r'C:\WebDrivers\ChromeDriver\chromedriver_win32\chromedriver.exe')"
52896,"driver.get(""https://www.google.co.in"")"
52897,driver.quit()
52898,Network.setUserAgentOverride
52899,execute_cdp_cmd()
52900,from selenium import webdriver
52901,
52902,driver = webdriver.Chrome(executable_path=r'C:\WebDrivers\chromedriver.exe')
52903,"print(driver.execute_script(""return navigator.userAgent;""))"
52904,# Setting user agent as Chrome/83.0.4103.97
52905,"driver.execute_cdp_cmd('Network.setUserAgentOverride', {""userAgent"": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36'})"
52906,"print(driver.execute_script(""return navigator.userAgent;""))"
52907,navigator
52908,undefined
52909,"driver.execute_cdp_cmd(""Page.addScriptToEvaluateOnNewDocument"", {"
52910,"  ""source"": """""""
52911,"    Object.defineProperty(navigator, 'webdriver', {"
52912,      get: () => undefined
52913,    })
52914,"  """""""
52915,})
52916,navigator.plugins
52917,navigator.languages
52918,data-sitekey
52919,try {
52920," if (window.document.documentElement.getAttribute(""webdriver"")) return !+[]"
52921,} catch (IDLMrxxel) {}
52922,try {
52923," if (""_Selenium_IDE_Recorder"" in window) return !+"""""
52924,} catch (KknKsUayS) {}
52925,try {
52926," if (""__webdriver_script_fn"" in document) return !+"""""
52927,"username = os.getenv(""USERNAME"")"
52928,"userProfile = ""C:\\Users\\"" + username "
52929,"    + ""\\AppData\\Local\\Google\\Chrome\\User Data\\Default"""
52930,
52931,options = webdriver.ChromeOptions()
52932,"options.add_argument(""user-data-dir={}"".format(userProfile))"
52933,# add here any tag you want.
52934,options.add_experimental_option(
52935,"    ""excludeSwitches"","
52936,"    """""""
52937,        ignore-certificate-errors
52938,        safebrowsing-disable-download-protection
52939,        safebrowsing-disable-auto-update
52940,        disable-client-side-phishing-detection
52941,"    """""".split()"
52942,)
52943,"chromedriver = ""C:\Python27\chromedriver\chromedriver.exe"""
52944,"os.environ[""webdriver.chrome.driver""] = chromedriver"
52945,"browser = webdriver.Chrome(executable_path=chromedriver, chrome_options=options)"
52946,$ pip install selenium-stealth
52947,from selenium import webdriver
52948,from selenium.webdriver.chrome.options import Options
52949,from selenium.webdriver.chrome.service import Service
52950,from selenium_stealth import stealth
52951,
52952,
52953,options = Options()
52954,"options.add_argument(""start-maximized"")"
52955,
52956,# Chrome is controlled by automated test software
52957,"options.add_experimental_option(""excludeSwitches"", [""enable-automation""])"
52958,"options.add_experimental_option('useAutomationExtension', False)"
52959,s = Service('C:\\BrowserDrivers\\chromedriver.exe')
52960,"driver = webdriver.Chrome(service=s, options=options)"
52961,
52962,# Selenium Stealth settings
52963,"stealth(driver,"
52964,"      languages=[""en-US"", ""en""],"
52965,"      vendor=""Google Inc."","
52966,"      platform=""Win32"","
52967,"      webgl_vendor=""Intel Inc."","
52968,"      renderer=""Intel Iris OpenGL Engine"","
52969,"      fix_hairline=True,"
52970,  )
52971,
52972,"driver.get(""https://bot.sannysoft.com/"")"
52973,partial interface Navigator {
52974,      readonly attribute boolean webdriver;
52975,  };
52976,from selenium import webdriver
52977,driver = webdriver.Chrome()
52978,"driver.execute_cdp_cmd(""Page.addScriptToEvaluateOnNewDocument"", {"
52979,"    ""source"":"
52980,"        ""const newProto = navigator.__proto__;"""
52981,"        ""delete newProto.webdriver;"""
52982,"        ""navigator.__proto__ = newProto;"""
52983,    })
52984,my_options = webdriver.ChromeOptions()
52985,my_options.add_argument( '--disable-blink-features=AutomationControlled' )
52986,window.navigator.webdriver === true
52987,grep
52988,javascript/firefox-driver/extension/content/server.js
52989,window.navigator.webdriver
52990,window.navigator.webdriver == true
52991,window.navigator.webdriver
52992,false
52993,true
52994,--enable-automation
52995,window.navigator.webdriver
52996,true
52997,package main
52998,
52999,import (
53000,"    ""github.com/tebeka/selenium"""
53001,"    ""github.com/tebeka/selenium/chrome"""
53002,)
53003,
53004,func main() {
53005,
53006,caps := selenium.Capabilities{
53007,"    ""browserName"": ""chrome"","
53008,}
53009,
53010,chromeCaps := chrome.Capabilities{
53011,"    Path:            ""/path/to/chrome-binary"","
53012,"    ExcludeSwitches: []string{""enable-automation""},"
53013,}
53014,caps.AddChrome(chromeCaps)
53015,
53016,"wd, err := selenium.NewRemote(caps, fmt.Sprintf(""http://localhost:%d/wd/hub"", 4444))"
53017,}
53018,"chromeOptions.addArguments(""--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36"");"
53019,function d() {
53020,try {
53021,    if (window.document.$cdc_asdjflasutopfhvcZLmcfl_.cache_)
53022,        return !0
53023,} catch (e) {}
53024,
53025,try {
53026,"    //if (window.document.documentElement.getAttribute(decodeURIComponent(""%77%65%62%64%72%69%76%65%72"")))"
53027,"    if (window.document.documentElement.getAttribute(""webdriver""))"
53028,        return !0
53029,} catch (e) {}
53030,
53031,try {
53032,"    //if (decodeURIComponent(""%5F%53%65%6C%65%6E%69%75%6D%5F%49%44%45%5F%52%65%63%6F%72%64%65%72"") in window)"
53033,"    if (""_Selenium_IDE_Recorder"" in window)"
53034,        return !0
53035,} catch (e) {}
53036,
53037,try {
53038,"    //if (decodeURIComponent(""%5F%5F%77%65%62%64%72%69%76%65%72%5F%73%63%72%69%70%74%5F%66%6E"") in document)"
53039,"    if (""__webdriver_script_fn"" in document)"
53040,        return !0
53041,} catch (e) {}
53042,<html>
53043,<head>
53044,"  <script type=""text/javascript"">"
53045,  <!--
53046,    function showWindow(){
53047,      javascript:(alert(document.documentElement.outerHTML));
53048,    }
53049,  //-->
53050,  </script>
53051,</head>
53052,<body>
53053,  <form>
53054,"    <input type=""button"" value=""Show outerHTML"" onclick=""showWindow()"">"
53055,  </form>
53056,</body>
53057,</html>
53058,var options = new ChromeOptions();
53059,
53060,// hide selenium
53061,"options.AddExcludedArguments(new List<string>() { ""enable-automation"" });"
53062,
53063,"var driver = new ChromeDriver(ChromeDriverService.CreateDefaultService(), options);"
53064,https://bot.sannysoft.com
53065,https://fingerprintjs.github.io/fingerprintjs/
53066,https://antoinevastel.com/bots/
53067,import undetected_chromedriver.v2 as uc
53068,https://stackoverflow.com/questions/15058462/how-to-save-and-load-cookies-using-python-selenium-webdriver
53069,//Fools the website into believing a human is navigating it
53070,"((JavascriptExecutor)driver).executeScript(""window.key = \""blahblah\"";"");"
53071,"options.AddArguments(""start-maximized"");"
53072,"                options.AddArguments(""--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36"");"
53073,
53074,"                options.AddExcludedArgument(""enable-automation"");//for hiding chrome being controlled by automation.."
53075,"                options.AddAdditionalCapability(""useAutomationExtension"", false);"
53076,
53077,//import cookies
53078,"options.AddArguments(""user-data-dir="" + userDataDir);"
53079,
53080,"                options.AddArguments(""profile-directory="" + profileDir);"
53081,"['this', 'is', 'a', 'sentence']"
53082,'this-is-a-sentence'
53083,str.join
53084,">>> words = ['this', 'is', 'a', 'sentence']"
53085,>>> '-'.join(words)
53086,'this-is-a-sentence'
53087,>>> ' '.join(words)
53088,'this is a sentence'
53089,"sentence.join("" "")"
53090,"list.split("" "")"
53091,list.join
53092,str.join
53093,"join(list, sep)"
53094,string
53095,">>> xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
53096,">>> ''.join(map(str, xs))"
53097,'12345678910'
53098,"map(str, my_lst)"
53099,int
53100,"' '.join(map(lambda x: ' $'+ str(x), my_lst))"
53101,'$1 $2 $3 $4 $5 $6 $7 $8 $9 $10'
53102,.join
53103,">>> "","".join(""12345"").join((""("","")""))"
53104,Out:
53105,"'(1,2,3,4,5)'"
53106,
53107,">>> list = [""("","")""]"
53108,">>> "","".join(""12345"").join(list)"
53109,Out:
53110,"'(1,2,3,4,5)'"
53111,join()
53112,"join((""("","")""))"
53113,"(""("","")"")"
53114,"""("""
53115,""")"""
53116,join()
53117,join()
53118,"'1,2,3,4,5'"
53119,.join
53120,from str import join
53121,
53122,"sentence = ['this','is','a','sentence']"
53123,
53124,"join(sentence, ""-"") "
53125,"list_abc = ['aaa', 'bbb', 'ccc']"
53126,
53127,string = ''.join(list_abc)
53128,print(string)
53129,>>> aaabbbccc
53130,
53131,"string = ','.join(list_abc)"
53132,print(string)
53133,">>> aaa,bbb,ccc"
53134,
53135,string = '-'.join(list_abc)
53136,print(string)
53137,>>> aaa-bbb-ccc
53138,
53139,string = '\n'.join(list_abc)
53140,print(string)
53141,>>> aaa
53142,>>> bbb
53143,>>> ccc
53144,from functools import reduce
53145,
53146,"sentence = ['this','is','a','sentence']"
53147,"out_str = str(reduce(lambda x,y: x+""-""+y, sentence))"
53148,print(out_str)
53149,join
53150,"sentence = ['this','is','a','sentence']"
53151,"s=("" "".join(sentence))"
53152,print(s)
53153,>>> aa
53154,"[None, 10, 'hello']"
53155,">>> st = ', '.join(map(str, map(lambda x: f'""{x}""' if isinstance(x, str) else x, aa)))"
53156,>>> st = '[' + st + ']'
53157,>>> st
53158,"'[None, 10, ""hello""]'"
53159,>>> ast.literal_eval(st)
53160,"[None, 10, 'hello']"
53161,str(aa)
53162,"""[None, 10, 'hello']"""
53163,"sentence = ['this','is','a','sentence']"
53164,"sentences_strings = ""'"" + ""','"".join(sentence) + ""'"""
53165,"print (sentences_strings) # you will get ""'this','is','a','sentence'"""
53166,def eggs(someParameter):
53167,    del spam[3]
53168,"    someParameter.insert(3, ' and cats.')"
53169,
53170,
53171,"spam = ['apples', 'bananas', 'tofu', 'cats']"
53172,eggs(spam)
53173,"spam =(','.join(spam))"
53174,print(spam)
53175,"my_list=[""this"",""is"",""a"",""sentence""]"
53176,
53177,"concenated_string="""""
53178,for string in range(len(my_list)):
53179,    if string == len(my_list)-1:
53180,        concenated_string+=my_list[string]
53181,    else:
53182,        concenated_string+=f'{my_list[string]}-'
53183,print([concenated_string])
53184,    >>> ['this-is-a-sentence']
53185,"fig, axes = plt.subplots(nrows=2, ncols=2)"
53186,plt.show()
53187,fig = plt.figure()
53188,"axes = fig.subplots(nrows=2, ncols=2)"
53189,subplots
53190,ax
53191,import matplotlib.pyplot as plt
53192,
53193,x = range(10)
53194,y = range(10)
53195,
53196,"fig, ax = plt.subplots(nrows=2, ncols=2)"
53197,
53198,for row in ax:
53199,    for col in row:
53200,"        col.plot(x, y)"
53201,
53202,plt.show()
53203,fig = plt.figure()
53204,
53205,"plt.subplot(2, 2, 1)"
53206,"plt.plot(x, y)"
53207,
53208,"plt.subplot(2, 2, 2)"
53209,"plt.plot(x, y)"
53210,
53211,"plt.subplot(2, 2, 3)"
53212,"plt.plot(x, y)"
53213,
53214,"plt.subplot(2, 2, 4)"
53215,"plt.plot(x, y)"
53216,
53217,plt.show()
53218,import matplotlib.pyplot as plt
53219,
53220,"fig, ax = plt.subplots(2, 2)"
53221,
53222,"ax[0, 0].plot(range(10), 'r') #row=0, col=0"
53223,"ax[1, 0].plot(range(10), 'b') #row=1, col=0"
53224,"ax[0, 1].plot(range(10), 'g') #row=0, col=1"
53225,"ax[1, 1].plot(range(10), 'k') #row=1, col=1"
53226,plt.show()
53227,ax
53228,fig
53229,matplotlib.figure.Figure
53230,fig.suptitle(title)
53231,fig.savefig
53232,import matplotlib.pyplot as plt
53233,"# fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, sharex=True, sharey=True)"
53234,"fig, axes = plt.subplots(nrows=2, ncols=2, sharex=True, sharey=True)"
53235,"ax1, ax2, ax3, ax4 = axes.flatten()"
53236,
53237,"ax1.plot(range(10), 'r')"
53238,"ax2.plot(range(10), 'b')"
53239,"ax3.plot(range(10), 'g')"
53240,"ax4.plot(range(10), 'k')"
53241,plt.show()
53242,import matplotlib.pyplot as plt
53243,
53244,fig = plt.figure()
53245,"axes = fig.subplots(nrows=2, ncols=2)"
53246,
53247,plt.show()
53248,pyplot.subplots()
53249,"fig, ax"
53250,"fig, axes = plt.subplots(nrows=2, ncols=2)"
53251,fig = plt.figure()
53252,"axes = fig.subplots(nrows=2, ncols=2)"
53253,subplots()
53254,pyplot
53255,Figure
53256,"fig, axes = plt.subplots(nrows, ncols)"
53257,
53258,for ax in axes.flatten():
53259,"    ax.plot(x,y)"
53260,for row in range(nrows):
53261,    for col in range(ncols):
53262,"        axes[row,col].plot(x[row], y[col])"
53263,pandas
53264,pandas
53265,matplotlib
53266,pandas.DataFrame
53267,python 3.8.11
53268,pandas 1.3.2
53269,matplotlib 3.4.3
53270,seaborn 0.11.2
53271,import seaborn as sns  # data only
53272,import pandas as pd
53273,import matplotlib.pyplot as plt
53274,import seaborn as sns
53275,
53276,# wide dataframe
53277,"df = sns.load_dataset('planets').iloc[:, 2:5]"
53278,
53279,   orbital_period   mass  distance
53280,0         269.300   7.10     77.40
53281,1         874.774   2.21     56.95
53282,2         763.000   2.60     19.84
53283,3         326.030  19.40    110.62
53284,4         516.220  10.50    119.47
53285,
53286,# long dataframe
53287,"dfm = sns.load_dataset('planets').iloc[:, 2:5].melt()"
53288,
53289,         variable    value
53290,0  orbital_period  269.300
53291,1  orbital_period  874.774
53292,2  orbital_period  763.000
53293,3  orbital_period  326.030
53294,4  orbital_period  516.220
53295,subplots=True
53296,layout
53297,subplots=True
53298,"layout=(rows, cols)"
53299,pandas.DataFrame.plot
53300,kind='density'
53301,kind
53302,kind
53303,ax
53304,AxesSubplot
53305,pandas.DataFrame.plot
53306,Figure
53307,"axes = df.plot(kind='density', subplots=True, layout=(2, 2), sharex=False, figsize=(10, 6))"
53308,
53309,# extract the figure object; only used for tight_layout in this example
53310,fig = axes[0][0].get_figure() 
53311,
53312,# set the individual titles
53313,"for ax, title in zip(axes.ravel(), df.columns):"
53314,    ax.set_title(title)
53315,fig.tight_layout()
53316,plt.show()
53317,plt.subplots
53318,Axes
53319,matplotlib.pyplot.subplots
53320,"axes[i, j]"
53321,axes[n]
53322,ax
53323,pandas.DataFrame.plot
53324,axes
53325,sns.kdeplot
53326,plt.plot
53327,Axes
53328,.ravel
53329,.flatten
53330,.ravel
53331,.flatten
53332,axes
53333,.zip
53334,cols
53335,axes
53336,colors
53337,palette
53338,"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 6))  # define the figure and subplots"
53339,axes = axes.ravel()  # array to 1D
53340,cols = df.columns  # create a list of dataframe columns to use
53341,"colors = ['tab:blue', 'tab:orange', 'tab:green']  # list of colors for each subplot, otherwise all subplots will be one color"
53342,
53343,"for col, color, ax in zip(cols, colors, axes):"
53344,"    df[col].plot(kind='density', ax=ax, color=color, label=col, title=col)"
53345,    ax.legend()
53346,    
53347,fig.delaxes(axes[3])  # delete the empty subplot
53348,fig.tight_layout()
53349,plt.show()
53350,plt.subplots
53351,.groupby
53352,color
53353,axes
53354,.groupby
53355,"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 6))  # define the figure and subplots"
53356,axes = axes.ravel()  # array to 1D
53357,dfg = dfm.groupby('variable')  # get data for each unique value in the first column
53358,"colors = ['tab:blue', 'tab:orange', 'tab:green']  # list of colors for each subplot, otherwise all subplots will be one color"
53359,
53360,"for (group, data), color, ax in zip(dfg, colors, axes):"
53361,"    data.plot(kind='density', ax=ax, color=color, title=group, legend=False)"
53362,
53363,fig.delaxes(axes[3])  # delete the empty subplot
53364,fig.tight_layout()
53365,plt.show()
53366,seaborn
53367,seaborn
53368,col
53369,row
53370,seaborn
53371,matplotlib
53372,"p = sns.displot(data=dfm, kind='kde', col='variable', col_wrap=2, x='value', hue='variable',"
53373,"                facet_kws={'sharey': False, 'sharex': False}, height=3.5, aspect=1.75)"
53374,"sns.move_legend(p, ""upper left"", bbox_to_anchor=(.55, .45))"
53375,axes
53376,"plt.subplots(nrows, ncols)"
53377,<AxesSubplot:>
53378,axes
53379,nrows=1
53380,ncols=1
53381,axes
53382,squeeze=True
53383,.ravel()
53384,.flatten()
53385,.flat
53386,.ravel
53387,.flatten
53388,flatten
53389,ravel
53390,axes
53391,ax=
53392,"sns.barplot(..., ax=ax[0])"
53393,seaborn
53394,matplotlib
53395,import matplotlib.pyplot as plt
53396,import numpy as np  # sample data only
53397,
53398,# example of data
53399,"rads = np.arange(0, 2*np.pi, 0.01)"
53400,"y_data = np.array([np.sin(t*rads) for t in range(1, 5)])"
53401,"x_data = [rads, rads, rads, rads]"
53402,
53403,# Generate figure and its subplots
53404,"fig, axes = plt.subplots(nrows=2, ncols=2)"
53405,
53406,# axes before
53407,"array([[<AxesSubplot:>, <AxesSubplot:>],"
53408,"       [<AxesSubplot:>, <AxesSubplot:>]], dtype=object)"
53409,
53410,# convert the array to 1 dimension
53411,axes = axes.ravel()
53412,
53413,# axes after
53414,"array([<AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>, <AxesSubplot:>],"
53415,      dtype=object)
53416,IndexError: list index out of range
53417,axes[:-2]
53418,"for i, ax in enumerate(axes):"
53419,"    ax.plot(x_data[i], y_data[i])"
53420,"axes[0].plot(x_data[0], y_data[0])"
53421,"axes[1].plot(x_data[1], y_data[1])"
53422,"axes[2].plot(x_data[2], y_data[2])"
53423,"axes[3].plot(x_data[3], y_data[3])"
53424,for i in range(len(x_data)):
53425,"    axes[i].plot(x_data[i], y_data[i])"
53426,zip
53427,"for ax, x, y in zip(axes, x_data, y_data):"
53428,"    ax.plot(x, y)"
53429,"fig, (ax1, ax2, ax3) = plt.subplots(1, 3)"
53430,nrows=1
53431,ncols=1
53432,plt.subplots
53433,"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)"
53434,"fig, (ax1, ax2) = plt.subplots(1, 2)"
53435,"fig, (ax1, ax2) = plt.subplots(2, 1)"
53436,"fig, ax = plt.subplots(nrows=2, ncols=3, sharex=True, sharey=False)"
53437,for sp in fig.axes:
53438,    sp.plot(range(10))
53439,import numpy as np
53440,import matplotlib.pyplot as plt
53441,
53442,"fig, _ = plt.subplots(nrows=2, ncols=2)"
53443,
53444,"for i, ax in enumerate(fig.axes):"
53445,"  ax.plot(np.sin(np.linspace(0,2*np.pi,100) + np.pi/2*i))"
53446,  #ax.set_title(f'plot {i}')
53447,
53448,# Optional: main title
53449,plt.suptitle('Plots')
53450,plt.subplot
53451,"fig, ax_mat = plt.subplots(nrows=2, ncols=2)"
53452,"for i, ax in enumerate(ax_mat.flatten()):"
53453,    ...
53454,ax_mat
53455,def plot(data):
53456,"    fig = plt.figure(figsize=(100, 100))"
53457,"    for idx, k in enumerate(data.keys(), 1):"
53458,"        x, y = data[k].keys(), data[k].values"
53459,"        plt.subplot(63, 10, idx)"
53460,"        plt.bar(x, y)  "
53461,    plt.show()
53462,// set up structure of plots
53463,"f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20,10))"
53464,
53465,// for plot 1
53466,ax1.set_title('Title A')
53467,"ax1.plot(x, y)"
53468,
53469,// for plot 2
53470,ax2.set_title('Title B')
53471,"ax2.plot(x, y)"
53472,
53473,// for plot 3
53474,ax3.set_title('Title C')
53475,"ax3.plot(x,y)"
53476,nrows=1
53477,ncols=1
53478,"fig, (ax1, ax2) = plt.subplots(2, 1)"
53479,"fig, (ax1, ax2) = plt.subplots(1, 2)"
53480,apply
53481,apply
53482,apply
53483,apply
53484,apply
53485,apply
53486,apply
53487,apply
53488,returns.add(1).apply(np.log)
53489,np.log(returns.add(1)
53490,apply
53491,apply
53492,apply
53493,apply
53494,DataFrame.apply
53495,Series.apply
53496,apply
53497,apply
53498,apply
53499,axis=1
53500,axis=0
53501,agg
53502,transform
53503,result_type
53504,apply
53505,apply
53506,apply
53507,apply
53508,apply
53509,apply
53510,apply
53511,apply
53512,apply
53513,"df = pd.DataFrame({""A"": [9, 4, 2, 1], ""B"": [12, 7, 5, 4]})"
53514,df
53515,
53516,   A   B
53517,0  9  12
53518,1  4   7
53519,2  2   5
53520,3  1   4
53521,df.apply(np.sum)
53522,
53523,A    16
53524,B    28
53525,dtype: int64
53526,
53527,df.sum()
53528,
53529,A    16
53530,B    28
53531,dtype: int64
53532,%timeit df.apply(np.sum)
53533,%timeit df.sum()
53534,"2.22 ms ± 41.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53535,"471 µs ± 8.16 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
53536,raw
53537,"%timeit df.apply(np.sum, raw=True)"
53538,"840 µs ± 691 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53539,df.apply(lambda x: x.max() - x.min())
53540,
53541,A    8
53542,B    8
53543,dtype: int64
53544,
53545,df.max() - df.min()
53546,
53547,A    8
53548,B    8
53549,dtype: int64
53550,
53551,%timeit df.apply(lambda x: x.max() - x.min())
53552,%timeit df.max() - df.min()
53553,
53554,"2.43 ms ± 450 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53555,"1.23 ms ± 14.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
53556,df = pd.DataFrame({
53557,"    'Name': ['mickey', 'donald', 'minnie'],"
53558,"    'Title': ['wonderland', ""welcome to donald's castle"", 'Minnie mouse clubhouse'],"
53559,"    'Value': [20, 10, 86]})"
53560,df
53561,
53562,     Name  Value                       Title
53563,0  mickey     20                  wonderland
53564,1  donald     10  welcome to donald's castle
53565,2  minnie     86      Minnie mouse clubhouse
53566,"df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)"
53567,
53568,0    False
53569,1     True
53570,2     True
53571,dtype: bool
53572, 
53573,"df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]"
53574,
53575,     Name                       Title  Value
53576,1  donald  welcome to donald's castle     10
53577,2  minnie      Minnie mouse clubhouse     86
53578,"df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]"
53579,
53580,     Name                       Title  Value
53581,1  donald  welcome to donald's castle     10
53582,2  minnie      Minnie mouse clubhouse     86
53583,"%timeit df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]"
53584,"%timeit df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]"
53585,
53586,"2.85 ms ± 38.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53587,"788 µs ± 16.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
53588,apply
53589,pd.to_datetime(df['date'])
53590,df['date'].apply(pd.to_datetime)
53591,"s = pd.Series([[1, 2]] * 3)"
53592,s
53593,
53594,"0    [1, 2]"
53595,"1    [1, 2]"
53596,"2    [1, 2]"
53597,dtype: object
53598,apply(pd.Series)
53599,s.apply(pd.Series)
53600,
53601,   0  1
53602,0  1  2
53603,1  1  2
53604,2  1  2
53605,pd.DataFrame(s.tolist())
53606,
53607,   0  1
53608,0  1  2
53609,1  1  2
53610,2  1  2
53611,%timeit s.apply(pd.Series)
53612,%timeit pd.DataFrame(s.tolist())
53613,
53614,"2.65 ms ± 294 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53615,"816 µs ± 40.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
53616,apply
53617,df = pd.DataFrame(
53618,"         pd.date_range('2018-12-31','2019-01-31', freq='2D').date.astype(str).reshape(-1, 2), "
53619,"         columns=['date1', 'date2'])"
53620,df
53621,
53622,       date1      date2
53623,0 2018-12-31 2019-01-02
53624,1 2019-01-04 2019-01-06
53625,2 2019-01-08 2019-01-10
53626,3 2019-01-12 2019-01-14
53627,4 2019-01-16 2019-01-18
53628,5 2019-01-20 2019-01-22
53629,6 2019-01-24 2019-01-26
53630,7 2019-01-28 2019-01-30
53631,
53632,df.dtypes
53633,
53634,date1    object
53635,date2    object
53636,dtype: object
53637,    
53638,apply
53639,"df.apply(pd.to_datetime, errors='coerce').dtypes"
53640,
53641,date1    datetime64[ns]
53642,date2    datetime64[ns]
53643,dtype: object
53644,stack
53645,apply
53646,"%timeit df.apply(pd.to_datetime, errors='coerce')"
53647,"%timeit pd.to_datetime(df.stack(), errors='coerce').unstack()"
53648,"%timeit pd.concat([pd.to_datetime(df[c], errors='coerce') for c in df], axis=1)"
53649,"%timeit for c in df.columns: df[c] = pd.to_datetime(df[c], errors='coerce')"
53650,
53651,"5.49 ms ± 247 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53652,"3.94 ms ± 48.1 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53653,"3.16 ms ± 216 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
53654,"2.41 ms ± 1.71 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
53655,u = df.apply(lambda x: x.str.contains(...))
53656,v = df.apply(lambda x: x.astype(category))
53657,"u = pd.concat([df[c].str.contains(...) for c in df], axis=1)"
53658,v = df.copy()
53659,for c in df:
53660,    v[c] = df[c].astype(category)
53661,str
53662,astype
53663,apply
53664,apply
53665,astype
53666,perfplot
53667,import perfplot
53668,
53669,perfplot.show(
53670,"    setup=lambda n: pd.Series(np.random.randint(0, n, n)),"
53671,    kernels=[
53672,"        lambda s: s.astype(str),"
53673,        lambda s: s.apply(str)
53674,"    ],"
53675,"    labels=['astype', 'apply'],"
53676,"    n_range=[2**k for k in range(1, 20)],"
53677,"    xlabel='N',"
53678,"    logx=True,"
53679,"    logy=True,"
53680,"    equality_check=lambda x, y: (x == y).all())"
53681,astype
53682,apply
53683,GroupBy
53684,GroupBy.apply
53685,GroupBy.apply
53686,GroupBy
53687,"df = pd.DataFrame({""A"": list('aabcccddee'), ""B"": [12, 7, 5, 4, 5, 4, 3, 2, 1, 10]})"
53688,df
53689,
53690,   A   B
53691,0  a  12
53692,1  a   7
53693,2  b   5
53694,3  c   4
53695,4  c   5
53696,5  c   4
53697,6  d   3
53698,7  d   2
53699,8  e   1
53700,9  e  10
53701,df.groupby('A').B.cumsum().groupby(df.A).shift()
53702, 
53703,0     NaN
53704,1    12.0
53705,2     NaN
53706,3     NaN
53707,4     4.0
53708,5     9.0
53709,6     NaN
53710,7     3.0
53711,8     NaN
53712,9     1.0
53713,"Name: B, dtype: float64"
53714,apply
53715,df.groupby('A').B.apply(lambda x: x.cumsum().shift())
53716,
53717,0     NaN
53718,1    12.0
53719,2     NaN
53720,3     NaN
53721,4     4.0
53722,5     9.0
53723,6     NaN
53724,7     3.0
53725,8     NaN
53726,9     1.0
53727,"Name: B, dtype: float64"
53728,apply
53729,groupby
53730,groupby
53731,apply
53732,apply
53733,df = pd.DataFrame({
53734,"    'A': [1, 2],"
53735,"    'B': ['x', 'y']"
53736,})
53737,
53738,def func(x):
53739,    print(x['A'])
53740,    return x
53741,
53742,"df.apply(func, axis=1)"
53743,
53744,# 1
53745,# 1
53746,# 2
53747,   A  B
53748,0  1  x
53749,1  2  y
53750,GroupBy.apply
53751,"%timeit for c in df.columns: df[c] = pd.to_datetime(df[c], errors='coerce')"
53752,datetime
53753,datetime
53754,to_datetime
53755,datetime
53756,apply
53757,for
53758,apply
53759,apply
53760,apply
53761,apply
53762,apply
53763,pd.Series.apply
53764,pd.DataFrame.apply
53765,axis=1
53766,pd.DataFrame
53767,apply(pd.Series)
53768,pd.DataFrame.apply
53769,raw=True
53770,numba
53771,GroupBy.apply
53772,groupby
53773,apply
53774,GroupBy.apply
53775,apply
53776,pd.DataFrame.apply
53777,pd.DataFrame.apply
53778,axis=0
53779,apply
53780,"# Python 3.7, Pandas 0.23.4"
53781,np.random.seed(0)
53782,"df = pd.DataFrame(np.random.random((10**7, 3)))     # Scenario_1, many rows"
53783,"df = pd.DataFrame(np.random.random((10**4, 10**3))) # Scenario_2, many columns"
53784,
53785,                                               # Scenario_1  | Scenario_2
53786,%timeit df.sum()                               # 800 ms      | 109 ms
53787,%timeit df.apply(pd.Series.sum)                # 568 ms      | 325 ms
53788,
53789,%timeit df.max() - df.min()                    # 1.63 s      | 314 ms
53790,%timeit df.apply(lambda x: x.max() - x.min())  # 838 ms      | 473 ms
53791,
53792,%timeit df.mean()                              # 108 ms      | 94.4 ms
53793,%timeit df.apply(pd.Series.mean)               # 276 ms      | 233 ms
53794,df['col'].apply(str)
53795,df['col'].astype(str)
53796,df.apply(pd.to_datetime)
53797,for
53798,apply
53799,any
53800,apply
53801,mask
53802,np.where
53803,any
53804,apply
53805,apply
53806,any
53807,axis=1
53808,apply
53809,pandas
53810,apply
53811,"def faster_df_apply(df, func):"
53812,    cols = list(df.columns)
53813,"    data, index = [], []"
53814,    for row in df.itertuples(index=True):
53815,"        row_dict = {f:v for f,v in zip(cols, row[1:])}"
53816,        data.append(func(row_dict))
53817,        index.append(row[0])
53818,"    return pd.Series(data, index=index)"
53819,"zip(df, row[1:])"
53820,numba
53821,numba
53822,faster_df_apply
53823,DataFrame.apply
53824,.apply
53825,"row = pd.Series({f:v for f,v in zip(cols, row[1:])})"
53826,.apply
53827,apply
53828,import numpy as np
53829,import pandas as pd
53830,import unidecode
53831,
53832,"s = pd.Series(['mañana','Ceñía'])"
53833,s.head()
53834,0    mañana
53835,1     Ceñía
53836,
53837,
53838,s.apply(unidecode.unidecode)
53839,0    manana
53840,1     Cenia
53841,apply
53842,NumPy
53843,pandas apply
53844,[unidecode.unidecode(x) for x in s]
53845,"list(map(unidecode.unidecode, s))"
53846,apply
53847,from multiprocessing.dummy import Pool as ThreadPool
53848,pool = ThreadPool(4)
53849,"results = pool.map(my_function, my_array)"
53850,results = []
53851,for item in my_array:
53852,    results.append(my_function(item))
53853,multiprocessing.dummy
53854,import urllib2
53855,from multiprocessing.dummy import Pool as ThreadPool
53856,
53857,urls = [
53858,"  'http://www.python.org',"
53859,"  'http://www.python.org/about/',"
53860,"  'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html',"
53861,"  'http://www.python.org/doc/',"
53862,"  'http://www.python.org/download/',"
53863,"  'http://www.python.org/getit/',"
53864,"  'http://www.python.org/community/',"
53865,"  'https://wiki.python.org/moin/',"
53866,]
53867,
53868,# Make the Pool of workers
53869,pool = ThreadPool(4)
53870,
53871,# Open the URLs in their own threads
53872,# and return the results
53873,"results = pool.map(urllib2.urlopen, urls)"
53874,
53875,# Close the pool and wait for the work to finish
53876,pool.close()
53877,pool.join()
53878,Single thread:   14.4 seconds
53879,       4 Pool:   3.1 seconds
53880,       8 Pool:   1.4 seconds
53881,      13 Pool:   1.3 seconds
53882,"results = pool.starmap(function, zip(list_a, list_b))"
53883,"results = pool.starmap(function, zip(itertools.repeat(constant), list_a))"
53884,with Pool(8) as p: p.map( *whatever* )
53885,import Queue
53886,import threading
53887,import urllib2
53888,
53889,# Called by each thread
53890,"def get_url(q, url):"
53891,    q.put(urllib2.urlopen(url).read())
53892,
53893,"theurls = [""http://google.com"", ""http://yahoo.com""]"
53894,
53895,q = Queue.Queue()
53896,
53897,for u in theurls:
53898,"    t = threading.Thread(target=get_url, args = (q,u))"
53899,    t.daemon = True
53900,    t.start()
53901,
53902,s = q.get()
53903,print s
53904,get
53905,put
53906,join()
53907,Queue
53908,queue
53909,s = q.get()
53910,print s
53911,join
53912,import threading
53913,
53914,class SummingThread(threading.Thread):
53915,"     def __init__(self,low,high):"
53916,"         super(SummingThread, self).__init__()"
53917,         self.low=low
53918,         self.high=high
53919,         self.total=0
53920,
53921,     def run(self):
53922,"         for i in range(self.low,self.high):"
53923,             self.total+=i
53924,
53925,
53926,"thread1 = SummingThread(0,500000)"
53927,"thread2 = SummingThread(500000,1000000)"
53928,thread1.start() # This actually causes the thread to run
53929,thread2.start()
53930,thread1.join()  # This waits until the thread has completed
53931,thread2.join()
53932,"# At this point, both threads have completed"
53933,result = thread1.total + thread2.total
53934,print result
53935,thread1
53936,thread2
53937,"super(SummingThread, self).__init__()"
53938,from multiprocessing import Process
53939,
53940,def f(name):
53941,"    print 'hello', name"
53942,
53943,if __name__ == '__main__':
53944,"    p = Process(target=f, args=('bob',))"
53945,    p.start()
53946,    p.join()
53947,f
53948,join
53949,join
53950,map
53951,import threading
53952,from random import randint
53953,from time import sleep
53954,
53955,
53956,def print_number(number):
53957,
53958,    # Sleeps a random 1 to 10 seconds
53959,"    rand_int_var = randint(1, 10)"
53960,    sleep(rand_int_var)
53961,"    print ""Thread "" + str(number) + "" slept for "" + str(rand_int_var) + "" seconds"""
53962,
53963,thread_list = []
53964,
53965,"for i in range(1, 10):"
53966,
53967,    # Instantiates the thread
53968,"    # (i) does not make a sequence, so (i,)"
53969,"    t = threading.Thread(target=print_number, args=(i,))"
53970,    # Sticks the thread in a list so that it remains accessible
53971,    thread_list.append(t)
53972,
53973,# Starts threads
53974,for thread in thread_list:
53975,    thread.start()
53976,
53977,# This blocks the calling thread until the thread whose join() method is called is terminated.
53978,# From http://docs.python.org/2/library/threading.html#thread-objects
53979,for thread in thread_list:
53980,    thread.join()
53981,
53982,# Demonstrates that the main process waited for threads to complete
53983,"print ""Done"""
53984,for
53985,thread.start()
53986,try:
53987,    # For Python 3
53988,    import queue
53989,    from urllib.request import urlopen
53990,except:
53991,    # For Python 2 
53992,    import Queue as queue
53993,    from urllib2 import urlopen
53994,
53995,import threading
53996,
53997,"worker_data = ['http://google.com', 'http://yahoo.com', 'http://bing.com']"
53998,
53999,# Load up a queue with your data. This will handle locking
54000,q = queue.Queue()
54001,for url in worker_data:
54002,    q.put(url)
54003,
54004,# Define a worker function
54005,def worker(url_queue):
54006,    queue_full = True
54007,    while queue_full:
54008,        try:
54009,"            # Get your data off the queue, and do some work"
54010,            url = url_queue.get(False)
54011,            data = urlopen(url).read()
54012,            print(len(data))
54013,
54014,        except queue.Empty:
54015,            queue_full = False
54016,
54017,# Create as many threads as you want
54018,thread_count = 5
54019,for i in range(thread_count):
54020,"    t = threading.Thread(target=worker, args = (q,))"
54021,    t.start()
54022,import Queue ModuleNotFoundError: No module named 'Queue'
54023,queue
54024,f
54025,import threading
54026,threading.Thread(target=f).start()
54027,f
54028,"threading.Thread(target=f, args=(a,b,c)).start()"
54029,Thread
54030,is_alive()
54031,is_alive
54032,thread1=threading.Thread(target=f).start()
54033,thread1.is_alive()
54034,thread1
54035,None
54036,thread1=threading.Thread(target=f)
54037,thread1.start()
54038,thread1.is_alive()
54039,thread1.is_alive()
54040,False
54041,import Queue
54042,import threading
54043,import multiprocessing
54044,import subprocess
54045,
54046,q = Queue.Queue()
54047,for i in range(30): # Put 30 tasks in the queue
54048,    q.put(i)
54049,
54050,def worker():
54051,    while True:
54052,        item = q.get()
54053,        # Execute a task: call a shell program and wait until it completes
54054,"        subprocess.call(""echo "" + str(item), shell=True)"
54055,        q.task_done()
54056,
54057,cpus = multiprocessing.cpu_count() # Detect number of cores
54058,"print(""Creating %d threads"" % cpus)"
54059,for i in range(cpus):
54060,     t = threading.Thread(target=worker)
54061,     t.daemon = True
54062,     t.start()
54063,
54064,q.join() # Block until all tasks are done
54065,import concurrent.futures
54066,import urllib.request
54067,
54068,"URLS = ['http://www.foxnews.com/',"
54069,"        'http://www.cnn.com/',"
54070,"        'http://europe.wsj.com/',"
54071,"        'http://www.bbc.co.uk/',"
54072,        'http://some-made-up-domain.com/']
54073,
54074,# Retrieve a single page and report the URL and contents
54075,"def load_url(url, timeout):"
54076,"    with urllib.request.urlopen(url, timeout=timeout) as conn:"
54077,        return conn.read()
54078,
54079,# We can use a with statement to ensure threads are cleaned up promptly
54080,with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
54081,    # Start the load operations and mark each future with its URL
54082,"    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}"
54083,    for future in concurrent.futures.as_completed(future_to_url):
54084,        url = future_to_url[future]
54085,        try:
54086,            data = future.result()
54087,        except Exception as exc:
54088,"            print('%r generated an exception: %s' % (url, exc))"
54089,        else:
54090,"            print('%r page is %d bytes' % (url, len(data)))"
54091,import concurrent.futures
54092,import math
54093,
54094,PRIMES = [
54095,"    112272535095293,"
54096,"    112582705942171,"
54097,"    112272535095293,"
54098,"    115280095190773,"
54099,"    115797848077099,"
54100,    1099726899285419]
54101,
54102,def is_prime(n):
54103,    if n % 2 == 0:
54104,        return False
54105,
54106,    sqrt_n = int(math.floor(math.sqrt(n)))
54107,"    for i in range(3, sqrt_n + 1, 2):"
54108,        if n % i == 0:
54109,            return False
54110,    return True
54111,
54112,def main():
54113,    with concurrent.futures.ProcessPoolExecutor() as executor:
54114,"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):"
54115,"            print('%d is prime: %s' % (number, prime))"
54116,
54117,if __name__ == '__main__':
54118,    main()
54119,import math
54120,import timeit
54121,import threading
54122,import multiprocessing
54123,"from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor"
54124,
54125,
54126,def time_stuff(fn):
54127,"    """""""
54128,    Measure time of execution of a function
54129,"    """""""
54130,"    def wrapper(*args, **kwargs):"
54131,        t0 = timeit.default_timer()
54132,"        fn(*args, **kwargs)"
54133,        t1 = timeit.default_timer()
54134,"        print(""{} seconds"".format(t1 - t0))"
54135,    return wrapper
54136,
54137,"def find_primes_in(nmin, nmax):"
54138,"    """""""
54139,    Compute a list of prime numbers between the given minimum and maximum arguments
54140,"    """""""
54141,    primes = []
54142,
54143,    # Loop from minimum to maximum
54144,"    for current in range(nmin, nmax + 1):"
54145,
54146,        # Take the square root of the current number
54147,        sqrt_n = int(math.sqrt(current))
54148,        found = False
54149,
54150,        # Check if the any number from 2 to the square root + 1 divides the current numnber under consideration
54151,"        for number in range(2, sqrt_n + 1):"
54152,
54153,"            # If divisible we have found a factor, hence this is not a prime number, lets move to the next one"
54154,            if current % number == 0:
54155,                found = True
54156,                break
54157,
54158,"        # If not divisible, add this number to the list of primes that we have found so far"
54159,        if not found:
54160,            primes.append(current)
54161,
54162,"    # I am merely printing the length of the array containing all the primes, but feel free to do what you want"
54163,    print(len(primes))
54164,
54165,@time_stuff
54166,"def sequential_prime_finder(nmin, nmax):"
54167,"    """""""
54168,    Use the main process and main thread to compute everything in this case
54169,"    """""""
54170,"    find_primes_in(nmin, nmax)"
54171,
54172,@time_stuff
54173,"def threading_prime_finder(nmin, nmax):"
54174,"    """""""
54175,"    If the minimum is 1000 and the maximum is 2000 and we have four workers,"
54176,    1000 - 1250 to worker 1
54177,    1250 - 1500 to worker 2
54178,    1500 - 1750 to worker 3
54179,    1750 - 2000 to worker 4
54180,    so let’s split the minimum and maximum values according to the number of workers
54181,"    """""""
54182,    nrange = nmax - nmin
54183,    threads = []
54184,    for i in range(8):
54185,        start = int(nmin + i * nrange/8)
54186,        end = int(nmin + (i + 1) * nrange/8)
54187,
54188,        # Start the thread with the minimum and maximum split up to compute
54189,        # Parallel computation will not work here due to the GIL since this is a CPU-bound task
54190,"        t = threading.Thread(target = find_primes_in, args = (start, end))"
54191,        threads.append(t)
54192,        t.start()
54193,
54194,    # Don’t forget to wait for the threads to finish
54195,    for t in threads:
54196,        t.join()
54197,
54198,@time_stuff
54199,"def processing_prime_finder(nmin, nmax):"
54200,"    """""""
54201,"    Split the minimum, maximum interval similar to the threading method above, but use processes this time"
54202,"    """""""
54203,    nrange = nmax - nmin
54204,    processes = []
54205,    for i in range(8):
54206,        start = int(nmin + i * nrange/8)
54207,        end = int(nmin + (i + 1) * nrange/8)
54208,"        p = multiprocessing.Process(target = find_primes_in, args = (start, end))"
54209,        processes.append(p)
54210,        p.start()
54211,
54212,    for p in processes:
54213,        p.join()
54214,
54215,@time_stuff
54216,"def thread_executor_prime_finder(nmin, nmax):"
54217,"    """""""
54218,"    Split the min max interval similar to the threading method, but use a thread pool executor this time."
54219,    This method is slightly faster than using pure threading as the pools manage threads more efficiently.
54220,    This method is still slow due to the GIL limitations since we are doing a CPU-bound task.
54221,"    """""""
54222,    nrange = nmax - nmin
54223,    with ThreadPoolExecutor(max_workers = 8) as e:
54224,        for i in range(8):
54225,            start = int(nmin + i * nrange/8)
54226,            end = int(nmin + (i + 1) * nrange/8)
54227,"            e.submit(find_primes_in, start, end)"
54228,
54229,@time_stuff
54230,"def process_executor_prime_finder(nmin, nmax):"
54231,"    """""""
54232,"    Split the min max interval similar to the threading method, but use the process pool executor."
54233,    This is the fastest method recorded so far as it manages process efficiently + overcomes GIL limitations.
54234,    RECOMMENDED METHOD FOR CPU-BOUND TASKS
54235,"    """""""
54236,    nrange = nmax - nmin
54237,    with ProcessPoolExecutor(max_workers = 8) as e:
54238,        for i in range(8):
54239,            start = int(nmin + i * nrange/8)
54240,            end = int(nmin + (i + 1) * nrange/8)
54241,"            e.submit(find_primes_in, start, end)"
54242,
54243,def main():
54244,    nmin = int(1e7)
54245,    nmax = int(1.05e7)
54246,"    print(""Sequential Prime Finder Starting"")"
54247,"    sequential_prime_finder(nmin, nmax)"
54248,"    print(""Threading Prime Finder Starting"")"
54249,"    threading_prime_finder(nmin, nmax)"
54250,"    print(""Processing Prime Finder Starting"")"
54251,"    processing_prime_finder(nmin, nmax)"
54252,"    print(""Thread Executor Prime Finder Starting"")"
54253,"    thread_executor_prime_finder(nmin, nmax)"
54254,"    print(""Process Executor Finder Starting"")"
54255,"    process_executor_prime_finder(nmin, nmax)"
54256,"if __name__ == ""__main__"":"
54257,    main()
54258,Sequential Prime Finder Starting
54259,9.708213827005238 seconds
54260,Threading Prime Finder Starting
54261,9.81836523200036 seconds
54262,Processing Prime Finder Starting
54263,3.2467174359990167 seconds
54264,Thread Executor Prime Finder Starting
54265,10.228896902000997 seconds
54266,Process Executor Finder Starting
54267,2.656402041000547 seconds
54268,if __name__ == '__main__':
54269,def sqr(val):
54270,    import time
54271,    time.sleep(0.1)
54272,    return val * val
54273,
54274,def process_result(result):
54275,    print(result)
54276,
54277,def process_these_asap(tasks):
54278,    import concurrent.futures
54279,
54280,    with concurrent.futures.ProcessPoolExecutor() as executor:
54281,        futures = []
54282,        for task in tasks:
54283,"            futures.append(executor.submit(sqr, task))"
54284,
54285,        for future in concurrent.futures.as_completed(futures):
54286,            process_result(future.result())
54287,        # Or instead of all this just do:
54288,"        # results = executor.map(sqr, tasks)"
54289,"        # list(map(process_result, results))"
54290,
54291,def main():
54292,    tasks = list(range(10))
54293,    print('Processing {} tasks'.format(len(tasks)))
54294,    process_these_asap(tasks)
54295,    print('Done')
54296,    return 0
54297,
54298,if __name__ == '__main__':
54299,    import sys
54300,    sys.exit(main())
54301,with
54302,# thread_test.py
54303,import threading
54304,import time
54305,
54306,class Monitor(threading.Thread):
54307,"    def __init__(self, mon):"
54308,        threading.Thread.__init__(self)
54309,        self.mon = mon
54310,
54311,    def run(self):
54312,        while True:
54313,            if self.mon[0] == 2:
54314,"                print ""Mon = 2"""
54315,                self.mon[0] = 3;
54316,>>> from thread_test import Monitor
54317,>>> a = [0]
54318,>>> mon = Monitor(a)
54319,>>> mon.start()
54320,>>> a[0] = 2
54321,Mon = 2
54322,>>>a[0] = 2
54323,Mon = 2
54324,>>> a[0] = 2
54325,Mon = 2
54326,Threading
54327,Queue
54328,concurrent.futures.ThreadPoolExecutor
54329,with
54330,"from concurrent.futures import ThreadPoolExecutor, as_completed"
54331,
54332,def get_url(url):
54333,    # Your actual program here. Using threading.Lock() if necessary
54334,"    return """""
54335,
54336,# List of URLs to fetch
54337,"urls = [""url1"", ""url2""]"
54338,
54339,with ThreadPoolExecutor(max_workers = 5) as executor:
54340,
54341,    # Create threads
54342,"    futures = {executor.submit(get_url, url) for url in urls}"
54343,
54344,    # as_completed() gives you the threads once finished
54345,    for f in as_completed(futures):
54346,        # Get the results
54347,        rs = f.result()
54348,asyncio
54349,.sleep()
54350,Threading-Pool
54351,"from concurrent.futures import ThreadPoolExecutor, as_completed"
54352,"from time import sleep, time"
54353,
54354,def concurrent(max_worker):
54355,    futures = []
54356,    tic = time()
54357,    with ThreadPoolExecutor(max_workers=max_worker) as executor:
54358,"        futures.append(executor.submit(sleep, 2))  # Two seconds sleep"
54359,"        futures.append(executor.submit(sleep, 1))"
54360,"        futures.append(executor.submit(sleep, 7))"
54361,"        futures.append(executor.submit(sleep, 3))"
54362,        for future in as_completed(futures):
54363,            if future.result() is not None:
54364,                print(future.result())
54365,"    print(f'Total elapsed time by {max_worker} workers:', time()-tic)"
54366,
54367,concurrent(5)
54368,concurrent(4)
54369,concurrent(3)
54370,concurrent(2)
54371,concurrent(1)
54372,Total elapsed time by 5 workers: 7.007831811904907
54373,Total elapsed time by 4 workers: 7.007944107055664
54374,Total elapsed time by 3 workers: 7.003149509429932
54375,Total elapsed time by 2 workers: 8.004627466201782
54376,Total elapsed time by 1 workers: 13.013478994369507
54377,multiprocessing
54378,threading
54379,ThreadPoolExecutor
54380,ProcessPoolExecutor
54381,from threading import Thread
54382,from project import app
54383,import csv
54384,
54385,
54386,def import_handler(csv_file_name):
54387,"    thr = Thread(target=dump_async_csv_data, args=[csv_file_name])"
54388,    thr.start()
54389,
54390,def dump_async_csv_data(csv_file_name):
54391,    with app.app_context():
54392,        with open(csv_file_name) as File:
54393,            reader = csv.DictReader(File)
54394,            for row in reader:
54395,                # DB operation/query
54396,import_handler(csv_file_name)
54397,#!/bin/python
54398,from multiprocessing.dummy import Pool
54399,"from subprocess import PIPE,Popen"
54400,import time
54401,import os
54402,
54403,"# In the variable pool_size we define the ""parallelness""."
54404,"# For CPU-bound tasks, it doesn't make sense to create more Pool processes"
54405,# than you have cores to run them on.
54406,#
54407,"# On the other hand, if you are using I/O-bound tasks, it may make sense"
54408,"# to create a quite a few more Pool processes than cores, since the processes"
54409,# will probably spend most their time blocked (waiting for I/O to complete).
54410,pool_size = 8
54411,
54412,def do_ping(ip):
54413,    if os.name == 'nt':
54414,"        print (""Using Windows Ping to "" + ip)"
54415,"        proc = Popen(['ping', ip], stdout=PIPE)"
54416,        return proc.communicate()[0]
54417,    else:
54418,"        print (""Using Linux / Unix Ping to "" + ip)"
54419,"        proc = Popen(['ping', ip, '-c', '4'], stdout=PIPE)"
54420,        return proc.communicate()[0]
54421,
54422,
54423,os.system('cls' if os.name=='nt' else 'clear')
54424,"print (""Running using threads\n"")"
54425,start_time = time.time()
54426,pool = Pool(pool_size)
54427,"website_names = [""www.google.com"",""www.facebook.com"",""www.pinterest.com"",""www.microsoft.com""]"
54428,result = {}
54429,for website_name in website_names:
54430,"    result[website_name] = pool.apply_async(do_ping, args=(website_name,))"
54431,pool.close()
54432,pool.join()
54433,"print (""\n--- Execution took {} seconds ---"".format((time.time() - start_time)))"
54434,
54435,"# Now we do the same without threading, just to compare time"
54436,"print (""\nRunning NOT using threads\n"")"
54437,start_time = time.time()
54438,for website_name in website_names:
54439,    do_ping(website_name)
54440,"print (""\n--- Execution took {} seconds ---"".format((time.time() - start_time)))"
54441,
54442,# Here's one way to print the final output from the threads
54443,output = {}
54444,"for key, value in result.items():"
54445,    output[key] = value.get()
54446,"print (""\nOutput aggregated in a Dictionary:"")"
54447,print (output)
54448,"print (""\n"")"
54449,
54450,"print (""\nPretty printed output: "")"
54451,"for key, value in output.items():"
54452,"    print (key + ""\n"")"
54453,    print (value)
54454,import threading
54455,import time
54456,
54457,#tLock = threading.Lock()
54458,tLock = threading.BoundedSemaphore(value=4)
54459,"def timer(name, delay, repeat):"
54460,"    print  ""\r\nTimer: "", name, "" Started"""
54461,    tLock.acquire()
54462,"    print ""\r\n"", name, "" has the acquired the lock"""
54463,    while repeat > 0:
54464,        time.sleep(delay)
54465,"        print ""\r\n"", name, "": "", str(time.ctime(time.time()))"
54466,        repeat -= 1
54467,
54468,"    print ""\r\n"", name, "" is releaseing the lock"""
54469,    tLock.release()
54470,"    print ""\r\nTimer: "", name, "" Completed"""
54471,
54472,def Main():
54473,"    t1 = threading.Thread(target=timer, args=(""Timer1"", 2, 5))"
54474,"    t2 = threading.Thread(target=timer, args=(""Timer2"", 3, 5))"
54475,"    t3 = threading.Thread(target=timer, args=(""Timer3"", 4, 5))"
54476,"    t4 = threading.Thread(target=timer, args=(""Timer4"", 5, 5))"
54477,"    t5 = threading.Thread(target=timer, args=(""Timer5"", 0.1, 5))"
54478,
54479,    t1.start()
54480,    t2.start()
54481,    t3.start()
54482,    t4.start()
54483,    t5.start()
54484,
54485,"    print ""\r\nMain Complete"""
54486,
54487,"if __name__ == ""__main__"":"
54488,    Main()
54489,os.fork
54490,from os import fork
54491,
54492,"values = ['different', 'values', 'for', 'threads']"
54493,
54494,for i in range(len(values)):
54495,    p = fork()
54496,    if p == 0:
54497,        my_function(values[i])
54498,        break
54499,import queue as Queue
54500,import threading
54501,import urllib.request
54502,
54503,# Called by each thread
54504,"def get_url(q, url):"
54505,    q.put(urllib.request.urlopen(url).read())
54506,
54507,"theurls = [""http://google.com"", ""http://yahoo.com"", ""http://www.python.org"",""https://wiki.python.org/moin/""]"
54508,
54509,q = Queue.Queue()
54510,def thread_func():
54511,    for u in theurls:
54512,"        t = threading.Thread(target=get_url, args = (q,u))"
54513,        t.daemon = True
54514,        t.start()
54515,
54516,    s = q.get()
54517,    
54518,def non_thread_func():
54519,    for u in theurls:
54520,"        get_url(q,u)"
54521,        
54522,
54523,    s = q.get()
54524,   
54525,start = time.time()
54526,thread_func()
54527,end = time.time()
54528,print(end - start)
54529,
54530,start = time.time()
54531,non_thread_func()
54532,end = time.time()
54533,print(end - start)
54534,import threading
54535,import requests
54536,
54537,def send():
54538,
54539,  r = requests.get('https://www.stackoverlow.com')
54540,
54541,thread = []
54542,t = threading.Thread(target=send())
54543,thread.append(t)
54544,t.start()
54545,import time
54546,"from concurrent.futures import ThreadPoolExecutor, as_completed"
54547,import threading
54548,
54549,"def a(a=1, b=2):"
54550,    print(a)
54551,    time.sleep(5)
54552,    print(b)
54553,    return a+b
54554,
54555,def b(**kwargs):
54556,"    if ""a"" in kwargs:"
54557,"        print(""am b"")"
54558,    else:
54559,"        print(""nothing"")"
54560,        
54561,to_do=[]
54562,executor = ThreadPoolExecutor(max_workers=4)
54563,ex1=executor.submit(a)
54564,to_do.append(ex1)
54565,"ex2=executor.submit(b, **{""a"":1})"
54566,to_do.append(ex2)
54567,
54568,for future in as_completed(to_do):
54569,"    print(""Future {} and Future Return is {}\n"".format(future, future.result()))"
54570,
54571,"print(""threading"")"
54572,
54573,to_do=[]
54574,to_do.append(threading.Thread(target=a))
54575,"to_do.append(threading.Thread(target=b, kwargs={""a"":1}))"
54576,
54577,for threads in to_do:
54578,    threads.start()
54579,    
54580,for threads in to_do:
54581,    threads.join()
54582,a+b
54583,a()
54584,In [1]: import signal
54585,
54586,# Register an handler for the timeout
54587,"In [2]: def handler(signum, frame):"
54588,"   ...:     print(""Forever is over!"")"
54589,"   ...:     raise Exception(""end of time"")"
54590,   ...: 
54591,
54592,# This function *may* run for an indetermined time...
54593,In [3]: def loop_forever():
54594,   ...:     import time
54595,   ...:     while 1:
54596,"   ...:         print(""sec"")"
54597,   ...:         time.sleep(1)
54598,   ...:         
54599,   ...:         
54600,
54601,# Register the signal function handler
54602,"In [4]: signal.signal(signal.SIGALRM, handler)"
54603,Out[4]: 0
54604,
54605,# Define a timeout for your function
54606,In [5]: signal.alarm(10)
54607,Out[5]: 0
54608,
54609,In [6]: try:
54610,   ...:     loop_forever()
54611,"   ...: except Exception, exc: "
54612,   ...:     print(exc)
54613,   ....: 
54614,sec
54615,sec
54616,sec
54617,sec
54618,sec
54619,sec
54620,sec
54621,sec
54622,Forever is over!
54623,end of time
54624,
54625,# Cancel the timer if the function returned before timeout
54626,"# (ok, mine won't but yours maybe will :)"
54627,In [7]: signal.alarm(0)
54628,Out[7]: 0
54629,signal.alarm(10)
54630,def loop_forever():
54631,    while 1:
54632,        print('sec')
54633,        try:
54634,            time.sleep(10)
54635,        except:
54636,            continue
54637,signal.alarm
54638,SIGALRM
54639,signal.signal
54640,signal.signal
54641,signal.alarm(0)
54642,multiprocessing.Process
54643,import multiprocessing
54644,import time
54645,
54646,# bar
54647,def bar():
54648,    for i in range(100):
54649,"        print ""Tick"""
54650,        time.sleep(1)
54651,
54652,if __name__ == '__main__':
54653,    # Start bar as a process
54654,    p = multiprocessing.Process(target=bar)
54655,    p.start()
54656,
54657,    # Wait for 10 seconds or until process finishes
54658,    p.join(10)
54659,
54660,    # If thread is still active
54661,    if p.is_alive():
54662,"        print ""running... let's kill it..."""
54663,
54664,        # Terminate - may not work if process is stuck for good
54665,        p.terminate()
54666,"        # OR Kill - will work for sure, no chance for process to finish nicely however"
54667,        # p.kill()
54668,
54669,        p.join()
54670,join()
54671,join(10)
54672,daemon=True
54673,multiprocessing.Process()
54674,"terminate() ... Note that exit handlers and finally clauses, etc., will not be executed. Note that descendant processes of the process will not be terminated – they will simply become orphaned."
54675,threading.Timer
54676,from __future__ import print_function
54677,import sys
54678,import threading
54679,from time import sleep
54680,try:
54681,    import thread
54682,except ImportError:
54683,    import _thread as thread
54684,try:
54685,"    range, _print = xrange, print"
54686,"    def print(*args, **kwargs): "
54687,"        flush = kwargs.pop('flush', False)"
54688,"        _print(*args, **kwargs)"
54689,        if flush:
54690,"            kwargs.get('file', sys.stdout).flush()            "
54691,except NameError:
54692,    pass
54693,exit_after
54694,main()
54695,def quit_function(fn_name):
54696,"    # print to stderr, unbuffered in Python 2."
54697,"    print('{0} took too long'.format(fn_name), file=sys.stderr)"
54698,    sys.stderr.flush() # Python 3 stderr is likely buffered.
54699,    thread.interrupt_main() # raises KeyboardInterrupt
54700,def exit_after(s):
54701,    '''
54702,    use as decorator to exit process if 
54703,    function takes longer than s seconds
54704,    '''
54705,    def outer(fn):
54706,"        def inner(*args, **kwargs):"
54707,"            timer = threading.Timer(s, quit_function, args=[fn.__name__])"
54708,            timer.start()
54709,            try:
54710,"                result = fn(*args, **kwargs)"
54711,            finally:
54712,                timer.cancel()
54713,            return result
54714,        return inner
54715,    return outer
54716,@exit_after(5)
54717,def countdown(n):
54718,"    print('countdown started', flush=True)"
54719,"    for i in range(n, -1, -1):"
54720,"        print(i, end=', ', flush=True)"
54721,        sleep(1)
54722,    print('countdown finished')
54723,>>> countdown(3)
54724,countdown started
54725,"3, 2, 1, 0, countdown finished"
54726,>>> countdown(10)
54727,countdown started
54728,"10, 9, 8, 7, 6, countdown took too long"
54729,Traceback (most recent call last):
54730,"  File ""<stdin>"", line 1, in <module>"
54731,"  File ""<stdin>"", line 11, in inner"
54732,"  File ""<stdin>"", line 6, in countdown"
54733,KeyboardInterrupt
54734,KeyboardInterrupt
54735,@exit_after(1)
54736,def sleep10():
54737,    sleep(10)
54738,    print('slept 10 seconds')
54739,
54740,>>> sleep10()
54741,sleep10 took too long         # Note that it hangs here about 9 more seconds
54742,Traceback (most recent call last):
54743,"  File ""<stdin>"", line 1, in <module>"
54744,"  File ""<stdin>"", line 11, in inner"
54745,"  File ""<stdin>"", line 3, in sleep10"
54746,KeyboardInterrupt
54747,PyErr_CheckSignals()
54748,>>> try:
54749,...     countdown(10)
54750,... except KeyboardInterrupt:
54751,...     print('do something else')
54752,... 
54753,countdown started
54754,"10, 9, 8, 7, 6, countdown took too long"
54755,do something else
54756,thread.interrupt_main()
54757,multiprocessing.connection.Client
54758,thread.interrupt_main()
54759,subprocess()
54760,^C
54761,"def timeout(func, args=(), kwargs={}, timeout_duration=1, default=None):"
54762,    import signal
54763,
54764,    class TimeoutError(Exception):
54765,        pass
54766,
54767,"    def handler(signum, frame):"
54768,        raise TimeoutError()
54769,
54770,    # set the timeout handler
54771,"    signal.signal(signal.SIGALRM, handler) "
54772,    signal.alarm(timeout_duration)
54773,    try:
54774,"        result = func(*args, **kwargs)"
54775,    except TimeoutError as exc:
54776,        result = default
54777,    finally:
54778,        signal.alarm(0)
54779,
54780,    return result
54781,timeout
54782,None
54783,kwargs = kwargs or {}
54784,import multiprocessing.pool
54785,import functools
54786,
54787,def timeout(max_timeout):
54788,"    """"""Timeout decorator, parameter in seconds."""""""
54789,    def timeout_decorator(item):
54790,"        """"""Wrap the original function."""""""
54791,        @functools.wraps(item)
54792,"        def func_wrapper(*args, **kwargs):"
54793,"            """"""Closure for function."""""""
54794,            pool = multiprocessing.pool.ThreadPool(processes=1)
54795,"            async_result = pool.apply_async(item, args, kwargs)"
54796,            # raises a TimeoutError if execution exceeds max_timeout
54797,            return async_result.get(max_timeout)
54798,        return func_wrapper
54799,    return timeout_decorator
54800,"@timeout(5.0)  # if execution takes longer than 5 seconds, raise a TimeoutError"
54801,def test_base_regression(self):
54802,    ...
54803,Exception
54804,pool.close()
54805,TimeoutError
54806,RuntimeError: can't start new thread
54807,stopit
54808,@stopit.threading_timeoutable
54809,timeout
54810,stopit.utils.TimeoutException
54811,@stopit.threading_timeoutable(default='not finished')
54812,from concurrent.futures import ProcessPoolExecutor
54813,
54814,# Warning: this does not terminate function if timeout
54815,"def timeout_five(fnc, *args, **kwargs):"
54816,    with ProcessPoolExecutor() as p:
54817,"        f = p.submit(fnc, *args, **kwargs)"
54818,        return f.result(timeout=5)
54819,ProcessPoolExecutor
54820,ThreadPoolExecutor
54821,from contextlib import contextmanager
54822,import signal
54823,import time
54824,
54825,@contextmanager
54826,def timeout(duration):
54827,"    def timeout_handler(signum, frame):"
54828,        raise TimeoutError(f'block timedout after {duration} seconds')
54829,"    signal.signal(signal.SIGALRM, timeout_handler)"
54830,    signal.alarm(duration)
54831,    try:
54832,        yield
54833,    finally:
54834,        signal.alarm(0)
54835,
54836,def sleeper(duration):
54837,    time.sleep(duration)
54838,    print('finished')
54839,In [19]: with timeout(2):
54840,    ...:     sleeper(1)
54841,    ...:     
54842,finished
54843,
54844,In [20]: with timeout(2):
54845,    ...:     sleeper(3)
54846,    ...:         
54847,---------------------------------------------------------------------------
54848,Exception                                 Traceback (most recent call last)
54849,<ipython-input-20-66c78858116f> in <module>()
54850,      1 with timeout(2):
54851,----> 2     sleeper(3)
54852,      3 
54853,
54854,<ipython-input-7-a75b966bf7ac> in sleeper(t)
54855,      1 def sleeper(t):
54856,----> 2     time.sleep(t)
54857,      3     print('finished')
54858,      4 
54859,
54860,"<ipython-input-18-533b9e684466> in timeout_handler(signum, frame)"
54861,      2 def timeout(duration):
54862,"      3     def timeout_handler(signum, frame):"
54863,----> 4         raise Exception(f'block timedout after {duration} seconds')
54864,"      5     signal.signal(signal.SIGALRM, timeout_handler)"
54865,      6     signal.alarm(duration)
54866,
54867,Exception: block timedout after 2 seconds
54868,from contextlib import contextmanager
54869,try
54870,finally
54871,pip install timeout-decorator
54872,import time
54873,import timeout_decorator
54874,
54875,@timeout_decorator.timeout(5)
54876,def mytest():
54877,"    print ""Start"""
54878,"    for i in range(1,10):"
54879,        time.sleep(1)
54880,"        print ""%d seconds have passed"" % i"
54881,
54882,if __name__ == '__main__':
54883,    mytest()
54884,timeout-decorator
54885,signal
54886,AttributeError: module 'signal' has no attribute 'SIGALRM'
54887,use_signals=False
54888,pip install https://github.com/bitranox/wrapt-timeout-decorator/archive/master.zip
54889,import time
54890,from wrapt_timeout_decorator import *
54891,
54892,@timeout(5)
54893,def mytest(message):
54894,    print(message)
54895,"    for i in range(1,10):"
54896,        time.sleep(1)
54897,        print('{} seconds have passed'.format(i))
54898,
54899,def main():
54900,    mytest('starting')
54901,
54902,
54903,if __name__ == '__main__':
54904,    main()
54905,TimeoutError: Function mytest timed out after 5 seconds
54906,from wrapt_timeout_decorator import *
54907,ModuleNotFoundError: No module named 'google.appengine'
54908,message
54909,seconds passed
54910,TimeoutError
54911,>>> @killer_call(timeout=4)
54912,... def bar(x):
54913,...        import time
54914,...        time.sleep(x)
54915,...        return x
54916,>>> bar(10)
54917,Traceback (most recent call last):
54918,  ...
54919,__main__.TimeoutError: function 'bar' timed out after 4s
54920,>>> bar(2)
54921,2
54922,import multiprocessing as mp
54923,import multiprocessing.queues as mpq
54924,import functools
54925,import dill
54926,
54927,"from typing import Tuple, Callable, Dict, Optional, Iterable, List, Any"
54928,
54929,class TimeoutError(Exception):
54930,
54931,"    def __init__(self, func: Callable, timeout: int):"
54932,        self.t = timeout
54933,        self.fname = func.__name__
54934,
54935,    def __str__(self):
54936,"            return f""function '{self.fname}' timed out after {self.t}s"""
54937,
54938,
54939,"def _lemmiwinks(func: Callable, args: Tuple, kwargs: Dict[str, Any], q: mp.Queue):"
54940,"    """"""lemmiwinks crawls into the unknown"""""""
54941,"    q.put(dill.loads(func)(*args, **kwargs))"
54942,
54943,
54944,"def killer_call(func: Callable = None, timeout: int = 10) -> Callable:"
54945,"    """""""
54946,    Single function call with a timeout
54947,
54948,    Args:
54949,        func: the function
54950,        timeout: The timeout in seconds
54951,"    """""""
54952,
54953,"    if not isinstance(timeout, int):"
54954,        raise ValueError(f'timeout needs to be an int. Got: {timeout}')
54955,
54956,    if func is None:
54957,"        return functools.partial(killer_call, timeout=timeout)"
54958,
54959,    @functools.wraps(killer_call)
54960,"    def _inners(*args, **kwargs) -> Any:"
54961,        q_worker = mp.Queue()
54962,"        proc = mp.Process(target=_lemmiwinks, args=(dill.dumps(func), args, kwargs, q_worker))"
54963,        proc.start()
54964,        try:
54965,            return q_worker.get(timeout=timeout)
54966,        except mpq.Empty:
54967,"            raise TimeoutError(func, timeout)"
54968,        finally:
54969,            try:
54970,                proc.terminate()
54971,            except:
54972,                pass
54973,    return _inners
54974,
54975,if __name__ == '__main__':
54976,    @killer_call(timeout=4)
54977,    def bar(x):
54978,        import time
54979,        time.sleep(x)
54980,        return x
54981,
54982,    print(bar(2))
54983,    bar(10)
54984,dill
54985,doctest
54986,__import__
54987,TimeoutError
54988,TimeoutError
54989,import signal
54990,
54991,"def timeout(signum, frame):"
54992,    raise myException
54993,
54994,"#this is an infinite loop, never ending under normal circumstances"
54995,def main():
54996,"    print 'Starting Main ',"
54997,    while 1:
54998,"        print 'in main ',"
54999,
55000,#SIGALRM is only usable on a unix platform
55001,"signal.signal(signal.SIGALRM, timeout)"
55002,
55003,#change 5 to however many seconds you need
55004,signal.alarm(5)
55005,
55006,try:
55007,    main()
55008,except myException:
55009,"    print ""whoops"""
55010,try: ... except: ...
55011,import time
55012,import signal
55013,from functools import wraps
55014,
55015,
55016,def timeout(timeout_secs: int):
55017,    def wrapper(func):
55018,        @wraps(func)
55019,"        def time_limited(*args, **kwargs):"
55020,            # Register an handler for the timeout
55021,"            def handler(signum, frame):"
55022,"                raise Exception(f""Timeout for function '{func.__name__}'"")"
55023,
55024,            # Register the signal function handler
55025,"            signal.signal(signal.SIGALRM, handler)"
55026,
55027,            # Define a timeout for your function
55028,            signal.alarm(timeout_secs)
55029,
55030,            result = None
55031,            try:
55032,"                result = func(*args, **kwargs)"
55033,            except Exception as exc:
55034,                raise exc
55035,            finally:
55036,                # disable the signal alarm
55037,                signal.alarm(0)
55038,
55039,            return result
55040,
55041,        return time_limited
55042,
55043,    return wrapper
55044,20 seconds
55045,    @timeout(20)
55046,    def my_slow_or_never_ending_function(name):
55047,        while True:
55048,            time.sleep(1)
55049,"            print(f""Yet another second passed {name}..."")"
55050,
55051,    try:
55052,"        results = my_slow_or_never_ending_function(""Yooo!"")"
55053,    except Exception as e:
55054,"        print(f""ERROR: {e}"")"
55055,import asyncio
55056,import functools
55057,import multiprocessing
55058,from concurrent.futures.thread import ThreadPoolExecutor
55059,
55060,
55061,class SingletonTimeOut:
55062,    pool = None
55063,
55064,    @classmethod
55065,"    def run(cls, to_run: functools.partial, timeout: float):"
55066,        pool = cls.get_pool()
55067,        loop = cls.get_loop()
55068,        try:
55069,"            task = loop.run_in_executor(pool, to_run)"
55070,"            return loop.run_until_complete(asyncio.wait_for(task, timeout=timeout))"
55071,        except asyncio.TimeoutError as e:
55072,            error_type = type(e).__name__ #TODO
55073,            raise e
55074,
55075,    @classmethod
55076,    def get_pool(cls):
55077,        if cls.pool is None:
55078,            cls.pool = ThreadPoolExecutor(multiprocessing.cpu_count())
55079,        return cls.pool
55080,
55081,    @classmethod
55082,    def get_loop(cls):
55083,        try:
55084,            return asyncio.get_event_loop()
55085,        except RuntimeError:
55086,            asyncio.set_event_loop(asyncio.new_event_loop())
55087,"            # print(""NEW LOOP"" + str(threading.current_thread().ident))"
55088,            return asyncio.get_event_loop()
55089,
55090,# ---------------
55091,
55092,TIME_OUT = float('0.2')  # seconds
55093,
55094,"def toto(input_items,nb_predictions):"
55095,    return 1
55096,
55097,"to_run = functools.partial(toto,"
55098,"                           input_items=1,"
55099,"                           nb_predictions=""a"")"
55100,
55101,"results = SingletonTimeOut.run(to_run, TIME_OUT)"
55102,InternalError
55103,#!/usr/bin/python2
55104,"import sys, subprocess, threading"
55105,proc = subprocess.Popen(sys.argv[2:])
55106,"timer = threading.Timer(float(sys.argv[1]), proc.terminate)"
55107,timer.start()
55108,proc.wait()
55109,timer.cancel()
55110,exit(proc.returncode)
55111,subprocess.Popen(sys.argv[2:])
55112,#!/usr/bin/python
55113,
55114,# lightly modified version of http://code.activestate.com/recipes/577600-queue-for-managing-multiple-sigalrm-alarms-concurr/
55115,
55116,
55117,"""""""alarm.py: Permits multiple SIGALRM events to be queued."
55118,
55119,Uses a `heapq` to store the objects to be called when an alarm signal is
55120,"raised, so that the next alarm is always at the top of the heap."
55121,""""""""
55122,
55123,import heapq
55124,import signal
55125,from time import time
55126,
55127,__version__ = '$Revision: 2539 $'.split()[1]
55128,
55129,alarmlist = []
55130,
55131,"__new_alarm = lambda t, f, a, k: (t + time(), f, a, k)"
55132,__next_alarm = lambda: int(round(alarmlist[0][0] - time())) if alarmlist else None
55133,"__set_alarm = lambda: signal.alarm(max(__next_alarm(), 1))"
55134,
55135,
55136,class TimeoutError(Exception):
55137,"    def __init__(self, message, id_=None):"
55138,        self.message = message
55139,        self.id_ = id_
55140,
55141,
55142,class Timeout:
55143,    ''' id_ allows for nested timeouts. '''
55144,"    def __init__(self, id_=None, seconds=1, error_message='Timeout'):"
55145,        self.seconds = seconds
55146,        self.error_message = error_message
55147,        self.id_ = id_
55148,    def handle_timeout(self):
55149,"        raise TimeoutError(self.error_message, self.id_)"
55150,    def __enter__(self):
55151,"        self.this_alarm = alarm(self.seconds, self.handle_timeout)"
55152,"    def __exit__(self, type, value, traceback):"
55153,        try:
55154,            cancel(self.this_alarm) 
55155,        except ValueError:
55156,            pass
55157,
55158,
55159,def __clear_alarm():
55160,"    """"""Clear an existing alarm."
55161,
55162,"    If the alarm signal was set to a callable other than our own, queue the"
55163,    previous alarm settings.
55164,"    """""""
55165,    oldsec = signal.alarm(0)
55166,"    oldfunc = signal.signal(signal.SIGALRM, __alarm_handler)"
55167,    if oldsec > 0 and oldfunc != __alarm_handler:
55168,"        heapq.heappush(alarmlist, (__new_alarm(oldsec, oldfunc, [], {})))"
55169,
55170,
55171,def __alarm_handler(*zargs):
55172,"    """"""Handle an alarm by calling any due heap entries and resetting the alarm."
55173,
55174,"    Note that multiple heap entries might get called, especially if calling an"
55175,    entry takes a lot of time.
55176,"    """""""
55177,    try:
55178,        nextt = __next_alarm()
55179,        while nextt is not None and nextt <= 0:
55180,"            (tm, func, args, keys) = heapq.heappop(alarmlist)"
55181,"            func(*args, **keys)"
55182,            nextt = __next_alarm()
55183,    finally:
55184,        if alarmlist: __set_alarm()
55185,
55186,
55187,"def alarm(sec, func, *args, **keys):"
55188,"    """"""Set an alarm."
55189,
55190,"    When the alarm is raised in `sec` seconds, the handler will call `func`,"
55191,    passing `args` and `keys`. Return the heap entry (which is just a big
55192,"    tuple), so that it can be cancelled by calling `cancel()`."
55193,"    """""""
55194,    __clear_alarm()
55195,    try:
55196,"        newalarm = __new_alarm(sec, func, args, keys)"
55197,"        heapq.heappush(alarmlist, newalarm)"
55198,        return newalarm
55199,    finally:
55200,        __set_alarm()
55201,
55202,
55203,def cancel(alarm):
55204,"    """"""Cancel an alarm by passing the heap entry returned by `alarm()`."
55205,
55206,    It is an error to try to cancel an alarm which has already occurred.
55207,"    """""""
55208,    __clear_alarm()
55209,    try:
55210,        alarmlist.remove(alarm)
55211,        heapq.heapify(alarmlist)
55212,    finally:
55213,        if alarmlist: __set_alarm()
55214,import alarm
55215,from time import sleep
55216,
55217,try:
55218,"    with alarm.Timeout(id_='a', seconds=5):"
55219,        try:
55220,"            with alarm.Timeout(id_='b', seconds=2):"
55221,                sleep(3)
55222,        except alarm.TimeoutError as e:
55223,"            print 'raised', e.id_"
55224,        sleep(30)
55225,except alarm.TimeoutError as e:
55226,"    print 'raised', e.id_"
55227,else:
55228,    print 'nope.'
55229,"from timeout_timer import timeout, TimeoutInterrupt"
55230,
55231,class TimeoutInterruptNested(TimeoutInterrupt):
55232,    pass
55233,
55234,"def test_timeout_nested_loop_both_timeout(timer=""thread""):"
55235,    cnt = 0
55236,    try:
55237,"        with timeout(5, timer=timer):"
55238,            try:
55239,"                with timeout(2, timer=timer, exception=TimeoutInterruptNested):"
55240,                    sleep(2)
55241,            except TimeoutInterruptNested:
55242,                cnt += 1
55243,            time.sleep(10)
55244,    except TimeoutInterrupt:
55245,        cnt += 1
55246,    assert cnt == 2
55247,"def runFunctionCatchExceptions(func, *args, **kwargs):"
55248,    try:
55249,"        result = func(*args, **kwargs)"
55250,"    except Exception, message:"
55251,"        return [""exception"", message]"
55252,
55253,"    return [""RESULT"", result]"
55254,
55255,
55256,"def runFunctionWithTimeout(func, args=(), kwargs={}, timeout_duration=10, default=None):"
55257,    import threading
55258,    class InterruptableThread(threading.Thread):
55259,        def __init__(self):
55260,            threading.Thread.__init__(self)
55261,            self.result = default
55262,        def run(self):
55263,"            self.result = runFunctionCatchExceptions(func, *args, **kwargs)"
55264,    it = InterruptableThread()
55265,    it.start()
55266,    it.join(timeout_duration)
55267,    if it.isAlive():
55268,        return default
55269,
55270,"    if it.result[0] == ""exception"":"
55271,        raise it.result[1]
55272,
55273,    return it.result[1]
55274,"result = timeout(remote_calculate, (myarg,), timeout_duration=5)"
55275,runFunctionCatchExceptions()
55276,eval(2**9999999999**9999999999)
55277,import threading
55278,import signal
55279,import os
55280,import time
55281,
55282,class TerminateExecution(Exception):
55283,"    """""""
55284,    Exception to indicate that execution has exceeded the preset running time.
55285,"    """""""
55286,
55287,
55288,def quit_function(pid):
55289,    # Killing all subprocesses
55290,    os.setpgrp()
55291,"    os.killpg(0, signal.SIGTERM)"
55292,
55293,    # Killing the main thread
55294,"    os.kill(pid, signal.SIGTERM)"
55295,
55296,
55297,"def handle_term(signum, frame):"
55298,    raise TerminateExecution()
55299,
55300,
55301,"def invoke_with_timeout(timeout, fn, *args, **kwargs):"
55302,    # Setting a sigterm handler and initiating a timer
55303,"    old_handler = signal.signal(signal.SIGTERM, handle_term)"
55304,"    timer = threading.Timer(timeout, quit_function, args=[os.getpid()])"
55305,    terminate = False
55306,
55307,    # Executing the function
55308,    timer.start()
55309,    try:
55310,"        result = fn(*args, **kwargs)"
55311,    except TerminateExecution:
55312,        terminate = True
55313,    finally:
55314,        # Restoring original handler and cancel timer
55315,"        signal.signal(signal.SIGTERM, old_handler)"
55316,        timer.cancel()
55317,
55318,    if terminate:
55319,"        raise BaseException(""xxx"")"
55320,
55321,    return result
55322,
55323,### Test cases
55324,def countdown(n):
55325,"    print('countdown started', flush=True)"
55326,"    for i in range(n, -1, -1):"
55327,"        print(i, end=', ', flush=True)"
55328,        time.sleep(1)
55329,    print('countdown finished')
55330,    return 1337
55331,
55332,
55333,def really_long_function():
55334,    time.sleep(10)
55335,
55336,
55337,def really_long_function2():
55338,"    os.system(""sleep 787"")"
55339,
55340,
55341,# Checking that we can run a function as expected.
55342,"assert invoke_with_timeout(3, countdown, 1) == 1337"
55343,
55344,# Testing various scenarios
55345,t1 = time.time()
55346,try:
55347,"    print(invoke_with_timeout(1, countdown, 3))"
55348,    assert(False)
55349,except BaseException:
55350,    assert(time.time() - t1 < 1.1)
55351,"    print(""All good"", time.time() - t1)"
55352,
55353,t1 = time.time()
55354,try:
55355,"    print(invoke_with_timeout(1, really_long_function2))"
55356,    assert(False)
55357,except BaseException:
55358,    assert(time.time() - t1 < 1.1)
55359,"    print(""All good"", time.time() - t1)"
55360,
55361,
55362,t1 = time.time()
55363,try:
55364,"    print(invoke_with_timeout(1, really_long_function))"
55365,    assert(False)
55366,except BaseException:
55367,    assert(time.time() - t1 < 1.1)
55368,"    print(""All good"", time.time() - t1)"
55369,
55370,# Checking that classes are referenced and not
55371,# copied (as would be the case with multiprocessing)
55372,
55373,
55374,class X:
55375,    def __init__(self):
55376,        self.value = 0
55377,
55378,"    def set(self, v):"
55379,        self.value = v
55380,
55381,
55382,x = X()
55383,"invoke_with_timeout(2, x.set, 9)"
55384,assert x.value == 9
55385,import multiprocessing
55386,import time
55387,
55388,"ret = {""foo"": False}"
55389,
55390,
55391,def worker(queue):
55392,"    """"""worker function"""""""
55393,
55394,    ret = queue.get()
55395,
55396,    time.sleep(1)
55397,
55398,"    ret[""foo""] = True"
55399,    queue.put(ret)
55400,
55401,
55402,"if __name__ == ""__main__"":"
55403,    queue = multiprocessing.Queue()
55404,    queue.put(ret)
55405,
55406,"    p = multiprocessing.Process(target=worker, args=(queue,))"
55407,    p.start()
55408,    p.join(timeout=10)
55409,
55410,    if p.exitcode is None:
55411,"        print(""The worker timed out."")"
55412,    else:
55413,"        print(f""The worker completed and returned: {queue.get()}"")"
55414,C:\Python34> python get-pip.py
55415,Requirement already up-to-date: pip in c:\python34\lib\site-packages
55416,Cleaning up...
55417,
55418,C:\Python34> pip install Django
55419,"'pip' is not recognized as an internal or external command,"
55420,operable program or batch file.
55421,
55422,C:\Python34> lib\site-packages\pip install Django
55423,"'lib\site-packages\pip' is not recognized as an internal or external command,"
55424,operable program or batch file.
55425,echo %PATH%
55426,C:\Python34>echo %PATH%
55427,C:\Program Files\ImageMagick-6.8.8-Q16;C:\Program Files (x86)\Intel\iCLS Client\
55428,;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\S
55429,ystem32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\
55430,Windows Live\Shared;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x86;C:\Progr
55431,am Files (x86)\Intel\OpenCL SDK\2.0\bin\x64;C:\Program Files\Intel\Intel(R) Mana
55432,gement Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine C
55433,omponents\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components
55434,\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\P
55435,rogram Files (x86)\nodejs\;C:\Program Files (x86)\Heroku\bin;C:\Program Files (x
55436,86)\git\cmd;C:\RailsInstaller\Ruby2.0.0\bin;C:\RailsInstaller\Git\cmd;C:\RailsIn
55437,staller\Ruby1.9.3\bin;C:\Users\Javi\AppData\Roaming\npm
55438,"setx PATH ""%PATH%;C:\pip"""
55439,C:\Python34\Scripts\pip
55440,echo %PATH%
55441,setx
55442,"setx PATH ""%PATH%;C:\Python34\Scripts"""
55443,python -m pip install [packagename]
55444,-m
55445,'python' is not recognized
55446,start %appdata%
55447,../AppData/Roaming
55448,Local/Programs/Python/Python37-32/Scripts
55449,pip
55450,set PATH=%PATH%;C:\Python34\Scripts
55451,PATH
55452,set
55453,setx
55454,py -m
55455,py -m <command>
55456,py -m pip install --upgrade pip setuptools
55457,pip
55458,py
55459,-m
55460,py -3 -m pip install xxxxx
55461,C:\python27\scripts\pip.exe install [package].whl
55462,python -m ensurepip --default-pip
55463,C:\Python33\Scripts
55464,pip
55465,pip.exe install -package-
55466,pip install -package-
55467,python -m pip install openpyxl
55468,set Path = `%PATH%;C:\Python34\;C:\Python27\Scripts`
55469,cd C:\Users\{user}\PycharmProjects\test\venv\Scripts
55470,pip install ..
55471,cmd.exe
55472,python -m pip install --user [name of your module here without brackets]
55473,pip install django
55474,pip3
55475,pip3 install pandas
55476,where python
55477,set PATH=%PATH%;<PYTHON_HOME>\Scripts
55478,which python
55479,PYTHON_HOME/Scripts
55480,PATH=$PATH:<PYTHON_HOME>\Scripts
55481,export PATH
55482,python -m pip install -U pip
55483,  py -m pip
55484,C:\Python27\Scripts
55485,"[Environment]::SetEnvironmentVariable(""Path"", ""$env:Path;C:\Python27\Scripts"", ""User"")"
55486,C:\Users\username\AppData\Local\Programs\Python38
55487,...Python34\Scripts
55488,pip install pygame
55489,pip
55490,pip3
55491,pip3.4
55492,pip3.4 install pygame .... .whl
55493,pygame...whl
55494,Workaround
55495,Copy the following files:
55496,
55497,libssl-1_1-x64.dll
55498,libcrypto-1_1-x64.dll
55499,
55500,from the folder 
55501,C:\Program Files\Microsoft SQL Server\MSSSQL15.MSSQLSERVER\PYTHON_SERVICES\Library\bin
55502,to the folder 
55503,C:\Program Files\Microsoft SQL Server\MSSSQL15.MSSQLSERVER\PYTHON_SERVICES\DLLs
55504,
55505,Then open a new DOS command shell prompt.
55506,pip install
55507,SyntaxError
55508,>>> pip install selenium
55509,              ^
55510,SyntaxError: invalid syntax
55511,>>> pip install selenium
55512,import selenium
55513,pip
55514,C:\Python32\scripts
55515,PATH
55516,C:\Program Files\Python2.7\Scripts> pip install XYZ
55517,$ pip install XYZ
55518,PATH
55519,%APPDATA%
55520,"subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'SomeProject'])"
55521,get_installed_distributions()
55522,main
55523,import pip
55524,import pip._internal as pip
55525,get_installed_distributions()
55526,freeze
55527,from pip._internal.operations.freeze import freeze
55528,
55529,print([package for package in freeze()])
55530,
55531,# eg output ['pip==19.0.3']
55532,import pip
55533,
55534,"package_names=['selenium', 'requests'] #packages to install"
55535,pip.main(['install'] + package_names + ['--upgrade']) 
55536,# --upgrade to install or update existing packages
55537,import pip
55538,
55539,for i in pip.get_installed_distributions():
55540,"    pip.main(['install', i.key, '--upgrade'])"
55541,pip.main([])
55542,import pip
55543,
55544,package_names = [i.key for i in pip.get_installed_distributions()]
55545,pip.main(['install'] + package_names + ['--upgrade'])
55546,-r
55547,--requirement
55548,"pip.main(['install', '-r', 'filename'])"
55549,--help
55550,pip.exe
55551,pip.exe
55552,pip3.exe
55553,__main__.py
55554,# -*- coding: utf-8 -*-
55555,import re
55556,import sys
55557,
55558,from pip import main
55559,
55560,if __name__ == '__main__':
55561,"    sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])"
55562,    sys.exit(main())
55563,python -m pip install SomePackage
55564,pip
55565,C:\Users\fhhz\AppData\Local\Programs\Python\Python38\
55566,C:\Users\fhhz\AppData\Local\Programs\Python\Python38\Scripts
55567,pip install <<package-name>>
55568,pip install spyder
55569,>>>from pip.__main__ import _main as main
55570,">>>main(#args splitted by space in list example:['install', 'requests'])"
55571,pip <commands>
55572,ImportError: cannot import name main
55573,from pip._internal import main as _main
55574,
55575,package_names=['pandas'] #packages to install
55576,_main(['install'] + package_names + ['--upgrade']) 
55577,UnicodeEncodeError
55578,"agent_telno = agent.find('div', 'agent_contact_number')"
55579,agent_telno = '' if agent_telno is None else agent_telno.contents[0]
55580,p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
55581,Traceback (most recent call last):
55582,"  File ""foobar.py"", line 792, in <module>"
55583,    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
55584,UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)
55585,"import os; import locale;  os.environ[""PYTHONIOENCODING""] = ""utf-8""; myLocale=locale.setlocale(category=locale.LC_ALL, locale=""en_GB.UTF-8""); ... print(myText.encode('utf-8', errors='ignore'))"
55586,$ export PYTHONIOENCODING=utf8
55587,str()
55588,.encode()
55589,"p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()"
55590,print
55591,UnicodeEncodeError
55592,sys.stdout.encoding
55593,None
55594,.encode('utf-8')
55595,PYTHONIOENCODING=utf-8
55596,.encode()
55597,a = u'bats\u00E0'
55598,print a
55599, => batsà
55600,str(a)
55601,Traceback (most recent call last):
55602,"  File ""<stdin>"", line 1, in <module>"
55603,UnicodeEncodeError: 'ascii' codec can't encode character u'\xe0' in position 4: ordinal not in range(128)
55604,a.encode('utf-8')
55605, => 'bats\xc3\xa0'
55606,print a.encode('utf-8')
55607, => batsà
55608,None
55609,"yourstring = yourstring.encode('ascii', 'ignore').decode('ascii')"
55610,">>> u'City: Malmö'.encode('ascii', 'ignore').decode('ascii')"
55611,'City: Malm'
55612,"yourstring = yourstring.encode('utf-8', 'ignore').decode('utf-8')"
55613,os.path.join()
55614,# encoding=utf8
55615,import sys
55616,reload(sys)
55617,sys.setdefaultencoding('utf8')
55618,if sys.version_info.major < 3:
55619,$ echo $LANG
55620,en_US.utf8
55621,$ echo $LC_ALL 
55622,C
55623,"$ python -c ""print (u'voil\u00e0')"""
55624,Traceback (most recent call last):
55625,"  File ""<string>"", line 1, in <module>"
55626,UnicodeEncodeError: 'ascii' codec can't encode character u'\xe0' in position 4: ordinal not in range(128)
55627,$ export LC_ALL='en_US.utf8'
55628,"$ python -c ""print (u'voil\u00e0')"""
55629,voilà
55630,$ unset LC_ALL
55631,"$ python -c ""print (u'voil\u00e0')"""
55632,voilà
55633,env|grep -E '(LC|LANG)'
55634,mc
55635,Ctrl-O
55636,"alias mc=""LANG=en_EN.UTF-8 mc"""
55637,ru_RU.UTF-8
55638,language-pack-en
55639,sudo apt-get install language-pack-en
55640,"open(foo, encoding='utf-8')"
55641,/etc/default/locale
55642,"LANG=""en_US.UTF-8"""
55643,"LC_ALL=""en_US.UTF-8"""
55644,LC_ALL=C.UTF-8
55645,LANG=C.UTF-8
55646,LANG
55647,LC_CTYPE
55648,"locale -a | grep ""UTF-8"""
55649,vagrant
55650,vagrant init ubuntu/trusty64; vagrant up; vagrant ssh
55651,™
55652,"$ python -c 'print(u""\u2122"");'"
55653,Traceback (most recent call last):
55654,"  File ""<string>"", line 1, in <module>"
55655,UnicodeEncodeError: 'ascii' codec can't encode character u'\u2122' in position 0: ordinal not in range(128)
55656,language-pack-en
55657,$ sudo apt-get -y install language-pack-en
55658,The following extra packages will be installed:
55659,  language-pack-en-base
55660,Generating locales...
55661,  en_GB.UTF-8... /usr/sbin/locale-gen: done
55662,Generation complete.
55663,"$ python -c 'print(u""\u2122"");'"
55664,™
55665,"$ LC_ALL=C.UTF-8 python -c 'print(u""\u2122"");'"
55666,™
55667,language-pack-en
55668,/etc/locale.gen
55669,LANG
55670,/etc/default/locale
55671,/etc/locale.gen
55672,locale-gen
55673,language-pack-en
55674,LANG
55675,LC_CTYPE
55676,LC_ALL
55677,LANG=C.UTF-8
55678,"locale -a | grep ""UTF-8"""
55679,export LC_ALL=$(locale -a | grep UTF-8)
55680,export LC_ALL=C.UTF-8
55681,™
55682,"python -c 'print(u""\u2122"");'"
55683,"s = mystring.decode('ascii', 'ignore')"
55684,"BeautifulSoup(html_text,from_encoding=""utf-8"")"
55685,def safeStr(obj):
55686,    try: return str(obj)
55687,    except UnicodeEncodeError:
55688,"        return obj.encode('ascii', 'ignore').decode('ascii')"
55689,"    except: return """""
55690,if __name__ == '__main__': 
55691,    print safeStr( 1 ) 
55692,"    print safeStr( ""test"" ) "
55693,    print u'98\xb0'
55694,    print safeStr( u'98\xb0' )
55695,1
55696,test
55697,98°
55698,98
55699,def safeStr(obj):
55700,"    try: return str(obj).encode('ascii', 'ignore').decode('ascii')"
55701,"    except: return """""
55702,?
55703,replace
55704,ignore
55705,toAscii
55706,six
55707,replace
55708,"from six import PY2, iteritems "
55709,
55710,"CHAR_SWAP = { u'\u201c': u'""'"
55711,"            , u'\u201D': u'""' "
55712,"            , u'\u2018': u""'"" "
55713,"            , u'\u2019': u""'"" "
55714,}
55715,
55716,def toAscii( text ) :    
55717,    try:
55718,"        for k,v in iteritems( CHAR_SWAP ): "
55719,"            text = text.replace(k,v)"
55720,    except: pass     
55721,"    try: return str( text ) if PY2 else bytes( text, 'replace' ).decode('ascii')"
55722,    except UnicodeEncodeError:
55723,"        return text.encode('ascii', 'replace').decode('ascii')"
55724,"    except: return """""
55725,
55726,if __name__ == '__main__':     
55727,    print( toAscii( u'testin\u2019' ) )
55728,# -*- coding: utf-8 -*-
55729,# -*- coding: utf-8 -*-
55730,from __future__ import unicode_literals
55731,"export LC_CTYPE=""en_US.UTF-8"""
55732,import os
55733,import locale
55734,"os.environ[""PYTHONIOENCODING""] = ""utf-8"""
55735,"myLocale=locale.setlocale(category=locale.LC_ALL, locale=""en_GB.UTF-8"")"
55736,... 
55737,"print(myText.encode('utf-8', errors='ignore'))"
55738,"def safe_unicode(obj, *args):"
55739,"    """""" return the unicode representation of obj """""""
55740,    try:
55741,"        return unicode(obj, *args)"
55742,    except UnicodeDecodeError:
55743,        # obj is byte string
55744,        ascii_text = str(obj).encode('string_escape')
55745,        return unicode(ascii_text)
55746,
55747,def safe_str(obj):
55748,"    """""" return the byte string representation of obj """""""
55749,    try:
55750,        return str(obj)
55751,    except UnicodeEncodeError:
55752,        # obj is unicode
55753,        return unicode(obj).encode('unicode_escape')
55754,backslashreplace
55755,"u'\xa0'.encode('ascii', 'backslashreplace')"
55756,agent_contact.encode('utf-8')
55757,"export LC_ALL=""en_US.UTF-8"""
55758,import unicodedata
55759,"message = unicodedata.normalize(""NFKD"", message)"
55760,python3
55761,import sys
55762,import io
55763,
55764,"sys.stdout = io.open(sys.stdout.fileno(), 'w', encoding='utf8')"
55765,"print(""é, à, ..."")"
55766,export PYTHONIOENCODING=UTF-8
55767,"result_html = result.to_html(col_space=1, index=False, justify={'right'})"
55768,
55769,"text = u"""""""
55770,<html>
55771,<body>
55772,<p>
55773,"Hello all, <br>"
55774,<br>
55775,Here's weekly summary report.  Let me know if you have any questions. <br>
55776,<br>
55777,Data Summary <br>
55778,<br>
55779,<br>
55780,{0}
55781,</p>
55782,"<p>Thanks,</p>"
55783,<p>Data Team</p>
55784,</body></html>
55785,""""""".format(result_html)"
55786,data_that_causes_this_error
55787,results.txt
55788,"f = open(""results.txt"", ""w"")"
55789,  f.write(data_that_causes_this_error.encode('utf-8'))
55790,  f.close()
55791,# 'value' contains the problematic data
55792,unic = u''
55793,unic += value
55794,value = unic
55795,type
55796,unic += value
55797,unic = unic + value
55798,unic
55799,a = float(1) + int(1)
55800,a
55801,value = unic
55802,value
55803,unic
55804,manage.py migrate
55805,# -*- coding: utf-8 -*-
55806,/etc/default/locale
55807,LANG
55808,LANG
55809,en_US.UTF-8
55810,locale-gen en_US.UTF-8
55811,export LANG=en_US.UTF-8 LANGUAGE=en_US.en
55812,LC_ALL=en_US.UTF-8
55813,"s = s.encode('ascii',errors='ignore')"
55814,try: 
55815,    data=str(data)
55816,except:
55817,    data = data #Don't convert to String
55818,"packet_data = ""This is data"""
55819,packet_data
55820,unic = u''
55821,packet_data = unic
55822,stdout
55823,sys.stdout.write
55824,import sys
55825,import codecs
55826,
55827,"def main(fIn, fOut):"
55828,    soup = BeautifulSoup(fIn)
55829,"    # Do processing, with data including non-ASCII characters"
55830,    fOut.write(unicode(soup))
55831,
55832,if __name__ == '__main__':
55833,    with (sys.stdin) as fIn: # Don't think we need codecs.getreader here
55834,        with codecs.getwriter('utf-8')(sys.stdout) as fOut:
55835,"            main(fIn, fOut)"
55836,"print("" \{ Hello \} {0} "".format(42))"
55837, {Hello} 42 
55838,{{ }}
55839,string.Template
55840,$foo
55841,{{
55842,}}
55843,">>> x = "" {{ Hello }} {0} """
55844,>>> print(x.format(42))
55845,' { Hello } 42 '
55846,{}
55847,{{
55848,}}
55849,"""{{{0}}}"".format(42)"
55850,"""{ something { } {value}"".format(42)"
55851,{0}
55852,{0}
55853,.format()
55854,{0} {1} {2}
55855,.format()
55856,{{
55857,}}
55858,n = 42  
55859,"print(f"" {{Hello}} {n} "")"
55860, {Hello} 42
55861,"hello = ""HELLO"""
55862,"print(f""{{{hello.lower()}}}"")"
55863,{hello}
55864,"my_greet = ""HELLO"""
55865,{hello}
55866,"print(f""{ {my_greet.lower()} }"")"
55867,str.format()
55868,this is the way
55869,str.format()
55870,"x = ""{{ Hello }} {0}"""
55871,print(x.format(42))
55872,"'{""all"": false, ""selected"": ""{}""}'.format(data)"
55873,"{""all"": false, ""selected"": ""1,2""}"
55874,import json
55875,"data = ""1,2"""
55876,"mydict = {""all"": ""false"", ""selected"": data}"
55877,json.dumps(mydict)
55878,"'{{""all"": false, ""selected"": ""{}""}}'.format(data)"
55879,json
55880,"data = 'foo""'"
55881,""""
55882,data
55883,{
55884,}
55885,{
55886,f'{{'
55887,}
55888,f'}}'
55889,"name = ""bob"""
55890,print(f'Hello {name} ! I want to print }} and {{')
55891,"x = ""{{ Hello }} {0}"""
55892,"x = "" {{ Hello }} {0} """
55893,print x.format(42)
55894,>>> x = '{}Hello{} {}'
55895,">>> print x.format('{','}',42)"
55896,{Hello} 42
55897,{argument}
55898,'{{{}}}'.format('argument')
55899,{}
55900,{0}
55901,>>> myvar = 'test'
55902,">>> ""{{{{{0}}}}}"".format(myvar)"
55903,'{{test}}'
55904,a = 1; print('{{{{{a}}}}}'.format(a=a))
55905,a = 1; print(f'{{{{{a}}}}}')
55906,number = 42
55907,"print("" { Hello }""  "
55908,"f"" {number} "" "
55909,"""{ thanks for all the fish }"")"
55910,
55911,### OUTPUT:
55912,{ Hello } 42 { thanks for all the fish }
55913,"print(""{Hello}""f""{number}""""{thanks for all the fish}"")"
55914,"key = ""FOOBAR"""
55915,"print(f""hello {{{key}}}"")"
55916,hello {FOOBAR}
55917,"def custom_format(string, brackets, *args, **kwargs):"
55918,    if len(brackets) != 2:
55919,        raise ValueError('Expected two brackets. Got {}.'.format(len(brackets)))
55920,"    padded = string.replace('{', '{{').replace('}', '}}')"
55921,"    substituted = padded.replace(brackets[0], '{').replace(brackets[1], '}')"
55922,"    formatted = substituted.format(*args, **kwargs)"
55923,    return formatted
55924,
55925,">>> custom_format('{{[cmd]} process 1}', brackets='[]', cmd='firefox.exe')"
55926,'{{firefox.exe} process 1}'
55927,def preformat(msg):
55928,"    """""" allow {{key}} to be used for formatting in text"
55929,    that already uses curly braces.  First switch this into
55930,"    something else, replace curlies with double curlies, and then"
55931,    switch back to regular braces
55932,"    """""""
55933,"    msg = msg.replace('{{', '<<<').replace('}}', '>>>')"
55934,"    msg = msg.replace('{', '{{').replace('}', '}}')"
55935,"    msg = msg.replace('<<<', '{').replace('>>>', '}')"
55936,    return msg
55937,"formatted = preformat("""""""
55938,    {
55939,"        ""foo"": ""{{bar}}"""
55940,"    }"""""").format(bar=""gas"")"
55941,<<<
55942,>>>
55943,"print('{0} {1}'.format('{hello}', '{world}'))"
55944,{hello} {world}
55945,"print(""{} {}"".format(""{hello}"", ""{world}""))"
55946,{}
55947,.format()
55948,.format()
55949,{Hello}
55950,"x = "" {{ Hello }} {0} """
55951,%s
55952,"x = "" { Hello } %s"""
55953,print x%(42)  
55954,a=3
55955,"print(f'{""{""}{a}')"
55956,>>> {3
55957,{
55958,f'{{{a}'
55959,$A_{ 0042 }*A_{ 3141 }*A_{ 2718 }*A_{ 0042 }$
55960,"idx_mapping = {'i1':42, 'i2':3141, 'i3':2178 }"
55961,print('$A_{{ {i1:04d} }} * A_{{ {i2:04d} }} * A_{{ {i3:04d} }} * A_{{ {i1:04d} }}$'.format(**idx_mapping))
55962,"print(f""{Hello} {42}"")"
55963,"print(""{Hello}""f"" {42}"")"
55964,string = 10
55965,"print(f""{string} {word}"")"
55966,NameError: name 'word' is not defined
55967,string = 10
55968,"print(f""{string}"""" {word}"")"
55969,10 {word}
55970,"ports = [1,2,3]"
55971,
55972,"query = f"""""""
55973,   UPDATE table SET ports = '{{{ports}}}' WHERE id = 1
55974,""""""""
55975,"UPDATE table SET ports = '{1,2,3}'"
55976,{
55977,{{
55978,">>> f'{{ there is a curly brace on the left. Oh, and 1 + 1 is {1 + 1}'"
55979,"'{ there is a curly brace on the left. Oh, and 1 + 1 is 2'"
55980,from jinja2 import Template
55981,
55982,foo = Template('''
55983,#include <stdio.h>
55984,
55985,void main() {
55986,"    printf(""hello universe number {{number}}"");"
55987,}
55988,''')
55989,
55990,for i in range(2):
55991,    print(foo.render(number=i))
55992,string.Template
55993,"css_template = f""{{tag}} {'{{'} margin: 0; padding: 0;{'}}'}"""
55994,"for_p = css_template.format(tag=""p"")"
55995,# 'p { margin: 0; padding: 0;}'
55996,"x = '{open_bracket}42{close_bracket}'.format(open_bracket='{', close_bracket='}') "
55997,print(x)
55998,# {42}
55999,x
56000,(x > 1) and (x < 3)
56001,a
56002,b
56003,&
56004,a & b
56005,(a & b).any()
56006,(a & b).all()
56007,a
56008,b
56009,(a - b).any()
56010,(a - b).all()
56011,True
56012,True
56013,True
56014,True
56015,True
56016,ValueError
56017,and
56018,__bool__
56019,__nonzero__
56020,np.all
56021,np.any
56022,np.all
56023,np.any
56024,and
56025,&
56026,(a-b).any()
56027,(a-b).all()
56028,"numpy.logical_and(a, b)"
56029,and
56030,bool
56031,True
56032,x and y
56033,bool(x) and bool(y)
56034,bool
56035,numpy.ndarray
56036,>>> import numpy as np
56037,">>> arr = np.array([1, 2, 3])"
56038,>>> bool(arr)
56039,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
56040,bool()
56041,and
56042,if
56043,while
56044,or
56045,>>> arr and arr
56046,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
56047,
56048,>>> if arr: pass
56049,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
56050,
56051,>>> while arr: pass
56052,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
56053,
56054,>>> arr or arr
56055,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
56056,bool
56057,2 < x < 10
56058,2 < x and x < 10
56059,and
56060,bool
56061,bool(2 < x) and bool(x < 10)
56062,and
56063,np.logical_and
56064,np.logical_or
56065,or
56066,<
56067,<=
56068,==
56069,!=
56070,>=
56071,>
56072,np.bitwise_and
56073,&
56074,">>> np.logical_and(arr > 1, arr < 3)"
56075,"array([False,  True, False], dtype=bool)"
56076,
56077,">>> np.bitwise_and(arr > 1, arr < 3)"
56078,"array([False,  True, False], dtype=bool)"
56079,
56080,>>> (arr > 1) & (arr < 3)
56081,"array([False,  True, False], dtype=bool)"
56082,bitwise_or
56083,|
56084,">>> np.logical_or(arr <= 1, arr >= 3)"
56085,"array([ True, False,  True], dtype=bool)"
56086,
56087,">>> np.bitwise_or(arr <= 1, arr >= 3)"
56088,"array([ True, False,  True], dtype=bool)"
56089,
56090,>>> (arr <= 1) | (arr >= 3)
56091,"array([ True, False,  True], dtype=bool)"
56092,pandas
56093,df = df.dropna()
56094,"if np.array([1,2]): print(1)"
56095,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
56096,"if np.array([1,2])[0]: print(1)"
56097,if np.array([])[0]: print(1)
56098,IndexError: index 0 is out of bounds for axis 0 with size 0
56099,if np.array([1]): print(1)
56100,if np.array([]): print(1)
56101,"DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use 'array.size > 0' to check that an array is not empty."
56102,if np.array([]).size: print(1)
56103,if np.array([]) is not None: print(1)
56104,if np.array([]) is not None: print(1)
56105,if-statement
56106,... code snippet ...
56107,
56108,if dataset == bool:
56109,    ....
56110,
56111,... code snippet ...
56112,True
56113,False
56114,try-statement
56115,except Exception as error:
56116,pixels = []
56117,"self.pixels = numpy.arange(1, 10)"
56118,"self.assertEqual(self.pixels, pixels)"
56119,toList()
56120,pixels = []
56121,"self.pixels = numpy.arange(1, 10).toList()"
56122,"self.assertEqual(self.pixels, pixels)"
56123,"a = np.array([1, 2, 3])"
56124,"b = np.array([2, 3, 4])"
56125,if b >= a:
56126,a
56127,b
56128,b
56129,a
56130,if (b >= a).all():
56131," print(""b is greater than a!"")"
56132,int
56133,string
56134,num = 40
56135,plot.savefig('hanning40.pdf') #problem line
56136,"plot.savefig('hanning', num, '.pdf')"
56137,+
56138,plot.savefig(f'hanning{num}.pdf')
56139,str.format()
56140,plot.savefig('hanning{0}.pdf'.format(num))
56141,plot.savefig('hanning' + str(num) + '.pdf')
56142,plot.savefig('hanning%s.pdf' % num)
56143,plot.savefig('hanning%(num)s.pdf' % locals())
56144,string.Template
56145,plot.savefig(string.Template('hanning${num}.pdf').substitute(locals()))
56146,"'foo %d, bar %d' % (foo, bar)"
56147,plot.savefig('hanning{num}s.pdf'.format(**locals()))
56148,">>> name = ""Fred"""
56149,">>> f""He said his name is {name}."""
56150,'He said his name is Fred.'
56151,plot.savefig(f'hanning{num}.pdf')
56152,plot.savefig('hanning(%d).pdf' % num)
56153,%
56154,%d
56155,printf
56156,%
56157,.format()
56158,%
56159,+
56160,str()
56161,"""hello "" + str(10) + "" world"" == ""hello 10 world"""
56162,+
56163,"stringExample = ""someString "" + str(someNumber)"
56164,print(stringExample)
56165,plot.savefig(stringExample)
56166,format
56167,"nums = [1,2,3]"
56168,plot.savefig('hanning{0}{1}{2}.pdf'.format(*nums))
56169,hanning123.pdf
56170,"['file' + str(i) + '.pdf' for i in range(1,4)]"
56171,str()
56172,f'file{i}.pdf'
56173,"var = {""name"": ""Abdul Jalil"", ""age"": 22}"
56174,"temp_string = ""My name is %(name)s. I am %(age)s years old."" % var"
56175,str
56176,dict
56177,dict
56178,"s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}"""
56179,eval
56180,""""
56181,null
56182,true
56183,false
56184,None
56185,True
56186,False
56187,ast.literal_eval
56188,>>> import ast
56189,">>> ast.literal_eval(""{'muffin' : 'lolz', 'foo' : 'kitty'}"")"
56190,"{'muffin': 'lolz', 'foo': 'kitty'}"
56191,eval
56192,">>> eval(""shutil.rmtree('mongo')"")"
56193,Traceback (most recent call last):
56194,"  File ""<stdin>"", line 1, in <module>"
56195,"  File ""<string>"", line 1, in <module>"
56196,"  File ""/opt/Python-2.6.1/lib/python2.6/shutil.py"", line 208, in rmtree"
56197,"    onerror(os.listdir, path, sys.exc_info())"
56198,"  File ""/opt/Python-2.6.1/lib/python2.6/shutil.py"", line 206, in rmtree"
56199,    names = os.listdir(path)
56200,OSError: [Errno 2] No such file or directory: 'mongo'
56201,">>> ast.literal_eval(""shutil.rmtree('mongo')"")"
56202,Traceback (most recent call last):
56203,"  File ""<stdin>"", line 1, in <module>"
56204,"  File ""/opt/Python-2.6.1/lib/python2.6/ast.py"", line 68, in literal_eval"
56205,    return _convert(node_or_string)
56206,"  File ""/opt/Python-2.6.1/lib/python2.6/ast.py"", line 67, in _convert"
56207,    raise ValueError('malformed string')
56208,ValueError: malformed string
56209,"""dict(a=1)"""
56210,import json
56211,"s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}"""
56212,"json_acceptable_string = s.replace(""'"", ""\"""")"
56213,d = json.loads(json_acceptable_string)
56214,"# d = {u'muffin': u'lolz', u'foo': u'kitty'}"
56215,+1
56216,"""{0: 'Hello'}"""
56217,json.loads
56218,json.loads
56219,json.loads
56220,>>> import json
56221,">>> h = '{""foo"":""bar"", ""foo2"":""bar2""}'"
56222,>>> d = json.loads(h)
56223,>>> d
56224,"{u'foo': u'bar', u'foo2': u'bar2'}"
56225,>>> type(d)
56226,<type 'dict'>
56227,"s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}"""
56228,>>> import yaml
56229,">>> s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}"""
56230,>>> s
56231,"""{'muffin' : 'lolz', 'foo' : 'kitty'}"""
56232,>>> yaml.load(s)
56233,"{'muffin': 'lolz', 'foo': 'kitty'}"
56234,safe_load
56235,"import ast, yaml, json, timeit"
56236,
56237,"descs=['short string','long string']"
56238,"strings=['{""809001"":2,""848545"":2,""565828"":1}','{""2979"":1,""30581"":1,""7296"":1,""127256"":1,""18803"":2,""41619"":1,""41312"":1,""16837"":1,""7253"":1,""70075"":1,""3453"":1,""4126"":1,""23599"":1,""11465"":3,""19172"":1,""4019"":1,""4775"":1,""64225"":1,""3235"":2,""15593"":1,""7528"":1,""176840"":1,""40022"":1,""152854"":1,""9878"":1,""16156"":1,""6512"":1,""4138"":1,""11090"":1,""12259"":1,""4934"":1,""65581"":1,""9747"":2,""18290"":1,""107981"":1,""459762"":1,""23177"":1,""23246"":1,""3591"":1,""3671"":1,""5767"":1,""3930"":1,""89507"":2,""19293"":1,""92797"":1,""32444"":2,""70089"":1,""46549"":1,""30988"":1,""4613"":1,""14042"":1,""26298"":1,""222972"":1,""2982"":1,""3932"":1,""11134"":1,""3084"":1,""6516"":1,""486617"":1,""14475"":2,""2127"":1,""51359"":1,""2662"":1,""4121"":1,""53848"":2,""552967"":1,""204081"":1,""5675"":2,""32433"":1,""92448"":1}']"
56239,"funcs=[json.loads,eval,ast.literal_eval,yaml.load]"
56240,
56241,"for  desc,string in zip(descs,strings):"
56242,"    print('***',desc,'***')"
56243,    print('')
56244,    for  func in funcs:
56245,        print(func.__module__+' '+func.__name__+':')
56246,        %timeit func(string)        
56247,    print('')
56248,*** short string ***
56249,
56250,json loads:
56251,"4.47 µs ± 33.4 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
56252,builtins eval:
56253,"24.1 µs ± 163 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
56254,ast literal_eval:
56255,"30.4 µs ± 299 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
56256,yaml load:
56257,"504 µs ± 1.29 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
56258,
56259,*** long string ***
56260,
56261,json loads:
56262,"29.6 µs ± 230 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
56263,builtins eval:
56264,"219 µs ± 3.92 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
56265,ast literal_eval:
56266,"331 µs ± 1.89 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
56267,yaml load:
56268,"9.02 ms ± 92.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
56269,json
56270,eval
56271,literal_eval
56272,json
56273,ast
56274,Ast
56275,json
56276,"string = ""{'server1':'value','server2':'value'}"""
56277,
56278,#Now removing { and }
56279,"s = string.replace(""{"" ,"""")"
56280,"finalstring = s.replace(""}"" , """")"
56281,
56282,"#Splitting the string based on , we get key value pairs"
56283,"list = finalstring.split("","")"
56284,
56285,dictionary ={}
56286,for i in list:
56287,    #Get Key Value pairs separately to store in dictionary
56288,"    keyvalue = i.split("":"")"
56289,
56290,    #Replacing the single quotes in the leading.
56291,    m= keyvalue[0].strip('\'')
56292,"    m = m.replace(""\"""", """")"
56293,"    dictionary[m] = keyvalue[1].strip('""\'')"
56294,
56295,print dictionary
56296,{
56297,}
56298,dict
56299,","
56300,"dict_format_string = ""{'1':'one', '2' : 'two'}"""
56301,d = {}
56302,"elems  = filter(str.isalnum,dict_format_string.split(""'""))"
56303,values = elems[1::2]
56304,keys   = elems[0::2]
56305,"d.update(zip(keys,values))"
56306,"split(""'"")"
56307,filter()
56308,list()
56309,"s = s.replace(""{"", """").replace(""}"", """").split("","")"
56310,            
56311,dictionary = {}
56312,
56313,for i in s:
56314,"    dictionary[i.split("":"")[0].strip('\'').replace(""\"""", """")] = i.split("":"")[1].strip('""\'')"
56315,            
56316,print(dictionary)
56317,import sys
56318,
56319,"print(""\n"".join(sys.argv))"
56320,sys.argv
56321,sys.argv[0]
56322,import sys
56323,print(sys.argv[1:])
56324,sys.argv[1:]
56325,argparse
56326,from argparse import ArgumentParser
56327,
56328,parser = ArgumentParser()
56329,"parser.add_argument(""-f"", ""--file"", dest=""filename"","
56330,"                    help=""write report to FILE"", metavar=""FILE"")"
56331,"parser.add_argument(""-q"", ""--quiet"","
56332,"                    action=""store_false"", dest=""verbose"", default=True,"
56333,"                    help=""don't print status messages to stdout"")"
56334,
56335,args = parser.parse_args()
56336,argparse
56337,optparse
56338,argparse
56339,allow_interspersed_args
56340,add_argument()
56341,STORE_ACTIONS
56342,CHECK_METHODS
56343,-f
56344,--foo
56345,argparse
56346,optparse
56347,# script.py
56348,import argparse
56349,
56350,if __name__ == '__main__':
56351,    parser = argparse.ArgumentParser()
56352,    parser.add_argument(
56353,"        'integers', metavar='int', type=int, choices=range(10),"
56354,"         nargs='+', help='an integer in the range 0..9')"
56355,    parser.add_argument(
56356,"        '--sum', dest='accumulate', action='store_const', const=sum,"
56357,"        default=max, help='sum the integers (default: find the max)')"
56358,
56359,    args = parser.parse_args()
56360,    print(args.accumulate(args.integers))
56361,$ script.py 1 2 3 4
56362,4
56363,
56364,$ script.py --sum 1 2 3 4
56365,10
56366,import sys
56367,
56368,first_name = sys.argv[1]
56369,last_name = sys.argv[2]
56370,"print(""Hello "" + first_name + "" "" + last_name)"
56371,python main.py James Smith
56372,"python main.py ""James Smith"""
56373,James Smith
56374,sys.argv[1]
56375,IndexError
56376,sys.argv[2]
56377,"python main.py ""James Joseph Smith"""
56378,gmail-trash-msg.py MessageID
56379,MessageID
56380,sys.argv[1]
56381,sys.argv
56382,import sys
56383,
56384,for arg in sys.argv:
56385,    print arg
56386,"""""""Naval Fate."
56387,
56388,Usage:
56389,  naval_fate.py ship new <name>...
56390,  naval_fate.py ship <name> move <x> <y> [--speed=<kn>]
56391,  naval_fate.py ship shoot <x> <y>
56392,  naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]
56393,  naval_fate.py (-h | --help)
56394,  naval_fate.py --version
56395,
56396,Options:
56397,  -h --help     Show this screen.
56398,  --version     Show version.
56399,  --speed=<kn>  Speed in knots [default: 10].
56400,  --moored      Moored (anchored) mine.
56401,  --drifting    Drifting mine.
56402,
56403,""""""""
56404,from docopt import docopt
56405,
56406,
56407,if __name__ == '__main__':
56408,"    arguments = docopt(__doc__, version='Naval Fate 2.0')"
56409,    print(arguments)
56410,"#set default args as -h , if no args:"
56411,"if len(sys.argv) == 1: sys.argv[1:] = [""-h""]"
56412,"def geocode(s, api_key='', geocoder='google', list_geocoders=False):"
56413,    Options:
56414,"      -h, --help            show this help message and exit"
56415,"      -l, --list-geocoders"
56416,"      -a API_KEY, --api-key=API_KEY"
56417,"      -g GEOCODER, --geocoder=GEOCODER"
56418,try:
56419,"    opts, args = getopt.getopt(sys.argv[1:], 'h', ['help'])"
56420,"except getopt.GetoptError, err: "
56421,    usage(err)
56422,
56423,"for opt, arg in opts:"
56424,"    if opt in ('-h', '--help'): "
56425,        usage()
56426,
56427,if len(args) != 1:
56428,"    usage(""specify thing..."")"
56429,import argparse
56430,
56431,parser = argparse.ArgumentParser(description='Process some integers.')
56432,"parser.add_argument('integers', metavar='N', type=int, nargs='+',"
56433,                   help='an integer for the accumulator')
56434,"parser.add_argument('--sum', dest='accumulate', action='store_const',"
56435,"                   const=sum, default=max,"
56436,                   help='sum the integers (default: find the max)')
56437,
56438,args = parser.parse_args()
56439,print(args.accumulate(args.integers))
56440,
56441,Assuming the Python code above is saved into a file called prog.py
56442,$ python prog.py -h
56443,
56444,Ref-link: https://docs.python.org/3.3/library/argparse.html
56445,import argh
56446,
56447,# declaring:
56448,
56449,def echo(text):
56450,"    ""Returns given word as is."""
56451,    return text
56452,
56453,"def greet(name, greeting='Hello'):"
56454,"    ""Greets the user with given name. The greeting is customizable."""
56455,"    return greeting + ', ' + name"
56456,
56457,# assembling:
56458,
56459,parser = argh.ArghParser()
56460,"parser.add_commands([echo, greet])"
56461,
56462,# dispatching:
56463,
56464,if __name__ == '__main__':
56465,    parser.dispatch()
56466,argh
56467,sys
56468,argh
56469,def frobnicate_spleches(...)
56470,if __name__ == '__main__': argh.dispatch_command(frobnicate_spleches)
56471,try:
56472,"   _, arg1, arg2, arg3, *_ = sys.argv + [None] * 2"
56473,except ValueError:
56474,"   print(""Not enough arguments"", file=sys.stderr) # unhandled exception traceback is meaningful enough also"
56475,   exit(-1)
56476,argv
56477,arg2
56478,arg3
56479,argv
56480,Traceback (most recent call last):
56481,"  File ""test.py"", line 3, in <module>"
56482,"    _, arg1, arg2, arg3, *_ = sys.argv + [None] * 2"
56483,"ValueError: not enough values to unpack (expected at least 4, got 3)"
56484,from entrypoint2 import entrypoint
56485,@entrypoint
56486,"def add(file, quiet=True): "
56487,    ''' This function writes report.
56488,
56489,    :param file: write report to FILE
56490,    :param quiet: don't print status messages to stdout
56491,    '''
56492,"    print file,quiet"
56493,usage: report.py [-h] [-q] [--debug] file
56494,
56495,This function writes report.
56496,
56497,positional arguments:
56498,  file         write report to FILE
56499,
56500,optional arguments:
56501,"  -h, --help   show this help message and exit"
56502,"  -q, --quiet  don't print status messages to stdout"
56503,  --debug      set logging level to DEBUG
56504,import sys
56505,
56506,# Command line arguments are stored into sys.argv
56507,# print(sys.argv[1:])
56508,
56509,# I used the slice [1:] to print all the elements except the first
56510,# This because the first element of sys.argv is the program name
56511,"# So the first argument is sys.argv[1], the second is sys.argv[2] ecc"
56512,
56513,"print(""File name: "" + sys.argv[0])"
56514,"print(""Arguments:"")"
56515,for i in sys.argv[1:]:
56516,    print(i)
56517,command_line.py
56518,C:\Users\simone> python command_line.py arg1 arg2 arg3 ecc
56519,File name: command_line.py
56520,Arguments:
56521,arg1
56522,arg2
56523,arg3
56524,ecc
56525,sum.py
56526,import sys
56527,
56528,try:
56529,"    print(sum(map(float, sys.argv[1:])))"
56530,except:
56531,"    print(""An error has occurred"")"
56532,C:\Users\simone> python sum.py 10 4 6 3
56533,23
56534,import sys
56535,
56536,# [IN] argv - array of args
56537,# [IN] switch - switch to seek
56538,# [IN] val - expecting value
56539,# [IN] alt - switch alternative
56540,# returns value or True if val not expected
56541,"def parse_cmd(argv,switch,val=None,alt=None):"
56542,"    for idx, x in enumerate(argv):"
56543,        if x == switch or x == alt:
56544,            if val:
56545,                if len(argv) > (idx+1):            
56546,                    if not argv[idx+1].startswith('-'):
56547,                        return argv[idx+1]
56548,            else:
56549,                return True
56550,
56551,//expecting a value for -i
56552,"i = parse_cmd(sys.argv[1:],""-i"", True, ""--input"")"
56553,
56554,//no value needed for -p
56555,"p = parse_cmd(sys.argv[1:],""-p"")"
56556,#
56557,#----------------------------------------------------------------------
56558,#
56559,# file name: test.py
56560,#
56561,# input values: data  - location of data to be processed
56562,#               date  - date data were delivered for processing
56563,#               study - name of the study where data originated
56564,#               logs  - location where log files should be written 
56565,#
56566,# macOS usage: 
56567,#
56568,"#   python3 test.py ""/Users/lawrence/data"" ""20220518"" ""XYZ123"" ""/Users/lawrence/logs"""
56569,#
56570,# Windows usage: 
56571,#
56572,"#   python test.py ""D:\data"" ""20220518"" ""XYZ123"" ""D:\logs"""
56573,#
56574,#----------------------------------------------------------------------
56575,#
56576,# import needed modules...
56577,#
56578,import sys
56579,import datetime
56580,
56581,def main(argv):
56582,
56583,   #
56584,   # print message that process is starting...
56585,   #
56586,"   print(""test process starting at"", datetime.datetime.now().strftime(""%Y%m%d %H:%M""))"
56587,
56588,   #
56589,   # set local values from input values...
56590,   #
56591,   data = sys.argv[1]
56592,   date = sys.argv[2]
56593,   study = sys.argv[3]
56594,   logs = sys.argv[4]
56595,
56596,   #
56597,   # print input arguments...
56598,   #
56599,"   print(""data value is"", data)"
56600,"   print(""date value is"", date)"
56601,"   print(""study value is"", study)"
56602,"   print(""logs value is"", logs)"
56603,
56604,   #
56605,   # print message that process is ending...
56606,   #
56607,"   print(""test process ending at"", datetime.datetime.now().strftime(""%Y%m%d %H:%M""))"
56608,
56609,#
56610,# call main() to begin processing...
56611,#
56612,
56613,if __name__ == '__main__':
56614,
56615,   main(sys.argv)
56616,"$ python3 test.py ""/Users/lawrence/data"" ""20220518"" ""XYZ123"" ""/Users/lawrence/logs"""
56617,test process starting at 20220518 16:51
56618,data value is /Users/lawrence/data
56619,date value is 20220518
56620,study value is XYZ123
56621,logs value is /Users/lawrence/logs
56622,test process ending at 20220518 16:51
56623,"D:\scripts>python test.py ""D:\data"" ""20220518"" ""XYZ123"" ""D:\logs"""
56624,test process starting at 20220518 17:20
56625,data value is D:\data
56626,date value is 20220518
56627,study value is XYZ123
56628,logs value is D:\logs
56629,test process ending at 20220518 17:20
56630,try
56631,my_path.exists()
56632,my_path.exists()
56633,my_path.is_file()
56634,exists
56635,if file_exists: open_it()
56636,try
56637,os.path.isfile
56638,True
56639,import os.path
56640,os.path.isfile(fname) 
56641,pathlib
56642,pathlib2
56643,from pathlib import Path
56644,
56645,"my_file = Path(""/path/to/file"")"
56646,if my_file.is_file():
56647,    # file exists
56648,if my_file.is_dir():
56649,    # directory exists
56650,Path
56651,exists()
56652,if my_file.exists():
56653,    # path exists
56654,resolve(strict=True)
56655,try
56656,try:
56657,    my_abs_path = my_file.resolve(strict=True)
56658,except FileNotFoundError:
56659,    # doesn't exist
56660,else:
56661,    # exists
56662,FileNotFoundError
56663,IOError
56664,FileNotFoundError
56665,"open('file', 'r+')"
56666,pathlib2
56667,pathlib
56668,pathlib
56669,pathlib2
56670,'a'
56671,os.path.exists
56672,import os.path
56673,os.path.exists(file_path)
56674,os.path.isfile
56675,os.path.isfile(file_path)
56676,isfile()
56677,exists()
56678,True
56679,isfile()
56680,exists()
56681,">>> os.path.isfile(""/etc/password.txt"")"
56682,True
56683,">>> os.path.isfile(""/etc"")"
56684,False
56685,">>> os.path.isfile(""/does/not/exist"")"
56686,False
56687,">>> os.path.exists(""/etc/password.txt"")"
56688,True
56689,">>> os.path.exists(""/etc"")"
56690,True
56691,">>> os.path.exists(""/does/not/exist"")"
56692,False
56693,import os
56694,
56695,if os.path.isfile(filepath):
56696,"   print(""File exists"")"
56697,os.path.isfile()
56698,os.access()
56699,import os
56700,
56701,PATH = './file.txt'
56702,"if os.path.isfile(PATH) and os.access(PATH, os.R_OK):"
56703,"    print(""File exists and is readable"")"
56704,else:
56705,"    print(""Either the file is missing or not readable"")"
56706,os.access()
56707,import os
56708,import os.path
56709,os
56710,os.path
56711,os.path
56712,os
56713,os.access
56714,os.R_OK
56715,import os
56716,os.path.exists(path) # Returns whether the path (directory or file) exists or not
56717,os.path.isfile(path) # Returns whether the file exists or not
56718,os.path.isfile
56719,os.path.isdir
56720,os.path.lexists
56721,os.path.exists(path)
56722,True
56723,False
56724,False
56725,os.path
56726,def exists(path):
56727,"    """"""Test whether a path exists.  Returns False for broken symbolic links"""""""
56728,    try:
56729,        st = os.stat(path)
56730,    except os.error:
56731,        return False
56732,    return True
56733,os.path.isfile
56734,def is_file(self):
56735,"    """""""
56736,    Whether this path is a regular file (also True for symlinks pointing
56737,    to regular files).
56738,"    """""""
56739,    try:
56740,        return S_ISREG(self.stat().st_mode)
56741,    except OSError as e:
56742,"        if e.errno not in (ENOENT, ENOTDIR):"
56743,            raise
56744,        # Path doesn't exist or is a broken symlink
56745,        # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
56746,        return False
56747,class Swallow:  # Dummy example
56748,"    swallowed_exceptions = (FileNotFoundError,)"
56749,
56750,    def __enter__(self):
56751,"        print(""Entering..."")"
56752,
56753,"    def __exit__(self, exc_type, exc_value, exc_traceback):"
56754,"        print(""Exiting:"", exc_type, exc_value, exc_traceback)"
56755,        return exc_type in Swallow.swallowed_exceptions  # only swallow FileNotFoundError (not e.g. TypeError - if the user passes a wrong argument like None or float or ...)
56756,os.path.isfile
56757,import os
56758,import stat
56759,
56760,
56761,def isfile_seaman(path):  # Dummy func
56762,    result = False
56763,    with Swallow():
56764,        result = stat.S_ISREG(os.stat(path).st_mode)
56765,    return result
56766,os.listdir
56767,os.scandir
56768,glob.glob
56769,os.listdir
56770,os.path.exists
56771,"os.access(""/tmp"", os.F_OK)"
56772,"Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32"
56773,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
56774,">>> import os, ctypes"
56775,">>> ctypes.CDLL(""msvcrt"")._waccess(u""C:\\Windows\\System32\\cmd.exe"", os.F_OK)"
56776,0
56777,">>> ctypes.CDLL(""msvcrt"")._waccess(u""C:\\Windows\\System32\\cmd.exe.notexist"", os.F_OK)"
56778,-1
56779,os.F_OK
56780,"Python 3.5.2 (default, Nov 17 2016, 17:05:23)"
56781,[GCC 5.4.0 20160609] on linux
56782,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
56783,">>> import os, ctypes"
56784,">>> ctypes.CDLL(""/lib/x86_64-linux-gnu/libc.so.6"").access(b""/tmp"", os.F_OK)"
56785,0
56786,">>> ctypes.CDLL(""/lib/x86_64-linux-gnu/libc.so.6"").access(b""/tmp.notexist"", os.F_OK)"
56787,-1
56788,"ctypes.CDLL(None).access(b""/tmp"", os.F_OK)"
56789,__declspec(dllexport)
56790,"(py35x64_test) e:\Work\Dev\StackOverflow\q000082831>""e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe"" -c ""import os; print(os.system('dir /b \""C:\\Windows\\System32\\cmd.exe\"" > nul 2>&1'))"""
56791,0
56792,
56793,"(py35x64_test) e:\Work\Dev\StackOverflow\q000082831>""e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe"" -c ""import os; print(os.system('dir /b \""C:\\Windows\\System32\\cmd.exe.notexist\"" > nul 2>&1'))"""
56794,1
56795,"[cfati@cfati-ubtu16x64-0:~]> python3 -c ""import os; print(os.system('ls \""/tmp\"" > /dev/null 2>&1'))"""
56796,0
56797,"[cfati@cfati-ubtu16x64-0:~]> python3 -c ""import os; print(os.system('ls \""/tmp.notexist\"" > /dev/null 2>&1'))"""
56798,512
56799,glob.iglob
56800,glob.glob
56801,os.scandir
56802,glob
56803,os.path.isdir
56804,os.path.lexists
56805,/
56806,os.path.isdir
56807,os.path.lexist
56808,import pathlib
56809,p = pathlib.Path('path/to/file')
56810,if p.is_file():  # or p.is_dir() to see if it is a directory
56811,    # do stuff
56812,try/except
56813,try:
56814,    with p.open() as f:
56815,        # do awesome stuff
56816,except OSError:
56817,    print('Well darn.')
56818,# installs pathlib2 on older Python versions
56819,"# the original third-party module, pathlib, is no longer maintained."
56820,pip install pathlib2
56821,# Older Python versions
56822,import pathlib2 as pathlib
56823,pathlib.Path.exists
56824,is_file
56825,import os
56826,"fname = ""foo.txt"""
56827,if os.path.isfile(fname):
56828,"    print(""file does exist at this time"")"
56829,else:
56830,"    print(""no such file exists at this time"")"
56831,Path
56832,is_file
56833,>>> from pathlib import Path
56834,>>> Path('/').is_file()
56835,False
56836,>>> Path('/initrd.img').is_file()
56837,True
56838,>>> Path('/doesnotexist').is_file()
56839,False
56840,pathlib2
56841,isfile
56842,os.path
56843,>>> import os
56844,>>> os.path.isfile('/')
56845,False
56846,>>> os.path.isfile('/initrd.img')
56847,True
56848,>>> os.path.isfile('/doesnotexist')
56849,False
56850,try
56851,try
56852,try
56853,Path
56854,pathlib
56855,.exists
56856,>>> from pathlib import Path
56857,>>> root = Path('/')
56858,>>> root.exists()
56859,True
56860,is_file
56861,>>> root.is_file()
56862,False
56863,is_file
56864,is_file(self)
56865,    Whether this path is a regular file (also True for symlinks pointing
56866,    to regular files).
56867,>>> import tempfile
56868,>>> file = tempfile.NamedTemporaryFile()
56869,>>> filepathobj = Path(file.name)
56870,>>> filepathobj.is_file()
56871,True
56872,>>> filepathobj.exists()
56873,True
56874,NamedTemporaryFile
56875,>>> del file
56876,>>> filepathobj.exists()
56877,False
56878,>>> filepathobj.is_file()
56879,False
56880,is_file
56881,try
56882,def is_file(self):
56883,"    """""""
56884,    Whether this path is a regular file (also True for symlinks pointing
56885,    to regular files).
56886,"    """""""
56887,    try:
56888,        return S_ISREG(self.stat().st_mode)
56889,    except OSError as e:
56890,"        if e.errno not in (ENOENT, ENOTDIR):"
56891,            raise
56892,        # Path doesn't exist or is a broken symlink
56893,        # (see https://bitbucket.org/pitrou/pathlib/issue/12/)
56894,        return False
56895,try
56896,try
56897,try
56898,suppress
56899,suppress
56900,suppress
56901,ignore
56902,try
56903,from contextlib import suppress
56904,from pathlib import Path
56905,">>> with suppress(OSError), Path('doesnotexist').open() as f:"
56906,...     for line in f:
56907,...         print(line)
56908,... 
56909,>>>
56910,>>> with suppress(OSError):
56911,...     Path('doesnotexist').unlink()
56912,... 
56913,>>> 
56914,suppress
56915,try
56916,try
56917,class suppress(object):
56918,"    def __init__(self, *exceptions):"
56919,        self.exceptions = exceptions
56920,    def __enter__(self):
56921,        return self
56922,"    def __exit__(self, exc_type, exc_value, traceback):"
56923,        if exc_type is not None:
56924,"            return issubclass(exc_type, self.exceptions)"
56925,from contextlib import contextmanager
56926,
56927,@contextmanager
56928,def suppress(*exceptions):
56929,    try:
56930,        yield
56931,    except exceptions:
56932,        pass
56933,import os
56934,os.path.isfile(path)
56935,os.path.isfile(path)
56936,islink()
56937,isfile()
56938,"# This follows symbolic links, so both islink() and isdir() can be true"
56939,# for the same path on systems that support symlinks
56940,def isfile(path):
56941,"    """"""Test whether a path is a regular file"""""""
56942,    try:
56943,        st = os.stat(path)
56944,    except os.error:
56945,        return False
56946,    return stat.S_ISREG(st.st_mode)
56947,>>> OSError is os.error
56948,True
56949,OSError
56950,try:
56951,    with open(path) as f:
56952,        f.read()
56953,except OSError:
56954,    pass
56955,os.access
56956,import os
56957,"os.access(path, os.F_OK)"
56958,isfile
56959,"if os.access(""myfile"", os.R_OK):"
56960,"    with open(""myfile"") as fp:"
56961,        return fp.read()
56962,"return ""some default data"""
56963,try:
56964,"    fp = open(""myfile"")"
56965,except IOError as e:
56966,    if e.errno == errno.EACCES:
56967,"        return ""some default data"""
56968,    # Not a permission error.
56969,    raise
56970,else:
56971,    with fp:
56972,        return fp.read()
56973,os.access
56974,os.access
56975,True
56976,KeyboardInterrupt
56977,SystemExit
56978,try...except
56979,except:
56980,import os
56981,"#Your path here e.g. ""C:\Program Files\text.txt"""
56982,"#For access purposes: ""C:\\Program Files\\text.txt"""
56983,"if os.path.exists(""C:\...""):   "
56984,"    print ""File found!"""
56985,else:
56986,"    print ""File not found!"""
56987,os
56988,shutil
56989,os.path.exists
56990,os.path.isfile
56991,os.path.isfile()
56992,os.path.isdir()
56993,os.path.exists()
56994,os.path.splitext()
56995,>>> import os
56996,">>> path = ""path to a word document"""
56997,>>> os.path.isfile(path)
56998,True
56999,">>> os.path.splitext(path)[1] == "".docx"" # test if the extension is .docx"
57000,True
57001,pathlib
57002,from pathlib import Path
57003,
57004,"if Path(""myfile.txt"").exists(): # works for both file and folders"
57005,    # do your cool stuff...
57006,pathlib
57007,Python 3.4
57008,from pathlib import Path
57009,
57010,"p = Path(""loc/of/myfile.txt"")"
57011,if p.exists(): # works for both file and folders
57012,    # do stuffs...
57013,#reuse 'p' if needed.
57014,os.path.isfile
57015,>>> os.path.isfile('/path/to/some/file.txt')
57016,pathlib
57017,import pathlib
57018,path = pathlib.Path('/path/to/some/file.txt')
57019,if path.is_file():
57020,    ...
57021,pathlib
57022,isfile()
57023,try:
57024,    f = open(filepath)
57025,except IOError:
57026,    print 'Oh dear.'
57027,if os.path.isfile(filepath):
57028,"    os.rename(filepath, filepath + '.old')"
57029,# python 2
57030,if not os.path.isfile(filepath):
57031,"    f = open(filepath, 'w')"
57032,
57033,"# python 3, x opens for exclusive creation, failing if the file already exists"
57034,try:
57035,"    f = open(filepath, 'wx')"
57036,except IOError:
57037,    print 'file already exists'
57038,os.path.exists
57039,os.path.isfile
57040,filepath
57041,"open(filepath, 'wx')"
57042,try...except
57043,OSError
57044,filepath + '.old'
57045,os.replace
57046,os.rename
57047,rename
57048,try
57049,except
57050,os.rename
57051,os.replace
57052,"try: os.replace(filepath, filepath + '.old') except OSError: pass"
57053,try:
57054,    # http://effbot.org/zone/python-with-statement.htm
57055,    # 'with' is safer to open a file
57056,    with open('whatever.txt') as fh:
57057,        # Do something with 'fh'
57058,except IOError as e:
57059,"    print(""({})"".format(e))"
57060,try
57061,import os
57062,"os.path.isfile('~/file.md')  # Returns True if exists, else False"
57063,# additionaly check a dir
57064,"os.path.isdir('~/folder')  # Returns True if the folder exists, else False"
57065,# check either a dir or a file
57066,os.path.exists('~/file')
57067,#os.path methods in exhaustive cheatsheet
57068,"{'definition': ['dirname',"
57069,"               'basename',"
57070,"               'abspath',"
57071,"               'relpath',"
57072,"               'commonpath',"
57073,"               'normpath',"
57074,"               'realpath'],"
57075,"'operation': ['split', 'splitdrive', 'splitext',"
57076,"               'join', 'normcase'],"
57077,"'compare': ['samefile', 'sameopenfile', 'samestat'],"
57078,"'condition': ['isdir',"
57079,"              'isfile',"
57080,"              'exists',"
57081,              'lexists'
57082,"              'islink',"
57083,"              'isabs',"
57084,"              'ismount',],"
57085," 'expand': ['expanduser',"
57086,"            'expandvars'],"
57087," 'stat': ['getatime', 'getctime', 'getmtime',"
57088,          'getsize']}
57089,try
57090,except
57091,os.access
57092,def File_Existence(filepath):
57093,    f = open(filepath)
57094,    return True
57095,try
57096,def File_Existence(filepath):
57097,    try:
57098,        f = open(filepath)
57099,"    except IOError, OSError: # Note OSError is for later versions of Python"
57100,        return False
57101,
57102,    return True
57103,os.path.exists(path)
57104,import os.path
57105,">>> os.path.exists(""this/is/a/directory"")"
57106,True
57107,">>> os.path.exists(""this/is/a/file.txt"")"
57108,True
57109,">>> os.path.exists(""not/a/directory"")"
57110,False
57111,"os.access(path, mode)"
57112,os.F_OK
57113,>>> import os
57114,">>> os.access(""/is/a/file.txt"", os.F_OK)"
57115,True
57116,permission denied
57117,no such file or directory
57118,IOError
57119,IOError as e
57120,print(e.args)
57121,"with open('somefile', 'xt') as f: #Using the x-flag, Python3.3 and above"
57122,    f.write('Hello\n')
57123,
57124,if not os.path.exists('somefile'): 
57125,"    with open('somefile', 'wt') as f:"
57126,"        f.write(""Hello\n"")"
57127,else:
57128,    print('File already exists!')
57129,os.path.exists
57130,os.path.isfile
57131,os.access()
57132,"if os.access(""myfile"", os.R_OK):"
57133,"    with open(""myfile"") as fp:"
57134,        return fp.read()
57135,R_OK
57136,W_OK
57137,X_OK
57138,if os.path.isfile(path_to_file):
57139,    try: 
57140,        open(path_to_file)
57141,            pass
57142,    except IOError as e:
57143,"        print ""Unable to open file"""
57144,pathlib
57145,os
57146,paths
57147,import numpy as np
57148,"np.DataSource().exists(""path/to/your/file"")"
57149,try:
57150,from contextlib import suppress
57151,
57152,"with suppress(IOError), open('filename'):"
57153,    process()
57154,suppress
57155,from contextlib import contextmanager
57156,
57157,@contextmanager
57158,def suppress(*exceptions):
57159,    try:
57160,        yield
57161,    except exceptions:
57162,        pass
57163,os.path.isfile
57164,import os.path
57165,os.path.isfile(filename) # True if file exists
57166,os.path.isfile(dirname) # False if directory exists
57167,os.path.exists
57168,import os.path
57169,os.path.exists(filename) # True if file exists
57170,os.path.exists(dirname) #True if directory exists
57171,pathlib.Path
57172,from pathlib import Path
57173,Path(filename).exists()
57174,file_path
57175,None
57176,def file_exists(file_path):
57177,    if not file_path:
57178,        return False
57179,    elif not os.path.isfile(file_path):
57180,        return False
57181,    else:
57182,        return True
57183,def file_exists(file_path):
57184,    if not file_path:
57185,        return False
57186,    else:
57187,        return os.path.isfile(file_path)
57188,def file_exists(file_path):
57189,    return file_path and os.path.isfile(file_path):
57190,if (x) return true; else return false;
57191,return x
57192,return os.path.isfile(file_path)
57193,return file_path and os.path.isfile(file_path)
57194,return x
57195,if (x)
57196,x
57197,os.path.isfile(..)
57198,os.path.isfile(None)
57199,return file_path and os.path.isfile(file_path)
57200,Popen
57201,find
57202,find
57203,try
57204,find
57205,find
57206,try
57207,>>> import pox
57208,">>> pox.find('*python*', type='file', root=pox.homedir(), recurse=False)"
57209,['/Users/mmckerns/.python']
57210,>>> print pox.find.__doc__
57211,"find(patterns[,root,recurse,type]); Get path to a file or directory"
57212,
57213,    patterns: name or partial name string of items to search for
57214,    root: path string of top-level directory to search
57215,"    recurse: if True, recurse down from root directory"
57216,"    type: item filter; one of {None, file, dir, link, socket, block, char}"
57217,"    verbose: if True, be a little verbose about the search"
57218,
57219,"    On some OS, recursion can be specified by recursion depth (an integer)."
57220,"    patterns can be specified with basic pattern matching. Additionally,"
57221,    multiple patterns can be specified by splitting patterns with a ';'
57222,    For example:
57223,"        >>> find('pox*', root='..')"
57224,"        ['/Users/foo/pox/pox', '/Users/foo/pox/scripts/pox_launcher.py']"
57225,
57226,        >>> find('*shutils*;*init*')
57227,"        ['/Users/foo/pox/pox/shutils.py', '/Users/foo/pox/pox/__init__.py']"
57228,
57229,>>>
57230,"python -c ""import os.path; print os.path.isfile('/path_to/file.xxx')"""
57231,"[ -f ""${file}"" ] && echo ""file found"" || echo ""file not found"""
57232,if [ ... ]; then ...; else ...; fi
57233,>>> import os
57234,">>> os.path.exists(""C:\\Users\\####\\Desktop\\test.txt"") "
57235,True
57236,">>> os.path.exists(""C:\\Users\\####\\Desktop\\test.tx"")"
57237,False
57238,os.path.exists
57239,os.path.isfile
57240,exists
57241,import os
57242,"os.path.isfile('./file.txt')    # Returns True if exists, else False"
57243,isfile
57244,os.stat
57245,stat.S_ISREG(mode)
57246,os.stat
57247,if
57248,myString
57249,">>> myString = ""spam\\neggs"""
57250,>>> print(myString)
57251,spam\neggs
57252,process
57253,>>> print(process(myString))
57254,spam
57255,eggs
57256,"'spam'+""eggs""+'''some'''+""""""more"""""""
57257,"myString = ""'spam'+\""eggs\""+'''some'''+\""\""\""more\""\""\"""""
57258,"print(bytes(myString, ""utf-8"").decode(""unicode_escape""))"
57259,">>> myString = ""spam\\neggs"""
57260,">>> decoded_string = bytes(myString, ""utf-8"").decode(""unicode_escape"") # python3 "
57261,>>> decoded_string = myString.decode('string_escape') # python2
57262,>>> print(decoded_string)
57263,spam
57264,eggs
57265,'string\W+escape'
57266,"Notice that spelling alternatives that only differ in case or use a hyphen instead of an underscore are also valid aliases; therefore, e.g. 'utf-8' is a valid alias for the 'utf_8' codec."
57267,">>> print(""juancarlo\\tañez"".encode('utf-8').decode('unicode_escape'))"
57268,juancarlo    aÃ±ez
57269,latin1
57270,unicode_escape
57271,s.encode('utf-8').decode('unicode_escape').encode('latin1').decode('utf8')
57272,unicode_escape
57273,string_escape
57274,unicode_escape
57275,unicode_escape
57276,unicode_escape
57277,>>> s = 'naïve \\t test'
57278,>>> print(s.encode('utf-8').decode('unicode_escape'))
57279,naÃ¯ve   test
57280,codecs.decode
57281,>>> import codecs
57282,">>> print(codecs.decode(s, 'unicode_escape'))"
57283,naÃ¯ve   test
57284,unicode_escape
57285,>>> print(s.encode('latin-1').decode('unicode_escape'))
57286,naïve    test
57287,>>> print('Ernő \\t Rubik'.encode('latin-1').decode('unicode_escape'))
57288,UnicodeEncodeError: 'latin-1' codec can't encode character '\u0151'
57289,in position 3: ordinal not in range(256)
57290,unicode_escape
57291,re.sub
57292,import re
57293,import codecs
57294,
57295,ESCAPE_SEQUENCE_RE = re.compile(r'''
57296,    ( \\U........      # 8-digit hex escapes
57297,    | \\u....          # 4-digit hex escapes
57298,    | \\x..            # 2-digit hex escapes
57299,"    | \\[0-7]{1,3}     # Octal escapes"
57300,    | \\N\{[^}]+\}     # Unicode characters by name
57301,"    | \\[\\'""abfnrtv]  # Single-character escapes"
57302,"    )''', re.UNICODE | re.VERBOSE)"
57303,
57304,def decode_escapes(s):
57305,    def decode_match(match):
57306,"        return codecs.decode(match.group(0), 'unicode-escape')"
57307,
57308,"    return ESCAPE_SEQUENCE_RE.sub(decode_match, s)"
57309,>>> print(decode_escapes('Ernő \\t Rubik'))
57310,Ernő     Rubik
57311,os.sep
57312,"patt = '^' + self.prefix + os.sep ; name = sub(decode_escapes(patt), '', name)"
57313,os.sep
57314,>>> import codecs
57315,">>> myString = ""spam\\neggs"""
57316,">>> print(codecs.escape_decode(bytes(myString, ""utf-8""))[0].decode(""utf-8""))"
57317,spam
57318,eggs
57319,">>> myString = ""naïve \\t test"""
57320,">>> print(codecs.escape_decode(bytes(myString, ""utf-8""))[0].decode(""utf-8""))"
57321,naïve    test
57322,codecs.escape_decode
57323,codecs.escape_decode
57324,codecs.escape_decode
57325,"b""\\n"""
57326,"b""\n"""
57327,"b""\\xce"""
57328,"b""\xce"""
57329,codecs.escape_decode
57330,unicode_escape
57331,unicode_escape
57332,codecs.escape_decode
57333,\x
57334,\u
57335,ast.literal_eval
57336,""""""
57337,"r"""""
57338,"u"""""
57339,literal_eval
57340,literal_eval
57341,"myString = ""\""\ndoBadStuff()\n\"""""
57342,"print(ast.literal_eval('""' + myString + '""'))"
57343,ast.literal_eval
57344,eval
57345,literal_eval
57346,">>> myString=""špåm\\nëðþ\\x73"""
57347,>>> print(myString)
57348,špåm\nëðþ\x73
57349,">>> decoded_string = myString.encode('latin-1','backslashreplace').decode('unicode_escape')"
57350,>>> print(decoded_string)
57351,špåm
57352,ëðþs
57353,'backslashreplace'
57354,.decode
57355,myString='日本\u8a9e'
57356,日本語
57357,"input_string = eval('b""' + sys.argv[1] + '""')"
57358,eval
57359,ast.literal_eval
57360,""""
57361,""""
57362,">>> text = r'''\\ \ \"" \\"" \\\"" \'你好'\n\u062a\xff\N{LATIN SMALL LETTER A}""''' + '\\'"
57363,>>> text
57364,"'\\\\ \\ \\"" \\\\"" \\\\\\"" \\\'你好\'\\n\\u062a\\xff\\N{LATIN SMALL LETTER A}""\\'"
57365,>>> print(text)
57366,"\\ \ \"" \\"" \\\"" \'你好'\n\u062a\xff\N{LATIN SMALL LETTER A}""\"
57367,literal_eval
57368,>>> def parse_escapes(text):
57369,"...     fixed_escapes = re.sub(r'(?<!\\)(\\\\)*(""|\\$)', r'\\\1\2', text)"
57370,"...     return ast.literal_eval(f'""{fixed_escapes}""')"
57371,... 
57372,>>> parse_escapes(text)
57373,"'\\ \\ "" \\"" \\"" \'你好\'\nتÿa""\\'"
57374,>>> print(parse_escapes(text))
57375,"\ \ "" \"" \"" '你好'"
57376,"تÿa""\"
57377,import string
57378,
57379,"our_str = 'The String is \\n, \\n and \\n!'"
57380,"new_str = string.replace(our_str, '/\\n', '/\n', 1)"
57381,print(new_str)
57382,replace
57383,string
57384,str
57385,class Position:
57386,
57387,"    def __init__(self, x: int, y: int):"
57388,        self.x = x
57389,        self.y = y
57390,
57391,"    def __add__(self, other: Position) -> Position:"
57392,"        return Position(self.x + other.x, self.y + other.y)"
57393,Position
57394,__add__
57395,Position
57396,from __future__ import annotations
57397,from __future__ import annotations
57398,NameError: name 'Position' is not defined
57399,Position
57400,from __future__ import annotations
57401,from __future__ import annotations
57402,from __future__ import annotations
57403,
57404,class Position:
57405,"    def __add__(self, other: Position) -> Position:"
57406,        ...
57407,typing
57408,class Position:
57409,    ...
57410,"    def __add__(self, other: 'Position') -> 'Position':"
57411,       ...
57412,self
57413,class Tree:
57414,"    def __init__(self, left: Tree, right: Tree):"
57415,        self.left = left
57416,        self.right = right
57417,class Tree:
57418,"    def __init__(self, left: 'Tree', right: 'Tree'):"
57419,        self.left = left
57420,        self.right = right
57421,__annotations__
57422,from __future__ import annotations
57423,Position
57424,class Position(object):
57425,    pass
57426,
57427,
57428,class Position(object):
57429,    ...
57430,NameError
57431,>>> Position.__add__.__annotations__
57432,"{'other': __main__.Position, 'return': __main__.Position}"
57433,">>> for k, v in Position.__add__.__annotations__.items():"
57434,"...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  "
57435,return is Position: False
57436,other is Position: False
57437,class Position:
57438,    ...
57439,"    def __add__(self, other):"
57440,"        return self.__class__(self.x + other.x, self.y + other.y)"
57441,Position.__add__.__annotations__['return'] = Position
57442,Position.__add__.__annotations__['other'] = Position
57443,">>> for k, v in Position.__add__.__annotations__.items():"
57444,"...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  "
57445,return is Position: True
57446,other is Position: True
57447,typing
57448,''
57449,from __future__ import annotations
57450,@classmethod def f(cls) -> CurrentClass:
57451,CurrentClass
57452,cls
57453,A
57454,B
57455,f
57456,A.f() -> A
57457,B.f() -> B
57458,Self
57459,from typing import Self
57460,
57461,
57462,class Position:
57463,
57464,"    def __init__(self, x: int, y: int):"
57465,        self.x = x
57466,        self.y = y
57467,
57468,"    def __add__(self, other: Self) -> Self:"
57469,"        return Position(self.x + other.x, self.y + other.y)"
57470,Self
57471,typing-extensions
57472,typing
57473,typing-extensions
57474,__future__
57475,__future__
57476,typing_extensions
57477,mypy
57478,"def __add__(self, other: 'Position') -> 'Position':"
57479,"    return Position(self.x + other.x, self.y + other.y)"
57480,from typing import TypeVar
57481,
57482,"T = TypeVar('T', bound='Position')"
57483,
57484,class Position:
57485,
57486,"    def __init__(self, x: int, y: int):"
57487,        self.x = x
57488,        self.y = y
57489,
57490,"    def __add__(self, other: T) -> T:"
57491,"        return Position(self.x + other.x, self.y + other.y)"
57492,typing.Self
57493,typing.Self
57494,some_class(**some_class.deserialize(raw_data))
57495,Position
57496,Position(
57497,self.__class__(
57498,other
57499,self
57500,self
57501,other
57502,Position
57503,self
57504,def __aenter__(self: T) -> T:
57505,typing.Self
57506,"def __add__(self, other: 'Position') -> 'Position':"
57507,"    return Position(self.x + other.x, self.y + other.y)"
57508,from __future__ import annotations
57509,typing.Self
57510,NameError: name 'Position' is not defined
57511,"def __add__(self, other: 'Position') -> 'Position':"
57512,from __future__ import annotations
57513,TypeVar
57514,TypeVar
57515,self
57516,__add__()
57517,copy()
57518,self
57519,from __future__ import annotations
57520,
57521,from typing import TypeVar
57522,
57523,"T = TypeVar('T', bound=Position)"
57524,
57525,class Position:
57526,    
57527,"    def __init__(self, x: int, y: int):"
57528,        self.x = x
57529,        self.y = y
57530,    
57531,"    def __add__(self: T, other: Position) -> T:"
57532,"        return type(self)(self.x + other.x, self.y + other.y)"
57533,    
57534,    def copy(self: T) -> T:
57535,"        return type(self)(self.x, self.y)"
57536,from __future__ import annotations
57537,copy(self: T) -> T
57538,copy()
57539,copy()
57540,Position
57541,Position
57542,Self
57543,__qualname__
57544,class MyClass:
57545,    @classmethod
57546,    def make_new(cls) -> __qualname__:
57547,        return cls()
57548,mypy
57549,class DynamicParent:
57550,  def func(self):
57551,    # roundabout way of returning self in order to have inherited type hints of the return
57552,    # https://stackoverflow.com/a/64938978
57553,    _self:self.__class__ = self
57554,    return _self
57555,class StaticParent:
57556,  def func(self) -> 'StaticParent':
57557,    return self
57558,class StaticChild(StaticParent):
57559,  pass
57560,
57561,class DynamicChild(DynamicParent):
57562,  pass
57563,
57564,static_child = StaticChild()
57565,dynamic_child = DynamicChild()
57566,dynamic_child
57567,static_child
57568,static
57569,annotated with a type variable bound to the parent class
57570,"bashCommand = ""cwm --rdf test.rdf --ntriples > test.nt"""
57571,os.system(bashCommand)
57572,'import site' failed; use -v for traceback
57573,Traceback (most recent call last):
57574,"File ""/usr/bin/cwm"", line 48, in <module>"
57575,from swap import  diag
57576,ImportError: No module named swap
57577,print bashCommand
57578,os.system()
57579,os.system(bashCommand)
57580,cwm
57581,.bashrc
57582,cwm
57583,cwm
57584,os.system
57585,os.system
57586,os.spawn
57587,import subprocess
57588,
57589,"bashCommand = ""cwm --rdf test.rdf --ntriples > test.nt"""
57590,"process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)"
57591,"output, error = process.communicate()"
57592,cd 'path\to\somewhere'
57593,cwd
57594,"subprocess.Popen(..., cwd='path\to\somewhere')"
57595,stdout=file
57596,> file
57597,"..., '>', 'file']"
57598,subprocess.run()
57599,subprocess.check_call()
57600,subprocess.call()
57601,subprocess.Popen()
57602,os.system()
57603,os.popen()
57604,text=True
57605,universal_newlines=True
57606,shell=True
57607,shell=False
57608,sh
57609,subprocess.run()
57610,subprocess.check_call()
57611,subprocess.Popen()
57612,run()
57613,Popen
57614,subprocess.run()
57615,subprocess.check_output()
57616,"subprocess.run(..., check=True, stdout=subprocess.PIPE).stdout"
57617,subprocess.check_call()
57618,"subprocess.run(..., check=True)"
57619,subprocess.call()
57620,subprocess
57621,subprocess.run(...).returncode
57622,subprocess.Popen()
57623,subprocess.run()
57624,CompletedProcess
57625,subprocess.run()
57626,subprocess.Popen()
57627,Popen
57628,subprocess.Popen()
57629,os.system()
57630,os.popen()
57631,os
57632,subprocess
57633,os.system()
57634,subprocess
57635,system()
57636,os.system
57637,subprocess
57638,os.popen()
57639,subprocess
57640,subprocess
57641,subprocess.Popen()
57642,check=True
57643,subprocess.call()
57644,os.system()
57645,subprocess.check_call()
57646,subprocess.check_output()
57647,check=True
57648,subprocess.run()
57649,check=True
57650,subprocess.check_*
57651,CalledProcessError
57652,subprocess.run()
57653,check=True
57654,check_call()
57655,check_output()
57656,grep
57657,grep
57658,text=True
57659,universal_newlines=True
57660,bytes
57661,text=True
57662,bytes
57663,stdout
57664,stderr
57665,"normal = subprocess.run([external, arg],"
57666,"    stdout=subprocess.PIPE, stderr=subprocess.PIPE,"
57667,"    check=True,"
57668,    text=True)
57669,print(normal.stdout)
57670,
57671,"convoluted = subprocess.run([external, arg],"
57672,"    stdout=subprocess.PIPE, stderr=subprocess.PIPE,"
57673,    check=True)
57674,# You have to know (or guess) the encoding
57675,print(convoluted.stdout.decode('utf-8'))
57676,text
57677,universal_newlines
57678,shell=True
57679,shell=False
57680,shell=True
57681,shell=False
57682,shell=True
57683,# XXX AVOID THIS BUG
57684,buggy = subprocess.run('dig +short stackoverflow.com')
57685,
57686,# XXX AVOID THIS BUG TOO
57687,"broken = subprocess.run(['dig', '+short', 'stackoverflow.com'],"
57688,    shell=True)
57689,
57690,# XXX DEFINITELY AVOID THIS
57691,"pathological = subprocess.run(['dig +short stackoverflow.com'],"
57692,    shell=True)
57693,
57694,"correct = subprocess.run(['dig', '+short', 'stackoverflow.com'],"
57695,"    # Probably don't forget these, too"
57696,"    check=True, text=True)"
57697,
57698,# XXX Probably better avoid shell=True
57699,# but this is nominally correct
57700,"fixed_but_fugly = subprocess.run('dig +short stackoverflow.com',"
57701,"    shell=True,"
57702,"    # Probably don't forget these, too"
57703,"    check=True, text=True)"
57704,"subprocess.run(""string for 'the shell' to parse"", shell=True)"
57705,# or
57706,"subprocess.run([""list"", ""of"", ""tokenized strings""]) # shell=False"
57707,shlex.split()
57708,"subprocess.run(shlex.split(""no string for 'the shell' to parse""))  # shell=False"
57709,# equivalent to
57710,"# subprocess.run([""no"", ""string"", ""for"", ""the shell"", ""to"", ""parse""])"
57711,split()
57712,"""the shell"""
57713,sed
57714,cmd = '''while read -r x;
57715,"   do ping -c 3 ""$x"" | grep 'min/avg/max'"
57716,   done <hosts.txt'''
57717,
57718,# Trivial but horrible
57719,results = subprocess.run(
57720,"    cmd, shell=True, universal_newlines=True, check=True)"
57721,print(results.stdout)
57722,
57723,# Reimplement with shell=False
57724,with open('hosts.txt') as hosts:
57725,    for host in hosts:
57726,        host = host.rstrip('\n')  # drop newline
57727,        ping = subprocess.run(
57728,"             ['ping', '-c', '3', host],"
57729,"             text=True,"
57730,"             stdout=subprocess.PIPE,"
57731,             check=True)
57732,        for line in ping.stdout.split('\n'):
57733,             if 'min/avg/max' in line:
57734,"                 print('{}: {}'.format(host, line))"
57735,shell=False
57736,glob.glob()
57737,for file in os.listdir('.'): if not file.endswith('.png'): continue
57738,".{png,jpg}"
57739,{1..100}
57740,~
57741,~account
57742,$SHELL
57743,$my_exported_var
57744,os.environ['SHELL']
57745,export
57746,env=
57747,subprocess
57748,shell=False
57749,"cd ""$HOME"""
57750,os.chdir(os.environ['HOME'])
57751,cd
57752,grep 'foo' <inputfile >outputfile
57753,outputfile
57754,inputfile
57755,grep
57756,outputfile
57757,echo foo | nl
57758,echo
57759,nl
57760,pipes
57761,ls -l /
57762,'ls' '-l' '/'
57763,sh
57764,subprocess
57765,/bin/sh
57766,COMSPEC
57767,[[
57768,executable='/bin/bash'
57769,subprocess.run('''
57770,    # This for loop syntax is Bash only
57771,    for((i=1;i<=$#;i++)); do
57772,        # Arrays are Bash-only
57773,        array[i]+=123
57774,"    done''',"
57775,"    shell=True, check=True,"
57776,    executable='/bin/bash')
57777,subprocess
57778,"subprocess.run('cd /tmp', shell=True)"
57779,"subprocess.run('pwd', shell=True)  # Oops, doesn't print /tmp"
57780,"subprocess.run('cd /tmp; pwd', shell=True)"
57781,cwd
57782,os.chdir()
57783,os.environ['foo'] = 'bar'
57784,"subprocess.run('echo ""$foo""', shell=True, env={'foo': 'bar'})"
57785,"subprocess.run(['echo', 'bar'])"
57786,echo
57787,import
57788,multiprocessing
57789,threading
57790,run()
57791,check=True
57792,sh
57793,stderr/stdout = subprocess.PIPE
57794,os.system()
57795,import subprocess
57796,"subprocess.Popen(""cwm --rdf test.rdf --ntriples > test.nt"")"
57797,swap
57798,shell=True
57799,"['a', 'b', 'c']"
57800,'a b c'
57801,> file
57802,"bashCommand = ""cwm --rdf test.rdf --ntriples > test.nt"""
57803,"output = subprocess.check_output(['bash','-c', bashCommand])"
57804,"subprocess.check_output(bashCommand, shell=True)"
57805,shell=True
57806,"with open('test.nt', 'w') as dest: output = subprocess.check_output(['cwm' ,'--rdf', 'test.rdf', '--ntriples'], stdout=dest, shell=False)"
57807,/bin/sh
57808,bash
57809,executable='/bin/bash
57810,check_output()
57811,> file
57812,check_call()
57813,subprocess
57814,Sultan
57815,sudo
57816,import os
57817,
57818,command = os.popen('ls -al')
57819,print(command.read())
57820,print(command.close())
57821,total 16
57822,drwxr-xr-x 2 root root 4096 ago 13 21:53 .
57823,drwxr-xr-x 4 root root 4096 ago 13 01:50 ..
57824,-rw-r--r-- 1 root root 1278 ago 13 21:12 bot.py
57825,-rw-r--r-- 1 root root   77 ago 13 21:53 test.py
57826,
57827,None
57828,subprocess
57829,os.popen
57830,subprocess.Popen()
57831,/usr/bin/cwm
57832,python-swap
57833,swap
57834,import swap
57835,sys.path
57836,[subprocess]
57837,#!/usr/bin/env python
57838,import subprocess
57839,
57840,"with open('test.nt', 'wb', 0) as file:"
57841,"    subprocess.check_call(""cwm --rdf test.rdf --ntriples"".split(),"
57842,                          stdout=file)
57843,> test.nt
57844,stdout=file
57845,shell=True
57846,#!/usr/bin/env python
57847,import subprocess
57848,
57849,"subprocess.check_call(""cwm --rdf test.rdf --ntriples > test.nt"","
57850,                      shell=True)
57851,> test.nt
57852,#!/usr/bin/env python
57853,import subprocess
57854,
57855,"subprocess.check_call('program <(command) <(another-command)',"
57856,"                      shell=True, executable='/bin/bash')"
57857,.split()
57858,shlex.split()
57859,.split()
57860,shlex.split()
57861,subprocess.Popen()
57862,os.system()
57863,subprocess.Popen()
57864,peasyshell
57865,subprocess.Popen
57866,subprocess.Popen
57867,import subprocess
57868,
57869,"args = ['echo', 'Hello!']"
57870,subprocess.Popen(args) // same as running `echo Hello!` on cmd line
57871,
57872,"args2 = ['echo', '-v', '""Hello Again""']"
57873,"subprocess.Popen(args2) // same as running 'echo -v ""Hello Again!""` on cmd line"
57874,"echo -v '""Hello Again!""'"
57875,subprocesss.Popen
57876,wait()
57877,def run_bash_command(cmd: str) -> Any:
57878,    import subprocess
57879,
57880,"    process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)"
57881,"    output, error = process.communicate()"
57882,    if error:
57883,        raise Exception(error)
57884,    else:
57885,        return output
57886,super()
57887,class First(object):
57888,    def __init__(self):
57889,"        print ""first"""
57890,
57891,class Second(object):
57892,    def __init__(self):
57893,"        print ""second"""
57894,
57895,"class Third(First, Second):"
57896,    def __init__(self):
57897,"        super(Third, self).__init__()"
57898,"        print ""that's it"""
57899,Third
57900,super().__init__
57901,super()
57902,super()
57903,super()
57904,super()
57905,super
57906,super
57907,Third()
57908,First.__init__
57909,__init__
57910,"class Third(First, Second):"
57911,    ...
57912,First
57913,First
57914,Second
57915,First
57916,Second
57917,class First(object):
57918,    def __init__(self):
57919,"        print ""first"""
57920,
57921,class Second(First):
57922,    def __init__(self):
57923,"        print ""second"""
57924,
57925,class Third(First):
57926,    def __init__(self):
57927,"        print ""third"""
57928,
57929,"class Fourth(Second, Third):"
57930,    def __init__(self):
57931,"        super(Fourth, self).__init__()"
57932,"        print ""that's it"""
57933,"[Fourth, Second, Third, First]."
57934,class First(object):
57935,    def __init__(self):
57936,"        print ""first"""
57937,        
57938,class Second(First):
57939,    def __init__(self):
57940,"        print ""second"""
57941,
57942,"class Third(First, Second):"
57943,    def __init__(self):
57944,"        print ""third"""
57945,Third
57946,"[First, Second]"
57947,"[Second, First]"
57948,TypeError: Error when calling the metaclass bases
57949,"    Cannot create a consistent method resolution order (MRO) for bases Second, First"
57950,super()
57951,"""first\nsecond\third"""
57952,super()
57953,>>> Fourth.__mro__
57954,"(<class '__main__.Fourth'>,"
57955," <class '__main__.Second'>, <class '__main__.Third'>,"
57956," <class '__main__.First'>,"
57957, <type 'object'>)
57958,super()
57959,class First(object):
57960,    def __init__(self):
57961,"        super(First, self).__init__()"
57962,"        print(""first"")"
57963,
57964,class Second(object):
57965,    def __init__(self):
57966,"        super(Second, self).__init__()"
57967,"        print(""second"")"
57968,
57969,"class Third(First, Second):"
57970,    def __init__(self):
57971,"        super(Third, self).__init__()"
57972,"        print(""third"")"
57973,>>> Third()
57974,second
57975,first
57976,third
57977,super()
57978,First
57979,Second
57980,Second.__init__()
57981,super()
57982,First
57983,Second
57984,second
57985,>>> Third()
57986,first
57987,third
57988,super
57989,super
57990,"super(MyClass, self).__init__()"
57991,__init__
57992,#!/usr/bin/env python2
57993,
57994,class First(object):
57995,  def __init__(self):
57996,"    print ""First(): entering"""
57997,"    super(First, self).__init__()"
57998,"    print ""First(): exiting"""
57999,
58000,class Second(object):
58001,  def __init__(self):
58002,"    print ""Second(): entering"""
58003,"    super(Second, self).__init__()"
58004,"    print ""Second(): exiting"""
58005,
58006,"class Third(First, Second):"
58007,  def __init__(self):
58008,"    print ""Third(): entering"""
58009,"    super(Third, self).__init__()"
58010,"    print ""Third(): exiting"""
58011,__init__
58012,Third --> First --> object --> Second --> object
58013,Third --> First --> Second --> object
58014,Third
58015,x = Third()
58016,Third.__init__
58017,Third(): entering
58018,"super(Third, self).__init__()"
58019,First.__init__
58020,First.__init__
58021,First(): entering
58022,"super(First, self).__init__()"
58023,Second.__init__
58024,Second.__init__
58025,Second(): entering
58026,"super(Second, self).__init__()"
58027,object.__init__
58028,object.__init__
58029,Second.__init__
58030,Second(): exiting
58031,First.__init__
58032,First(): exiting
58033,Third.__init__
58034,Third(): exiting
58035,Third(): entering
58036,First(): entering
58037,Second(): entering
58038,Second(): exiting
58039,First(): exiting
58040,Third(): exiting
58041,Third
58042,Second
58043,"super(First, self).__init__"
58044,object.__init__
58045,Third
58046,First
58047,Second
58048,object.__init__
58049,First.__init__
58050,object.__init__
58051,First
58052,Second
58053,object.__init__
58054,Second
58055,object.__init__
58056,Second
58057,First
58058,List[subclass]
58059,List[superclass]
58060,subclass
58061,superclass
58062,List
58063,typing
58064,object
58065,super()
58066,class First(object):
58067,    def __init__(self):
58068,        print '1'
58069,
58070,class Second(object):
58071,    def __init__(self):
58072,        print '2'
58073,
58074,"class Third(First, Second):"
58075,    def __init__(self):
58076,        Second.__init__(self)
58077,First
58078,__init__()
58079,First
58080,Second
58081,object
58082,object
58083,super
58084,super
58085,__mro__
58086,Child.__mro__
58087,"(__main__.Child, __main__.Left, __main__.Right, __main__.Parent, object)"
58088,    Parent
58089,    /   \
58090,   /     \
58091,Left    Right
58092,   \     /
58093,    \   /
58094,    Child
58095,super
58096,class Parent(object):
58097,    def __init__(self):
58098,"        super(Parent, self).__init__()"
58099,"        print(""parent"")"
58100,
58101,class Left(Parent):
58102,    def __init__(self):
58103,"        super(Left, self).__init__()"
58104,"        print(""left"")"
58105,
58106,class Right(Parent):
58107,    def __init__(self):
58108,"        super(Right, self).__init__()"
58109,"        print(""right"")"
58110,
58111,"class Child(Left, Right):"
58112,    def __init__(self):
58113,"        super(Child, self).__init__()"
58114,"        print(""child"")"
58115,Child()
58116,parent
58117,right
58118,left
58119,child
58120,    
58121,super
58122,class Parent(object):
58123,    def __init__(self):
58124,"        print(""parent"")"
58125,"        super(Parent, self).__init__()"
58126,
58127,class Left(Parent):
58128,    def __init__(self):
58129,"        print(""left"")"
58130,"        super(Left, self).__init__()"
58131,
58132,class Right(Parent):
58133,    def __init__(self):
58134,"        print(""right"")"
58135,"        super(Right, self).__init__()"
58136,
58137,"class Child(Left, Right):"
58138,    def __init__(self):
58139,"        print(""child"")"
58140,"        super(Child, self).__init__()"
58141,Child()
58142,child
58143,left
58144,right
58145,parent
58146,super
58147,super
58148,Left
58149,Right
58150,Parent
58151,class Parent(object):
58152,    def __init__(self):
58153,"        print(""parent"")"
58154,"        super(Parent, self).__init__()"
58155,
58156,class Left(Parent):
58157,    def __init__(self):
58158,"        print(""left"")"
58159,
58160,class Right(Parent):
58161,    def __init__(self):
58162,"        print(""right"")"
58163,"        super(Right, self).__init__()"
58164,
58165,"class Child(Left, Right):"
58166,    def __init__(self):
58167,"        print(""child"")"
58168,"        super(Child, self).__init__()"
58169,Child()
58170,child
58171,left
58172,Right
58173,super
58174,Parent
58175,class Parent(object):
58176,    def __init__(self):
58177,"        print(""parent"")"
58178,"        super(Parent, self).__init__()"
58179,
58180,class Left(Parent):
58181,    def __init__(self):
58182,"        print(""left"")"
58183,"        super(Left, self).__init__()"
58184,
58185,class Right(Parent):
58186,    def __init__(self):
58187,"        print(""right"")"
58188,
58189,"class Child(Left, Right):"
58190,    def __init__(self):
58191,"        print(""child"")"
58192,"        super(Child, self).__init__()"
58193,Child()
58194,child
58195,left
58196,right
58197,class Parent(object):
58198,    def __init__(self):
58199,"        super(Parent, self).__init__()"
58200,"        print(""parent"")"
58201,
58202,class Left(Parent):
58203,    def __init__(self):
58204,"        super(Left, self).__init__()"
58205,"        print(""left"")"
58206,
58207,class Right(Parent):
58208,    def __init__(self):
58209,"        super(Right, self).__init__()"
58210,"        print(""right"")"
58211,
58212,"class Child(Left, Right):"
58213,    def __init__(self):
58214,        Parent.__init__(self)
58215,"        print(""child"")"
58216,Child()
58217,parent
58218,child
58219,Left
58220,super()
58221,Child
58222,Right
58223,Child
58224,Right
58225,Child
58226,Right
58227,super
58228,A
58229,B
58230,C
58231,f
58232,A
58233,B
58234,v
58235,__init__
58236,C
58237,w
58238,f
58239,y
58240,Q
58241,MixInF
58242,B
58243,C
58244,class A(object):
58245,"    def __init__(self, v, *args, **kwargs):"
58246,"        print ""A:init:v[{0}]"".format(v)"
58247,        kwargs['v']=v
58248,"        super(A, self).__init__(*args, **kwargs)"
58249,        self.v = v
58250,
58251,
58252,class MixInF(object):
58253,"    def __init__(self, *args, **kwargs):"
58254,"        print ""IObject:init"""
58255,"    def f(self, y):"
58256,"        print ""IObject:y[{0}]"".format(y)"
58257,
58258,
58259,class B(MixInF):
58260,"    def __init__(self, v, *args, **kwargs):"
58261,"        print ""B:init:v[{0}]"".format(v)"
58262,        kwargs['v']=v
58263,"        super(B, self).__init__(*args, **kwargs)"
58264,        self.v = v
58265,"    def f(self, y):"
58266,"        print ""B:f:v[{0}]:y[{1}]"".format(self.v, y)"
58267,"        super(B, self).f(y)"
58268,
58269,
58270,class C(MixInF):
58271,"    def __init__(self, w, *args, **kwargs):"
58272,"        print ""C:init:w[{0}]"".format(w)"
58273,        kwargs['w']=w
58274,"        super(C, self).__init__(*args, **kwargs)"
58275,        self.w = w
58276,"    def f(self, y):"
58277,"        print ""C:f:w[{0}]:y[{1}]"".format(self.w, y)"
58278,"        super(C, self).f(y)"
58279,
58280,
58281,"class Q(C,B,A):"
58282,"    def __init__(self, v, w):"
58283,"        super(Q, self).__init__(v=v, w=w)"
58284,"    def f(self, y):"
58285,"        print ""Q:f:y[{0}]"".format(y)"
58286,"        super(Q, self).f(y)"
58287,Q
58288,w
58289,v
58290,*args
58291,**kwargs
58292,**kwargs
58293,class A(object):
58294,"  def __init__(self, a, *args, **kwargs):"
58295,"    print(""A"", a)"
58296,
58297,class B(A):
58298,"  def __init__(self, b, *args, **kwargs):"
58299,"    super(B, self).__init__(*args, **kwargs)"
58300,"    print(""B"", b)"
58301,
58302,class A1(A):
58303,"  def __init__(self, a1, *args, **kwargs):"
58304,"    super(A1, self).__init__(*args, **kwargs)"
58305,"    print(""A1"", a1)"
58306,
58307,"class B1(A1, B):"
58308,"  def __init__(self, b1, *args, **kwargs):"
58309,"    super(B1, self).__init__(*args, **kwargs)"
58310,"    print(""B1"", b1)"
58311,
58312,
58313,"B1(a1=6, b1=5, b=""hello"", a=None)"
58314,A None
58315,B hello
58316,A1 6
58317,B1 5
58318,"B1(5, 6, b=""hello"", a=None)"
58319,class A(object):
58320,"  def __init__(self, *args, a, **kwargs):"
58321,"    print(""A"", a)"
58322,*args
58323,**kwargs
58324,__new__
58325,B.__new__()
58326,__init__
58327,B.__init__()
58328,super
58329,class A(object):
58330,"    def __init__(self, **kwargs):"
58331,        print('A.__init__')
58332,        super().__init__()
58333,
58334,class B(A):
58335,"    def __init__(self, **kwargs):"
58336,        print('B.__init__ {}'.format(kwargs['x']))
58337,        super().__init__(**kwargs)
58338,
58339,
58340,class C(A):
58341,"    def __init__(self, **kwargs):"
58342,"        print('C.__init__ with {}, {}'.format(kwargs['a'], kwargs['b']))"
58343,        super().__init__(**kwargs)
58344,
58345,
58346,"class D(B, C): # MRO=D, B, C, A"
58347,    def __init__(self):
58348,        print('D.__init__')
58349,"        super().__init__(a=1, b=2, x=3)"
58350,
58351,print(D.mro())
58352,D()
58353,"[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]"
58354,D.__init__
58355,B.__init__ 3
58356,"C.__init__ with 1, 2"
58357,A.__init__
58358,__init__
58359,super
58360,super().Foo()
58361,class A(object): pass
58362,class B(object): pass
58363,class C(A): pass
58364,class D(A): pass
58365,"class E(C, D): pass"
58366,class F(B): pass
58367,class G(B): pass
58368,"class H(F, G): pass"
58369,"class I(E, H): pass"
58370,I
58371,I
58372,I E C D A H F G B object
58373,X
58374,C
58375,D
58376,C
58377,D
58378,A
58379,super()
58380,I E C H D A F G B object 
58381,I
58382,E
58383,C
58384,A
58385,D
58386,A
58387,D
58388,H
58389,D
58390,H
58391,D
58392,D
58393,A
58394,F
58395,G
58396,B
58397,I
58398,class Base(object):
58399,  def foo(self):
58400,"    print(""    Base(): entering"")"
58401,"    print(""    Base(): exiting"")"
58402,
58403,
58404,class First(Base):
58405,  def foo(self):
58406,"    print(""   First(): entering Will call Second now"")"
58407,    super().foo()
58408,"    print(""   First(): exiting"")"
58409,
58410,
58411,class Second(Base):
58412,  def foo(self):
58413,"    print(""  Second(): entering"")"
58414,    super().foo()
58415,"    print(""  Second(): exiting"")"
58416,
58417,
58418,"class Third(First, Second):"
58419,  def foo(self):
58420,"    print("" Third(): entering"")"
58421,    super().foo()
58422,"    print("" Third(): exiting"")"
58423,
58424,
58425,class Fourth(Third):
58426,  def foo(self):
58427,"    print(""Fourth(): entering"")"
58428,    super().foo()
58429,"    print(""Fourth(): exiting"")"
58430,
58431,Fourth().foo()
58432,print(Fourth.__mro__)
58433,Fourth(): entering
58434, Third(): entering
58435,   First(): entering Will call Second now
58436,  Second(): entering
58437,    Base(): entering
58438,    Base(): exiting
58439,  Second(): exiting
58440,   First(): exiting
58441, Third(): exiting
58442,Fourth(): exiting
58443,"(<class '__main__.Fourth'>, <class '__main__.Third'>, <class '__main__.First'>, <class '__main__.Second'>, <class '__main__.Base'>, <class 'object'>)"
58444,class A():
58445,"    def __init__(self, x):"
58446,        self.x = x
58447,
58448,class B():
58449,"    def __init__(self, y, z):"
58450,        self.y = y
58451,        self.z = z
58452,
58453,"class C(A, B):"
58454,"    def __init__(self, x, y, z):"
58455,"        A.__init__(self, x)"
58456,"        B.__init__(self, y, z)"
58457,
58458,">>> c = C(1,2,3)"
58459,">>>c.x, c.y, c.z "
58460,"(1, 2, 3)"
58461,class First(object):
58462,"  def __init__(self, a):"
58463,"    print ""first"", a"
58464,"    super(First, self).__init__(20)"
58465,
58466,class Second(object):
58467,"  def __init__(self, a):"
58468,"    print ""second"", a"
58469,"    super(Second, self).__init__()"
58470,
58471,"class Third(First, Second):"
58472,  def __init__(self):
58473,"    super(Third, self).__init__(10)"
58474,"    print ""that's it"""
58475,
58476,t = Third()
58477,first 10
58478,second 20
58479,that's it
58480,first 10
58481,that's it
58482,AB
58483,A
58484,B
58485,  A    B
58486,   \  /
58487,    AB
58488,AB
58489,super()
58490,class A():
58491,"    def __init__(self, a=""a""):"
58492,        self.a = a
58493,"        print(f""a={a}"")"
58494,    
58495,    def A_method(self):
58496,"        print(f""A_method: {self.a}"")"
58497,
58498,class B():
58499,"    def __init__(self, b=""b""):"
58500,        self.b = b
58501,"        print(f""b={b}"")"
58502,    
58503,    def B_method(self):
58504,"        print(f""B_method: {self.b}"")"
58505,    
58506,    def magical_AB_method(self):
58507,"        print(f""magical_AB_method: {self.a}, {self.b}"")"
58508,
58509,"class AB(A,B):"
58510,"    def __init__(self, a=""A"", b=""B""):"
58511,"        # super().__init__(a=a, b=b) # fails!"
58512,"        A.__init__(self, a=a)"
58513,"        B.__init__(self, b=b)"
58514,        self.A_method()
58515,        self.B_method()
58516,        self.magical_AB_method()
58517,
58518,
58519,A()
58520,>>> a=a
58521,
58522,B()
58523,>>> b=b
58524,
58525,AB()
58526,>>> a=A
58527,>>> b=B
58528,>>> A_method: A
58529,>>> B_method: B
58530,magical_AB_method
58531,B
58532,B
58533,A
58534,AB
58535,A
58536,B().magical_AB_method()
58537,>>> AttributeError: 'B' object has no attribute 'a'
58538,
58539,AB().magical_AB_method()
58540,">>> magical_AB_method: A, B"
58541,Third --> First --> object --> Second --> object
58542,"    L(O)  := [O]  // the linearization(mro) of O(object), because O has no parents"
58543,
58544,"    L(First)  :=  [First] + merge(L(O), [O])"
58545,"               =  [First] + merge([O], [O])"
58546,"               =  [First, O]"
58547,
58548,"    // Similarly, "
58549,"    L(Second)  := [Second, O]"
58550,
58551,"    L(Third)   := [Third] + merge(L(First), L(Second), [First, Second])"
58552,"                = [Third] + merge([First, O], [Second, O], [First, Second])"
58553,"// class First is a good candidate for the first merge step, because it only appears as the head of the first and last lists"
58554,"// class O is not a good candidate for the next merge step, because it also appears in the tails of list 1 and 2, "
58555,"                = [Third, First] + merge([O], [Second, O], [Second])"
58556,"// class Second is a good candidate for the second merge step, because it appears as the head of the list 2 and 3"
58557,"                = [Third, First, Second] + merge([O], [O])            "
58558,"                = [Third, First, Second, O]"
58559,class First(object):
58560,  def __init__(self):
58561,"    super(First, self).__init__()"
58562,"    print ""first"""
58563,
58564,class Second(object):
58565,  def __init__(self):
58566,"    super(Second, self).__init__()"
58567,"    print ""second"""
58568,
58569,"class Third(First, Second):"
58570,  def __init__(self):
58571,"    super(Third, self).__init__()"
58572,"    print ""that's it"""
58573,Third.__init__() ---> First.__init__() ---> Second.__init__() ---> 
58574,Object.__init__() ---> returns ---> Second.__init__() -
58575,"prints ""second"" - returns ---> First.__init__() -"
58576,"prints ""first"" - returns ---> Third.__init__() - prints ""that's it"""
58577,"super(First, self).__init__() #example for class First."
58578,class First(object):
58579,    def __init__(self):
58580,
58581,"        print(""first"")"
58582,
58583,class Second(First):
58584,    def __init__(self):
58585,"        print(""second (before)"")"
58586,"        super(Second, self).__init__()"
58587,"        print(""second (after)"")"
58588,
58589,class Third(First):
58590,    def __init__(self):
58591,"        print(""third (before)"")"
58592,"        super(Third, self).__init__()"
58593,"        print(""third (after)"")"
58594,
58595,
58596,class Fourth(First):
58597,    def __init__(self):
58598,"        print(""fourth (before)"")"
58599,"        super(Fourth, self).__init__()"
58600,"        print(""fourth (after)"")"
58601,
58602,
58603,"class Fifth(Second, Third, Fourth):"
58604,    def __init__(self):
58605,"        print(""fifth (before)"")"
58606,"        super(Fifth, self).__init__()"
58607,"        print(""fifth (after)"")"
58608,
58609,Fifth()
58610,"1.) print(""fifth (before)"")"
58611,"2.) super()>[Second, Third, Fourth] (Left to right)"
58612,"3.) print(""second (before)"")"
58613,4.) super()> First (First is the Parent which inherit from object)
58614,"5.) print(""third (before)"")"
58615,6.) super()> First (Parent class)
58616,"7.) print (""Fourth (before)"")"
58617,8.) super()> First (Parent class)
58618,"9.) print(""first"") (Parent)"
58619,"10.) print (""Fourth (after)"") (Class Fourth un-box)"
58620,"11.) print(""third (after)"") (Class Third un-box)"
58621,"12.) print(""second (after)"") (Class Second un-box)"
58622,"13.) print(""fifth (after)"") (Class Fifth un-box)"
58623,14.) Fifth() executed
58624,fifth (before)
58625,second (before
58626,third (before)
58627,fourth (before)
58628,first
58629,fourth (after)
58630,third (after)
58631,second (after)
58632,fifth (after)
58633,from django.utils.decorators import method_decorator
58634,from django.contrib.auth.decorators import login_required
58635,
58636,class LoginToPost:
58637,    @method_decorator(login_required)
58638,"    def post(self, arg, *args, **kwargs):"
58639,"        super().post(arg, *args, **kwargs)"
58640,LoginToPost
58641,ListCreateAPIView
58642,LoginToPutOrDelete
58643,RetrieveUpdateDestroyAPIView
58644,get
58645,    A
58646,   / \
58647,  B   C
58648,   \ /
58649,    D
58650,class A:
58651,"    def __init__(self, name=None):"
58652,"        #  this is the head of the diamond, no need to call super() here"
58653,        self.name = name
58654,
58655,class B(A):
58656,"    def __init__(self, param1='hello', **kwargs):"
58657,        super().__init__(**kwargs)
58658,        self.param1 = param1
58659,
58660,class C(A):
58661,"    def __init__(self, param2='bye', **kwargs):"
58662,        super().__init__(**kwargs)
58663,        self.param2 = param2
58664,
58665,"class D(B, C):"
58666,"    def __init__(self, works='fine', **kwargs):"
58667,        super().__init__(**kwargs)
58668,"        print(f""{works=}, {self.param1=}, {self.param2=}, {self.name=}"")"
58669,
58670,d = D(name='Testing')
58671,object
58672,A
58673,__init__
58674,A
58675,__init__
58676,A
58677,__init__
58678,super().__init__
58679,object
58680,object
58681,class A (object) :
58682,A
58683,object
58684,__init__
58685,isdigit()
58686,"line = ""hello 12 hi 89"""
58687,"[12, 89]"
58688,"'''gimme digits from ""12"", 34, '56', -789.'''"
58689,">>> txt = ""h3110 23 cat 444.4 rabbit 11 2 dog"""
58690,>>> [int(s) for s in txt.split() if s.isdigit()]
58691,"[23, 11, 2]"
58692,mumblejumble45mumblejumble
58693,"int(filter(str.isdigit, your_string))"
58694,int(filter(...))
58695,TypeError: int() argument must be a string...
58696,"int(''.join(filter(str.isdigit, your_string)))"
58697,>>> import re
58698,">>> re.findall(r'\d+', ""hello 42 I'm a 32 string 30"")"
58699,"['42', '32', '30']"
58700,bla42bla
58701,">>> re.findall(r'\b\d+\b', ""he33llo 42 I'm a 32 string 30"")"
58702,"['42', '32', '30']"
58703,">>> [int(s) for s in re.findall(r'\b\d+\b', ""he33llo 42 I'm a 32 string 30"")]"
58704,"[42, 32, 30]"
58705,int
58706,r'\b\d+\b' == '\\b\\d+\\b'
58707,"int_list = [int(s) for s in re.findall('\\d+', 'hello 12 hi 89')]"
58708,map
58709,import re
58710,
58711,"# Format is [(<string>, <expected output>), ...]"
58712,"ss = [(""apple-12.34 ba33na fanc-14.23e-2yapple+45e5+67.56E+3"","
58713,"       ['-12.34', '33', '-14.23e-2', '+45e5', '+67.56E+3']),"
58714,"      ('hello X42 I\'m a Y-32.35 string Z30',"
58715,"       ['42', '-32.35', '30']),"
58716,"      ('he33llo 42 I\'m a 32 string -30', "
58717,"       ['33', '42', '32', '-30']),"
58718,"      ('h3110 23 cat 444.4 rabbit 11 2 dog', "
58719,"       ['3110', '23', '444.4', '11', '2']),"
58720,"      ('hello 12 hi 89', "
58721,"       ['12', '89']),"
58722,"      ('4', "
58723,"       ['4']),"
58724,"      ('I like 74,600 commas not,500', "
58725,"       ['74,600', '500']),"
58726,"      ('I like bad math 1+2=.001', "
58727,"       ['1', '+2', '.001'])]"
58728,
58729,"for s, r in ss:"
58730,"    rr = re.findall(""[-+]?[.]?[\d]+(?:,\d\d\d)*[\.]?\d*(?:[eE][-+]?\d+)?"", s)"
58731,    if rr == r:
58732,        print('GOOD')
58733,    else:
58734,"        print('WRONG', rr, 'should be', r)"
58735,"s = ""4"""
58736,[+-]?\d*[\.]?\d*(?:(?:[eE])[+-]?\d+)?
58737,+
58738,.001
58739,s=2+1
58740,"[-+]?[.]?[\d]+(?:,\d\d\d)*[\.]?\d*(?:[eE][-+]?\d+)?"
58741,l = []
58742,for t in s.split():
58743,    try:
58744,        l.append(float(t))
58745,    except ValueError:
58746,        pass
58747,">>> re.findall(r'\b\d+\b', 'he33llo 42 I\'m a 32 string -30')"
58748,"['42', '32', '30']"
58749,
58750,>>> '-3'.isdigit()
58751,False
58752,float
58753,int
58754,"re.findall(""[-\d]+"", ""1 -2"")"
58755,continue
58756,pass
58757,'hello 12 hi'
58758,filter
58759,"In [1]: int(''.join(filter(str.isdigit, '200 grams')))"
58760,Out[1]: 200
58761,"In [2]: int(''.join(filter(str.isdigit, 'Counters: 55')))"
58762,Out[2]: 55
58763,"In [3]: int(''.join(filter(str.isdigit, 'more than 23 times')))"
58764,Out[3]: 23
58765,"In [4]: int(''.join(filter(str.isdigit, '200 grams 5')))"
58766,Out[4]: 2005
58767,"TypeError: int() argument must be a string, a bytes-like object or a number, not 'filter'"
58768,"int("""".join(filter(str.isdigit, '200 grams')))"
58769,6.00
58770,600
58771,>>> phone_number = '+55(11)8715-9877'
58772,>>> ''.join([n for n in phone_number if n.isdigit()])
58773,'551187159877'
58774,filter()
58775,"''.join(filter(str.isdigit, phone_number))"
58776,''.join(n for n in phone_number if n.isdigit())
58777,"p = '[\d]+[.,\d]+|[\d]*[.][\d]+|[\d]+'"
58778,re.search()
58779,"s = 'he33llo 42 I\'m a 32 string 30 444.4 12,001'"
58780,
58781,"if re.search(p, s) is not None:"
58782,"    for catch in re.finditer(p, s):"
58783,        print(catch[0]) # catch is a match object
58784,33
58785,42
58786,32
58787,30
58788,444.4
58789,"12,001"
58790,# extract numbers from garbage string:
58791,"s = '12//n,_@#$%3.14kjlw0xdadfackvj1.6e-19&*ghn334'"
58792,newstr = ''.join((ch if ch in '0123456789.-e' else ' ') for ch in s)
58793,listOfNumbers = [float(i) for i in newstr.split()]
58794,print(listOfNumbers)
58795,"[12.0, 3.14, 0.0, 1.6e-19, 334.0]"
58796,"lines = ""hello 12 hi 89"""
58797,import re
58798,output = []
58799,#repl_str = re.compile('\d+.?\d*')
58800,repl_str = re.compile('^\d+$')
58801,#t = r'\d+.?\d*'
58802,line = lines.split()
58803,for word in line:
58804,"        match = re.search(repl_str, word)"
58805,        if match:
58806,            output.append(float(match.group()))
58807,print (output)
58808,"re.findall(r'\d+', ""hello 12 hi 89"")"
58809,"['12', '89']"
58810,"re.findall(r'\b\d+\b', ""hello 12 hi 89 33F AC 777"")"
58811,"['12', '89', '777']"
58812,findall()
58813,repl_str = re.compile('\d+.?\d*')
58814,repl_str = re.compile('\d+\.?\d*')
58815,"re.search(re.compile(r'\d+.?\d*'), ""42G"").group()"
58816,"re.search(re.compile(r'\d+\.?\d*'), ""42G"").group()"
58817,\D
58818,import re
58819,
58820,"phone_number = ""(619) 459-3635"""
58821,"phone_number = re.sub(r""\D"", """", phone_number)"
58822,print(phone_number)
58823,r
58824,"r""\D"""
58825,\D
58826,"line2 = ""hello 12 hi 89""  # this is the given string "
58827,"temp1 = re.findall(r'\d+', line2) # find number of digits through regular expression"
58828,"res2 = list(map(int, temp1))"
58829,print(res2)
58830,def get_first_nbr_from_str(input_str):
58831,    '''
58832,    :param input_str: strings that contains digit and words
58833,    :return: the number extracted from the input_str
58834,    demo:
58835,    'ab324.23.123xyz': 324.23
58836,    '.5abc44': 0.5
58837,    '''
58838,"    if not input_str and not isinstance(input_str, str):"
58839,        return 0
58840,    out_number = ''
58841,    for ele in input_str:
58842,        if (ele == '.' and '.' not in out_number) or ele.isdigit():
58843,            out_number += ele
58844,        elif out_number:
58845,            break
58846,    return float(out_number)
58847,a = []
58848,"line = ""abcd 1234 efgh 56.78 ij"""
58849,for word in line.split():
58850,    try:
58851,        a.append(float(word))
58852,    except ValueError:
58853,        pass
58854,print(a)
58855,"[1234.0, 56.78]"
58856,itertools.groupby
58857,itertools.groupby()
58858,str.isdigit()
58859,from itertools import groupby
58860,"my_str = ""hello 12 hi 89"""
58861,
58862,"l = [int(''.join(i)) for is_digit, i in groupby(my_str, str.isdigit) if is_digit]"
58863,l
58864,"[12, 89]"
58865,groupby
58866,str.isdigit
58867,">>> data = 'hs122 125 &55,58, 25'"
58868,>>> new_data = ''.join((ch if ch in '0123456789.-e' else ' ') for ch in data)
58869,>>> numbers = [i for i in new_data.split()]
58870,>>> print(numbers)
58871,"['122', '125', '55', '58', '25']"
58872,>>> import re
58873,">>> data = 'hs122 125 &55,58, 25'"
58874,">>> numbers = re.findall(r'\d+', data)"
58875,>>> print(numbers)
58876,"['122', '125', '55', '58', '25']"
58877,"re.findall(r'[\d.e-]+', data)"
58878,num_char
58879,s = 'hello X42 I\'m a Y-32.35 string Z30'
58880,"xy = (""X"", ""Y"")"
58881,"num_char = (""."", ""+"", ""-"")"
58882,
58883,l = []
58884,
58885,tokens = s.split()
58886,for token in tokens:
58887,
58888,    if token.startswith(xy):
58889,"        num = """""
58890,        for char in token:
58891,            # print(char)
58892,            if char.isdigit() or (char in num_char):
58893,                num = num + char
58894,
58895,        try:
58896,            l.append(float(num))
58897,        except ValueError:
58898,            pass
58899,
58900,print(l)
58901,import re
58902,"def find_numbers(string, ints=True):            "
58903,"    numexp = re.compile(r'[-]?\d[\d,]*[\.]?[\d{2}]*') #optional - in front"
58904,    numbers = numexp.findall(string)    
58905,"    numbers = [x.replace(',','') for x in numbers]"
58906,    if ints is True:
58907,"        return [int(x.replace(',','').split('.')[0]) for x in numbers]            "
58908,    else:
58909,        return numbers
58910,def extract_nbr(input_str):
58911,    if input_str is None or input_str == '':
58912,        return 0
58913,
58914,    out_number = ''
58915,    for ele in input_str:
58916,        if ele.isdigit():
58917,            out_number += ele
58918,    return float(out_number)    
58919,"str1 = ""There are 2 apples for 4 persons"""
58920,
58921,# printing original string 
58922,"print(""The original string : "" + str1) # The original string : There are 2 apples for 4 persons"
58923,
58924,# using List comprehension + isdigit() +split()
58925,# getting numbers from string 
58926,res = [int(i) for i in str1.split() if i.isdigit()]
58927,
58928,"print(""The numbers list is : "" + str(res)) # The numbers list is : [2, 4]"
58929,--python
58930,-p
58931,"virtualenv --python=""/usr/bin/python2.6"" ""/path/to/new/virtualenv/"""
58932,virtualenv -p `which python2.6` <path/to/new/virtualenv>
58933,"python3 -m venv ""my_env_name"""
58934,venv
58935,virtualenv
58936,pyvenv
58937,"pyvenv ""/path/to/new/virtual/environment"""
58938,python3 -m venv <envname>
58939,pyvenv
58940,venv
58941,python 3 -m venv <myenvname>
58942,pyvenv
58943,python3 -m venv ...
58944,python-config
58945,python-config
58946,venv
58947,python3.5 -m venv venv
58948,venv
58949,virtualenv
58950,venv
58951,py
58952,py -3.3 -m venv my_venv
58953,venv
58954,mkdir ~/src
58955,wget http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz
58956,tar -zxvf Python-2.7.9.tgz
58957,cd Python-2.7.9
58958,mkdir ~/.localpython
58959,./configure --prefix=$HOME/.localpython
58960,make
58961,make install
58962,cd ~/src
58963,wget https://pypi.python.org/packages/5c/79/5dae7494b9f5ed061cff9a8ab8d6e1f02db352f3facf907d9eb614fb80e9/virtualenv-15.0.2.tar.gz#md5=0ed59863994daf1292827ffdbba80a63
58964,tar -zxvf virtualenv-15.0.2.tar.gz
58965,cd virtualenv-15.0.2/
58966,~/.localpython/bin/python setup.py install
58967,virtualenv ve -p $HOME/.localpython/bin/python2.7
58968,source ve/bin/activate   
58969,~/.localpython/bin/virtualenv
58970,virtualenv
58971,source ve/bin/activate
58972,source activate
58973,virtualenv venv --python=python2.7
58974,virtualenv venv --python=/usr/local/bin/python
58975,which python
58976,which python3
58977,>> /usr/local/bin/python3
58978,virtualenv venv --python=/usr/local/bin/python3
58979,virtualenv venv -p `which python`
58980,virtualenv venv -p `which python3`
58981,virtualenv venv --python=python3.6
58982,virtualenv env --python=python2
58983,virtualenv venv --python=<insert_your_python_version_here>
58984,<insert_your_python_version_here>
58985,C:\Python\Python368\python.exe
58986,virtualenv --python=/usr/bin/python2.6 <path/to/myvirtualenv>
58987,-p
58988,python3.6
58989,python3.5
58990,virtualenv --python=c:\Python25\python.exe envname
58991,python.exe
58992,WindowsError: [Error 5] Access is denied
58993,pip install virtualenv
58994,virtualenv
58995, $ which pip   
58996, $ which pip
58997, /usr/local/bin/pip
58998,$ ls -al /usr/local/bin/pip
58999,lrwxrwxr-x  1 root  admin  65 Apr 10  2015 /usr/local/bin/pip ->
59000,../../../Library/Frameworks/Python.framework/Versions/2.7/bin/pip
59001,-p flag
59002,$ virtualenv -p python3.2 my_env  
59003,Running virtualenv with interpreter /usr/local/bin/python3.2  
59004,New python executable in my_env/bin/python  
59005,"Installing setuptools, pip...done.  "
59006,virtualenv my_env
59007,virtualenv
59008,/usr/bin
59009, /usr/local/bin
59010,python2.7
59011,python3.2
59012,~/.bash_profile
59013,export WORKON_HOME=$HOME/.virtualenvs
59014,export PROJECT_HOME=$HOME/django_projects  #Not very important -- mkproject command uses this
59015,#Added the following based on: 
59016,#http://stackoverflow.com/questions/19665327/virtualenvwrapper-installation-snow-leopard-python
59017,export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7 
59018,#source /usr/local/bin/virtualenvwrapper.sh
59019,source /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh
59020,-p option
59021,$ mkvirtualenv -p /usr/local/bin/python3.2 my_env
59022,Running virtualenv with interpreter /usr/local/bin/python3
59023,New python executable in my_env/bin/python
59024,"Installing setuptools, pip...done."
59025,Usage: source deactivate
59026,
59027,removes the 'bin' directory of the environment activated with 'source
59028,activate' from PATH. 
59029,which pip
59030,/usr/local/bin/pip
59031,/usr/local/bin
59032,$ ls -al pip
59033,pip -> ../../../Library/Frameworks/Python.framework/Versions/2.7/bin/pip
59034,mkproject
59035,mkproject -p /usr/bin/python3.6 myNewPython36Project
59036,/usr/local/bin
59037,ls -al pip
59038,-rwxr-xr-x  1 root  admin  266 23 Mar 09:40 pip
59039,virtualenv -p
59040,/mnt/Vancouver/apps/python_versions/src/Python-3.7.4.tgz
59041,/mnt/Vancouver/apps/python_versions/src/Python-3.7.4/
59042,cd /mnt/Vancouver/apps/python_versions/src/Python-3.7.4/
59043,time ./configure                 ## 17 sec
59044,time make                        ## 1 min 51 sec
59045,time sudo make install           ## 18 sec
59046,time make clean                  ## 0.3 sec
59047,$ which python
59048,/usr/bin/python
59049,
59050,$ python --version
59051,Python 3.8.0
59052,
59053,$ which python3.7
59054,/usr/local/bin/python3.7
59055,
59056,$ python    ## Python 3.8 [system / env]
59057,"Python 3.8.0 (default, Oct 23 2019, 18:51:26) "
59058,[GCC 9.2.0] on linux
59059,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
59060,>>>
59061,
59062,$ python3.7    ## newly-installed Python 3.7 package
59063,"Python 3.7.4 (default, Nov 20 2019, 11:36:53) "
59064,[GCC 9.2.0] on linux
59065,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
59066,>>> import sys
59067,>>> print(sys.version)
59068,"3.7.4 (default, Nov 20 2019, 11:36:53) "
59069,[GCC 9.2.0]
59070,>>>
59071,
59072,$ python3.7 --version                                                                                                 
59073,Python 3.7.4
59074,venv
59075,venv
59076,python3 -m venv tutorial-env
59077,tutorial-env
59078,python3.7 -m venv ~/venv/py3.7      ## create Python 3.7-based venv
59079,source ~/venv/py3.7/bin/activate    ## activate that venv
59080,"deactivate                          ## deactivate that venv (when done, there)"
59081,~/.bashrc
59082,"alias p37='echo ""   [Python 3.7 venv (source ~/venv/py3.7/bin/activate)]"" && source ~/venv/py3.7/bin/activate'"
59083,$ p37                                                                                                                 
59084,[Python 3.7 venv (source ~/venv/py3.7/bin/activate)]
59085,
59086,(py3.7)$ python --version
59087,Python 3.7.4
59088,
59089,(py3.7)$ python
59090,"Python 3.7.4 (default, Nov 20 2019, 11:36:53) "
59091,[GCC 9.2.0] on linux
59092,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
59093,>>> import sys
59094,>>> print(sys.version)
59095,"3.7.4 (default, Nov 20 2019, 11:36:53) "
59096,[GCC 9.2.0] 
59097,>>>
59098,sudo make altinstall
59099,./configure --prefix=~/my-python-3.7 && make -j8 && make install
59100,~/my-python-3.7/bin/python -m venv myvirtualenv
59101,virtualenv --python=python3.8 env/place/you/want/to/save/to
59102,python3.8 -m venv env/place/you/want/to/save/to
59103,python3.2
59104,$ virtualenv --python=/usr/bin/python3.2 name_of_your_virtualenv
59105,$ source activate name_of_your_virtualenv
59106,python --version
59107,-p
59108,virtualenv -p python2 myenv
59109,virtualenv -p python3 myenv
59110,virtualenv
59111,python3 -m virtualenv venv
59112,c:\Python34\Scripts\virtualenv.exe venv
59113,venv/bin/python
59114,
59115,"Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44) "
59116,[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
59117,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
59118,>>>
59119,pip3 install virtualenv
59120,-p
59121,-p
59122,~/.bashrc
59123,export VIRTUALENV_PYTHON=/path/to/desired/version
59124,virtualenv
59125,-p
59126,export VIRTUALENVWRAPPER_PYTHON=/path/to/desired/version
59127,virtualenvwrapper
59128,"ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"""
59129,
59130,
59131,brew install pyenv
59132,pyenv install 2.7.10
59133,pyenv global 2.7.10
59134,export PATH=/Users/{USERNAME}/.pyenv/versions/2.7.10/bin:$PATH
59135,mkvirtualenv -p ~/.pyenv/versions/2.7.10/bin/python  {virtual_env_name}
59136,pip install -r requirements.txt
59137,mkvirtualenv -p ~/.pyenv/versions/2.7.10/bin/python  {virtual_env_name}
59138,pyenv
59139,pyenv-virtualenv
59140,virtualenv -p $(which python2) <path/to/new/virtualenv/>
59141,mkvirtualenv -p $(which python2) <env_name>
59142, $ python3 -m pip install virtualenv
59143, $ python3 -m virtualenv --python=python2 vp27
59144, $ source vp27/bin/activate
59145, (vp27)$ python --version
59146, Python 2.7.14
59147,python3 -m pip install virtualenv
59148,python=python3.6
59149,python -V
59150,3.6
59151,virtualenv venv --python=pythonX.X
59152,py
59153,py -[my version] -m venv env
59154,env
59155,[my version]
59156,py -3.7 -m venv env
59157,./env/Scripts/activate
59158,env
59159,py -3.7 -m venv env
59160,-m
59161,py -3.4x32 -m venv venv34
59162,py -2.6.2 -m venv venv26
59163,py
59164,py -3.4 -m venv c:\path\to\wherever\you\want\it
59165,virtualenv --python=/usr/bin/python3 env
59166,source env/bin/activate
59167,pyenv install 3.7.3
59168,pyenv local 3.7.3
59169,$ python --version
59170,Python 3.7.3
59171,python -m venv .
59172,source bin/activate
59173,$ python --version
59174,Python 3.7.3
59175,rm -rf bin
59176,pyenv virtualenv <python_version> <environment_name>
59177,curl https://pyenv.run | bash
59178,exec $SHELL
59179,virtualenv
59180,pip
59181,pyenv
59182,pip
59183,>C:\Users\...\Python\Python36\python.exe -m venv venv
59184,>venv\Scripts\activate.bat
59185,>python --version
59186,tar zxvf Python-3.7.8.tgz
59187,sudo cp -r Python-3.7.8 /usr/bin
59188,cd /usr/bin/Python-3.7.8/
59189,ls
59190,sudo time ./configure
59191,sudo time make
59192,time sudo make install
59193,time make clean
59194,which python
59195,python --version
59196,which python 3.7
59197,python3.7 --version
59198,python3.7
59199,exit()
59200,sudo apt install venv
59201,python3.7 -m venv .venv
59202,source .venv/bin/activate
59203,python --version
59204,MacBook-Pro-2:~ admin$ virtualenv venv2 --python=`which python2`
59205,Running virtualenv with interpreter /usr/local/bin/python2
59206,New python executable in /Users/admin/venv2/bin/python
59207,"Installing setuptools, pip, wheel...done."
59208,MacBook-Pro-2:~ admin$ 
59209,MacBook-Pro-2:~ admin$ ls venv2/bin/
59210,activate        easy_install        pip2.7          python2.7
59211,activate.csh        easy_install-2.7    python          wheel
59212,activate.fish       pip         python-config
59213,activate_this.py    pip2            python2
59214,MacBook-Pro-2:~ admin$ 
59215,MacBook-Pro-2:~ admin$ virtualenv venv3 --python=`which python3`
59216,Running virtualenv with interpreter /usr/local/bin/python3
59217,Using base prefix '/Library/Frameworks/Python.framework/Versions/3.6'
59218,New python executable in /Users/admin/venv3/bin/python3
59219,Also creating executable in /Users/admin/venv3/bin/python
59220,"Installing setuptools, pip, wheel...done."
59221,MacBook-Pro-2:~ admin$ 
59222,MacBook-Pro-2:~ admin$ ls venv3/bin/
59223,activate        easy_install        pip3.6          python3.6
59224,activate.csh        easy_install-3.6    python          wheel
59225,activate.fish       pip         python-config
59226,activate_this.py    pip3            python3
59227,MacBook-Pro-2:~ admin$ 
59228,MacBook-Pro-2:~ admin$ which python2
59229,/usr/local/bin/python2
59230,MacBook-Pro-2:~ admin$ 
59231,MacBook-Pro-2:~ admin$ which python3
59232,/usr/local/bin/python3
59233,MacBook-Pro-2:~ admin$ 
59234,sudo apt-get install python3-minimal
59235,
59236,virtualenv --no-site-packages --distribute -p /usr/bin/python3 ~/.virtualenvs/py3
59237,virtualenv -p python3 myenv
59238,pip install --upgrade virtualenv
59239,.exe
59240,virtualenv -p=C:\Python27\python2.exe <envname>
59241,pip install pyinstaller
59242,pyinstaller yourprogram.py
59243,dist
59244,pyinstaller -F yourprogram.py
59245,pyinstaller -F --paths=<your_path>\Lib\site-packages  yourprogram.py
59246, pip install pynput==1.6.8
59247,cpython
59248,.py
59249,.pyc
59250,.dll
59251,.so
59252,.pyo
59253,.pyc
59254,pyinstaller.exe --onefile MyCode.py
59255,--onefile
59256,api-ms-win-crt-runtime-l1-1-0.dll
59257,vcredist
59258,cx_Freeze
59259,cx_Freeze
59260,pyinstaller yourfile.py -F --onefile
59261,pip install PyInstaller
59262,"pyinstaller --hiddenimport win32timezone -F ""Backup Program.py"""
59263,pyinstaller --onefile --windowed myscript.py
59264,from distutils.core import setup
59265,import py2exe
59266,
59267,from distutils.filelist import findall
59268,import matplotlib
59269,
59270,setup(
59271,"    console = ['PlotMemInfo.py'],"
59272,
59273,    options = {
59274,        'py2exe': {
59275,"            'packages': ['matplotlib'],"
59276,"            'dll_excludes': ['libgdk-win32-2.0-0.dll',"
59277,"                             'libgobject-2.0-0.dll',"
59278,            'libgdk_pixbuf-2.0-0.dll']
59279,        }
59280,"    },"
59281,    data_files = matplotlib.get_py2exe_datafiles()
59282,)
59283,zipapp
59284,.pyz
59285,python myapp.pyz
59286,requirements.txt
59287,$ python -m pip install -r requirements.txt --target myapp
59288,"$ python -m zipapp -p ""interpreter"" myapp"
59289,interpreter
59290,/usr/bin/env python
59291,.pyz
59292,.pyzw
59293,python3.dll
59294,The embedded distribution does not include the Microsoft C Runtime
59295,.so
59296,--onefile
59297,Target: %windir%\system32\cmd.exe /c start dist\web_wrapper\web_wrapper.exe
59298,"Start in: ""%windir%\system32\cmd.exe /c start dist\web_wrapper\"""
59299,python
59300,--onefile 
59301,python3 myfile.py
59302,w
59303,a
59304,w+
59305,a+
59306,r+
59307,fopen()
59308,fopen
59309, The argument mode points to a string beginning with one of the following
59310, sequences (Additional characters may follow these sequences.):
59311,
59312, ``r''   Open text file for reading.  The stream is positioned at the
59313,         beginning of the file.
59314,
59315, ``r+''  Open for reading and writing.  The stream is positioned at the
59316,         beginning of the file.
59317,
59318, ``w''   Truncate file to zero length or create text file for writing.
59319,         The stream is positioned at the beginning of the file.
59320,
59321, ``w+''  Open for reading and writing.  The file is created if it does not
59322,"         exist, otherwise it is truncated.  The stream is positioned at"
59323,         the beginning of the file.
59324,
59325, ``a''   Open for writing.  The file is created if it does not exist.  The
59326,         stream is positioned at the end of the file.  Subsequent writes
59327,"         to the file will always end up at the then current end of file,"
59328,         irrespective of any intervening fseek(3) or similar.
59329,
59330, ``a+''  Open for reading and writing.  The file is created if it does not
59331,         exist.  The stream is positioned at the end of the file.  Subse-
59332,         quent writes to the file will always end up at the then current
59333,"         end of file, irrespective of any intervening fseek(3) or similar."
59334,w
59335,w+
59336,The file is created if it does not exist
59337,b
59338,rb
59339,wb
59340,r+b
59341,+
59342,a
59343,w
59344,r
59345,+
59346,w
59347,w
59348,a
59349,a
59350,"Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening fseek(3) or similar"
59351,                  | r   r+   w   w+   a   a+
59352,------------------|--------------------------
59353,read              | +   +        +        +
59354,write             |     +    +   +    +   +
59355,write after seek  |     +    +   +
59356,create            |          +   +    +   +
59357,truncate          |          +   +
59358,position at start | +   +    +   +
59359,position at end   |                   +   +
59360,a
59361,a+
59362,seek
59363,a+
59364,"write('aa'); seek(0, 0); read(1); write('b')"
59365,write
59366,"write('aa'); seek(0, 0); read(2); write('b')"
59367,write
59368,IOError
59369,"open(file,'a'); close(); open(file,'r+')"
59370,a
59371,a+
59372,seek()
59373,w
59374,a
59375,w+
59376,a+
59377,str
59378,io.TextIOBase
59379,bytes
59380,io.BufferedIOBase
59381,t
59382,r
59383,rt
59384,seek(0)
59385,"write(""foo"")"
59386,'r' open for reading (default)
59387,"'w' open for writing, truncating the file first"
59388,"'x' open for exclusive creation, failing if the file already exists"
59389,"'a' open for writing, appending to the end of the file if it exists"
59390,----
59391,'b' binary mode
59392,'t' text mode (default)
59393,'+' open a disk file for updating (reading and writing)
59394,'U' universal newlines mode (for backwards compatibility; should not be used in new code)
59395,r
59396,w
59397,x
59398,a
59399,b
59400,t
59401,+
59402,U
59403,t
59404,r
59405,rt
59406,open()
59407,rb
59408,open()
59409,*.bz2
59410,rt
59411,wt
59412,xt
59413,at
59414,rb
59415,wb
59416,xb
59417,ab
59418,+
59419,map()
59420,map
59421,"$ python -m timeit -s'xs=range(10)' 'map(hex, xs)'"
59422,"100000 loops, best of 3: 4.86 usec per loop"
59423,$ python -m timeit -s'xs=range(10)' '[hex(x) for x in xs]'
59424,"100000 loops, best of 3: 5.58 usec per loop"
59425,"$ python -m timeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'"
59426,"100000 loops, best of 3: 4.24 usec per loop"
59427,$ python -m timeit -s'xs=range(10)' '[x+2 for x in xs]'
59428,"100000 loops, best of 3: 2.32 usec per loop"
59429,"map(operator.attrgetter('foo'), objs)"
59430,[o.foo for o in objs]
59431,o
59432,str()
59433,map
59434,"map(sum, myLists)"
59435,[sum(x) for x in myLists]
59436,sum(x) for x...
59437,sum(_) for _...
59438,sum(readableName) for readableName...
59439,filter
59440,reduce
59441,itertools
59442,map
59443,map
59444,map
59445,map
59446,fmap
59447,"map(f, *lists)"
59448,"sumEach = partial(map,sum)"
59449,def sumEach(myLists):
59450,    return [sum(_) for _ in myLists]
59451,for
59452,map
59453,filter
59454,itertools
59455,">>> map(str, range(10**100))"
59456,<map object at 0x2201d50>
59457,>>> [str(n) for n in range(10**100)]
59458,# DO NOT TRY THIS AT HOME OR YOU WILL BE SAD #
59459,>>> (str(n) for n in range(10**100))
59460,<generator object <genexpr> at 0xacbdef>
59461,[...]
59462,list(x for x in range(5))
59463,from operator import neg
59464,"print({x:x**2 for x in map(neg,range(5))})"
59465,
59466,print({x:x**2 for x in [-y for y in range(5)]})
59467,
59468,print({x:x**2 for x in (-y for y in range(5))})
59469,[...]
59470,[x for x in...
59471,print(
59472,    {x:x**2 for x in (-y for y in range(5))}
59473,)
59474,rangeNeg5 = (-y for y in range(5))
59475,print(
59476,    {x:x**2 for x in rangeNeg5}
59477,)
59478,map
59479,"% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=map(f,xs)'"
59480,"1000000 loops, best of 3: 0.336 usec per loop            ^^^^^^^^^"
59481,map
59482,map
59483,"x[0], x[1], x[2], ..."
59484,f
59485,map
59486,map
59487,list(...)
59488,"% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=list(map(f,xs))'                                                                                                                                                "
59489,"10000 loops, best of 3: 165/124/135 usec per loop        ^^^^^^^^^^^^^^^"
59490,                    for list(<map object>)
59491,
59492,% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=[f(x) for x in xs]'                                                                                                                                      
59493,"10000 loops, best of 3: 181/118/123 usec per loop        ^^^^^^^^^^^^^^^^^^"
59494,"                    for list(<generator>), probably optimized"
59495,
59496,% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=list(f(x) for x in xs)'                                                                                                                                    
59497,"1000 loops, best of 3: 215/150/150 usec per loop         ^^^^^^^^^^^^^^^^^^^^^^"
59498,                    for list(<generator>)
59499,[...]
59500,(...)
59501,map
59502,f=lambda x:x+x
59503,dis
59504,">>> listComp = compile('[f(x) for x in xs]', 'listComp', 'eval')"
59505,>>> dis.dis(listComp)
59506,"  1           0 LOAD_CONST               0 (<code object <listcomp> at 0x2511a48, file ""listComp"", line 1>) "
59507,              3 MAKE_FUNCTION            0 
59508,              6 LOAD_NAME                0 (xs) 
59509,              9 GET_ITER             
59510,             10 CALL_FUNCTION            1 
59511,             13 RETURN_VALUE         
59512,>>> listComp.co_consts
59513,"(<code object <listcomp> at 0x2511a48, file ""listComp"", line 1>,)"
59514,>>> dis.dis(listComp.co_consts[0])
59515,  1           0 BUILD_LIST               0 
59516,              3 LOAD_FAST                0 (.0) 
59517,        >>    6 FOR_ITER                18 (to 27) 
59518,              9 STORE_FAST               1 (x) 
59519,             12 LOAD_GLOBAL              0 (f) 
59520,             15 LOAD_FAST                1 (x) 
59521,             18 CALL_FUNCTION            1 
59522,             21 LIST_APPEND              2 
59523,             24 JUMP_ABSOLUTE            6 
59524,        >>   27 RETURN_VALUE
59525,">>> listComp2 = compile('list(f(x) for x in xs)', 'listComp2', 'eval')"
59526,>>> dis.dis(listComp2)
59527,  1           0 LOAD_NAME                0 (list) 
59528,"              3 LOAD_CONST               0 (<code object <genexpr> at 0x255bc68, file ""listComp2"", line 1>) "
59529,              6 MAKE_FUNCTION            0 
59530,              9 LOAD_NAME                1 (xs) 
59531,             12 GET_ITER             
59532,             13 CALL_FUNCTION            1 
59533,             16 CALL_FUNCTION            1 
59534,             19 RETURN_VALUE         
59535,>>> listComp2.co_consts
59536,"(<code object <genexpr> at 0x255bc68, file ""listComp2"", line 1>,)"
59537,>>> dis.dis(listComp2.co_consts[0])
59538,  1           0 LOAD_FAST                0 (.0) 
59539,        >>    3 FOR_ITER                17 (to 23) 
59540,              6 STORE_FAST               1 (x) 
59541,              9 LOAD_GLOBAL              0 (f) 
59542,             12 LOAD_FAST                1 (x) 
59543,             15 CALL_FUNCTION            1 
59544,             18 YIELD_VALUE          
59545,             19 POP_TOP              
59546,             20 JUMP_ABSOLUTE            3 
59547,        >>   23 LOAD_CONST               0 (None) 
59548,             26 RETURN_VALUE
59549,">>> evalledMap = compile('list(map(f,xs))', 'evalledMap', 'eval')"
59550,>>> dis.dis(evalledMap)
59551,  1           0 LOAD_NAME                0 (list) 
59552,              3 LOAD_NAME                1 (map) 
59553,              6 LOAD_NAME                2 (f) 
59554,              9 LOAD_NAME                3 (xs) 
59555,             12 CALL_FUNCTION            2 
59556,             15 CALL_FUNCTION            1 
59557,             18 RETURN_VALUE 
59558,[...]
59559,list(...)
59560,map
59561,map
59562,filter
59563,itertools
59564,map
59565,filter
59566,reduce
59567,functools
59568,map
59569,filter
59570,lambda
59571,itertools
59572,map
59573,filter
59574,itertools
59575,functools
59576,itertools
59577,map
59578,filter
59579,itertools
59580,itertools
59581,functools
59582,operator
59583,itertools
59584,map
59585,filter
59586,itertools
59587,map
59588,filter
59589,"for x, y in somePoints:"
59590,    # (several lines of code here)
59591,    squared = [x ** 2 for x in numbers]
59592,"    # Oops, x was silently overwritten!"
59593,"for x, y in somePoints:"
59594,    # (several lines of code here)
59595,"    squared = map(lambda x: x ** 2, numbers)"
59596,x
59597,map
59598,filter
59599,imap
59600,ifilter
59601,itertools
59602,map
59603,filter
59604,"map(lambda x: x ** 2, numbers)"
59605,list(x ** 2 for x in numbers)
59606,map
59607,def square(x):
59608,    return x*x
59609,"squares = map(square, [1, 2, 3])"
59610,print(list(squares))
59611,print(list(squares))
59612,squares
59613,map
59614,map
59615,imap
59616,squares
59617,print(list(squares))
59618,map
59619,"map(lambda op1,op2: op1*op2, list1, list2)"
59620,"[op1*op2 for op1,op2 in zip(list1,list2)]"
59621,zip
59622,itertools.izip
59623,"map(operator.mul, list1, list2)"
59624,map
59625,map
59626,map
59627,map
59628,map
59629,lambda
59630,lambda
59631,const
59632,lambda
59633,map()
59634,list
59635,map()
59636,lambda
59637,%timeit
59638,"x_list = [(i, i+1, i+2, i*2, i-9) for i in range(1000)]"
59639,i_list = list(range(1000))
59640,"%timeit map(sum, x_list)  # creating iterator object"
59641,# Output: The slowest run took 9.91 times longer than the fastest. 
59642,# This could mean that an intermediate result is being cached.
59643,"# 1000000 loops, best of 3: 277 ns per loop"
59644,
59645,"%timeit list(map(sum, x_list))  # creating list with map"
59646,"# Output: 1000 loops, best of 3: 214 µs per loop"
59647,
59648,%timeit [sum(x) for x in x_list]  # creating list with list comprehension
59649,"# Output: 1000 loops, best of 3: 290 µs per loop"
59650,lambda
59651,"%timeit map(lambda i: i+1, i_list)"
59652,# Output: The slowest run took 8.64 times longer than the fastest. 
59653,# This could mean that an intermediate result is being cached.
59654,"# 1000000 loops, best of 3: 325 ns per loop"
59655,
59656,"%timeit list(map(lambda i: i+1, i_list))"
59657,"# Output: 1000 loops, best of 3: 183 µs per loop"
59658,
59659,%timeit [i+1 for i in i_list]
59660,"# Output: 10000 loops, best of 3: 84.2 µs per loop"
59661,%timeit (sum(i) for i in x_list)
59662,# Output: The slowest run took 6.66 times longer than the fastest. 
59663,# This could mean that an intermediate result is being cached.
59664,"# 1000000 loops, best of 3: 495 ns per loop"
59665,
59666,%timeit list((sum(x) for x in x_list))
59667,"# Output: 1000 loops, best of 3: 319 µs per loop"
59668,
59669,%timeit (i+1 for i in i_list)
59670,# Output: The slowest run took 6.83 times longer than the fastest. 
59671,# This could mean that an intermediate result is being cached.
59672,"# 1000000 loops, best of 3: 506 ns per loop"
59673,
59674,%timeit list((i+1 for i in i_list))
59675,"# Output: 10000 loops, best of 3: 125 µs per loop"
59676,list
59677,list(map())
59678,list
59679,map()
59680,# map_lambda
59681,"list(map(lambda x: x.add(), vals))"
59682,
59683,# map_operator
59684,from operator import methodcaller
59685,"list(map(methodcaller(""add""), vals))"
59686,
59687,# map_comprehension
59688,[x.add() for x in vals]
59689,vals
59690,int
59691,float
59692,DummyNum
59693,class DummyNum(object):
59694,"    """"""Dummy class"""""""
59695,"    __slots__ = 'n',"
59696,
59697,"    def __init__(self, n):"
59698,        self.n = n
59699,
59700,    def add(self):
59701,        self.n += 5
59702,add
59703,__slots__
59704,map_comprehension
59705,map
59706,"[*map(f, vals)]"
59707,[f(x) for x in vals]
59708,"list(map(methodcaller(""add""), vals))"
59709,"[methodcaller(""add"")(x) for x in vals]"
59710,map
59711,x.add()
59712,methodcaller
59713,"[*map(DummyNum.add, vals)]"
59714,DummyNum.add(x)
59715,x.add()
59716,list()
59717,[*map(...)]
59718,list()
59719,map
59720,list()
59721,x ** 2
59722,hex
59723,x ** 2
59724,import perfplot
59725,
59726,
59727,def standalone_map(data):
59728,"    return map(hex, data)"
59729,
59730,
59731,def list_map(data):
59732,"    return list(map(hex, data))"
59733,
59734,
59735,def comprehension(data):
59736,    return [hex(x) for x in data]
59737,
59738,
59739,b = perfplot.bench(
59740,"    setup=lambda n: list(range(n)),"
59741,"    kernels=[standalone_map, list_map, comprehension],"
59742,"    n_range=[2 ** k for k in range(20)],"
59743,"    equality_check=None,"
59744,)
59745,"b.save(""out.png"")"
59746,b.show()
59747,import perfplot
59748,import numpy as np
59749,
59750,
59751,def standalone_map(data):
59752,"    return map(lambda x: x ** 2, data[0])"
59753,
59754,
59755,def list_map(data):
59756,"    return list(map(lambda x: x ** 2, data[0]))"
59757,
59758,
59759,def comprehension(data):
59760,    return [x ** 2 for x in data[0]]
59761,
59762,
59763,def numpy_asarray(data):
59764,    return np.asarray(data[0]) ** 2
59765,
59766,
59767,def numpy_direct(data):
59768,    return data[1] ** 2
59769,
59770,
59771,b = perfplot.bench(
59772,"    setup=lambda n: (list(range(n)), np.arange(n)),"
59773,"    kernels=[standalone_map, list_map, comprehension, numpy_direct, numpy_asarray],"
59774,"    n_range=[2 ** k for k in range(20)],"
59775,"    equality_check=None,"
59776,)
59777,"b.save(""out2.png"")"
59778,b.show()
59779,"python -mtimeit -s ""xs=range(123456)"" ""map(hex, xs)"""
59780,"1000000 loops, best of 5: 218 nsec per loop"
59781,"python -mtimeit -s ""xs=range(123456)"" ""[hex(x) for x in xs]"""
59782,"10 loops, best of 5: 19.4 msec per loop"
59783,map
59784,map
59785,map
59786,map
59787,filter
59788,map
59789,filter
59790,In [1]: odd_cubes = [x ** 3 for x in range(10) if x % 2 == 1] # using a list comprehension
59791,
59792,"In [2]: odd_cubes_alt = list(map(lambda x: x ** 3, filter(lambda x: x % 2 == 1, range(10)))) # using map and filter"
59793,
59794,In [3]: odd_cubes == odd_cubes_alt
59795,Out[3]: True
59796,lambda
59797,map
59798,map
59799,filter
59800,def sum_items(*args):
59801,    return sum(args)
59802,
59803,
59804,"list_a = [1, 2, 3]"
59805,"list_b = [1, 2, 3]"
59806,
59807,"list_of_sums = list(map(sum_items,"
59808,"                        list_a, list_b))"
59809,">>> [3, 6, 9]"
59810,
59811,"comprehension = [sum(items) for items in iter(zip(list_a, list_b))]"
59812,def pair_list_items(*args):
59813,    return args
59814,
59815,"packed_list = list(map(pair_list_items,"
59816,"                       lista, *listb, listc.....listn))"
59817,print
59818,python -u <script.py>
59819,print
59820,flush
59821,"print(""Hello, World!"", flush=True)"
59822,print
59823,import sys
59824,sys.stdout.flush()
59825,print
59826,sys.stdout
59827,sys.stdout.flush()
59828,sys.stdout.flush()
59829,sys.stdout.flush()
59830,"print(..., flush=True)"
59831,print
59832,sys.stdout.flush()
59833,python -u <script.py>
59834,"print = functools.partial(print, flush=True)"
59835,python -h
59836,-u
59837,#!/usr/bin/python3
59838,#!/usr/bin/python3 -u
59839,./my_script.py
59840,-u
59841,print()
59842,sys.stdout.flush()
59843,sys.stdout.flush()
59844,sys.stdout.flush()
59845,import sys sys.stdout.flush()
59846,"print(..., flush=True)"
59847,file.flush()
59848,sys.stdout
59849,"print = partial(print, flush=True)"
59850,-u
59851,PYTHONUNBUFFERED=TRUE
59852,flush=True
59853,print
59854,"print('foo', flush=True) "
59855,flush
59856,__future__
59857,from __future__ import print_function
59858,import sys
59859,
59860,"if sys.version_info[:2] < (3, 3):"
59861,    old_print = print
59862,"    def print(*args, **kwargs):"
59863,"        flush = kwargs.pop('flush', False)"
59864,"        old_print(*args, **kwargs)"
59865,        if flush:
59866,"            file = kwargs.get('file', sys.stdout)"
59867,"            # Why might file=None? IDK, but it works for print(i, file=None)"
59868,            file.flush() if file is not None else sys.stdout.flush()
59869,six
59870,file.flush()
59871,import sys
59872,print 'delayed output'
59873,sys.stdout.flush()
59874,flush=True
59875,import functools
59876,"print = functools.partial(print, flush=True)"
59877,">>> print = functools.partial(print, flush=True)"
59878,>>> print
59879,"functools.partial(<built-in function print>, flush=True)"
59880,>>> print('foo')
59881,foo
59882,">>> print('foo', flush=False)"
59883,foo
59884,print
59885,def foo():
59886,"    printf = functools.partial(print, flush=True)"
59887,    printf('print stuff like this')
59888,-u
59889,$ python -u script.py
59890,$ python -um package.module
59891,$ export PYTHONUNBUFFERED=TRUE
59892,C:\SET PYTHONUNBUFFERED=TRUE
59893,flush
59894,>>> from __future__ import print_function
59895,>>> help(print)
59896,print(...)
59897,"    print(value, ..., sep=' ', end='\n', file=sys.stdout)"
59898,    
59899,"    Prints the values to a stream, or to sys.stdout by default."
59900,    Optional keyword arguments:
59901,    file: a file-like object (stream); defaults to the current sys.stdout.
59902,"    sep:  string inserted between values, default a space."
59903,"    end:  string appended after the last value, default a newline."
59904,__future__
59905,flush
59906,sys.stdout.flush()
59907,sys.stdout.flush()
59908,"import functools;   print = functools.partial(print, flush=True)"
59909,print
59910,builtins.print
59911,"import functools;   print2 = functools.partial(print, flush=True); builtins.print=print2"
59912,sys.stdout
59913,"sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)"
59914,stdout.write
59915,print
59916,UnsupportedOperation: IOStream has no fileno.
59917,"buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer."
59918,print()
59919,"print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)"
59920,"print(""Visiting toilet"", flush=True)"
59921,-u
59922,-u
59923,stdout
59924,class flushfile:
59925,"  def __init__(self, f):"
59926,    self.f = f
59927,
59928,"  def write(self, x):"
59929,    self.f.write(x)
59930,    self.f.flush()
59931,
59932,import sys
59933,sys.stdout = flushfile(sys.stdout)
59934,print
59935,sys.stdout
59936,flush
59937,"def __getattr__(self,name): return object.__getattribute__(self.f, name)"
59938,"f = open('xyz.log', 'a', 0)"
59939,"sys.stdout = open('out.log', 'a', 0)"
59940,flush = True
59941,"def print(*objects, sep=' ', end='\n', file=sys.stdout, flush=True):"
59942,"    __builtins__.print(*objects, sep=sep, end=end, file=file, flush=flush)"
59943,#!/usr/bin/env python
59944,class flushfile(file):
59945,"    def __init__(self, f):"
59946,        self.f = f
59947,"    def write(self, x):"
59948,        self.f.write(x)
59949,        self.f.flush()
59950,
59951,import sys
59952,sys.stdout = flushfile(sys.stdout)
59953,
59954,"print ""foo"""
59955,Traceback (most recent call last):
59956,"  File ""./passpersist.py"", line 12, in <module>"
59957,"    print ""foo"""
59958,ValueError: I/O operation on closed file
59959,class flushfile(file):
59960,class flushfile(object):
59961,class FlushFile(object):
59962,"    def __init__(self, fd):"
59963,        self.fd = fd
59964,
59965,"    def write(self, x):"
59966,        ret = self.fd.write(x)
59967,        self.fd.flush()
59968,        return ret
59969,
59970,"    def writelines(self, lines):"
59971,        ret = self.writelines(lines)
59972,        self.fd.flush()
59973,        return ret
59974,
59975,    def flush(self):
59976,        return self.fd.flush
59977,
59978,    def close(self):
59979,        return self.fd.close()
59980,
59981,    def fileno(self):
59982,        return self.fd.fileno()
59983,file
59984,file
59985,'''To write to screen in real-time'''
59986,"message = lambda x: print(x, flush=True, end="""")"
59987,message('I am flushing out now...')
59988,for i in range(100000):
59989,"    print('{:s}\r'.format(''), end='', flush=True)"
59990,"    print('Loading index: {:d}/100000'.format(i+1), end='')"
59991,global
59992,global
59993,">>> sub = ['0', '0', '0', '0']"
59994,>>> def getJoin():
59995,...     return '.'.join(sub)
59996,...
59997,>>> getJoin()
59998,'0.0.0.0'
59999,def foo(): ...
60000,foo = ...
60001,global
60002,def bob():
60003,"    me = ""locally defined""    # Defined only in local context"
60004,    print(me)
60005,
60006,bob()
60007,print(me)     # Asking for a global variable
60008,locally defined
60009,Traceback (most recent call last):
60010,"  File ""file.py"", line 9, in <module>"
60011,    print(me)
60012,NameError: name 'me' is not defined
60013,global
60014,def bob():
60015,    global me
60016,"    me = ""locally defined""   # Defined locally but declared as global"
60017,    print(me)
60018,
60019,bob()
60020,print(me)     # Asking for a global variable
60021,locally defined
60022,locally defined
60023,global
60024,globals
60025,from module import variable
60026,import module.variable
60027,variable
60028,module.
60029,nonlocal
60030,global
60031,global
60032,global
60033,foo = 1
60034,def test():
60035,    foo = 2 # new local foo
60036,
60037,def blub():
60038,    global foo
60039,    foo = 3 # changes the value of the global foo
60040,sub
60041,foo = 3
60042,blub
60043,blub()
60044,foo
60045,blub()
60046,test()
60047,foo
60048,foo
60049,>>> a = 1
60050,>>> def p():
60051,"    print(a) # accessing global scope, no binding going on"
60052,>>> def q():
60053,    a = 3 # binding a name in local scope - hiding global
60054,    print(a)
60055,>>> def r():
60056,"    print(a) # fail - a is bound to local scope, but not assigned yet"
60057,    a = 4
60058,>>> p()
60059,1
60060,>>> q()
60061,3
60062,>>> r()
60063,Traceback (most recent call last):
60064,"  File ""<pyshell#35>"", line 1, in <module>"
60065,    r()
60066,"  File ""<pyshell#32>"", line 2, in r"
60067,"    print(a) # fail - a is bound to local scope, but not assigned yet"
60068,UnboundLocalError: local variable 'a' referenced before assignment
60069,>>> 
60070,value = 42
60071,
60072,def doit():
60073,    print value
60074,    value = 0
60075,
60076,doit()
60077,print value
60078,value = 0
60079,doit()
60080,print value
60081,UnboundLocalError.
60082,value
60083,value
60084,global
60085,global
60086,nonlocal
60087,let
60088,global
60089,>>> x = 1         # global 
60090,>>> def foo():
60091,"        print x       # accessing it, it is global"
60092,
60093,>>> foo()
60094,1
60095,>>> def foo():   
60096,        x = 2        # local x
60097,        print x 
60098,
60099,>>> x            # global x
60100,1
60101,>>> foo()        # prints local x
60102,2
60103,global
60104,words = [...] 
60105,
60106,def contains (word): 
60107,    global words             # <- not really needed
60108,    return (word in words) 
60109,
60110,def add (word): 
60111,    global words             # must specify that we're working with a global keyword
60112,    if word not in words: 
60113,        words += [word]
60114,global
60115,global
60116,global
60117,global
60118,global
60119,global
60120,global
60121,"# Attempt #1, will fail"
60122,# We cannot import ``catbus`` here
60123,"# as that would lead to an import loop somewhere else,"
60124,# or importing ``catbus`` is so expensive that you don't want to 
60125,# do it automatically  when importing this module
60126,
60127,top_level_something_or_other = None
60128,
60129,def foo1():
60130,    import catbus
60131,    # Now ``catbus`` is visible for anything else defined inside ``foo()`` 
60132,    # at *compile time*
60133,"    bar()  # But ``bar()`` is a call, not a definition. ``catbus`` "
60134,           # is invisible to it.
60135,
60136,def bar():
60137,    # `bar()` sees what is defined in the module
60138,    # This works:
60139,    print(top_level_something_or_other)
60140,"    # This doesn't work, we get an exception: NameError: name 'catbus' is not defined"
60141,    catbus.run()
60142,global
60143,"# Attempt #2, will work"
60144,# We still cannot import ``catbus`` here
60145,"# as that would lead to an import loop somewhere else,"
60146,# or importing ``catbus`` is so expensive that you don't want to 
60147,# do it automatically  when importing this module
60148,
60149,top_level_something_or_other = None
60150,
60151,def foo2():
60152,    import catbus
60153,    global catbus  # Now catbus is also visible to anything defined 
60154,                   # in the top-level module *at runtime* 
60155,    bar()
60156,
60157,def bar():
60158,    # `bar` sees what is defined in the module and when run what is available at run time
60159,    # This still works:
60160,    print(top_level_something_or_other)
60161,    # This also works now:
60162,    catbus.run()
60163,bar()
60164,foo
60165,"# Attempt 3, will work"
60166,# We cannot import ``catbus`` here
60167,"# as that would lead to an import loop somewhere else,"
60168,# or importing ``catbus`` is so expensive that you don't want to 
60169,# do it automatically  when importing this module
60170,
60171,top_level_something_or_other = None
60172,
60173,def foo3():
60174,
60175,    def bar():
60176,        # ``bar()`` sees what is defined in the module *and* what is defined in ``foo()``
60177,        print(top_level_something_or_other)
60178,        catbus.run()
60179,
60180,    import catbus
60181,    # Now catbus is visible for anything else defined inside foo() at *compile time*
60182,"    bar()  # Which now includes bar(), so this works"
60183,bar()
60184,foo()
60185,bar()
60186,catbus
60187,global
60188,global
60189,x = 1
60190,
60191,def myfunc():
60192,  global x
60193,
60194,  # formal parameter
60195,  def localfunction(x):
60196,    return x+1
60197,
60198,  # import statement
60199,  import os.path as x
60200,
60201,  # for loop control target
60202,  for x in range(10):
60203,    print x
60204,
60205,  # class definition
60206,  class x(object):
60207,    def __init__(self):
60208,      pass
60209,
60210,  #function definition
60211,  def x():
60212,"    print ""I'm bad"""
60213,def out():
60214,    global x
60215,    x = 1
60216,    print(x)
60217,    return
60218,
60219,
60220,out()
60221,
60222,print (x)
60223,def out():
60224,     # Taking out the global will give you an error since the variable x is no longer 'global' or in other words: accessible for other commands
60225,    x = 1
60226,    print(x)
60227,    return
60228,
60229,
60230,out()
60231,
60232,print (x)
60233,from .mymodule import myfunction
60234,from mymodule import myfunction
60235,ImportError: attempted relative import with no known parent package
60236,ModuleNotFoundError: No module named 'mymodule'
60237,"SystemError: Parent module '' not loaded, cannot perform relative import"
60238,main.py
60239,mypackage/
60240,    __init__.py
60241,    mymodule.py
60242,    myothermodule.py
60243,mymodule.py
60244,#!/usr/bin/env python3
60245,
60246,# Exported function
60247,def as_int(a):
60248,    return int(a)
60249,
60250,# Test function for module  
60251,def _test():
60252,    assert as_int('1') == 1
60253,
60254,if __name__ == '__main__':
60255,    _test()
60256,myothermodule.py
60257,#!/usr/bin/env python3
60258,
60259,from .mymodule import as_int
60260,
60261,# Exported function
60262,"def add(a, b):"
60263,    return as_int(a) + as_int(b)
60264,
60265,# Test function for module  
60266,def _test():
60267,"    assert add('1', '1') == 2"
60268,
60269,if __name__ == '__main__':
60270,    _test()
60271,main.py
60272,#!/usr/bin/env python3
60273,
60274,from mypackage.myothermodule import add
60275,
60276,def main():
60277,"    print(add('1', '1'))"
60278,
60279,if __name__ == '__main__':
60280,    main()
60281,main.py
60282,mypackage/mymodule.py
60283,mypackage/myothermodule.py
60284,from .mymodule import as_int
60285,python3 -m mypackage.myothermodule
60286,#!/usr/bin/env python3
60287,mymodule
60288,from mymodule import as_int
60289,PYTHONPATH
60290,from mypackage.mymodule import as_int
60291,PYTHONPATH
60292,import sys
60293,import os
60294,
60295,SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
60296,sys.path.append(os.path.dirname(SCRIPT_DIR))
60297,
60298,from mypackage.mymodule import as_int
60299,__main__
60300,wx.Frame
60301,os.path.realpath(os.path.dirname(inspect.getfile(inspect.currentframe())))
60302,file
60303,os.path.realpath(os.path.dirname(__file__))
60304,os.path.abspath()
60305,os.path.realpath()
60306,__package__
60307,__name__
60308,'__main__'
60309,__name__.rpartition('.')[0]
60310,"SystemError: Parent module '' not loaded, cannot perform relative import"
60311,PyImport_ImportModuleLevelObject
60312,"if (PyDict_GetItem(interp->modules, package) == NULL) {"
60313,"    PyErr_Format(PyExc_SystemError,"
60314,"            ""Parent module %R not loaded, cannot perform relative """
60315,"            ""import"", package);"
60316,    goto error;
60317,}
60318,package
60319,interp->modules
60320,sys.modules
60321,sys.modules
60322,if
60323,"if (PyUnicode_CompareWithASCIIString(package, """") == 0) {"
60324,"    PyErr_SetString(PyExc_ImportError,"
60325,"            ""attempted relative import with no known parent package"");"
60326,    goto error;
60327,"} /* else if (PyDict_GetItem(interp->modules, package) == NULL) {"
60328,    ...
60329,*/
60330,package
60331,ImportError: attempted relative import with no known parent package
60332,.
60333,├── package
60334,│   ├── __init__.py
60335,│   ├── module.py
60336,│   └── standalone.py
60337,from pathlib import Path
60338,"print('Running' if __name__ == '__main__' else 'Importing', Path(__file__).resolve())"
60339,from . import module  # explicit relative import
60340,/path/to/python/interpreter package/standalone.py
60341,-m
60342,sys.path
60343,__main__
60344,vaultah@base:~$ python3 -i -m package.standalone
60345,Importing /home/vaultah/package/__init__.py
60346,Running /home/vaultah/package/standalone.py
60347,Importing /home/vaultah/package/module.py
60348,>>> __file__
60349,'/home/vaultah/package/standalone.py'
60350,>>> __package__
60351,'package'
60352,>>> # The __package__ has been correctly set and module.py has been imported.
60353,... # What's inside sys.modules?
60354,... import sys
60355,>>> sys.modules['__main__']
60356,<module 'package.standalone' from '/home/vaultah/package/standalone.py'>
60357,>>> sys.modules['package.module']
60358,<module 'package.module' from '/home/vaultah/package/module.py'>
60359,>>> sys.modules['package']
60360,<module 'package' from '/home/vaultah/package/__init__.py'>
60361,-m
60362,__package__
60363,__package__
60364,sys.path
60365,sys.path
60366,__package__
60367,package
60368,├── __init__.py
60369,├── module.py
60370,└── subpackage
60371,    ├── __init__.py
60372,    └── subsubpackage
60373,        ├── __init__.py
60374,        └── standalone.py
60375,from ... import module  # N = 3
60376,import sys
60377,from pathlib import Path
60378,
60379,if __name__ == '__main__' and __package__ is None:
60380,    file = Path(__file__).resolve()
60381,"    parent, top = file.parent, file.parents[3]"
60382,
60383,    sys.path.append(str(top))
60384,    try:
60385,        sys.path.remove(str(parent))
60386,    except ValueError: # Already removed
60387,        pass
60388,
60389,    import package.subpackage.subsubpackage
60390,    __package__ = 'package.subpackage.subsubpackage'
60391,
60392,from ... import module # N = 3
60393,vaultah@base:~$ python3 package/subpackage/subsubpackage/standalone.py
60394,Running /home/vaultah/package/subpackage/subsubpackage/standalone.py
60395,Importing /home/vaultah/package/__init__.py
60396,Importing /home/vaultah/package/subpackage/__init__.py
60397,Importing /home/vaultah/package/subpackage/subsubpackage/__init__.py
60398,Importing /home/vaultah/package/module.py
60399,if __name__ == '__main__' and __package__ is None:
60400,    import_parents(level=3) # N = 3
60401,
60402,from ... import module
60403,from ...module.submodule import thing
60404,package
60405,.
60406,├── project
60407,│   ├── package
60408,│   │   ├── __init__.py
60409,│   │   ├── module.py
60410,│   │   └── standalone.py
60411,│   └── setup.py
60412,"from setuptools import setup, find_packages"
60413,setup(
60414,"    name = 'your_package_name',"
60415,"    packages = find_packages(),"
60416,)
60417,from package import module  # absolute import
60418,project
60419,/path/to/python/interpreter setup.py install --user
60420,--user
60421,vaultah@base:~$ cd project
60422,vaultah@base:~/project$ python3 setup.py install --user
60423,vaultah@base:~/project$ python3 -i package/standalone.py
60424,Running /home/vaultah/project/package/standalone.py
60425,Importing /home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/__init__.py
60426,Importing /home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/module.py
60427,>>> module
60428,<module 'package.module' from '/home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/module.py'>
60429,>>> import sys
60430,>>> sys.modules['package']
60431,<module 'package' from '/home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/__init__.py'>
60432,>>> sys.modules['package.module']
60433,<module 'package.module' from '/home/vaultah/.local/lib/python3.6/site-packages/your_package_name-0.0.0-py3.6.egg/package/module.py'>
60434,sys.path
60435,import sys
60436,from pathlib import Path # if you haven't already done so
60437,file = Path(__file__).resolve()
60438,"parent, root = file.parent, file.parents[1]"
60439,sys.path.append(str(root))
60440,
60441,# Additionally remove the current file's directory from sys.path
60442,try:
60443,    sys.path.remove(str(parent))
60444,except ValueError: # Already removed
60445,    pass
60446,from package import module  # absolute import
60447,vaultah@base:~$ python3 -i package/standalone.py
60448,Running /home/vaultah/package/standalone.py
60449,Importing /home/vaultah/package/__init__.py
60450,Importing /home/vaultah/package/module.py
60451,>>> module
60452,<module 'package.module' from '/home/vaultah/package/module.py'>
60453,>>> import sys
60454,>>> sys.modules['package']
60455,<module 'package' from '/home/vaultah/package/__init__.py'>
60456,>>> sys.modules['package.module']
60457,<module 'package.module' from '/home/vaultah/package/module.py'>
60458,__package__
60459,__main__
60460,__package__
60461,python -m
60462,# For relative imports to work in Python 3.6
60463,"import os, sys; sys.path.append(os.path.dirname(os.path.realpath(__file__)))"
60464,├── project
60465,│   ├── package
60466,│   │   ├── __init__.py
60467,│   │   ├── module1.py
60468,│   │   └── module2.py
60469,│   └── setup.py
60470,# in module2.py
60471,from module1 import class1
60472,__init__.py
60473,sys.path
60474,#!/usr/bin/env python3
60475,#myothermodule
60476,
60477,if __name__ == '__main__':
60478,    from mymodule import as_int
60479,else:
60480,    from .mymodule import as_int
60481,
60482,
60483,# Exported function
60484,"def add(a, b):"
60485,    return as_int(a) + as_int(b)
60486,
60487,# Test function for module  
60488,def _test():
60489,"    assert add('1', '1') == 2"
60490,
60491,if __name__ == '__main__':
60492,    _test()
60493,except:
60494,except ImportError:
60495,SystemError
60496,if __name__ == '__main__': from mymod import as_int; else: from .mymod import as_int
60497,pip install -e .
60498,setup.py
60499,scripty
60500,foo
60501,PYTHONPATH
60502,bar
60503,__init__.py
60504,bar
60505,foo
60506,python
60507,python <filename>
60508,#!
60509,__main__
60510,"if __name__ == ""__main__"":"
60511,setuptools
60512,poetry
60513,flit
60514,pip
60515,pip install -e .
60516,python path/to/packagename/file.py
60517,python path/to/script.py
60518,script.py
60519,from packagename import ...
60520,-m
60521,__main__
60522,python -m foo.bar
60523,foo/bar.py
60524,sys.path
60525,__main__
60526,bar
60527,foo/
60528,__main__.py
60529,foo/bar/__main__.py
60530,sys.path
60531,__package__
60532,foo/bar/spam.py
60533,foo.bar.spam
60534,"__package__ = ""foo.bar"""
60535,__file__
60536,__name__
60537,sys.path
60538,sys.path
60539,path/to/script.py
60540,path/to
60541,sys.path
60542,python path/to/foo.py
60543,path/to
60544,sys.path
60545,setuptools
60546,poetry
60547,flit
60548,sys.path
60549,__file__
60550,pathlib.Path
60551,HERE = Path(__file__).resolve().parent
60552,ImportError: attempted relative import with no known parent package
60553,.
60554,lib.thing import function
60555,.lib.thing import function
60556,ImportError: attempted relative import with no known parent package
60557,try:     from .mname import symbol except:     from mname import symbol
60558,import repackage
60559,repackage.up()
60560,from mypackage.mymodule import myfunction
60561,ImportError: attempted relative import with no known parent package
60562,up()
60563,sys.path.append
60564,ModuleNotFoundError: No module named 'my_module_name'
60565,setup.py
60566,PYTHONPATH
60567,$ python3 test/my_module/module_test.py                                                                                                               2.4.0
60568,Traceback (most recent call last):
60569,"  File ""test/my_module/module_test.py"", line 6, in <module>"
60570,    from my_module.module import *
60571,ModuleNotFoundError: No module named 'my_module'
60572,$ PYTHONPATH=. python3 test/my_module/module_test.py                                                                                                  2.4.0
60573,...........
60574,----------------------------------------------------------------------
60575,Ran 11 tests in 0.001s
60576,
60577,OK
60578,$ PYTHONPATH=. python3 test/my_module/module_test.py
60579,PYTHONPATH=.
60580,setup.py
60581,python setup.py development
60582,# setup.py
60583,"from setuptools import setup, find_packages"
60584,
60585,setup(
60586,"    name='sample',"
60587,    packages=find_packages()
60588,)
60589,pathlib
60590,__file__
60591,my_function
60592,../my_Folder_where_the_package_lives/my_package.py
60593,import os
60594,import sys
60595,import pathlib
60596,
60597,PACKAGE_PARENT = pathlib.Path(__file__).parent
60598,#PACKAGE_PARENT = pathlib.Path.cwd().parent # if on jupyter notebook
60599,"SCRIPT_DIR = PACKAGE_PARENT / ""my_Folder_where_the_package_lives"""
60600,sys.path.append(str(SCRIPT_DIR))
60601,
60602,from my_package import my_function
60603,pathlib.Path.cwd().parent
60604,Path.cwd().parent
60605,project_demo/
60606,├── main.py
60607,├── some_package/
60608,│   ├── __init__.py
60609,│   └── project_configs.py
60610,└── test/
60611,    └── test_project_configs.py
60612,from some_package import project_configs
60613,module
60614,package
60615,package/module.py
60616,## Standalone boilerplate before relative imports
60617,if __package__ is None:                  
60618,    DIR = Path(__file__).resolve().parent
60619,"    sys.path.insert(0, str(DIR.parent))"
60620,    __package__ = DIR.name
60621,
60622,from . import variable_in__init__py
60623,from . import other_module_in_package
60624,...
60625,python -m package.module
60626,python -c 'from package import module'
60627,python package/module.py
60628,#!/bin/env python
60629,package/module.py
60630,sys.path.append
60631,sys.path.insert
60632,module
60633,package
60634,my_script/my_script.py
60635,if not __package__: [set __package__]
60636,.parent
60637,from .filename import function
60638,from package_name.filename import function
60639,package_name
60640,-
60641,-
60642,__init__.py
60643,-
60644,Folder
60645, |
60646, ├─ Scripts
60647, |   ├─ module123.py
60648, |
60649, ├─ main.py
60650, ├─ script123.py
60651,from . import script123
60652,from Scripts import module123
60653,.
60654,main.py
60655,ParentDirectory
60656, ├─ Folder
60657, |   |
60658, |   ├─ Scripts
60659, |   |   ├─ module123.py
60660, |   |
60661, |   ├─ main.py
60662, |   ├─ script123.py
60663, |
60664, ├─ parentModule.py
60665,main.py
60666,import inspect
60667,import os
60668,import sys
60669,
60670,current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
60671,parent_dir = os.path.dirname(current_dir)
60672,"sys.path.insert(0, parent_dir)"
60673,
60674,from ParentDirectory import Stuff
60675,from example.example import fkt
60676,├── Project
60677,│     ├── Dir
60678,│     │    ├── __init__.py
60679,│     │    ├── module.py
60680,│     │    └── standalone.py
60681,#in standalone.py
60682,from Project.Dir.module import ...
60683,tests
60684,manage.py
60685,manage.py
60686,├── dj_app
60687,│   ├── models.py
60688,│   ├── ops
60689,│   │   ├── bar.py
60690,│   │   └── foo.py
60691,│   ├── script.py
60692,│   ├── tests.py
60693,│   ├── utils.py
60694,│   └── views.py
60695,└── manage.py
60696,manage.py
60697,dj_app/script.py
60698,dj_app/tests.py
60699,dj_app/ops/bar.py
60700,dj_app/ops/foo.py
60701,dj_app/script.py
60702,dj_app/tests.py
60703,manage.py test
60704,import
60705,# dj_app/ops/foo.py
60706,# Foo operation methods and classes
60707,"foo_val = ""foo123"""
60708,# dj_app/ops/bar.py
60709,# Bar operations methods and classes
60710,"bar_val = ""bar123"""
60711,# dj_app/script.py
60712,# script to run app methods from CLI
60713,
60714,# if run directly from command line
60715,if __name__ == '__main__':
60716,    from ops.bar import bar_val
60717,    from ops.foo import foo_val
60718,
60719,# otherwise
60720,else:
60721,    from .ops.bar import bar_val
60722,    from .ops.foo import foo_val
60723,
60724,def script_method1():
60725,"    print(""this is script_method1"")"
60726,"    print(""bar_val: {}"".format(bar_val))"
60727,"    print(""foo_val: {}"".format(foo_val))"
60728,
60729,
60730,if __name__ == '__main__':
60731,"    print(""running from the script"")"
60732,    script_method1()
60733,# dj_app/tests.py
60734,# test cases for the app
60735,# do not run this directly from CLI or the imports will break
60736,from .script import script_method1
60737,from .ops.bar import bar_val
60738,from .ops.foo import foo_val 
60739,
60740,def main():
60741,"    print(""Running the test case"")"
60742,"    print(""testing script method"")"
60743,    script_method1()
60744,
60745,if __name__ == '__main__':
60746,"    print(""running tests from command line"")"
60747,    main()
60748,# manage.py
60749,# just run the test cases for this example
60750,import dj_app.tests
60751,dj_app.tests.main()
60752,manage.py
60753,$ python3 manage.py
60754,Running the test case
60755,testing script method
60756,this is script_method1
60757,bar_val: bar123
60758,foo_val: foo123
60759,$ python3 dj_app/script.py
60760,running from the script
60761,this is script_method1
60762,bar_val: bar123
60763,foo_val: foo123
60764,test.py
60765,$ python3 dj_app/tests.py
60766,Traceback (most recent call last):
60767,"  File ""dj_app/tests.py"", line 5, in <module>"
60768,    from .script import script_method1
60769,ModuleNotFoundError: No module named '__main__.script'; '__main__' is not a package
60770,import os
60771,import sys
60772,THIS_DIR = os.path.dirname(os.path.realpath(__file__))
60773,"sys.path.insert(0, THIS_DIR)"
60774,from script import script_method1
60775,sys.path.pop(0)
60776,├── folder
60777,|   | 
60778,│   ├── moduleA.py
60779,|   |   |
60780,|   |   └--function1()
60781,|   |       └~~ uses function2()
60782,|   | 
60783,│   └── moduleB.py
60784,|       | 
60785,|       └--function2()
60786,|   
60787,└── main.py
60788,     └~~ uses function1()
60789,moduleA
60790,moduleB
60791,main
60792,moduleA
60793,moduleA
60794,moduleB
60795,try:
60796,    from .moduleB import function2 
60797,except:
60798,    from moduleB import function2 
60799,main.py
60800,moduleA.py
60801,sys.version_info[0]
60802,ImportError 
60803,├── classes
60804,|   |
60805,|   ├──__init__.py
60806,|   | 
60807,│   ├── userclass.py
60808,|   |   |
60809,|   |   └--viewDetails()
60810,|   |       
60811,|   | 
60812,│   └── groupclass.py
60813,|       | 
60814,|       └--viewGroupDetails()
60815,|   
60816,└── start.py
60817,     └~~ uses function1()
60818,from .userclasss import viewDetails
60819,
60820,from .groupclass import viewGroupDetails
60821,from classes import viewDetails
60822,from classes import viewGroupDetails
60823,/path/to/project/
60824,├── __init__.py
60825,└── main.py
60826,    └── mylib/
60827,        ├── list_util.py
60828,        └── args_util.py
60829,main.py:
60830,#!/usr/bin/env python3
60831,import sys
60832,import mylib.args_util
60833,
60834,if __name__ == '__main__':
60835,    print(f'{mylib.args_util.parseargs(sys.argv[1:])=}')
60836,mylib/list_util.py:
60837,def to_int_list(args):
60838,    return [int(x) for x in args]
60839,mylib/args_util.py:
60840,#!/usr/bin/env python3
60841,import sys
60842,from . import list_util as lu
60843,
60844,def parseargs(args):
60845,    return sum(lu.to_int_list(args))
60846,
60847,if __name__ == '__main__':
60848,    print(f'{parseargs(sys.argv[1:])=}')
60849,$ ./main.py 1 2 3
60850,mylib.args_util.parseargs(sys.argv[1:])=6
60851,
60852,$ mylib/args_util.py 1 2 3
60853,Traceback (most recent call last):
60854,"  File ""/path/to/project/mylib/args_util.py"", line 10, in <module>"
60855,    from . import list_util as lu
60856,ImportError: attempted relative import with no known parent package
60857,python3 -m mylib.args_util
60858,exec
60859,mylib/args_util.py:
60860,#!/bin/bash
60861,# -*- Mode: python -*-
60862,''''true
60863,"exec /usr/bin/env python3 -m mylib.args_util ""$@"""
60864,'''
60865,
60866,import sys
60867,from . import list_util as lu
60868,
60869,def parseargs(args):
60870,    return sum(lu.to_int_list(args))
60871,
60872,if __name__ == '__main__':
60873,    print(f'{parseargs(sys.argv[1:])=}')
60874,$ ./main.py 1 2 3
60875,mylib.args_util.parseargs(sys.argv[1:])=6
60876,
60877,$ mylib/args_util.py 1 2 3
60878,parseargs(sys.argv[1:])=6
60879,#!/bin/bash
60880,# -*- Mode: python -*-
60881,''''true
60882,'true\n
60883,true
60884,'' + '' + 'true' = 'true'
60885,true
60886,"exec /usr/bin/env python3 -m mylib.args_util ""$@"""
60887,python3 -m mylib.args_util
60888,'''
60889,python -m mylib.args_util
60890,/path/to/project/
60891,PYTHONPATH
60892,/usr/bin/env
60893,#!/bin/bash
60894,# -*- Mode: python -*-
60895,''''true
60896,exec /usr/bin/env python3 \
60897,"    PYTHONPATH=""$(cd ""$(dirname ""$0"")/.."" ; pwd)"" \"
60898,"    -m mylib.args_util ""$@"""
60899,'''
60900,import sys
60901,import pathlib as p
60902,import importlib
60903,
60904,pp = p.Path(sys.argv[0])
60905,pack = pp.resolve().parent
60906,
60907,"pkg = importlib.import_module('__init__', package=str(pack))"
60908,print(pkg.Glob)
60909,import os.path
60910,import sys
60911,PACKAGE_PARENT = '..'
60912,"SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))"
60913,"sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))"
60914,from .mymodule import myfunction
60915,import ultraimport
60916,"myfunction = ultraimport('__dir__/mymodule.py', 'myfunction')"
60917,Project  
60918,|---dir1  
60919,|-------main.py  
60920,|-------module1.py  
60921,Project  
60922,|---module1.py  
60923,|---dir1  
60924,|-------main.py  
60925,ln -s ../../../my_package my_package
60926,import my_package
60927,.readline
60928,.readline
60929,"p = subprocess.Popen('myprogram.exe', stdout = subprocess.PIPE)"
60930,output_str = p.stdout.readline()
60931,"To avoid deadlocks: careful to: add \n to output, flush output, use     readline() rather than read()"
60932,fcntl
60933,select
60934,asyncproc
60935,Queue.get_nowait()
60936,import sys
60937,"from subprocess import PIPE, Popen"
60938,from threading  import Thread
60939,
60940,try:
60941,"    from queue import Queue, Empty"
60942,except ImportError:
60943,"    from Queue import Queue, Empty  # python 2.x"
60944,
60945,ON_POSIX = 'posix' in sys.builtin_module_names
60946,
60947,"def enqueue_output(out, queue):"
60948,"    for line in iter(out.readline, b''):"
60949,        queue.put(line)
60950,    out.close()
60951,
60952,"p = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)"
60953,q = Queue()
60954,"t = Thread(target=enqueue_output, args=(p.stdout, q))"
60955,t.daemon = True # thread dies with the program
60956,t.start()
60957,
60958,# ... do other things here
60959,
60960,# read line without blocking
60961,try:  line = q.get_nowait() # or q.get(timeout=.1)
60962,except Empty:
60963,    print('no output yet')
60964,else: # got line
60965,    # ... do something with line
60966,out.readline
60967,readline()
60968,readline()
60969,import fcntl
60970,import os
60971,import sys
60972,
60973,# make stdin a non-blocking file
60974,fd = sys.stdin.fileno()
60975,"fl = fcntl.fcntl(fd, fcntl.F_GETFL)"
60976,"fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)"
60977,
60978,# user input handling thread
60979,while mainThreadIsRunning:
60980,      try: input = sys.stdin.readline()
60981,      except: continue
60982,      handleInput(input)
60983,buffer_size
60984,asyncio
60985,twisted
60986,#!/usr/bin/env python3
60987,import asyncio
60988,import os
60989,
60990,class SubprocessProtocol(asyncio.SubprocessProtocol):
60991,"    def pipe_data_received(self, fd, data):"
60992,        if fd == 1: # got stdout data (bytes)
60993,            print(data)
60994,
60995,"    def connection_lost(self, exc):"
60996,        loop.stop() # end loop.run_forever()
60997,
60998,if os.name == 'nt':
60999,    loop = asyncio.ProactorEventLoop() # for subprocess' pipes on Windows
61000,    asyncio.set_event_loop(loop)
61001,else:
61002,    loop = asyncio.get_event_loop()
61003,try:
61004,"    loop.run_until_complete(loop.subprocess_exec(SubprocessProtocol, "
61005,"        ""myprogram.exe"", ""arg1"", ""arg2""))"
61006,    loop.run_forever()
61007,finally:
61008,    loop.close()
61009,asyncio.create_subprocess_exec()
61010,Process
61011,StreamReader.readline()
61012,async
61013,await
61014,#!/usr/bin/env python3.5
61015,import asyncio
61016,import locale
61017,import sys
61018,from asyncio.subprocess import PIPE
61019,from contextlib import closing
61020,
61021,async def readline_and_kill(*args):
61022,    # start child process
61023,"    process = await asyncio.create_subprocess_exec(*args, stdout=PIPE)"
61024,
61025,    # read line (sequence of bytes ending with b'\n') asynchronously
61026,    async for line in process.stdout:
61027,"        print(""got line:"", line.decode(locale.getpreferredencoding(False)))"
61028,        break
61029,    process.kill()
61030,    return await process.wait() # wait for the child process to exit
61031,
61032,
61033,"if sys.platform == ""win32"":"
61034,    loop = asyncio.ProactorEventLoop()
61035,    asyncio.set_event_loop(loop)
61036,else:
61037,    loop = asyncio.get_event_loop()
61038,
61039,with closing(loop):
61040,    sys.exit(loop.run_until_complete(readline_and_kill(
61041,"        ""myprogram.exe"", ""arg1"", ""arg2"")))"
61042,readline_and_kill()
61043,"print(text, flush=True)"
61044,readline
61045,readline_and_kill
61046,subprocess.comunicate
61047,stdout
61048,stdout
61049,stderr
61050,os.set_blocking
61051,import os
61052,import time
61053,import subprocess
61054,
61055,"cmd = 'python3', '-c', 'import time; [(print(i), time.sleep(1)) for i in range(5)]'"
61056,"p = subprocess.Popen(cmd, stdout=subprocess.PIPE)"
61057,"os.set_blocking(p.stdout.fileno(), False)"
61058,start = time.time()
61059,while True:
61060,    # first iteration always produces empty byte string in non-blocking mode
61061,    for i in range(2):    
61062,        line = p.stdout.readline()
61063,"        print(i, line)"
61064,        time.sleep(0.5)
61065,    if time.time() > start + 5:
61066,        break
61067,p.terminate()
61068,1 b''
61069,2 b'0\n'
61070,1 b''
61071,2 b'1\n'
61072,1 b''
61073,2 b'2\n'
61074,1 b''
61075,2 b'3\n'
61076,1 b''
61077,2 b'4\n'
61078,os.set_blocking
61079,0 b'0\n'
61080,1 b'1\n'
61081,0 b'2\n'
61082,1 b'3\n'
61083,0 b'4\n'
61084,1 b''
61085,Popen
61086,Selector
61087,import os
61088,from asyncproc import Process
61089,"myProc = Process(""myprogram.app"")"
61090,
61091,while True:
61092,    # check to see if process has ended
61093,    poll = myProc.wait(os.WNOHANG)
61094,    if poll != None:
61095,        break
61096,    # print any new output
61097,    out = myProc.read()
61098,"    if out != """":"
61099,        print out
61100,ProcessProtocol
61101,outReceived()
61102,select()
61103,outReceived()
61104,STDOUT
61105,"from twisted.internet import protocol, reactor"
61106,
61107,class MyProcessProtocol(protocol.ProcessProtocol):
61108,
61109,"    def outReceived(self, data):"
61110,        print data
61111,
61112,proc = MyProcessProtocol()
61113,"reactor.spawnProcess(proc, './myprogram', ['./myprogram', 'arg1', 'arg2', 'arg3'])"
61114,reactor.run()
61115,select
61116,select()
61117,Twisted
61118,asyncio
61119,select()
61120,import subprocess     #no new requirements
61121,"def readAllSoFar(proc, retVal=''): "
61122,"  while (select.select([proc.stdout],[],[],0)[0]!=[]):   "
61123,    retVal+=proc.stdout.read(1)
61124,  return retVal
61125,"p = subprocess.Popen(['/bin/ls'], stdout=subprocess.PIPE)"
61126,while not p.poll():
61127,  print (readAllSoFar(p))
61128,lines = ['']
61129,while not p.poll():
61130,"  lines = readAllSoFar(p, lines[-1]).split('\n')"
61131,  for a in range(len(lines)-1):
61132,    print a
61133,"lines = readAllSoFar(p, lines[-1]).split('\n')"
61134,for a in range(len(lines)-1):
61135,  print a
61136,select
61137,proc.stdout.read()
61138,"OSError: [WinError 10093] Either the application has not called WSAStartup, or WSAStartup failed"
61139,"f = open('myprogram_output.txt','w')"
61140,"p = subprocess.Popen('myprogram.exe', stdout=f)"
61141,p.wait()
61142,f.close()
61143,
61144,
61145,"str = open('myprogram_output.txt','r').read()"
61146,#!/usr/bin/python
61147,#
61148,# Runner with stdout/stderr catcher
61149,#
61150,from sys import argv
61151,"from subprocess import Popen, PIPE"
61152,"import os, io"
61153,from threading import Thread
61154,import Queue
61155,def __main__():
61156,"    if (len(argv) > 1) and (argv[-1] == ""-sub-""):"
61157,"        import time, sys"
61158,"        print ""Application runned!"""
61159,        time.sleep(2)
61160,"        print ""Slept 2 second"""
61161,        time.sleep(1)
61162,"        print ""Slept 1 additional second"","
61163,        time.sleep(2)
61164,"        sys.stderr.write(""Stderr output after 5 seconds"")"
61165,"        print ""Eol on stdin"""
61166,"        sys.stderr.write(""Eol on stderr\n"")"
61167,        time.sleep(1)
61168,"        print ""Wow, we have end of work!"","
61169,    else:
61170,"        os.environ[""PYTHONUNBUFFERED""]=""1"""
61171,        try:
61172,"            p = Popen( argv + [""-sub-""],"
61173,"                       bufsize=0, # line-buffered"
61174,"                       stdin=PIPE, stdout=PIPE, stderr=PIPE )"
61175,"        except WindowsError, W:"
61176,            if W.winerror==193:
61177,"                p = Popen( argv + [""-sub-""],"
61178,"                           shell=True, # Try to run via shell"
61179,"                           bufsize=0, # line-buffered"
61180,"                           stdin=PIPE, stdout=PIPE, stderr=PIPE )"
61181,            else:
61182,                raise
61183,        inp = Queue.Queue()
61184,"        sout = io.open(p.stdout.fileno(), 'rb', closefd=False)"
61185,"        serr = io.open(p.stderr.fileno(), 'rb', closefd=False)"
61186,"        def Pump(stream, category):"
61187,            queue = Queue.Queue()
61188,            def rdr():
61189,                while True:
61190,                    buf = stream.read1(8192)
61191,                    if len(buf)>0:
61192,                        queue.put( buf )
61193,                    else:
61194,                        queue.put( None )
61195,                        return
61196,            def clct():
61197,                active = True
61198,                while active:
61199,                    r = queue.get()
61200,                    try:
61201,                        while True:
61202,                            r1 = queue.get(timeout=0.005)
61203,                            if r1 is None:
61204,                                active = False
61205,                                break
61206,                            else:
61207,                                r += r1
61208,                    except Queue.Empty:
61209,                        pass
61210,"                    inp.put( (category, r) )"
61211,"            for tgt in [rdr, clct]:"
61212,                th = Thread(target=tgt)
61213,                th.setDaemon(True)
61214,                th.start()
61215,"        Pump(sout, 'stdout')"
61216,"        Pump(serr, 'stderr')"
61217,
61218,        while p.poll() is None:
61219,            # App still working
61220,            try:
61221,"                chan,line = inp.get(timeout = 1.0)"
61222,                if chan=='stdout':
61223,"                    print ""STDOUT>>"", line, ""<?<"""
61224,                elif chan=='stderr':
61225,"                    print "" ERROR=="", line, ""=?="""
61226,            except Queue.Empty:
61227,                pass
61228,"        print ""Finish"""
61229,
61230,if __name__ == '__main__':
61231,    __main__()
61232,#!/usr/bin/env python3
61233,
61234,while True:
61235,    i = input()
61236,"    if i == ""quit"":"
61237,        break
61238,"    print(f""hello {i}"")"
61239,import asyncio
61240,
61241,
61242,async def main():
61243,    proc = await asyncio.subprocess.create_subprocess_exec(
61244,"        ""./hello.py"", stdin=asyncio.subprocess.PIPE, stdout=asyncio.subprocess.PIPE"
61245,    )
61246,"    proc.stdin.write(b""bob\n"")"
61247,    print(await proc.stdout.read(1024))
61248,"    proc.stdin.write(b""alice\n"")"
61249,    print(await proc.stdout.read(1024))
61250,"    proc.stdin.write(b""quit\n"")"
61251,    await proc.wait()
61252,
61253,
61254,asyncio.run(main())
61255,b'hello bob\n'
61256,b'hello alice\n'
61257,drain()
61258,easy_install tornado_subprocess
61259,import tornado_subprocess
61260,import tornado.ioloop
61261,
61262,"    def print_res( status, stdout, stderr ) :"
61263,"    print status, stdout, stderr"
61264,    if status == 0:
61265,"        print ""OK:"""
61266,        print stdout
61267,    else:
61268,"        print ""ERROR:"""
61269,        print stderr
61270,
61271,"t = tornado_subprocess.Subprocess( print_res, timeout=30, args=[ ""cat"", ""/etc/passwd"" ] )"
61272,t.start()
61273,tornado.ioloop.IOLoop.instance().start()
61274,class MyHandler(tornado.web.RequestHandler):
61275,"    def on_done(self, status, stdout, stderr):"
61276,        self.write( stdout )
61277,        self.finish()
61278,
61279,    @tornado.web.asynchronous
61280,    def get(self):
61281,"        t = tornado_subprocess.Subprocess( self.on_done, timeout=30, args=[ ""cat"", ""/etc/passwd"" ] )"
61282,        t.start()
61283,threading.Thread
61284,on_message
61285,select
61286,select
61287,fcntl
61288,"from subprocess import Popen, PIPE"
61289,from threading import Thread
61290,def process_output(myprocess): #output-consuming thread
61291,    nextline = None
61292,    buf = ''
61293,    while True:
61294,        #--- extract line using read(1)
61295,        out = myprocess.stdout.read(1)
61296,        if out == '' and myprocess.poll() != None: break
61297,        if out != '':
61298,            buf += out
61299,            if out == '\n':
61300,                nextline = buf
61301,                buf = ''
61302,        if not nextline: continue
61303,        line = nextline
61304,        nextline = None
61305,
61306,        #--- do whatever you want with line here
61307,"        print 'Line is:', line"
61308,    myprocess.stdout.close()
61309,
61310,"myprocess = Popen('myprogram.exe', stdout=PIPE) #output-producing process"
61311,"p1 = Thread(target=process_output, args=(myprocess,)) #output-consuming thread"
61312,p1.daemon = True
61313,p1.start()
61314,
61315,#--- do whatever here and then kill process and thread if needed
61316,if myprocess.poll() == None: #kill process; will automatically stop thread
61317,    myprocess.kill()
61318,    myprocess.wait()
61319,if p1 and p1.is_alive(): #wait for thread to finish
61320,    p1.join()
61321,q.get_nowait()
61322,enqueue_output()
61323,dcmpid = myprocess
61324,import fcntl
61325,
61326,def non_block_read(output):
61327,    fd = output.fileno()
61328,"    fl = fcntl.fcntl(fd, fcntl.F_GETFL)"
61329,"    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)"
61330,    try:
61331,        return output.read()
61332,    except:
61333,"        return """""
61334,
61335,# Use example
61336,from subprocess import *
61337,"sb = Popen(""echo test && sleep 1000"", shell=True, stdout=PIPE)"
61338,sb.kill()
61339,
61340,# sb.stdout.read() # <-- This will block
61341,non_block_read(sb.stdout)
61342,'test\n'
61343,msvcrt.kbhit()
61344,select
61345,stdout
61346,stderr
61347,asyncio
61348,import time
61349,import sys
61350,
61351,"sys.stdout.write(""Hello\n"")"
61352,sys.stdout.flush()
61353,time.sleep(1)
61354,"sys.stdout.write(""World!\n"")"
61355,sys.stdout.flush()
61356,time.sleep(1)
61357,"sys.stderr.write(""That's an error\n"")"
61358,sys.stderr.flush()
61359,time.sleep(2)
61360,"sys.stdout.write(""Actually, I'm fine\n"")"
61361,sys.stdout.flush()
61362,time.sleep(1)
61363,import queue
61364,import subprocess
61365,import sys
61366,import threading
61367,
61368,
61369,"def enqueue_stream(stream, queue, type):"
61370,"    for line in iter(stream.readline, b''):"
61371,        queue.put(str(type) + line.decode('utf-8'))
61372,    stream.close()
61373,
61374,
61375,"def enqueue_process(process, queue):"
61376,    process.wait()
61377,    queue.put('x')
61378,
61379,
61380,"p = subprocess.Popen('python printer.py', stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
61381,q = queue.Queue()
61382,"to = threading.Thread(target=enqueue_stream, args=(p.stdout, q, 1))"
61383,"te = threading.Thread(target=enqueue_stream, args=(p.stderr, q, 2))"
61384,"tp = threading.Thread(target=enqueue_process, args=(p, q))"
61385,te.start()
61386,to.start()
61387,tp.start()
61388,
61389,while True:
61390,    line = q.get()
61391,    if line[0] == 'x':
61392,        break
61393,    if line[0] == '2':  # stderr
61394,"        sys.stdout.write(""\033[0;31m"")  # ANSI red color"
61395,    sys.stdout.write(line[1:])
61396,    if line[0] == '2':
61397,"        sys.stdout.write(""\033[0m"")  # reset ANSI code"
61398,    sys.stdout.flush()
61399,
61400,tp.join()
61401,to.join()
61402,te.join()
61403,import os
61404,import sys
61405,import time
61406,import fcntl
61407,import subprocess
61408,
61409,def async_read(fd):
61410,    # set non-blocking flag while preserving old flags
61411,"    fl = fcntl.fcntl(fd, fcntl.F_GETFL)"
61412,"    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)"
61413,    # read char until EOF hit
61414,    while True:
61415,        try:
61416,"            ch = os.read(fd.fileno(), 1)"
61417,            # EOF
61418,            if not ch: break                                                                                                                                                              
61419,            sys.stdout.write(ch)
61420,        except OSError:
61421,            # waiting for data be available on fd
61422,            pass
61423,
61424,"def shell(args, async=True):"
61425,    # merge stderr and stdout
61426,"    proc = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
61427,    if async: async_read(proc.stdout)
61428,"    sout, serr = proc.communicate()"
61429,"    return (sout, serr)"
61430,
61431,if __name__ == '__main__':
61432,    cmd = 'ping 8.8.8.8'
61433,"    sout, serr = shell(cmd.split())"
61434,read()
61435,"def set_up_ping(ip, w):"
61436,    # run the sub-process
61437,    # watch the resultant pipe
61438,"    p = subprocess.Popen(['/bin/ping', ip], stdout=subprocess.PIPE)"
61439,    # make stdout a non-blocking file
61440,"    fl = fcntl.fcntl(p.stdout, fcntl.F_GETFL)"
61441,"    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)"
61442,"    stdout_gid = gobject.io_add_watch(p.stdout, gobject.IO_IN, w)"
61443,    return stdout_gid # for shutting down
61444,"def watch(f, *other):"
61445,"    print 'reading',f.read()"
61446,    return True
61447,def main():
61448,"    set_up_ping('192.168.1.8', watch)"
61449,    # discard gid as unused here
61450,    gobject.MainLoop().run()
61451,selector
61452,ctypes
61453,# pipe_non_blocking.py (module)
61454,""""""""
61455,Example use:
61456,
61457,    p = subprocess.Popen(
61458,"            command,"
61459,"            stdout=subprocess.PIPE,"
61460,            )
61461,
61462,    pipe_non_blocking_set(p.stdout.fileno())
61463,
61464,    try:
61465,"        data = os.read(p.stdout.fileno(), 1)"
61466,    except PortableBlockingIOError as ex:
61467,        if not pipe_non_blocking_is_error_blocking(ex):
61468,            raise ex
61469,""""""""
61470,
61471,
61472,__all__ = (
61473,"    ""pipe_non_blocking_set"","
61474,"    ""pipe_non_blocking_is_error_blocking"","
61475,"    ""PortableBlockingIOError"","
61476,    )
61477,
61478,import os
61479,
61480,
61481,"if os.name == ""nt"":"
61482,    def pipe_non_blocking_set(fd):
61483,        # Constant could define globally but avoid polluting the name-space
61484,        # thanks to: https://stackoverflow.com/questions/34504970
61485,        import msvcrt
61486,
61487,"        from ctypes import windll, byref, wintypes, WinError, POINTER"
61488,"        from ctypes.wintypes import HANDLE, DWORD, BOOL"
61489,
61490,        LPDWORD = POINTER(DWORD)
61491,
61492,        PIPE_NOWAIT = wintypes.DWORD(0x00000001)
61493,
61494,        def pipe_no_wait(pipefd):
61495,            SetNamedPipeHandleState = windll.kernel32.SetNamedPipeHandleState
61496,"            SetNamedPipeHandleState.argtypes = [HANDLE, LPDWORD, LPDWORD, LPDWORD]"
61497,            SetNamedPipeHandleState.restype = BOOL
61498,
61499,            h = msvcrt.get_osfhandle(pipefd)
61500,
61501,"            res = windll.kernel32.SetNamedPipeHandleState(h, byref(PIPE_NOWAIT), None, None)"
61502,            if res == 0:
61503,                print(WinError())
61504,                return False
61505,            return True
61506,
61507,        return pipe_no_wait(fd)
61508,
61509,    def pipe_non_blocking_is_error_blocking(ex):
61510,"        if not isinstance(ex, PortableBlockingIOError):"
61511,            return False
61512,        from ctypes import GetLastError
61513,        ERROR_NO_DATA = 232
61514,
61515,        return (GetLastError() == ERROR_NO_DATA)
61516,
61517,    PortableBlockingIOError = OSError
61518,else:
61519,    def pipe_non_blocking_set(fd):
61520,        import fcntl
61521,"        fl = fcntl.fcntl(fd, fcntl.F_GETFL)"
61522,"        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)"
61523,        return True
61524,
61525,    def pipe_non_blocking_is_error_blocking(ex):
61526,"        if not isinstance(ex, PortableBlockingIOError):"
61527,            return False
61528,        return True
61529,
61530,    PortableBlockingIOError = BlockingIOError
61531,"def non_blocking_readlines(f, chunk=1024):"
61532,"    """""""
61533,"    Iterate over lines, yielding b'' when nothings left"
61534,    or when new data is not yet available.
61535,
61536,    stdout_iter = iter(non_blocking_readlines(process.stdout))
61537,
61538,    line = next(stdout_iter)  # will be a line or b''.
61539,"    """""""
61540,    import os
61541,
61542,    from .pipe_non_blocking import (
61543,"            pipe_non_blocking_set,"
61544,"            pipe_non_blocking_is_error_blocking,"
61545,"            PortableBlockingIOError,"
61546,            )
61547,
61548,    fd = f.fileno()
61549,    pipe_non_blocking_set(fd)
61550,
61551,    blocks = []
61552,
61553,    while True:
61554,        try:
61555,"            data = os.read(fd, chunk)"
61556,            if not data:
61557,                # case were reading finishes with no trailing newline
61558,                yield b''.join(blocks)
61559,                blocks.clear()
61560,        except PortableBlockingIOError as ex:
61561,            if not pipe_non_blocking_is_error_blocking(ex):
61562,                raise ex
61563,
61564,            yield b''
61565,            continue
61566,
61567,        while True:
61568,            n = data.find(b'\n')
61569,            if n == -1:
61570,                break
61571,
61572,            yield b''.join(blocks) + data[:n + 1]
61573,            data = data[n + 1:]
61574,            blocks.clear()
61575,        blocks.append(data)
61576,readline()
61577,fcntl
61578,fcntl
61579,multiprocessing.connection.Pipe
61580,SetNamedPipeHandleState
61581,#!/usr/bin/python
61582,"from subprocess import Popen, PIPE, STDOUT"
61583,import io
61584,
61585,def __main__():
61586,    try:
61587,"        p = Popen( [""ping"", ""-n"", ""3"", ""127.0.0.1""], stdin=PIPE, stdout=PIPE, stderr=STDOUT )"
61588,"    except: print(""Popen failed""); quit()"
61589,"    sout = io.open(p.stdout.fileno(), 'rb', closefd=False)"
61590,    while True:
61591,        buf = sout.read1(1024)
61592,        if len(buf) == 0: break
61593,"        print buf,"
61594,
61595,if __name__ == '__main__':
61596,    __main__()
61597,read1
61598,# -*- python -*-
61599,import fcntl
61600,import threading
61601,"import sys, os, errno"
61602,import subprocess
61603,
61604,class Logger(threading.Thread):
61605,"    def __init__(self, *modules):"
61606,        threading.Thread.__init__(self)
61607,        try:
61608,"            from select import epoll, EPOLLIN"
61609,            self.__poll = epoll()
61610,            self.__evt = EPOLLIN
61611,            self.__to = -1
61612,        except:
61613,"            from select import poll, POLLIN"
61614,            print 'epoll is not available'
61615,            self.__poll = poll()
61616,            self.__evt = POLLIN
61617,            self.__to = 100
61618,        self.__fds = {}
61619,        self.daemon = True
61620,        self.start()
61621,
61622,    def run(self):
61623,        while True:
61624,            events = self.__poll.poll(self.__to)
61625,"            for fd, ev in events:"
61626,                if (ev&self.__evt) != self.__evt:
61627,                    continue
61628,                try:
61629,                    self.__fds[fd].run()
61630,"                except Exception, e:"
61631,                    print e
61632,
61633,"    def add(self, fd, log):"
61634,        assert not self.__fds.has_key(fd)
61635,        self.__fds[fd] = log
61636,"        self.__poll.register(fd, self.__evt)"
61637,
61638,class log:
61639,    logger = Logger()
61640,
61641,"    def __init__(self, name):"
61642,        self.__name = name
61643,        self.__piped = False
61644,
61645,    def fileno(self):
61646,        if self.__piped:
61647,            return self.write
61648,"        self.read, self.write = os.pipe()"
61649,"        fl = fcntl.fcntl(self.read, fcntl.F_GETFL)"
61650,"        fcntl.fcntl(self.read, fcntl.F_SETFL, fl | os.O_NONBLOCK)"
61651,        self.fdRead = os.fdopen(self.read)
61652,"        self.logger.add(self.read, self)"
61653,        self.__piped = True
61654,        return self.write
61655,
61656,"    def __run(self, line):"
61657,"        self.chat(line, nl=False)"
61658,
61659,    def run(self):
61660,        while True:
61661,            try: line = self.fdRead.readline()
61662,"            except IOError, exc:"
61663,                if exc.errno == errno.EAGAIN:
61664,                    return
61665,                raise
61666,            self.__run(line)
61667,
61668,"    def chat(self, line, nl=True):"
61669,        if nl: nl = '\n'
61670,        else: nl = ''
61671,"        sys.stdout.write('[%s] %s%s' % (self.__name, line, nl))"
61672,
61673,"def system(command, param=[], cwd=None, env=None, input=None, output=None):"
61674,    args = [command] + param
61675,"    p = subprocess.Popen(args, cwd=cwd, stdout=output, stderr=output, stdin=input, env=env, bufsize=0)"
61676,    p.wait()
61677,
61678,ls = log('ls')
61679,ls.chat('go')
61680,"system(""ls"", ['-l', '/'], output=ls)"
61681,
61682,date = log('date')
61683,date.chat('go')
61684,"system(""date"", output=date)"
61685,select
61686,Popen
61687,bufsize=1
61688,universal_newlines=True
61689,bufsize=1
61690,class workerThread(QThread):
61691,"   def __init__(self, cmd):"
61692,      QThread.__init__(self)
61693,      self.cmd = cmd
61694,      self.result = None           ## return code
61695,      self.error = None            ## flag indicates an error
61696,"      self.errorstr = """"           ## info message about the error"
61697,
61698,   def __del__(self):
61699,      self.wait()
61700,"      DEBUG(""Thread removed"")"
61701,
61702,   def run(self):
61703,"      cmd_list = self.cmd.split("" "")   "
61704,      try:
61705,"         cmd = subprocess.Popen(cmd_list, bufsize=1, stdin=None"
61706,"                                        , universal_newlines=True"
61707,"                                        , stderr=subprocess.PIPE"
61708,"                                        , stdout=subprocess.PIPE)"
61709,      except OSError:
61710,         self.error = 1
61711,"         self.errorstr = ""Failed to execute "" + self.cmd"
61712,         ERROR(self.errorstr)
61713,      finally:
61714,"         VERBOSE(""task started..."")"
61715,      import select
61716,      while True:
61717,         try:
61718,"            r,w,x = select.select([cmd.stdout, cmd.stderr],[],[])"
61719,            if cmd.stderr in r:
61720,               line = cmd.stderr.readline()
61721,"               if line != """":"
61722,                  line = line.strip()
61723,"                  self.emit(SIGNAL(""update_error(QString)""), line)"
61724,            if cmd.stdout in r:
61725,               line = cmd.stdout.readline()
61726,"               if line == """":"
61727,                  break
61728,               line = line.strip()
61729,"               self.emit(SIGNAL(""update_output(QString)""), line)"
61730,         except IOError:
61731,            pass
61732,      cmd.wait()
61733,      self.result = cmd.returncode
61734,      if self.result < 0:
61735,         self.error = 1
61736,"         self.errorstr = ""Task terminated by signal "" + str(self.result)"
61737,         ERROR(self.errorstr)
61738,         return
61739,      if self.result:
61740,         self.error = 1
61741,"         self.errorstr = ""exit code "" + str(self.result)"
61742,         ERROR(self.errorstr)
61743,         return
61744,      return
61745,readline
61746,pip install command_runner
61747,
61748,from command_runner import command_runner
61749,
61750,"exit_code, output = command_runner('ping 127.0.0.1', timeout=3)"
61751,"exit_code, output = command_runner('echo hello world, shell=True)"
61752,"exit_code, output = command_runner('some command', stdout='some_file')"
61753,_poll_process()
61754,_monitor_process()
61755,pip install shelljob
61756,import io
61757,"from subprocess import PIPE, Popen"
61758,
61759,"p = Popen(['myprogram.exe'], stdout=PIPE)"
61760,
61761,SLEEP_DELAY = 0.001
61762,
61763,# Create an io.BufferedReader on the file descriptor for stdout
61764,"with io.open(p.stdout.fileno(), 'rb', closefd=False) as buffer:"
61765,  while p.poll() == None:
61766,      time.sleep(SLEEP_DELAY)
61767,      while '\n' in bufferedStdout.peek(bufferedStdout.buffer_size):
61768,          line = buffer.readline()
61769,          # do stuff with the line
61770,
61771,  # Handle any remaining output after the process has ended
61772,  while buffer.peek():
61773,    line = buffer.readline()
61774,    # do stuff with the line
61775,"for line in iter(p.stdout.readline, """"): # do stuff with the line"
61776,#!/usr/bin/env python
61777,# -*- coding: utf-8 -*-
61778,
61779,import os
61780,import sys
61781,import select
61782,import termios
61783,import tty
61784,import pty
61785,from subprocess import Popen
61786,
61787,command = 'bash'
61788,# command = 'docker run -it --rm centos /bin/bash'.split()
61789,
61790,# save original tty setting then set it to raw mode
61791,old_tty = termios.tcgetattr(sys.stdin)
61792,tty.setraw(sys.stdin.fileno())
61793,
61794,# open pseudo-terminal to interact with subprocess
61795,"master_fd, slave_fd = pty.openpty()"
61796,
61797,"# use os.setsid() make it run in a new process group, or bash job control will not be enabled"
61798,"p = Popen(command,"
61799,"          preexec_fn=os.setsid,"
61800,"          stdin=slave_fd,"
61801,"          stdout=slave_fd,"
61802,"          stderr=slave_fd,"
61803,          universal_newlines=True)
61804,
61805,while p.poll() is None:
61806,"    r, w, e = select.select([sys.stdin, master_fd], [], [])"
61807,    if sys.stdin in r:
61808,"        d = os.read(sys.stdin.fileno(), 10240)"
61809,"        os.write(master_fd, d)"
61810,    elif master_fd in r:
61811,"        o = os.read(master_fd, 10240)"
61812,        if o:
61813,"            os.write(sys.stdout.fileno(), o)"
61814,
61815,# restore tty settings back
61816,"termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_tty)"
61817,select
61818,select
61819,import select
61820,
61821,
61822,"def read_available(input_stream, max_bytes=None):"
61823,"    """""""
61824,"    Blocks until any data is available, then all available data is then read and returned."
61825,    This function returns an empty string when end of stream is reached.
61826,
61827,    Args:
61828,        input_stream: The stream to read from.
61829,        max_bytes (int|None): The maximum number of bytes to read. This function may return fewer bytes than this.
61830,
61831,    Returns:
61832,        str
61833,"    """""""
61834,    # Prepare local variables
61835,    input_streams = [input_stream]
61836,    empty_list = []
61837,"    read_buffer = """""
61838,
61839,    # Initially block for input using 'select'
61840,"    if len(select.select(input_streams, empty_list, empty_list)[0]) > 0:"
61841,
61842,        # Poll read-readiness using 'select'
61843,        def select_func():
61844,"            return len(select.select(input_streams, empty_list, empty_list, 0)[0]) > 0"
61845,
61846,        # Create while function based on parameters
61847,        if max_bytes is not None:
61848,            def while_func():
61849,                return (len(read_buffer) < max_bytes) and select_func()
61850,        else:
61851,            while_func = select_func
61852,
61853,        while True:
61854,            # Read single byte at a time
61855,            read_data = input_stream.read(1)
61856,            if len(read_data) == 0:
61857,                # End of stream
61858,                break
61859,            # Append byte to string buffer
61860,            read_buffer += read_data
61861,            # Check if more data is available
61862,            if not while_func():
61863,                break
61864,
61865,    # Return read buffer
61866,    return read_buffer
61867,import sys
61868,import os
61869,from select import select
61870,
61871,# -------------------------------------------------------------------------    
61872,# Set the pipe (fake stdin) to simulate a final key stroke
61873,# which will unblock the select statement
61874,"readEnd, writeEnd = os.pipe()"
61875,readFile = os.fdopen(readEnd)
61876,"writeFile = os.fdopen(writeEnd, ""w"")"
61877,
61878,# -------------------------------------------------------------------------
61879,def getKey():
61880,
61881,    # Wait for stdin or pipe (fake stdin) to be ready
61882,"    dr,dw,de = select([sys.__stdin__, readFile], [], [])"
61883,
61884,    # If stdin is the one ready then read it and return value
61885,    if sys.__stdin__ in dr:
61886,        return sys.__stdin__.read(1)   # For Windows use ----> getch() from module msvcrt
61887,
61888,    # Must finish
61889,    else:
61890,        return None
61891,
61892,# -------------------------------------------------------------------------
61893,def breakStdinRead():
61894,    writeFile.write(' ')
61895,    writeFile.flush()
61896,
61897,# -------------------------------------------------------------------------
61898,# MAIN CODE
61899,
61900,# Get key stroke
61901,key = getKey()
61902,
61903,# Keyboard input
61904,if key:
61905,    # ... do your stuff with the key value
61906,
61907,# Faked keystroke
61908,else:
61909,    # ... use of stdin finished
61910,
61911,# -------------------------------------------------------------------------
61912,# OTHER THREAD CODE
61913,
61914,breakStdinRead()
61915,import wexpect
61916,
61917,p = wexpect.spawn('myprogram.exe')
61918,p.stdout.readline('.')               // regex pattern of any character
61919,output_str = p.after()
61920,a
61921,b
61922,a < b
61923,a / b
61924,a
61925,c
61926,c = a / b
61927,__future__
61928,>>> from __future__ import division
61929,>>> a = 4
61930,>>> b = 6
61931,>>> c = a / b
61932,>>> c
61933,0.66666666666666663
61934,from __future__ import division
61935,//
61936,/
61937,float
61938,c = a / float(b)
61939,b
61940,c = a / b
61941,a / b
61942,a / b
61943,>>> 1/2
61944,0.5
61945,a // b
61946,>>> 1//2
61947,0
61948,>>> 1//2.0
61949,0.0
61950,from __future__ import division
61951,>>> from __future__ import division
61952,>>> 1/2
61953,0.5
61954,>>> 1//2
61955,0
61956,>>> 1//2.0
61957,0.0
61958,a / (b * 1.0)
61959,>>> 1/(2 * 1.0)
61960,0.5
61961,truediv
61962,operator
61963,"operator.truediv(a, b)"
61964,>>> from operator import truediv
61965,">>> truediv(1, 2)"
61966,0.5
61967,a / float(b)
61968,>>> 1 / float(2)
61969,0.5
61970,>>> 1 / float(2j)
61971,Traceback (most recent call last):
61972,"  File ""<stdin>"", line 1, in <module>"
61973,TypeError: can't convert complex to float
61974,-Qnew
61975,$ python -Qnew -c 'print 1/2'
61976,0.5
61977,$ python -Qnew -c 'print 1/2j'
61978,-0.5j
61979,a / (b + 0.0)
61980,c = a / (b * 1.0)
61981,/
61982,//
61983,from __future__ import division
61984,>>> 4.0/3
61985,1.3333333333333333
61986,>>> 4 / 3.0
61987,1.3333333333333333
61988,>>> 4 / float(3)
61989,1.3333333333333333
61990,>>> float(4) / 3
61991,1.3333333333333333
61992,1.0 + 1/3
61993,float(c) + a/b
61994,float(a/b)
61995,__future__.division
61996,python -c 'a=10; b=3.0; print a/b'
61997,a
61998,"a = len(list1), b = len(list2)"
61999,float(..)
62000,1.0
62001,.
62002,>>> 4/3.
62003,1.3333333333333333
62004,float()
62005,>>> u=1./5
62006,>>> print u
62007,0.2
62008,a
62009,b
62010,./
62011,python -Q new foo.py
62012,from operator import truediv
62013,
62014,"c = truediv(a, b)"
62015,a
62016,b
62017,from operator import truediv
62018,"truediv(a, b)"
62019,from operator import truediv
62020,
62021,"c = truediv(a, b)"
62022,raw_input()
62023,input()
62024,input
62025,raw_input
62026,raw_input()
62027,input()
62028,raw_input()
62029,input()
62030,input()
62031,eval(input())
62032,eval()
62033,raw_input
62034,raw_input
62035,eval
62036,exec
62037,input
62038,eval()
62039,exec()
62040,eval()
62041,raw_input()
62042,input()
62043,input()
62044,eval(input())
62045,raw_input()
62046,raw_input()
62047,input()
62048,raw_input()
62049,eval()
62050,input()
62051,raw_input()
62052,raw_input()
62053,input()
62054,input()
62055,input()
62056,input()
62057,eval(input())
62058,raw_input()
62059,input()
62060,"name = input(""what is your name ?"")"
62061,what is your name ?harsha
62062,
62063,Traceback (most recent call last):
62064,"  File ""<pyshell#0>"", line 1, in <module>"
62065,"    name = input(""what is your name ?"")"
62066,"  File ""<string>"", line 1, in <module>"
62067,NameError: name 'harsha' is not defined
62068,">>> name = input(""what is your name?"")"
62069,"what is your name?""harsha"""
62070,>>> print(name)
62071,harsha
62072,"name = raw_input(""what is your name ?"")"
62073,what is your name ?harsha
62074,>>> name
62075,'harsha'
62076," name = eval(raw_input(""what is your name?""))"
62077,what is your name?harsha
62078,
62079,Traceback (most recent call last):
62080,"  File ""<pyshell#11>"", line 1, in <module>"
62081,"    name = eval(raw_input(""what is your name?""))"
62082,"  File ""<string>"", line 1, in <module>"
62083,NameError: name 'harsha' is not defined
62084,eval
62085,raw_input()
62086,input()
62087,helloworld
62088,helloworld is undefined
62089,helloworld
62090,input()
62091,from sys import version_info
62092,if version_info.major == 3:
62093,    pass
62094,elif version_info.major == 2:
62095,    try:
62096,        input = raw_input
62097,    except NameError:
62098,        pass
62099,else:
62100,"    print (""Unknown python version - input function not safe"")"
62101,b'The string'
62102,b
62103,b
62104,u
62105,b
62106,u
62107,stringprefix
62108,bytesprefix
62109,str
62110,'...'
62111,bytes
62112,b'...'
62113,str
62114,String
62115,bytes
62116,byte[]
62117,str
62118,NVARCHAR
62119,bytes
62120,BINARY
62121,BLOB
62122,str
62123,REG_SZ
62124,bytes
62125,REG_BINARY
62126,char
62127,str
62128,print('שלום עולם')
62129,bytes
62130,"NaN = struct.unpack('>d', b'\xff\xf8\x00\x00\x00\x00\x00\x00')[0]"
62131,str
62132,bytes
62133,>>> '\uFEFF'.encode('UTF-8')
62134,b'\xef\xbb\xbf'
62135,bytes
62136,str
62137,>>> b'\xE2\x82\xAC'.decode('UTF-8')
62138,'€'
62139,>>> b'\xEF\xBB\xBF' + 'Text with a UTF-8 BOM'
62140,Traceback (most recent call last):
62141,"  File ""<stdin>"", line 1, in <module>"
62142,TypeError: can't concat bytes to str
62143,b'...'
62144,>>> b'A' == b'\x41'
62145,True
62146,>>> 'A' == b'A'
62147,False
62148,unicode
62149,u'...'
62150,str
62151,str
62152,'...'
62153,struct.pack
62154,b'...'
62155,bytes
62156,str
62157,b
62158,2to3
62159,b'...'
62160,r
62161,r'\t'
62162,t
62163,'''...'''
62164,"""""""..."""""""
62165,'A' == b'A' --> False
62166,'שלום עולם' == 'hello world'
62167,u
62168,b
62169,r
62170,f'The temperature is {tmp_value} Celsius'
62171,unicode_literals
62172,__future__
62173,b'Response from server'
62174,b'....'
62175,"stri=""Response from server""    "
62176,c.send(stri.encode())
62177,print(s.recv(1024).decode())
62178,Response from server
62179,b'x'
62180,'x'.encode()
62181,b'\u1000' == '\u1000'.encode()
62182,data.encode()
62183,b
62184,data.decode()
62185,bytes
62186,data.encode()
62187,str
62188,""""""
62189,"b""\u1000"""
62190,bytes
62191,0x1000
62192,bytes
62193,"[92, 117, 49, 48, 48, 48]"
62194,b
62195,TypeError
62196,">>> f=open(""new"", ""wb"")"
62197,">>> f.write(""Hello Python!"")"
62198,Traceback (most recent call last):
62199,"  File ""<stdin>"", line 1, in <module>"
62200,TypeError: 'str' does not support the buffer interface
62201,b
62202,bytes
62203,str
62204,r
62205,str
62206,unicode_literals
62207,__future__
62208,str
62209,bytes
62210,>>> len('Öl')  # German word for 'oil' with 2 characters
62211,2
62212,>>> 'Öl'.encode('UTF-8')  # convert str to bytes 
62213,b'\xc3\x96l'
62214,>>> len('Öl'.encode('UTF-8'))  # 3 bytes encode 2 characters !
62215,3
62216,import json
62217,"data = b'{""key"":""value""}'"
62218,print(json.loads(data))
62219,import requests
62220,"requests.post(url='http://localhost(example)/',json={'key':'value'})"
62221,"@app.route('/', methods=['POST'])"
62222,def api_script_add():
62223,"    print(request.data) # --> b'{""hi"":""Hello""}'"
62224,    print(json.loads(request.data))
62225,return json.loads(request.data)
62226,str
62227,data = request.data
62228,data = data.decode()
62229,b
62230,bytes
62231,"b""hello"""
62232,h e l l o
62233,"b""..."""
62234,.encode()
62235,.decode()
62236,getch()
62237,msvcrt.getch
62238,msvcrt.getwch
62239,input = STDIN.getch
62240,class _Getch:
62241,"    """"""Gets a single character from standard input.  Does not echo to the"
62242,"screen."""""""
62243,    def __init__(self):
62244,        try:
62245,            self.impl = _GetchWindows()
62246,        except ImportError:
62247,            self.impl = _GetchUnix()
62248,
62249,    def __call__(self): return self.impl()
62250,
62251,
62252,class _GetchUnix:
62253,    def __init__(self):
62254,"        import tty, sys"
62255,
62256,    def __call__(self):
62257,"        import sys, tty, termios"
62258,        fd = sys.stdin.fileno()
62259,        old_settings = termios.tcgetattr(fd)
62260,        try:
62261,            tty.setraw(sys.stdin.fileno())
62262,            ch = sys.stdin.read(1)
62263,        finally:
62264,"            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)"
62265,        return ch
62266,
62267,
62268,class _GetchWindows:
62269,    def __init__(self):
62270,        import msvcrt
62271,
62272,    def __call__(self):
62273,        import msvcrt
62274,        return msvcrt.getch()
62275,
62276,
62277,getch = _Getch()
62278,ImportError
62279,sys.stdin.read(1)
62280,\n
62281,class _Getch:
62282,"    """"""Gets a single character from standard input.  Does not echo to the screen."""""""
62283,    def __init__(self):
62284,        try:
62285,            self.impl = _GetchWindows()
62286,        except ImportError:
62287,            self.impl = _GetchUnix()
62288,
62289,    def __call__(self): return self.impl()
62290,
62291,
62292,class _GetchUnix:
62293,    def __init__(self):
62294,"        import tty, sys"
62295,
62296,    def __call__(self):
62297,"        import sys, tty, termios"
62298,        fd = sys.stdin.fileno()
62299,        old_settings = termios.tcgetattr(fd)
62300,        try:
62301,            tty.setraw(sys.stdin.fileno())
62302,            ch = sys.stdin.read(1)
62303,        finally:
62304,"            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)"
62305,        return ch
62306,
62307,
62308,class _GetchWindows:
62309,    def __init__(self):
62310,        import msvcrt
62311,
62312,    def __call__(self):
62313,        import msvcrt
62314,        return msvcrt.getch()
62315,
62316,
62317,getch = _Getch()
62318,def _find_getch():
62319,    try:
62320,        import termios
62321,    except ImportError:
62322,        # Non-POSIX. Return msvcrt's (Windows') getch.
62323,        import msvcrt
62324,        return msvcrt.getch
62325,
62326,    # POSIX system. Create and return a getch that manipulates the tty.
62327,"    import sys, tty"
62328,    def _getch():
62329,        fd = sys.stdin.fileno()
62330,        old_settings = termios.tcgetattr(fd)
62331,        try:
62332,            tty.setraw(fd)
62333,            ch = sys.stdin.read(1)
62334,        finally:
62335,"            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)"
62336,        return ch
62337,
62338,    return _getch
62339,
62340,getch = _find_getch()
62341,0
62342,pip install readchar
62343,import readchar
62344,"print(""Reading a char:"")"
62345,print(repr(readchar.readchar()))
62346,"print(""Reading a key:"")"
62347,print(repr(readchar.readkey()))
62348,'\x03'
62349,'\x04'
62350,'\x1a'
62351,import os
62352,import sys    
62353,import termios
62354,import fcntl
62355,
62356,def getch():
62357,  fd = sys.stdin.fileno()
62358,
62359,  oldterm = termios.tcgetattr(fd)
62360,  newattr = termios.tcgetattr(fd)
62361,  newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
62362,"  termios.tcsetattr(fd, termios.TCSANOW, newattr)"
62363,
62364,"  oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)"
62365,"  fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)"
62366,
62367,  try:        
62368,    while 1:            
62369,      try:
62370,        c = sys.stdin.read(1)
62371,        break
62372,      except IOError: pass
62373,  finally:
62374,"    termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)"
62375,"    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)"
62376,  return c
62377,| os.O_NONBLOCK
62378,while True
62379,while 1
62380,def getChar():
62381,    try:
62382,        # for Windows-based systems
62383,"        import msvcrt # If successful, we are on Windows"
62384,        return msvcrt.getch()
62385,
62386,    except ImportError:
62387,        # for POSIX-based systems (with termios & tty support)
62388,"        import tty, sys, termios  # raises ImportError if unsupported"
62389,
62390,        fd = sys.stdin.fileno()
62391,        oldSettings = termios.tcgetattr(fd)
62392,
62393,        try:
62394,            tty.setcbreak(fd)
62395,            answer = sys.stdin.read(1)
62396,        finally:
62397,"            termios.tcsetattr(fd, termios.TCSADRAIN, oldSettings)"
62398,
62399,        return answer
62400,def getChar():
62401,"    # figure out which function to use once, and store it in _func"
62402,"    if ""_func"" not in getChar.__dict__:"
62403,        try:
62404,            # for Windows-based systems
62405,"            import msvcrt # If successful, we are on Windows"
62406,            getChar._func=msvcrt.getch
62407,
62408,        except ImportError:
62409,            # for POSIX-based systems (with termios & tty support)
62410,"            import tty, sys, termios # raises ImportError if unsupported"
62411,
62412,            def _ttyRead():
62413,                fd = sys.stdin.fileno()
62414,                oldSettings = termios.tcgetattr(fd)
62415,
62416,                try:
62417,                    tty.setcbreak(fd)
62418,                    answer = sys.stdin.read(1)
62419,                finally:
62420,"                    termios.tcsetattr(fd, termios.TCSADRAIN, oldSettings)"
62421,
62422,                return answer
62423,
62424,            getChar._func=_ttyRead
62425,
62426,    return getChar._func()
62427,from __future__ import print_function # put at top of file if using Python 2
62428,
62429,# Example of a prompt for one character of input
62430,"promptStr   = ""Please give me a character:"""
62431,"responseStr = ""Thank you for giving me a '{}'."""
62432,"print(promptStr, end=""\n> "")"
62433,answer = getChar()
62434,"print(""\n"")"
62435,print(responseStr.format(answer))
62436,"... old_settings = termios.tcgetattr(fd) ... termios.error: (25, 'Inappropriate ioctl for device')"
62437,class _Getch:
62438,"    """"""Gets a single character from standard input.  Does not echo to the screen."""""""
62439,    def __init__(self):
62440,        try:
62441,            self.impl = _GetchWindows()
62442,        except ImportError:
62443,            self.impl = _GetchUnix()
62444,
62445,    def __call__(self): 
62446,        char = self.impl()
62447,        if char == '\x03':
62448,            raise KeyboardInterrupt
62449,        elif char == '\x04':
62450,            raise EOFError
62451,        return char
62452,
62453,class _GetchUnix:
62454,    def __init__(self):
62455,        import tty
62456,        import sys
62457,
62458,    def __call__(self):
62459,        import sys
62460,        import tty
62461,        import termios
62462,        fd = sys.stdin.fileno()
62463,        old_settings = termios.tcgetattr(fd)
62464,        try:
62465,            tty.setraw(sys.stdin.fileno())
62466,            ch = sys.stdin.read(1)
62467,        finally:
62468,"            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)"
62469,        return ch
62470,
62471,
62472,class _GetchWindows:
62473,    def __init__(self):
62474,        import msvcrt
62475,
62476,    def __call__(self):
62477,        import msvcrt
62478,        return msvcrt.getch()
62479,
62480,
62481,getch = _Getch()
62482,import os
62483,
62484,# Windows
62485,if os.name == 'nt':
62486,    import msvcrt
62487,
62488,"# Posix (Linux, OS X)"
62489,else:
62490,    import sys
62491,    import termios
62492,    import atexit
62493,    from select import select
62494,
62495,
62496,class KBHit:
62497,
62498,    def __init__(self):
62499,        '''Creates a KBHit object that you can call to do various keyboard things.'''
62500,
62501,        if os.name == 'nt':
62502,            pass
62503,
62504,        else:
62505,
62506,            # Save the terminal settings
62507,            self.fd = sys.stdin.fileno()
62508,            self.new_term = termios.tcgetattr(self.fd)
62509,            self.old_term = termios.tcgetattr(self.fd)
62510,
62511,            # New terminal setting unbuffered
62512,            self.new_term[3] = (self.new_term[3] & ~termios.ICANON & ~termios.ECHO)
62513,"            termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.new_term)"
62514,
62515,            # Support normal-terminal reset at exit
62516,            atexit.register(self.set_normal_term)
62517,
62518,
62519,    def set_normal_term(self):
62520,        ''' Resets to normal terminal.  On Windows this is a no-op.
62521,        '''
62522,
62523,        if os.name == 'nt':
62524,            pass
62525,
62526,        else:
62527,"            termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old_term)"
62528,
62529,
62530,    def getch(self):
62531,        ''' Returns a keyboard character after kbhit() has been called.
62532,            Should not be called in the same program as getarrow().
62533,        '''
62534,
62535,        s = ''
62536,
62537,        if os.name == 'nt':
62538,            return msvcrt.getch().decode('utf-8')
62539,
62540,        else:
62541,            return sys.stdin.read(1)
62542,
62543,
62544,    def getarrow(self):
62545,        ''' Returns an arrow-key code after kbhit() has been called. Codes are
62546,        0 : up
62547,        1 : right
62548,        2 : down
62549,        3 : left
62550,        Should not be called in the same program as getch().
62551,        '''
62552,
62553,        if os.name == 'nt':
62554,            msvcrt.getch() # skip 0xE0
62555,            c = msvcrt.getch()
62556,"            vals = [72, 77, 80, 75]"
62557,
62558,        else:
62559,            c = sys.stdin.read(3)[2]
62560,"            vals = [65, 67, 66, 68]"
62561,
62562,        return vals.index(ord(c.decode('utf-8')))
62563,
62564,
62565,    def kbhit(self):
62566,"        ''' Returns True if keyboard character was hit, False otherwise."
62567,        '''
62568,        if os.name == 'nt':
62569,            return msvcrt.kbhit()
62570,
62571,        else:
62572,"            dr,dw,de = select([sys.stdin], [], [], 0)"
62573,            return dr != []
62574,import kbhit
62575,
62576,kb = kbhit.KBHit()
62577,
62578,while(True): 
62579,"    print(""Key not pressed"") #Do something"
62580,    if kb.kbhit(): #If a key is pressed:
62581,        k_in = kb.getch() #Detect what key was pressed
62582,"        print(""You pressed "", k_in, ""!"") #Do something"
62583,kb.set_normal_term()
62584,class _Getch:
62585,"    """"""Gets a single character from standard input.  Does not echo to the"
62586,"screen. From http://code.activestate.com/recipes/134892/"""""""
62587,    def __init__(self):
62588,        try:
62589,            self.impl = _GetchWindows()
62590,        except ImportError:
62591,            try:
62592,                self.impl = _GetchMacCarbon()
62593,"            except(AttributeError, ImportError):"
62594,                self.impl = _GetchUnix()
62595,
62596,    def __call__(self): return self.impl()
62597,
62598,
62599,class _GetchUnix:
62600,    def __init__(self):
62601,"        import tty, sys, termios # import termios now or else you'll get the Unix version on the Mac"
62602,
62603,    def __call__(self):
62604,"        import sys, tty, termios"
62605,        fd = sys.stdin.fileno()
62606,        old_settings = termios.tcgetattr(fd)
62607,        try:
62608,            tty.setraw(sys.stdin.fileno())
62609,            ch = sys.stdin.read(1)
62610,        finally:
62611,"            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)"
62612,        return ch
62613,
62614,class _GetchWindows:
62615,    def __init__(self):
62616,        import msvcrt
62617,
62618,    def __call__(self):
62619,        import msvcrt
62620,        return msvcrt.getch()
62621,
62622,class _GetchMacCarbon:
62623,"    """""""
62624,    A function which returns the current ASCII key that is down;
62625,"    if no ASCII key is down, the null string is returned.  The"
62626,    page http://www.mactech.com/macintosh-c/chap02-1.html was
62627,    very helpful in figuring out how to do this.
62628,"    """""""
62629,    def __init__(self):
62630,        import Carbon
62631,"        Carbon.Evt #see if it has this (in Unix, it doesn't)"
62632,
62633,    def __call__(self):
62634,        import Carbon
62635,        if Carbon.Evt.EventAvail(0x0008)[0]==0: # 0x0008 is the keyDownMask
62636,            return ''
62637,        else:
62638,            #
62639,            # The event contains the following info:
62640,"            # (what,msg,when,where,mod)=Carbon.Evt.GetNextEvent(0x0008)[1]"
62641,            #
62642,            # The message (msg) contains the ASCII char which is
62643,            # extracted with the 0x000000FF charCodeMask; this
62644,            # number is converted to an ASCII character with chr() and
62645,            # returned
62646,            #
62647,"            (what,msg,when,where,mod)=Carbon.Evt.GetNextEvent(0x0008)[1]"
62648,            return chr(msg & 0x000000FF)
62649,
62650,import threading
62651,            
62652,            
62653,# From  https://stackoverflow.com/a/2022629/2924421
62654,class Event(list):
62655,"    def __call__(self, *args, **kwargs):"
62656,        for f in self:
62657,"            f(*args, **kwargs)"
62658,
62659,    def __repr__(self):
62660,"        return ""Event(%s)"" % list.__repr__(self)            "
62661,
62662,
62663,def getKey():
62664,    inkey = _Getch()
62665,    import sys
62666,    for i in xrange(sys.maxint):
62667,        k=inkey()
62668,        if k<>'':break
62669,    return k
62670,
62671,class KeyCallbackFunction():
62672,    callbackParam = None
62673,    actualFunction = None
62674,    
62675,"    def __init__(self, actualFunction, callbackParam):"
62676,        self.actualFunction = actualFunction
62677,        self.callbackParam = callbackParam
62678,
62679,"    def doCallback(self, inputKey):"
62680,        if not self.actualFunction is None:
62681,            if self.callbackParam is None:
62682,"                callbackFunctionThread = threading.Thread(target=self.actualFunction, args=(inputKey,))"
62683,            else:
62684,"                callbackFunctionThread = threading.Thread(target=self.actualFunction, args=(inputKey,self.callbackParam))"
62685,            
62686,            callbackFunctionThread.daemon = True
62687,            callbackFunctionThread.start()
62688,        
62689,        
62690,
62691,class KeyCapture():
62692,
62693,
62694,    gotKeyLock = threading.Lock()
62695,    gotKeys = []
62696,    gotKeyEvent = threading.Event()
62697,
62698,    keyBlockingSetKeyLock = threading.Lock()
62699,
62700,    addingEventsLock = threading.Lock()
62701,    keyReceiveEvents = Event()
62702,
62703,
62704,    keysGotLock = threading.Lock()
62705,    keysGot = []
62706,
62707,    keyBlockingKeyLockLossy = threading.Lock()
62708,    keyBlockingKeyLossy = None
62709,    keyBlockingEventLossy = threading.Event()
62710,    
62711,    keysBlockingGotLock = threading.Lock()
62712,    keysBlockingGot = []
62713,    keyBlockingGotEvent = threading.Event()
62714,    
62715,
62716,    
62717,    wantToStopLock = threading.Lock()
62718,    wantToStop = False
62719,    
62720,    stoppedLock = threading.Lock()
62721,    stopped = True
62722,    
62723,    isRunningEvent = False
62724,    
62725,    getKeyThread = None
62726,    
62727,    keyFunction = None
62728,    keyArgs = None
62729,    
62730,    # Begin capturing keys. A seperate thread is launched that
62731,"    # captures key presses, and then these can be received via get,"
62732,"    # getAsync, and adding an event via addEvent. Note that this"
62733,"    # will prevent the system to accept keys as normal (say, if"
62734,    # you are in a python shell) because it overrides that key
62735,    # capturing behavior.
62736,    
62737,"    # If you start capture when it's already been started, a"
62738,"    # InterruptedError(""Keys are still being captured"")"
62739,    # will be thrown
62740,    
62741,"    # Note that get(), getAsync() and events are independent, so if a key is pressed:"
62742,    #
62743,"    # 1: Any calls to get() that are waiting, with lossy on, will return"
62744,    #    that key
62745,"    # 2: It will be stored in the queue of get keys, so that get() with lossy"
62746,    #    off will return the oldest key pressed not returned by get() yet.
62747,    # 3: All events will be fired with that key as their input
62748,"    # 4: It will be stored in the list of getAsync() keys, where that list"
62749,    #    will be returned and set to empty list on the next call to getAsync().
62750,"    # get() call with it, aand add it to the getAsync() list."
62751,"    def startCapture(self, keyFunction=None, args=None):"
62752,        # Make sure we aren't already capturing keys
62753,        self.stoppedLock.acquire()
62754,        if not self.stopped:
62755,            self.stoppedLock.release()
62756,"            raise InterruptedError(""Keys are still being captured"")"
62757,            return
62758,        self.stopped = False
62759,        self.stoppedLock.release()
62760,        
62761,"        # If we have captured before, we need to allow the get() calls to actually"
62762,        # wait for key presses now by clearing the event
62763,        if self.keyBlockingEventLossy.is_set():
62764,            self.keyBlockingEventLossy.clear()
62765,            
62766,"        # Have one function that we call every time a key is captured, intended for stopping capture"
62767,        # as desired
62768,        self.keyFunction = keyFunction
62769,        self.keyArgs = args
62770,        
62771,        # Begin capturing keys (in a seperate thread)
62772,        self.getKeyThread = threading.Thread(target=self._threadProcessKeyPresses)
62773,        self.getKeyThread.daemon = True
62774,        self.getKeyThread.start()
62775,        
62776,        # Process key captures (in a seperate thread)
62777,        self.getKeyThread = threading.Thread(target=self._threadStoreKeyPresses)
62778,        self.getKeyThread.daemon = True
62779,        self.getKeyThread.start()
62780,    
62781,    
62782,    def capturing(self):
62783,        self.stoppedLock.acquire()
62784,        isCapturing = not self.stopped
62785,        self.stoppedLock.release()
62786,        return isCapturing
62787,    # Stops the thread that is capturing keys on the first opporunity
62788,    # has to do so. It usually can't stop immediately because getting a key
62789,"    # is a blocking process, so this will probably stop capturing after the"
62790,    # next key is pressed.
62791,    #
62792,"    # However, Sometimes if you call stopCapture it will stop before starting capturing the"
62793,"    # next key, due to multithreading race conditions. So if you want to stop capturing"
62794,"    # reliably, call stopCapture in a function added via addEvent. Then you are"
62795,    # guaranteed that capturing will stop immediately after the rest of the callback
62796,    # functions are called (before starting to capture the next key).
62797,    def stopCapture(self):
62798,        self.wantToStopLock.acquire()
62799,        self.wantToStop = True 
62800,        self.wantToStopLock.release()
62801,
62802,    # Takes in a function that will be called every time a key is pressed (with that
62803,    # key passed in as the first paramater in that function)
62804,"    def addEvent(self, keyPressEventFunction, args=None):   "
62805,        self.addingEventsLock.acquire()
62806,"        callbackHolder = KeyCallbackFunction(keyPressEventFunction, args)"
62807,        self.keyReceiveEvents.append(callbackHolder.doCallback)
62808,        self.addingEventsLock.release()
62809,    def clearEvents(self):
62810,        self.addingEventsLock.acquire()
62811,        self.keyReceiveEvents = Event()
62812,        self.addingEventsLock.release()
62813,"    # Gets a key captured by this KeyCapture, blocking until a key is pressed."
62814,    # There is an optional lossy paramater:
62815,"    # If True all keys before this call are ignored, and the next pressed key"
62816,    #   will be returned.
62817,    # If False this will return the oldest key captured that hasn't
62818,    #   been returned by get yet. False is the default.
62819,"    def get(self, lossy=False):"
62820,        if lossy:
62821,            # Wait for the next key to be pressed
62822,            self.keyBlockingEventLossy.wait()
62823,            self.keyBlockingKeyLockLossy.acquire()
62824,            keyReceived = self.keyBlockingKeyLossy
62825,            self.keyBlockingKeyLockLossy.release()
62826,            return keyReceived
62827,        else:
62828,            while True:
62829,                # Wait until a key is pressed
62830,                self.keyBlockingGotEvent.wait()
62831,                
62832,                # Get the key pressed
62833,                readKey = None
62834,                self.keysBlockingGotLock.acquire()
62835,                # Get a key if it exists
62836,                if len(self.keysBlockingGot) != 0:
62837,                    readKey = self.keysBlockingGot.pop(0)
62838,"                # If we got the last one, tell us to wait"
62839,                if len(self.keysBlockingGot) == 0:
62840,                    self.keyBlockingGotEvent.clear()
62841,                self.keysBlockingGotLock.release()
62842,                
62843,                # Process the key (if it actually exists)
62844,                if not readKey is None:
62845,                    return readKey
62846,                
62847,                # Exit if we are stopping
62848,                self.wantToStopLock.acquire()
62849,                if self.wantToStop:
62850,                    self.wantToStopLock.release()
62851,                    return None
62852,                self.wantToStopLock.release()
62853,            
62854,            
62855,            
62856,    
62857,    def clearGetList(self):
62858,        self.keysBlockingGotLock.acquire()
62859,        self.keysBlockingGot = []
62860,        self.keysBlockingGotLock.release()
62861,    
62862,"    # Gets a list of all keys pressed since the last call to getAsync, in order"
62863,"    # from first pressed, second pressed, .., most recent pressed"
62864,    def getAsync(self):
62865,        self.keysGotLock.acquire();
62866,        keysPressedList = list(self.keysGot)
62867,        self.keysGot = []
62868,        self.keysGotLock.release()
62869,        return keysPressedList
62870,    
62871,    def clearAsyncList(self):
62872,        self.keysGotLock.acquire();
62873,        self.keysGot = []
62874,        self.keysGotLock.release();
62875,
62876,"    def _processKey(self, readKey):"
62877,        # Append to list for GetKeyAsync
62878,        self.keysGotLock.acquire()
62879,        self.keysGot.append(readKey)
62880,        self.keysGotLock.release()
62881,        
62882,        # Call lossy blocking key events
62883,        self.keyBlockingKeyLockLossy.acquire()
62884,        self.keyBlockingKeyLossy = readKey
62885,        self.keyBlockingEventLossy.set()
62886,        self.keyBlockingEventLossy.clear()
62887,        self.keyBlockingKeyLockLossy.release()
62888,        
62889,        # Call non-lossy blocking key events
62890,        self.keysBlockingGotLock.acquire()
62891,        self.keysBlockingGot.append(readKey)
62892,        if len(self.keysBlockingGot) == 1:
62893,            self.keyBlockingGotEvent.set()
62894,        self.keysBlockingGotLock.release()
62895,        
62896,        # Call events added by AddEvent
62897,        self.addingEventsLock.acquire()
62898,        self.keyReceiveEvents(readKey)
62899,        self.addingEventsLock.release()
62900,
62901,    def _threadProcessKeyPresses(self):
62902,        while True:
62903,            # Wait until a key is pressed
62904,            self.gotKeyEvent.wait()
62905,            
62906,            # Get the key pressed
62907,            readKey = None
62908,            self.gotKeyLock.acquire()
62909,            # Get a key if it exists
62910,            if len(self.gotKeys) != 0:
62911,                readKey = self.gotKeys.pop(0)
62912,"            # If we got the last one, tell us to wait"
62913,            if len(self.gotKeys) == 0:
62914,                self.gotKeyEvent.clear()
62915,            self.gotKeyLock.release()
62916,            
62917,            # Process the key (if it actually exists)
62918,            if not readKey is None:
62919,                self._processKey(readKey)
62920,            
62921,            # Exit if we are stopping
62922,            self.wantToStopLock.acquire()
62923,            if self.wantToStop:
62924,                self.wantToStopLock.release()
62925,                break
62926,            self.wantToStopLock.release()
62927,            
62928,    def _threadStoreKeyPresses(self):
62929,        while True:
62930,            # Get a key
62931,            readKey = getKey()
62932,            
62933,            # Run the potential shut down function
62934,            if not self.keyFunction is None:
62935,"                self.keyFunction(readKey, self.keyArgs)"
62936,        
62937,            # Add the key to the list of pressed keys
62938,            self.gotKeyLock.acquire()
62939,            self.gotKeys.append(readKey)
62940,            if len(self.gotKeys) == 1:
62941,                self.gotKeyEvent.set()
62942,            self.gotKeyLock.release()
62943,            
62944,            # Exit if we are stopping
62945,            self.wantToStopLock.acquire()
62946,            if self.wantToStop:
62947,                self.wantToStopLock.release()
62948,                self.gotKeyEvent.set()
62949,                break
62950,            self.wantToStopLock.release()
62951,    
62952,        
62953,        # If we have reached here we stopped capturing
62954,        
62955,        # All we need to do to clean up is ensure that
62956,        # all the calls to .get() now return None.
62957,"        # To ensure no calls are stuck never returning,"
62958,        # we will leave the event set so any tasks waiting
62959,        # for it immediately exit. This will be unset upon
62960,        # starting key capturing again.
62961,        
62962,        self.stoppedLock.acquire()
62963,        
62964,        # We also need to set this to True so we can start up
62965,        # capturing again.
62966,        self.stopped = True
62967,        self.stopped = True
62968,        
62969,        self.keyBlockingKeyLockLossy.acquire()
62970,        self.keyBlockingKeyLossy = None
62971,        self.keyBlockingEventLossy.set()
62972,        self.keyBlockingKeyLockLossy.release()
62973,        
62974,        self.keysBlockingGotLock.acquire()
62975,        self.keyBlockingGotEvent.set()
62976,        self.keysBlockingGotLock.release()
62977,        
62978,        self.stoppedLock.release()
62979,keyPress.getKey()
62980,KeyCapture
62981,keys = keyPress.KeyCapture()
62982,addEvent(functionName)
62983,get()
62984,KeyCapture
62985,keyPress.getKey()
62986,get()
62987,get()
62988,keyPress.getKey()
62989,getKey()
62990,get(lossy=True)
62991,get()
62992,get()
62993,get()
62994,getAsync()
62995,getAsync()
62996,getAsync()
62997,getAsync()
62998,[]
62999,keys.startCapture()
63000,keys
63001,startCapture
63002,keys.stopCapture()
63003,stopCapture()
63004,"startCapture(functionName, args)"
63005,stopCapture()
63006,get()
63007,get()
63008,getAsync()
63009,clearGetList()
63010,clearAsyncList()
63011,get()
63012,getAsync()
63013,get()
63014,get()
63015,get()
63016,getAsync()
63017,getAsync()
63018,import keyPress
63019,import time
63020,import threading
63021,
63022,"def KeyPressed(k, printLock):"
63023,    printLock.acquire()
63024,"    print ""Event: "" + k"
63025,    printLock.release()
63026,    time.sleep(4)
63027,    printLock.acquire()
63028,"    print ""Event after delay: "" + k"
63029,    printLock.release()
63030,
63031,"def GetKeyBlocking(keys, printLock):    "
63032,    while keys.capturing():
63033,        keyReceived = keys.get()
63034,        time.sleep(1)
63035,        printLock.acquire()
63036,        if not keyReceived is None:
63037,"            print ""Block "" + keyReceived"
63038,        else:
63039,"            print ""Block None"""
63040,        printLock.release()
63041,
63042,"def GetKeyBlockingLossy(keys, printLock):   "
63043,    while keys.capturing():
63044,        keyReceived = keys.get(lossy=True)
63045,        time.sleep(1)
63046,        printLock.acquire()
63047,        if not keyReceived is None:
63048,"            print ""Lossy: "" + keyReceived"
63049,        else:
63050,"            print ""Lossy: None"""
63051,        printLock.release()
63052,
63053,"def CheckToClose(k, (keys, printLock)):"
63054,    printLock.acquire()
63055,"    print ""Close: "" + k"
63056,    printLock.release()
63057,"    if k == ""c"":"
63058,        keys.stopCapture()
63059,        
63060,printLock = threading.Lock()
63061,
63062,"print ""Press a key:"""
63063,"print ""You pressed: "" + keyPress.getKey()"
63064,"print """""
63065,
63066,keys = keyPress.KeyCapture()
63067,
63068,"keys.addEvent(KeyPressed, printLock)"
63069,
63070,
63071,
63072,"print ""Starting capture"""
63073,            
63074,"keys.startCapture(CheckToClose, (keys, printLock))"
63075,            
63076,"getKeyBlockingThread = threading.Thread(target=GetKeyBlocking, args=(keys, printLock))"
63077,getKeyBlockingThread.daemon = True
63078,getKeyBlockingThread.start()
63079,
63080,            
63081,"getKeyBlockingThreadLossy = threading.Thread(target=GetKeyBlockingLossy, args=(keys, printLock))"
63082,getKeyBlockingThreadLossy.daemon = True
63083,getKeyBlockingThreadLossy.start()
63084,
63085,while keys.capturing():
63086,    keysPressed = keys.getAsync()
63087,    printLock.acquire()
63088,    if keysPressed != []:
63089,"        print ""Async: "" + str(keysPressed)"
63090,    printLock.release()
63091,    time.sleep(1)
63092,
63093,"print ""done capturing"""
63094,#!/usr/bin/env python3
63095,# file: 'readchar.py'
63096,""""""""
63097,Implementation of a way to get a single character of input
63098,without waiting for the user to hit <Enter>.
63099,"(OS is Linux, Ubuntu 14.04)"
63100,""""""""
63101,
63102,"import tty, sys, termios"
63103,
63104,class ReadChar():
63105,    def __enter__(self):
63106,        self.fd = sys.stdin.fileno()
63107,        self.old_settings = termios.tcgetattr(self.fd)
63108,        tty.setraw(sys.stdin.fileno())
63109,        return sys.stdin.read(1)
63110,"    def __exit__(self, type, value, traceback):"
63111,"        termios.tcsetattr(self.fd, termios.TCSADRAIN, self.old_settings)"
63112,
63113,def test():
63114,    while True:
63115,        with ReadChar() as rc:
63116,            char = rc
63117,        if ord(char) <= 32:
63118,"            print(""You entered character with ordinal {}.""\"
63119,                        .format(ord(char)))
63120,        else:
63121,"            print(""You entered character '{}'.""\"
63122,                        .format(char))
63123,"        if char in ""^C^D"":"
63124,            sys.exit()
63125,
63126,"if __name__ == ""__main__"":"
63127,    test()
63128,self 
63129,__enter__
63130,read
63131,sys.stdin.read(1)
63132,"import sys, termios, tty"
63133,
63134,key_Enter = 13
63135,key_Esc = 27
63136,key_Up = '\033[A'
63137,key_Dn = '\033[B'
63138,key_Rt = '\033[C'
63139,key_Lt = '\033[D'
63140,
63141,fdInput = sys.stdin.fileno()
63142,termAttr = termios.tcgetattr(0)
63143,
63144,def getch():
63145,    tty.setraw(fdInput)
63146,    ch = sys.stdin.buffer.raw.read(4).decode(sys.stdin.encoding)
63147,    if len(ch) == 1:
63148,        if ord(ch) < 32 or ord(ch) > 126:
63149,            ch = ord(ch)
63150,    elif ord(ch[0]) == 27:
63151,        ch = '\033' + ch[1:]
63152,"    termios.tcsetattr(fdInput, termios.TCSADRAIN, termAttr)"
63153,    return ch
63154,import click
63155,
63156,print('Continue? [yn] ')
63157,c = click.getchar()   # Gets a single character
63158,
63159,
63160,if c == 'y':
63161,    print('We will go on')
63162,elif c == 'n':
63163,    print('Abort!')
63164,else:
63165,    print('Invalid input :(')
63166,import Tkinter as tk
63167,
63168,
63169,class Keypress:
63170,    def __init__(self):
63171,        self.root = tk.Tk()
63172,        self.root.geometry('300x200')
63173,"        self.root.bind('<KeyPress>', self.onKeyPress)"
63174,
63175,"    def onKeyPress(self, event):"
63176,        self.key = event.char
63177,
63178,"    def __eq__(self, other):"
63179,        return self.key == other
63180,
63181,    def __str__(self):
63182,        return self.key
63183,keypress = Keypress()
63184,
63185,while something:
63186,   do something
63187,   if keypress == 'c':
63188,        break
63189,   elif keypress == 'i': 
63190,       print('info')
63191,   else:
63192,"       print(""i dont understand %s"" % keypress)"
63193,Ctrl-C
63194,while(True):
63195,    print(getch())
63196,Ctrl-C
63197,tty.setraw(sys.stdin.fileno())
63198,tty
63199,termios
63200,Ctrl-C
63201,getche
63202,if sys.platform == 'win32':
63203,    import msvcrt
63204,    getch = msvcrt.getch
63205,    getche = msvcrt.getche
63206,else:
63207,    import sys
63208,    import termios
63209,    def __gen_ch_getter(echo):
63210,        def __fun():
63211,            fd = sys.stdin.fileno()
63212,            oldattr = termios.tcgetattr(fd)
63213,            newattr = oldattr[:]
63214,            try:
63215,                if echo:
63216,"                    # disable ctrl character printing, otherwise, backspace will be printed as ""^?"""
63217,                    lflag = ~(termios.ICANON | termios.ECHOCTL)
63218,                else:
63219,                    lflag = ~(termios.ICANON | termios.ECHO)
63220,                newattr[3] &= lflag
63221,"                termios.tcsetattr(fd, termios.TCSADRAIN, newattr)"
63222,                ch = sys.stdin.read(1)
63223,                if echo and ord(ch) == 127: # backspace
63224,                    # emulate backspace erasing
63225,                    # https://stackoverflow.com/a/47962872/404271
63226,                    sys.stdout.write('\b \b')
63227,            finally:
63228,"                termios.tcsetattr(fd, termios.TCSADRAIN, oldattr)"
63229,            return ch
63230,        return __fun
63231,    getch = __gen_ch_getter(False)
63232,    getche = __gen_ch_getter(True)
63233,import pygame
63234,"pygame.init()             // eliminate error, pygame.error: video system not initialized"
63235,keys = pygame.key.get_pressed()
63236,
63237,if keys[pygame.K_SPACE]:
63238,"    d = ""space key"""
63239,
63240,"print ""You pressed the"", d, ""."""
63241,pygame.error: video system not initialized
63242,KeyboardError
63243,import contextlib
63244,import os
63245,import sys
63246,import termios
63247,import tty
63248,
63249,
63250,_MAX_CHARACTER_BYTE_LENGTH = 4
63251,
63252,
63253,@contextlib.contextmanager
63254,def _tty_reset(file_descriptor):
63255,"    """""""
63256,    A context manager that saves the tty flags of a file descriptor upon
63257,    entering and restores them upon exiting.
63258,"    """""""
63259,    old_settings = termios.tcgetattr(file_descriptor)
63260,    try:
63261,        yield
63262,    finally:
63263,"        termios.tcsetattr(file_descriptor, termios.TCSADRAIN, old_settings)"
63264,
63265,
63266,def get_character(file=sys.stdin):
63267,"    """""""
63268,    Read a single character from the given input stream (defaults to sys.stdin).
63269,"    """""""
63270,    file_descriptor = file.fileno()
63271,    with _tty_reset(file_descriptor):
63272,        tty.setcbreak(file_descriptor)
63273,"        return os.read(file_descriptor, _MAX_CHARACTER_BYTE_LENGTH)"
63274,curses
63275,print()
63276,#!/usr/bin/python3
63277,# Demo of single char terminal input in raw mode with the curses package.
63278,"import sys, curses"
63279,
63280,def run_one_char(dummy):
63281,    'Run until a carriage return is entered'
63282,    char = ' '
63283,"    print('Welcome to curses', flush=True)"
63284,    while ord(char) != 13:
63285,        char = one_char()
63286,
63287,def one_char():
63288,    'Read one character from the keyboard'
63289,"    print('\r? ', flush= True, end = '')"
63290,
63291,    ## A blocking single char read in raw mode. 
63292,    char = sys.stdin.read(1)
63293,    print('You entered %s\r' % char)
63294,    return char
63295,
63296,## Must init curses before calling any functions
63297,curses.initscr()
63298,"## To make sure the terminal returns to its initial settings,"
63299,## and to set raw mode and guarantee cleanup on exit. 
63300,curses.wrapper(run_one_char)
63301,print('Curses be gone!')
63302,import os
63303,
63304,if os.name == 'nt':
63305,    import msvcrt
63306,    def getch():
63307,        return msvcrt.getch().decode()
63308,else:
63309,"    import sys, tty, termios"
63310,    fd = sys.stdin.fileno()
63311,    old_settings = termios.tcgetattr(fd)
63312,    def getch():
63313,        try:
63314,            tty.setraw(sys.stdin.fileno())
63315,            ch = sys.stdin.read(1)
63316,        finally:
63317,"            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)"
63318,        return ch
63319,if getch() == chr(ESC_ASCII_VALUE):
63320,"    print(""ESC!"")"
63321,pip install sshkeyboard
63322,from sshkeyboard import listen_keyboard
63323,
63324,def press(key):
63325,"    print(f""'{key}' pressed"")"
63326,
63327,def release(key):
63328,"    print(f""'{key}' released"")"
63329,
63330,listen_keyboard(
63331,"    on_press=press,"
63332,"    on_release=release,"
63333,)
63334,'a' pressed
63335,'a' released
63336,A
63337,ESC
63338,>>> getch_but_it_actually_works() # just normal key like a
63339,'a'
63340,
63341,>>> getch_but_it_actually_works() # a but its shift or capslock
63342,'A'
63343,
63344,>>> getch_but_it_actually_works() # just bare enter
63345,'\r'
63346,
63347,>>> getch_but_it_actually_works() # literal ESC key
63348,'\x1b'
63349,
63350,>>> getch_but_it_actually_works() # one of the arrow keys on linux
63351,'\x1b[A'
63352,
63353,>>> getch_but_it_actually_works() # one of the arrow keys on windows
63354,'àK'
63355,
63356,>>> getch_but_it_actually_works() # some really obscure key-combo. still works.
63357,'\x1b[19;6~'
63358,import os
63359,def _read_one_wide_char_win(): return msvcrt.getwch()
63360,"def _char_can_be_escape_win(char): return True if char in (""\x00"", ""à"") else False"
63361,def _dump_keyboard_buff_win():
63362,"    try: msvcrt.ungetwch(""a"")"
63363,    except OSError: return msvcrt.getwch()
63364,"    else: _ = msvcrt.getwch(); return """""
63365,def _read_one_wide_char_nix():
63366,    old_settings = termios.tcgetattr(sys.stdin.fileno()); tty.setraw(sys.stdin.fileno())
63367,    wchar = sys.stdin.read(1)
63368,"    termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, old_settings); return wchar"
63369,"def _char_can_be_escape_nix(char): return True if char == ""\x1b"" else False"
63370,def _dump_keyboard_buff_nix():
63371,    old_settings = termios.tcgetattr(sys.stdin.fileno())
63372,"    tty.setraw(sys.stdin.fileno()); os.set_blocking(sys.stdin.fileno(), False)"
63373,"    buffer_dump = """""
63374,    while char := sys.stdin.read(1): buffer_dump += char
63375,"    os.set_blocking(sys.stdin.fileno(), True); termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, old_settings)"
63376,    if buffer_dump: return buffer_dump
63377,"    else: return """""
63378,"if os.name == ""nt"":"
63379,    import msvcrt
63380,"    read_one_wdchar, char_can_escape, dump_key_buffer = _read_one_wide_char_win, _char_can_be_escape_win, _dump_keyboard_buff_win"
63381,"if os.name == ""posix"":"
63382,"    import termios, tty, sys"
63383,"    read_one_wdchar, char_can_escape, dump_key_buffer = _read_one_wide_char_nix, _char_can_be_escape_nix, _dump_keyboard_buff_nix"
63384,def getch_but_it_actually_works():
63385,    wchar = read_one_wdchar()
63386,    if char_can_escape(wchar): dump = dump_key_buffer(); return wchar + dump
63387,    else: return wchar
63388,import os
63389,
63390,def _read_one_wide_char_win():
63391,"    """"""Wait keyhit return chr. Get only 1st chr if multipart key like arrow"""""""
63392,    return msvcrt.getwch()
63393,
63394,def _char_can_be_escape_win(char):
63395,"    """"""Return true if char could start a multipart key code (e.g.: arrows)"""""""
63396,"    return True if char in (""\x00"", ""à"") else False # \x00 is null character"
63397,
63398,def _dump_keyboard_buff_win():
63399,"    """"""If piece of multipart keycode in buffer, return it. Else return None"""""""
63400,    try:                       # msvcrt.kbhit wont work with msvcrt.getwch
63401,"        msvcrt.ungetwch(""a"")   # check buffer status by ungetching wchr"
63402,    except OSError:            # ungetch fails > something in buffer so >
63403,        return msvcrt.getwch() # return the buffer note: win multipart keys
63404,    else:                      # are always 2 parts. if ungetwch does not fail
63405,        _ = msvcrt.getwch()    # clean up and return empty string
63406,"        return """""
63407,
63408,def _read_one_wide_char_nix():
63409,"    """"""Wait keyhit return chr. Get only 1st chr if multipart key like arrow"""""""
63410,    old_settings = termios.tcgetattr(sys.stdin.fileno()) # save settings
63411,    tty.setraw(sys.stdin.fileno()) # set raw mode to catch raw key w/o enter
63412,    wchar = sys.stdin.read(1)
63413,"    termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, old_settings)"
63414,    return wchar
63415,
63416,def _char_can_be_escape_nix(char):
63417,"    """"""Return true if char could start a multipart key code (e.g.: arrows)"""""""
63418,"    return True if char == ""\x1b"" else False # ""\x1b"" is literal esc-key"
63419,
63420,def _dump_keyboard_buff_nix():
63421,"    """"""If parts of multipart keycode in buffer, return them. Otherwise None"""""""
63422,    old_settings = termios.tcgetattr(sys.stdin.fileno()) # save settings
63423,    tty.setraw(sys.stdin.fileno()) # raw to read single key w/o enter
63424,"    os.set_blocking(sys.stdin.fileno(), False) # dont block for empty buffer"
63425,"    buffer_dump = """""
63426,    while char := sys.stdin.read(1):
63427,        buffer_dump += char
63428,"    os.set_blocking(sys.stdin.fileno(), True) # restore normal settings"
63429,"    termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, old_settings)"
63430,    if buffer_dump:
63431,        return buffer_dump
63432,    else:
63433,"        return """""
63434,
63435,"if os.name == ""nt"":"
63436,    import msvcrt
63437,    read_one_wdchar = _read_one_wide_char_win
63438,    char_can_escape = _char_can_be_escape_win
63439,    dump_key_buffer = _dump_keyboard_buff_win
63440,"if os.name == ""posix"":"
63441,    import termios
63442,    import tty
63443,    import sys
63444,    read_one_wdchar = _read_one_wide_char_nix
63445,    char_can_escape = _char_can_be_escape_nix
63446,    dump_key_buffer = _dump_keyboard_buff_nix
63447,
63448,
63449,def getch_but_it_actually_works():
63450,"    """"""Returns a printable character or a keycode corresponding to special key"
63451,"    like arrow or insert. Compatible with windows and linux, no external libs"
63452,    except for builtins. Uses different builtins for windows and linux.
63453,
63454,    This function is more accurately called:
63455,"    ""get_wide_character_or_keycode_if_the_key_was_nonprintable()"""
63456,
63457,    e.g.:
63458,"        * returns ""e"" if e was pressed"
63459,"        * returns ""E"" if shift or capslock was on"
63460,"        * returns ""x1b[19;6~'"" for ctrl + shift + F8 on unix"
63461,
63462,    You can use string.isprintable() if you need to sometimes print the output
63463,    and sometimes use it for menu control and such. Printing raw ansi escape
63464,    codes can cause your terminal to do things like move cursor three rows up.
63465,
63466,"    Enter will return ""\ r"" on all platforms (without the space seen here)"
63467,"    as the enter key will produce carriage return, but windows and linux"
63468,    interpret it differently in different contexts on higher level
63469,"    """""""
63470,    wchar = read_one_wdchar()    # get first char from key press or key combo
63471,"    if char_can_escape(wchar):   # if char is escapecode, more may be waiting"
63472,        dump = dump_key_buffer() # dump buffer to check if more were waiting.
63473,"        return wchar + dump      # return escape+buffer. buff could be just """""
63474,    else:                        # if buffer was empty then we return a single
63475,"        return wchar             # key like ""e"" or ""\x1b"" for the ESC button"
63476,"# precondition: import tty, sys"
63477,"def query_yes_no(question, default=True):"
63478,"    """""""
63479,    Ask the user a yes/no question.
63480,    Returns immediately upon reading one-char answer.
63481,    Accepts multiple language characters for yes/no.
63482,"    """""""
63483,    if not sys.stdin.isatty():
63484,        return default
63485,    if default:
63486,"        prompt = ""[Y/n]?"""
63487,"        other_answers = ""n"""
63488,    else:
63489,"        prompt = ""[y/N]?"""
63490,"        other_answers = ""yjosiá"""
63491,
63492,"    print(question,prompt,flush= True,end="" "")"
63493,    oldttysettings = tty.tcgetattr(sys.stdin.fileno())
63494,    try:
63495,        tty.setraw(sys.stdin.fileno())
63496,        return not sys.stdin.read(1).lower() in other_answers
63497,    except:
63498,        return default
63499,    finally:
63500,"        tty.tcsetattr(sys.stdin.fileno(), tty.TCSADRAIN , oldttysettings)"
63501,"        sys.stdout.write(""\r\n"")"
63502,        tty.tcdrain(sys.stdin.fileno())
63503,import curses                                                                                                                                       
63504,def getkey(stdscr):
63505,    curses.curs_set(0)
63506,    while True:
63507,        key = stdscr.getch()
63508,        if key != -1:
63509,            break
63510,    return key
63511,
63512,"if __name__ == ""__main__"":"
63513,    print(curses.wrapper(getkey))
63514,.py
63515,curses.wrapper(getkey)
63516,"from tkinter import Tk, Frame"
63517,
63518,
63519,"def __set_key(e, root):"
63520,"    """""""
63521,"    e - event with attribute 'char', the released key"
63522,"    """""""
63523,    global key_pressed
63524,    if e.char:
63525,        key_pressed = e.char
63526,        root.destroy()
63527,
63528,
63529,"def get_key(msg=""Press any key ..."", time_to_sleep=3):"
63530,"    """""""
63531,    msg - set to empty string if you don't want to print anything
63532,    time_to_sleep - default 3 seconds
63533,"    """""""
63534,    global key_pressed
63535,    if msg:
63536,        print(msg)
63537,    key_pressed = None
63538,    root = Tk()
63539,    root.overrideredirect(True)
63540,"    frame = Frame(root, width=0, height=0)"
63541,"    frame.bind(""<KeyRelease>"", lambda f: __set_key(f, root))"
63542,    frame.pack()
63543,    root.focus_set()
63544,    frame.focus_set()
63545,    frame.focus_force()  # doesn't work in a while loop without it
63546,"    root.after(time_to_sleep * 1000, func=root.destroy)"
63547,    root.mainloop()
63548,    root = None  # just in case
63549,    return key_pressed
63550,
63551,
63552,def __main():
63553,        c = None
63554,        while not c:
63555,"                c = get_key(""Choose your weapon ... "", 2)"
63556,        print(c)
63557,
63558,"if __name__ == ""__main__"":"
63559,    __main()
63560,import keyboard
63561,
63562,while(True):
63563,  if(keyboard.is_pressed('w')):
63564,      s+=1
63565,      while(keyboard.is_pressed('w')):
63566,        pass
63567,  if(keyboard.is_pressed('s')):
63568,      s-=1
63569,      while(keyboard.is_pressed('s')):
63570,        pass
63571,  print(s)
63572,keyboard
63573,if():
63574,for i in range(3):
63575,"    print (""So much work to do!"")"
63576,"k = raw_input(""Press any key to continue..."")"
63577,"print (""Ok, back to work."")"
63578,input()
63579,class Foo:
63580,    x = 5
63581,    y = [x for i in range(1)]
63582,NameError: global name 'x' is not defined
63583,Foo.x
63584,from collections import namedtuple
63585,class StateDatabase:
63586,"    State = namedtuple('State', ['name', 'capital'])"
63587,    db = [State(*args) for args in [
63588,"        ['Alabama', 'Montgomery'],"
63589,"        ['Alaska', 'Juneau'],"
63590,        # ...
63591,    ]]
63592,apply()
63593,NameError: global name 'x' is not defined
63594,class
63595,x
63596,Foo.x
63597,Foo
63598,class A:
63599,     a = 42
63600,     b = list(a + i for i in range(10))
63601,"# Same error, in Python 2 or 3"
63602,y = {x: x for i in range(1)}
63603,range(1)
63604,y = [x for i in range(1)]
63605,#               ^^^^^^^^
63606,x
63607,# Runs fine
63608,y = [i for i in range(x)]
63609,for
63610,for
63611,# NameError
63612,y = [i for i in range(1) for j in range(x)]
63613,#      ^^^^^^^^^^^^^^^^^ -----------------
63614,"#      outer loop        inner, nested loop"
63615,dis
63616,class <name>:
63617,>>> import dis
63618,>>> def foo():
63619,...     class Foo:
63620,...         x = 5
63621,...         y = [x for i in range(1)]
63622,...     return Foo
63623,... 
63624,>>> dis.dis(foo)
63625,  2           0 LOAD_BUILD_CLASS     
63626,"              1 LOAD_CONST               1 (<code object Foo at 0x10a436030, file ""<stdin>"", line 2>) "
63627,              4 LOAD_CONST               2 ('Foo') 
63628,              7 MAKE_FUNCTION            0 
63629,             10 LOAD_CONST               2 ('Foo') 
63630,"             13 CALL_FUNCTION            2 (2 positional, 0 keyword pair) "
63631,             16 STORE_FAST               0 (Foo) 
63632,
63633,  5          19 LOAD_FAST                0 (Foo) 
63634,             22 RETURN_VALUE         
63635,LOAD_CONST
63636,Foo
63637,__dict__
63638,class
63639,"<code object Foo at 0x10a436030, file ""<stdin>"", line 2>"
63640,co_consts
63641,>>> foo.__code__.co_consts
63642,"(None, <code object Foo at 0x10a436030, file ""<stdin>"", line 2>, 'Foo')"
63643,>>> dis.dis(foo.__code__.co_consts[1])
63644,  2           0 LOAD_FAST                0 (__locals__) 
63645,              3 STORE_LOCALS         
63646,              4 LOAD_NAME                0 (__name__) 
63647,              7 STORE_NAME               1 (__module__) 
63648,             10 LOAD_CONST               0 ('foo.<locals>.Foo') 
63649,             13 STORE_NAME               2 (__qualname__) 
63650,
63651,  3          16 LOAD_CONST               1 (5) 
63652,             19 STORE_NAME               3 (x) 
63653,
63654,"  4          22 LOAD_CONST               2 (<code object <listcomp> at 0x10a385420, file ""<stdin>"", line 4>) "
63655,             25 LOAD_CONST               3 ('foo.<locals>.Foo.<listcomp>') 
63656,             28 MAKE_FUNCTION            0 
63657,             31 LOAD_NAME                4 (range) 
63658,             34 LOAD_CONST               4 (1) 
63659,"             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair) "
63660,             40 GET_ITER             
63661,"             41 CALL_FUNCTION            1 (1 positional, 0 keyword pair) "
63662,             44 STORE_NAME               5 (y) 
63663,             47 LOAD_CONST               5 (None) 
63664,             50 RETURN_VALUE         
63665,locals()
63666,x
63667,y
63668,x
63669,5
63670,x
63671,range(1)
63672,range(1)
63673,  2           0 LOAD_NAME                0 (__name__)
63674,              3 STORE_NAME               1 (__module__)
63675,
63676,  3           6 LOAD_CONST               0 (5)
63677,              9 STORE_NAME               2 (x)
63678,
63679,  4          12 BUILD_LIST               0
63680,             15 LOAD_NAME                3 (range)
63681,             18 LOAD_CONST               1 (1)
63682,             21 CALL_FUNCTION            1
63683,             24 GET_ITER            
63684,        >>   25 FOR_ITER                12 (to 40)
63685,             28 STORE_NAME               4 (i)
63686,             31 LOAD_NAME                2 (x)
63687,             34 LIST_APPEND              2
63688,             37 JUMP_ABSOLUTE           25
63689,        >>   40 STORE_NAME               5 (y)
63690,             43 LOAD_LOCALS         
63691,             44 RETURN_VALUE        
63692,FOR_ITER
63693,x
63694,>>> foo.__code__.co_consts[1].co_consts
63695,"('foo.<locals>.Foo', 5, <code object <listcomp> at 0x10a385420, file ""<stdin>"", line 4>, 'foo.<locals>.Foo.<listcomp>', 1, None)"
63696,>>> dis.dis(foo.__code__.co_consts[1].co_consts[2])
63697,  4           0 BUILD_LIST               0 
63698,              3 LOAD_FAST                0 (.0) 
63699,        >>    6 FOR_ITER                12 (to 21) 
63700,              9 STORE_FAST               1 (i) 
63701,             12 LOAD_GLOBAL              0 (x) 
63702,             15 LIST_APPEND              2 
63703,             18 JUMP_ABSOLUTE            6 
63704,        >>   21 RETURN_VALUE         
63705,range(1)
63706,FOR_ITER
63707,x
63708,foo
63709,x
63710,>>> def foo():
63711,...     x = 2
63712,...     class Foo:
63713,...         x = 5
63714,...         y = [x for i in range(1)]
63715,...     return Foo
63716,... 
63717,>>> dis.dis(foo.__code__.co_consts[2].co_consts[2])
63718,  5           0 BUILD_LIST               0 
63719,              3 LOAD_FAST                0 (.0) 
63720,        >>    6 FOR_ITER                12 (to 21) 
63721,              9 STORE_FAST               1 (i) 
63722,             12 LOAD_DEREF               0 (x) 
63723,             15 LIST_APPEND              2 
63724,             18 JUMP_ABSOLUTE            6 
63725,        >>   21 RETURN_VALUE         
63726,LOAD_DEREF
63727,x
63728,>>> foo.__code__.co_cellvars               # foo function `x`
63729,"('x',)"
63730,">>> foo.__code__.co_consts[2].co_cellvars  # Foo class, no cell variables"
63731,()
63732,>>> foo.__code__.co_consts[2].co_consts[2].co_freevars  # Refers to `x` in foo
63733,"('x',)"
63734,>>> foo().y
63735,[2]
63736,.__closure__
63737,>>> def spam(x):
63738,...     def eggs():
63739,...         return x
63740,...     return eggs
63741,... 
63742,>>> spam(1).__code__.co_freevars
63743,"('x',)"
63744,>>> spam(1)()
63745,1
63746,>>> spam(1).__closure__
63747,>>> spam(1).__closure__[0].cell_contents
63748,1
63749,>>> spam(5).__closure__[0].cell_contents
63750,5
63751,x
63752,>>> class Foo:
63753,...     x = 5
63754,...     def y(x):
63755,...         return [x for i in range(1)]
63756,...     y = y(x)
63757,... 
63758,>>> Foo.y
63759,[5]
63760,y
63761,x
63762,>>> foo.__code__.co_consts[1].co_consts[2]
63763,"<code object y at 0x10a5df5d0, file ""<stdin>"", line 4>"
63764,>>> foo.__code__.co_consts[1].co_consts[2].co_cellvars
63765,"('x',)"
63766,__init__
63767,def __init__(self):
63768,    self.y = [self.x for i in range(1)]
63769,namedtuple
63770,from collections import namedtuple
63771,"State = namedtuple('State', ['name', 'capital'])"
63772,
63773,class StateDatabase:
63774,    db = [State(*args) for args in [
63775,"       ('Alabama', 'Montgomery'),"
63776,"       ('Alaska', 'Juneau'),"
63777,       # ...
63778,    ]]
63779,y = (lambda x=x: [x for i in range(1)])()
63780,lambda
63781,NameError: name 'x' is not defined
63782,class A:
63783,    x = 4
63784,    y = [x+i for i in range(1)]
63785,A.x
63786,class A:
63787,    x = 4
63788,    y = (lambda x=x: [x+i for i in range(1)])()
63789,def
63790,"python -c ""import IPython;IPython.embed()"""
63791,ipython
63792,class Foo:
63793,
63794,    # A class-level variable.
63795,    X = 10
63796,
63797,    # I can use that variable to define another class-level variable.
63798,"    Y = sum((X, X))"
63799,
63800,"    # Works in Python 2, but not 3."
63801,"    # In Python 3, list comprehensions were given their own scope."
63802,    try:
63803,        Z1 = sum([X for _ in range(3)])
63804,    except NameError:
63805,        Z1 = None
63806,
63807,    # Fails in both.
63808,"    # Apparently, generator expressions (that's what the entire argument"
63809,    # to sum() is) did have their own scope even in Python 2.
63810,    try:
63811,        Z2 = sum(X for _ in range(3))
63812,    except NameError:
63813,        Z2 = None
63814,
63815,    # Workaround: put the computation in lambda or def.
63816,    compute_z3 = lambda val: sum(val for _ in range(3))
63817,
63818,    # Then use that function.
63819,    Z3 = compute_z3(X)
63820,
63821,    # Also worth noting: here I can refer to XS in the for-part of the
63822,"    # generator expression (Z4 works), but I cannot refer to XS in the"
63823,    # inner-part of the generator expression (Z5 fails).
63824,"    XS = [15, 15, 15, 15]"
63825,    Z4 = sum(val for val in XS)
63826,    try:
63827,        Z5 = sum(XS[i] for i in range(len(XS)))
63828,    except NameError:
63829,        Z5 = None
63830,
63831,"print(Foo.Z1, Foo.Z2, Foo.Z3, Foo.Z4, Foo.Z5)"
63832,lambda
63833,def
63834,range(len(XS))
63835,XS
63836,zip
63837,itertools.repeat
63838,import itertools as it
63839,
63840,class Foo:
63841,    x = 5
63842,"    y = [j for i, j in zip(range(3), it.repeat(x))]"
63843,for
63844,class Foo:
63845,    x = 5
63846,"    y = [j for j in (x,) for i in range(3)]"
63847,from collections import namedtuple
63848,import itertools as it
63849,
63850,class StateDatabase:
63851,"    State = namedtuple('State', ['name', 'capital'])"
63852,"    db = [State(*args) for State, args in zip(it.repeat(State), ["
63853,"        ['Alabama', 'Montgomery'],"
63854,"        ['Alaska', 'Juneau'],"
63855,        # ...
63856,    ])]
63857,class Foo:
63858,    x = 5
63859,    y = [x for i in range(1)]
63860,def Foo():
63861,    x = 5
63862,    y = [x for i in range(1)]
63863,(foo + 5) + 7
63864,"[foo + x for x in [1,2,3]]"
63865,a = 5
63866,def myfunc():
63867,    print(a)
63868,string.contains
63869,string.indexof
63870,"if not somestring.contains(""blah""):"
63871,   continue
63872,in
63873,"if ""blah"" not in somestring: "
63874,    continue
63875,"__contains__(self, item)"
63876,__iter__(self)
63877,"__getitem__(self, key)"
63878,in
63879,TypeError: argument of type 'NoneType' is not iterable
63880,in
63881,'.so' in filepath.suffixes
63882,"string.find(""substring"")"
63883,find
63884,index
63885,in
63886,"s = ""This be a string"""
63887,"if s.find(""is"") == -1:"
63888,"    print(""No 'is' here!"")"
63889,else:
63890,"    print(""Found 'is' in the string."")"
63891,Found 'is' in the string.
63892,"if ""is"" in s:"
63893,True
63894,if ' is ' in s:
63895,False
63896,\bis\b
63897,is
63898,is
63899,This
63900,in
63901,True
63902,False
63903,'substring' in any_string
63904,str.find
63905,start = 0
63906,stop = len(any_string)
63907,"any_string.find('substring', start, stop)"
63908,str.index
63909,find
63910,start = 100 
63911,end = 1000
63912,"any_string.index('substring', start, end)"
63913,in
63914,>>> 'foo' in '**foo**'
63915,True
63916,not in
63917,>>> 'foo' not in '**foo**' # returns False
63918,False
63919,not 'foo' in '**foo**'
63920,__contains__
63921,in
63922,"str.__contains__('**foo**', 'foo')"
63923,True
63924,'**foo**'.__contains__('foo')
63925,in
63926,not in
63927,str
63928,class NoisyString(str):
63929,"    def __contains__(self, other):"
63930,"        print(f'testing if ""{other}"" in ""{self}""')"
63931,"        return super(NoisyString, self).__contains__(other)"
63932,
63933,ns = NoisyString('a string with a substring inside')
63934,>>> 'substring' in ns
63935,"testing if ""substring"" in ""a string with a substring inside"""
63936,True
63937,find
63938,index
63939,>>> '**foo**'.index('foo')
63940,2
63941,>>> '**foo**'.find('foo')
63942,2
63943,
63944,>>> '**oo**'.find('foo')
63945,-1
63946,>>> '**oo**'.index('foo')
63947,
63948,Traceback (most recent call last):
63949,"  File ""<pyshell#40>"", line 1, in <module>"
63950,    '**oo**'.index('foo')
63951,ValueError: substring not found
63952,in
63953,in
63954,-1
63955,0
63956,False
63957,True
63958,not any_string.startswith(substring)
63959,import timeit
63960,
63961,"def in_(s, other):"
63962,    return other in s
63963,
63964,"def contains(s, other):"
63965,    return s.__contains__(other)
63966,
63967,"def find(s, other):"
63968,    return s.find(other) != -1
63969,
63970,"def index(s, other):"
63971,    try:
63972,        s.index(other)
63973,    except ValueError:
63974,        return False
63975,    else:
63976,        return True
63977,
63978,
63979,
63980,perf_dict = {
63981,"'in:True': min(timeit.repeat(lambda: in_('superstring', 'str'))),"
63982,"'in:False': min(timeit.repeat(lambda: in_('superstring', 'not'))),"
63983,"'__contains__:True': min(timeit.repeat(lambda: contains('superstring', 'str'))),"
63984,"'__contains__:False': min(timeit.repeat(lambda: contains('superstring', 'not'))),"
63985,"'find:True': min(timeit.repeat(lambda: find('superstring', 'str'))),"
63986,"'find:False': min(timeit.repeat(lambda: find('superstring', 'not'))),"
63987,"'index:True': min(timeit.repeat(lambda: index('superstring', 'str'))),"
63988,"'index:False': min(timeit.repeat(lambda: index('superstring', 'not'))),"
63989,}
63990,in
63991,>>> perf_dict
63992,"{'in:True': 0.16450627865128808,"
63993," 'in:False': 0.1609668098178645,"
63994," '__contains__:True': 0.24355481654697542,"
63995," '__contains__:False': 0.24382793854783813,"
63996," 'find:True': 0.3067379407923454,"
63997," 'find:False': 0.29860888058124146,"
63998," 'index:True': 0.29647137792585454,"
63999, 'index:False': 0.5502287584545229}
64000,in
64001,__contains__
64002,in
64003,__contains__
64004,>>> from dis import dis
64005,>>> dis(lambda: 'a' in 'b')
64006,  1           0 LOAD_CONST               1 ('a')
64007,              2 LOAD_CONST               2 ('b')
64008,              4 COMPARE_OP               6 (in)
64009,              6 RETURN_VALUE
64010,>>> dis(lambda: 'b'.__contains__('a'))
64011,  1           0 LOAD_CONST               1 ('b')
64012,              2 LOAD_METHOD              0 (__contains__)
64013,              4 LOAD_CONST               2 ('a')
64014,              6 CALL_METHOD              1
64015,              8 RETURN_VALUE
64016,.__contains__
64017,str.index
64018,str.find
64019,s.find(ss) != -1
64020,ss in s
64021,re
64022,str.count
64023,string.count(something) != 0
64024,if needle in haystack:
64025,in
64026,key=
64027,'haystack'.__contains__
64028,if
64029,in
64030,in
64031,">>> ""foo"" in ""foobar"""
64032,True
64033,">>> ""foo"" in ""Foobar"""
64034,False
64035,">>> ""foo"" in ""Foobar"".lower()"
64036,True
64037,">>> ""foo"".capitalize() in ""Foobar"""
64038,True
64039,">>> ""foo"" in [""bar"", ""foo"", ""foobar""]"
64040,True
64041,">>> ""foo"" in [""fo"", ""o"", ""foobar""]"
64042,False
64043,">>> [""foo"" in a for a in [""fo"", ""o"", ""foobar""]]"
64044,"[False, False, True]"
64045,in
64046,"""blah"" in somestring"
64047,import operator
64048,
64049,"if not operator.contains(somestring, ""blah""):"
64050,    continue
64051,in
64052,"names = ['bob', 'john', 'mike']"
64053,any(st in 'bob and john' for st in names) 
64054,>> True
64055,
64056,any(st in 'mary and jane' for st in names) 
64057,>> False
64058,in
64059,y.count()
64060,"string.count(""bah"") >> 0"
64061,"string.count(""Hello"") >> 1"
64062,"if ""insert_char_or_string_here"" in ""insert_string_to_search_here"":"
64063,    #DOSTUFF
64064,"if not ""insert_char_or_string_here"" in ""insert_string_to_search_here"":"
64065,    #DOSTUFF
64066,"if ""insert_char_or_string_here"" not in ""insert_string_to_search_here"":"
64067,    #DOSTUFF
64068,>>> import re
64069,">>> print(re.findall(r'( |t)', to_search_in)) # searches for t or space"
64070,"['t', ' ', 't', ' ', ' ']"
64071,while True:
64072,    # Snip: print out current state
64073,    while True:
64074,"        ok = get_input(""Is this ok? (y/n)"")"
64075,"        if ok.lower() == ""y"": break 2 # This doesn't work :("
64076,"        if ok.lower() == ""n"": break"
64077,
64078,    # Do more processing with menus and stuff
64079,goto
64080,return
64081,return
64082,for a in xrange(10):
64083,    for b in xrange(20):
64084,"        if something(a, b):"
64085,            # Break the inner loop...
64086,            break
64087,    else:
64088,        # Continue if the inner loop wasn't broken.
64089,        continue
64090,"    # Inner loop was broken, break the outer."
64091,    break
64092,continue
64093,continue
64094,"something(a, b)"
64095,a
64096,"something(a, b)"
64097,True
64098,return
64099,break 2
64100,return
64101,continue
64102,break; break
64103,break
64104,class GetOutOfLoop( Exception ):
64105,    pass
64106,
64107,try:
64108,    done= False
64109,    while not done:
64110,        isok= False
64111,        while not (done or isok):
64112,"            ok = get_input(""Is this ok? (y/n)"")"
64113,"            if ok in (""y"", ""Y"") or ok in (""n"", ""N"") : "
64114,                done= True # probably better
64115,                raise GetOutOfLoop
64116,        # other stuff
64117,except GetOutOfLoop:
64118,    pass
64119,done
64120,done
64121,GetOutOfLoop(Exception)
64122,Exception
64123,raise Exception('bla bla bla')
64124,except
64125,with
64126,from contextlib import contextmanager
64127,@contextmanager
64128,def nested_break():
64129,    class NestedBreakException(Exception):
64130,        pass
64131,    try:
64132,        yield NestedBreakException
64133,    except NestedBreakException:
64134,        pass
64135,with nested_break() as mylabel:
64136,    while True:
64137,"        print ""current state"""
64138,        while True:
64139,"            ok = raw_input(""Is this ok? (y/n)"")"
64140,"            if ok == ""y"" or ok == ""Y"": raise mylabel"
64141,"            if ok == ""n"" or ok == ""N"": break"
64142,"        print ""more processing"""
64143,Exception
64144,nested_break
64145,Exception
64146,breaker = False #our mighty loop exiter!
64147,while True:
64148,    while True:
64149,        if conditionMet:
64150,            #insert code here...
64151,            breaker = True 
64152,            break
64153,    if breaker: # the interesting part!
64154,        break   # <--- !
64155,#import the stuff
64156,"from goto import goto, label"
64157,
64158,while True:
64159,    #snip: print out current state
64160,    while True:
64161,"        ok = get_input(""Is this ok? (y/n)"")"
64162,"        if ok == ""y"" or ok == ""Y"": goto .breakall"
64163,"        if ok == ""n"" or ok == ""N"": break"
64164,    #do more processing with menus and stuff
64165,label .breakall
64166,try:
64167,    for outer in range(100):
64168,        for inner in range(100):
64169,            if break_early():
64170,                raise StopIteration
64171,
64172,except StopIteration: pass
64173,keeplooping = True
64174,while keeplooping:
64175,    # Do stuff
64176,    while keeplooping:
64177,          # Do some other stuff
64178,          if finisheddoingstuff():
64179,              keeplooping = False
64180,def loop():
64181,    while True:
64182,    #snip: print out current state
64183,        while True:
64184,"            ok = get_input(""Is this ok? (y/n)"")"
64185,"            if ok == ""y"" or ok == ""Y"": return"
64186,"            if ok == ""n"" or ok == ""N"": break"
64187,        #do more processing with menus and stuff
64188,dejaVu = True
64189,
64190,while dejaVu:
64191,    while True:
64192,"        ok = raw_input(""Is this ok? (y/n)"")"
64193,"        if ok == ""y"" or ok == ""Y"" or ok == ""n"" or ok == ""N"":"
64194,            dejaVu = False
64195,            break
64196,while dejaVu:
64197,True
64198,if not dejaVu: break
64199,def doMywork(data):
64200,    for i in data:
64201,       for e in i:
64202,         return 
64203,is_break = False
64204,for i in data:
64205,   if is_break:
64206,      break # outer loop break
64207,   for e in i:
64208,      is_break = True
64209,      break # inner loop break
64210,"def it(rows, cols, images):"
64211,    i = 0
64212,    for r in xrange(rows):
64213,        for c in xrange(cols):
64214,            if i >= len(images):
64215,                return
64216,"            yield r, c, images[i]"
64217,            i += 1 
64218,
64219,"for r, c, image in it(rows=4, cols=4, images=['a.jpg', 'b.jpg', 'c.jpg']):"
64220,"    ... do something with r, c, image ..."
64221,while ... else
64222,while
64223,else
64224,continue
64225,break
64226,else
64227,while True:
64228,    #snip: print out current state
64229,"    ok = """""
64230,"    while ok != ""y"" and ok != ""n"":"
64231,"        ok = get_input(""Is this ok? (y/n)"")"
64232,"        if ok == ""n"" or ok == ""N"":"
64233,"            break    # Breaks out of inner loop, skipping else"
64234,
64235,    else:
64236,        break        # Breaks out of outer loop
64237,
64238,    #do more processing with menus and stuff
64239,while
64240,for
64241,else
64242,How to break out of multiple loops in Python?
64243,numpy.ndindex
64244,for i in range(n):
64245,  for j in range(n):
64246,"    val = x[i, j]"
64247,    break # still inside the outer loop!
64248,
64249,"for i, j in np.ndindex(n, n):"
64250,"  val = x[i, j]"
64251,  break # you left the only loop there was!
64252,def user_confirms():
64253,    while True:
64254,"        answer = input(""Is this OK? (y/n) "").strip().lower()"
64255,"        if answer in ""yn"":"
64256,"            return answer == ""y"""
64257,
64258,def main():
64259,    while True:
64260,        # do stuff
64261,        if user_confirms():
64262,            break
64263,"for i, j in ((i, j) for i in A for j in B):"
64264,"    print(i , j)"
64265,    if (some_condition):
64266,        break
64267,nonlocal
64268,global
64269,def is_prime(number):
64270,
64271,    foo = bar = number
64272,
64273,    def return_here():
64274,"        nonlocal foo, bar"
64275,        init_bar = bar
64276,        while foo > 0:
64277,            bar = init_bar
64278,            while bar >= foo:
64279,                if foo*bar == number:
64280,                    return
64281,                bar -= 1
64282,            foo -= 1
64283,
64284,    return_here()
64285,
64286,    if foo == 1:
64287,"        print(number, 'is prime')"
64288,    else:
64289,"        print(number, '=', bar, '*', foo)"
64290,>>> is_prime(67)
64291,67 is prime
64292,>>> is_prime(117)
64293,117 = 13 * 9
64294,>>> is_prime(16)
64295,16 = 4 * 4
64296,def myloop():
64297,"    for i in range(1,6,1):  # 1st loop"
64298,"        print('i:',i)"
64299,"        for j in range(1,11,2):  # 2nd loop"
64300,"            print('   i, j:' ,i, j)"
64301,"            for k in range(1,21,4):  # 3rd loop"
64302,"                print('      i,j,k:', i,j,k)"
64303,                if i%3==0 and j%3==0 and k%3==0:
64304,                    return  # getting out of all loops
64305,
64306,myloop()
64307,return
64308,done = False
64309,"for i in range(1,6,1):  # 1st loop"
64310,"    print('i:', i)"
64311,"    for j in range(1,11,2):  # 2nd loop"
64312,"        print('   i, j:' ,i, j)"
64313,"        for k in range(1,21,4):  # 3rd loop"
64314,"            print('      i,j,k:', i,j,k)"
64315,            if i%3==0 and j%3==0 and k%3==0:
64316,                done = True
64317,                break  # breaking from 3rd loop
64318,        if done: break # breaking from 2nd loop
64319,    if done: break     # breaking from 1st loop
64320,break
64321,from itertools import repeat
64322,"inputs = (get_input(""Is this ok? (y/n)"") for _ in repeat(None))"
64323,"response = (i.lower()==""y"" for i in inputs if i.lower() in (""y"", ""n""))"
64324,
64325,while True:
64326,    #snip: print out current state
64327,    if next(response):
64328,        break
64329,    #do more processing with menus and stuff
64330,# this version uses a level counter to choose how far to break out
64331,
64332,break_levels = 0
64333,while True:
64334,    # snip: print out current state
64335,    while True:
64336,"        ok = get_input(""Is this ok? (y/n)"")"
64337,"        if ok == ""y"" or ok == ""Y"":"
64338,"            break_levels = 1        # how far nested, excluding this break"
64339,            break
64340,"        if ok == ""n"" or ok == ""N"":"
64341,            break                   # normal break
64342,    if break_levels:
64343,        break_levels -= 1
64344,        break                       # pop another level
64345,if break_levels:
64346,    break_levels -= 1
64347,    break
64348,
64349,# ...and so on
64350,# this version breaks up to a certain label
64351,
64352,break_label = None
64353,while True:
64354,    # snip: print out current state
64355,    while True:
64356,"        ok = get_input(""Is this ok? (y/n)"")"
64357,"        if ok == ""y"" or ok == ""Y"":"
64358,"            break_label = ""outer""   # specify label to break to"
64359,            break
64360,"        if ok == ""n"" or ok == ""N"":"
64361,            break
64362,    if break_label:
64363,"        if break_label != ""inner"":"
64364,            break                   # propagate up
64365,        break_label = None          # we have arrived!
64366,if break_label:
64367,"    if break_label != ""outer"":"
64368,        break                       # propagate up
64369,    break_label = None              # we have arrived!
64370,
64371,#do more processing with menus and stuff
64372,break_ = False
64373,for i in range(10):
64374,    if break_:
64375,        break
64376,    for j in range(10):
64377,        if j == 3:
64378,            break_ = True
64379,            break
64380,        else:
64381,"            print(i, j)"
64382,break_
64383,while True:
64384,    #snip: print out current state
64385,    quit = False
64386,    while True:
64387,"        ok = input(""Is this ok? (y/n)"")"
64388,"        if ok.lower() == ""y"":"
64389,            quit = True
64390,            break # this should work now :-)
64391,"        if ok.lower() == ""n"":"
64392,            quit = True
64393,            break # This should work too :-)
64394,    if quit:
64395,        break
64396,    #do more processing with menus and stuff
64397,same_matrices = True
64398,inner_loop_broken_once = False
64399,n = len(matrix1)
64400,
64401,for i in range(n):
64402,    for j in range(n):
64403,
64404,        if matrix1[i][j] != matrix2[i][j]:
64405,            same_matrices = False
64406,            inner_loop_broken_once = True
64407,            break
64408,
64409,    if inner_loop_broken_once:
64410,        break
64411,"def are_two_matrices_the_same (matrix1, matrix2):"
64412,    n = len(matrix1)
64413,    for i in range(n):
64414,        for j in range(n):
64415,            if matrix1[i][j] != matrix2[i][j]:
64416,                return False
64417,    return True
64418,break_level = 0
64419,# while break_level < 3: # if we have another level of nested loop here
64420,while break_level < 2:
64421,    #snip: print out current state
64422,    while break_level < 1:
64423,"        ok = get_input(""Is this ok? (y/n)"")"
64424,"        if ok == ""y"" or ok == ""Y"": break_level = 2 # break 2 level"
64425,"        if ok == ""n"" or ok == ""N"": break_level = 1 # break 1 level"
64426,while True:
64427,    break_statement=0
64428,    while True:
64429,"        ok = raw_input(""Is this ok? (y/n)"")"
64430,"        if ok == ""n"" or ok == ""N"": "
64431,            break
64432,"        if ok == ""y"" or ok == ""Y"": "
64433,            break_statement=1
64434,            break
64435,    if break_statement==1:
64436,        break
64437,for x in array:
64438,  for y in dont_use_these_values:
64439,    if x.value==y:
64440,"      array.remove(x)  # fixed, was array.pop(x) in my original answer"
64441,      continue
64442,
64443,  do some other stuff with x
64444,for x in array:
64445,  for y in dont_use_these_values:
64446,    if x.value==y:
64447,"      array.remove(x)  # fixed, was array.pop(x) in my original answer"
64448,      continue
64449,
64450,for x in array:
64451,  do some other stuff with x
64452,break
64453,continue
64454,break_2 = False
64455,while True:
64456,    # Snip: print out current state
64457,    if break_2: break
64458,    while True:
64459,"        ok = get_input(""Is this ok? (y/n)"")"
64460,"        if ok.lower() == ""y"": break_2 = True"
64461,        if break_2: break
64462,"        if ok.lower() == ""n"": break"
64463,    # Do more processing with menus and stuff
64464,b = None
64465,for a in range(10):
64466,"    if something(a, b): # should never = True if b is None"
64467,        break
64468,    for b in range(20):
64469,        pass
64470,"mainframe = Frame(root, yscrollcommand=scrollbar.set)"
64471,Frame
64472,window_create
64473,scrollregion
64474,create_
64475,pack
64476,place
64477,grid
64478,create_window
64479,row*(lineheight+spacing)
64480,import tkinter as tk
64481,
64482,class Example(tk.Frame):
64483,"    def __init__(self, parent):"
64484,
64485,"        tk.Frame.__init__(self, parent)"
64486,"        self.canvas = tk.Canvas(self, borderwidth=0, background=""#ffffff"")"
64487,"        self.frame = tk.Frame(self.canvas, background=""#ffffff"")"
64488,"        self.vsb = tk.Scrollbar(self, orient=""vertical"", command=self.canvas.yview)"
64489,        self.canvas.configure(yscrollcommand=self.vsb.set)
64490,
64491,"        self.vsb.pack(side=""right"", fill=""y"")"
64492,"        self.canvas.pack(side=""left"", fill=""both"", expand=True)"
64493,"        self.canvas.create_window((4,4), window=self.frame, anchor=""nw"","
64494,"                                  tags=""self.frame"")"
64495,
64496,"        self.frame.bind(""<Configure>"", self.onFrameConfigure)"
64497,
64498,        self.populate()
64499,
64500,    def populate(self):
64501,        '''Put in some fake data'''
64502,        for row in range(100):
64503,"            tk.Label(self.frame, text=""%s"" % row, width=3, borderwidth=""1"","
64504,"                     relief=""solid"").grid(row=row, column=0)"
64505,"            t=""this is the second column for row %s"" %row"
64506,"            tk.Label(self.frame, text=t).grid(row=row, column=1)"
64507,
64508,"    def onFrameConfigure(self, event):"
64509,        '''Reset the scroll region to encompass the inner frame'''
64510,"        self.canvas.configure(scrollregion=self.canvas.bbox(""all""))"
64511,
64512,"if __name__ == ""__main__"":"
64513,    root=tk.Tk()
64514,    example = Example(root)
64515,"    example.pack(side=""top"", fill=""both"", expand=True)"
64516,    root.mainloop()
64517,import tkinter as tk
64518,
64519,def populate(frame):
64520,    '''Put in some fake data'''
64521,    for row in range(100):
64522,"        tk.Label(frame, text=""%s"" % row, width=3, borderwidth=""1"", "
64523,"                 relief=""solid"").grid(row=row, column=0)"
64524,"        t=""this is the second column for row %s"" %row"
64525,"        tk.Label(frame, text=t).grid(row=row, column=1)"
64526,
64527,def onFrameConfigure(canvas):
64528,    '''Reset the scroll region to encompass the inner frame'''
64529,"    canvas.configure(scrollregion=canvas.bbox(""all""))"
64530,
64531,root = tk.Tk()
64532,"canvas = tk.Canvas(root, borderwidth=0, background=""#ffffff"")"
64533,"frame = tk.Frame(canvas, background=""#ffffff"")"
64534,"vsb = tk.Scrollbar(root, orient=""vertical"", command=canvas.yview)"
64535,canvas.configure(yscrollcommand=vsb.set)
64536,
64537,"vsb.pack(side=""right"", fill=""y"")"
64538,"canvas.pack(side=""left"", fill=""both"", expand=True)"
64539,"canvas.create_window((4,4), window=frame, anchor=""nw"")"
64540,
64541,"frame.bind(""<Configure>"", lambda event, canvas=canvas: onFrameConfigure(canvas))"
64542,
64543,populate(frame)
64544,
64545,root.mainloop()
64546,<Configure>
64547,minsize
64548,"self.frame.columnconfigure(1, minsize=SIZE)"
64549,<Configure>
64550,import tkinter as tk
64551,from tkinter import ttk
64552,
64553,class Scrollable(tk.Frame):
64554,"    """""""
64555,       Make a frame scrollable with scrollbar on the right.
64556,"       After adding or removing widgets to the scrollable frame,"
64557,       call the update() method to refresh the scrollable area.
64558,"    """""""
64559,
64560,"    def __init__(self, frame, width=16):"
64561,
64562,"        scrollbar = tk.Scrollbar(frame, width=width)"
64563,"        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, expand=False)"
64564,
64565,"        self.canvas = tk.Canvas(frame, yscrollcommand=scrollbar.set)"
64566,"        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)"
64567,
64568,        scrollbar.config(command=self.canvas.yview)
64569,
64570,"        self.canvas.bind('<Configure>', self.__fill_canvas)"
64571,
64572,        # base class initialization
64573,"        tk.Frame.__init__(self, frame)"
64574,
64575,        # assign this obj (the inner frame) to the windows item of the canvas
64576,"        self.windows_item = self.canvas.create_window(0,0, window=self, anchor=tk.NW)"
64577,
64578,
64579,"    def __fill_canvas(self, event):"
64580,"        ""Enlarge the windows item to the canvas width"""
64581,
64582,        canvas_width = event.width
64583,"        self.canvas.itemconfig(self.windows_item, width = canvas_width)"
64584,
64585,    def update(self):
64586,"        ""Update the canvas and the scrollregion"""
64587,
64588,        self.update_idletasks()
64589,root = tk.Tk()
64590,
64591,header = ttk.Frame(root)
64592,body = ttk.Frame(root)
64593,footer = ttk.Frame(root)
64594,header.pack()
64595,body.pack()
64596,footer.pack()
64597,
64598,"ttk.Label(header, text=""The header"").pack()"
64599,"ttk.Label(footer, text=""The Footer"").pack()"
64600,
64601,
64602,"scrollable_body = Scrollable(body, width=32)"
64603,
64604,for i in range(30):
64605,"    ttk.Button(scrollable_body, text=""I'm a button in the scrollable frame"").grid()"
64606,
64607,scrollable_body.update()
64608,
64609,root.mainloop()
64610,tk.Frame
64611,tk.Frame
64612,import tkinter as tk
64613,
64614,class ScrollbarFrame(tk.Frame):
64615,"    """""""
64616,    Extends class tk.Frame to support a scrollable Frame 
64617,    This class is independent from the widgets to be scrolled and 
64618,    can be used to replace a standard tk.Frame
64619,"    """""""
64620,"    def __init__(self, parent, **kwargs):"
64621,"        tk.Frame.__init__(self, parent, **kwargs)"
64622,
64623,"        # The Scrollbar, layout to the right"
64624,"        vsb = tk.Scrollbar(self, orient=""vertical"")"
64625,"        vsb.pack(side=""right"", fill=""y"")"
64626,
64627,"        # The Canvas which supports the Scrollbar Interface, layout to the left"
64628,"        self.canvas = tk.Canvas(self, borderwidth=0, background=""#ffffff"")"
64629,"        self.canvas.pack(side=""left"", fill=""both"", expand=True)"
64630,
64631,        # Bind the Scrollbar to the self.canvas Scrollbar Interface
64632,        self.canvas.configure(yscrollcommand=vsb.set)
64633,        vsb.configure(command=self.canvas.yview)
64634,
64635,"        # The Frame to be scrolled, layout into the canvas"
64636,        # All widgets to be scrolled have to use this Frame as parent
64637,"        self.scrolled_frame = tk.Frame(self.canvas, background=self.canvas.cget('bg'))"
64638,"        self.canvas.create_window((4, 4), window=self.scrolled_frame, anchor=""nw"")"
64639,
64640,        # Configures the scrollregion of the Canvas dynamically
64641,"        self.scrolled_frame.bind(""<Configure>"", self.on_configure)"
64642,
64643,"    def on_configure(self, event):"
64644,"        """"""Set the scroll region to encompass the scrolled frame"""""""
64645,"        self.canvas.configure(scrollregion=self.canvas.bbox(""all""))"
64646,class App(tk.Tk):
64647,    def __init__(self):
64648,        super().__init__()
64649,
64650,        sbf = ScrollbarFrame(self)
64651,"        self.grid_rowconfigure(0, weight=1)"
64652,"        self.grid_columnconfigure(0, weight=1)"
64653,"        sbf.grid(row=0, column=0, sticky='nsew')"
64654,"        # sbf.pack(side=""top"", fill=""both"", expand=True)"
64655,
64656,"        # Some data, layout into the sbf.scrolled_frame"
64657,        frame = sbf.scrolled_frame
64658,        for row in range(50):
64659,"            text = ""%s"" % row"
64660,"            tk.Label(frame, text=text,"
64661,"                     width=3, borderwidth=""1"", relief=""solid"") \"
64662,"                .grid(row=row, column=0)"
64663,
64664,"            text = ""this is the second column for row %s"" % row"
64665,"            tk.Label(frame, text=text,"
64666,                     background=sbf.scrolled_frame.cget('bg')) \
64667,"                .grid(row=row, column=1)"
64668,
64669,
64670,"if __name__ == ""__main__"":"
64671,    App().mainloop()
64672,"print ""100"" < ""2""      # True"
64673,"print ""5"" > ""9""        # False"
64674,
64675,"print ""100"" < 2        # False"
64676,"print 100 < ""2""        # True"
64677,
64678,"print 5 > ""9""          # False"
64679,"print ""5"" > 9          # True"
64680,
64681,print [] > float('inf') # True
64682,print () > []          # True
64683,>>> 5 < 'foo'
64684,True
64685,">>> 5 < (1, 2)"
64686,True
64687,>>> 5 < {}
64688,True
64689,">>> 5 < [1, 2]"
64690,True
64691,">>> [1, 2] > 'foo'   # 'list' < 'str' "
64692,False
64693,">>> (1, 2) > 'foo'   # 'tuple' > 'str'"
64694,True
64695,
64696,>>> class Foo(object): pass
64697,>>> class Bar(object): pass
64698,>>> Bar() < Foo()
64699,True
64700,>>> class Foo: pass           # old-style
64701,>>> class Bar(object): pass   # new-style
64702,>>> Bar() < Foo()
64703,False
64704,>>> '10' > 5
64705,Traceback (most recent call last):
64706,"  File ""<pyshell#0>"", line 1, in <module>"
64707,    '10' > 5
64708,TypeError: unorderable types: str() > int()
64709,"complex(1,0) > 'abc'"
64710,False
64711,"complex(1,0) > complex(0,0)"
64712,TypeError
64713,"""int"""
64714,"""string"""
64715,sns.move_legend
64716,.legend
64717,.move_legend
64718,bbox_to_anchor
64719,import matplotlib.pyplot as plt
64720,import numpy as np
64721,
64722,x = np.arange(10)
64723,
64724,fig = plt.figure()
64725,ax = plt.subplot(111)
64726,
64727,for i in xrange(5):
64728,"    ax.plot(x, i * x, label='$y = %ix$' % i)"
64729,
64730,ax.legend()
64731,
64732,plt.show()
64733,bbox_to_anchor
64734,import matplotlib.pyplot as plt
64735,import numpy as np
64736,
64737,x = np.arange(10)
64738,
64739,fig = plt.figure()
64740,ax = plt.subplot(111)
64741,
64742,for i in xrange(5):
64743,"    ax.plot(x, i * x, label='$y = %ix$' % i)"
64744,
64745,"ax.legend(bbox_to_anchor=(1.1, 1.05))"
64746,
64747,plt.show()
64748,import matplotlib.pyplot as plt
64749,import numpy as np
64750,
64751,x = np.arange(10)
64752,
64753,fig = plt.figure()
64754,ax = plt.subplot(111)
64755,
64756,for i in xrange(5):
64757,"    line, = ax.plot(x, i * x, label='$y = %ix$'%i)"
64758,
64759,"ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),"
64760,"          ncol=3, fancybox=True, shadow=True)"
64761,plt.show()
64762,tight_layout()
64763,ax.set_position()
64764,import matplotlib.pyplot as plt
64765,import numpy as np
64766,
64767,x = np.arange(10)
64768,
64769,fig = plt.figure()
64770,ax = plt.subplot(111)
64771,
64772,for i in xrange(5):
64773,"    ax.plot(x, i * x, label='$y = %ix$'%i)"
64774,
64775,# Shrink current axis by 20%
64776,box = ax.get_position()
64777,"ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])"
64778,
64779,# Put a legend to the right of the current axis
64780,"ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))"
64781,
64782,plt.show()
64783,import matplotlib.pyplot as plt
64784,import numpy as np
64785,
64786,x = np.arange(10)
64787,
64788,fig = plt.figure()
64789,ax = plt.subplot(111)
64790,
64791,for i in xrange(5):
64792,"    line, = ax.plot(x, i * x, label='$y = %ix$'%i)"
64793,
64794,# Shrink current axis's height by 10% on the bottom
64795,box = ax.get_position()
64796,"ax.set_position([box.x0, box.y0 + box.height * 0.1,"
64797,"                 box.width, box.height * 0.9])"
64798,
64799,# Put a legend below current axis
64800,"ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),"
64801,"          fancybox=True, shadow=True, ncol=5)"
64802,
64803,plt.show()
64804,plt.figlegend()
64805,ncol=<num cols>
64806,bbox_to_anchor
64807,loc
64808,plt.legend
64809,"loc=""upper right"""
64810,"(0, 0)"
64811,"(1, 1)"
64812,"(x0, y0, width, height) = (0, 0, 1, 1)"
64813,"(x0, y0)"
64814,"plt.legend(loc=(1.04, 0))"
64815,bbox_to_anchor
64816,"(x0, y0)"
64817,loc
64818,"(1.04, 1)"
64819,mode
64820,ncols
64821,"l1 = plt.legend(bbox_to_anchor=(1.04, 1), borderaxespad=0)"
64822,"l2 = plt.legend(bbox_to_anchor=(1.04, 0), loc=""lower left"", borderaxespad=0)"
64823,"l3 = plt.legend(bbox_to_anchor=(1.04, 0.5), loc=""center left"", borderaxespad=0)"
64824,"l4 = plt.legend(bbox_to_anchor=(0, 1.02, 1, 0.2), loc=""lower left"","
64825,"                mode=""expand"", borderaxespad=0, ncol=3)"
64826,"l5 = plt.legend(bbox_to_anchor=(1, 0), loc=""lower right"","
64827,"                bbox_transform=fig.transFigure, ncol=3)"
64828,"l6 = plt.legend(bbox_to_anchor=(0.4, 0.8), loc=""upper right"")"
64829,bbox_to_anchor
64830,l4
64831,"mode=""expand"""
64832,l5
64833,bbox_transform
64834,plt.subplots_adjust
64835,plt.subplots_adjust(right=0.7)
64836,plt.tight_layout
64837,"plt.tight_layout(rect=[0, 0, 0.75, 1])"
64838,"bbox_inches = ""tight"""
64839,"bbox_inches = ""tight"""
64840,plt.savefig
64841,"plt.savefig(""output.png"", bbox_inches=""tight"")"
64842,matplotlib.figure.Figure.legend
64843,fig.legend(loc=7)
64844,loc
64845,import numpy as np
64846,import matplotlib.pyplot as plt
64847,
64848,"x = np.linspace(0, 2*np.pi)"
64849,"colors = [""#7aa0c4"", ""#ca82e1"", ""#8bcd50"", ""#e18882""]"
64850,"fig, axes = plt.subplots(ncols=2)"
64851,for i in range(4):
64852,"    axes[i//2].plot(x, np.sin(x+i), color=colors[i], label=""y=sin(x + {})"".format(i))"
64853,
64854,fig.legend(loc=7)
64855,fig.tight_layout()
64856,fig.subplots_adjust(right=0.75)
64857,plt.show()
64858,bbox_to_anchor
64859,lax
64860,"gridspec_kw={""width_ratios"":[4, 1]}"
64861,"lax.axis(""off"")"
64862,"h, l = ax.get_legend_handles_labels()"
64863,lax
64864,"lax.legend(h, l)"
64865,import matplotlib.pyplot as plt
64866,"plt.rcParams[""figure.figsize""] = 6, 2"
64867,
64868,"fig, (ax, lax) = plt.subplots(ncols=2, gridspec_kw={""width_ratios"":[4, 1]})"
64869,"ax.plot(x, y, label=""y=sin(x)"")"
64870,....
64871,
64872,"h, l = ax.get_legend_handles_labels()"
64873,"lax.legend(h, l, borderaxespad=0)"
64874,"lax.axis(""off"")"
64875,
64876,plt.tight_layout()
64877,plt.show()
64878,bbox_transform
64879,"ax.legend(bbox_to_anchor=(0, 0, 1, 1), bbox_transform=lax.transAxes)"
64880,"lax.axis(""off"")"
64881,bbox_to_anchor
64882,loc
64883,legend()
64884,plot()
64885,# Matplotlib
64886,plt.plot(...)
64887,"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))"
64888,
64889,# Pandas
64890,"df.myCol.plot().legend(loc='center left', bbox_to_anchor=(1, 0.5))"
64891,set_size
64892,FontProperties
64893,matplotlib.legend
64894,matplotlib.pyplot.legend
64895,matplotlib.font_manager
64896,"set_size(self, size)"
64897,import matplotlib.pyplot as plt
64898,from matplotlib.font_manager import FontProperties
64899,
64900,fontP = FontProperties()
64901,fontP.set_size('xx-small')
64902,
64903,"p1, = plt.plot([1, 2, 3], label='Line 1')"
64904,"p2, = plt.plot([3, 2, 1], label='Line 2')"
64905,"plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)"
64906,fontsize='xx-small'
64907,FontProperties
64908,"plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')"
64909,loc
64910,bbox_to_anchor
64911,legend()
64912,"legend(loc=""upper left"", bbox_to_anchor=(1,1))"
64913,plt.tight_layout()
64914,bbox_to_anchor
64915,bbox_extra_artists
64916,bbox_inches='tight'
64917,bbox_to_anchor
64918,import matplotlib.pyplot as plt
64919,
64920,# data 
64921,"all_x = [10,20,30]"
64922,"all_y = [[1,3], [1.5,2.9],[3,2]]"
64923,
64924,# Plot
64925,fig = plt.figure(1)
64926,ax = fig.add_subplot(111)
64927,"ax.plot(all_x, all_y)"
64928,
64929,"# Add legend, title and axis labels"
64930,"lgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))"
64931,ax.set_title('Title')
64932,ax.set_xlabel('x label')
64933,ax.set_ylabel('y label')
64934,
64935,"fig.savefig('image_output.png', dpi=300, format='png')"
64936,bbox_extra_artists
64937,bbox_inches
64938,savefig
64939,"fig.savefig('image_output.png', bbox_extra_artists=(lgd,), bbox_inches='tight')"
64940,fig.savefig()
64941,import matplotlib.pyplot as plt
64942,
64943,# data 
64944,"all_x = [10,20,30]"
64945,"all_y = [[1,3], [1.5,2.9],[3,2]]"
64946,
64947,# Plot
64948,fig = plt.figure(1)
64949,ax = fig.add_subplot(111)
64950,"ax.plot(all_x, all_y)"
64951,
64952,"# Add legend, title and axis labels"
64953,"lgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))"
64954,ax.set_title('Title')
64955,ax.set_xlabel('x label')
64956,ax.set_ylabel('y label')    
64957,
64958,"fig.savefig('image_output.png', dpi=300, format='png', bbox_extra_artists=(lgd,), bbox_inches='tight')"
64959,figure
64960,x = 0:.2:12;
64961,"plot(x,besselj(1,x),x,besselj(2,x),x,besselj(3,x));"
64962,"hleg = legend('First','Second','Third',..."
64963,"              'Location','NorthEastOutside')"
64964,% Make the text of the legend italic and color it brown
64965,"set(hleg,'FontAngle','italic','TextColor',[.3,.2,.1])"
64966,bbox_inches='tight'
64967,matplotlib
64968,pylab
64969,pylab.legend(loc='best')
64970,"loc=""best"""
64971,ax.legend().draggable()
64972,import matplotlib.pylab as plt
64973,import numpy as np
64974,#define the figure and get an axes instance
64975,fig = plt.figure()
64976,ax = fig.add_subplot(111)
64977,#plot the data
64978,"x = np.arange(-5, 6)"
64979,"ax.plot(x, x*x, label='y = x^2')"
64980,"ax.plot(x, x*x*x, label='y = x^3')"
64981,ax.legend().draggable()
64982,plt.show()
64983,fig = pylab.figure()
64984,ax = fig.add_subplot(111)
64985,"ax.plot(x, y, label=label, color=color)"
64986,# Make the legend transparent:
64987,"ax.legend(loc=2, fontsize=10, fancybox=True).get_frame().set_alpha(0.5)"
64988,# Make a transparent text box
64989,"ax.text(0.02, 0.02, yourstring, verticalalignment='bottom',"
64990,"                    horizontalalignment='left',"
64991,"                    fontsize=10,"
64992,"                    bbox={'facecolor':'white', 'alpha':0.6, 'pad':10},"
64993,                    transform=self.ax.transAxes)
64994,3.1.1
64995,loc
64996,plt.tight_layout()
64997,import matplotlib.pyplot as plt
64998,
64999,"plt.plot([0, 1], [0, 1], label=""Label 1"")"
65000,"plt.plot([0, 1], [0, 2], label='Label 2')"
65001,
65002,"plt.legend(loc=(1.05, 0.5))"
65003,plt.tight_layout()
65004,import plotly
65005,import math
65006,import random
65007,import numpy as np
65008,un='IPython.Demo'
65009,k='1fw3zw2o13'
65010,"py = plotly.plotly(username=un, key=k)"
65011,
65012,
65013,"def sin(x,n):"
65014,sine = 0
65015,for i in range(n):
65016,    sign = (-1)**i
65017,    sine = sine + ((x**(2.0*i+1))/math.factorial(2*i+1))*sign
65018,return sine
65019,
65020,"x = np.arange(-12,12,0.1)"
65021,
65022,anno = {
65023,"'text': '$\\sum_{k=0}^{\\infty} \\frac {(-1)^k x^{1+2k}}{(1 + 2k)!}$',"
65024,"'x': 0.3, 'y': 0.6,'xref': ""paper"", 'yref': ""paper"",'showarrow': False,"
65025,'font':{'size':24}
65026,}
65027,
65028,l = {
65029,"'annotations': [anno], "
65030,"'title': 'Taylor series of sine',"
65031,"'xaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},"
65032,"'yaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},"
65033,"'legend':{'font':{'size':16},'bordercolor':'white','bgcolor':'#fcfcfc'}"
65034,}
65035,
65036,"py.iplot([{'x':x, 'y':sin(x,1), 'line':{'color':'#e377c2'}, 'name':'$x\\\\$'},\"
65037,"      {'x':x, 'y':sin(x,2), 'line':{'color':'#7f7f7f'},'name':'$ x-\\frac{x^3}{6}$'},\"
65038,"      {'x':x, 'y':sin(x,3), 'line':{'color':'#bcbd22'},'name':'$ x-\\frac{x^3}{6}+\\frac{x^5}{120}$'},\"
65039,"      {'x':x, 'y':sin(x,4), 'line':{'color':'#17becf'},'name':'$ x-\\frac{x^5}{120}$'}], layout=l)"
65040,"{""x"" : 0,""y"" : 0}"
65041,"{""x"" : 1, ""y"" : 0}"
65042,"{""x"" : 1, ""y"" : 1}"
65043,"{""x"" : 0, ""y"" : 1}"
65044,"{""x"" :.5, ""y"" : 0}"
65045,"{""x"": .5, ""y"" : 1}"
65046,"legendstyle = {""x"" : 1, ""y"" : 1}"
65047,'center left'
65048,from matplotlib as plt
65049,from matplotlib.font_manager import FontProperties
65050,
65051,"t = A[:, 0]"
65052,"sensors = A[:, index_lst]"
65053,
65054,for i in range(sensors.shape[1]):
65055,"    plt.plot(t, sensors[:, i])"
65056,
65057,plt.xlabel('s')
65058,plt.ylabel('°C')
65059,"lgd = plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fancybox = True, shadow = True)"
65060,import matplotlib.pyplot as plt
65061,import numpy as np
65062,
65063,plt.ion()
65064,
65065,x = np.arange(10)
65066,
65067,fig = plt.figure()
65068,ax = plt.subplot(111)
65069,
65070,for i in xrange(5):
65071,"    ax.plot(x, i * x, label='$y = %ix$'%i)"
65072,
65073,# Put a legend to the right of the current axis
65074,"leg = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))"
65075,
65076,plt.draw()
65077,
65078,# Get the ax dimensions.
65079,box = ax.get_position()
65080,"xlocs = (box.x0,box.x1)"
65081,"ylocs = (box.y0,box.y1)"
65082,
65083,# Get the figure size in inches and the dpi.
65084,"w, h = fig.get_size_inches()"
65085,dpi = fig.get_dpi()
65086,
65087,"# Get the legend size, calculate new window width and change the figure size."
65088,legWidth = leg.get_window_extent().width
65089,winWidthNew = w*dpi+legWidth
65090,"fig.set_size_inches(winWidthNew/dpi,h)"
65091,
65092,# Adjust the window size to fit the figure.
65093,mgr = plt.get_current_fig_manager()
65094,"mgr.window.wm_geometry(""%ix%i""%(winWidthNew,mgr.window.winfo_height()))"
65095,
65096,# Rescale the ax to keep its original size.
65097,factor = w*dpi/winWidthNew
65098,x0 = xlocs[0]*factor
65099,x1 = xlocs[1]*factor
65100,width = box.width*factor
65101,"ax.set_position([x0,ylocs[0],x1-x0,ylocs[1]-ylocs[0]])"
65102,
65103,plt.draw()
65104,mgr.window.wm_geometry(...)
65105,mgr.window.setFixedWidth(winWidthNew)
65106,fig.set_size_inches(...)
65107,figlegend
65108,f = plt.figure()
65109,ax = f.add_subplot(414)
65110,"lgd = ax.legend(loc='upper left', bbox_to_anchor=(0, 4), mode=""expand"", borderaxespad=0.3)"
65111,ax.autoscale_view()
65112,"plt.savefig(fig_name, format='svg', dpi=1200, bbox_extra_artists=(lgd,), bbox_inches='tight')"
65113,bbox_extra_artists
65114,bbox_inches
65115,savefig
65116,Figure
65117,import matplotlib.pyplot as plt
65118,
65119,# Data
65120,"all_x = [10, 20, 30]"
65121,"all_y = [[1, 3], [1.5, 2.9], [3, 2]]"
65122,
65123,# Plotting function
65124,"def gen_plot(x, y):"
65125,    fig = plt.figure(1)
65126,    ax = fig.add_subplot(111)
65127,"    ax.plot(all_x, all_y)"
65128,"    lgd = ax.legend([""Lag "" + str(lag) for lag in all_x], loc=""center right"", bbox_to_anchor=(1.3, 0.5))"
65129,    fig.artists.append(lgd) # Here's the change
65130,"    ax.set_title(""Title"")"
65131,"    ax.set_xlabel(""x label"")"
65132,"    ax.set_ylabel(""y label"")"
65133,    return fig
65134,
65135,# Plotting
65136,"fig = gen_plot(all_x, all_y)"
65137,
65138,# No need for `bbox_extra_artists`
65139,"fig.savefig(""image_output.png"", dpi=300, format=""png"", bbox_inches=""tight"")"
65140,import matplotlib.pyplot as plt
65141,"p1, = plt.plot([1, 2, 3])"
65142,"p2, = plt.plot([3, 2, 1])"
65143,"p3, = plt.plot([2, 3, 1])"
65144,"plt.legend([p2, p1, p3], [""line 1"", ""line 2"", ""line 3""]).get_frame().set_alpha(0.5)"
65145,plt.show()
65146,def fun_with_side_effects(x):
65147,    ...side effects...
65148,    return y
65149,[fun_with_side_effects(x) for x in y if (...conditions...)]
65150,for x in y:
65151,    if (...conditions...):
65152,        fun_with_side_effects(x)
65153,for ... in
65154,consume(side_effects(x) for x in xs)
65155,
65156,for x in xs:
65157,    side_effects(x)
65158,consume
65159,itertools
65160,"def consume(iterator, n=None):"
65161,"    ""Advance the iterator n-steps ahead. If n is none, consume entirely."""
65162,    # Use functions that consume iterators at C speed.
65163,    if n is None:
65164,        # feed the entire iterator into a zero-length deque
65165,"        collections.deque(iterator, maxlen=0)"
65166,    else:
65167,        # advance to the empty slice starting at position n
65168,"        next(islice(iterator, n, n), None)"
65169,map
65170,consume = collections.deque(maxlen=0).extend
65171,"y=[1,2,3,4,5,6]"
65172,def func(x):
65173,"    print ""call with %r""%x"
65174,
65175,"for x in filter(lambda x: x>3, y):"
65176,    func(x)
65177,for el in (x for x in y if x > 3):
65178,el
65179,x
65180,x
65181,for z in (fun_with_side_effects(x) for x in y if (...conditions...)): pass
65182,for
65183,for
65184,any(fun_with_side_effects(x) and False for x in y if (...conditions...))
65185,all(fun_with_side_effects(x) or True for x in y if (...conditions...))
65186,all
65187,fun_with_side_effects
65188,itertools.consume
65189,import pandas as pd
65190,
65191,"df = pd.DataFrame({""teams"": [[""SF"", ""NYG""] for _ in range(7)]})"
65192,
65193,       teams
65194,"0  [SF, NYG]"
65195,"1  [SF, NYG]"
65196,"2  [SF, NYG]"
65197,"3  [SF, NYG]"
65198,"4  [SF, NYG]"
65199,"5  [SF, NYG]"
65200,"6  [SF, NYG]"
65201,  team1 team2
65202,0    SF   NYG
65203,1    SF   NYG
65204,2    SF   NYG
65205,3    SF   NYG
65206,4    SF   NYG
65207,5    SF   NYG
65208,6    SF   NYG
65209,DataFrame
65210,lists
65211,to_list
65212,import pandas as pd
65213,
65214,"d1 = {'teams': [['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],"
65215,"                ['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG']]}"
65216,df2 = pd.DataFrame(d1)
65217,print (df2)
65218,       teams
65219,"0  [SF, NYG]"
65220,"1  [SF, NYG]"
65221,"2  [SF, NYG]"
65222,"3  [SF, NYG]"
65223,"4  [SF, NYG]"
65224,"5  [SF, NYG]"
65225,"6  [SF, NYG]"
65226,"df2[['team1','team2']] = pd.DataFrame(df2.teams.tolist(), index= df2.index)"
65227,print (df2)
65228,       teams team1 team2
65229,"0  [SF, NYG]    SF   NYG"
65230,"1  [SF, NYG]    SF   NYG"
65231,"2  [SF, NYG]    SF   NYG"
65232,"3  [SF, NYG]    SF   NYG"
65233,"4  [SF, NYG]    SF   NYG"
65234,"5  [SF, NYG]    SF   NYG"
65235,"6  [SF, NYG]    SF   NYG"
65236,DataFrame
65237,"df3 = pd.DataFrame(df2['teams'].to_list(), columns=['team1','team2'])"
65238,print (df3)
65239,  team1 team2
65240,0    SF   NYG
65241,1    SF   NYG
65242,2    SF   NYG
65243,3    SF   NYG
65244,4    SF   NYG
65245,5    SF   NYG
65246,6    SF   NYG
65247,apply(pd.Series)
65248,#7k rows
65249,df2 = pd.concat([df2]*1000).reset_index(drop=True)
65250,
65251,In [121]: %timeit df2['teams'].apply(pd.Series)
65252,"1.79 s ± 52.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
65253,
65254,"In [122]: %timeit pd.DataFrame(df2['teams'].to_list(), columns=['team1','team2'])"
65255,"1.63 ms ± 54.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
65256,"pd.DataFrame(df2[""teams""].to_list(), columns=['team1', 'team2'])"
65257,  team1 team2
65258,-------------
65259,0    SF   NYG
65260,1    SF   NYG
65261,2    SF   NYG
65262,3    SF   NYG
65263,4    SF   NYG
65264,5    SF   NYG
65265,6    SF   NYG
65266,7    SF   NYG
65267,"pd.DataFrame(df[""teams""].str.split('<delim>', expand=True).values,"
65268,"             columns=['team1', 'team2'])"
65269,"df[""teams""].str.split('<delim>', expand=True)"
65270,df2
65271,tolist()
65272,df3 = df2.teams.apply(pd.Series)
65273,"df3.columns = ['team1', 'team2']"
65274,  team1 team2
65275,0    SF   NYG
65276,1    SF   NYG
65277,2    SF   NYG
65278,3    SF   NYG
65279,4    SF   NYG
65280,5    SF   NYG
65281,6    SF   NYG
65282,.apply(pd.Series)
65283,index
65284,df2 = pd.DataFrame(df['meta'].str.split().values.tolist())
65285,nan
65286,dataframe
65287,"df2[['team1','team2']] = pd.DataFrame(df2.teams.values.tolist(), index= df2.index)"
65288,object of type 'float' has no len()
65289,import pandas as pd
65290,import numpy as np
65291,"d1 = {'teams': [['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],"
65292,"            ['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG']]}"
65293,df2 = pd.DataFrame(d1)
65294,"df2.loc[2,'teams'] = np.nan"
65295,"df2.loc[4,'teams'] = np.nan"
65296,df2
65297,        teams
65298,"0   [SF, NYG]"
65299,"1   [SF, NYG]"
65300,2   NaN
65301,"3   [SF, NYG]"
65302,4   NaN
65303,"5   [SF, NYG]"
65304,"6   [SF, NYG]"
65305,
65306,df2['team1']=np.nan
65307,df2['team2']=np.nan
65308,"for i in [0,1]:"
65309,"    df2['team{}'.format(str(i+1))]=[k[i] if isinstance(k,list) else k for k in df2['teams']]"
65310,
65311,df2
65312,    teams   team1   team2
65313,"0   [SF, NYG]   SF  NYG"
65314,"1   [SF, NYG]   SF  NYG"
65315,2   NaN        NaN  NaN
65316,"3   [SF, NYG]   SF  NYG"
65317,4   NaN        NaN  NaN
65318,"5   [SF, NYG]   SF  NYG"
65319,"6   [SF, NYG]   SF  NYG"
65320,df = pd.DataFrame([pd.Series(x) for x in df.teams])
65321,df.columns = ['team_{}'.format(x+1) for x in df.columns]
65322,"CPU times: user 0 ns, sys: 0 ns, total: 0 ns"
65323,Wall time: 2.71 ms
65324,team_1    team_2
65325,0    SF    NYG
65326,1    SF    NYG
65327,2    SF    NYG
65328,3    SF    NYG
65329,4    SF    NYG
65330,5    SF    NYG
65331,6    SF    NYG
65332,"df = pd.DataFrame({""teams"": [[""SF"", ""NYG""] for _ in range(7)]})"
65333,%%timeit
65334,"df['team1'], df['team2'] = zip(*list(df['teams'].values))"
65335,>> 761 µs ± 8.35 µs per loop
65336,%%timeit
65337,"df[['team1','team2']] = pd.DataFrame(df.teams.tolist(), index=df.index)"
65338,"df = pd.DataFrame(df['teams'].to_list(), columns=['team1','team2'])"
65339,>> 1.31 ms ± 11.2 µs per loop
65340,zip(*list)
65341,df.transform
65342,df.set_index
65343,>>> from operator import itemgetter
65344,">>> df['teams'].transform({'item1': itemgetter(0), 'item2': itemgetter(1)})"
65345,
65346,  team1 team2
65347,0    SF   NYG
65348,1    SF   NYG
65349,2    SF   NYG
65350,3    SF   NYG
65351,4    SF   NYG
65352,5    SF   NYG
65353,6    SF   NYG
65354,>>> indices = range(len(df['teams'][0]))
65355,
65356,>>> df['teams'].transform({f'team{i+1}': itemgetter(i) for i in indices})
65357,
65358,  team1 team2
65359,0    SF   NYG
65360,1    SF   NYG
65361,2    SF   NYG
65362,3    SF   NYG
65363,4    SF   NYG
65364,5    SF   NYG
65365,6    SF   NYG
65366,>>> df
65367,                 teams
65368,"0  [SF, NYG, XYZ, ABC]"
65369,"1  [SF, NYG, XYZ, ABC]"
65370,"2  [SF, NYG, XYZ, ABC]"
65371,"3  [SF, NYG, XYZ, ABC]"
65372,"4  [SF, NYG, XYZ, ABC]"
65373,"5  [SF, NYG, XYZ, ABC]"
65374,"6  [SF, NYG, XYZ, ABC]"
65375,
65376,">>> indices = [0, 2]"
65377,>>> df['teams'].transform({f'team{i+1}': itemgetter(i) for i in indices})
65378,
65379,  team1 team3
65380,0    SF   XYZ
65381,1    SF   XYZ
65382,2    SF   XYZ
65383,3    SF   XYZ
65384,4    SF   XYZ
65385,5    SF   XYZ
65386,6    SF   XYZ
65387,"pd.DataFrame([{x: y for x, y in enumerate(item)} for item in df2['teams'].values.tolist()], index=df2.index)"
65388,In [1]:
65389,import pandas as pd
65390,"d1 = {'teams': [['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],"
65391,"                ['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG']]}"
65392,df2 = pd.DataFrame(d1)
65393,df2 = pd.concat([df2]*1000).reset_index(drop=True)
65394,
65395,In [2]: %timeit df2['teams'].apply(pd.Series)
65396,
65397,"8.27 s ± 2.73 s per loop (mean ± std. dev. of 7 runs, 1 loop each)"
65398,
65399,"In [3]: %timeit pd.DataFrame([{x: y for x, y in enumerate(item)} for item in df2['teams'].values.tolist()], index=df2.index)"
65400,
65401,"35.4 ms ± 5.22 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
65402,"df = pd.DataFrame({""teams"": [[""SF"", ""NYG""] for _ in range(7)]})"
65403,"df[""team1""]=df['teams'].apply(lambda x: x[0]  )"
65404,"df[""team2""]=df['teams'].apply(lambda x: x[1]  )"
65405,df
65406,from functools import partial
65407,
65408,class Cage(object):
65409,"    def __init__(self, animal):"
65410,        self.animal = animal
65411,
65412,def gotimes(do_the_petting):
65413,    do_the_petting()
65414,
65415,def get_petters():
65416,"    for animal in ['cow', 'dog', 'cat']:"
65417,        cage = Cage(animal)
65418,
65419,        def pet_function():
65420,"            print ""Mary pets the "" + cage.animal + ""."""
65421,
65422,"        yield (animal, partial(gotimes, pet_function))"
65423,
65424,funs = list(get_petters())
65425,
65426,"for name, f in funs:"
65427,"    print name + "":"", "
65428,    f()
65429,cow: Mary pets the cat.
65430,dog: Mary pets the cat.
65431,cat: Mary pets the cat.
65432,cage
65433,"for animal in ['cat', 'dog', 'cow']"
65434,pet_function
65435,cage
65436,cage
65437,get_petters
65438,cage
65439,get_petters
65440,cage
65441,'cow'
65442,'dog'
65443,'cat'
65444,cage
65445,'cat'
65446,'cat'
65447,functools.partial()
65448,from functools import partial
65449,
65450,def pet_function(cage=None):
65451,"    print ""Mary pets the "" + cage.animal + ""."""
65452,
65453,"yield (animal, partial(gotimes, partial(pet_function, cage=cage)))"
65454,def scoped_cage(cage=None):
65455,    def pet_function():
65456,"        print ""Mary pets the "" + cage.animal + ""."""
65457,    return pet_function
65458,
65459,"yield (animal, partial(gotimes, scoped_cage(cage)))"
65460,def pet_function(cage=cage):
65461,"    print ""Mary pets the "" + cage.animal + ""."""
65462,
65463,"yield (animal, partial(gotimes, pet_function))"
65464,scoped_cage
65465,funs = list(get_petters())
65466,"for name, f in get_petters():"
65467,"    print name + "":"", "
65468,    f()
65469,cow: Mary pets the cow.
65470,dog: Mary pets the dog.
65471,cat: Mary pets the cat.
65472,for i in range(2): 
65473,    pass
65474,
65475,print(i)  # prints 1
65476,i
65477,cage
65478,cage.animal
65479,def get_petters():
65480,"    for animal in ['cow', 'dog', 'cat']:"
65481,        def pet_function():
65482,"            return ""Mary pets the "" + animal + ""."""
65483,
65484,"        yield (animal, pet_function)"
65485,">>> for name, f in list(get_petters()):"
65486,"...     print(name + "":"", f())"
65487,
65488,cow: Mary pets the cat.
65489,dog: Mary pets the cat.
65490,cat: Mary pets the cat.
65491,list()
65492,">>> for name, f in get_petters():"
65493,"...     print(name + "":"", f())"
65494,
65495,cow: Mary pets the cow.
65496,dog: Mary pets the dog.
65497,cat: Mary pets the cat.
65498,list(get_petters())
65499,>>> list(get_petters())
65500,
65501,"[('cow', <function get_petters.<locals>.pet_function at 0x7ff2b988d790>),"
65502," ('dog', <function get_petters.<locals>.pet_function at 0x7ff2c18f51f0>),"
65503," ('cat', <function get_petters.<locals>.pet_function at 0x7ff2c14a9f70>)]"
65504,cell
65505,">>> for _, f in list(get_petters()):"
65506,"...     print(f(), f.__closure__)"
65507,
65508,"Mary pets the cat. (<cell at 0x7ff2c112a9d0: str object at 0x7ff2c3f437f0>,)"
65509,"Mary pets the cat. (<cell at 0x7ff2c112a9d0: str object at 0x7ff2c3f437f0>,)"
65510,"Mary pets the cat. (<cell at 0x7ff2c112a9d0: str object at 0x7ff2c3f437f0>,)"
65511,
65512,">>> for _, f in get_petters():"
65513,"...     print(f(), f.__closure__)"
65514,
65515,"Mary pets the cow. (<cell at 0x7ff2b86b5d00: str object at 0x7ff2c1a95670>,)"
65516,"Mary pets the dog. (<cell at 0x7ff2b86b5d00: str object at 0x7ff2c1a952f0>,)"
65517,"Mary pets the cat. (<cell at 0x7ff2b86b5d00: str object at 0x7ff2c3f437f0>,)"
65518,cell
65519,str
65520,cell
65521,animal
65522,get_petters()
65523,animal
65524,str
65525,f
65526,get_petters()
65527,list
65528,get_petters()
65529,f
65530,animal
65531,animal
65532,animal
65533,i
65534,animal
65535,things = 5
65536,"print(""You have "" + things + "" things."")"
65537,Traceback (most recent call last):
65538,"  File ""<stdin>"", line 1, in <module>"
65539,"TypeError: can only concatenate str (not ""int"") to str"
65540,Traceback (most recent call last):
65541,"  File ""<stdin>"", line 1, in <module>"
65542,TypeError: cannot concatenate 'str' and 'int' objects
65543,+
65544,+
65545,>>> 1 + 2
65546,3
65547,>>> 3.4 + 5.6
65548,9.0
65549,">>> [1, 2, 3] + [4, 5, 6]"
65550,"[1, 2, 3, 4, 5, 6]"
65551,>>> 'abc' + 'def'
65552,'abcdef'
65553,'3' + 5
65554,'35'
65555,8
65556,'8'
65557,">>> [7, 8, 9] + 'ghi'"
65558,Traceback (most recent call last):
65559,"  File ""<stdin>"", line 1, in <module>"
65560,"TypeError: can only concatenate list (not ""str"") to list"
65561,>>> 'Total: ' + str(123)
65562,'Total: 123'
65563,>>> int('456') + 789
65564,1245
65565,+
65566,>>> things = 5
65567,>>> 'You have %d things.' % things  # % interpolation
65568,'You have 5 things.'
65569,>>> 'You have {} things.'.format(things)  # str.format()
65570,'You have 5 things.'
65571,>>> f'You have {things} things.'  # f-string (since Python 3.6)
65572,'You have 5 things.'
65573,>>> value = 5
65574,>>> sq_root = value ** 0.5
65575,>>> sq_root
65576,2.23606797749979
65577,">>> 'The square root of %d is %.2f (roughly).' % (value, sq_root)"
65578,'The square root of 5 is 2.24 (roughly).'
65579,">>> 'The square root of {v} is {sr:.2f} (roughly).'.format(v=value, sr=sq_root)"
65580,'The square root of 5 is 2.24 (roughly).'
65581,>>> f'The square root of {value} is {sq_root:.2f} (roughly).'
65582,'The square root of 5 is 2.24 (roughly).'
65583,str.format()
65584,str.format()
65585,print
65586,sep
65587,' '
65588,>>> things = 5
65589,">>> print('you have', things, 'things.')"
65590,you have 5 things.
65591,">>> print('you have', things, 'things.', sep=' ... ')"
65592,you have ... 5 ... things.
65593,>>> 1 + 2.3
65594,3.3
65595,>>> 4.5 + (5.6+7j)
65596,(10.1+7j)
65597,string
65598,In file included from src/_numericsurfarray.c:23:
65599,src/pygame.h:106:10: fatal error: 'SDL.h' file not found
65600,#include <SDL.h>
65601,         ^
65602,1 error generated.
65603,error: Setup script exited with error: command 'gcc' failed with exit status 1
65604,brew install sdl sdl_image sdl_mixer sdl_ttf portmidi
65605,pip install https://bitbucket.org/pygame/pygame/get/default.tar.gz
65606,brew install sdl
65607,1.Install [Quartz](https://xquartz.macosforge.org/landing/);
65608,"2.Install Xcode-Command-Line,"
65609,"  but you may cant install it by `xcode-select --install`,"
65610,  so you can down from 
65611,  https://developer.apple.com/downloads/index.action ;
65612,"  I suggest you setup xcode,and this really solute my some problem;"
65613,3.`brew tap homebrew/headonly`
65614,  `brew install smpeg --HEAD`
65615,  `brew install sdl sdl_image sdl_mixer sdl_ttf portmidi`
65616,
65617,4. `sudo pip install hg+http://bitbucket.org/pygame/pygame`;
65618,"   if you clone this repo and try `python setup.py install`,you may meet some weird problem;"
65619,"p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)"
65620,p.terminate()
65621,p.kill()
65622,"p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)"
65623,p.terminate()
65624,cmd
65625,shell=True
65626,import os
65627,import signal
65628,import subprocess
65629,
65630,# The os.setsid() is passed in the argument preexec_fn so
65631,# it's run after the fork() and before  exec() to run the shell.
65632,"pro = subprocess.Popen(cmd, stdout=subprocess.PIPE, "
65633,"                       shell=True, preexec_fn=os.setsid) "
65634,
65635,"os.killpg(os.getpgid(pro.pid), signal.SIGTERM)  # Send the signal to all the process groups"
65636,subprocess.CREATE_NEW_PROCESS_GROUP
65637,CREATE_NEW_PROCESS_GROUP
65638,start_new_session=True
65639,setsid
65640,"p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)"
65641,p.kill()
65642,p.kill()
65643,cmd
65644,"p = subprocess.Popen(""exec "" + cmd, stdout=subprocess.PIPE, shell=True)"
65645,p.pid
65646,p.kill()
65647,import subprocess
65648,
65649,import psutil
65650,
65651,
65652,def kill(proc_pid):
65653,    process = psutil.Process(proc_pid)
65654,    for proc in process.children(recursive=True):
65655,        proc.kill()
65656,    process.kill()
65657,
65658,
65659,"proc = subprocess.Popen([""infinite_app"", ""param""], shell=True)"
65660,try:
65661,    proc.wait(timeout=3)
65662,except subprocess.TimeoutExpired:
65663,    kill(proc.pid)
65664,AttributeError: 'Process' object has no attribute 'get_children
65665,pip install psutil
65666,from subprocess import Popen
65667,
65668,"process = Popen(command, shell=True)"
65669,"Popen(""TASKKILL /F /PID {pid} /T"".format(pid=process.pid))"
65670,cmd.exe
65671,"Popen(""TASKKILL /F /IM "" + process_name)"
65672,command
65673,shell=True
65674,SIGTERM
65675,SIGKILL
65676,shell=False
65677,.kill()
65678,.poll()
65679,subprocess.Popen
65680,proc = subprocess.Popen(...)
65681,try:
65682,"    outs, errs = proc.communicate(timeout=15)"
65683,except TimeoutExpired:
65684,    proc.kill()
65685,"    outs, errs = proc.communicate()"
65686,proc.communicate()
65687,proc.kill()
65688,"if isinstance(command, unicode):"
65689,    cmd = command.encode('utf8')
65690,args = shlex.split(cmd)
65691,
65692,"p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
65693,cwd
65694,Popen
65695,"    self.proc = Popen(commands, "
65696,"            stdout=PIPE, "
65697,"            stderr=STDOUT, "
65698,"            universal_newlines=True, "
65699,            preexec_fn=os.setsid)
65700,
65701,"    os.killpg(os.getpgid(self.proc.pid), signal.SIGHUP)"
65702,"    os.killpg(os.getpgid(self.proc.pid), signal.SIGTERM)"
65703,Python 3.5
65704,Python 3.8
65705,"import subprocess, signal, time"
65706,"p = subprocess.Popen(['cmd'], shell=True)"
65707,time.sleep(5) #Wait 5 secs before killing
65708,p.send_signal(signal.CTRL_C_EVENT)
65709,try:
65710,    FailingCode #here goes the code which is raising KeyboardInterrupt
65711,except KeyboardInterrupt:
65712,    pass
65713,signal
65714,if os.name == 'nt':  # windows
65715,"    subprocess.Popen(""TASKKILL /F /PID {pid} /T"".format(pid=process.pid))"
65716,else:
65717,"    os.kill(process.pid, signal.SIGTERM)"
65718,pip install command_runner
65719,from command_runner import command_runner
65720,
65721,# Kills ping after 2 seconds
65722,"exit_code, output = command_runner('ping 127.0.0.1', shell=True, timeout=2)"
65723,from time import time
65724,from command_runner import command_runner
65725,
65726,def my_condition():
65727,    # Arbitrary condition for demo
65728,    return True if int(str(int(time()))[-1]) > 5
65729,
65730,# Calls my_condition() every second (check_interval) and kills ping if my_condition() returns True
65731,"exit_code, output = command_runner('ping 127.0.0.1', shell=True, stop_on=my_condition, check_interval=1)"
65732,t
65733,x
65734,class Test:
65735,   def __init__(self):
65736,       self.attr1 = 1
65737,       self.attr2 = 2
65738,
65739,t = Test()
65740,"x = ""attr1"""
65741,getattr
65742,setattr
65743,"getattr(object, attrname)"
65744,"setattr(object, attrname, value)"
65745,"x = getattr(t, 'attr1')"
65746,"setattr(t, 'attr1', 21)"
65747,df1
65748,x = 'df1'
65749,"getattr(x, 'shape')"
65750,"getattr('df1', 'shape')"
65751,"getattr(globals()[x], 'shape')"
65752,class Test:
65753,    def __init__(self):
65754,        self.attr1 = 1
65755,        self.attr2 = 2
65756,
65757,"    def get(self,varname):"
65758,"        return getattr(self,varname)"
65759,
65760,t = Test()
65761,"x = ""attr1"""
65762,"print (""Attribute value of {0} is {1}"".format(x, t.get(x)))"
65763,Attribute value of attr1 is 1
65764,__getattribute__
65765,vars()
65766,"getattr(self,varname)"
65767,return vars(self)[varname]
65768,getattr
65769,vars
65770,setattr
65771,new
65772,>>> from new import  classobj
65773,
65774,">>> obj = classobj('Test', (object,), {'attr1': int, 'attr2': int}) # Just created a class"
65775,
65776,">>> setattr(obj, 'attr1', 10)"
65777,
65778,">>> setattr(obj, 'attr2', 20)"
65779,
65780,">>> getattr(obj, 'attr1')"
65781,10
65782,
65783,">>> getattr(obj, 'attr2')"
65784,20
65785,"[""foo"", ""bar"", ""baz""]"
65786,"""bar"""
65787,1
65788,"""bar"""
65789,"""bar"""
65790,">>> [""foo"", ""bar"", ""baz""].index(""bar"")"
65791,1
65792,index
65793,list
65794,list.index
65795,"list.index(x[, start[, end]])"
65796,ValueError
65797,index
65798,index
65799,"l.index(999_999, 999_990, 1_000_000)"
65800,l.index(999_999)
65801,>>> import timeit
65802,">>> timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)"
65803,9.356267921015387
65804,">>> timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)"
65805,0.0004404920036904514
65806, 
65807,index
65808,">>> [1, 1].index(1)"
65809,0
65810,">>> [i for i, e in enumerate([1, 2, 1]) if e == 1]"
65811,"[0, 2]"
65812,">>> g = (i for i, e in enumerate([1, 2, 1]) if e == 1)"
65813,>>> next(g)
65814,0
65815,>>> next(g)
65816,2
65817,index
65818,index
65819,index
65820,ValueError
65821,">>> [1, 1].index(2)"
65822,Traceback (most recent call last):
65823,"  File ""<stdin>"", line 1, in <module>"
65824,ValueError: 2 is not in list
65825,item in my_list
65826,index
65827,try/except
65828,ValueError
65829,index()
65830,">>> help([""foo"", ""bar"", ""baz""])"
65831,Help on list object:
65832,
65833,class list(object)
65834, ...
65835,
65836, |
65837, |  index(...)
65838," |      L.index(value, [start, [stop]]) -> integer -- return first index of value"
65839, |
65840,enumerate()
65841,"for i, j in enumerate(['foo', 'bar', 'baz']):"
65842,    if j == 'bar':
65843,        print(i)
65844,index()
65845,enumerate()
65846,"[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'bar']"
65847,itertools.count()
65848,"from itertools import izip as zip, count # izip for maximum efficiency"
65849,"[i for i, j in zip(count(), ['foo', 'bar', 'baz']) if j == 'bar']"
65850,enumerate()
65851,"$ python -m timeit -s ""from itertools import izip as zip, count"" ""[i for i, j in zip(count(), ['foo', 'bar', 'baz']*500) if j == 'bar']"""
65852,"10000 loops, best of 3: 174 usec per loop"
65853,"$ python -m timeit ""[i for i, j in enumerate(['foo', 'bar', 'baz']*500) if j == 'bar']"""
65854,"10000 loops, best of 3: 196 usec per loop"
65855,"indexes = [i for i,x in enumerate(xs) if x == 'foo']"
65856,index()
65857,"def all_indices(value, qlist):"
65858,    indices = []
65859,    idx = -1
65860,    while True:
65861,        try:
65862,"            idx = qlist.index(value, idx+1)"
65863,            indices.append(idx)
65864,        except ValueError:
65865,            break
65866,    return indices
65867,
65868,"all_indices(""foo"", [""foo"",""bar"",""baz"",""foo""])"
65869,# if element is found it returns index of element else returns None
65870,
65871,"def find_element_in_list(element, list_element):"
65872,    try:
65873,        index_element = list_element.index(element)
65874,        return index_element
65875,    except ValueError:
65876,        return None
65877,"a = [""foo"",""bar"",""baz"",'bar','any','much']"
65878,
65879,indexes = [index for index in range(len(a)) if a[index] == 'bar']
65880,if 'your_element' in mylist:
65881,    print mylist.index('your_element')
65882,else:
65883,    print None
65884,in
65885,import numpy as np
65886,
65887,"array = [1, 2, 1, 3, 4, 5, 1]"
65888,item = 1
65889,np_array = np.array(array)
65890,item_index = np.where(np_array==item)
65891,print item_index
65892,"# Out: (array([0, 2, 6], dtype=int64),)"
65893,[i for i in range(len(mylist)) if mylist[i]==myterm]  # get the indices
65894,
65895,[each for each in mylist if each==myterm]             # get the items
65896,
65897,mylist.index(myterm) if myterm in mylist else None    # get the first index and fail quietly
65898,"[""foo"", ""bar"", ""baz""]"
65899,"""bar"""
65900,">>> l = [""foo"", ""bar"", ""baz""]"
65901,>>> l.index('bar')
65902,1
65903,ValueError
65904,ValueError
65905,"def index(a_list, value):"
65906,    try:
65907,        return a_list.index(value)
65908,    except ValueError:
65909,        return None
65910,">>> print(index(l, 'quux'))"
65911,None
65912,">>> print(index(l, 'bar'))"
65913,1
65914,is
65915,is not
65916,"result = index(a_list, value)"
65917,if result is not None:
65918,    do_something(result)
65919,list.index
65920,>>> l.append('bar')
65921,>>> l
65922,"['foo', 'bar', 'baz', 'bar']"
65923,>>> l.index('bar')              # nothing at index 3?
65924,1
65925,">>> [index for index, v in enumerate(l) if v == 'bar']"
65926,"[1, 3]"
65927,">>> [index for index, v in enumerate(l) if v == 'boink']"
65928,[]
65929,"indexes = [index for index, v in enumerate(l) if v == 'boink']"
65930,for index in indexes:
65931,    do_something(index)
65932,>>> import pandas as pd
65933,>>> series = pd.Series(l)
65934,>>> series
65935,0    foo
65936,1    bar
65937,2    baz
65938,3    bar
65939,dtype: object
65940,>>> series == 'bar'
65941,0    False
65942,1     True
65943,2    False
65944,3     True
65945,dtype: bool
65946,>>> series[series == 'bar']
65947,1    bar
65948,3    bar
65949,dtype: object
65950,>>> series[series == 'bar'].index
65951,"Int64Index([1, 3], dtype='int64')"
65952,>>> list(series[series == 'bar'].index)
65953,"[1, 3]"
65954,">>> [i for i, value in enumerate(l) if value == 'bar']"
65955,"[1, 3]"
65956,ValueError
65957,list.index
65958,idlelib
65959,keyword
65960,key_list[key_list.index(old)] = new
65961,del key_list[key_list.index(key)]
65962,mon = MONTHS_LOWER.index(mon.lower())+1
65963,members = members[:members.index(tarinfo)]
65964,numtopop = before.index(markobject)
65965,list.index
65966,">>> alist = ['foo', 'spam', 'egg', 'foo']"
65967,">>> foo_indexes = [n for n,x in enumerate(alist) if x=='foo']"
65968,>>> foo_indexes
65969,"[0, 3]"
65970,>>>
65971,"def indexlist(item2find, list_or_string):"
65972,"  ""Returns all indexes of an item in a list or a string"""
65973,"  return [n for n,item in enumerate(list_or_string) if item==item2find]"
65974,
65975,"print(indexlist(""1"", ""010101010""))"
65976,"[1, 3, 5, 7]"
65977,"for n, i in enumerate([1, 2, 3, 4, 1]):"
65978,    if i == 1:
65979,        print(n)
65980,0
65981,4
65982,"me = [""foo"", ""bar"", ""baz""]"
65983,"me.index(""bar"") "
65984,zip
65985,"get_indexes = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x == y]"
65986,
65987,"print get_indexes(2, [1, 2, 3, 4, 5, 6, 3, 2, 3, 2])"
65988,"print get_indexes('f', 'xsfhhttytffsafweef')"
65989,"a = [['hand', 'head'], ['phone', 'wallet'], ['lost', 'stock']]"
65990,"b = ['phone', 'lost']"
65991,
65992,res = [[x[0] for x in a].index(y) for y in b]
65993,">>> a = ['red', 'blue', 'green', 'red']"
65994,>>> b = 'red'
65995,>>> offset = 0;
65996,>>> indices = list()
65997,>>> for i in range(a.count(b)):
65998,"...     indices.append(a.index(b,offset))"
65999,...     offset = indices[-1]+1
66000,... 
66001,>>> indices
66002,"[0, 3]"
66003,>>> 
66004,"def indices(l, val):"
66005,"    """"""Always returns a list containing the indices of val in the_list"""""""
66006,    retval = []
66007,    last = 0
66008,    while val in l[last:]:
66009,            i = l[last:].index(val)
66010,            retval.append(last + i)
66011,            last += i + 1   
66012,    return retval
66013,
66014,"l = ['bar','foo','bar','baz','bar','bar']"
66015,q = 'bar'
66016,"print indices(l,q)"
66017,"print indices(l,'bat')"
66018,"print indices('abcdaababb','a')"
66019,"Python 2.7.6 (v2.7.6:3a1db0d2747e, Nov 10 2013, 00:42:54) "
66020,[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
66021,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
66022,">>> def indices(the_list, val):"
66023,"...     """"""Always returns a list containing the indices of val in the_list"""""""
66024,...     retval = []
66025,...     last = 0
66026,...     while val in the_list[last:]:
66027,...             i = the_list[last:].index(val)
66028,...             retval.append(last + i)
66029,...             last += i + 1   
66030,...     return retval
66031,... 
66032,">>> l = ['bar','foo','bar','baz','bar','bar']"
66033,>>> q = 'bar'
66034,">>> print indices(l,q)"
66035,"[0, 2, 4, 5]"
66036,">>> print indices(l,'bat')"
66037,[]
66038,">>> print indices('abcdaababb','a')"
66039,"[0, 4, 5, 7]"
66040,>>> 
66041,"def indices(l, val):"
66042,"    """"""Always returns a list containing the indices of val in the_list"""""""
66043,"    return [index for index, value in enumerate(l) if value == val]"
66044,
66045,"l = ['bar','foo','bar','baz','bar','bar']"
66046,q = 'bar'
66047,"print indices(l,q)"
66048,"print indices(l,'bat')"
66049,"print indices('abcdaababb','a')"
66050,"Python 2.7.14 |Anaconda, Inc.| (default, Dec  7 2017, 11:07:58) "
66051,[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin
66052,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
66053,">>> def indices(l, val):"
66054,"...     """"""Always returns a list containing the indices of val in the_list"""""""
66055,"...     return [index for index, value in enumerate(l) if value == val]"
66056,... 
66057,">>> l = ['bar','foo','bar','baz','bar','bar']"
66058,>>> q = 'bar'
66059,">>> print indices(l,q)"
66060,"[0, 2, 4, 5]"
66061,">>> print indices(l,'bat')"
66062,[]
66063,">>> print indices('abcdaababb','a')"
66064,"[0, 4, 5, 7]"
66065,>>> 
66066,index()
66067,"LIST = ['foo' ,'boo', 'shoo']"
66068,print(LIST.index('boo'))
66069,1
66070,">>> a = ['foo','bar','baz','bar','any', 'foo', 'much']"
66071,">>> l = dict(zip(set(a), map(lambda y: [i for i,z in enumerate(a) if z is y ], set(a))))"
66072,>>> l['foo']
66073,"[0, 5]"
66074,>>> l ['much']
66075,[6]
66076,>>> l
66077,"{'baz': [2], 'foo': [0, 5], 'bar': [1, 3], 'any': [4], 'much': [6]}"
66078,>>> 
66079,idx = L.index(x) if (x in L) else -1
66080,for
66081,"def find_element(p,t):"
66082,    i = 0
66083,    for e in p:
66084,        if e == t:
66085,            return i
66086,        else:
66087,            i +=1
66088,    return -1
66089,"list =  [""foo"", ""bar"", ""baz""]"
66090,
66091,"item_to_find = ""foo"""
66092,
66093,if item_to_find in list:
66094,      index = list.index(item_to_find)
66095,"      print(""Index of the item is "" + str(index))"
66096,else:
66097,"    print(""That word does not exist"") "
66098,array.index()
66099,indexOf()
66100,"fruits = ['apple', 'banana', 'cherry']"
66101,
66102,try:
66103,"  pos = fruits.index(""mango"")"
66104,except:
66105,  pos = -1
66106,fruits
66107,pos
66108,pos
66109,"a_list = [""a"", ""b"", ""a""]"
66110,"print([index for (index , item) in enumerate(a_list) if item == ""a""])"
66111,"list(filter(lambda x: x[1]==""bar"",enumerate([""foo"", ""bar"", ""baz"", ""bar"", ""baz"", ""bar"", ""a"", ""b"", ""c""])))"
66112,"def get_index_of(lst, element):"
66113,"    return list(map(lambda x: x[0],\"
66114,"       (list(filter(lambda x: x[1]==element, enumerate(lst))))))"
66115,Scala
66116,index()
66117,indexOf()
66118,-1
66119,try:
66120,    index = array.index('search_keyword')
66121,except ValueError:
66122,    index = -1
66123,"name =""bar"""
66124,"list = [[""foo"", 1], [""bar"", 2], [""baz"", 3]]"
66125,new_list=[]
66126,for item in list:
66127,    new_list.append(item[0])
66128,print(new_list)
66129,try:
66130,    location= new_list.index(name)
66131,except:
66132,    location=-1
66133,print (location)
66134,location = -1
66135,# Throws ValueError if nothing is found
66136,"some_list = ['foo', 'bar', 'baz'].index('baz')"
66137,# some_list == 2
66138,"some_list = [item1, item2, item3]"
66139,
66140,# Throws StopIteration if nothing is found
66141,# *unless* you provide a second parameter to `next`
66142,index_of_value_you_like = next(
66143,"    i for i, item in enumerate(some_list)"
66144,    if item.matches_your_criteria())
66145,index_of_staff_members = [
66146,"    i for i, user in enumerate(users)"
66147,    if user.is_staff()]
66148,"idx = next((i for i, v in enumerate(ls) if v == chk), -1)"
66149,">>> [i for i,j in zip(range(len(haystack)), haystack) if j == 'needle' ]"
66150,list.index(item)
66151,"myList = [""foo"", ""bar"", ""baz""]"
66152,
66153,# Create the dictionary
66154,"myDict = dict((e,i) for i,e in enumerate(myList))"
66155,
66156,# Lookup
66157,"myDict[""bar""] # Returns 1"
66158,"# myDict.get(""blah"") if you don't want an error to be raised if element not found."
66159,from collections import defaultdict as dd
66160,"myList = [""foo"", ""bar"", ""bar"", ""baz"", ""foo""]"
66161,
66162,# Create the dictionary
66163,myDict = dd(list)
66164,"for i,e in enumerate(myList):"
66165,    myDict[e].append(i)
66166,
66167,# Lookup
66168,"myDict[""foo""] # Returns [0, 4]"
66169,def funA():
66170,    def funA1():
66171,        def funA12():
66172,            # stuff
66173,
66174,    def funA2():
66175,        # stuff
66176,
66177,def funB():
66178,    def funB1():
66179,        # stuff
66180,
66181,    def funB2():
66182,        # stuff
66183,
66184,def funC():
66185,    def funC1():
66186,        # stuff
66187,
66188,    def funC2():
66189,        # stuff
66190,
66191,
66192,root = tk.Tk()
66193,
66194,"button1 = tk.Button(root, command=funA)"
66195,button1.pack()
66196,"button2 = tk.Button(root, command=funB)"
66197,button2.pack()
66198,"button3 = tk.Button(root, command=funC)"
66199,button3.pack()
66200,funA
66201,funB
66202,funC
66203,Toplevel
66204,"# Use Tkinter for python 2, tkinter for python 3"
66205,import tkinter as tk
66206,
66207,class MainApplication(tk.Frame):
66208,"    def __init__(self, parent, *args, **kwargs):"
66209,"        tk.Frame.__init__(self, parent, *args, **kwargs)"
66210,        self.parent = parent
66211,
66212,        <create the rest of your GUI here>
66213,
66214,"if __name__ == ""__main__"":"
66215,    root = tk.Tk()
66216,"    MainApplication(root).pack(side=""top"", fill=""both"", expand=True)"
66217,    root.mainloop()
66218,tk.
66219,tk.Frame
66220,tk.Toplevel
66221,class Navbar(tk.Frame): ...
66222,class Toolbar(tk.Frame): ...
66223,class Statusbar(tk.Frame): ...
66224,class Main(tk.Frame): ...
66225,
66226,class MainApplication(tk.Frame):
66227,"    def __init__(self, parent, *args, **kwargs):"
66228,"        tk.Frame.__init__(self, parent, *args, **kwargs)"
66229,"        self.statusbar = Statusbar(self, ...)"
66230,"        self.toolbar = Toolbar(self, ...)"
66231,"        self.navbar = Navbar(self, ...)"
66232,"        self.main = Main(self, ...)"
66233,
66234,"        self.statusbar.pack(side=""bottom"", fill=""x"")"
66235,"        self.toolbar.pack(side=""top"", fill=""x"")"
66236,"        self.navbar.pack(side=""left"", fill=""y"")"
66237,"        self.main.pack(side=""right"", fill=""both"", expand=True)"
66238,"self.parent.statusbar.set(""Hello, world"")"
66239,main_window.py
66240,login_window.py
66241,import_file_window.py
66242,import tkinter as tk
66243,
66244,class Demo1:
66245,"    def __init__(self, master):"
66246,        self.master = master
66247,        self.frame = tk.Frame(self.master)
66248,"        self.button1 = tk.Button(self.frame, text = 'New Window', width = 25, command = self.new_window)"
66249,        self.button1.pack()
66250,        self.frame.pack()
66251,    def new_window(self):
66252,        self.newWindow = tk.Toplevel(self.master)
66253,        self.app = Demo2(self.newWindow)
66254,
66255,class Demo2:
66256,"    def __init__(self, master):"
66257,        self.master = master
66258,        self.frame = tk.Frame(self.master)
66259,"        self.quitButton = tk.Button(self.frame, text = 'Quit', width = 25, command = self.close_windows)"
66260,        self.quitButton.pack()
66261,        self.frame.pack()
66262,    def close_windows(self):
66263,        self.master.destroy()
66264,
66265,def main(): 
66266,    root = tk.Tk()
66267,    app = Demo1(root)
66268,    root.mainloop()
66269,
66270,if __name__ == '__main__':
66271,    main()
66272,root
66273,Demo1
66274,import tkinter as tk
66275,
66276,class Window1:
66277,"    def __init__(self, master):"
66278,        pass
66279,"        # Create labels, entries,buttons"
66280,    def button_click(self):
66281,        pass
66282,"        # If button is clicked, run this method and open window 2"
66283,
66284,
66285,class Window2:
66286,"    def __init__(self, master):"
66287,"        #create buttons,entries,etc"
66288,
66289,    def button_method(self):
66290,        #run this when button click to close window
66291,        self.master.destroy()
66292,
66293,def main(): #run mianloop 
66294,    root = tk.Tk()
66295,    app = Window1(root)
66296,    root.mainloop()
66297,
66298,if __name__ == '__main__':
66299,    main()
66300,__init__
66301,frame
66302,from Tkinter import *
66303,class App:
66304,"  def __init__(self, master):"
66305,    frame = Frame(master)
66306,    frame.pack()
66307,"    self.button = Button(frame, "
66308,"                         text=""QUIT"", fg=""red"","
66309,                         command=frame.quit)
66310,    self.button.pack(side=LEFT)
66311,"    self.slogan = Button(frame,"
66312,"                         text=""Hello"","
66313,                         command=self.write_slogan)
66314,    self.slogan.pack(side=LEFT)
66315,  def write_slogan(self):
66316,"    print ""Tkinter is easy to use!"""
66317,
66318,root = Tk()
66319,app = App(root)
66320,root.mainloop()
66321,TKinter
66322,tkinter
66323,main()
66324,from module_name import *
66325,"button1 = tk.Button(root, command=funA)"
66326,"button1 = ttk.Button(root, command=funA)"
66327,tkinter
66328,*
66329,"button1 = Button(root, command=funA)"
66330,App(root)
66331,App()
66332,Frame
66333,class hello(Tk):
66334,    def __init__(self):
66335,"        super(hello, self).__init__()"
66336,"        self.btn = Button(text = ""Click me"", command=close)"
66337,        self.btn.pack()
66338,    def close():
66339,        self.destroy()
66340,
66341,app = hello()
66342,app.mainloop()
66343,import tkinter as tk
66344,
66345,"LARGE_FONT= (""Verdana"", 12)"
66346,
66347,class SeaofBTCapp(tk.Tk):
66348,"    """""""
66349,    tkinter example app with OOP
66350,"    """""""
66351,
66352,"    def __init__(self, *args, **kwargs):"
66353,        
66354,"        tk.Tk.__init__(self, *args, **kwargs)"
66355,        container = tk.Frame(self)
66356,
66357,"        container.pack(side=""top"", fill=""both"", expand = True)"
66358,
66359,"        container.grid_rowconfigure(0, weight=1)"
66360,"        container.grid_columnconfigure(0, weight=1)"
66361,
66362,        self.frames = {}
66363,
66364,"        for frame_class in (StartPage,PageOne, PageTwo):"
66365,
66366,"            frame = frame_class(container, self)"
66367,
66368,            self.frames[frame_class] = frame
66369,
66370,"            frame.grid(row=0, column=0, sticky=""nsew"")"
66371,    
66372,
66373,        self.show_frame(StartPage)
66374,
66375,"    def show_frame(self, cont):"
66376,"        """""""
66377,        Put specific frame on top
66378,"        """""""
66379,
66380,        frame = self.frames[cont]
66381,        frame.tkraise()
66382,
66383,        
66384,class StartPage(tk.Frame):
66385,"    """""""
66386,    Starting frame for app
66387,"    """""""
66388,
66389,"    def __init__(self, parent, controller):"
66390,"        tk.Frame.__init__(self,parent,bg='grey')"
66391,"        label = tk.Label(self, text=""Start Page"", font=LARGE_FONT)"
66392,"        label.pack(pady=10,padx=10)"
66393,
66394,"        button_page1 = tk.Button(self, text = 'Visit Page 1', command= lambda: controller.show_frame(PageOne))"
66395,        button_page1.pack()
66396,
66397,"        button_page2 = tk.Button(self, text = 'Visit Page 2', command= lambda: controller.show_frame(PageTwo))"
66398,        button_page2.pack()
66399,
66400,class PageOne(tk.Frame):
66401,"    """""""
66402,    First page of program
66403,"    """""""
66404,
66405,"    def __init__(self,parent,controller):"
66406,"        tk.Frame.__init__(self,parent,bg='light blue')"
66407,"        label = tk.Label(self, text=""Page one"", font=LARGE_FONT)"
66408,"        label.pack(pady=10,padx=10)"
66409,
66410,"        button_home = tk.Button(self, text = 'Back to Home', command= lambda: controller.show_frame(StartPage))"
66411,        button_home.pack()
66412,
66413,"        button_home = tk.Button(self, text = 'Go to page2', command= lambda: controller.show_frame(PageTwo))"
66414,        button_home.pack()
66415,
66416,class PageTwo(tk.Frame):
66417,"    """""""
66418,    First page of program
66419,"    """""""
66420,
66421,"    def __init__(self,parent,controller):"
66422,"        tk.Frame.__init__(self,parent,bg='light green')"
66423,"        label = tk.Label(self, text=""Page two"", font=LARGE_FONT)"
66424,"        label.pack(pady=10,padx=10)"
66425,
66426,"        button_home = tk.Button(self, text = 'Back to Home', command= lambda: controller.show_frame(StartPage))"
66427,        button_home.pack()
66428,
66429,"        button_home = tk.Button(self, text = 'Go to page1', command= lambda: controller.show_frame(PageOne))"
66430,        button_home.pack()
66431,
66432,
66433,
66434,
66435,app = SeaofBTCapp()
66436,app.mainloop()
66437,df
66438,groupby
66439,"df['col1','col2','col3','col4'].groupby(['col1','col2']).mean()"
66440,.size()
66441,Series
66442,"df.groupby(['col1','col2']).size()"
66443,DataFrame
66444,Series
66445,"df.groupby(['col1', 'col2']).size().reset_index(name='counts')"
66446,In [2]: df
66447,Out[2]: 
66448,  col1 col2  col3  col4  col5  col6
66449,0    A    B  0.20 -0.61 -0.49  1.49
66450,1    A    B -1.53 -1.01 -0.39  1.82
66451,2    A    B -0.44  0.27  0.72  0.11
66452,3    A    B  0.28 -1.32  0.38  0.18
66453,4    C    D  0.12  0.59  0.81  0.66
66454,5    C    D -0.13 -1.65 -1.64  0.50
66455,6    C    D -1.42 -0.11 -0.18 -0.44
66456,7    E    F -0.00  1.42 -0.26  1.17
66457,8    E    F  0.91 -0.47  1.35 -0.34
66458,9    G    H  1.48 -0.63 -1.14  0.17
66459,.size()
66460,"In [3]: df.groupby(['col1', 'col2']).size()"
66461,Out[3]: 
66462,col1  col2
66463,A     B       4
66464,C     D       3
66465,E     F       2
66466,G     H       1
66467,dtype: int64
66468,.size().reset_index(name='counts')
66469,"In [4]: df.groupby(['col1', 'col2']).size().reset_index(name='counts')"
66470,Out[4]: 
66471,  col1 col2  counts
66472,0    A    B       4
66473,1    C    D       3
66474,2    E    F       2
66475,3    G    H       1
66476,In [5]: (df
66477,"   ...: .groupby(['col1', 'col2'])"
66478,   ...: .agg({
66479,"   ...:     'col3': ['mean', 'count'], "
66480,"   ...:     'col4': ['median', 'min', 'count']"
66481,   ...: }))
66482,Out[5]: 
66483,            col4                  col3      
66484,          median   min count      mean count
66485,col1 col2                                   
66486,A    B    -0.810 -1.32     4 -0.372500     4
66487,C    D    -0.110 -1.65     3 -0.476667     3
66488,E    F     0.475 -0.47     2  0.455000     2
66489,G    H    -0.630 -0.63     1  1.480000     1
66490,join
66491,"In [6]: gb = df.groupby(['col1', 'col2'])"
66492,   ...: counts = gb.size().to_frame(name='counts')
66493,   ...: (counts
66494,   ...:  .join(gb.agg({'col3': 'mean'}).rename(columns={'col3': 'col3_mean'}))
66495,   ...:  .join(gb.agg({'col4': 'median'}).rename(columns={'col4': 'col4_median'}))
66496,   ...:  .join(gb.agg({'col4': 'min'}).rename(columns={'col4': 'col4_min'}))
66497,   ...:  .reset_index()
66498,   ...: )
66499,   ...: 
66500,Out[6]: 
66501,  col1 col2  counts  col3_mean  col4_median  col4_min
66502,0    A    B       4  -0.372500       -0.810     -1.32
66503,1    C    D       3  -0.476667       -0.110     -1.65
66504,2    E    F       2   0.455000        0.475     -0.47
66505,3    G    H       1   1.480000       -0.630     -0.63
66506,In [1]: import numpy as np
66507,   ...: import pandas as pd 
66508,   ...: 
66509,   ...: keys = np.array([
66510,"   ...:         ['A', 'B'],"
66511,"   ...:         ['A', 'B'],"
66512,"   ...:         ['A', 'B'],"
66513,"   ...:         ['A', 'B'],"
66514,"   ...:         ['C', 'D'],"
66515,"   ...:         ['C', 'D'],"
66516,"   ...:         ['C', 'D'],"
66517,"   ...:         ['E', 'F'],"
66518,"   ...:         ['E', 'F'],"
66519,"   ...:         ['G', 'H'] "
66520,   ...:         ])
66521,   ...: 
66522,   ...: df = pd.DataFrame(
66523,"   ...:     np.hstack([keys,np.random.randn(10,4).round(2)]), "
66524,"   ...:     columns = ['col1', 'col2', 'col3', 'col4', 'col5', 'col6']"
66525,   ...: )
66526,   ...: 
66527,"   ...: df[['col3', 'col4', 'col5', 'col6']] = \"
66528,"   ...:     df[['col3', 'col4', 'col5', 'col6']].astype(float)"
66529,   ...: 
66530,NaN
66531,In [5]: counts_df = pd.DataFrame(df.groupby('col1').size().rename('counts'))
66532,counts_df = pd.DataFrame(df.groupby('col1').size().reset_index(name='counts')
66533,isnull
66534,"'col4': ['median', 'min', 'count', 'isnull']"
66535,reset_index
66536,DataFrame
66537,as_index
66538,"df.groupby(['col1','col2'], as_index=False).size()"
66539,as_index=False
66540,groupby
66541,groupby
66542,agg
66543,"df[['col1', 'col2', 'col3', 'col4']].groupby(['col1', 'col2']).agg(['mean', 'count'])"
66544,"df[['col1','col2','col3','col4']].groupby(['col1','col2']).agg(['mean', 'count'])"
66545,count
66546,"result = df['col1','col2','col3','col4'].groupby(['col1', 'col2']).mean() ; counts = times.groupby(['col1', 'col2']).size() ; result['count'] = counts"
66547,GroupBy.describe
66548,count
66549,mean
66550,std
66551,"df.groupby(['A', 'B'])['C'].describe()"
66552,
66553,           count  mean   std   min   25%   50%   75%   max
66554,A   B                                                     
66555,bar one      1.0  0.40   NaN  0.40  0.40  0.40  0.40  0.40
66556,    three    1.0  2.24   NaN  2.24  2.24  2.24  2.24  2.24
66557,    two      1.0 -0.98   NaN -0.98 -0.98 -0.98 -0.98 -0.98
66558,foo one      2.0  1.36  0.58  0.95  1.15  1.36  1.56  1.76
66559,    three    1.0 -0.15   NaN -0.15 -0.15 -0.15 -0.15 -0.15
66560,    two      2.0  1.42  0.63  0.98  1.20  1.42  1.65  1.87
66561,"df.groupby(['A', 'B'])['C'].describe()[['count', 'mean']]"
66562,
66563,           count      mean
66564,A   B                     
66565,bar one      1.0  0.400157
66566,    three    1.0  2.240893
66567,    two      1.0 -0.977278
66568,foo one      2.0  1.357070
66569,    three    1.0 -0.151357
66570,    two      2.0  1.423148
66571,groupby.agg
66572,describe
66573,['C']
66574,"['C', 'D']"
66575,"df2 = df.assign(D=list('aaabbccc')).sample(n=100, replace=True)"
66576,
66577,"with pd.option_context('precision', 2):"
66578,"    display(df2.groupby(['A', 'B'])"
66579,               .describe(include='all')
66580,"               .dropna(how='all', axis=1))"
66581,
66582,              C                                                   D                
66583,          count  mean       std   min   25%   50%   75%   max count unique top freq
66584,A   B                                                                              
66585,bar one    14.0  0.40  5.76e-17  0.40  0.40  0.40  0.40  0.40    14      1   a   14
66586,    three  14.0  2.24  4.61e-16  2.24  2.24  2.24  2.24  2.24    14      1   b   14
66587,    two     9.0 -0.98  0.00e+00 -0.98 -0.98 -0.98 -0.98 -0.98     9      1   c    9
66588,foo one    22.0  1.43  4.10e-01  0.95  0.95  1.76  1.76  1.76    22      2   a   13
66589,    three  15.0 -0.15  0.00e+00 -0.15 -0.15 -0.15 -0.15 -0.15    15      1   c   15
66590,    two    26.0  1.49  4.48e-01  0.98  0.98  1.87  1.87  1.87    26      2   b   15
66591,DataFrame.value_counts
66592,GroupBy
66593,"df.value_counts(subset=['col1', 'col2'])"
66594,# Setup
66595,np.random.seed(0)
66596,"df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',"
66597,"                          'foo', 'bar', 'foo', 'foo'],"
66598,"                   'B' : ['one', 'one', 'two', 'three',"
66599,"                          'two', 'two', 'one', 'three'],"
66600,"                   'C' : np.random.randn(8),"
66601,                   'D' : np.random.randn(8)})
66602,
66603,"df.value_counts(['A', 'B']) "
66604,
66605,A    B    
66606,foo  two      2
66607,     one      2
66608,     three    1
66609,bar  two      1
66610,     three    1
66611,     one      1
66612,dtype: int64
66613,".describe()[['count', 'mean']]"
66614,".agg(['count', 'mean']"
66615,['col_name'].describe()
66616,.value_counts()
66617,.size()
66618,"df = df.groupby(['col1','col2']).agg(['mean', 'count'])"
66619,df.columns = [ ' '.join(str(i) for i in col) for col in df.columns]
66620,df.reset_index(inplace=True)
66621,df
66622,df.columns = [ '_'.join(str(i) for i in col) for col in df.columns]
66623,"df[['col1','col2','col3','col4']].groupby(['col1','col2']).count().\"
66624,reset_index()
66625,"new_column=df[['col1', 'col2', 'col3', 'col4']].groupby(['col1', 'col2']).count()"
66626,df['count_it']=new_column
66627,df
66628,"grp = df.groupby(['col1',  'col2',  'col3']) "
66629,
66630,grp.max() 
66631,grp.mean() 
66632,grp.describe() 
66633,"from datar.all import tibble, rnorm, f, group_by, summarise, mean, n, rep"
66634,
66635,df = tibble(
66636,"  col1=rep(['A', 'B'], 5), "
66637,"  col2=rep(['C', 'D'], each=5), "
66638,"  col3=rnorm(10), "
66639,  col4=rnorm(10)
66640,)
66641,"df >> group_by(f.col1, f.col2) >> summarise("
66642,"  count=n(),"
66643,"  col3_mean=mean(f.col3), "
66644,  col4_mean=mean(f.col4)
66645,)
66646,  col1 col2  n  mean_col3  mean_col4
66647,0    A    C  3  -0.516402   0.468454
66648,1    A    D  2  -0.248848   0.979655
66649,2    B    C  2   0.545518  -0.966536
66650,3    B    D  3  -0.349836  -0.915293
66651,[Groups: ['col1'] (n=2)]
66652,while True:
66653,    # Code executed here
66654,    time.sleep(60)
66655,time.sleep(60)
66656,"import sched, time"
66657,"s = sched.scheduler(time.time, time.sleep)"
66658,def do_something(sc): 
66659,"    print(""Doing stuff..."")"
66660,    # do your stuff
66661,"    sc.enter(60, 1, do_something, (sc,))"
66662,
66663,"s.enter(60, 1, do_something, (s,))"
66664,s.run()
66665,asyncio
66666,trio
66667,tkinter
66668,PyQt5
66669,gobject
66670,kivy
66671,enterabs()
66672,time.sleep
66673,s.enter(...)
66674,sc
66675,import time
66676,starttime = time.time()
66677,while True:
66678,"    print(""tick"")"
66679,    time.sleep(60.0 - ((time.time() - starttime) % 60.0))
66680,twisted
66681,x
66682,x
66683,"from time import time, sleep"
66684,starttime
66685,time.sleep(60 - time.time() % 60)
66686,time.sleep(1200 - time.time() % 1200)
66687,:00 :20 :40
66688,sleep()
66689,timer()
66690,while keep_doing_it(): sleep(interval - timer() % interval)
66691,while keep_doing_it(): sleep(interval)
66692,from threading import Timer
66693,
66694,class RepeatedTimer(object):
66695,"    def __init__(self, interval, function, *args, **kwargs):"
66696,        self._timer     = None
66697,        self.interval   = interval
66698,        self.function   = function
66699,        self.args       = args
66700,        self.kwargs     = kwargs
66701,        self.is_running = False
66702,        self.start()
66703,
66704,    def _run(self):
66705,        self.is_running = False
66706,        self.start()
66707,"        self.function(*self.args, **self.kwargs)"
66708,
66709,    def start(self):
66710,        if not self.is_running:
66711,"            self._timer = Timer(self.interval, self._run)"
66712,            self._timer.start()
66713,            self.is_running = True
66714,
66715,    def stop(self):
66716,        self._timer.cancel()
66717,        self.is_running = False
66718,from time import sleep
66719,
66720,def hello(name):
66721,"    print ""Hello %s!"" % name"
66722,
66723,"print ""starting..."""
66724,"rt = RepeatedTimer(1, hello, ""World"") # it auto-starts, no need of rt.start()"
66725,try:
66726,    sleep(5) # your long-running job goes here...
66727,finally:
66728,    rt.stop() # better in a try/finally block to make sure the program ends!
66729,start()
66730,stop()
66731,interval
66732,args
66733,kwargs
66734,function
66735,def _run(self)
66736,self.start()
66737,self.function()
66738,start()
66739,self.is_running
66740,False
66741,x
66742,interval
66743,function
66744,self._timer
66745,start
66746,.function()
66747,.start()
66748,function
66749,interval
66750,cron
66751,"from twisted.internet import task, reactor"
66752,
66753,timeout = 60.0 # Sixty seconds
66754,
66755,def doWork():
66756,    #do work here
66757,    pass
66758,
66759,l = task.LoopingCall(doWork)
66760,l.start(timeout) # call every sixty seconds
66761,
66762,reactor.run()
66763,import threading 
66764,import time
66765,
66766,class RepeatedTimer(object):
66767,"  def __init__(self, interval, function, *args, **kwargs):"
66768,    self._timer = None
66769,    self.interval = interval
66770,    self.function = function
66771,    self.args = args
66772,    self.kwargs = kwargs
66773,    self.is_running = False
66774,    self.next_call = time.time()
66775,    self.start()
66776,
66777,  def _run(self):
66778,    self.is_running = False
66779,    self.start()
66780,"    self.function(*self.args, **self.kwargs)"
66781,
66782,  def start(self):
66783,    if not self.is_running:
66784,      self.next_call += self.interval
66785,"      self._timer = threading.Timer(self.next_call - time.time(), self._run)"
66786,      self._timer.start()
66787,      self.is_running = True
66788,
66789,  def stop(self):
66790,    self._timer.cancel()
66791,    self.is_running = False
66792,from time import sleep
66793,
66794,def hello(name):
66795,"    print ""Hello %s!"" % name"
66796,
66797,"print ""starting..."""
66798,"rt = RepeatedTimer(1, hello, ""World"") # it auto-starts, no need of rt.start()"
66799,try:
66800,    sleep(5) # your long-running job goes here...
66801,finally:
66802,    rt.stop() # better in a try/finally block to make sure the program ends!
66803,"import time, traceback"
66804,
66805,"def every(delay, task):"
66806,  next_time = time.time() + delay
66807,  while True:
66808,"    time.sleep(max(0, next_time - time.time()))"
66809,    try:
66810,      task()
66811,    except Exception:
66812,      traceback.print_exc()
66813,      # in production code you might want to have this instead of course:
66814,"      # logger.exception(""Problem while executing repetitive task."")"
66815,    # skip tasks if we are behind schedule:
66816,    next_time += (time.time() - next_time) // delay * delay + delay
66817,
66818,def foo():
66819,"  print(""foo"", time.time())"
66820,
66821,"every(5, foo)"
66822,import threading
66823,"threading.Thread(target=lambda: every(5, foo)).start()"
66824,threading.Timer
66825,sleep()
66826,next_time += delay
66827,import time
66828,
66829,def executeSomething():
66830,    #code here
66831,    time.sleep(60)
66832,
66833,while True:
66834,    executeSomething()
66835,time.sleep()
66836,time.sleep()
66837,while True
66838,def executeSomething(): print('10 sec left')  ; while True: executeSomething(); time.sleep(10)
66839,import schedule
66840,import time
66841,
66842,def job():
66843,"    print(""I'm working..."")"
66844,
66845,schedule.every(10).minutes.do(job)
66846,schedule.every().hour.do(job)
66847,"schedule.every().day.at(""10:30"").do(job)"
66848,schedule.every(5).to(10).minutes.do(job)
66849,schedule.every().monday.do(job)
66850,"schedule.every().wednesday.at(""13:15"").do(job)"
66851,"schedule.every().minute.at("":17"").do(job)"
66852,
66853,while True:
66854,    schedule.run_pending()
66855,    time.sleep(1)
66856,gevent.spawn()
66857,"schedule.every(MIN_BETWEEN_IMAGES).minutes.at("":00"").do(run_function)"
66858,MIN_BETWEEN_IMAGES
66859,run_function
66860,pip install apscheduler
66861,from apscheduler.schedulers.background import BlockingScheduler
66862,def print_t():
66863,  pass
66864,
66865,sched = BlockingScheduler()
66866,"sched.add_job(print_t, 'interval', seconds =60) #will do the print_t work for every 60 seconds"
66867,
66868,sched.start()
66869,PytzUsageWarning
66870,import cronus.beat as beat
66871,
66872,beat.set_rate(2) # 2 Hz
66873,while beat.true():
66874,    # do some time consuming work here
66875,    beat.sleep() # total loop duration would be 0.5 sec
66876,"import threading, time"
66877,
66878,def print_every_n_seconds(n=2):
66879,    while True:
66880,        print(time.ctime())
66881,        time.sleep(n)
66882,    
66883,"thread = threading.Thread(target=print_every_n_seconds, daemon=True)"
66884,thread.start()
66885,#Tue Oct 16 17:29:40 2018
66886,#Tue Oct 16 17:29:42 2018
66887,#Tue Oct 16 17:29:44 2018
66888,daemon=True
66889,pytest
66890,import time
66891,
66892,while True:
66893,"    print(""this will run after every 30 sec"")"
66894,    #Your code here
66895,    time.sleep(30)
66896,import time
66897,t=time.time()
66898,
66899,while True:
66900,    if time.time()-t>10:
66901,        #run your task here
66902,        t=time.time()
66903,while True:
66904,import Tkinter
66905,
66906,def do_something1():
66907,  global n1
66908,  n1 += 1
66909,  if n1 == 6: # (Optional condition)
66910,"    print ""* do_something1() is done *""; return"
66911,  # Do your stuff here
66912,  # ...
66913,"  print ""do_something1() ""+str(n1)"
66914,"  tk.after(1000, do_something1)"
66915,
66916,def do_something2(): 
66917,  global n2
66918,  n2 += 1
66919,  if n2 == 6: # (Optional condition)
66920,"    print ""* do_something2() is done *""; return"
66921,  # Do your stuff here
66922,  # ...
66923,"  print ""do_something2() ""+str(n2)"
66924,"  tk.after(500, do_something2)"
66925,
66926,tk = Tkinter.Tk(); 
66927,n1 = 0; n2 = 0
66928,do_something1()
66929,do_something2()
66930,tk.mainloop()
66931,do_something1()
66932,do_something2()
66933,after
66934,after
66935,do_something1
66936,do_something2
66937,sched
66938,class RepeatedTimer(object):
66939,"def __init__(self, first_interval, interval, func, *args, **kwargs):"
66940,    self.timer      = None
66941,    self.first_interval = first_interval
66942,    self.interval   = interval
66943,    self.func   = func
66944,    self.args       = args
66945,    self.kwargs     = kwargs
66946,    self.running = False
66947,    self.is_started = False
66948,
66949,def first_start(self):
66950,    try:
66951,        # no race-condition here because only control thread will call this method
66952,        # if already started will not start again
66953,        if not self.is_started:
66954,            self.is_started = True
66955,"            self.timer = Timer(self.first_interval, self.run)"
66956,            self.running = True
66957,            self.timer.start()
66958,    except Exception as e:
66959,"        log_print(syslog.LOG_ERR, ""timer first_start failed %s %s""%(e.message, traceback.format_exc()))"
66960,        raise
66961,
66962,def run(self):
66963,    # if not stopped start again
66964,    if self.running:
66965,"        self.timer = Timer(self.interval, self.run)"
66966,        self.timer.start()
66967,"    self.func(*self.args, **self.kwargs)"
66968,
66969,def stop(self):
66970,    # cancel current timer in case failed it's still OK
66971,    # if already stopped doesn't matter to stop again
66972,    if self.timer:
66973,        self.timer.cancel()
66974,    self.running = False
66975,"def delay_until(condition_fn, interval_in_sec, timeout_in_sec):"
66976,"    """"""Delay using a boolean callable function."
66977,
66978,    `condition_fn` is invoked every `interval_in_sec` until `timeout_in_sec`.
66979,    It can break early if condition is met.
66980,
66981,    Args:
66982,        condition_fn     - a callable boolean function
66983,        interval_in_sec  - wait time between calling `condition_fn`
66984,        timeout_in_sec   - maximum time to run
66985,
66986,    Returns: None
66987,"    """""""
66988,    start = last_call = time.time()
66989,    while time.time() - start < timeout_in_sec:
66990,        if (time.time() - last_call) > interval_in_sec:
66991,            if condition_fn() is True:
66992,                break
66993,            last_call = time.time()
66994,import math
66995,import time
66996,import random
66997,
66998,TICK = 60 # one minute tick size
66999,TICK_TIMING = 59 # execute on 59th second of the tick
67000,TICK_MINIMUM = 30 # minimum catch up tick size when lagging
67001,
67002,def set_timing():
67003,
67004,    now = time.time()
67005,    elapsed = now - info['begin']
67006,    minutes = math.floor(elapsed/TICK)
67007,    tick_elapsed = now - info['completion_time']
67008,    if (info['tick']+1) > minutes:
67009,"        wait = max(0,(TICK_TIMING-(time.time() % TICK)))"
67010,        print ('standard wait: %.2f' % wait)
67011,        time.sleep(wait)
67012,    elif tick_elapsed < TICK_MINIMUM:
67013,        wait = TICK_MINIMUM-tick_elapsed
67014,        print ('minimum wait: %.2f' % wait)
67015,        time.sleep(wait)
67016,    else:
67017,        print ('skip set_timing(); no wait')
67018,    drift = ((time.time() - info['begin']) - info['tick']*TICK -
67019,        TICK_TIMING + info['begin']%TICK)
67020,    print ('drift: %.6f' % drift)
67021,
67022,info['tick'] = 0
67023,info['begin'] = time.time()
67024,info['completion_time'] = info['begin'] - TICK
67025,
67026,while 1:
67027,
67028,    set_timing()
67029,
67030,    print('hello world')
67031,
67032,    #random real world event
67033,    time.sleep(random.random()*TICK_MINIMUM)
67034,
67035,    info['tick'] += 1
67036,    info['completion_time'] = time.time()
67037,"60,60,62,58,60,60,120,30,30,60,60,60,60,60...etc."
67038,import datetime
67039,import glib
67040,import logger
67041,
67042,def get_local_time():
67043,"    current_time = datetime.datetime.now().strftime(""%H:%M"")"
67044,"    logger.info(""get_local_time(): %s"",current_time)"
67045,    return str(current_time)
67046,
67047,def display_local_time():
67048,"    logger.info(""Current time is: %s"", get_local_time())"
67049,    return True
67050,
67051,# call every minute
67052,"glib.timeout_add(60*1000, display_local_time)"
67053,    ''' tracking number of times it prints'''
67054,import threading
67055,
67056,global timeInterval
67057,count=0
67058,def printit():
67059,"  threading.Timer(timeInterval, printit).start()"
67060,"  print( ""Hello, World!"")"
67061,  global count
67062,  count=count+1
67063,  print(count)
67064,printit
67065,
67066,"if __name__ == ""__main__"":"
67067,    timeInterval= int(input('Enter Time in Seconds:'))
67068,    printit()
67069,def print_every_5_seconds_have_passed_exit_eventually():
67070,"    """""""
67071,    https://stackoverflow.com/questions/3393612/run-certain-code-every-n-seconds
67072,    https://stackoverflow.com/questions/474528/what-is-the-best-way-to-repeatedly-execute-a-function-every-x-seconds
67073,    :return:
67074,"    """""""
67075,    opts = argparse.Namespace(start=time.time())
67076,    next_time_to_print = 0
67077,    while True:
67078,        current_time_passed = time.time() - opts.start
67079,        if current_time_passed >= next_time_to_print:
67080,            next_time_to_print += 5
67081,            print(f'worked and {current_time_passed=}')
67082,            print(f'{current_time_passed % 5=}')
67083,            print(f'{math.floor(current_time_passed % 5) == 0}')
67084,starting __main__ at __init__
67085,worked and current_time_passed=0.0001709461212158203
67086,current_time_passed % 5=0.0001709461212158203
67087,True
67088,worked and current_time_passed=5.0
67089,current_time_passed % 5=0.0
67090,True
67091,worked and current_time_passed=10.0
67092,current_time_passed % 5=0.0
67093,True
67094,worked and current_time_passed=15.0
67095,current_time_passed % 5=0.0
67096,True
67097,if foo.py has changed:
67098,    unimport foo  <-- How do I do this?
67099,    import foo
67100,    myfoo = foo.Foo()
67101,importlib.reload()
67102,from importlib import reload  # Python 3.4+
67103,import foo
67104,
67105,while True:
67106,    # Do some things.
67107,    if is_changed(foo):
67108,        foo = reload(foo)
67109,reload
67110,imp
67111,imp
67112,importlib
67113,reload
67114,init
67115,Foo
67116,Foo
67117,foo
67118,is_changed
67119,imp.reload(module)
67120,imp
67121,importlib
67122,importlib.reload(module)
67123,reload(__builtins__)
67124,">>> import sys, empty, os"
67125,>>> sys.getrefcount(sys)
67126,9
67127,>>> sys.getrefcount(os)
67128,6
67129,>>> sys.getrefcount(empty)
67130,3
67131,">>> del sys.modules[""empty""]"
67132,>>> del empty
67133,"setattr(package, ""empty"", None)"
67134,reload()
67135,reload(module)
67136,isinstance
67137,reload()
67138,sys.modules
67139,sys.modules
67140,None
67141,None
67142,sys.modules
67143,None
67144,reload
67145,reload
67146,reload(module)
67147,reload
67148,import imp
67149,imp.reload(module)
67150,imp
67151,importlib
67152,import importlib
67153,importlib.reload(module)
67154,from importlib import reload
67155,reload(module)
67156,importlib.reload(module)
67157,imp.reload(module)
67158,reload(module)
67159,from six import reload_module
67160,pip install six
67161,from six.moves import reload_module
67162,if 'myModule' in sys.modules:  
67163,"    del sys.modules[""myModule""]"
67164,nose.run()
67165,reload(my_module)
67166,%run my_module
67167,[del(sys.modules[mod] for mod in sys.modules.keys() if mod.startswith('myModule.')]
67168,import sys; import json; del sys.modules['json']; print(json.dumps([1]))
67169,for mod in [ m for m in sys.modules if m.lstrip('_').startswith('json') ]: del sys.modules[mod]
67170,before = [mod for mod in sys.modules] ; import json ; after = [mod for mod in sys.modules if mod not in before] ; for mod in [ m for m in sys.modules if m in after ]: del sys.modules[mod]
67171,try:
67172,    reload
67173,except NameError:
67174,    # Python 3
67175,    from imp import reload
67176,reload()
67177,"def importOrReload(module_name, *names):"
67178,    import sys
67179,
67180,    if module_name in sys.modules:
67181,        reload(sys.modules[module_name])
67182,    else:
67183,"        __import__(module_name, fromlist=names)"
67184,
67185,    for name in names:
67186,"        globals()[name] = getattr(sys.modules[module_name], name)"
67187,
67188,# use instead of: from dfly_parser import parseMessages
67189,"importOrReload(""dfly_parser"", ""parseMessages"")"
67190,>>> from X import Y
67191,">>> __import__('X', fromlist='Y')"
67192,fromlist='*'
67193,from
67194,import <package>
67195,foo = reload(foo); from foo import *
67196,ipython
67197,jupyter console
67198,jupyter qtconsole
67199,%load_ext autoreload
67200,%autoreload 2
67201,2
67202,%autoreload
67203,Reload all modules (except those excluded by %aimport) automatically now.
67204,
67205,%autoreload 0
67206,Disable automatic reloading.
67207,
67208,%autoreload 1
67209,Reload all modules imported with %aimport every time before executing the Python code typed.
67210,
67211,%autoreload 2
67212,Reload all modules (except those excluded by %aimport) every time before
67213,executing the Python code typed.
67214,from importlib import reload
67215,from sys import version_info
67216,if version_info[0] < 3:
67217,    pass # Python 2 has built in reload
67218,elif version_info[0] == 3 and version_info[1] <= 4:
67219,    from imp import reload # Python 3.0 - 3.4 
67220,else:
67221,    from importlib import reload # Python 3.5+
67222,reload
67223,reload(math)
67224,math
67225,from importlib import reload
67226,reload(MODULE_NAME)
67227,modulereload(MODULE_NAME)
67228,reload(MODULE_NAME)
67229,   for mod in sys.modules.values():
67230,      reload(mod)
67231,sys.modules.values()
67232,"if mod and mod.__name__ != ""__main__"": imp.reload(mod)"
67233,reload
67234,import importlib
67235,import inspect
67236,import gc
67237,from enum import EnumMeta
67238,from weakref import ref
67239,
67240,
67241,"_readonly_attrs = {'__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__',"
67242,"               '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__func__', '__ge__', '__get__',"
67243,"               '__getattribute__', '__globals__', '__gt__', '__hash__', '__init__', '__init_subclass__',"
67244,"               '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__',"
67245,"               '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__',"
67246,"               '__subclasshook__', '__weakref__', '__members__', '__mro__', '__itemsize__', '__isabstractmethod__',"
67247,"               '__basicsize__', '__base__'}"
67248,
67249,
67250,"def reset_module(module, inner_modules_also=True):"
67251,"    """""""
67252,"    This function is a stronger form of importlib's `reload` function. What it does, is that aside from reloading a"
67253,"    module, it goes to the old instance of the module, and sets all the (not read-only) attributes, functions and classes"
67254,    to be the reloaded-module's
67255,"    :param module: The module to reload (module reference, not the name)"
67256,"    :param inner_modules_also: Whether to treat ths module as a package as well, and reload all the modules within it."
67257,"    """""""
67258,
67259,    # For the case when the module is actually a package
67260,    if inner_modules_also:
67261,"        submods = {submod for _, submod in inspect.getmembers(module)"
67262,                   if (type(submod).__name__ == 'module') and (submod.__package__.startswith(module.__name__))}
67263,        for submod in submods:
67264,"            reset_module(submod, True)"
67265,
67266,"    # First, log all the references before reloading (because some references may be changed by the reload operation)."
67267,"    module_tree = _get_tree_references_to_reset_recursively(module, module.__name__)"
67268,
67269,    new_module = importlib.reload(module)
67270,"    _reset_item_recursively(module, module_tree, new_module)"
67271,
67272,
67273,"def _update_referrers(item, new_item):"
67274,    refs = gc.get_referrers(item)
67275,
67276,    weak_ref_item = ref(item)
67277,    for coll in refs:
67278,        if type(coll) == dict:
67279,            enumerator = coll.keys()
67280,        elif type(coll) == list:
67281,            enumerator = range(len(coll))
67282,        else:
67283,            continue
67284,
67285,        for key in enumerator:
67286,
67287,            if weak_ref_item() is None:
67288,                # No refs are left in the GC
67289,                return
67290,
67291,            if coll[key] is weak_ref_item():
67292,                coll[key] = new_item
67293,
67294,"def _get_tree_references_to_reset_recursively(item, module_name, grayed_out_item_ids = None):"
67295,    if grayed_out_item_ids is None:
67296,        grayed_out_item_ids = set()
67297,
67298,    item_tree = dict()
67299,    attr_names = set(dir(item)) - _readonly_attrs
67300,    for sub_item_name in attr_names:
67301,
67302,"        sub_item = getattr(item, sub_item_name)"
67303,"        item_tree[sub_item_name] = [sub_item, None]"
67304,
67305,        try:
67306,            # Will work for classes and functions defined in that module.
67307,            mod_name = sub_item.__module__
67308,        except AttributeError:
67309,            mod_name = None
67310,
67311,"        # If this item was defined within this module, deep-reset"
67312,        if (mod_name is None) or (mod_name != module_name) or (id(sub_item) in grayed_out_item_ids) \
67313,"                or isinstance(sub_item, EnumMeta):"
67314,            continue
67315,
67316,        grayed_out_item_ids.add(id(sub_item))
67317,        item_tree[sub_item_name][1] = \
67318,"            _get_tree_references_to_reset_recursively(sub_item, module_name, grayed_out_item_ids)"
67319,
67320,    return item_tree
67321,
67322,
67323,"def _reset_item_recursively(item, item_subtree, new_item):"
67324,
67325,    # Set children first so we don't lose the current references.
67326,    if item_subtree is not None:
67327,"        for sub_item_name, (sub_item, sub_item_tree) in item_subtree.items():"
67328,
67329,            try:
67330,"                new_sub_item = getattr(new_item, sub_item_name)"
67331,            except AttributeError:
67332,                # The item doesn't exist in the reloaded module. Ignore.
67333,                continue
67334,
67335,            try:
67336,                # Set the item
67337,"                _reset_item_recursively(sub_item, sub_item_tree, new_sub_item)"
67338,            except Exception as ex:
67339,                pass
67340,
67341,"    _update_referrers(item, new_item)"
67342,as
67343,import numpy as np
67344,reset_module
67345,importlib
67346,reload
67347,import importlib
67348,import inspect
67349,from enum import EnumMeta
67350,
67351,"_readonly_attrs = {'__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__',"
67352,"               '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__func__', '__ge__', '__get__',"
67353,"               '__getattribute__', '__globals__', '__gt__', '__hash__', '__init__', '__init_subclass__',"
67354,"               '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__',"
67355,"               '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__',"
67356,"               '__subclasshook__', '__weakref__', '__members__', '__mro__', '__itemsize__', '__isabstractmethod__',"
67357,"               '__basicsize__', '__base__'}"
67358,
67359,
67360,"def reset_module(module, inner_modules_also=True):"
67361,"    """""""
67362,"    This function is a stronger form of importlib's `reload` function. What it does, is that aside from reloading a"
67363,"    module, it goes to the old instance of the module, and sets all the (not read-only) attributes, functions and classes"
67364,    to be the reloaded-module's
67365,"    :param module: The module to reload (module reference, not the name)"
67366,"    :param inner_modules_also: Whether to treat ths module as a package as well, and reload all the modules within it."
67367,"    """""""
67368,
67369,    new_module = importlib.reload(module)
67370,
67371,    reset_items = set()
67372,
67373,    # For the case when the module is actually a package
67374,    if inner_modules_also:
67375,"        submods = {submod for _, submod in inspect.getmembers(module)"
67376,                   if (type(submod).__name__ == 'module') and (submod.__package__.startswith(module.__name__))}
67377,        for submod in submods:
67378,"            reset_module(submod, True)"
67379,
67380,"    _reset_item_recursively(module, new_module, module.__name__, reset_items)"
67381,
67382,
67383,"def _reset_item_recursively(item, new_item, module_name, reset_items=None):"
67384,    if reset_items is None:
67385,        reset_items = set()
67386,
67387,    attr_names = set(dir(item)) - _readonly_attrs
67388,
67389,    for sitem_name in attr_names:
67390,
67391,"        sitem = getattr(item, sitem_name)"
67392,"        new_sitem = getattr(new_item, sitem_name)"
67393,
67394,        try:
67395,            # Set the item
67396,"            setattr(item, sitem_name, new_sitem)"
67397,
67398,            try:
67399,                # Will work for classes and functions defined in that module.
67400,                mod_name = sitem.__module__
67401,            except AttributeError:
67402,                mod_name = None
67403,
67404,"            # If this item was defined within this module, deep-reset"
67405,            if (mod_name is None) or (mod_name != module_name) or (id(sitem) in reset_items) \
67406,"                    or isinstance(sitem, EnumMeta):  # Deal with enums"
67407,                continue
67408,
67409,            reset_items.add(id(sitem))
67410,"            _reset_item_recursively(sitem, new_sitem, module_name, reset_items)"
67411,        except Exception as ex:
67412,            raise Exception(sitem_name) from ex
67413,__very_private__
67414,importlib.reload
67415,from IPython.lib.deepreload import reload as dreload
67416,dreload(foo)
67417,pip3 install jupyter
67418,reload() argument must be module
67419,foo
67420,from importlib import reload
67421,reload(foo)
67422,sys.path.append('D:\...\My Pythons')
67423,if 'Class_VerticesEdges' in sys.modules:  
67424,    del sys.modules['Class_VerticesEdges']
67425,    print 'old module Class_VerticesEdges deleted'
67426,from Class_VerticesEdges import *
67427,reload(sys.modules['Class_VerticesEdges'])
67428,sys.modules
67429,  import importlib
67430,  import sys
67431,
67432,  from YYYY.XXX.ZZZ import CCCC
67433,  import AAA.BBB.CC
67434,
67435,
67436,  def reload(full_name)
67437,    if full_name in sys.modules:
67438,      importlib.reload(sys.modules[full_name])
67439,
67440,
67441,  reload('YYYY.XXX.ZZZ') # this is fine in both cases
67442,  reload('AAA.BBB.CC')  
67443,
67444,  importlib.reload(YYYY.XXX.ZZZ) # in my case: this fails
67445,  importlib.reload(AAA.BBB.CC)   #             and this is ok
67446,importlib.reload
67447,import sys
67448,import json  ##  your module
67449,
67450,for mod in [ m for m in sys.modules if m.lstrip('_').startswith('json') or sys.modules[m] == None ]: del sys.modules[mod]
67451,
67452,print( json.dumps( [1] ) )  ##  test if functionality has been removed
67453,import sys
67454,
67455,before_import = [mod for mod in sys.modules]
67456,import json  ##  your module
67457,after_import = [mod for mod in sys.modules if mod not in before_import]
67458,
67459,for mod in [m for m in sys.modules if m in after_import or sys.modules[m] == None]: del sys.modules[mod]
67460,
67461,print( json.dumps( [2] ) )  ##  test if functionality has been removed
67462,import gc
67463,gc.collect()
67464,reload
67465,sys.modules
67466,# Created by BaiJiFeiLong@gmail.com at 2022/2/19 18:50
67467,import importlib
67468,import types
67469,
67470,import urllib.parse
67471,import urllib.request
67472,
67473,
67474,def reloadModuleWithChildren(mod):
67475,    mod = importlib.reload(mod)
67476,"    for k, v in mod.__dict__.items():"
67477,"        if isinstance(v, types.ModuleType):"
67478,"            setattr(mod, k, importlib.import_module(v.__name__))"
67479,
67480,
67481,"fakeParse = types.ModuleType(""urllib.parse"")"
67482,realParse = urllib.parse
67483,
67484,urllib.parse = fakeParse
67485,assert urllib.parse is fakeParse
67486,
67487,importlib.reload(urllib)
67488,assert urllib.parse is fakeParse
67489,"assert getattr(urllib, ""parse"") is fakeParse"
67490,
67491,reloadModuleWithChildren(urllib)
67492,assert urllib.parse is not fakeParse
67493,assert urllib.parse is realParse
67494,sys.modules
67495,sublime_plugin.py
67496,def reload_module(full_module_name):
67497,"    """""""
67498,        Assuming the folder `full_module_name` is a folder inside some
67499,"        folder on the python sys.path, for example, sys.path as `C:/`, and"
67500,        you are inside the folder `C:/Path With Spaces` on the file 
67501,        `C:/Path With Spaces/main.py` and want to re-import some files on
67502,        the folder `C:/Path With Spaces/tests`
67503,
67504,        @param full_module_name   the relative full path to the module file
67505,                                  you want to reload from a folder on the
67506,                                  python `sys.path`
67507,"    """""""
67508,    import imp
67509,    import sys
67510,    import importlib
67511,
67512,    if full_module_name in sys.modules:
67513,        module_object = sys.modules[full_module_name]
67514,        module_object = imp.reload( module_object )
67515,
67516,    else:
67517,        importlib.import_module( full_module_name )
67518,
67519,def run_tests():
67520,"    print( ""\n\n"" )"
67521,"    reload_module( ""Path With Spaces.tests.semantic_linefeed_unit_tests"" )"
67522,"    reload_module( ""Path With Spaces.tests.semantic_linefeed_manual_tests"" )"
67523,
67524,    from .tests import semantic_linefeed_unit_tests
67525,    from .tests import semantic_linefeed_manual_tests
67526,
67527,    semantic_linefeed_unit_tests.run_unit_tests()
67528,    semantic_linefeed_manual_tests.run_manual_tests()
67529,
67530,"if __name__ == ""__main__"":"
67531,    run_tests()
67532,run_tests()
67533,Python 3.3.6
67534,Python3.3
67535,pip install mysql-python
67536,C:\Program Files\Python 3.5\Scripts\;
67537,C:\Program Files\Python 3.5\;
67538,
67539,C:\Windows\System32;
67540,C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC;
67541,C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC
67542,pip
67543,pip install --upgrade setuptools
67544,setuptools
67545,pip install --upgrade setuptools
67546,setuptools
67547,28.8.0
67548,36.2.7
67549,Visual C++ 14
67550,pip install --only-binary :all: mysqlclient
67551,--only-binary :all:
67552,eth-tester
67553,pip3 install misaka
67554,pip install
67555,pip install mysqlclient‑1.3.10‑cp35‑cp35m‑win_amd64.whl
67556,pip wheel
67557,pip install
67558,hmmlearn
67559,hmmlearn-0.2.1-cp36-cp36m-win_amd64.whl
67560,eth-tester
67561,pip install <*wheel file's name*>
67562,pip install Scrapy
67563,python --version
67564,pip install Scrapy
67565,pip install Scrapy
67566,mayavi
67567,python -m pip install --upgrade setuptools
67568,pip install -U <library>
67569,visualcppbuildtools_full.exe
67570,pip install
67571,Python 3.6 on Windows 7 64-bit
67572,Python 3.8 on Windows 10 64-bit
67573,pip install pipwin 
67574,pipwin install yourLibrary
67575,Error: Microsoft Visual C++ 14.0 is required (Unable to find vcvarsall.bat)
67576,Microsoft Visual C++
67577,pipwin
67578,pip
67579,pip install -U setuptools
67580,pip install setuptools --upgrade
67581,setuptools
67582,pip install setuptools
67583,pip install setuptools --upgrade
67584,pip install mysql-connector-python
67585,pip install mysqlclient-1.4.6-cp38-cp38-win32.whl
67586,copying src\lxml\isoschematron\resources\xsl\iso-schematron-xslt1\readme.txt -> build\lib.win-amd64-3.7\lxml\isoschematron\resources\xsl\iso-schematron-xslt1
67587,running build_ext
67588,building 'lxml.etree' extension
67589,"error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools"
67590,pip install <file-name>
67591,pip install scrapy
67592,Microsoft Visual C++ 14.0 is required
67593,pip install .\mysqlclient‑1.4.6‑cp38‑cp38‑win32.whl
67594,pip install --upgrade setuptools
67595,pip install --only-binary :all: mysqlclient
67596,pip install filename
67597,python_ldap‑3.0.0‑cp35‑cp35m‑win_amd64.whl
67598,python-Levenshtein
67599,python-Levenshtein-wheels
67600,mysqlclient
67601,pip install mysqlclient
67602,vcvars64.bat
67603,pip install opencv-python
67604,cl
67605,    is not a full path and was not found in the PATH.
67606,C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64
67607,The C compiler
67608,
67609,"""C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe"""
67610,
67611,is not able to compile a simple test program.
67612,--only-binary :all:
67613,"""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"""
67614,pip install opencv-python
67615,import pandas as pd
67616,df = pd.DataFrame(
67617,"    columns=""   index    c1    c2    v1 "".split(),"
67618,    data= [
67619,"            [       0,  ""A"",  ""X"",    3, ],"
67620,"            [       1,  ""A"",  ""X"",    5, ],"
67621,"            [       2,  ""A"",  ""Y"",    7, ],"
67622,"            [       3,  ""A"",  ""Y"",    1, ],"
67623,"            [       4,  ""B"",  ""X"",    3, ],"
67624,"            [       5,  ""B"",  ""X"",    1, ],"
67625,"            [       6,  ""B"",  ""X"",    3, ],"
67626,"            [       7,  ""B"",  ""Y"",    1, ],"
67627,"            [       8,  ""C"",  ""X"",    7, ],"
67628,"            [       9,  ""C"",  ""Y"",    4, ],"
67629,"            [      10,  ""C"",  ""Y"",    1, ],"
67630,"            [      11,  ""C"",  ""Y"",    6, ],]).set_index(""index"", drop=True)"
67631,def callback(x):
67632,"    x['seq'] = range(1, x.shape[0] + 1)"
67633,    return x
67634,"df = df.groupby(['c1', 'c2']).apply(callback)"
67635,print df
67636,   c1 c2  v1  seq
67637,0   A  X   3    1
67638,1   A  X   5    2
67639,2   A  Y   7    1
67640,3   A  Y   1    2
67641,4   B  X   3    1
67642,5   B  X   1    2
67643,6   B  X   3    3
67644,7   B  Y   1    1
67645,8   C  X   7    1
67646,9   C  Y   4    1
67647,10  C  Y   1    2
67648,11  C  Y   6    3
67649,cumcount()
67650,"In [4]: df.groupby(['c1', 'c2']).cumcount()"
67651,Out[4]: 
67652,0     0
67653,1     1
67654,2     0
67655,3     1
67656,4     0
67657,5     1
67658,6     2
67659,7     0
67660,8     0
67661,9     0
67662,10    1
67663,11    2
67664,dtype: int64
67665,"In [5]: df.groupby(['c1', 'c2']).cumcount()+1"
67666,Out[5]: 
67667,0     1
67668,1     2
67669,2     1
67670,3     2
67671,4     1
67672,5     2
67673,6     3
67674,7     1
67675,8     1
67676,9     1
67677,10    2
67678,11    3
67679,dtype: int64
67680,"df = df.sort_values(['userID', 'date'])"
67681,grp = df.groupby('userID')['ItemID'].aggregate(lambda x: '->'.join(tuple(x))).reset_index()
67682,print(grp)
67683,">>> my_string = ""why\does\it\happen?"""
67684,>>> my_string
67685,'why\\does\\it\\happen?'
67686,repr
67687,print
67688,my_string
67689,__repr__()
67690,>>> print(my_string)
67691,why\does\it\happen?
67692,>>> 'a\\b'
67693,'a\\b'
67694,>>> len('a\\b')
67695,3
67696,repr()
67697,>>> print(repr(my_string))
67698,'why\\does\\it\\happen?'
67699,\\
67700,\n
67701,\t
67702,">>> print(""this\text\is\not\what\it\seems"")"
67703,this    ext\is
67704,ot\what\it\seems
67705,\n
67706,">>> print(""this\\text\is\what\you\\need"")"
67707,this\text\is\what\you\need
67708,\d
67709,d
67710,\d
67711,\t
67712,DeprecationWarning
67713,SyntaxError
67714,\Foo
67715,\foo
67716,import math
67717,import pygame
67718,import random
67719,
67720,
67721,pygame.init()
67722,
67723,display_width = 800
67724,display_height = 600
67725,
67726,"game_display = pygame.display.set_mode((display_width, display_height))"
67727,clock = pygame.time.Clock()
67728,"pygame.display.set_caption(""Catch the Ball"")"
67729,
67730,"white = (255, 255, 255)"
67731,"black = (0, 0, 0)"
67732,"red = (255, 0, 0)"
67733,"blue = (0, 255, 0)"
67734,
67735,"player_img = pygame.image.load(""Images/soup.png"")"
67736,"thing_imgs = [pygame.image.load('Images/muffin.png'), pygame.image.load('Images/dessert.png'),"
67737,"              pygame.image.load('Images/cheese.png'), pygame.image.load('Images/fruit.png')]"
67738,
67739,
67740,"def player(x, y):"
67741,"    game_display.blit(player_img, (x, y))"
67742,
67743,
67744,"def things(x, y, img):"
67745,"    game_display.blit(img, (x, y))"
67746,
67747,
67748,def game_loop():
67749,    running = True
67750,
67751,    x = display_width * 0.45
67752,    y = display_height * 0.8
67753,    x_change = 0
67754,
67755,    player_width = 64
67756,    player_height = 64
67757,
67758,"    things_cor = [[random.randint(0, display_width), 32]]"
67759,    things_added = [random.choice(thing_imgs)]
67760,    thing_height = 32
67761,    thing_width = 32
67762,    y_change = 5
67763,
67764,    caught = 0
67765,
67766,    while running:
67767,        for event in pygame.event.get():
67768,            if event.type == pygame.QUIT:
67769,                running = False
67770,
67771,            if event.type == pygame.KEYDOWN:
67772,                if event.key == pygame.K_LEFT:
67773,                    x_change = -5
67774,
67775,                if event.key == pygame.K_RIGHT:
67776,                    x_change = 5
67777,
67778,            if event.type == pygame.KEYUP:
67779,                if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
67780,                    x_change = 0
67781,
67782,        game_display.fill(white)
67783,
67784,"        player(x, y)"
67785,        x += x_change
67786,
67787,        for i in range(len(things_cor)):
67788,"            thing_x, thing_y = things_cor[i]"
67789,"            things(thing_x, thing_y, things_added[i])"
67790,
67791,        for i in range(len(things_cor)):
67792,            things_cor[i][1] += y_change
67793,            if things_cor[i][1] > display_height:
67794,"                things_cor[i][1] = random.randint(-2000, -1000)"
67795,"                things_cor[i][0] = random.randint(0, display_width)"
67796,                things_added[i] = random.choice(thing_imgs)
67797,
67798,                things_added.append(random.choice(thing_imgs))
67799,
67800,                if len(things_added) < 6:
67801,                    things_cor.append(
67802,"                        [random.randint(0, display_width), -10])"
67803,
67804,        if x < 0:
67805,            x = 0
67806,        elif x > display_width - player_width:
67807,            x = display_width - player_width
67808,
67809,        clock.tick(60)
67810,        pygame.display.update()
67811,
67812,
67813,game_loop()
67814,pygame.Rect
67815,colliderect()
67816,"rect1 = pygame.Rect(x1, y1, w1, h1)"
67817,"rect2 = pygame.Rect(x2, y2, w2, h2)"
67818,if rect1.colliderect(rect2):
67819,    # [...]
67820,pygame.Surface
67821,get_rect()
67822,def game_loop():
67823,    # [...]
67824,
67825,    while running:
67826,        # [...]
67827,
67828,"        player_rect = player_img.get_rect(topleft = (x, y))"
67829,        for i in range(len(things_cor)):
67830,            thing_rect = things_added[i].get_rect(topleft = things_cor[i])
67831,
67832,            if player_rect.colliderect(thing_rect):
67833,"                print(""hit"")"
67834,
67835,"        player(x, y)"
67836,        x += x_change
67837,
67838,        for i in range(len(things_cor)):
67839,"            thing_x, thing_y = things_cor[i]"
67840,"            things(thing_x, thing_y, things_added[i]) "
67841,pygame.time.get_ticks()
67842,pygame.time.get_ticks()
67843,pygame.init()
67844,def game_loop():
67845,    # [...]
67846,
67847,    while running:
67848,        passed_time = pygame.time.get_ticks() # passed time in milliseconds
67849,        start_time = 100 * 1000 # start time in milliseconds (100 seconds)
67850,        
67851,        # [...]
67852,
67853,        # move player    
67854,        if passed_time >= start_time:
67855,            x += x_change
67856,            if x < 0:
67857,                x = 0
67858,            elif x > display_width - player_width:
67859,                x = display_width - player_width
67860,    
67861,        # move things
67862,        if passed_time >= start_time:
67863,            for i in range(len(things_cor)):
67864,                things_cor[i][1] += y_change
67865,                if things_cor[i][1] > display_height:
67866,"                    things_cor[i][1] = random.randint(-2000, -1000)"
67867,"                    things_cor[i][0] = random.randint(0, display_width)"
67868,                    things_added[i] = random.choice(thing_imgs)
67869,
67870,                    things_added.append(random.choice(thing_imgs))
67871,
67872,                    if len(things_added) < 6:
67873,                        things_cor.append(
67874,"                            [random.randint(0, display_width), -10])"
67875,
67876,        # draw scene and update dispaly
67877,        game_display.fill(white)
67878,"        player(x, y)"
67879,        for i in range(len(things_cor)):
67880,"            thing_x, thing_y = things_cor[i]"
67881,"            things(thing_x, thing_y, things_added[i])"
67882,        pygame.display.update()
67883,        clock.tick(60)
67884,@staticmethod
67885,@classmethod
67886,foo
67887,class_foo
67888,static_foo
67889,class A(object):
67890,"    def foo(self, x):"
67891,"        print(f""executing foo({self}, {x})"")"
67892,
67893,    @classmethod
67894,"    def class_foo(cls, x):"
67895,"        print(f""executing class_foo({cls}, {x})"")"
67896,
67897,    @staticmethod
67898,    def static_foo(x):
67899,"        print(f""executing static_foo({x})"")"
67900,
67901,a = A()
67902,a
67903,a.foo(1)
67904,"# executing foo(<__main__.A object at 0xb7dbef0c>, 1)"
67905,self
67906,a.class_foo(1)
67907,"# executing class_foo(<class '__main__.A'>, 1)"
67908,class_foo
67909,A.foo(1)
67910,A.class_foo(1)
67911,A.class_foo(1)
67912,"# executing class_foo(<class '__main__.A'>, 1)"
67913,self
67914,cls
67915,a.static_foo(1)
67916,# executing static_foo(1)
67917,
67918,A.static_foo('hi')
67919,# executing static_foo(hi)
67920,foo
67921,a.foo
67922,a
67923,foo
67924,a.foo
67925,a
67926,foo
67927,print(a.foo)
67928,# <bound method A.foo of <__main__.A object at 0xb7d52f0c>>
67929,a.class_foo
67930,a
67931,class_foo
67932,A
67933,class_foo
67934,print(a.class_foo)
67935,# <bound method type.class_foo of <class '__main__.A'>>
67936,a.static_foo
67937,static_foo
67938,a.static_foo
67939,print(a.static_foo)
67940,# <function static_foo at 0xb7d479cc>
67941,static_foo
67942,A
67943,print(A.static_foo)
67944,# <function static_foo at 0xb7d479cc>
67945,@staticmethod
67946,cls.some_static_method()
67947,dict.fromkeys()
67948,>>> class DictSubclass(dict):
67949,...     def __repr__(self):
67950,"...         return ""DictSubclass"""
67951,... 
67952,">>> dict.fromkeys(""abc"")"
67953,"{'a': None, 'c': None, 'b': None}"
67954,">>> DictSubclass.fromkeys(""abc"")"
67955,DictSubclass
67956,>>> 
67957,@classmethod
67958,@staticmethod
67959,class C:
67960,    @classmethod
67961,"    def f(cls, arg1, arg2, ...): ... "
67962,@classmethod
67963,C.f()
67964,C().f()
67965,staticmethod()
67966,class C:
67967,    @staticmethod
67968,"    def f(arg1, arg2, ...): ... "
67969,@staticmethod
67970,C.f()
67971,C().f()
67972,classmethod()
67973,class Apple:
67974,
67975,    _counter = 0
67976,
67977,    @staticmethod
67978,    def about_apple():
67979,        print('Apple is good for you.')
67980,
67981,        # note you can still access other member of the class
67982,        # but you have to use the class instance 
67983,"        # which is not very nice, because you have repeat yourself"
67984,        # 
67985,        # For example:
67986,        # @staticmethod
67987,        #    print('Number of apples have been juiced: %s' % Apple._counter)
67988,        #
67989,        # @classmethod
67990,        #    print('Number of apples have been juiced: %s' % cls._counter)
67991,        #
67992,"        #    @classmethod is especially useful when you move your function to another class,"
67993,        #       you don't have to rename the referenced class 
67994,
67995,    @classmethod
67996,"    def make_apple_juice(cls, number_of_apples):"
67997,        print('Making juice:')
67998,        for i in range(number_of_apples):
67999,            cls._juice_this(i)
68000,
68001,    @classmethod
68002,"    def _juice_this(cls, apple):"
68003,        print('Juicing apple %d...' % apple)
68004,        cls._counter += 1
68005,cls._counter
68006,cls._counter
68007,Apple._counter
68008,Apple
68009,class Foo(object):
68010,
68011,"    def a_normal_instance_method(self, arg_1, kwarg_2=None):"
68012,        '''
68013,        Return a value that is a function of the instance with its
68014,"        attributes, and other arguments such as arg_1 and kwarg2"
68015,        '''
68016,
68017,    @staticmethod
68018,    def a_static_method(arg_0):
68019,        '''
68020,        Return a value that is a function of arg_0. It does not know the 
68021,        instance or class it is called from.
68022,        '''
68023,
68024,    @classmethod
68025,"    def a_class_method(cls, arg1):"
68026,        '''
68027,        Return a value that is a function of the class and other arguments.
68028,"        respects subclassing, it is called with the class it is called from."
68029,        '''
68030,a_normal_instance_method
68031,"', '"
68032,join
68033,"['a', 'b', 'c']"
68034,">>> ', '.join(['a', 'b', 'c'])"
68035,"'a, b, c'"
68036,str.join
68037,':'
68038,>>> join_with_colons = ':'.join 
68039,>>> join_with_colons('abcde')
68040,'a:b:c:d:e'
68041,">>> join_with_colons(['FF', 'FF', 'FF', 'FF', 'FF', 'FF'])"
68042,'FF:FF:FF:FF:FF:FF'
68043,str.maketrans
68044,string
68045,str.translate
68046,string
68047,str.maketrans
68048,# demonstrate same function whether called from instance or not:
68049,">>> ', '.maketrans('ABC', 'abc')"
68050,"{65: 97, 66: 98, 67: 99}"
68051,">>> str.maketrans('ABC', 'abc')"
68052,"{65: 97, 66: 98, 67: 99}"
68053,>>> import string
68054,">>> 'ABCDEFG'.translate(string.maketrans('ABC', 'abc'))"
68055,'abcDEFG'
68056,dict.fromkeys
68057,">>> dict.fromkeys(['a', 'b', 'c'])"
68058,"{'c': None, 'b': None, 'a': None}"
68059,">>> class MyDict(dict): 'A dict subclass, use to demo classmethods'"
68060,">>> md = MyDict.fromkeys(['a', 'b', 'c'])"
68061,>>> md
68062,"{'a': None, 'c': None, 'b': None}"
68063,>>> type(md)
68064,<class '__main__.MyDict'>
68065,classmethod
68066,staticmethod
68067,classmethod
68068,Person
68069,first_name
68070,last_name
68071,Person
68072,class Person(object):
68073,
68074,"    def __init__(self, first_name, last_name):"
68075,        self.first_name = first_name
68076,        self.last_name = last_name
68077,first_name
68078,class Person(object):
68079,
68080,"    def __init__(self, first_name, last_name):"
68081,        self.first_name = first_name
68082,        self.last_name = last_name
68083,
68084,"    def __init__(self, first_name):"
68085,        self.first_name = first_name
68086,@classmethod
68087,class Person(object):
68088,
68089,"    def __init__(self, first_name, last_name):"
68090,        self.first_name = first_name
68091,        self.last_name = last_name
68092,
68093,    @classmethod
68094,"    def get_person(cls, first_name):"
68095,"        return cls(first_name, """")"
68096,first_name
68097,@staticmethod  
68098,def validate_name(name):
68099,    return len(name) <= 20
68100,class name
68101,"Person.validate_name(""Gaurang Shah"")"
68102,"def __init__(self, first_name, last_name="""")"
68103,get_person
68104,self
68105,"def f(self, x, y)"
68106,self
68107,this
68108,self
68109,@classmethod
68110,"def f(cls, x, y)"
68111,self
68112,self
68113,@staticmethod
68114,"def f(x, y)"
68115,classmethod
68116,staticmethod
68117,Math
68118,class Point
68119,"    def __init__(self, x, y):"
68120,        self.x = x
68121,        self.y = y
68122,
68123,    @classmethod
68124,"    def frompolar(cls, radius, angle):"
68125,"        """"""The `cls` argument is the `Point` class itself"""""""
68126,"        return cls(radius * cos(angle), radius * sin(angle))"
68127,
68128,    @staticmethod
68129,"    def angle(x, y):"
68130,"        """"""this could be outside the class, but we put it here "
68131,"just because we think it is logically related to the class."""""""
68132,"        return atan(y, x)"
68133,
68134,
68135,"p1 = Point(3, 2)"
68136,"p2 = Point.frompolar(3, pi/4)"
68137,
68138,"angle = Point.angle(3, 2)"
68139,@classmethod
68140,@staticmethod
68141,@classmethod
68142,@staticmethod
68143,@staticmethod
68144,@classmethod
68145,@staticmethod
68146,"def some_static_method(*args, **kwds):"
68147,    pass
68148, @classmethod
68149," def some_class_method(cls, *args, **kwds):"
68150,     pass
68151,class Cluster(object):
68152,
68153,"    def _is_cluster_for(cls, name):"
68154,"        """""""
68155,        see if this class is the cluster with this name
68156,        this is a classmethod
68157,"        """""" "
68158,        return cls.__name__ == name
68159,    _is_cluster_for = classmethod(_is_cluster_for)
68160,
68161,    #static method
68162,    def getCluster(name):
68163,"        """""""
68164,"        static factory method, should be in Cluster class"
68165,        returns a cluster object for the given name
68166,"        """""""
68167,        for cls in Cluster.__subclasses__():
68168,            if cls._is_cluster_for(name):
68169,                return cls()
68170,    getCluster = staticmethod(getCluster)
68171,_is_cluster_for
68172,>>> class Klaus:
68173,        @classmethod
68174,        def classmthd(*args):
68175,            return args
68176,
68177,        @staticmethod
68178,        def staticmthd(*args):
68179,            return args
68180,
68181,# 1. Call classmethod without any arg
68182,>>> Klaus.classmthd()  
68183,"(__main__.Klaus,)  # the class gets passed as the first argument"
68184,
68185,# 2. Call classmethod with 1 arg
68186,>>> Klaus.classmthd('chumma')
68187,"(__main__.Klaus, 'chumma')"
68188,
68189,# 3. Call staticmethod without any arg
68190,>>> Klaus.staticmthd()  
68191,()
68192,
68193,# 4. Call staticmethod with 1 arg
68194,>>> Klaus.staticmthd('chumma')
68195,"('chumma',)"
68196,@staticmethod
68197,>>> class C(object):
68198,...  pass
68199,... 
68200,>>> def f():
68201,...  pass
68202,... 
68203,">>> staticmethod(f).__get__(None, C)"
68204,<function f at 0x5c1cf0>
68205,">>> classmethod(f).__get__(None, C)"
68206,<bound method type.f of <class '__main__.C'>>
68207,classmethod
68208,>>> class CMeta(type):
68209,...  def foo(cls):
68210,...   print cls
68211,... 
68212,>>> class C(object):
68213,...  __metaclass__ = CMeta
68214,... 
68215,>>> C.foo()
68216,<class '__main__.C'>
68217,c = C(); c.foo()
68218,type(c).foo()
68219,@staticmethod
68220,@classmethod
68221,@classmethod
68222,class Foo(object):
68223,    @staticmethod
68224,    def bar():
68225,"        return ""In Foo"""
68226,bar()
68227,class Foo2(Foo):
68228,    @staticmethod
68229,    def bar():
68230,"        return ""In Foo2"""
68231,bar()
68232,Foo2
68233,Foo2
68234,magic()
68235,Foo2
68236,bar()
68237,class Foo2(Foo):
68238,    @staticmethod
68239,    def bar():
68240,"        return ""In Foo2"""
68241,    @staticmethod
68242,    def magic():
68243,"        return ""Something useful you'd like to use in bar, but now can't"" "
68244,Foo2.magic()
68245,bar()
68246,Foo2
68247,bar()
68248,Foo
68249,bar()
68250,classmethod
68251,class Foo(object):
68252,    @classmethod
68253,    def bar(cls):
68254,"        return ""In Foo"""
68255,
68256,class Foo2(Foo):
68257,    @classmethod
68258,    def bar(cls):
68259,"        return ""In Foo2 "" + cls.magic()"
68260,    @classmethod
68261,    def magic(cls):
68262,"        return ""MAGIC"""
68263,
68264,print Foo2().bar()
68265,In Foo2 MAGIC
68266,staticmethod
68267,class A(object):
68268,    x = 0
68269,
68270,    def say_hi(self):
68271,        pass
68272,
68273,    @staticmethod
68274,    def say_hi_static():
68275,        pass
68276,
68277,    @classmethod
68278,    def say_hi_class(cls):
68279,        pass
68280,
68281,    def run_self(self):
68282,        self.x += 1
68283,        print self.x # outputs 1
68284,        self.say_hi()
68285,        self.say_hi_static()
68286,        self.say_hi_class()
68287,
68288,    @staticmethod
68289,    def run_static():
68290,        print A.x  # outputs 0
68291,        # A.say_hi() #  wrong
68292,        A.say_hi_static()
68293,        A.say_hi_class()
68294,
68295,    @classmethod
68296,    def run_class(cls):
68297,        print cls.x # outputs 0
68298,        # cls.say_hi() #  wrong
68299,        cls.say_hi_static()
68300,        cls.say_hi_class()
68301,# A.run_self() #  wrong
68302,A.run_static()
68303,A.run_class()
68304,class Parent:
68305,"   _class_name = ""Parent"""
68306,
68307,   @staticmethod
68308,   def print_name():
68309,       print(Parent._class_name)
68310,
68311,
68312,class Child(Parent):
68313,"   _class_name = ""Child"""
68314,
68315,   @staticmethod
68316,   def print_name():
68317,       print(Child._class_name)
68318,
68319,
68320,Parent.print_name()
68321,Child.print_name()
68322,class Parent:
68323,"    _class_name = ""Parent"""
68324,
68325,    @classmethod
68326,    def print_name(cls):
68327,        print(cls._class_name)
68328,
68329,
68330,class Child(Parent):
68331,"    _class_name = ""Child"""
68332,
68333,
68334,Parent.print_name()
68335,Child.print_name()
68336,@classmethod
68337,@staticmethod
68338,@property
68339,self
68340,class DecoratorTest(object):
68341,
68342,    def __init__(self):
68343,        pass
68344,
68345,"    def doubler(self, x):"
68346,        return x*2
68347,
68348,    @classmethod
68349,"    def class_doubler(cls, x): # we need to use 'cls' instead of 'self'; 'cls' reference to the class instead of an instance of the class"
68350,        return x*2
68351,
68352,    @staticmethod
68353,    def static_doubler(x): # no need adding 'self' here; static_doubler() could be just a function not inside the class
68354,        return x*2
68355,decor = DecoratorTest()
68356,
68357,print(decor.doubler(5))
68358,# 10
68359,
68360,print(decor.class_doubler(5)) # a call with an instance of a class
68361,# 10
68362,print(DecoratorTest.class_doubler(5)) # a direct call by the class itself
68363,# 10
68364,
68365,# staticmethod could be called in the same way as classmethod.
68366,print(decor.static_doubler(5)) # as an instance of the class
68367,# 10
68368,print(DecoratorTest.static_doubler(5)) # or as a direct call 
68369,# 10
68370,@property
68371,+
68372,+
68373,-
68374,+
68375,-
68376,-
68377,class MyClass:
68378,    ''' 
68379,    Instance method has a mandatory first attribute self which represent the instance itself. 
68380,    Instance method must be called by a instantiated instance.
68381,    '''
68382,    def method(self):
68383,"        return 'instance method called', self"
68384,    
68385,    '''
68386,    Class method has a mandatory first attribute cls which represent the class itself. 
68387,    Class method can be called by an instance or by the class directly. 
68388,    Its most common using scenario is to define a factory method.
68389,    '''
68390,    @classmethod
68391,    def class_method(cls):
68392,"        return 'class method called', cls"
68393,    
68394,    '''
68395,    Static method doesn’t have any attributes of instances or the class. 
68396,    It also can be called by an instance or by the class directly. 
68397,    Its most common using scenario is to define some helper or utility functions which are closely relative to the class.
68398,    '''
68399,    @staticmethod
68400,    def static_method():
68401,        return 'static method called'
68402,
68403,
68404,obj = MyClass()
68405,print(obj.method())
68406,print(obj.class_method()) # MyClass.class_method()
68407,print(obj.static_method()) # MyClass.static_method()
68408,"('instance method called', <__main__.MyClass object at 0x100fb3940>)"
68409,"('class method called', <class '__main__.MyClass'>)"
68410,static method called
68411,class Student:
68412,"    def __init__(self, first_name, last_name):"
68413,        self.first_name = first_name
68414,        self.last_name = last_name
68415,
68416,    @classmethod
68417,"    def get_from_string(cls, name_string: str):"
68418,"        first_name, last_name = name_string.split()"
68419,        if Student.validate_name(first_name) and Student.validate_name(last_name):
68420,"            return cls(first_name, last_name)"
68421,        else:
68422,            print('Invalid Names')
68423,
68424,    @staticmethod
68425,    def validate_name(name):
68426,        return len(name) <= 10
68427,
68428,
68429,stackoverflow_student = Student.get_from_string('Name Surname')
68430,print(stackoverflow_student.first_name) # Name
68431,print(stackoverflow_student.last_name) # Surname
68432,@classmethod
68433,@staticmethod
68434,@staticmethod
68435,@staticmethod
68436,#!python3
68437,
68438,from os import system
68439,system('cls')
68440,# %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %
68441,
68442,class DemoClass(object):
68443,    # instance methods need a class instance and
68444,    # can access the instance through 'self'
68445,    def instance_method_1(self):
68446,        return 'called from inside the instance_method_1()'
68447,
68448,    def instance_method_2(self):
68449,        # an instance outside the class indirectly calls the static_method
68450,        return self.static_method() + ' via instance_method_2()'
68451,
68452,"    # class methods don't need a class instance, they can't access the"
68453,    # instance (self) but they have access to the class itself via 'cls'
68454,    @classmethod
68455,    def class_method(cls):
68456,        return 'called from inside the class_method()'
68457,
68458,"    # static methods don't have access to 'cls' or 'self', they work like"
68459,    # regular functions but belong to the class' namespace
68460,    @staticmethod
68461,    def static_method():
68462,        return 'called from inside the static_method()'
68463,# %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %
68464,
68465,# works even if the class hasn't been instantiated
68466,print(DemoClass.class_method() + '\n')
68467,''' called from inside the class_method() '''
68468,
68469,# works even if the class hasn't been instantiated
68470,print(DemoClass.static_method() + '\n')
68471,''' called from inside the static_method() '''
68472,# %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %
68473,
68474,# >>>>> all methods types can be called on a class instance <<<<<
68475,# instantiate the class
68476,democlassObj = DemoClass()
68477,
68478,# call instance_method_1()
68479,print(democlassObj.instance_method_1() + '\n')
68480,''' called from inside the instance_method_1() '''
68481,
68482,"# # indirectly call static_method through instance_method_2(), there's really no use"
68483,# for this since a @staticmethod can be called whether the class has been
68484,# instantiated or not
68485,print(democlassObj.instance_method_2() + '\n')
68486,''' called from inside the static_method() via instance_method_2() '''
68487,
68488,# call class_method()
68489,print(democlassObj.class_method() + '\n')
68490,'''  called from inside the class_method() '''
68491,
68492,# call static_method()
68493,print(democlassObj.static_method())
68494,''' called from inside the static_method() '''
68495,
68496,""""""""
68497,"# whether the class is instantiated or not, this doesn't work"
68498,print(DemoClass.instance_method_1() + '\n')
68499,'''
68500,TypeError: TypeError: unbound method instancemethod() must be called with
68501,DemoClass instance as first argument (got nothing instead)
68502,'''
68503,""""""""
68504,class A:
68505,"    def foo():  # no self parameter, no decorator"
68506,        pass
68507,class B:
68508,    @staticmethod
68509,    def foo():  # no self parameter
68510,        pass
68511,>>> A.foo()
68512,TypeError
68513,>>> A().foo()
68514,TypeError
68515,>>> B.foo()
68516,>>> B().foo()
68517,>>> A.foo()
68518,>>> A().foo()
68519,TypeError
68520,>>> B.foo()
68521,>>> B().foo()
68522,@staticmethod
68523,@staticmethod
68524,class A(object):
68525,    m=54
68526,
68527,    @classmethod
68528,    def class_method(cls):
68529,"        print ""m is %d"" % cls.m"
68530,class X(object):
68531,    m=54 #will not be referenced
68532,
68533,    @staticmethod
68534,    def static_method():
68535,"        print ""Referencing/calling a variable or function outside this class. E.g. Some global variable/function."""
68536,staticmethod
68537,classmethod
68538,class StaticMethod(object):
68539,"    ""Emulate PyStaticMethod_Type() in Objects/funcobject.c"""
68540,
68541,"    def __init__(self, f):"
68542,        self.f = f
68543,
68544,"    def __get__(self, obj, objtype=None):"
68545,        return self.f
68546,
68547,
68548,class ClassMethod(object):
68549,"    ""Emulate PyClassMethod_Type() in Objects/funcobject.c"""
68550,"    def __init__(self, f):"
68551,        self.f = f
68552,
68553,"    def __get__(self, obj, cls=None):"
68554,"        def inner(*args, **kwargs):"
68555,            if cls is None:
68556,                cls = type(obj)
68557,"            return self.f(cls, *args, **kwargs)"
68558,        return inner
68559,class A: 
68560,"    def foo(self, x): "
68561,"        print(""executing foo(%s, %s)"" % (self, x)) "
68562, 
68563,    @classmethod
68564,"    def class_foo(cls, x): "
68565,"        print(""executing class_foo(%s, %s)"" % (cls, x))"
68566, 
68567,    @staticmethod 
68568,    def static_foo(x): 
68569,"        print(""executing static_foo(%s)"" % x)"
68570,
68571,class B(A):
68572,    pass
68573,class_foo
68574,A.class_foo(1)
68575,"# => executing class_foo(<class '__main__.A'>, 1)"
68576,B.class_foo(1)
68577,"# => executing class_foo(<class '__main__.B'>, 1)"
68578,static_foo
68579,A
68580,B
68581,A.static_foo(1)
68582,# => executing static_foo(1)
68583,B.static_foo(1)
68584,# => executing static_foo(1)
68585,staticmethod
68586,class A:
68587,    @classmethod
68588,"    def class_qux(cls, x):"
68589,"        print(f""executing class_qux({cls}, {x})"")"
68590,    
68591,    @classmethod
68592,"    def class_bar(cls, x):"
68593,        cls.class_qux(x)
68594,
68595,    @staticmethod
68596,    def static_bar(x):
68597,        A.class_qux(x)
68598,
68599,class B(A):
68600,    pass
68601,
68602,A.class_bar(1)
68603,"# => executing class_qux(<class '__main__.A'>, 1)"
68604,B.class_bar(1)
68605,"# => executing class_qux(<class '__main__.B'>, 1)"
68606,A.static_bar(1)
68607,"# => executing class_qux(<class '__main__.A'>, 1)"
68608,B.static_bar(1)
68609,"# => executing class_qux(<class '__main__.A'>, 1)"
68610,staticmethod
68611,classmethod
68612,staticmethod
68613,class Employee:
68614,
68615,    NO_OF_EMPLOYEES = 0
68616,  
68617,"    def __init__(self, first_name, last_name, salary):"
68618,        self.first_name = first_name
68619,        self.last_name = last_name
68620,        self.salary = salary
68621,        self.increment_employees()
68622,
68623,"    def give_raise(self, amount):"
68624,        self.salary += amount
68625,
68626,    @classmethod
68627,"    def employee_from_full_name(cls, full_name, salary):"
68628,        split_name = full_name.split(' ')
68629,        first_name = split_name[0]
68630,        last_name = split_name[1]
68631,"        return cls(first_name, last_name, salary)"
68632,
68633,    @classmethod
68634,    def increment_employees(cls):
68635,        cls.NO_OF_EMPLOYEES += 1
68636,
68637,    @staticmethod
68638,    def get_employee_legal_obligations_txt():
68639,"        legal_obligations = """""""
68640,        1. An employee must complete 8 hours per working day
68641,        2. ...
68642,"        """""""
68643,        return legal_obligations
68644,Employee
68645,first_name
68646,last_name
68647,salary
68648,"employee_1 = Employee('Andrew', 'Brown', 85000)"
68649,print(employee_1.first_name)
68650,print(employee_1.salary)
68651,
68652,'Andrew'
68653,85000
68654,employee_from_full_name
68655,"employee_2 = Employee.employee_from_full_name('John Black', 95000)"
68656,print(employee_2.first_name)
68657,print(employee_2.salary)
68658,
68659,'John'
68660,95000
68661,employee_from_full_name
68662,"employee_1 = Employee('Andrew', 'Brown', 85000)"
68663,"employee_2 = employee_1.employee_from_full_name('John Black', 95000)"
68664,NO_OF_EMPLOYEES
68665,"employee_1 = Employee('Andrew', 'Brown', 85000)"
68666,print(f'Number of employees: {Employee.NO_OF_EMPLOYEES}')
68667,"employee_2 = Employee.employee_from_full_name('John Black', 95000)"
68668,print(f'Number of employees: {Employee.NO_OF_EMPLOYEES}')
68669,
68670,Number of employees: 1
68671,Number of employees: 2
68672,self
68673,cls
68674,get_employee_legal_obligations_txt
68675,print(Employee.get_employee_legal_obligations_txt())
68676,
68677,
68678,    1. An employee must complete 8 hours per working day
68679,    2. ...
68680,"employee_1 = Employee('Andrew', 'Brown', 85000)"
68681,print(employee_1.get_employee_legal_obligations_txt())
68682,
68683,
68684,    1. An employee must complete 8 hours per working day
68685,    2. ...
68686,multiprocessing
68687,threading.Thread
68688,Queue
68689,threading
68690,multiprocessing
68691,#!/usr/bin/env python3
68692,
68693,import multiprocessing
68694,import threading
68695,import time
68696,import sys
68697,
68698,"def cpu_func(result, niters):"
68699,    '''
68700,    A useless CPU bound function.
68701,    '''
68702,    for i in range(niters):
68703,        result = (result * result * i + 2 * result * i * i + 3) % 10000000
68704,    return result
68705,
68706,class CpuThread(threading.Thread):
68707,"    def __init__(self, niters):"
68708,        super().__init__()
68709,        self.niters = niters
68710,        self.result = 1
68711,    def run(self):
68712,"        self.result = cpu_func(self.result, self.niters)"
68713,
68714,class CpuProcess(multiprocessing.Process):
68715,"    def __init__(self, niters):"
68716,        super().__init__()
68717,        self.niters = niters
68718,        self.result = 1
68719,    def run(self):
68720,"        self.result = cpu_func(self.result, self.niters)"
68721,
68722,class IoThread(threading.Thread):
68723,"    def __init__(self, sleep):"
68724,        super().__init__()
68725,        self.sleep = sleep
68726,        self.result = self.sleep
68727,    def run(self):
68728,        time.sleep(self.sleep)
68729,
68730,class IoProcess(multiprocessing.Process):
68731,"    def __init__(self, sleep):"
68732,        super().__init__()
68733,        self.sleep = sleep
68734,        self.result = self.sleep
68735,    def run(self):
68736,        time.sleep(self.sleep)
68737,
68738,if __name__ == '__main__':
68739,    cpu_n_iters = int(sys.argv[1])
68740,    sleep = 1
68741,    cpu_count = multiprocessing.cpu_count()
68742,    input_params = [
68743,"        (CpuThread, cpu_n_iters),"
68744,"        (CpuProcess, cpu_n_iters),"
68745,"        (IoThread, sleep),"
68746,"        (IoProcess, sleep),"
68747,    ]
68748,    header = ['nthreads']
68749,"    for thread_class, _ in input_params:"
68750,        header.append(thread_class.__name__)
68751,    print(' '.join(header))
68752,"    for nthreads in range(1, 2 * cpu_count):"
68753,        results = [nthreads]
68754,"        for thread_class, work_size in input_params:"
68755,            start_time = time.time()
68756,            threads = []
68757,            for i in range(nthreads):
68758,                thread = thread_class(work_size)
68759,                threads.append(thread)
68760,                thread.start()
68761,"            for i, thread in enumerate(threads):"
68762,                thread.join()
68763,            results.append(time.time() - start_time)
68764,        print(' '.join('{:.6e}'.format(result) for result in results))
68765,target=
68766,threading.Thread
68767,multiprocessing.Process
68768,            +--------------------------------------+
68769,            + Active threads / processes           +
68770,+-----------+--------------------------------------+
68771,|Thread   1 |********     ************             |
68772,|         2 |        *****            *************|
68773,+-----------+--------------------------------------+
68774,|Process  1 |***  ************** ******  ****      |
68775,|         2 |** **** ****** ** ********* **********|
68776,+-----------+--------------------------------------+
68777,            + Time -->                             +
68778,            +--------------------------------------+
68779,I/O
68780,GIL
68781,GIL
68782,GIL
68783,multiprocessing.Process
68784,import concurrent.futures
68785,import urllib.request
68786,
68787,"URLS = ['http://www.foxnews.com/',"
68788,"        'http://www.cnn.com/',"
68789,"        'http://europe.wsj.com/',"
68790,"        'http://www.bbc.co.uk/',"
68791,        'http://some-made-up-domain.com/']
68792,
68793,# Retrieve a single page and report the URL and contents
68794,"def load_url(url, timeout):"
68795,"    with urllib.request.urlopen(url, timeout=timeout) as conn:"
68796,        return conn.read()
68797,
68798,# We can use a with statement to ensure threads are cleaned up promptly
68799,with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
68800,    # Start the load operations and mark each future with its URL
68801,"    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}"
68802,    for future in concurrent.futures.as_completed(future_to_url):
68803,        url = future_to_url[future]
68804,        try:
68805,            data = future.result()
68806,        except Exception as exc:
68807,"            print('%r generated an exception: %s' % (url, exc))"
68808,        else:
68809,"            print('%r page is %d bytes' % (url, len(data)))"
68810,import concurrent.futures
68811,import math
68812,
68813,PRIMES = [
68814,"    112272535095293,"
68815,"    112582705942171,"
68816,"    112272535095293,"
68817,"    115280095190773,"
68818,"    115797848077099,"
68819,    1099726899285419]
68820,
68821,def is_prime(n):
68822,    if n % 2 == 0:
68823,        return False
68824,
68825,    sqrt_n = int(math.floor(math.sqrt(n)))
68826,"    for i in range(3, sqrt_n + 1, 2):"
68827,        if n % i == 0:
68828,            return False
68829,    return True
68830,
68831,def main():
68832,    with concurrent.futures.ProcessPoolExecutor() as executor:
68833,"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):"
68834,"            print('%d is prime: %s' % (number, prime))"
68835,
68836,if __name__ == '__main__':
68837,    main()
68838,GIL
68839,"Cache(redis, memcache)"
68840,Files
68841,Database
68842,"sys.stdout = open('somefile', 'w')"
68843,sys.stdout = ...
68844,script.p > file
68845,someprocess | python script.py
68846,nohup
68847,print
68848,logging
68849,print
68850,log
68851,sys.stdout
68852,# for python3
68853,import sys
68854,"with open(‘file’, ‘w’) as sys.stdout:"
68855,    print('test')
68856,$ python3 foo.py > file
68857,from sys import stdout
68858,with
68859,"with open('file', 'w') as sys.stdout: functionThatPrints()"
68860,functionThatPrints()
68861,print
68862,stdout = sys.stdout
68863,sys.stdout = stdout
68864,print
68865,buffering=0
68866,buffering=1
68867,tail -f
68868,sys.stdout = sys.__stdout__
68869,contextlib.redirect_stdout()
68870,from contextlib import redirect_stdout
68871,
68872,"with open('help.txt', 'w') as f:"
68873,    with redirect_stdout(f):
68874,        print('it now prints to `help.text`')
68875,import sys
68876,from contextlib import contextmanager
68877,
68878,@contextmanager
68879,def redirect_stdout(new_target):
68880,"    old_target, sys.stdout = sys.stdout, new_target # replace sys.stdout"
68881,    try:
68882,        yield new_target # run some code with the replaced stdout
68883,    finally:
68884,        sys.stdout = old_target # restore to the previous value
68885,import os
68886,from contextlib import redirect_stdout
68887,
68888,stdout_fd = sys.stdout.fileno()
68889,"with open('output.txt', 'w') as f, redirect_stdout(f):"
68890,    print('redirected to a file')
68891,"    os.write(stdout_fd, b'not redirected')"
68892,    os.system('echo this also is not redirected')
68893,b'not redirected'
68894,'echo this also is not redirected'
68895,output.txt
68896,os.dup2()
68897,import os
68898,import sys
68899,from contextlib import contextmanager
68900,
68901,def fileno(file_or_fd):
68902,"    fd = getattr(file_or_fd, 'fileno', lambda: file_or_fd)()"
68903,"    if not isinstance(fd, int):"
68904,"        raise ValueError(""Expected a file (`.fileno()`) or a file descriptor"")"
68905,    return fd
68906,
68907,@contextmanager
68908,"def stdout_redirected(to=os.devnull, stdout=None):"
68909,    if stdout is None:
68910,       stdout = sys.stdout
68911,
68912,    stdout_fd = fileno(stdout)
68913,    # copy stdout_fd before it is overwritten
68914,    #NOTE: `copied` is inheritable on Windows when duplicating a standard stream
68915,"    with os.fdopen(os.dup(stdout_fd), 'wb') as copied: "
68916,        stdout.flush()  # flush library buffers that dup2 knows nothing about
68917,        try:
68918,"            os.dup2(fileno(to), stdout_fd)  # $ exec >&to"
68919,        except ValueError:  # filename
68920,"            with open(to, 'wb') as to_file:"
68921,"                os.dup2(to_file.fileno(), stdout_fd)  # $ exec > to"
68922,        try:
68923,            yield stdout # allow code to be run with the redirected stdout
68924,        finally:
68925,            # restore stdout to its previous value
68926,            #NOTE: dup2 makes stdout_fd inheritable unconditionally
68927,            stdout.flush()
68928,"            os.dup2(copied.fileno(), stdout_fd)  # $ exec >&copied"
68929,stdout_redirected()
68930,redirect_stdout()
68931,import os
68932,import sys
68933,
68934,stdout_fd = sys.stdout.fileno()
68935,"with open('output.txt', 'w') as f, stdout_redirected(f):"
68936,    print('redirected to a file')
68937,"    os.write(stdout_fd, b'it is redirected now\n')"
68938,    os.system('echo this is also redirected')
68939,print('this is goes back to stdout')
68940,output.txt
68941,stdout_redirected()
68942,stdout.flush()
68943,read()
68944,write()
68945,libc.fflush(None)
68946,try:
68947,    import ctypes
68948,    from ctypes.util import find_library
68949,except ImportError:
68950,    libc = None
68951,else:
68952,    try:
68953,        libc = ctypes.cdll.msvcrt # Windows
68954,    except OSError:
68955,        libc = ctypes.cdll.LoadLibrary(find_library('c'))
68956,
68957,def flush(stream):
68958,    try:
68959,        libc.fflush(None)
68960,        stream.flush()
68961,"    except (AttributeError, ValueError, IOError):"
68962,        pass # unsupported
68963,stdout
68964,sys.stdout
68965,sys.stderr
68966,sys.stdout
68967,def merged_stderr_stdout():  # $ exec 2>&1
68968,"    return stdout_redirected(to=sys.stdout, stdout=sys.stderr)"
68969,from __future__ import print_function
68970,import sys
68971,
68972,with merged_stderr_stdout():
68973,     print('this is printed on stdout')
68974,"     print('this is also printed on stdout', file=sys.stderr)"
68975,stdout_redirected()
68976,sys.stdout
68977,python-daemon
68978,logging
68979,print
68980,nohup
68981,stdout_redirected
68982,SpoofOut
68983,sys.stdout
68984,fileno
68985,"ValueError(""Expected a file (`.fileno()`) or a file descriptor"")"
68986,doctest.sys.__stdout__
68987,sys.stdout
68988,stdout_redirected()
68989,stdout
68990,sys.__stdout__
68991,.fileno()
68992,sys.stdout
68993,doctest.sys
68994,with stdout_redirected(to=fd):
68995,with merged_stderr_stdout():
68996,"print('...'); print('...', file=sys.stderr)"
68997,import sys
68998,
68999,class Logger(object):
69000,"    def __init__(self, filename=""Default.log""):"
69001,        self.terminal = sys.stdout
69002,"        self.log = open(filename, ""a"")"
69003,
69004,"    def write(self, message):"
69005,        self.terminal.write(message)
69006,        self.log.write(message)
69007,
69008,"sys.stdout = Logger(""yourlogfilename.txt"")"
69009,"print ""Hello world !"" # this is should be saved in yourlogfilename.txt"
69010,logger
69011,syslog
69012,"def __getattr__(self, attr):     return getattr(self.terminal, attr)"
69013,def flush(self):
69014,Logger
69015,"from os import open, close, dup, O_WRONLY"
69016,
69017,old = dup(1)
69018,close(1)
69019,"open(""file"", O_WRONLY) # should open on 1"
69020,
69021,..... do stuff and then restore
69022,
69023,close(1)
69024,dup(old) # should dup to 1
69025,close(old) # get rid of left overs
69026,sys.stdout.flush()
69027,close(1)
69028,'file'
69029,tempfile.mkstemp()
69030,'file'
69031,os.close(1)
69032,'file'
69033,os.dup2()
69034,import sys
69035,from contextlib import contextmanager
69036,@contextmanager
69037,def stdout_redirected(new_stdout):
69038,    save_stdout = sys.stdout
69039,    sys.stdout = new_stdout
69040,    try:
69041,        yield None
69042,    finally:
69043,        sys.stdout = save_stdout
69044,"with open(filename, ""w"") as f:"
69045,    with stdout_redirected(f):
69046,"        print ""Hello world"""
69047,os.system('echo not redirected')
69048,redirect_stdout
69049,contextlib
69050,import sys
69051,"sys.stdout = open('stdout.txt', 'w')"
69052,flush()
69053,stderr
69054,"import contextlib, sys"
69055,
69056,@contextlib.contextmanager
69057,def log_print(file):
69058,    # capture all outputs to a log file while still printing it
69059,    class Logger:
69060,"        def __init__(self, file):"
69061,            self.terminal = sys.stdout
69062,            self.log = file
69063,
69064,"        def write(self, message):"
69065,            self.terminal.write(message)
69066,            self.log.write(message)
69067,
69068,"        def __getattr__(self, attr):"
69069,"            return getattr(self.terminal, attr)"
69070,
69071,    logger = Logger(file)
69072,
69073,    _stdout = sys.stdout
69074,    _stderr = sys.stderr
69075,    sys.stdout = logger
69076,    sys.stderr = logger
69077,    try:
69078,        yield logger.log
69079,    finally:
69080,        sys.stdout = _stdout
69081,        sys.stderr = _stderr
69082,
69083,
69084,"with log_print(open('mylogfile.log', 'w')):"
69085,    print('hello world')
69086,"    print('hello world on stderr', file=sys.stderr)"
69087,
69088,# you can capture the output to a string with:
69089,# with log_print(io.StringIO()) as log:
69090,#   ....
69091,"#   print('[captured output]', log.getvalue())"
69092,sys.stderr
69093,sys.stdout
69094,file
69095,class FileToLogInterface(file):
69096,    '''
69097,"    Interface to make sure that everytime anything is written to stderr, it is"
69098,    also forwarded to a file.
69099,    '''
69100,
69101,"    def __init__(self, *args, **kwargs):"
69102,        if 'cfg' not in kwargs:
69103,            raise TypeError('argument cfg is required.')
69104,        else:
69105,"            if not isinstance(kwargs['cfg'], config.Config):"
69106,                raise TypeError(
69107,                    'argument cfg should be a valid '
69108,                    'PostSegmentation configuration object i.e. '
69109,                    'postsegmentation.config.Config')
69110,        self._cfg = kwargs['cfg']
69111,        kwargs.pop('cfg')
69112,
69113,        self._logger = logging.getlogger('access_log')
69114,
69115,"        super(FileToLogInterface, self).__init__(*args, **kwargs)"
69116,
69117,"    def write(self, msg):"
69118,"        super(FileToLogInterface, self).write(msg)"
69119,        self._logger.info(msg)
69120,/usr/bin/python mycoolscript.py 2>&1 1>/dev/null
69121,systemd
69122,upstart
69123,daemon(1)
69124,python abc.py > output.log 2>&1 
69125,wurlitzer
69126,sys_pipes
69127,from contextlib import redirect_stdout
69128,import os
69129,from wurlitzer import sys_pipes
69130,        
69131,"log = open(""test.log"", ""a"")"
69132,"with redirect_stdout(log), sys_pipes():"
69133,"    print(""print statement"")"
69134,"    os.system(""echo echo call"")"
69135,class out_to_lt():
69136,"    def __init__(self, lt):"
69137,        if type(lt) == list:
69138,            self.lt = lt
69139,        else:
69140,"            raise Exception(""Need to pass a list"")            "
69141,    def __enter__(self):
69142,        import sys
69143,        self._sys = sys
69144,        self._stdout = sys.stdout
69145,        sys.stdout = self
69146,        return self
69147,"    def write(self,txt):"
69148,        self.lt.append(txt)    
69149,"    def __exit__(self, type, value, traceback):"
69150,        self._sys.stdout = self._stdout
69151,lt = []
69152,with out_to_lt(lt) as o:
69153,"    print(""Test 123\n\n"")"
69154,    print(help(str))
69155,class out_to_lt():
69156,    ...
69157,    def isatty(self):
69158,"        return True #True: You're running in a real terminal, False:You're being piped, redirected, cron"
69159,    def flush(self):
69160,        pass
69161,import sys
69162,"with open('test_file', 'w') as sys.stdout:"
69163,    print('Testing 1 2 3')
69164,$ cat redirect_stdout.py
69165,import sys
69166,
69167,"with open('test_file', 'w') as sys.stdout:"
69168,    print('Testing 1 2 3')
69169,$ python redirect_stdout.py
69170,$ cat test_file
69171,Testing 1 2 3
69172,import numpy as np
69173,import pandas as pd
69174,import matplotlib.pyplot as plt
69175,"pd.set_option('display.mpl_style', 'default') "
69176,%matplotlib inline
69177,
69178,# Bring some raw data.
69179,"frequencies = [6, 16, 75, 160, 244, 260, 145, 73, 16, 4, 1]"
69180,
69181,"# In my original code I create a series and run on that, "
69182,# so for consistency I create a series from the list.
69183,freq_series = pd.Series(frequencies)
69184,
69185,"x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0, "
69186,"            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]"
69187,
69188,# Plot the figure.
69189,"plt.figure(figsize=(12, 8))"
69190,fig = freq_series.plot(kind='bar')
69191,fig.set_title('Amount Frequency')
69192,fig.set_xlabel('Amount ($)')
69193,fig.set_ylabel('Frequency')
69194,fig.set_xticklabels(x_labels)
69195,matplotlib >= 3.4.2
69196,.bar_label
69197,pandas
69198,seaborn
69199,matplotlib
69200,freq_series.plot
69201,ax
69202,fig
69203,ax.patches
69204,matplotlib
69205,ax.text
69206,import pandas as pd
69207,import matplotlib.pyplot as plt
69208,
69209,# Bring some raw data.
69210,"frequencies = [6, 16, 75, 160, 244, 260, 145, 73, 16, 4, 1]"
69211,"# In my original code I create a series and run on that,"
69212,# so for consistency I create a series from the list.
69213,freq_series = pd.Series(frequencies)
69214,
69215,x_labels = [
69216,"    108300.0,"
69217,"    110540.0,"
69218,"    112780.0,"
69219,"    115020.0,"
69220,"    117260.0,"
69221,"    119500.0,"
69222,"    121740.0,"
69223,"    123980.0,"
69224,"    126220.0,"
69225,"    128460.0,"
69226,"    130700.0,"
69227,]
69228,
69229,# Plot the figure.
69230,"plt.figure(figsize=(12, 8))"
69231,"ax = freq_series.plot(kind=""bar"")"
69232,"ax.set_title(""Amount Frequency"")"
69233,"ax.set_xlabel(""Amount ($)"")"
69234,"ax.set_ylabel(""Frequency"")"
69235,ax.set_xticklabels(x_labels)
69236,
69237,rects = ax.patches
69238,
69239,# Make some labels.
69240,"labels = [f""label{i}"" for i in range(len(rects))]"
69241,
69242,"for rect, label in zip(rects, labels):"
69243,    height = rect.get_height()
69244,    ax.text(
69245,"        rect.get_x() + rect.get_width() / 2, height + 5, label, ha=""center"", va=""bottom"""
69246,    )
69247,
69248,plt.show()
69249,points
69250,"for rect, label in zip(rects, labels)"
69251,import numpy as np
69252,import pandas as pd
69253,import matplotlib.pyplot as plt
69254,
69255,# Bring some raw data.
69256,"frequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]"
69257,
69258,"# In my original code I create a series and run on that,"
69259,# so for consistency I create a series from the list.
69260,freq_series = pd.Series.from_array(frequencies)
69261,
69262,"x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,"
69263,"            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]"
69264,
69265,# Plot the figure.
69266,"plt.figure(figsize=(12, 8))"
69267,ax = freq_series.plot(kind='bar')
69268,ax.set_title('Amount Frequency')
69269,ax.set_xlabel('Amount ($)')
69270,ax.set_ylabel('Frequency')
69271,ax.set_xticklabels(x_labels)
69272,
69273,
69274,"def add_value_labels(ax, spacing=5):"
69275,"    """"""Add labels to the end of each bar in a bar chart."
69276,
69277,    Arguments:
69278,        ax (matplotlib.axes.Axes): The matplotlib object containing the axes
69279,            of the plot to annotate.
69280,        spacing (int): The distance between the labels and the bars.
69281,"    """""""
69282,
69283,    # For each bar: Place a label
69284,    for rect in ax.patches:
69285,        # Get X and Y placement of label from rect.
69286,        y_value = rect.get_height()
69287,        x_value = rect.get_x() + rect.get_width() / 2
69288,
69289,        # Number of points between bar and label. Change to your liking.
69290,        space = spacing
69291,        # Vertical alignment for positive values
69292,        va = 'bottom'
69293,
69294,        # If value of bar is negative: Place label below bar
69295,        if y_value < 0:
69296,            # Invert space to place label below
69297,            space *= -1
69298,            # Vertically align label at top
69299,            va = 'top'
69300,
69301,        # Use Y value as label and format number with one decimal place
69302,"        label = ""{:.1f}"".format(y_value)"
69303,
69304,        # Create annotation
69305,        ax.annotate(
69306,"            label,                      # Use `label` as label"
69307,"            (x_value, y_value),         # Place label at end of the bar"
69308,"            xytext=(0, space),          # Vertically shift label by `space`"
69309,"            textcoords=""offset points"", # Interpret `xytext` as offset in points"
69310,"            ha='center',                # Horizontally center label"
69311,            va=va)                      # Vertically align label differently for
69312,                                        # positive and negative values.
69313,
69314,
69315,# Call the function above. All the magic happens there.
69316,add_value_labels(ax)
69317,
69318,"plt.savefig(""image.png"")"
69319,# Bring some raw data.
69320,"frequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]"
69321,
69322,freq_series = pd.Series(frequencies)
69323,
69324,"y_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0, "
69325,"            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]"
69326,
69327,# Plot the figure.
69328,"plt.figure(figsize=(12, 8))"
69329,ax = freq_series.plot(kind='barh')
69330,ax.set_title('Amount Frequency')
69331,ax.set_xlabel('Frequency')
69332,ax.set_ylabel('Amount ($)')
69333,ax.set_yticklabels(y_labels)
69334,"ax.set_xlim(-40, 300) # expand xlim to make labels easier to read"
69335,
69336,rects = ax.patches
69337,
69338,# For each bar: Place a label
69339,for rect in rects:
69340,    # Get X and Y placement of label from rect.
69341,    x_value = rect.get_width()
69342,    y_value = rect.get_y() + rect.get_height() / 2
69343,
69344,    # Number of points between bar and label. Change to your liking.
69345,    space = 5
69346,    # Vertical alignment for positive values
69347,    ha = 'left'
69348,
69349,    # If value of bar is negative: Place label left of bar
69350,    if x_value < 0:
69351,        # Invert space to place label to the left
69352,        space *= -1
69353,        # Horizontally align label at right
69354,        ha = 'right'
69355,
69356,    # Use X value as label and format number with one decimal place
69357,"    label = ""{:.1f}"".format(x_value)"
69358,
69359,    # Create annotation
69360,    plt.annotate(
69361,"        label,                      # Use `label` as label"
69362,"        (x_value, y_value),         # Place label at end of the bar"
69363,"        xytext=(space, 0),          # Horizontally shift label by `space`"
69364,"        textcoords=""offset points"", # Interpret `xytext` as offset in points"
69365,"        va='center',                # Vertically center label"
69366,        ha=ha)                      # Horizontally align label differently for
69367,                                    # positive and negative values.
69368,
69369,"plt.savefig(""image.png"")"
69370,import numpy as np
69371,import matplotlib.pyplot as plt
69372,
69373,"n = [1,2,3,4,5,]"
69374,s = [i**2 for i in n]
69375,"line = plt.bar(n,s)"
69376,plt.xlabel('Number')
69377,"plt.ylabel(""Square"")"
69378,
69379,for i in range(len(s)):
69380,"    plt.annotate(str(s[i]), xy=(n[i],s[i]), ha='center', va='bottom')"
69381,
69382,plt.show()
69383,'center'
69384,'bottom'
69385,matplotlib v3.4.0
69386,matplotlib.pyplot.bar_label
69387,label_type
69388,'edge'
69389,'center'
69390,kwargs
69391,Axes.annotate
69392,Text
69393,kwargs
69394,color
69395,rotation
69396,fontsize
69397,python 3.10
69398,pandas 1.4.2
69399,matplotlib 3.5.1
69400,seaborn 0.11.2
69401,ax.containers
69402,list
69403,BarContainer artists
69404,[0]
69405,list
69406,fmt
69407,label
69408,label=
69409,label=
69410,import pandas as pd
69411,
69412,# dataframe using frequencies and x_labels from the OP
69413,"df = pd.DataFrame({'Frequency': frequencies}, index=x_labels)"
69414,
69415,# display(df)
69416,          Frequency
69417,108300.0          6
69418,110540.0         16
69419,112780.0         75
69420,115020.0        160
69421,117260.0        244
69422,
69423,# plot
69424,"ax = df.plot(kind='bar', figsize=(12, 8), title='Amount Frequency',"
69425,"             xlabel='Amount ($)', ylabel='Frequency', legend=False)"
69426,
69427,# annotate
69428,"ax.bar_label(ax.containers[0], label_type='edge')"
69429,
69430,# pad the spacing between the number and the edge of the figure
69431,ax.margins(y=0.1)
69432,kwargs
69433,matplotlib.axes.Axes.text
69434,"ax.bar_label(ax.containers[0], label_type='edge', color='red', rotation=90, fontsize=7, padding=3)"
69435,ax.bar(...)
69436,plt.bar(...)
69437,"df.plot(kind='bar',...)"
69438,import seaborn as sns
69439,
69440,# plot data
69441,"fig, ax = plt.subplots(figsize=(12, 8))"
69442,"sns.barplot(x=x_labels, y=frequencies, ax=ax)"
69443,
69444,# annotate
69445,"ax.bar_label(ax.containers[0], label_type='edge')"
69446,
69447,# pad the spacing between the number and the edge of the figure
69448,ax.margins(y=0.1)
69449,seaborn.catplot
69450,data
69451,.catplot
69452,.bar_labels
69453,import pandas as pd
69454,import seaborn as sns
69455,
69456,# load the data into a dataframe
69457,"df = pd.DataFrame({'Frequency': frequencies, 'amount': x_labels})"
69458,
69459,# plot
69460,"g = sns.catplot(kind='bar', data=df, x='amount', y='Frequency', height=6, aspect=1.5)"
69461,
69462,# iterate through the axes
69463,for ax in g.axes.flat:
69464,
69465,    # annotate
69466,"    ax.bar_label(ax.containers[0], label_type='edge')"
69467,
69468,"    # pad the spacing between the number and the edge of the figure; should be in the loop, otherwise only the last subplot would be adjusted"
69469,    ax.margins(y=0.1)
69470,matplotlib.axes.Axes.bar
69471,matplotlib.pyplot.bar
69472,import matplotlib.pyplot as plt
69473,
69474,# create the xticks beginning a index 0
69475,xticks = range(len(frequencies))
69476,
69477,# plot
69478,"fig, ax = plt.subplots(figsize=(12, 8))"
69479,"ax.bar(x=xticks, height=frequencies)"
69480,
69481,# label the xticks
69482,"ax.set_xticks(xticks, x_labels)"
69483,
69484,# annotate
69485,"ax.bar_label(ax.containers[0], label_type='edge')"
69486,
69487,# pad the spacing between the number and the edge of the figure
69488,ax.margins(y=0.1)
69489,bar_label
69490,"def autolabel(rects,data):"
69491,""""""""
69492,Attach a text label above each bar displaying its height
69493,""""""""
69494,c = 0
69495,initial = 0.091
69496,offset = 0.205
69497,use_global_coordinate = True
69498,
69499,if use_global_coordinate:
69500,    for i in data:        
69501,"        ax.text(initial+offset*c, 0.05, str(i), horizontalalignment='center',"
69502,"                verticalalignment='center', transform=ax.transAxes,fontsize=8)"
69503,        c=c+1
69504,else:
69505,"    for rect,i in zip(rects,data):"
69506,        height = rect.get_height()
69507,"        ax.text(rect.get_x() + rect.get_width()/2., height,str(i),ha='center', va='bottom')"
69508, for i in range(len(frequencies)): # your number of bars
69509,"    plt.text(x = x_values[i]-0.25, #takes your x values as horizontal positioning argument "
69510,"    y = y_values[i]+1, #takes your y values as vertical positioning argument "
69511,"    s = data_labels[i], # the labels you want to add to the data"
69512,    size = 9) # font size of datalabels
69513,"def rolling_window(seq, window_size):"
69514,    it = iter(seq)
69515,    win = [it.next() for cnt in xrange(window_size)] # First window
69516,    yield win
69517,    for e in it: # Subsequent windows
69518,        win[:-1] = win[1:]
69519,        win[-1] = e
69520,        yield win
69521,
69522,"if __name__==""__main__"":"
69523,"    for w in rolling_window(xrange(6), 3):"
69524,        print w
69525,
69526,"""""""Example output:   "
69527,"   [0, 1, 2]"
69528,"   [1, 2, 3]"
69529,"   [2, 3, 4]"
69530,"   [3, 4, 5]"
69531,""""""""
69532,window_size == 2
69533,sum()
69534,max()
69535,itertools
69536,from itertools import islice
69537,
69538,"def window(seq, n=2):"
69539,"    ""Returns a sliding window (of width n) over data from the iterable"""
69540,"    ""   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   """
69541,    it = iter(seq)
69542,"    result = tuple(islice(it, n))"
69543,    if len(result) == n:
69544,        yield result
69545,    for elem in it:
69546,"        result = result[1:] + (elem,)"
69547,        yield result
69548,itertools
69549,"seq = [0, 1, 2, 3, 4, 5]"
69550,window_size = 3
69551,
69552,for i in range(len(seq) - window_size + 1):
69553,    print(seq[i: i + window_size])
69554,"[0, 1, 2]"
69555,"[1, 2, 3]"
69556,"[2, 3, 4]"
69557,"[3, 4, 5]"
69558,for elem in it
69559,collections.deque
69560,list
69561,pop(0)
69562,append()
69563,from collections import deque
69564,
69565,"def window(seq, n=2):"
69566,    it = iter(seq)
69567,"    win = deque((next(it, None) for _ in xrange(n)), maxlen=n)"
69568,    yield win
69569,    append = win.append
69570,    for e in it:
69571,        append(e)
69572,        yield win
69573,tee
69574,deque
69575,deque
69576,sum(w)
69577,tee
69578,tee
69579,yield win
69580,yield tuple(win)
69581,yield list(win)
69582,deque
69583,pip install sliding_window
69584,from sliding_window import window
69585,list(window(range(10)))
69586,list(list(x) for x in window(range(10)))
69587,tuple()
69588,tee()
69589,"from itertools import tee, izip"
69590,
69591,"def window(iterable, size):"
69592,"    iters = tee(iterable, size)"
69593,"    for i in xrange(1, size):"
69594,        for each in iters[i:]:
69595,"            next(each, None)"
69596,    return izip(*iters)
69597,
69598,"for each in window(xrange(6), 3):"
69599,    print list(each)
69600,"[0, 1, 2]"
69601,"[1, 2, 3]"
69602,"[2, 3, 4]"
69603,"[3, 4, 5]"
69604,timeit
69605,size
69606,iters
69607,next()
69608,izip()
69609,iters
69610,import more_itertools
69611,"list(more_itertools.windowed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],n=3, step=3))"
69612,
69613,"Out: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]"
69614,step=3
69615,"list(more_itertools.windowed(range(6), 3))"
69616,step
69617,fillvalue
69618,from collections import deque
69619,from itertools import islice
69620,
69621,"def sliding_window(iterable, size=2, step=1, fillvalue=None):"
69622,    if size < 0 or step < 1:
69623,        raise ValueError
69624,    it = iter(iterable)
69625,"    q = deque(islice(it, size), maxlen=size)"
69626,    if not q:
69627,        return  # empty iterable or size == 0
69628,    q.extend(fillvalue for _ in range(size - len(q)))  # pad to size
69629,    while True:
69630,        yield iter(q)  # iter() to avoid accidental outside modifications
69631,        try:
69632,            q.append(next(it))
69633,        except StopIteration: # Python 3.5 pep 479 support
69634,            return
69635,"        q.extend(next(it, fillvalue) for _ in range(step - 1))"
69636,size
69637,step
69638,fillvalue
69639,"size=4, step=3, fillvalue='*'"
69640, [a b c d]e f g h i j k l m n o p q r s t u v w x y z
69641,  a b c[d e f g]h i j k l m n o p q r s t u v w x y z
69642,  a b c d e f[g h i j]k l m n o p q r s t u v w x y z
69643,  a b c d e f g h i[j k l m]n o p q r s t u v w x y z
69644,  a b c d e f g h i j k l[m n o p]q r s t u v w x y z
69645,  a b c d e f g h i j k l m n o[p q r s]t u v w x y z
69646,  a b c d e f g h i j k l m n o p q r[s t u v]w x y z
69647,  a b c d e f g h i j k l m n o p q r s t u[v w x y]z
69648,  a b c d e f g h i j k l m n o p q r s t u v w x[y z * *]
69649,step
69650,import itertools as it
69651,"def window(iterable, size):"
69652,"    shiftedStarts = [it.islice(iterable, s, None) for s in xrange(size)]"
69653,    return it.izip(*shiftedStarts)
69654,import itertools as it
69655,"def window(iterable, size):"
69656,"    itrs = it.tee(iterable, size)"
69657,"    shiftedStarts = [it.islice(anItr, s, None) for s, anItr in enumerate(itrs)]"
69658,    return it.izip(*shiftedStarts)
69659,import itertools as it
69660,"def window4(iterable, size):"
69661,"    complete_itr, incomplete_itr = it.tee(iterable, 2)"
69662,    iters = [complete_itr]
69663,"    for i in xrange(1, size):"
69664,        incomplete_itr.next()
69665,"        complete_itr, incomplete_itr = it.tee(incomplete_itr, 2)"
69666,        iters.append(complete_itr)
69667,    return it.izip(*iters)
69668,itertools
69669,pairwise
69670,window
69671,consume
69672,"def consume(iterator, n):"
69673,"    ""Advance the iterator n-steps ahead. If n is none, consume entirely."""
69674,    # Use functions that consume iterators at C speed.
69675,    if n is None:
69676,        # feed the entire iterator into a zero-length deque
69677,"        collections.deque(iterator, maxlen=0)"
69678,    else:
69679,        # advance to the empty slice starting at position n
69680,"        next(islice(iterator, n, n), None)"
69681,
69682,"def window(iterable, n=2):"
69683,"    ""s -> (s0, ...,s(n-1)), (s1, ...,sn), (s2, ..., s(n+1)), ..."""
69684,"    iters = tee(iterable, n)"
69685,"    # Could use enumerate(islice(iters, 1, None), 1) to avoid consume(it, 0), but that's"
69686,"    # slower for larger window sizes, while saving only small fixed ""noop"" cost"
69687,"    for i, it in enumerate(iters):"
69688,"        consume(it, i)"
69689,    return zip(*iters)
69690,window
69691,pairwise
69692,tee
69693,n - 1
69694,consume
69695,islice
69696,islice
69697,consume
69698,n
69699,iterable
69700,ipython
69701,%timeit
69702,deque
69703,islice
69704,maxlen
69705,deque
69706,">>> %timeit -r5 deque(windowkindall(range(10), 3), 0)"
69707,"100000 loops, best of 5: 1.87 μs per loop"
69708,">>> %timeit -r5 deque(windowkindall(range(1000), 3), 0)"
69709,"10000 loops, best of 5: 72.6 μs per loop"
69710,">>> %timeit -r5 deque(windowkindall(range(1000), 30), 0)"
69711,"1000 loops, best of 5: 71.6 μs per loop"
69712,yield win
69713,yield tuple(win)
69714,tuple=tuple
69715,tuple
69716,B
69717,LEGB
69718,L
69719,">>> %timeit -r5 deque(windowkindalltupled(range(10), 3), 0)"
69720,"100000 loops, best of 5: 3.05 μs per loop"
69721,">>> %timeit -r5 deque(windowkindalltupled(range(1000), 3), 0)"
69722,"10000 loops, best of 5: 207 μs per loop"
69723,">>> %timeit -r5 deque(windowkindalltupled(range(1000), 30), 0)"
69724,"1000 loops, best of 5: 348 μs per loop"
69725,consume
69726,">>> %timeit -r5 deque(windowconsume(range(10), 3), 0)"
69727,"100000 loops, best of 5: 3.92 μs per loop"
69728,">>> %timeit -r5 deque(windowconsume(range(1000), 3), 0)"
69729,"10000 loops, best of 5: 42.8 μs per loop"
69730,">>> %timeit -r5 deque(windowconsume(range(1000), 30), 0)"
69731,"1000 loops, best of 5: 232 μs per loop"
69732,consume
69733,else
69734,consume
69735,n is None
69736,">>> %timeit -r5 deque(windowinlineconsume(range(10), 3), 0)"
69737,"100000 loops, best of 5: 3.57 μs per loop"
69738,">>> %timeit -r5 deque(windowinlineconsume(range(1000), 3), 0)"
69739,"10000 loops, best of 5: 40.9 μs per loop"
69740,">>> %timeit -r5 deque(windowinlineconsume(range(1000), 30), 0)"
69741,"1000 loops, best of 5: 211 μs per loop"
69742,pairwise
69743,tee
69744,tee
69745,consume
69746,consume
69747,consume
69748,"map(tuple, ...)"
69749,consume
69750,consume
69751,deque
69752,yield
69753,tuple
69754,"def windowkindalltupled(iterable, n=2, tuple=tuple):"
69755,    it = iter(iterable)
69756,"    win = deque(islice(it, n), n)"
69757,    if len(win) < n:
69758,        return
69759,    append = win.append
69760,    yield tuple(win)
69761,    for e in it:
69762,        append(e)
69763,        yield tuple(win)
69764,tuple
69765,tuple
69766,yield
69767,consume
69768,consume
69769,n is None
69770,else
69771,consume
69772,window
69773,consume
69774,consume
69775,"def slidingWindow(sequence,winSize,step=1):"
69776,"""""""Returns a generator that will iterate through"
69777,the defined chunks of input sequence. Input sequence
69778,"must be sliceable."""""""
69779,
69780,    # Verify the inputs
69781,    if not ((type(winSize) == type(0)) and (type(step) == type(0))):
69782,"        raise Exception(""**ERROR** type(winSize) and type(step) must be int."")"
69783,    if step > winSize:
69784,"        raise Exception(""**ERROR** step must not be larger than winSize."")"
69785,    if winSize > len(sequence):
69786,"        raise Exception(""**ERROR** winSize must not be larger than sequence length."")"
69787,
69788,    # Pre-compute number of chunks to emit
69789,    numOfChunks = ((len(sequence)-winSize)/step)+1
69790,
69791,    # Do the work
69792,"    for i in range(0,numOfChunks*step,step):"
69793,        yield sequence[i:i+winSize]
69794,len(sequence)
69795,sequence
69796,"def GetShiftingWindows(thelist, size):"
69797,    return [ thelist[x:x+size] for x in range( len(thelist) - size + 1 ) ]
69798,
69799,">> a = [1, 2, 3, 4, 5]"
69800,">> GetShiftingWindows(a, 3)"
69801,"[ [1, 2, 3], [2, 3, 4], [3, 4, 5] ]"
69802,range(len
69803,from collections import deque
69804,"def window(seq, n=2):"
69805,    it = iter(seq)
69806,"    win = deque((next(it, None) for _ in xrange(1)), maxlen=n)"
69807,    yield win
69808,    append = win.append
69809,    for e in it:
69810,        append(e)
69811,        yield win
69812,    for _ in xrange(len(win)-1):
69813,        win.popleft()
69814,        yield win
69815,
69816,"for wnd in window(range(5), n=3):"
69817,    print(list(wnd))
69818,[0]
69819,"[0, 1]"
69820,"[0, 1, 2]"
69821,"[1, 2, 3]"
69822,"[2, 3, 4]"
69823,"[3, 4]"
69824,[4]
69825,def pairwise(iterable):
69826,"    ""s -> (s0,s1), (s1,s2), (s2, s3), ..."""
69827,"    a, b = tee(iterable)"
69828,"    next(b, None)"
69829,"    return zip(a, b)"
69830,"from itertools import islice, tee"
69831,
69832,"def window(iterable, size): "
69833,"    iterators = tee(iterable, size) "
69834,"    iterators = [islice(iterator, i, None) for i, iterator in enumerate(iterators)]  "
69835,    yield from zip(*iterators)
69836,
69837,"list(window(range(5), 3))"
69838,"# [(0, 1, 2), (1, 2, 3), (2, 3, 4)]"
69839,"def rolling_window(list, degree):"
69840,    for i in range(len(list)-degree+1):
69841,        yield [list[i+o] for o in range(degree)]
69842,[list[i+o] for o in range(degree)]
69843,list[i:i+degree]
69844,import itertools
69845,import sys
69846,
69847,"def windowed(l, stride):"
69848,"    return zip(*[itertools.islice(l, i, sys.maxsize) for i in range(stride)])"
69849,"def window(seq, size, step=1):"
69850,    # initialize iterators
69851,    iters = [iter(seq) for i in range(size)]
69852,    # stagger iterators (without yielding)
69853,"    [next(iters[i]) for j in range(size) for i in range(-1, -j-1, -1)]"
69854,    while(True):
69855,        yield [next(i) for i in iters]
69856,        # next line does nothing for step = 1 (skips iterations for step > 1)
69857,        [next(i) for i in iters for j in range(step-1)]
69858,next(it)
69859,StopIteration
69860,seq
69861,__iter__
69862,__getitem__
69863,itertools
69864,collections
69865,#Importing the numpy library
69866,import numpy as np
69867,arr = np.arange(6) #Sequence
69868,window_size = 3
69869,"np.lib.stride_tricks.as_strided(arr, shape= (len(arr) - window_size +1, window_size), "
69870,strides = arr.strides*2)
69871,
69872,"""""""Example output:"
69873,
69874,"  [0, 1, 2]"
69875,"  [1, 2, 3]"
69876,"  [2, 3, 4]"
69877,"  [3, 4, 5]"
69878,>>> from cytoolz import sliding_window
69879,">>> list(sliding_window(3, range(6))) # returns [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5)]"
69880,">>> n, m = 6, 3"
69881,>>> k = n - m+1
69882,">>> print ('{}\n'*(k)).format(*[range(i, i+m) for i in xrange(k)])"
69883,"[0, 1, 2]"
69884,"[1, 2, 3]"
69885,"[2, 3, 4]"
69886,"[3, 4, 5]"
69887,"mylist = [1, 2, 3, 4, 5, 6, 7]"
69888,
69889,"def sliding_window(l, window_size=2):"
69890,    if window_size > len(l):
69891,"        raise ValueError(""Window size must be smaller or equal to the number of elements in the list."")"
69892,
69893,    t = []
69894,"    for i in xrange(0, window_size):"
69895,        t.append(l[i:])
69896,
69897,    return zip(*t)
69898,
69899,"print sliding_window(mylist, 3)"
69900,"[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]"
69901,"def sliding_window(image, stepSize, windowSize):"
69902,    # slide a window across the image
69903,"    for y in xrange(0, image.shape[0], stepSize):"
69904,"        for x in xrange(0, image.shape[1], stepSize):"
69905,            # yield the current window
69906,"            yield (x, y, image[y:y + windowSize[1], x:x + windowSize[0]])"
69907,.shape
69908,import itertools
69909,"def window(seq, n=2,step=1,fill=None,keep=0):"
69910,"    ""Returns a sliding window (of width n) over data from the iterable"""
69911,"    ""   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   """
69912,    it = iter(seq)
69913,"    result = tuple(itertools.islice(it, n))    "
69914,    if len(result) == n:
69915,        yield result
69916,    while True:        
69917,#         for elem in it:        
69918,"        elem = tuple( next(it, fill) for _ in range(step))"
69919,        result = result[step:] + elem        
69920,        if elem[-1] is fill:
69921,            if keep:
69922,                yield result
69923,            break
69924,        yield result
69925,zip(*[seq[i:(len(seq) - n - 1 + i)] for i in range(n)])
69926,from itertools import islice
69927,"array = range(0, 10)"
69928,window_size = 4
69929,"map(lambda i: list(islice(array, i, i + window_size)), range(0, len(array) - window_size + 1))"
69930,"# output = [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]"
69931,"def SlidingWindow(X, window_length, stride):"
69932,"    indexer = np.arange(window_length)[None, :] + stride*np.arange(int(len(X)/stride)-window_length+4)[:, None]"
69933,    return X.take(indexer)
69934,import numpy as np
69935,"def SlidingWindow(X, window_length, stride1):"
69936,    stride=  X.shape[1]*stride1
69937,    window_length = window_length*X.shape[1]
69938,"    indexer = np.arange(window_length)[None, :] + stride1*np.arange(int(len(X)/stride1)-window_length-1)[:, None]"
69939,    return X.take(indexer)
69940,window
69941,"from typing import Sized, Iterable"
69942,
69943,"def window(seq: Sized, n: int, strid: int = 1, drop_last: bool = False):"
69944,"    for i in range(0, len(seq), strid):"
69945,        res = seq[i:i + n]
69946,        if drop_last and len(res) < n:
69947,            break
69948,        yield res
69949,
69950,
69951,"def window2(seq: Iterable, n: int, strid: int = 1, drop_last: bool = False):"
69952,    it = iter(seq)
69953,    result = []
69954,    step = 0
69955,"    for i, ele in enumerate(it):"
69956,        result.append(ele)
69957,        result = result[-n:]
69958,        if len(result) == n:
69959,            if step % strid == 0:
69960,                yield result
69961,            step += 1
69962,    if not drop_last:
69963,        yield result
69964,from collections import deque
69965,
69966,"def window(ls,window_size=3):"
69967,    window = deque(maxlen=window_size)
69968,
69969,    for element in ls:
69970,        
69971,        if len(window)==window_size:
69972,            yield list(window)
69973,        window.append(element)
69974,
69975,"ls = [0,1,2,3,4,5]"
69976,
69977,for w in window(ls):
69978,    print(w)
69979,"def sliding_window(items, size):"
69980,"    return [items[start:end] for start, end"
69981,"            in zip(range(0, len(items) - size + 1), range(size, len(items) + 1))]"
69982,items
69983,[...]
69984,(...)
69985,itertools.pairwise(iterable)
69986,def pairwise(iterable):
69987,    # pairwise('ABCDEFG') --> AB BC CD DE EF FG
69988,"    a, b = tee(iterable)"
69989,"    next(b, None)"
69990,"    return zip(a, b)"
69991,pygame.transform.rotate()
69992,rot_image = rot_image.subsurface(rot_rect).copy()
69993,ValueError: subsurface rectangle outside surface area
69994,"def rot_center(image, angle):"
69995,"    """"""rotate an image while keeping its center and size"""""""
69996,    orig_rect = image.get_rect()
69997,"    rot_image = pygame.transform.rotate(image, angle)"
69998,    rot_rect = orig_rect.copy()
69999,    rot_rect.center = rot_image.get_rect().center
70000,    rot_image = rot_image.subsurface(rot_rect).copy()
70001,    return rot_image
70002,"def rot_center(image, angle, x, y):"
70003,    
70004,"    rotated_image = pygame.transform.rotate(image, angle)"
70005,"    new_rect = rotated_image.get_rect(center = image.get_rect(center = (x, y)).center)"
70006,
70007,"    return rotated_image, new_rect"
70008,.blit
70009,"def blitRotateCenter(surf, image, topleft, angle):"
70010,
70011,"    rotated_image = pygame.transform.rotate(image, angle)"
70012,    new_rect = rotated_image.get_rect(center = image.get_rect(topleft = topleft).center)
70013,
70014,"    surf.blit(rotated_image, new_rect)"
70015,pygame.Surface
70016,pygame.transform.rotate
70017,while not done:
70018,
70019,    # [...]
70020,
70021,"    image = pygame.transform.rotate(image, 1)"
70022,"    screen.blit(image, pos)"
70023,    pygame.display.flip()
70024,angle = 0
70025,while not done:
70026,
70027,    # [...]
70028,
70029,"    rotated_image = pygame.transform.rotate(image, angle)"
70030,    angle += 1
70031,
70032,"    screen.blit(rotated_image, pos)"
70033,    pygame.display.flip()
70034,pygame.math.Vector2
70035,"w, h = image.get_size()"
70036,"box = [pygame.math.Vector2(p) for p in [(0, 0), (w, 0), (w, -h), (0, -h)]]"
70037,pygame.math.Vector2.rotate
70038,box_rotate = [p.rotate(angle) for p in box]
70039,"min_box = (min(box_rotate, key=lambda p: p[0])[0], min(box_rotate, key=lambda p: p[1])[1])"
70040,"max_box = (max(box_rotate, key=lambda p: p[0])[0], max(box_rotate, key=lambda p: p[1])[1])"
70041,max_box[1]
70042,"origin = (pos[0] + min_box[0], pos[1] - max_box[1])"
70043,
70044,"rotated_image = pygame.transform.rotate(image, angle)"
70045,"screen.blit(rotated_image, origin)"
70046,pygame.math.Vector2
70047,pygame.math.Vector2.rotate
70048,pygame.math.Vector2.rotate
70049,pygame.transform.rotate
70050,"image_rect = image.get_rect(topleft = (pos[0] - originPos[0], pos[1]-originPos[1]))"
70051,offset_center_to_pivot = pygame.math.Vector2(pos) - image_rect.center
70052,rotated_offset = offset_center_to_pivot.rotate(-angle)
70053,"rotated_image_center = (pos[0] - rotated_offset.x, pos[1] - rotated_offset.y)"
70054,"rotated_image = pygame.transform.rotate(image, angle)"
70055,rotated_image_rect = rotated_image.get_rect(center = rotated_image_center)
70056,
70057,"screen.blit(rotated_image, rotated_image_rect)"
70058,"blitRotate(surf, image, pos, originPos, angle)"
70059,surf
70060,image
70061,blit
70062,pos
70063,surf
70064,surf
70065,originPos
70066,image
70067,image
70068,angle
70069,pos
70070,blitRotate
70071,originPos
70072,import pygame
70073,
70074,pygame.init()
70075,"screen = pygame.display.set_mode((300, 300))"
70076,clock = pygame.time.Clock()
70077,
70078,"def blitRotate(surf, image, pos, originPos, angle):"
70079,
70080,    # offset from pivot to center
70081,"    image_rect = image.get_rect(topleft = (pos[0] - originPos[0], pos[1]-originPos[1]))"
70082,    offset_center_to_pivot = pygame.math.Vector2(pos) - image_rect.center
70083,    
70084,    # roatated offset from pivot to center
70085,    rotated_offset = offset_center_to_pivot.rotate(-angle)
70086,
70087,    # roatetd image center
70088,"    rotated_image_center = (pos[0] - rotated_offset.x, pos[1] - rotated_offset.y)"
70089,
70090,    # get a rotated image
70091,"    rotated_image = pygame.transform.rotate(image, angle)"
70092,    rotated_image_rect = rotated_image.get_rect(center = rotated_image_center)
70093,
70094,    # rotate and blit the image
70095,"    surf.blit(rotated_image, rotated_image_rect)"
70096,  
70097,    # draw rectangle around the image
70098,"    pygame.draw.rect(surf, (255, 0, 0), (*rotated_image_rect.topleft, *rotated_image.get_size()),2)"
70099,
70100,"def blitRotate2(surf, image, topleft, angle):"
70101,
70102,"    rotated_image = pygame.transform.rotate(image, angle)"
70103,    new_rect = rotated_image.get_rect(center = image.get_rect(topleft = topleft).center)
70104,
70105,"    surf.blit(rotated_image, new_rect.topleft)"
70106,"    pygame.draw.rect(surf, (255, 0, 0), new_rect, 2)"
70107,
70108,try:
70109,    image = pygame.image.load('AirPlaneFront.png')
70110,except:
70111,"    text = pygame.font.SysFont('Times New Roman', 50).render('image', False, (255, 255, 0))"
70112,"    image = pygame.Surface((text.get_width()+1, text.get_height()+1))"
70113,"    pygame.draw.rect(image, (0, 0, 255), (1, 1, *text.get_size()))"
70114,"    image.blit(text, (1, 1))"
70115,"w, h = image.get_size()"
70116,
70117,angle = 0
70118,done = False
70119,while not done:
70120,    clock.tick(60)
70121,    for event in pygame.event.get():
70122,        if event.type == pygame.QUIT:
70123,            done = True
70124,
70125,"    pos = (screen.get_width()/2, screen.get_height()/2)"
70126,    
70127,    screen.fill(0)
70128,"    blitRotate(screen, image, pos, (w/2, h/2), angle)"
70129,"    #blitRotate2(screen, image, pos, angle)"
70130,    angle += 1
70131,    
70132,"    pygame.draw.line(screen, (0, 255, 0), (pos[0]-20, pos[1]), (pos[0]+20, pos[1]), 3)"
70133,"    pygame.draw.line(screen, (0, 255, 0), (pos[0], pos[1]-20), (pos[0], pos[1]+20), 3)"
70134,"    pygame.draw.circle(screen, (0, 255, 0), pos, 7, 0)"
70135,
70136,    pygame.display.flip()
70137,    
70138,pygame.quit()
70139,exit()
70140,"def rot_center(image, angle):"
70141,"    """"""rotate a Surface, maintaining position."""""""
70142,    
70143,    loc = image.get_rect().center  #rot_image is not defined 
70144,"    rot_sprite = pygame.transform.rotate(image, angle)"
70145,    rot_sprite.get_rect().center = loc
70146,    return rot_sprite
70147,    
70148,"    # or return tuple: (Surface, Rect)"
70149,"    # return rot_sprite, rot_sprite.get_rect()"
70150,rect = new_image.get_rect(center=rect.center) 
70151,center
70152,get_rect
70153,center
70154,center
70155,import pygame as pg
70156,
70157,
70158,"def rotate(image, rect, angle):"
70159,"    """"""Rotate the image while keeping its center."""""""
70160,    # Rotate the original image without modifying it.
70161,"    new_image = pg.transform.rotate(image, angle)"
70162,    # Get a new rect with the center of the old rect.
70163,    rect = new_image.get_rect(center=rect.center)
70164,"    return new_image, rect"
70165,
70166,
70167,def main():
70168,    clock = pg.time.Clock()
70169,"    screen = pg.display.set_mode((640, 480))"
70170,    gray = pg.Color('gray15')
70171,    blue = pg.Color('dodgerblue2')
70172,
70173,"    image = pg.Surface((320, 200), pg.SRCALPHA)"
70174,"    pg.draw.polygon(image, blue, ((0, 0), (320, 100), (0, 200)))"
70175,    # Keep a reference to the original to preserve the image quality.
70176,    orig_image = image
70177,"    rect = image.get_rect(center=(320, 240))"
70178,    angle = 0
70179,
70180,    done = False
70181,    while not done:
70182,        for event in pg.event.get():
70183,            if event.type == pg.QUIT:
70184,                done = True
70185,
70186,        angle += 2
70187,"        image, rect = rotate(orig_image, rect, angle)"
70188,
70189,        screen.fill(gray)
70190,"        screen.blit(image, rect)"
70191,        pg.display.flip()
70192,        clock.tick(30)
70193,
70194,
70195,if __name__ == '__main__':
70196,    pg.init()
70197,    main()
70198,    pg.quit()
70199,import pygame as pg
70200,
70201,
70202,class Entity(pg.sprite.Sprite):
70203,
70204,"    def __init__(self, pos):"
70205,        super().__init__()
70206,"        self.image = pg.Surface((122, 70), pg.SRCALPHA)"
70207,"        pg.draw.polygon(self.image, pg.Color('dodgerblue1'),"
70208,"                        ((1, 0), (120, 35), (1, 70)))"
70209,        # A reference to the original image to preserve the quality.
70210,        self.orig_image = self.image
70211,        self.rect = self.image.get_rect(center=pos)
70212,        self.angle = 0
70213,
70214,    def update(self):
70215,        self.angle += 2
70216,        self.rotate()
70217,
70218,    def rotate(self):
70219,"        """"""Rotate the image of the sprite around its center."""""""
70220,        # `rotozoom` usually looks nicer than `rotate`. Pygame's rotation
70221,        # functions return new images and don't modify the originals.
70222,"        self.image = pg.transform.rotozoom(self.orig_image, self.angle, 1)"
70223,        # Create a new rect with the center of the old rect.
70224,        self.rect = self.image.get_rect(center=self.rect.center)
70225,
70226,
70227,def main():
70228,"    screen = pg.display.set_mode((640, 480))"
70229,    clock = pg.time.Clock()
70230,"    all_sprites = pg.sprite.Group(Entity((320, 240)))"
70231,
70232,    while True:
70233,        for event in pg.event.get():
70234,            if event.type == pg.QUIT:
70235,                return
70236,
70237,        all_sprites.update()
70238,"        screen.fill((30, 30, 30))"
70239,        all_sprites.draw(screen)
70240,        pg.display.flip()
70241,        clock.tick(30)
70242,
70243,
70244,if __name__ == '__main__':
70245,    pg.init()
70246,    main()
70247,    pg.quit()
70248,"(320, 240)"
70249,"rect = image.get_rect(center=(320, 240))"
70250,rect
70251,image
70252,center
70253,"(320, 240)"
70254,topleft
70255,get_rect
70256,pygame
70257,"game_display = pygame.display.set_mode((800, 600))"
70258,
70259,x = 0
70260,y = 0
70261,angle = 0
70262,
70263,"img = pygame.image.load(""resources/image.png"")"
70264,"img = pygame.transform.scale(img, (50, 50)) # image size"
70265,
70266,"def draw_img(self, image, x, y, angle):"
70267,"    rotated_image = pygame.transform.rotate(image, angle) "
70268,"    game_display.blit(rotated_image, rotated_image.get_rect(center=image.get_rect(topleft=(x, y)).center).topleft)"
70269,
70270,# run this method with your loop
70271,def tick():
70272,"    draw_img(img, x, y, angle)"
70273,angle=0
70274,roll = true
70275,while roll:
70276,    # clean surface with your background color
70277,    gameDisplay.fill(color)
70278,    self.image = yourImage
70279,"    rotate_image = pygame.transform.rotate(self.image, angle)"
70280,    rect = rotate_image.get_rect()
70281,"    pos = (((your_surface_width - rect.width)/2),((your_surface_height - rect.height)/2))"
70282,"    gameDisplay.blit(rotate_image,pos)"
70283,    pygame.display.flip()
70284,    angle+=2
70285,    if angle == 360:
70286,        roll=False 
70287,.txt
70288,glob
70289,"import glob, os"
70290,"os.chdir(""/mydir"")"
70291,"for file in glob.glob(""*.txt""):"
70292,    print(file)
70293,os.listdir
70294,import os
70295,"for file in os.listdir(""/mydir""):"
70296,"    if file.endswith("".txt""):"
70297,"        print(os.path.join(""/mydir"", file))"
70298,os.walk
70299,import os
70300,"for root, dirs, files in os.walk(""/mydir""):"
70301,    for file in files:
70302,"        if file.endswith("".txt""):"
70303,"             print(os.path.join(root, file))"
70304,for file in f
70305,for files in f
70306,f
70307,files
70308,for file in files
70309,file
70310,file
70311,file_
70312,>>> import glob
70313,>>> glob.glob('./*.txt')
70314,"['./outline.txt', './pip-log.txt', './test.txt', './testingvim.txt']"
70315,glob
70316,"for root, dirs, files in os.walk(directory):"
70317,    for file in files:
70318,        if file.endswith('.txt'):
70319,            print(file)
70320,"root, dirs, files"
70321,"r, d, f"
70322,"text_file_list = [file for root, dirs, files in os.walk(folder) for file in files if file.endswith('.txt')]"
70323,pathlib
70324,glob
70325,import pathlib
70326,
70327,list(pathlib.Path('your_directory').glob('*.txt'))
70328,for txt_file in pathlib.Path('your_directory').glob('*.txt'):
70329,"    # do something with ""txt_file"""
70330,.glob('**/*.txt')
70331,pathlib
70332,conda
70333,pip
70334,pathlib
70335,pathlib2
70336,**/*.txt
70337,"foundfiles= subprocess.check_output(""ls **/*.txt"", shell=True)"
70338,for foundfile in foundfiles.splitlines():
70339,print foundfile
70340,pathlib
70341,rglob
70342,.rglob('*.txt')
70343,>>> import os
70344,>>> path = '/usr/share/cups/charmaps'
70345,>>> text_files = [f for f in os.listdir(path) if f.endswith('.txt')]
70346,>>> text_files
70347,"['euc-cn.txt', 'euc-jp.txt', 'euc-kr.txt', 'euc-tw.txt', ... 'windows-950.txt']"
70348,os.path.join
70349,text_files
70350,"text_files = [os.path.join(path, f) for f in os.listdir(path) if f.endswith('.txt')]"
70351,import os
70352,
70353,path = 'mypath/path' 
70354,files = os.listdir(path)
70355,
70356,files_txt = [i for i in files if i.endswith('.txt')]
70357,import os
70358,
70359,"for root, dirs, files in os.walk(dir):"
70360,    for f in files:
70361,        if os.path.splitext(f)[1] == '.txt':
70362,"            fullpath = os.path.join(root, f)"
70363,            print(fullpath)
70364,import os
70365,
70366,"fileiter = (os.path.join(root, f)"
70367,"    for root, _, files in os.walk(dir)"
70368,    for f in files)
70369,txtfileiter = (f for f in fileiter if os.path.splitext(f)[1] == '.txt')
70370,for txt in txtfileiter:
70371,    print(txt)
70372,import glob
70373,"for f in glob.iglob(""/mydir/*/*.txt""): # generator, search immediate subdirectories "
70374,    print f
70375,"print glob.glob1(""/mydir"", ""*.tx?"")  # literal_directory, basename_pattern"
70376,"import fnmatch, os"
70377,"print fnmatch.filter(os.listdir(""/mydir""), ""*.tx?"") # include dot-files"
70378,glob1()
70379,glob
70380,.../Lib/glob.py
70381,glob.glob1()
70382,glob
70383,"import glob, os"
70384,"os.chdir(""H:\\wallpaper"")# use whatever directory you want"
70385,
70386,#double\\ no single \
70387,
70388,"for file in glob.glob(""**/*.txt"", recursive = True):"
70389,    print(file)
70390,**
70391,chdir
70392,filepath = os.path.join('wallpaper')
70393,"glob.glob(filepath+""**/*.psd"", recursive = True)"
70394,file
70395,_file
70396,import os
70397,import re
70398,import pandas as pd
70399,import numpy as np
70400,
70401,
70402,"def findFilesInFolderYield(path,  extension, containsTxt='', subFolders = True, excludeText = ''):"
70403,"    """"""  Recursive function to find all files of an extension type in a folder (and optionally in all subfolders too)"
70404,
70405,    path:               Base directory to find files
70406,"    extension:          File extension to find.  e.g. 'txt'.  Regular expression. Or  'ls\d' to match ls1, ls2, ls3 etc"
70407,"    containsTxt:        List of Strings, only finds file if it contains this text.  Ignore if '' (or blank)"
70408,"    subFolders:         Bool.  If True, find files in all subfolders under path. If False, only searches files in the specified folder"
70409,    excludeText:        Text string.  Ignore if ''. Will exclude if text string is in path.
70410,"    """""""
70411,    if type(containsTxt) == str: # if a string and not in a list
70412,        containsTxt = [containsTxt]
70413,    
70414,    myregexobj = re.compile('\.' + extension + '$')    # Makes sure the file extension is at the end and is preceded by a .
70415,    
70416,    try:   # Trapping a OSError or FileNotFoundError:  File permissions problem I believe
70417,        for entry in os.scandir(path):
70418,            if entry.is_file() and myregexobj.search(entry.path): # 
70419,    
70420,                bools = [True for txt in containsTxt if txt in entry.path and (excludeText == '' or excludeText not in entry.path)]
70421,    
70422,                if len(bools)== len(containsTxt):
70423,"                    yield entry.stat().st_size, entry.stat().st_atime_ns, entry.stat().st_mtime_ns, entry.stat().st_ctime_ns, entry.path"
70424,    
70425,"            elif entry.is_dir() and subFolders:   # if its a directory, then repeat process as a nested function"
70426,"                yield from findFilesInFolderYield(entry.path,  extension, containsTxt, subFolders)"
70427,    except OSError as ose:
70428,"        print('Cannot access ' + path +'. Probably a permissions error ', ose)"
70429,    except FileNotFoundError as fnf:
70430,"        print(path +' not found ', fnf)"
70431,
70432,"def findFilesInFolderYieldandGetDf(path,  extension, containsTxt, subFolders = True, excludeText = ''):"
70433,"    """"""  Converts returned data from findFilesInFolderYield and creates and Pandas Dataframe."
70434,    Recursive function to find all files of an extension type in a folder (and optionally in all subfolders too)
70435,
70436,    path:               Base directory to find files
70437,"    extension:          File extension to find.  e.g. 'txt'.  Regular expression. Or  'ls\d' to match ls1, ls2, ls3 etc"
70438,"    containsTxt:        List of Strings, only finds file if it contains this text.  Ignore if '' (or blank)"
70439,"    subFolders:         Bool.  If True, find files in all subfolders under path. If False, only searches files in the specified folder"
70440,    excludeText:        Text string.  Ignore if ''. Will exclude if text string is in path.
70441,"    """""""
70442,    
70443,"    fileSizes, accessTimes, modificationTimes, creationTimes , paths  = zip(*findFilesInFolderYield(path,  extension, containsTxt, subFolders))"
70444,    df = pd.DataFrame({
70445,"            'FLS_File_Size':fileSizes,"
70446,"            'FLS_File_Access_Date':accessTimes,"
70447,"            'FLS_File_Modification_Date':np.array(modificationTimes).astype('timedelta64[ns]'),"
70448,"            'FLS_File_Creation_Date':creationTimes,"
70449,"            'FLS_File_PathName':paths,"
70450,                  })
70451,    
70452,"    df['FLS_File_Modification_Date'] = pd.to_datetime(df['FLS_File_Modification_Date'],infer_datetime_format=True)"
70453,"    df['FLS_File_Creation_Date'] = pd.to_datetime(df['FLS_File_Creation_Date'],infer_datetime_format=True)"
70454,"    df['FLS_File_Access_Date'] = pd.to_datetime(df['FLS_File_Access_Date'],infer_datetime_format=True)"
70455,
70456,    return df
70457,
70458,ext =   'txt'  # regular expression 
70459,containsTxt=[]
70460,path = 'C:\myFolder'
70461,"df = findFilesInFolderYieldandGetDf(path,  ext, containsTxt, subFolders = True)"
70462,from path import path
70463,p = path('/path/to/the/directory')
70464,for f in p.files(pattern='*.txt'):
70465,    print f
70466,for f in p.walk(pattern='*.txt')
70467,list(p.glob('**/*.py'))
70468,from os import listdir
70469,"from os.path import isfile, join"
70470,"path = ""/dataPath/"""
70471,"onlyTxtFiles = [f for f in listdir(path) if isfile(join(path, f)) and  f.endswith("".txt"")]"
70472,print onlyTxtFiles
70473,import os
70474,
70475,the_dir = 'the_dir_that_want_to_search_in'
70476,"all_txt_files = filter(lambda x: x.endswith('.txt'), os.listdir(the_dir))"
70477,"all_txt_files = list(filter(lambda x: x.endswith('.txt'), os.listdir(the_dir)))"
70478,os.listdir()
70479,os.walk()
70480,pathlib
70481,os.scandir()
70482,glob
70483,import os
70484,import pathlib
70485,import timeit
70486,import glob
70487,
70488,def a():
70489,    path = pathlib.Path().cwd()
70490,"    list_sqlite_files = [str(f) for f in path.glob(""*.sqlite"")]"
70491,
70492,def b(): 
70493,    path = os.getcwd()
70494,"    list_sqlite_files = [f.path for f in os.scandir(path) if os.path.splitext(f)[1] == "".sqlite""]"
70495,
70496,def c():
70497,    path = os.getcwd()
70498,"    list_sqlite_files = [os.path.join(path, f) for f in os.listdir(path) if f.endswith("".sqlite"")]"
70499,
70500,def d():
70501,    path = os.getcwd()
70502,    os.chdir(path)
70503,"    list_sqlite_files = [os.path.join(path, f) for f in glob.glob(""*.sqlite"")]"
70504,
70505,def e():
70506,    path = os.getcwd()
70507,"    list_sqlite_files = [os.path.join(path, f) for f in glob.glob1(str(path), ""*.sqlite"")]"
70508,
70509,def f():
70510,    path = os.getcwd()
70511,    list_sqlite_files = []
70512,"    for root, dirs, files in os.walk(path):"
70513,        for file in files:
70514,"            if file.endswith("".sqlite""):"
70515,"                list_sqlite_files.append( os.path.join(root, file) )"
70516,        break
70517,
70518,
70519,
70520,"print(timeit.timeit(a, number=1000))"
70521,"print(timeit.timeit(b, number=1000))"
70522,"print(timeit.timeit(c, number=1000))"
70523,"print(timeit.timeit(d, number=1000))"
70524,"print(timeit.timeit(e, number=1000))"
70525,"print(timeit.timeit(f, number=1000))"
70526,# Python 3.6.4
70527,0.431
70528,0.515
70529,0.161
70530,0.548
70531,0.537
70532,0.274
70533,import os
70534,import sys 
70535,
70536,if len(sys.argv)==2:
70537,    print('no params')
70538,    sys.exit(1)
70539,
70540,dir = sys.argv[1]
70541,mask= sys.argv[2]
70542,
70543,files = os.listdir(dir); 
70544,
70545,"res = filter(lambda x: x.endswith(mask), files); "
70546,
70547,print res
70548,import os
70549,"fileNames = [fileName for fileName in os.listdir(""data"") if fileName.endswith("".txt"")]"
70550,import os
70551,"fnames = ([file for root, dirs, files in os.walk(dir)"
70552,    for file in files
70553,    if file.endswith('.txt') #or file.endswith('.png') or file.endswith('.pdf')
70554,    ])
70555,for fname in fnames: print(fname)
70556,import fnmatch
70557,import os
70558,
70559,for file in os.listdir('.'):
70560,"    if fnmatch.fnmatch(file, '*.txt'):"
70561,        print file
70562,"def get_all_filepaths(root_path, ext):"
70563,"    """""""
70564,    Search all files which have a given extension within root_path.
70565,
70566,"    This ignores the case of the extension and searches subdirectories, too."
70567,
70568,    Parameters
70569,    ----------
70570,    root_path : str
70571,    ext : str
70572,
70573,    Returns
70574,    -------
70575,    list of str
70576,
70577,    Examples
70578,    --------
70579,"    >>> get_all_filepaths('/run', '.lock')"
70580,"    ['/run/unattended-upgrades.lock',"
70581,"     '/run/mlocate.daily.lock',"
70582,"     '/run/xtables.lock',"
70583,"     '/run/mysqld/mysqld.sock.lock',"
70584,"     '/run/postgresql/.s.PGSQL.5432.lock',"
70585,"     '/run/network/.ifstate.lock',"
70586,     '/run/lock/asound.state.lock']
70587,"    """""""
70588,    import os
70589,    all_files = []
70590,"    for root, dirs, files in os.walk(root_path):"
70591,        for filename in files:
70592,            if filename.lower().endswith(ext):
70593,"                all_files.append(os.path.join(root, filename))"
70594,    return all_files
70595,yield
70596,"def get_all_filepaths(root_path, ext):"
70597,    import os
70598,"    for root, dirs, files in os.walk(root_path):"
70599,        for filename in files:
70600,            if filename.lower().endswith(ext):
70601,"                yield os.path.join(root, filename)"
70602,lower()
70603,yield
70604,yield
70605,import fnmatch
70606,import os
70607,
70608,"    for file in os.listdir(""/Users/Johnny/Desktop/MyTXTfolder""):"
70609,"        if fnmatch.fnmatch(file.upper(), '*.TXT'):"
70610,            print(file)
70611,extend()
70612,"types = ('*.jpg', '*.png')"
70613,images_list = []
70614,for files in types:
70615,"    images_list.extend(glob.glob(os.path.join(path, files)))"
70616,.txt
70617,from fnmatch import filter
70618,from functools import partial
70619,from itertools import chain
70620,"from os import path, walk"
70621,
70622,"print(*chain(*(map(partial(path.join, root), filter(filenames, ""*.txt"")) for root, _, filenames in walk(""mydir""))))"
70623,"def yield_files_with_extensions(folder_path, file_extension):"
70624,"   for _, _, files in os.walk(folder_path):"
70625,       for file in files:
70626,           if file.endswith(file_extension):
70627,               yield file
70628,"for f in yield_files_with_extensions('.', '.txt'): "
70629,    print(f)
70630,"files = [f for f in yield_files_with_extensions('.', '.txt')]"
70631,import os
70632,
70633,# This is the path where you want to search
70634,path = r'd:'  
70635,
70636,# this is extension you want to detect
70637,extension = '.txt'   # this can be : .jpg  .png  .xls  .log .....
70638,
70639,"for root, dirs_list, files_list in os.walk(path):"
70640,    for file_name in files_list:
70641,        if os.path.splitext(file_name)[-1] == extension:
70642,"            file_name_path = os.path.join(root, file_name)"
70643,            print file_name
70644,            print file_name_path   # This is the full path of the filter file
70645,os.walk
70646,import os
70647,
70648,
70649,"def files_in_dir(path, extension=''):"
70650,"    """""""
70651,       Generator: yields all of the files in <path> ending with
70652,       <extension>
70653,
70654,"       \param   path       Absolute or relative path to inspect,"
70655,"       \param   extension  [optional] Only yield files matching this,"
70656,
70657,       \yield              [filenames]
70658,"    """""""
70659,
70660,
70661,"    for _, dirs, files in os.walk(path):"
70662,        dirs[:] = []  # do not recurse directories.
70663,        yield from [f for f in files if f.endswith(extension)]
70664,
70665,# Example: print all the .py files in './python'
70666,"for filename in files_in_dir('./python', '*.py'):"
70667,"    print(""-"", filename)"
70668,"path, ext = ""./python"", ext = "".py"""
70669,"for _, _, dirfiles in os.walk(path):"
70670,    matches = (f for f in dirfiles if f.endswith(ext))
70671,    break
70672,
70673,for filename in matches:
70674,"    print(""-"", filename)"
70675,    matches = [f for f in dirfiles if f.endswith(ext)]
70676,app/
70677,   __init__.py
70678,   sub1/
70679,      __init__.py
70680,      mod1.py
70681,   sub2/
70682,      __init__.py
70683,      mod2.py
70684,mod1
70685,mod2
70686,from ..sub2 import mod2
70687,sys.path
70688,__init__.py
70689,sub1
70690,subX
70691,-m
70692,from sub2 import mod2
70693,python -m sub1.mod1
70694,from ..sub2 import mod2
70695,mod1.py
70696,app
70697,python -m app.sub1.mod1
70698,__name__
70699,__name__
70700,__main__
70701,relative import in non-package
70702,-m
70703,from . import some_module
70704,$ PWD
70705,$ python -m app.main
70706,$ python -m <main_directory>.<script_with_relative_imports>
70707,main.py
70708,setup.py
70709,app/ ->
70710,    __init__.py
70711,    package_a/ ->
70712,       __init__.py
70713,       module_a.py
70714,    package_b/ ->
70715,       __init__.py
70716,       module_b.py
70717,python main.py
70718,main.py
70719,import app.package_a.module_a
70720,module_a.py
70721,import app.package_b.module_b
70722,from app.package_a import module_a
70723,app
70724,main.py
70725,setup.py
70726,main.py
70727,-m
70728,python -m app.sub1.mod1
70729,app.sub1.mod1.main()
70730,import sys
70731,"sys.path.insert(0, ""../settings"")"
70732,
70733,
70734,try:
70735,    from local_settings import *
70736,except ImportError:
70737,    print('No Import')
70738,"sys.path.insert(0, ""../settings"")"
70739,from local_settings import *
70740,nosklo's
70741,__init__.py
70742,main.py
70743,app/ ->
70744,    __init__.py
70745,    package_a/ ->
70746,       __init__.py
70747,       fun_a.py
70748,    package_b/ ->
70749,       __init__.py
70750,       fun_b.py
70751,def print_a():
70752,    print 'This is a function in dir package_a'
70753,from app.package_a.fun_a import print_a
70754,def print_b():
70755,    print 'This is a function in dir package_b'
70756,    print 'going to call a function in dir package_a'
70757,    print '-'*30
70758,    print_a()
70759,from app.package_b import fun_b
70760,fun_b.print_b()
70761,$ python main.py
70762,This is a function in dir package_b
70763,going to call a function in dir package_a
70764,------------------------------
70765,This is a function in dir package_a
70766,from app.package_b import fun_b
70767,from app.package_a.fun_a import print_a
70768,package_b
70769,package_a
70770,def import_path(fullpath):
70771,"    """""" "
70772,    Import a file with full path specification. Allows one to
70773,"    import from anywhere, something __import__ does not do. "
70774,"    """""""
70775,"    path, filename = os.path.split(fullpath)"
70776,"    filename, ext = os.path.splitext(filename)"
70777,    sys.path.append(path)
70778,    module = __import__(filename)
70779,    reload(module) # Might be out of date
70780,    del sys.path[-1]
70781,    return module
70782,mymodule\
70783,   __init__.py
70784,   mymodule1\
70785,      __init__.py
70786,      mymodule1_1
70787,   mymodule2\
70788,      __init__.py
70789,      mymodule2_1
70790,
70791,
70792,import mymodule.mymodule1.mymodule1_1  
70793,if __name__ == '__main__':
70794,"    sys.path.insert(0, '../..')"
70795,sys.path.append('../')
70796,scripts
70797,import os.path
70798,import sys
70799,"sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "".."")))"
70800,.py
70801,import imp
70802,
70803,"foo = imp.load_source('module.name', '/path/to/file.py')"
70804,foo.MyClass()
70805,from .mod1 import stuff
70806,from __future__ import absolute_import
70807,import string
70808,from pkg import string
70809,bash$ export PYTHONPATH=/PATH/TO/APP
70810,import sub1.func1
70811,#...more import
70812,virtualenv
70813,__package__
70814,__main__
70815,sys.path
70816,"""package_head.subfolder.module_name"""
70817,PYTHONPATH
70818,"export PYTHONPATH=""${PYTHONPATH}:/path/to/your/module/"""
70819,sys.path
70820,sys.path
70821,PYTHONPATH
70822,sys.path
70823,PYTHONPATH
70824,import os
70825,import inspect
70826,currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
70827,parentdir = os.path.dirname(currentdir)
70828,"os.sys.path.insert(1, parentdir)"
70829,"# print(""currentdir = "", currentdir)"
70830,"# print(""parentdir="", parentdir)"
70831,import pathlib   
70832,import sys
70833,sys.path.append(pathlib.Path(__file__).parent.resolve())
70834,import file_to_import  # the actual intended import
70835,pathlib
70836,os.path
70837,http://localhost:5000
70838,http://[dev-host-ip]:5000
70839,--host
70840,flask run
70841,host
70842,app.run()
70843,localhost
70844,flask run --host=0.0.0.0
70845,"app.run(host=""0.0.0.0"")"
70846,0.0.0.0
70847,--host=0.0.0.0
70848,$ flask run --host=0.0.0.0
70849,flask
70850,flask run --host=0.0.0.0
70851,--host=0.0.0.0
70852,$ flask run --host=0.0.0.0
70853,ipconfig
70854,ifconfig
70855,flask run -h 192.168.X.X
70856,flask run -h 192.168.1.100
70857,$env:getIp = ipconfig
70858,if ($env:getIp -match '(IPv4[\sa-zA-Z.]+:\s[0-9.]+)') {
70859,    if ($matches[1] -match '([^a-z\s][\d]+[.\d]+)'){
70860,        $ipv4 = $matches[1]
70861,    }
70862,}
70863,echo $ipv4
70864,.\getIP.ps1; flask run -h $ipv4
70865,ipconfig getifaddr en0
70866,--host
70867,host='0.0.0.0' to 
70868,if __name__ == '__main__':
70869,"    app.run(host='0.0.0.0', port=5000)"
70870,OSError: [WinError 10013] An attempt was made to access a socket in a way forbidden by its access permissions
70871,netstat -na|findstr 5000
70872,cool
70873,cool.app.run(
70874,"    host=cool.app.config.get(""HOST"", ""localhost""),"
70875,"    port=cool.app.config.get(""PORT"", 9000)"
70876,)            
70877,sudo ufw enable
70878,sudo ufw allow 5000/tcp //allow the server to handle the request on port 5000
70879,"app.run(host='0.0.0.0' , port=5000)"
70880,
70881,
70882,python3 app.py & #run application in background
70883,if __name__ == '__main__':
70884,"app.run(host='0.0.0.0', port=5000)"
70885,--host 0.0.0.0 --port 5000
70886,$ export FLASK_APP=app.py
70887,$ export FLASK_ENV=development
70888,$ export FLASK_RUN_PORT=8000
70889,$ export FLASK_RUN_HOST=0.0.0.0
70890,
70891,$ flask run
70892," * Serving Flask app ""app.py"" (lazy loading)"
70893, * Environment: development
70894, * Debug mode: on
70895, * Running on https://0.0.0.0:8000/ (Press CTRL+C to quit)
70896, * Restarting with stat
70897, * Debugger is active!
70898, * Debugger PIN: 329-665-000
70899,.flaskenv
70900,FLASK_APP=app.py
70901,FLASK_ENV=development
70902,FLASK_RUN_HOST=[dev-host-ip]
70903,FLASK_RUN_PORT=5000
70904,pip install python-dotenv
70905,.flaskenv
70906,flask run
70907,netstat -ano | grep <port>
70908,netstat -ano | grep <port>
70909,::
70910,0.0.0.0
70911,telnet host port
70912,connect to ...
70913,tcpdump -i any port <port> -w w.pcap
70914,iptables --list
70915,import os
70916,"if __name__ == ""__main__"":"
70917,"    port = int(os.environ.get(""PORT"", 5000))"
70918,"    app.run(host='0.0.0.0', port=port)"
70919,"app.run(host='0.0.0.0', port=80)"
70920,Button
70921,import Tkinter as Tk
70922,win = Tk.Toplevel()
70923,"frame = Tk.Frame(master=win).grid(row=1, column=1)"
70924,"button = Tk.Button(master=frame, text='press', command=action)"
70925,action
70926,action
70927,"button = Tk.Button(master=frame, text='press', command=action(someNumber))"
70928,lambdas
70929,"button = Tk.Button(master=frame, text='press', command= lambda: action(someNumber))"
70930,partial
70931,"""This just invokes the method immediately, and pressing the button does nothing"""
70932,callback=lambda x=x: f(x)
70933,fs = [lambda x=x: x*2 for x in range(5)] ; print [f() for f in fs]
70934,partial
70935,from functools import partial
70936,#(...)
70937,"action_with_arg = partial(action, arg)"
70938,"button = Tk.Button(master=frame, text='press', command=action_with_arg)"
70939,"button = Tk.Button(master=frame, text='press', command=partial(action, arg))"
70940,"action_with_args = partial(action, arg1, arg2... argN)"
70941,arg
70942,import tkinter as tk
70943,
70944,root = tk.Tk()
70945,
70946,"btn = tk.Button(root, text=""Press"")"
70947,btn.pack()
70948,
70949,root.mainloop()
70950,btn
70951,button_press_handle
70952,def button_press_handle(callback=None):
70953,    if callback:
70954,        callback() # Where exactly the method assigned to btn['command'] is being callled
70955,button_press_handle(btn['command'])
70956,command
70957,callback
70958,button_press_handle
70959,print
70960,btn['command'] = print # default to print is new line
70961,()
70962,print
70963,print
70964,print
70965,"btn['command'] = lambda arg1=""Hello"", arg2="" "", arg3=""World!"" : print(arg1 + arg2 + arg3)"
70966,lambda
70967,multiple_methods
70968,def multiple_methods():
70969,"    print(""Vicariously"") # the first inner callback"
70970,"    print(""I"") # another inner callback"
70971,lambda
70972,"def multiple_methods(*args, **kwargs):"
70973,    print(args[0]) # the first inner callback
70974,    print(kwargs['opt1']) # another inner callback
70975,"btn['command'] = lambda arg=""live"", kw=""as the"" : a_new_method(arg, opt1=kw)"
70976,callback
70977,return
70978,button_press_handle
70979,callback()
70980,return callback()
70981,return
70982,btn
70983,import tkinter as tk
70984,
70985,i = 0
70986,def text_mod():
70987,"    global i, btn           # btn can be omitted but not sure if should be"
70988,"    txt = (""Vicariously"", ""I"", ""live"", ""as"", ""the"", ""whole"", ""world"", ""dies"")"
70989,    btn['text'] = txt[i]    # the global object that is modified
70990,    i = (i + 1) % len(txt)  # another global object that gets modified
70991,
70992,root = tk.Tk()
70993,
70994,"btn = tk.Button(root, text=""My Button"")"
70995,btn['command'] = text_mod
70996,
70997,"btn.pack(fill='both', expand=True)"
70998,
70999,root.mainloop()
71000,import tkinter as tk
71001,    
71002,def callback(text):
71003,    print(text)
71004,
71005,top = tk.Tk()
71006,"Texts=[""text1"", ""text2"", ""text3""]"
71007,Buttons=[]
71008,
71009,"for i, z in enumerate(Texts):"
71010,"    Buttons.append(tk.Button(top, text=z, command= lambda ztemp=z : callback(ztemp)))"
71011,"    Buttons[i].pack(side=tk.LEFT, padx=5)"
71012,
71013,top.mainloop()
71014,"def fce(x=myX, y=myY):"
71015,"    myFunction(x,y)"
71016,"button = Tk.Button(mainWin, text='press', command=fce)"
71017,"def fce(myX, myY):"
71018,"    def wrapper(x=myX, y=myY):"
71019,        pass
71020,        pass
71021,        pass
71022,        return x+y
71023,    return wrapper
71024,
71025,"button1 = Tk.Button(mainWin, text='press 1', command=fce(1,2))"
71026,"button2 = Tk.Button(mainWin, text='press 2', command=fce(3,4))"
71027,"button3 = Tk.Button(mainWin, text='press 3', command=fce(9,8))"
71028,myX
71029,myY
71030,import tkinter as tk
71031,
71032,class Callback:
71033,"    def __init__(self, func, *args, **kwargs):"
71034,        self.func = func
71035,        self.args = args
71036,        self.kwargs = kwargs
71037,    def __call__(self):
71038,"        self.func(*self.args, **self.kwargs)"
71039,
71040,def default_callback(t):
71041,"    print(""Button '{}' pressed."".format(t))"
71042,
71043,root = tk.Tk()
71044,
71045,"buttons = [""A"", ""B"", ""C""]"
71046,
71047,"for i, b in enumerate(buttons):"
71048,"    tk.Button(root, text=b, command=Callback(default_callback, b)).grid(row=i, column=0)"
71049,
71050,tk.mainloop()
71051,import tkinter as tk
71052,
71053,root = tk.Tk()
71054,def go(text):
71055,    print(text)
71056,
71057,"b = tk.Button(root, text=""Click"", command=lambda: go(""hello""))"
71058,b.pack()
71059,root.mainloop()
71060,hello
71061,button
71062,lambda
71063,"button['command'] = lambda arg1 = local_var1, arg2 = local_var2 : function(arg1, arg2)"
71064,"button = Tk.Button(master=frame, text='press', command=lambda: action(someNumber))"
71065,action(somenumber)
71066,action
71067,None
71068,action
71069,None
71070,import Tkinter as Tk
71071,
71072,"frame = Tk.Frame(width=5, height=2, bd=1, relief=Tk.SUNKEN)"
71073,"frame.grid(row=2,column=2)"
71074,"frame.pack(fill=Tk.X, padx=5, pady=5)"
71075,def action():
71076,    global output
71077,    global variable
71078,"    output.insert(Tk.END,variable.get())"
71079,"button = Tk.Button(master=frame, text='press', command=action)"
71080,button.pack()
71081,variable = Tk.Entry(master=frame)
71082,variable.pack()
71083,output = Tk.Text(master=frame)
71084,output.pack()
71085,
71086,if __name__ == '__main__':
71087,    Tk.mainloop()
71088,class
71089,import Tkinter as Tk
71090,class Window:
71091,    def __init__(self):
71092,"        self.frame = Tk.Frame(width=5, height=2, bd=1, relief=Tk.SUNKEN)"
71093,"        self.frame.grid(row=2,column=2)"
71094,"        self.frame.pack(fill=Tk.X, padx=5, pady=5)"
71095,
71096,"        self.button = Tk.Button(master=self.frame, text='press', command=self.action)"
71097,        self.button.pack()
71098,
71099,        self.variable = Tk.Entry(master=self.frame)
71100,        self.variable.pack()
71101,
71102,        self.output = Tk.Text(master=self.frame)
71103,        self.output.pack()
71104,
71105,    def action(self):
71106,"        self.output.insert(Tk.END,self.variable.get())"
71107,
71108,if __name__ == '__main__':
71109,    window = Window()
71110,    Tk.mainloop()
71111,"button = Tk.Button(master=frame, text='press', command=lambda: action(someNumber))"
71112,import tkinter as tk
71113,"def function1(param1, param2):"
71114,    print(str(param1) + str(param2))
71115,
71116,"var1 = ""Hello """
71117,"var2 = ""World!"""
71118,def function2():
71119,"    function1(var1, var2)"
71120,
71121,root = tk.Tk()
71122,
71123,"myButton = tk.Button(root, text=""Button"", command=function2)"
71124,root.mainloop()
71125,var1
71126,var2
71127,function1
71128,print
71129,function2
71130,root = Tk()
71131,
71132,"dct = {""1"": [*args], ""2"": [*args]}"
71133,def keypress(event):
71134,    *args = dct[event.char]
71135,    for arg in args:
71136,        pass
71137,for i in range(10):
71138,"    root.bind(str(i), keypress)"
71139,event.char
71140,"button = Tk.Button(master=frame, text='press',command=lambda: action(someNumber))"
71141,event1 = Entry(master)
71142,"button1 = Button(master, text=""OK"", command=lambda: test_event(event1.get()))"
71143,
71144,def test_event(event_text):
71145,    if not event_text:
71146,"        print(""Nothing entered"")"
71147,    else:
71148,        print(str(event_text))
71149,        #  do stuff
71150,for entry in stuff_that_is_happening:
71151,    value_store[entry] = stuff_that_is_happening
71152,button... command: lambda: value_store[1]
71153,class Function_Wrapper():
71154,"    def __init__(self, x, y, z):"
71155,"        self.x, self.y, self.z = x, y, z"
71156,    def func(self):
71157,        return self.x + self.y + self.z # execute function
71158,"instance1 = Function_Wrapper(x, y, z)"
71159,"button1  = Button(master, text = ""press"", command = instance1.func)"
71160,instance1.x = 3
71161,lambda:
71162,"button = Tk.Button(master=frame, text='press', command=lambda: action(someNumber))"
71163,"def cmd_wui(argv, path_to_tx):"
71164,"    """"""Run a web UI."""""""
71165,"    from flask import Flask, flash, jsonify, render_template, request"
71166,    import webbrowser
71167,    app = Flask(__name__)
71168,
71169,
71170,    @app.route('/tx/index/')
71171,    def index():
71172,"        """"""Load start page where you select your project folder"
71173,"        or load history projects from local DB."""""""
71174,        from txclib import get_version
71175,        txc_version = get_version()
71176,        prj = project.Project(path_to_tx)
71177,
71178,        # Let's create a resource list from our config file
71179,        res_list = []
71180,        prev_proj = ''
71181,"        for idx, res in enumerate(prj.get_resource_list()):"
71182,                hostname = prj.get_resource_host(res)
71183,"        username, password = prj.getset_host_credentials(hostname)"
71184,"        return render_template('init.html', txc_version=txc_version, username=username)"
71185,<form>
71186,"<input type=""text"" id=""projectFilepath"" size=""40"" placeholder=""Spot your project files"">"
71187,"<input type=""button"" id=""spotButton"" value=""Spot"">"
71188,</form>
71189,form
71190,action
71191,url_for
71192,"method=""post"""
71193,get
71194,request.args
71195,"enctype=""multipart/form-data"""
71196,input
71197,name
71198,request.form
71199,name
71200,request.files
71201,"@app.route('/handle_data', methods=['POST'])"
71202,def handle_data():
71203,    projectpath = request.form['projectFilepath']
71204,    # your code
71205,    # return a response
71206,action
71207,url_for
71208,"<form action=""{{ url_for('handle_data') }}"" method=""post"">"
71209,"    <input type=""text"" name=""projectFilepath"">"
71210,"    <input type=""submit"">"
71211,</form>
71212,form
71213,from flask import request
71214,
71215,"@app.route('/addRegion', methods=['POST'])"
71216,def addRegion():
71217,    ...
71218,    return (request.form['projectFilePath'])
71219,   
71220,"<form action=""{{ url_for('addRegion') }}"" method=""post"">"
71221,"    Project file path: <input type=""text"" name=""projectFilePath""><br>"
71222,"    <input type=""submit"" value=""Submit"">"
71223,</form>
71224,findUniqueWords
71225,list
71226,def findUniqueWords(theList):
71227,    newList = []
71228,    words = []
71229,
71230,    # Read a line at a time
71231,    for item in theList:
71232,
71233,        # Remove any punctuation from the line
71234,        cleaned = cleanUp(item)
71235,
71236,        # Split the line into separate words
71237,        words = cleaned.split()
71238,
71239,        # Evaluate each word
71240,        for word in words:
71241,
71242,            # Count each unique word
71243,            if word not in newList:
71244,                newList.append(word)
71245,
71246,    answer = newList.sort()
71247,    return answer
71248,theSet= set(theList)
71249,theList = list(theSet)
71250,theSet' into a sorted list with 
71251,list.sort
71252,newList.sort()
71253,return newList
71254,return sorted(newList)
71255,a.append('x')
71256,a.extend('x)
71257,sort()
71258,.sort()
71259,sorted()
71260,l = ['1']; l = sorted(l.append('2'))
71261,sort
71262,print(newList.sort())
71263,None
71264,newList.sort()
71265,print(newList)
71266,b = a.sort()
71267,b.pop()
71268,a
71269,.sort
71270,a
71271,a
71272,None
71273,sorted
71274,list
71275,list
71276,alist.sort()
71277,alist
71278,answer = newList.sort()
71279,sort
71280,answer = sorted(newList)
71281,list.sort()
71282,sorted(list)
71283,self
71284, x.compress().chop(y).sort(z)
71285,  x.compress()
71286,  x.chop(y)
71287,  x.sort(z)
71288," y = x.rstrip(""\n"").split("":"").lower()"
71289,"split("":"").lower()"
71290,split
71291,lower
71292,l
71293,l.sort()
71294,">>> l = [1, 5, 2341, 467, 213, 123]"
71295,>>> l.sort()
71296,>>> l
71297,"[1, 5, 123, 213, 467, 2341]"
71298,l.sort()
71299,">>> l = [1, 5, 2341, 467, 213, 123]"
71300,>>> r = l.sort()
71301,>>> print(r)
71302,None
71303,r
71304,sorted()
71305,l
71306,l
71307,">>> l = [1, 5, 2341, 467, 213, 123]"
71308,>>> r = sorted(l)
71309,>>> l
71310,"[1, 5, 2341, 467, 213, 123]"
71311,>>> r
71312,"[1, 5, 123, 213, 467, 2341]"
71313,">>> spam = [8, 2, 4, 7]"
71314,">>> eggs = [3, 1, 4, 5]"
71315,">>> l = [spam, eggs]"
71316,>>> r = sorted(l)
71317,>>> l
71318,"[[8, 2, 4, 7], [3, 1, 4, 5]]"
71319,>>> r
71320,"[[3, 1, 4, 5], [8, 2, 4, 7]]"
71321,>>> spam.sort()
71322,>>> eggs.sort()
71323,>>> l
71324,"[[2, 4, 7, 8], [1, 3, 4, 5]]"
71325,>>> r
71326,"[[1, 3, 4, 5], [2, 4, 7, 8]]"
71327,lst.sort()
71328,sorted(lst)
71329,None
71330,list.sort
71331,list.append
71332,random.shuffle
71333,sorted
71334,answer = newList.sort()
71335,return  newList.sort()
71336,"list.sort(key=..., reverse=...)"
71337,"sorted(list, key=..., reverse=...)"
71338,answer = sorted(newList)
71339,None
71340,myList.sort()
71341,myString = myString.strip()
71342,l1 = []
71343,n = int(input())
71344,
71345,for i in range(n):
71346,  user = int(input())
71347,  l1.append(user)
71348,"sorted(l1,reverse=True)"
71349,l1 = []
71350,n = int(input())
71351,
71352,for i in range(n):
71353,  user = int(input())
71354,  l1.append(user)
71355,l1.sort(reverse=True)
71356,print(l1)
71357,dict
71358,get
71359,dict[key]
71360,"dictionary = {""Name"": ""Harry"", ""Age"": 17}"
71361,"dictionary[""Name""]"
71362,"dictionary.get(""Name"")"
71363,"dictionary.get(""bogus"", default_value)"
71364,default_value
71365,"dictionary[""bogus""]"
71366,KeyError
71367,default_value
71368,None
71369,"dictionary.get(""bogus"")  # <-- No default specified -- defaults to None"
71370,None
71371,"dictionary.get(""bogus"", None)"
71372,"dictionary.get(""bogus"") or my_default"
71373,"""bogus"""
71374,dictionary
71375,"dictionary.get(""bogus"")"
71376,''
71377,"dictionary.get(""bogus"") or my_default"
71378,my_default
71379,"dictionary.get(""bogus"", my_default)"
71380,"dictionary.get(""bogus"") or my_default"
71381,"dictionary.get(""bogus"", my_default)"
71382,x = {'a':0}
71383,"x.get('a', 'foo')"
71384,0
71385,x.get('a') or 'foo'
71386,'foo'
71387,dictionary.get('key')
71388,None
71389,None
71390,try-except-KeyError
71391,dict.get()
71392,get
71393,"get(key[, default])"
71394,KeyError
71395,">>> d = {1:2,2:3}"
71396,>>> d[1]
71397,2
71398,>>> d.get(1)
71399,2
71400,>>> d.get(3)
71401,>>> repr(d.get(3))
71402,'None'
71403,">>> d.get(3,1)"
71404,1
71405,get
71406,def getway(d):
71407,    for i in range(100):
71408,        s = d.get(i)
71409,
71410,def lookup(d):
71411,    for i in range(100):
71412,        s = d[i]
71413,timeit
71414,>>> import timeit
71415,">>> print(timeit.timeit(""getway({i:i for i in range(100)})"",""from __main__ import getway""))"
71416,20.2124660015
71417,">>> print(timeit.timeit(""lookup({i:i for i in range(100)})"",""from __main__ import lookup""))"
71418,16.16223979
71419,dis
71420,">>> def lookup(d,val):"
71421,...     return d[val]
71422,... 
71423,">>> def getway(d,val):"
71424,...     return d.get(val)
71425,... 
71426,>>> dis.dis(getway)
71427,  2           0 LOAD_FAST                0 (d)
71428,              3 LOAD_ATTR                0 (get)
71429,              6 LOAD_FAST                1 (val)
71430,              9 CALL_FUNCTION            1
71431,             12 RETURN_VALUE        
71432,>>> dis.dis(lookup)
71433,  2           0 LOAD_FAST                0 (d)
71434,              3 LOAD_FAST                1 (val)
71435,              6 BINARY_SUBSCR       
71436,              7 RETURN_VALUE  
71437, if key in dic:
71438,      val = dic[key]
71439, else:
71440,      val = def_val
71441,"val = dic.get(key,def_val)"
71442,KeyError
71443,get
71444,dict['key']
71445,__missing__
71446,class MyDict(dict):
71447,"    def __missing__(self, key):"
71448,        return None
71449,">>> my_d = MyDict({1:2,2:3})"
71450,>>> my_d[1]
71451,2
71452,>>> my_d[3]
71453,>>> repr(my_d[3])
71454,'None'
71455,if k in dict and dict[k]:
71456,if dict.get(k):
71457,"dict = {1: '', 2: 'some value'}"
71458,"dictionary.get(value, long_function())"
71459,dictionary.get(value) or long_function()
71460,None
71461,dictionary.get()
71462,collections
71463,defaultdict
71464,get
71465,"dictionary = {""Name"": ""Harry"", ""Age"": 17}"
71466,"dictionary.get('Year', 'No available data')"
71467,>> 'No available data'
71468,None
71469,dictionary['Year']
71470,KeyError
71471,.get()
71472,.get()
71473,None
71474,.get()
71475,None
71476,None
71477,'alt_value'
71478,d = {'key': None}
71479,"assert None is d.get('key', 'alt_value')"
71480,.get()
71481,None
71482,d.get('key') or 'alt_value'
71483,None
71484,"{""bids"":{""id"":16210506,""submitdate"":""2011-10-16 15:53:25"",""submitdate_f"":""10\/16\/2011 at 21:53 CEST"",""submitdate_f2"":""p\u0159ed 2 lety"",""submitdate_ts"":1318794805,""users_id"":""2674360"",""project_id"":""1250499""}}"
71485,"{""bids"":{""id"":16210506,""submitdate"":""2011-10-16 15:53:25"",""submitdate_f"":""10\/16\/2011 at 21:53 CEST"",""submitdate_f2"":""p\u0159ed 2 lety"",""users_id"":""2674360"",""project_id"":""1250499""}}"
71486,for item in API_call:
71487,"    submitdate_ts = item[""bids""][""submitdate_ts""]"
71488,for item in API_call:
71489,"    submitdate_ts = item.get(""bids"", {'x': None}).get(""submitdate_ts"")"
71490,"dictionary.get(""Name"",'harry')"
71491,"fruits = ['apple', 'banana', 'peach', 'apple', 'pear']"
71492,d = {}
71493,for fruit in fruits:
71494,    if fruit not in d:
71495,        d[fruit] = 0
71496,    d[fruit] += 1
71497,.get()
71498,for fruit in fruits:
71499,"    d[fruit] = d.get(fruit, 0) + 1"
71500,d = defaultdict(int)
71501,d[fruit] += 1
71502,collections.Counter
71503,defaultdict
71504,.get
71505,Counter
71506,defaultdict
71507,dict
71508,.get
71509,None
71510,.get
71511,KeyError
71512,.get
71513,KeyError
71514,try
71515,except
71516,if
71517,None
71518,.get
71519,if key in dct:
71520,try
71521,except
71522,.get
71523,try
71524,except: pass
71525,"1 + ""a"""
71526,.get
71527,None
71528,.get
71529,.get
71530,None
71531,.get
71532,if val is not None:
71533,try
71534,None
71535,.get
71536,.get
71537,ArrayList
71538,Lists
71539,at
71540,fetch
71541,TryGetValue
71542,get
71543,.get
71544,.get
71545,python In [1]: from collections import defaultdict  In [2]: d = defaultdict(list)  In [3]: print(d.get('b')) None  In [4]: print(d['b']) [] 
71546,defaultdict
71547,dict[key]
71548,dict.get
71549,"d = {""Name"": ""Harry"", ""Age"": 17}"
71550,In [4]: d['gender']
71551,KeyError: 'gender'
71552,"In [5]: d.get('gender', 'Not specified, please add it')"
71553,"Out[5]: 'Not specified, please add it'"
71554,default value
71555,def get_harry_info(key):
71556,    try:
71557,"        return ""{}"".format(d[key])"
71558,    except KeyError:
71559,"        return 'Not specified, please add it'"
71560,In [9]: get_harry_info('Name')
71561,Out[9]: 'Harry'
71562,In [10]: get_harry_info('Gender')
71563,"Out[10]: 'Not specified, please add it'"
71564,dict.get
71565,dict.get
71566,"print(dictionary.get(""address"")) # None"
71567,"print(dictionary[""address""]) # throws KeyError: 'address'"
71568,score = None
71569,try:
71570,"    score = dictionary[""score""]"
71571,except KeyError:
71572,    score = 0
71573,"score = dictionary.get(""score"", 0)"
71574,# score = 0
71575,key
71576,sorted
71577,max
71578,min
71579,get
71580,">>> ages = {""Harry"": 17, ""Lucy"": 16, ""Charlie"": 18}"
71581,">>> print(sorted(ages, key=ages.get))"
71582,"['Lucy', 'Harry', 'Charlie']"
71583,">>> print(max(ages, key=ages.get))"
71584,Charlie
71585,">>> print(min(ages, key=ages.get))"
71586,Lucy
71587,class dictionary():
71588,"    def get(self,key,default):"
71589,         if self[key] is not found : 
71590,               return default
71591,         else:
71592,               return self[key]
71593,if self[key] is not found :
71594,KeyError
71595,get()
71596,__getitem__
71597,get()
71598,try:
71599,    v = d[k]
71600,except KeyError:
71601,    v = default_value  
71602,import *
71603,import *
71604,using package.module;
71605,pyflakes
71606,numpy.any
71607,any
71608,from numpy import *
71609,import *
71610,import
71611,import
71612,**locals()
71613,self
71614,import *
71615,"import os, sys, foo, sqlalchemy, mystuff"
71616,from bar import *
71617,os
71618,mystuff
71619,__all__
71620,import *
71621,import *
71622,execfile()
71623,**vars()
71624,def myFunc():
71625,    print 1
71626,from foo import *
71627,
71628,def doThis():
71629,    myFunc() # Which myFunc is called?
71630,
71631,def myFunc():
71632,    print 2
71633,from ... import *
71634,doctest
71635,import *
71636,import ElementTree as etree
71637,from lxml import etree
71638,from foo import *
71639,const.py
71640,import const
71641,const.SOMETHING
71642,"from const import SOMETHING_A, SOMETHING_B ..."
71643,from const import *
71644,*
71645,import *
71646,import *
71647,from local_module import *
71648,from mcpi.block import *
71649,from mcpi import block
71650,walls = block.
71651,from module1 import *
71652,from module2 import *
71653,from module3 import *
71654,
71655,a = b + c - d
71656,b
71657,c
71658,d
71659,#                   v  v  will know that these are from module1
71660,"from module1 import b, c   # way 1"
71661,import module2             # way 2
71662,
71663,a = b + c - module2.d
71664,#            ^ will know it is from module2
71665,module1
71666,module2
71667,b
71668,from module1 import *
71669,from module2 import *
71670,
71671,print b  # will print the value from module2
71672,module1
71673,b
71674,module1
71675,module1.b
71676,from module1 import b as mod1b
71677,from module2 import b as mod2b
71678,import test
71679,import importlib
71680,importlib.reload(test)
71681,from test import *
71682,import test
71683,import test as tt
71684,from test import *
71685,importlib.reload(test)    # Error - name 'test' is not defined
71686,from module import *
71687,import *
71688,*
71689,from package import *
71690,__init__.py
71691,import
71692,__init__.py
71693,__all__
71694,from package import *
71695,__all__
71696,sound/effects/__init__.py
71697,# anywhere in the code before import *
71698,import sound.effects.echo
71699,import sound.effects.surround
71700,
71701,# in your module
71702,from sound.effects import *
71703,echo
71704,surround
71705,sound.effects
71706,import
71707,property
71708,property
71709,class C:
71710,    def __init__(self):
71711,        self._x = None
71712,
71713,    def getx(self):
71714,        return self._x
71715,"    def setx(self, value):"
71716,        self._x = value
71717,    def delx(self):
71718,        del self._x
71719,"    x = property(getx, setx, delx, ""I'm the 'x' property."")"
71720,property
71721,getx
71722,setx
71723,delx
71724,property
71725,x
71726,class C:
71727,    def __init__(self):
71728,        self._x = None
71729,
71730,    @property
71731,    def x(self):
71732,"        """"""I'm the 'x' property."""""""
71733,        return self._x
71734,
71735,    @x.setter
71736,"    def x(self, value):"
71737,        self._x = value
71738,
71739,    @x.deleter
71740,    def x(self):
71741,        del self._x
71742,x.setter
71743,x.deleter
71744,property
71745,__init__()
71746,help(property)
71747,help
71748,property()
71749,>>> property()
71750,<property object at 0x10ff07940>
71751,>>> property().getter
71752,<built-in method getter of property object at 0x10ff07998>
71753,>>> property().setter
71754,<built-in method setter of property object at 0x10ff07940>
71755,>>> property().deleter
71756,<built-in method deleter of property object at 0x10ff07998>
71757,>>> property().getter(None)
71758,<property object at 0x10ff079f0>
71759,@decorator
71760,@property
71761,def foo(self): return self._foo
71762,def foo(self): return self._foo
71763,foo = property(foo)
71764,foo
71765,property(foo)
71766,@foo.setter()
71767,property().setter
71768,property
71769,>>> def getter(self): print('Get!')
71770,... 
71771,">>> def setter(self, value): print('Set to {!r}!'.format(value))"
71772,... 
71773,>>> def deleter(self): print('Delete!')
71774,... 
71775,>>> prop = property(getter)
71776,>>> prop.fget is getter
71777,True
71778,>>> prop.fset is None
71779,True
71780,>>> prop.fdel is None
71781,True
71782,.setter()
71783,>>> prop = prop.setter(setter)
71784,>>> prop.fget is getter
71785,True
71786,>>> prop.fset is setter
71787,True
71788,>>> prop.fdel is None
71789,True
71790,.deleter()
71791,>>> prop = prop.deleter(deleter)
71792,>>> prop.fget is getter
71793,True
71794,>>> prop.fset is setter
71795,True
71796,>>> prop.fdel is deleter
71797,True
71798,property
71799,.__get__()
71800,.__set__()
71801,.__delete__()
71802,>>> class Foo: pass
71803,... 
71804,">>> prop.__get__(Foo(), Foo)"
71805,Get!
71806,">>> prop.__set__(Foo(), 'bar')"
71807,Set to 'bar'!
71808,>>> prop.__delete__(Foo())
71809,Delete!
71810,property()
71811,class Property:
71812,"    ""Emulate PyProperty_Type() in Objects/descrobject.c"""
71813,
71814,"    def __init__(self, fget=None, fset=None, fdel=None, doc=None):"
71815,        self.fget = fget
71816,        self.fset = fset
71817,        self.fdel = fdel
71818,        if doc is None and fget is not None:
71819,            doc = fget.__doc__
71820,        self.__doc__ = doc
71821,
71822,"    def __get__(self, obj, objtype=None):"
71823,        if obj is None:
71824,            return self
71825,        if self.fget is None:
71826,"            raise AttributeError(""unreadable attribute"")"
71827,        return self.fget(obj)
71828,
71829,"    def __set__(self, obj, value):"
71830,        if self.fset is None:
71831,"            raise AttributeError(""can't set attribute"")"
71832,"        self.fset(obj, value)"
71833,
71834,"    def __delete__(self, obj):"
71835,        if self.fdel is None:
71836,"            raise AttributeError(""can't delete attribute"")"
71837,        self.fdel(obj)
71838,
71839,"    def getter(self, fget):"
71840,"        return type(self)(fget, self.fset, self.fdel, self.__doc__)"
71841,
71842,"    def setter(self, fset):"
71843,"        return type(self)(self.fget, fset, self.fdel, self.__doc__)"
71844,
71845,"    def deleter(self, fdel):"
71846,"        return type(self)(self.fget, self.fset, fdel, self.__doc__)"
71847,Foo.prop = prop
71848,Foo().prop = 5; pront Foo().prop; del Foo().prop
71849,type()
71850,@human.name.getter
71851,property
71852,human.name
71853,@property
71854,def x(self):
71855,    return self._x
71856,def getx(self):
71857,    return self._x
71858,x = property(getx)
71859,@property
71860,obj._x = 5
71861,obj.x = 5
71862,tuple
71863,tuple
71864,collections.namedtuple
71865,typing.NamedTuple
71866,@property
71867,class Thing:
71868,"    def __init__(self, my_word):"
71869,        self._word = my_word 
71870,    @property
71871,    def word(self):
71872,        return self._word
71873,
71874,>>> print( Thing('ok').word )
71875,'ok'
71876,word
71877,class Thing:
71878,"    def __init__(self, my_word):"
71879,        self._word = my_word
71880,    def word(self):
71881,        return self._word
71882,
71883,>>> print( Thing('ok').word() )
71884,'ok'
71885,self.word = my_word
71886,print( Thing('ok').word ) = 'ok'
71887,Thing('ok').word
71888,@property
71889,def x(self): ...
71890,def x(self): ...
71891,x = property(x)
71892,property
71893,@x.setter
71894,"def x(self, value): ..."
71895,x
71896,x.deleter
71897,@property
71898,Money
71899,class Money:
71900,"    def __init__(self, dollars, cents):"
71901,        self.dollars = dollars
71902,        self.cents = cents
71903,"money = Money(27, 12)"
71904,
71905,"print(""I have {} dollar and {} cents."".format(money.dollars, money.cents))"
71906,# prints I have 27 dollar and 12 cents.
71907,Money
71908,dollars
71909,cents
71910,class Money:
71911,"    def __init__(self, dollars, cents):"
71912,        self.total_cents = dollars * 100 + cents
71913,"money = Money(27, 12)"
71914,
71915,"print(""I have {} dollar and {} cents."".format(money.dollars, money.cents))"
71916,Money
71917,dollars
71918,cents
71919,@property
71920,class Money:
71921,"    def __init__(self, dollars, cents):"
71922,        self.total_cents = dollars * 100 + cents
71923,
71924,    # Getter and setter for dollars...
71925,    @property
71926,    def dollars(self):
71927,        return self.total_cents // 100
71928,
71929,    @dollars.setter
71930,"    def dollars(self, new_dollars):"
71931,        self.total_cents = 100 * new_dollars + self.cents
71932,
71933,    # And the getter and setter for cents.
71934,    @property
71935,    def cents(self):
71936,        return self.total_cents % 100
71937,
71938,    @cents.setter
71939,"    def cents(self, new_cents):"
71940,        self.total_cents = 100 * self.dollars + new_cents
71941,"money = Money(27, 12)"
71942,
71943,"print(""I have {} dollar and {} cents."".format(money.dollars, money.cents))"
71944,# prints I have 27 dollar and 12 cents.
71945,setter
71946,money.dollars += 2
71947,"print(""I have {} dollar and {} cents."".format(money.dollars, money.cents))"
71948,# prints I have 29 dollar and 12 cents.
71949,
71950,money.cents += 10
71951,"print(""I have {} dollar and {} cents."".format(money.dollars, money.cents))"
71952,# prints I have 29 dollar and 22 cents.
71953,@property
71954,self.dollar = dollars
71955,class C(object):
71956,    def __init__(self):
71957,        self._x = None
71958,
71959,    @property
71960,    def x(self):
71961,"        """"""I'm the 'x' property."""""""
71962,        return self._x
71963,
71964,    @x.setter
71965,"    def x(self, value):"
71966,        self._x = value
71967,
71968,    @x.deleter
71969,    def x(self):
71970,        del self._x
71971,class C(object):
71972,    def __init__(self):
71973,        self._x = None
71974,
71975,    def _x_get(self):
71976,        return self._x
71977,
71978,"    def _x_set(self, value):"
71979,        self._x = value
71980,
71981,    def _x_del(self):
71982,        del self._x
71983,
71984,"    x = property(_x_get, _x_set, _x_del, "
71985,"                    ""I'm the 'x' property."")"
71986,class C(object):
71987,    def __init__(self):
71988,        self._x = None
71989,
71990,    def _x_get(self):
71991,        return self._x
71992,
71993,"    def _x_set(self, value):"
71994,        self._x = value
71995,
71996,    def _x_del(self):
71997,        del self._x
71998,
71999,"    x = property(_x_get, doc=""I'm the 'x' property."")"
72000,    x = x.setter(_x_set)
72001,    x = x.deleter(_x_del)
72002,class C(object):
72003,    def __init__(self):
72004,        self._x = None
72005,
72006,    def _x_get(self):
72007,        return self._x
72008,"    x = property(_x_get, doc=""I'm the 'x' property."")"
72009,
72010,"    def _x_set(self, value):"
72011,        self._x = value
72012,    x = x.setter(_x_set)
72013,
72014,    def _x_del(self):
72015,        del self._x
72016,    x = x.deleter(_x_del)
72017,class C(object):
72018,    def __init__(self):
72019,        self._x = None
72020,
72021,    @property
72022,    def x(self):
72023,"        """"""I'm the 'x' property."""""""
72024,        return self._x
72025,
72026,    @x.setter
72027,"    def x(self, value):"
72028,        self._x = value
72029,
72030,    @x.deleter
72031,    def x(self):
72032,        del self._x
72033,def decorator_func(fun):
72034,    def wrapper_func():
72035,"        print(""Wrapper function started"")"
72036,        fun()
72037,"        print(""Given function decorated"")"
72038,        # Wrapper function add something to the passed function and decorator 
72039,        # returns the wrapper function
72040,    return wrapper_func
72041,
72042,def say_bye():
72043,"    print(""bye!!"")"
72044,
72045,say_bye = decorator_func(say_bye)
72046,say_bye()
72047,
72048,# Output:
72049,#  Wrapper function started
72050,#  bye!!
72051,#  Given function decorated
72052, 
72053,def decorator_func(fun):
72054,    def wrapper_func():
72055,"        print(""Wrapper function started"")"
72056,        fun()
72057,"        print(""Given function decorated"")"
72058,        # Wrapper function add something to the passed function and decorator 
72059,        # returns the wrapper function
72060,    return wrapper_func
72061,
72062,@decorator_func
72063,def say_bye():
72064,"    print(""bye!!"")"
72065,
72066,say_bye()
72067,class Celsius:
72068,"def __init__(self, temperature = 0):"
72069,    self.set_temperature(temperature)
72070,
72071,def to_fahrenheit(self):
72072,    return (self.get_temperature() * 1.8) + 32
72073,
72074,def get_temperature(self):
72075,    return self._temperature
72076,
72077,"def set_temperature(self, value):"
72078,    if value < -273:
72079,"        raise ValueError(""Temperature below -273 is not possible"")"
72080,    self._temperature = value
72081,class Celsius:
72082,"def __init__(self, temperature = 0):"
72083,    self.temperature = temperature
72084,
72085,def to_fahrenheit(self):
72086,    return (self.temperature * 1.8) + 32
72087,
72088,def get_temperature(self):
72089,"    print(""Getting value"")"
72090,    return self.temperature
72091,
72092,"def set_temperature(self, value):"
72093,    if value < -273:
72094,"        raise ValueError(""Temperature below -273 is not possible"")"
72095,"    print(""Setting value"")"
72096,    self.temperature = value
72097,
72098,"temperature = property(get_temperature,set_temperature)"
72099,"temperature = property(get_temperature,set_temperature)"
72100,# make empty property
72101,temperature = property()
72102,# assign fget
72103,temperature = temperature.getter(get_temperature)
72104,# assign fset
72105,temperature = temperature.setter(set_temperature)
72106,C = Celsius()
72107,C.temperature
72108,# instead of writing C.get_temperature()
72109,class Celsius:
72110,"    def __init__(self, temperature = 0):"
72111,        self.temperature = temperature
72112,
72113,    def to_fahrenheit(self):
72114,        return (self.temperature * 1.8) + 32
72115,
72116,    @property
72117,    def temperature(self):
72118,"        print(""Getting value"")"
72119,        return self.temperature
72120,
72121,    @temperature.setter
72122,"    def temperature(self, value):"
72123,        if value < -273:
72124,"            raise ValueError(""Temperature below -273 is not possible"")"
72125,"        print(""Setting value"")"
72126,        self.temperature = value
72127,class OurClass:
72128,
72129,"    def __init__(self, a):"
72130,        self.x = a
72131,
72132,
72133,y = OurClass(10)
72134,print(y.x)
72135,class OurClass:
72136,
72137,"    def __init__(self,x):"
72138,        self.x = x
72139,
72140,    @property
72141,    def x(self):
72142,        return self.__x
72143,
72144,    @x.setter
72145,"    def x(self, x):"
72146,        if x < 0:
72147,            self.__x = 0
72148,        elif x > 1000:
72149,            self.__x = 1000
72150,        else:
72151,            self.__x = x
72152,models.py
72153,"class User(UserMixin, db.Model):"
72154,    __tablename__ = 'users'
72155,"    id = db.Column(db.Integer, primary_key=True)"
72156,"    email = db.Column(db.String(64), unique=True, index=True)"
72157,"    username = db.Column(db.String(64), unique=True, index=True)"
72158,    password_hash = db.Column(db.String(128))
72159,
72160,    ...
72161,
72162,    @property
72163,    def password(self):
72164,        raise AttributeError('password is not a readable attribute')
72165,
72166,    @password.setter
72167,"    def password(self, password):"
72168,        self.password_hash = generate_password_hash(password)
72169,
72170,"    def verify_password(self, password):"
72171,"        return check_password_hash(self.password_hash, password)"
72172,password
72173,@property
72174,AttributeError
72175,password_hash
72176,auth/views.py
72177,...
72178,"@auth.route('/register', methods=['GET', 'POST'])"
72179,def register():
72180,    form = RegisterForm()
72181,    if form.validate_on_submit():
72182,"        user = User(email=form.email.data,"
72183,"                    username=form.username.data,"
72184,                    password=form.password.data)
72185,        db.session.add(user)
72186,        db.session.commit()
72187,...
72188,password
72189,"EqualTo('password', message='Passwords must match')"
72190,class UtilityMixin():
72191,    @property
72192,    def get_config(self):
72193,"        return ""This is property"""
72194,util = UtilityMixin()
72195,print(util.get_config)
72196,property
72197,@property
72198,print(property) #<class 'property'>
72199,help(property)
72200,@property
72201,class C:
72202,    def __init__(self):
72203,        self._x=None
72204,
72205,    @property 
72206,    def x(self):
72207,        return self._x
72208,
72209,    @x.setter 
72210,"    def x(self, value):"
72211,        self._x = value
72212,
72213,    @x.deleter
72214,    def x(self):
72215,        del self._x
72216,
72217,c = C()
72218,"c.x=""a"""
72219,print(c.x)
72220,property()
72221,class C:
72222,    def __init__(self):
72223,        self._x=None
72224,
72225,    def g(self):
72226,        return self._x
72227,
72228,"    def s(self, v):"
72229,        self._x = v
72230,
72231,    def d(self):
72232,        del self._x
72233,
72234,"    prop = property(g,s,d)"
72235,
72236,c = C()
72237,"c.x=""a"""
72238,print(c.x)
72239,@property
72240,property
72241,property
72242,"prop = property(g,s,d)"
72243,"prop = property(fget=g,fset=s,fdel=d)"
72244,fget
72245,fset
72246,fdel
72247, |    fget
72248, |      function to be used for getting an attribute value
72249, |    fset
72250, |      function to be used for setting an attribute value
72251, |    fdel
72252, |      function to be used for del'ing an attribute
72253, |    doc
72254, |      docstring
72255,property
72256,__get__
72257,__set__
72258,__delete__
72259,setter
72260,getter
72261,deleter
72262,s2
72263,C
72264,class C:
72265,    def __init__(self):
72266,        self._x=None
72267,
72268,    def g(self):
72269,        return self._x
72270,
72271,"    def s(self, x):"
72272,        self._x = x
72273,
72274,    def d(self):
72275,        del self._x
72276,
72277,"    def s2(self,x):"
72278,        self._x=x+x
72279,
72280,
72281,    x=property(g)
72282,    x=x.setter(s)
72283,    x=x.deleter(d)      
72284,
72285,
72286,c = C()
72287,"c.x=""a"""
72288,"print(c.x) # outputs ""a"""
72289,
72290,"C.x=property(C.g, C.s2)"
72291,C.x=C.x.deleter(C.d)
72292,c2 = C()
72293,"c2.x=""a"""
72294,"print(c2.x) # outputs ""aa"""
72295,function decorator(undecorated_func):
72296,"    print(""calling decorator func"")"
72297,    inner():
72298,"       print(""I am inside inner"")"
72299,       return undecorated_func
72300,    return inner
72301,undecorated_func
72302,decorator(undecorated_func)
72303,inner
72304,   undecorated_function= decorator(undecorated_func) 
72305,class Person:
72306,"    def __init__(self,name):"
72307,        self._name=name
72308,    @property
72309,    def name(self):
72310,        return self._name
72311,    @name.setter
72312,    def name(self.value):
72313,        self._name=value
72314,name=property(name) # Person.__dict__ you ll see name 
72315,   name=name.setter(name) 
72316,  name=property(name)
72317,  name=name.setter(name)
72318,##
72319,## Python Properties Example
72320,##
72321,class GetterSetterExample( object ):
72322,"    ## Set the default value for x ( we reference it using self.x, set a value using self.x = value )"
72323,    __x = None
72324,
72325,
72326,##
72327,## On Class Initialization - do something... if we want..
72328,##
72329,def __init__( self ):
72330,"    ## Set a value to __x through the getter / setter... Since __x is defined above, this doesn't need to be set..."
72331,    self.x = 1234
72332,
72333,    return None
72334,
72335,
72336,##
72337,"## Define x as a property, ie a getter - All getters should have a default value arg, so I added it - it will not be passed in when setting a value, so you need to set the default here so it will be used.."
72338,##
72339,@property
72340,"def x( self, _default = None ):"
72341,    ## I added an optional default value argument as all getters should have this - set it to the default value you want to return...
72342,"    _value = ( self.__x, _default )[ self.__x == None ]"
72343,
72344,    ## Debugging - so you can see the order the calls are made...
72345,    print( '[ Test Class ] Get x = ' + str( _value ) )
72346,
72347,    ## Return the value - we are a getter afterall...
72348,    return _value
72349,
72350,
72351,##
72352,## Define the setter function for x...
72353,##
72354,@x.setter
72355,"def x( self, _value = None ):"
72356,    ## Debugging - so you can see the order the calls are made...
72357,    print( '[ Test Class ] Set x = ' + str( _value ) )
72358,
72359,"    ## This is to show the setter function works.... If the value is above 0, set it to a negative value... otherwise keep it as is ( 0 is the only non-negative number, it can't be negative or positive anyway )"
72360,    if ( _value > 0 ):
72361,        self.__x = -_value
72362,    else:
72363,        self.__x = _value
72364,
72365,
72366,##
72367,## Define the deleter function for x...
72368,##
72369,@x.deleter
72370,def x( self ):
72371,    ## Unload the assignment / data for x
72372,    if ( self.__x != None ):
72373,        del self.__x
72374,
72375,
72376,##
72377,## To String / Output Function for the class - this will show the property value for each property we add...
72378,##
72379,def __str__( self ):
72380,    ## Output the x property data...
72381,    print( '[ x ] ' + str( self.x ) )
72382,
72383,
72384,"    ## Return a new line - technically we should return a string so it can be printed where we want it, instead of printed early if _data = str( C( ) ) is used...."
72385,    return '\n'
72386,
72387,##
72388,##
72389,##
72390,_test = GetterSetterExample( )
72391,print( _test )
72392,
72393,## For some reason the deleter isn't being called...
72394,del _test.x
72395,[ Test Class ] Set x = 1234
72396,[ Test Class ] Get x = -1234
72397,[ x ] -1234
72398,[ Test Class ] Get x = None
72399,[ x ] None
72400,[ Test Class ] Get x = 0
72401,[ x ] 0
72402,*
72403,zip(*x)
72404,f(**k)
72405,*
72406,**
72407,"[*a, b, *c]"
72408,"{**d1, **d2}"
72409,*
72410,"def sum(a, b):"
72411,    return a + b
72412,
72413,"values = (1, 2)"
72414,
72415,s = sum(*values)
72416,"s = sum(1, 2)"
72417,**
72418,"values = { 'a': 1, 'b': 2 }"
72419,s = sum(**values)
72420,"def sum(a, b, c, d):"
72421,    return a + b + c + d
72422,
72423,"values1 = (1, 2)"
72424,"values2 = { 'c': 10, 'd': 15 }"
72425,"s = sum(*values1, **values2)"
72426,"s = sum(1, 2, c=10, d=15)"
72427,*x
72428,**y
72429,def sum(*values):
72430,    s = 0
72431,    for v in values:
72432,        s = s + v
72433,    return s
72434,
72435,"s = sum(1, 2, 3, 4, 5)"
72436,**
72437,def get_a(**values):
72438,    return values['a']
72439,
72440,"s = get_a(a=1, b=2)      # returns 1"
72441,"def sum(*values, **options):"
72442,    s = 0
72443,    for i in values:
72444,        s = s + i
72445,"    if ""neg"" in options:"
72446,"        if options[""neg""]:"
72447,            s = -s
72448,    return s
72449,
72450,"s = sum(1, 2, 3, 4, 5)            # returns 15"
72451,"s = sum(1, 2, 3, 4, 5, neg=True)  # returns -15"
72452,"s = sum(1, 2, 3, 4, 5, neg=False) # returns 15"
72453,"s = sum((1, 2, 3, 4, 5))"
72454,"s = sum([1, 2, 3, 4, 5])"
72455,*values
72456,zip(*x)
72457,"zip(x1,x2,x3)"
72458,"x=[x1,x2,x3]"
72459,f(**k)
72460,"f(x=my_x, y=my_y)"
72461,"k = {'x':my_x, 'y':my_y}"
72462,def foo(*x)
72463,"foo(1,2,3)"
72464,x
72465,"[1,2,3]"
72466,def bar(**k)
72467,"bar(x=42, y=23)"
72468,k
72469,"{'x': 42, 'y': 23}"
72470,def foo(*x)
72471,"def add(a, b): return a + b"
72472,"tests = { (1,4):5, (0, 0):0, (-1, 3):3 }"
72473,"for test, result in tests.items():"
72474,"    print 'test: adding', test, '==', result, '---', add(*test) == result"
72475,"add(test[0], test[1])"
72476,"myFactory.make_car('red', 'bmw', '335ix')"
72477,"Car('red', 'bmw', '335ix')"
72478,def make_car(*args):
72479,    return Car(*args)
72480,apply()
72481,def is_number(s):
72482,    try:
72483,        float(s)
72484,        return True
72485,    except ValueError:
72486,        return False
72487,x = float('0.00'); if x: use_float(x);
72488,None
72489,try catch
72490,isdigit()
72491,">>> a = ""03523"""
72492,>>> a.isdigit()
72493,True
72494,">>> b = ""963spam"""
72495,>>> b.isdigit()
72496,False
72497,isdigit()
72498,isnumeric()
72499,isdigit()
72500,int()
72501,u'\u00b9'
72502,u'¹'.isdigit()
72503,True
72504,int(u'¹')
72505,try
72506,return True
72507,else
72508,try
72509,try
72510,IsNumeric()
72511,if is_number(s): x = float(x) else: // fail
72512,try: x = float(x) catch TypeError: # fail
72513,"s.replace('.','',1).isdigit()"
72514,def is_number_tryexcept(s):
72515,"    """""" Returns True is string is a number. """""""
72516,    try:
72517,        float(s)
72518,        return True
72519,    except ValueError:
72520,        return False
72521,
72522,import re    
72523,def is_number_regex(s):
72524,"    """""" Returns True is string is a number. """""""
72525,"    if re.match(""^\d+?\.\d+?$"", s) is None:"
72526,        return s.isdigit()
72527,    return True
72528,
72529,
72530,def is_number_repl_isdigit(s):
72531,"    """""" Returns True is string is a number. """""""
72532,"    return s.replace('.','',1).isdigit()"
72533,funcs = [
72534,"          is_number_tryexcept, "
72535,"          is_number_regex,"
72536,          is_number_repl_isdigit
72537,          ]
72538,
72539,a_float = '.1234'
72540,
72541,"print('Float notation "".1234"" is not supported by:')"
72542,for f in funcs:
72543,    if not f(a_float):
72544,"        print('\t -', f.__name__)"
72545,scientific1 = '1.000000e+50'
72546,scientific2 = '1e50'
72547,
72548,
72549,"print('Scientific notation ""1.000000e+50"" is not supported by:')"
72550,for f in funcs:
72551,    if not f(scientific1):
72552,"        print('\t -', f.__name__)"
72553,
72554,
72555,
72556,
72557,"print('Scientific notation ""1e50"" is not supported by:')"
72558,for f in funcs:
72559,    if not f(scientific2):
72560,"        print('\t -', f.__name__)"
72561,import timeit
72562,
72563,"test_cases = ['1.12345', '1.12.345', 'abc12345', '12345']"
72564,times_n = {f.__name__:[] for f in funcs}
72565,
72566,for t in test_cases:
72567,    for f in funcs:
72568,        f = f.__name__
72569,"        times_n[f].append(min(timeit.Timer('%s(t)' %f, "
72570,"                      'from __main__ import %s, t' %f)"
72571,"                              .repeat(repeat=3, number=1000000)))"
72572,from re import match as re_match
72573,from re import compile as re_compile
72574,
72575,def is_number_tryexcept(s):
72576,"    """""" Returns True is string is a number. """""""
72577,    try:
72578,        float(s)
72579,        return True
72580,    except ValueError:
72581,        return False
72582,
72583,def is_number_regex(s):
72584,"    """""" Returns True is string is a number. """""""
72585,"    if re_match(""^\d+?\.\d+?$"", s) is None:"
72586,        return s.isdigit()
72587,    return True
72588,
72589,
72590,"comp = re_compile(""^\d+?\.\d+?$"")    "
72591,
72592,def compiled_regex(s):
72593,"    """""" Returns True is string is a number. """""""
72594,    if comp.match(s) is None:
72595,        return s.isdigit()
72596,    return True
72597,
72598,
72599,def is_number_repl_isdigit(s):
72600,"    """""" Returns True is string is a number. """""""
72601,"    return s.replace('.','',1).isdigit()"
72602,'1.5e-9'
72603,s.replace()
72604,"s.replace('.','',1).replace('e-','',1).replace('e','',1).isdigit()"
72605,"s.lstrip('-').replace('.','',1).replace('e-','',1).replace('e','',1).isdigit()"
72606,>>> float('NaN')
72607,nan
72608,NaN
72609,False
72610,float
72611,'inf'
72612,inf
72613,NaN
72614,+
72615,-
72616,x-1 == x
72617,inf
72618,math.isfinite
72619,math.isnan
72620,math.isinf
72621,"'3.14'.replace('.','',1).isdigit()"
72622,"'3.14.5'.replace('.','',1).isdigit()"
72623,".replace(badstuff,'',maxnum_badstuff)"
72624,1.234e56
72625,+1.234E+56
72626,"re.match(r'^[+-]*(0[xbo])?[0-9A-Fa-f]*\.?[0-9A-Fa-f]*(E[+-]*[0-9A-Fa-f]+)$', 'str')"
72627,def is_number(s):
72628,    try:
72629,"        complex(s) # for int, long, float and complex"
72630,    except ValueError:
72631,        return False
72632,
72633,    return True
72634,def is_number(s):
72635,    try:
72636,"        float(s) # for int, long and float"
72637,    except ValueError:
72638,        try:
72639,            complex(s) # for complex
72640,        except ValueError:
72641,            return False
72642,
72643,    return True
72644,float()
72645,complex()
72646,float()
72647,complex()
72648,complex('(01989)')
72649,(1989+0j)
72650,float('(01989)')
72651,complex
72652,complex()
72653,(
72654,)
72655,complex()
72656,"s.lstrip('-').replace('.','',1).replace('e-','',1).replace('e','',1).isdigit()"
72657,hasattr()
72658,getattr()
72659,try/except
72660,int
72661,">>> ""1221323"".isdigit()"
72662,True
72663,float
72664,">>> ""12.34"".isdigit()"
72665,False
72666,">>> ""12.34"".replace('.','',1).isdigit()"
72667,True
72668,">>> ""12.3.4"".replace('.','',1).isdigit()"
72669,False
72670,lstrip()
72671,>>> '-12'.lstrip('-')
72672,'12'
72673,">>> '-12.34'.lstrip('-').replace('.','',1).isdigit()"
72674,True
72675,">>> '.-234'.lstrip('-').replace('.','',1).isdigit()"
72676,False
72677,1.234e56
72678,99999999999999999999e99999999999999999999
72679,">>> '--1234'.lstrip('-').replace('.','',1).isdigit()"
72680,str.isdigit()
72681,# For digit
72682,>>> '1'.isdigit()
72683,True
72684,>>> '1'.isalpha()
72685,False
72686,str.isdigit()
72687,False
72688,# returns `False` for float
72689,>>> '123.3'.isdigit()
72690,False
72691,# returns `False` for negative number
72692,>>> '-123'.isdigit()
72693,False
72694,float
72695,def is_number(n):
72696,    try:
72697,        float(n)   # Type-casting the string to `float`.
72698,"                   # If string is not a valid `float`, "
72699,                   # it'll raise `ValueError` exception
72700,    except ValueError:
72701,        return False
72702,    return True
72703,>>> is_number('123')    # positive integer number
72704,True
72705,
72706,>>> is_number('123.4')  # positive float number
72707,True
72708, 
72709,>>> is_number('-123')   # negative integer number
72710,True
72711,
72712,>>> is_number('-123.4') # negative `float` number
72713,True
72714,
72715,">>> is_number('abc')    # `False` for ""some random"" string"
72716,False
72717,True
72718,>>> is_number('NaN')
72719,True
72720,math.isnan()
72721,>>> import math
72722,>>> nan_num = float('nan')
72723,
72724,>>> math.isnan(nan_num)
72725,True
72726,==
72727,False
72728,nan
72729,# `nan_num` variable is taken from above example
72730,>>> nan_num == nan_num
72731,False
72732,is_number
72733,False
72734,"""NaN"""
72735,def is_number(n):
72736,    is_number = True
72737,    try:
72738,        num = float(n)
72739,"        # check for ""nan"" floats"
72740,        is_number = num == num   # or use `math.isnan(num)`
72741,    except ValueError:
72742,        is_number = False
72743,    return is_number
72744,">>> is_number('Nan')   # not a number ""Nan"" string"
72745,False
72746,
72747,">>> is_number('nan')   # not a number string ""nan"" with all lower cased"
72748,False
72749,
72750,>>> is_number('123')   # positive integer
72751,True
72752,
72753,>>> is_number('-123')  # negative integer
72754,True
72755,
72756,>>> is_number('-1.12') # negative `float`
72757,True
72758,
72759,">>> is_number('abc')   # ""some random"" string"
72760,False
72761,is_number
72762,try: except:
72763,from __future__ import print_function
72764,import timeit
72765,
72766,prep_base = '''\
72767,x = 'invalid'
72768,y = '5402'
72769,z = '4.754e3'
72770,'''
72771,
72772,prep_try_method = '''\
72773,def is_number_try(val):
72774,    try:
72775,        float(val)
72776,        return True
72777,    except ValueError:
72778,        return False
72779,
72780,'''
72781,
72782,prep_re_method = '''\
72783,import re
72784,float_match = re.compile(r'[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?$').match
72785,def is_number_re(val):
72786,    return bool(float_match(val))
72787,
72788,'''
72789,
72790,fn_method = '''\
72791,from fastnumbers import isfloat
72792,
72793,'''
72794,
72795,"print('Try with non-number strings', timeit.timeit('is_number_try(x)',"
72796,"    prep_base + prep_try_method), 'seconds')"
72797,"print('Try with integer strings', timeit.timeit('is_number_try(y)',"
72798,"    prep_base + prep_try_method), 'seconds')"
72799,"print('Try with float strings', timeit.timeit('is_number_try(z)',"
72800,"    prep_base + prep_try_method), 'seconds')"
72801,print()
72802,"print('Regex with non-number strings', timeit.timeit('is_number_re(x)',"
72803,"    prep_base + prep_re_method), 'seconds')"
72804,"print('Regex with integer strings', timeit.timeit('is_number_re(y)',"
72805,"    prep_base + prep_re_method), 'seconds')"
72806,"print('Regex with float strings', timeit.timeit('is_number_re(z)',"
72807,"    prep_base + prep_re_method), 'seconds')"
72808,print()
72809,"print('fastnumbers with non-number strings', timeit.timeit('isfloat(x)',"
72810,"    prep_base + 'from fastnumbers import isfloat'), 'seconds')"
72811,"print('fastnumbers with integer strings', timeit.timeit('isfloat(y)',"
72812,"    prep_base + 'from fastnumbers import isfloat'), 'seconds')"
72813,"print('fastnumbers with float strings', timeit.timeit('isfloat(z)',"
72814,"    prep_base + 'from fastnumbers import isfloat'), 'seconds')"
72815,print()
72816,Try with non-number strings 2.39108395576 seconds
72817,Try with integer strings 0.375686168671 seconds
72818,Try with float strings 0.369210958481 seconds
72819,
72820,Regex with non-number strings 0.748660802841 seconds
72821,Regex with integer strings 1.02021503448 seconds
72822,Regex with float strings 1.08564686775 seconds
72823,
72824,fastnumbers with non-number strings 0.174362897873 seconds
72825,fastnumbers with integer strings 0.179651021957 seconds
72826,fastnumbers with float strings 0.20222902298 seconds
72827,try: except:
72828,fastnumbers
72829,prep_code_basis
72830,prep_code_re_method
72831,isfloat
72832,"str(s).strip('-').replace('.','',1).isdigit()"
72833,timeit.timeit
72834,def parse(string):
72835,    try:
72836,        return float(string)
72837,    except Exception:
72838,        throw TypeError
72839,"def try_parse(string, fail=None):"
72840,    try:
72841,        return float(string)
72842,    except Exception:
72843,        return fail;
72844,def monkey_patch():
72845,"    if(!hasattr(float, 'parse')):"
72846,        float.parse = parse
72847,"    if(!hasattr(float, 'try_parse')):"
72848,        float.try_parse = try_parse
72849,float.parse('giggity') // throws TypeException
72850,float.parse('54.3') // returns the scalar value 54.3
72851,float.tryParse('twank') // returns None
72852,float.tryParse('32.2') // returns the scalar value 32.2
72853,!
72854,not
72855,float
72856,x.isdigit()
72857,"x.replace('-','').isdigit()"
72858,"x.replace('.','').isdigit()"
72859,"x.replace(':','').isdigit()"
72860,"x.replace('/','',1).isdigit()"
72861,"x.replace('/','',1).isdigit()"
72862,">>> s = u""345"""
72863,>>> s.isnumeric()
72864,True
72865,">>> s = ""345"""
72866,>>> u = unicode(s)
72867,>>> u.isnumeric()
72868,True
72869,s.isdecimal()
72870,s
72871,s.isnumeric()
72872,int()
72873,def is_number(s):
72874,    try:
72875,        n=str(float(s))
72876,"        if n == ""nan"" or n==""inf"" or n==""-inf"" : return False"
72877,    except ValueError:
72878,        try:
72879,            complex(s) # for complex
72880,        except ValueError:
72881,            return False
72882,    return True
72883,check_replace
72884,check_exception
72885,check_exception
72886,huge_number = float('1e+100')
72887,"import time, re, random, string"
72888,
72889,ITERATIONS = 10000000
72890,
72891,class Timer:    
72892,    def __enter__(self):
72893,        self.start = time.clock()
72894,        return self
72895,"    def __exit__(self, *args):"
72896,        self.end = time.clock()
72897,        self.interval = self.end - self.start
72898,
72899,def check_regexp(x):
72900,"    return re.compile(""^\d*\.?\d*$"").match(x) is not None"
72901,
72902,def check_replace(x):
72903,"    return x.replace('.','',1).isdigit()"
72904,
72905,def check_exception(s):
72906,    try:
72907,        float(s)
72908,        return True
72909,    except ValueError:
72910,        return False
72911,
72912,"to_check = [check_regexp, check_replace, check_exception]"
72913,
72914,print('preparing data...')
72915,good_numbers = [
72916,    str(random.random() / random.random()) 
72917,    for x in range(ITERATIONS)]
72918,
72919,bad_numbers = ['.' + x for x in good_numbers]
72920,
72921,strings = [
72922,"    ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(random.randint(1,10)))"
72923,    for x in range(ITERATIONS)]
72924,
72925,print('running test...')
72926,for func in to_check:
72927,    with Timer() as t:
72928,        for x in good_numbers:
72929,            res = func(x)
72930,"    print('%s with good floats: %s' % (func.__name__, t.interval))"
72931,    with Timer() as t:
72932,        for x in bad_numbers:
72933,            res = func(x)
72934,"    print('%s with bad floats: %s' % (func.__name__, t.interval))"
72935,    with Timer() as t:
72936,        for x in strings:
72937,            res = func(x)
72938,"    print('%s with strings: %s' % (func.__name__, t.interval))"
72939,check_regexp with good floats: 12.688639
72940,check_regexp with bad floats: 11.624862
72941,check_regexp with strings: 11.349414
72942,check_replace with good floats: 4.419841
72943,check_replace with bad floats: 4.294909
72944,check_replace with strings: 4.086358
72945,check_exception with good floats: 3.276668
72946,check_exception with bad floats: 13.843092
72947,check_exception with strings: 15.786169
72948,check_regexp with good floats: 13.472906000000009
72949,check_regexp with bad floats: 12.977665000000016
72950,check_regexp with strings: 12.417542999999995
72951,check_replace with good floats: 6.011045999999993
72952,check_replace with bad floats: 4.849356
72953,check_replace with strings: 4.282754000000011
72954,check_exception with good floats: 6.039081999999979
72955,check_exception with bad floats: 9.322753000000006
72956,check_exception with strings: 9.952595000000002
72957,check_regexp with good floats: 2.693217
72958,check_regexp with bad floats: 2.744819
72959,check_regexp with strings: 2.532414
72960,check_replace with good floats: 0.604367
72961,check_replace with bad floats: 0.538169
72962,check_replace with strings: 0.598664
72963,check_exception with good floats: 1.944103
72964,check_exception with bad floats: 2.449182
72965,check_exception with strings: 2.200056
72966,"a=""50"""
72967,b=50
72968,c=50.1
72969,"d=""50.1"""
72970,import ast
72971,import numbers              
72972,def is_numeric(obj):
72973,"    if isinstance(obj, numbers.Number):"
72974,        return True
72975,"    elif isinstance(obj, str):"
72976,        nodes = list(ast.walk(ast.parse(obj)))[1:]
72977,"        if not isinstance(nodes[0], ast.Expr):"
72978,            return False
72979,"        if not isinstance(nodes[-1], ast.Num):"
72980,            return False
72981,        nodes = nodes[1:-1]
72982,        for i in range(len(nodes)):
72983,            #if used + or - in digit :
72984,            if i % 2 == 0:
72985,"                if not isinstance(nodes[i], ast.UnaryOp):"
72986,                    return False
72987,            else:
72988,"                if not isinstance(nodes[i], (ast.USub, ast.UAdd)):"
72989,                    return False
72990,        return True
72991,    else:
72992,        return False
72993,">>> is_numeric(""54"")"
72994,True
72995,">>> is_numeric(""54.545"")"
72996,True
72997,">>> is_numeric(""0x45"")"
72998,True
72999,import ast
73000,
73001,def is_float(obj):
73002,"    if isinstance(obj, float):"
73003,        return True
73004,"    if isinstance(obj, int):"
73005,        return False
73006,"    elif isinstance(obj, str):"
73007,        nodes = list(ast.walk(ast.parse(obj)))[1:]
73008,"        if not isinstance(nodes[0], ast.Expr):"
73009,            return False
73010,"        if not isinstance(nodes[-1], ast.Num):"
73011,            return False
73012,"        if not isinstance(nodes[-1].n, float):"
73013,            return False
73014,        nodes = nodes[1:-1]
73015,        for i in range(len(nodes)):
73016,            if i % 2 == 0:
73017,"                if not isinstance(nodes[i], ast.UnaryOp):"
73018,                    return False
73019,            else:
73020,"                if not isinstance(nodes[i], (ast.USub, ast.UAdd)):"
73021,                    return False
73022,        return True
73023,    else:
73024,        return False
73025,">>> is_float(""5.4"")"
73026,True
73027,">>> is_float(""5"")"
73028,False
73029,>>> is_float(5)
73030,False
73031,">>> is_float(""5"")"
73032,False
73033,">>> is_float(""+5.4"")"
73034,True
73035,>>> a=454
73036,>>> a.isdigit()
73037,Traceback (most recent call last):
73038,"  File ""<stdin>"", line 1, in <module>"
73039,AttributeError: 'int' object has no attribute 'isdigit'
73040,">>> a=""454"""
73041,>>> a.isdigit()
73042,True
73043,">>> isinstance(""54"", int)"
73044,False
73045,">>> isinstance(54, int)"
73046,True
73047,>>> 
73048,">>> isinstance(""45.1"", float)"
73049,False
73050,">>> isinstance(45.1, float)"
73051,True
73052,ast
73053,"is_numeric(""String 1"")"
73054,str.isnumeric()
73055,True
73056,False
73057,str.isdecimal()
73058,True
73059,False
73060,"""1.1"""
73061,"word = ""1.1"""
73062,
73063,""""".join(word.split(""."")).isnumeric()"
73064,>>> True
73065,"word = ""1.1"""
73066,
73067,""""".join(word.split(""."")).isdigit()"
73068,>>> True
73069,"word = ""1.1"""
73070,
73071,""""".join(word.split(""."")).isdecimal()"
73072,>>> True
73073,"%timeit """".join(word.split(""."")).isnumeric()"
73074,">>> 257 ns ± 12 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
73075,
73076,"%timeit """".join(word.split(""."")).isdigit()"
73077,">>> 252 ns ± 11 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
73078,
73079,"%timeit """".join(word.split(""."")).isdecimal()"
73080,">>> 244 ns ± 7.17 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
73081,def str_to_type (s):
73082,"    """""" Get possible cast type for a string"
73083,
73084,    Parameters
73085,    ----------
73086,    s : string
73087,
73088,    Returns
73089,    -------
73090,"    float,int,str,bool : type"
73091,        Depending on what it can be cast to
73092,
73093,"    """"""    "
73094,    try:                
73095,        f = float(s)        
73096,"        if ""."" not in s:"
73097,            return int
73098,        return float
73099,    except ValueError:
73100,        value = s.upper()
73101,"        if value == ""TRUE"" or value == ""FALSE"":"
73102,            return bool
73103,        return type(s)
73104,"str_to_type(""true"") # bool"
73105,"str_to_type(""6.0"") # float"
73106,"str_to_type(""6"") # int"
73107,"str_to_type(""6abc"") # str"
73108,"str_to_type(u""6abc"") # unicode       "
73109,"s = ""6.0"""
73110,type_ = str_to_type(s) # float
73111,f = type_(s) 
73112,"str_to_type(""123e-4"")"
73113,int
73114,"float(""123e-4"")"
73115,0.0123
73116,"str_to_type(""NaN"")"
73117,int
73118,"if ""."" not in s:"
73119,"if ""."" not in s and ""e"" not in s and ""N"" not in s:"
73120,i = int(s); return int
73121,f = float(s); return float
73122,"# Doesn't properly handle floats missing the integer part, such as "".7"""
73123,SIMPLE_FLOAT_REGEXP = re.compile(r'^[-+]?[0-9]+\.?[0-9]+([eE][-+]?[0-9]+)?$')
73124,"# Example ""-12.34E+56""      # sign (-)"
73125,                            #     integer (12)
73126,                            #           mantissa (34)
73127,                            #                    exponent (E+56)
73128,
73129,# Should handle all floats
73130,FLOAT_REGEXP = re.compile(r'^[-+]?([0-9]+|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?$')
73131,"# Example ""-12.34E+56""      # sign (-)"
73132,                            #     integer (12)
73133,                            #           OR
73134,                            #             int/mantissa (12.34)
73135,                            #                            exponent (E+56)
73136,
73137,def is_float(str):
73138,  return True if FLOAT_REGEXP.match(str) else False
73139,True  <- +42
73140,True  <- +42.42
73141,False <- +42.42.22
73142,True  <- +42.42e22
73143,True  <- +42.42E-22
73144,False <- +42.42e-22.8
73145,True  <- .42
73146,False <- 42nope
73147,check_regexp with good floats: 18.001921
73148,check_regexp with bad floats: 17.861423
73149,check_regexp with strings: 17.558862
73150,check_correct_regexp with good floats: 11.04428
73151,check_correct_regexp with bad floats: 8.71211
73152,check_correct_regexp with strings: 8.144161
73153,check_replace with good floats: 6.020597
73154,check_replace with bad floats: 5.343049
73155,check_replace with strings: 5.091642
73156,check_exception with good floats: 5.201605
73157,check_exception with bad floats: 23.921864
73158,check_exception with strings: 23.755481
73159,x-1 == x
73160,2.0**54 - 1 == 2.0**54
73161,"return True if str1.lstrip('-').replace('.','',1).isdigit() or float(str1) else False"
73162,def string_or_number(s):
73163,    try:
73164,        z = int(s)
73165,        return z
73166,    except ValueError:
73167,        try:
73168,            z = float(s)
73169,            return z
73170,        except ValueError:
73171,            return s
73172,import re
73173,def is_number(num):
73174,    pattern = re.compile(r'^[-+]?[-0-9]\d*\.\d*|[-+]?\.?[0-9]\d*$')
73175,    result = pattern.match(num)
73176,    if result:
73177,        return True
73178,    else:
73179,        return False
73180,
73181,
73182,>>>: is_number('1')
73183,True
73184,
73185,>>>: is_number('111')
73186,True
73187,
73188,>>>: is_number('11.1')
73189,True
73190,
73191,>>>: is_number('-11.1')
73192,True
73193,
73194,>>>: is_number('inf')
73195,False
73196,
73197,>>>: is_number('-inf')
73198,False
73199,1e6
73200,try:
73201,    myvar.append( float(string_to_check) )
73202,except:
73203,    continue
73204,def is_float(text):
73205,    try:
73206,        float(text)
73207,        # check for nan/infinity etc.
73208,        if text.isalpha():
73209,            return False
73210,        return True
73211,    except ValueError:
73212,        return False
73213,"def if_ok(fn, string):"
73214,  try:
73215,    return fn(string)
73216,  except Exception as e:
73217,    return None
73218,"if_ok(int, my_str) or if_ok(float, my_str) or if_ok(complex, my_str)"
73219,"is_number = lambda s: any([if_ok(fn, s) for fn in (int, float, complex)])"
73220,def is_float(s):
73221,    if s is None:
73222,        return False
73223,
73224,    if len(s) == 0:
73225,        return False
73226,
73227,    digits_count = 0
73228,    dots_count = 0
73229,    signs_count = 0
73230,
73231,    for c in s:
73232,        if '0' <= c <= '9':
73233,            digits_count += 1
73234,        elif c == '.':
73235,            dots_count += 1
73236,        elif c == '-' or c == '+':
73237,            signs_count += 1
73238,        else:
73239,            return False
73240,
73241,    if digits_count == 0:
73242,        return False
73243,
73244,    if dots_count > 1:
73245,        return False
73246,
73247,    if signs_count > 1:
73248,        return False
73249,
73250,    return True
73251,"""Hey, you - what are you doing here!?"""
73252,"['hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73253,str.split()
73254,str.split()
73255,">>> re.split('\W+', 'Words, words, words.')"
73256,"['Words', 'words', 'words', '']"
73257,">>> re.split('(\W+)', 'Words, words, words.')"
73258,"['Words', ', ', 'words', ', ', 'words', '.', '']"
73259,">>> re.split('\W+', 'Words, words, words.', 1)"
73260,"['Words', 'words, words.']"
73261,"[ e for e in re.split(r'\W+', ...) if e ]"
73262,' a b c '.strip()
73263,shift
73264,ctrl+z
73265,ctrl+shift+z
73266,shift w
73267,W
73268,w
73269,import re
73270,"DATA = ""Hey, you - what are you doing here!?"""
73271,"print re.findall(r""[\w']+"", DATA)"
73272,"# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73273,re
73274,findall
73275,re.split()
73276,don't
73277,don
73278,t
73279,">>> 'a;bcd,ef g'.replace(';',' ').replace(',',' ').split()"
73280,"['a', 'bcd', 'ef', 'g']"
73281,re
73282,">>> import re  # Will be splitting on: , <space> - ! ? :"
73283,">>> filter(None, re.split(""[, \-!?:]+"", ""Hey, you - what are you doing here!?""))"
73284,"['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73285,[…]
73286,\-
73287,-
73288,A-Z
73289,+
73290,filter()
73291,"filter(None, …)"
73292,re.split()
73293,re
73294,import string
73295,punc = string.punctuation
73296,"thestring = ""Hey, you - what are you doing here!?"""
73297,s = list(thestring)
73298,''.join([o for o in s if not o in punc]).split()
73299,"""Hey, you - what are you doing here María!?"""
73300,''.join([o if not o in string.punctuation else ' ' for o in s]).split()
73301,"o for o in s if (o in not string.punctuation or o == ""'"")"
73302,"""First Name,Last Name,Street Address,City,State,Zip Code"""
73303,","
73304,"['First Name', 'Last Name', 'Street Address', 'City', 'State', 'Zip Code']"
73305,"['First', 'Name', 'Last', 'Name', 'Street', 'Address', 'City', 'State', 'Zip', 'Code']"
73306,re
73307,string.translate
73308,>>> import timeit
73309,">>> S = 'Hey, you - what are you doing here!?'"
73310,">>> def my_split(s, seps):"
73311,...     res = [s]
73312,...     for sep in seps:
73313,"...         s, res = res, []"
73314,...         for seq in s:
73315,...             res += seq.split(sep)
73316,...     return res
73317,... 
73318,">>> timeit.Timer('my_split(S, punctuation)', 'from __main__ import S,my_split; from string import punctuation').timeit()"
73319,54.65477919578552
73320,re.findall()
73321,">>> timeit.Timer('findall(r""\w+"", S)', 'from __main__ import S; from re import findall').timeit()"
73322,4.194725036621094
73323,translate
73324,">>> from string import translate,maketrans,punctuation "
73325,">>> T = maketrans(punctuation, ' '*len(punctuation))"
73326,">>> timeit.Timer('translate(S, T).split()', 'from __main__ import S,T,translate').timeit()"
73327,1.2835021018981934
73328,string.translate
73329,string.translate
73330,maketrans()
73331,split()
73332,split()
73333,re.findall()
73334,"patt = re.compile(ur'\w+', re.UNICODE); patt.findall(S)"
73335,s.translate(''.join([(chr(i) if chr(i) not in seps else seps[0]) for i in range(256)])).split(seps[0])
73336,string.translate
73337,string.maketrans
73338,"def my_split(s, seps):"
73339,    res = [s]
73340,    for sep in seps:
73341,"        s, res = res, []"
73342,        for seq in s:
73343,            res += seq.split(sep)
73344,    return res
73345,
73346,"print my_split('1111  2222 3333;4444,5555;6666', [' ', ';', ','])"
73347,"['1111', '', '2222', '3333', '4444', '5555', '6666']"
73348,re
73349,re
73350,str.translate(...)
73351,string.punctuation
73352,import re
73353,
73354,"my_str = ""Hey, you - what are you doing here!?"""
73355,
73356,"words = re.split(r'\s+', re.sub(r'[,\-!?]', ' ', my_str).strip())"
73357,re.sub(...)
73358,re.split(...)
73359,"my_str = ""Hey, you - what are you doing here!?"""
73360,
73361,"replacements = (',', '-', '!', '?')"
73362,for r in replacements:
73363,"    my_str = my_str.replace(r, ' ')"
73364,
73365,words = my_str.split()
73366,reduce
73367,import functools
73368,
73369,"my_str = ""Hey, you - what are you doing here!?"""
73370,
73371,"replacements = (',', '-', '!', '?')"
73372,"my_str = functools.reduce(lambda s, sep: s.replace(sep, ' '), replacements, my_str)"
73373,words = my_str.split()
73374,str.translate
73375,"replacements=',-!?'; import string; my_str = my_str.translate(string.maketrans(replacements, ' ' * len(replacements)))"
73376,"join = lambda x: sum(x,[])  # a.k.a. flatten1([[1],[2,3],[4]]) -> [1,2,3,4]"
73377,# ...alternatively...
73378,join = lambda lists: [x for l in lists for x in l]
73379,fragments = [text]
73380,for token in tokens:
73381,    fragments = join(f.split(token) for f in fragments)
73382,"range(n) -> [1,2,...,n]"
73383,"map(range, [3,4,1]) -> [0,1,2,0,1,2,3,0]"
73384,tokens=string.punctuation
73385,map_then_append
73386,re
73387,fragments
73388,"fragments = ['the,string']"
73389,"fragments = 'the,string'"
73390,"fragments = list('the,string')"
73391,from itertools import groupby
73392,"sep = ' ,-!?'"
73393,"s = ""Hey, you - what are you doing here!?"""
73394,"print [''.join(g) for k, g in groupby(s, sep.__contains__) if not k]"
73395,lambda ch: ch in sep
73396,a = '11223FROM33344INTO33222FROM3344'
73397,"a.replace('FROM', ',,,').replace('INTO', ',,,').split(',,,')"
73398,"['11223', '33344', '33222', '3344']"
73399,import re
73400,
73401,"phrase = ""Hey, you - what are you doing here!?"""
73402,"matches = re.findall('\w+', phrase)"
73403,print matches
73404,"['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73405,lower
73406,punctuation
73407,translate
73408,translate
73409,translate
73410,"your_string.translate(your_string.maketrans(fromstr, tostr, deletestr))"
73411,fromstr
73412,tostr
73413,deletestr
73414,fromstr
73415,tostr
73416,deletestr
73417,In [10]: import string
73418,
73419,In [11]: string.punctuation
73420,"Out[11]: '!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'  "
73421,"In [12]: your_str = ""Hey, you - what are you doing here!?"""
73422,
73423,"In [13]: line = your_str.translate(your_str.maketrans('', '', string.punctuation))"
73424,
73425,In [14]: line = line.lower()
73426,
73427,In [15]: words = line.split()
73428,
73429,In [16]: print(words)
73430,"['hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73431,"thestring = pd.Series(""Hey, you - what are you doing here!?"")"
73432,"thestring.str.split(pat = ',|-')"
73433,"[Hey,  you ,  what are you doing here!?]"
73434,"tokens = [x.strip() for x in data.split(',')]"
73435,import string
73436,"specials = ',.!?:;""()<>[]#$=-/'"
73437,"trans = string.maketrans(specials, ' '*len(specials))"
73438,body = body.translate(trans)
73439,words = body.strip().split()
73440,import string
73441,split_without_punc = lambda text : [word.strip(string.punctuation) for word in 
73442,    text.split() if word.strip(string.punctuation) != '']
73443,
73444,# Call function
73445,"split_without_punc(""Hey, you -- what are you doing?!"")"
73446,"# returns ['Hey', 'you', 'what', 'are', 'you', 'doing']"
73447,import string
73448,def split_without_punctuation2(text):
73449,
73450,    # Split by whitespace
73451,    words = text.split()
73452,
73453,    # Strip punctuation from each word
73454,    return [word.strip(ignore) for word in words if word.strip(ignore) != '']
73455,
73456,"split_without_punctuation2(""Hey, you -- what are you doing?!"")"
73457,"# returns ['Hey', 'you', 'what', 'are', 'you', 'doing']"
73458,"text.replace(""-"", "" "")"
73459,"def split_without(text: str, ignore: str) -> list:"
73460,
73461,    # Split by whitespace
73462,    split_string = text.split()
73463,
73464,"    # Strip any characters in the ignore string, and ignore empty strings"
73465,    words = []
73466,    for word in split_string:
73467,        word = word.strip(ignore)
73468,        if word != '':
73469,            words.append(word)
73470,
73471,    return words
73472,
73473,# Situation-specific call to general function
73474,import string
73475,"final_text = split_without(""Hey, you - what are you doing?!"", string.punctuation)"
73476,"# returns ['Hey', 'you', 'what', 'are', 'you', 'doing']"
73477,>>> import re
73478,>>> def split_words(text):
73479,"...     rgx = re.compile(r""((?:(?<!'|\w)(?:\w-?'?)+(?<!-))|(?:(?<='|\w)(?:\w-?'?)+(?=')))"")"
73480,...     return rgx.findall(text)
73481,">>> split_words(""The hill-tops gleam in morning's spring."")"
73482,"['The', 'hill-tops', 'gleam', 'in', ""morning's"", 'spring']"
73483,">>> split_words(""I'd say it's James' 'time'."")"
73484,"[""I'd"", 'say', ""it's"", ""James'"", 'time']"
73485,">>> split_words(""tic-tac-toe's tic-tac-toe'll tic-tac'tic-tac we'll--if tic-tac"")"
73486,"[""tic-tac-toe's"", ""tic-tac-toe'll"", ""tic-tac'tic-tac"", ""we'll"", 'if', 'tic-tac']"
73487,">>> split_words(""google.com email@google.com split_words"")"
73488,"['google', 'com', 'email', 'google', 'com', 'split_words']"
73489,">>> split_words(""Kurt Friedrich Gödel (/ˈɡɜːrdəl/;[2] German: [ˈkʊɐ̯t ˈɡøːdl̩] (listen);"")"
73490,"['Kurt', 'Friedrich', 'Gödel', 'ˈɡɜːrdəl', '2', 'German', 'ˈkʊɐ', 't', 'ˈɡøːdl', 'listen']"
73491,">>> split_words(""April 28, 1906 – January 14, 1978) was an Austro-Hungarian-born Austrian..."")"
73492,"['April', '28', '1906', 'January', '14', '1978', 'was', 'an', 'Austro-Hungarian-born', 'Austrian']"
73493,import nltk
73494,"data= ""Hey, you - what are you doing here!?"""
73495,"word_tokens = nltk.tokenize.regexp_tokenize(data, r'\w+')"
73496,print word_tokens
73497,"['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73498,str1='adj:sg:nom:m1.m2.m3:pos'
73499,splitat=':.'
73500,''.join([ s if s not in splitat else ' ' for s in str1]).split()
73501,import re
73502,"DATA = ""Hey, you - what are you doing here!?"""
73503,"reg_tok = re.compile(""[\w']+"")"
73504,print reg_tok.findall(DATA)
73505,"st = ""Hey, you - what are you doing here!?"""
73506,
73507,# replace all the non alpha-numeric with space and then join.
73508,"new_string = ''.join([x.replace(x, ' ') if not x.isalnum() else x for x in st])"
73509,# output of new_string
73510,'Hey  you  what are you doing here  '
73511,
73512,# str.split() will remove all the empty string if separator is not provided
73513,new_list = new_string.split()
73514,
73515,# output of new_list
73516,"['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73517,
73518,# we can join it to get a complete string without any non alpha-numeric character
73519,' '.join(new_list)
73520,# output
73521,'Hey you what are you doing'
73522,"(''.join([x.replace(x, ' ') if not x.isalnum() else x for x in st])).split()"
73523,
73524,# output
73525,"['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73526,"def split_string(source, splitlist):"
73527,    output = []  # output list of cleaned words
73528,    atsplit = True
73529,    for char in source:
73530,        if char in splitlist:
73531,            atsplit = True
73532,        else:
73533,            if atsplit:
73534,                output.append(char)  # append new word after split
73535,                atsplit = False
73536,            else: 
73537,                output[-1] = output[-1] + char  # continue copying characters until next split
73538,    return output
73539,"def split_string_on_multiple_separators(input_string, separators):"
73540,    buffer = [input_string]
73541,    for sep in separators:
73542,        strings = buffer
73543,        buffer = []  # reset the buffer
73544,        for s in strings:
73545,            buffer = buffer + s.split(sep)
73546,
73547,    return buffer
73548,"def msplit( str, delims ):"
73549,  w = ''
73550,  for z in str:
73551,    if z not in delims:
73552,        w += z
73553,    else:
73554,        if len(w) > 0 :
73555,            yield w
73556,        w = ''
73557,  if len(w) > 0 :
73558,    yield w
73559,\W+
73560,"filter(None, re.compile('[ |,|\-|!|?]').split( ""Hey, you - what are you doing here!?"")"
73561,\w
73562,\W
73563,|
73564,expr0|expr1
73565,[char0 char1…]
73566,compile()
73567,"def split_string(source,splitlist):"
73568,    splits = frozenset(splitlist)
73569,    l = []
73570,"    s1 = """""
73571,    for c in source:
73572,        if c in splits:
73573,            if s1:
73574,                l.append(s1)
73575,"                s1 = """""
73576,        else:
73577,            print s1
73578,            s1 = s1 + c
73579,    if s1:
73580,        l.append(s1)
73581,    return l
73582,
73583,">>>out = split_string(""First Name,Last Name,Street Address,City,State,Zip Code"","","")"
73584,>>>print out
73585,">>>['First Name', 'Last Name', 'Street Address', 'City', 'State', 'Zip Code']"
73586,replace()
73587,splitlist
73588,splitlist
73589,splitlist
73590,"def split_string(text, splitlist):"
73591,    for sep in splitlist:
73592,"        text = text.replace(sep, splitlist[0])"
73593,"    return filter(None, text.split(splitlist[0])) if splitlist else [text]"
73594,def get_words(s):
73595,    l = []
73596,    w = ''
73597,    for c in s.lower():
73598,"        if c in '-!?,. ':"
73599,            if w != '': 
73600,                l.append(w)
73601,            w = ''
73602,        else:
73603,            w = w + c
73604,    if w != '': 
73605,        l.append(w)
73606,    return l
73607,">>> s = ""Hey, you - what are you doing here!?"""
73608,>>> print get_words(s)
73609,"['hey', 'you', 'what', 'are', 'you', 'doing', 'here']"
73610,def tokenizeSentence_Reversible(sentence):
73611,"    setOfDelimiters = ['.', ' ', ',', '*', ';', '!']"
73612,    listOfTokens = [sentence]
73613,
73614,    for delimiter in setOfDelimiters:
73615,        newListOfTokens = []
73616,"        for ind, token in enumerate(listOfTokens):"
73617,"            ll = [([delimiter, w] if ind > 0 else [w]) for ind, w in enumerate(token.split(delimiter))]"
73618,            listOfTokens = [item for sublist in ll for item in sublist] # flattens.
73619,"            listOfTokens = filter(None, listOfTokens) # Removes empty tokens: ''"
73620,            newListOfTokens.extend(listOfTokens)
73621,
73622,        listOfTokens = newListOfTokens
73623,
73624,    return listOfTokens
73625,print
73626,>>> class Test():
73627,...     def __init__(self):
73628,...         self.a = 'foo'
73629,...
73630,>>> print(Test())
73631,<__main__.Test object at 0x7fc9a9e36d60>
73632,Test
73633,print
73634,a
73635,>>> class Test:
73636,...     def __repr__(self):
73637,"...         return ""Test()"""
73638,...     def __str__(self):
73639,"...         return ""member of Test"""
73640,... 
73641,>>> t = Test()
73642,>>> t
73643,Test()
73644,>>> print(t)
73645,member of Test
73646,__str__
73647,__repr__
73648,repr()
73649,__str__
73650,__repr__
73651,__str__
73652,__repr__
73653,__repr__
73654,__str__
73655,__repr__
73656,repr()
73657,eval()
73658,__repr__()
73659,class Test:
73660,"    def __init__(self, a, b):"
73661,        self.a = a
73662,        self.b = b
73663,
73664,    def __repr__(self):
73665,"        return f""<Test a:{self.a} b:{self.b}>"""
73666,
73667,    def __str__(self):
73668,"        return f""From str method of Test: a is {self.a}, b is {self.b}"""
73669,">>> t = Test(123, 456)"
73670,>>> t
73671,<Test a:123 b:456>
73672,>>> print(repr(t))
73673,<Test a:123 b:456>
73674,>>> print(t)
73675,"From str method of Test: a is 123, b is 456"
73676,>>> print(str(t))
73677,"From str method of Test: a is 123, b is 456"
73678,__str__
73679,print(t)
73680,print(str(t))
73681,__repr__
73682,__repr__
73683,def __repr__(self):
73684,    cls = self.__class__
73685,"    return f""<{cls.__module_}.{cls.__qualname__} object at {id(self)}>"""
73686,__str__
73687,%
73688,%
73689,class Element:
73690,"    def __init__(self, name, symbol, number):"
73691,        self.name = name
73692,        self.symbol = symbol
73693,        self.number = number
73694,
73695,    def __str__(self):
73696,"        return str(self.__class__) + "": "" + str(self.__dict__)"
73697,"elem = Element('my_name', 'some_symbol', 3)"
73698,print(elem)
73699,"__main__.Element: {'symbol': 'some_symbol', 'name': 'my_name', 'number': 3}"
73700,print(a.__dict__)
73701,class Element:
73702,"    def __init__(self, name, symbol, number):"
73703,        self.name = name
73704,        self.symbol = symbol
73705,        self.number = number
73706,
73707,    def __str__(self):
73708,"        return  str(self.__class__) + '\n'+ '\n'.join(('{} = {}'.format(item, self.__dict__[item]) for item in self.__dict__))"
73709,
73710,"elem = Element('my_name', 'some_symbol', 3)"
73711,print(elem)
73712,<class '__main__.Element'>
73713,name = my_name
73714,symbol = some_symbol
73715,number = 3
73716,def __str__(self):
73717,    return  str(self.__class__) + '\n' + '\n'.join((str(item) + ' = ' + str(self.__dict__[item]) for item in sorted(self.__dict__)))
73718,class Printable:
73719,    def __repr__(self):
73720,        from pprint import pformat
73721,"        return ""<"" + type(self).__name__ + ""> "" + pformat(vars(self), indent=4, width=1)"
73722,
73723,# Example Usage
73724,class MyClass(Printable):
73725,    pass
73726,
73727,my_obj = MyClass()
73728,"my_obj.msg = ""Hello"""
73729,"my_obj.number = ""46"""
73730,print(my_obj)
73731,class Test(object):
73732,"    def __init__(self, a, b):"
73733,        self._a = a
73734,        self._b = b
73735,
73736,    def __str__(self):
73737,"        return ""An instance of class Test with state: a=%s b=%s"" % (self._a, self._b)"
73738,
73739,    def __repr__(self):
73740,"        return 'Test(""%s"",""%s"")' % (self._a, self._b)"
73741,Test
73742,"x = Test('hello', 'world')"
73743,"print 'Human readable: ', str(x)"
73744,"print 'Object representation: ', repr(x)"
73745,print
73746,
73747,y = eval(repr(x))
73748,"print 'Human readable: ', str(y)"
73749,"print 'Object representation: ', repr(y)"
73750,print
73751,Human readable:  An instance of class Test with state: a=hello b=world
73752,"Object representation:  Test(""hello"",""world"")"
73753,
73754,Human readable:  An instance of class Test with state: a=hello b=world
73755,"Object representation:  Test(""hello"",""world"")"
73756,print(foobar.__dict__)
73757,__init__
73758,__repr__
73759,__init__
73760,class Foobar():
73761,"    """"""This will create Foobar type object."""""""
73762,
73763,    def __init__(self):
73764,"        print ""Foobar object is created."""
73765,
73766,    def __repr__(self):
73767,"        return ""Type what do you want to see here."""
73768,
73769,a = Foobar()
73770,
73771,print a
73772,__repr__
73773,__str__
73774,@add_objprint
73775,__str__
73776,print
73777,objprint
73778,from objprint import add_objprint
73779,
73780,class Position:
73781,"    def __init__(self, x, y):"
73782,        self.x = x
73783,        self.y = y
73784,
73785,@add_objprint
73786,class Player:
73787,    def __init__(self):
73788,"        self.name = ""Alice"""
73789,        self.age = 18
73790,"        self.items = [""axe"", ""armor""]"
73791,"        self.coins = {""gold"": 1, ""silver"": 33, ""bronze"": 57}"
73792,"        self.position = Position(3, 5)"
73793,
73794,print(Player())
73795,<Player
73796,"  .name = 'Alice',"
73797,"  .age = 18,"
73798,"  .items = ['axe', 'armor'],"
73799,"  .coins = {'gold': 1, 'silver': 33, 'bronze': 57},"
73800,  .position = <Position
73801,"    .x = 3,"
73802,    .y = 5
73803,  >
73804,>
73805,print(class())
73806,class Element:
73807,"    def __init__(self, name, symbol, number):"
73808,        self.name = name
73809,        self.symbol = symbol
73810,        self.number = number
73811,    def __str__(self):
73812,"        return ""{}: {}\nAtomic Number: {}\n"".format(self.name, self.symbol, self.number"
73813,
73814,class Hydrogen(Element):
73815,    def __init__(self):
73816,"        super().__init__(name = ""Hydrogen"", symbol = ""H"", number = ""1"")"
73817,print(Hydrogen())
73818,__eq__
73819,__hash__
73820,__repr__
73821,"from dataclasses import dataclass, field"
73822,@dataclass
73823,class Test:
73824,"    a: str = field(default=""foo"")"
73825,"    b: str = field(default=""bar"")"
73826,
73827,t = Test()
73828,print(t) 
73829,"# prints Test(a='foo', b='bar')"
73830,repr
73831,False
73832,@dataclass
73833,class Test:
73834,"    a: str = field(default=""foo"")"
73835,"    b: str = field(default=""bar"", repr=False)"
73836,
73837,t = Test()
73838,print(t) 
73839,# prints Test(a='foo')
73840,"l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
73841,"r = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
73842,"r = [(1, 4, 7), (2, 5, 8), (3, 6, 9)]"
73843,# short circuits at shortest nested list if table is jagged:
73844,"list(map(list, zip(*l)))"
73845,
73846,# discards no data if jagged and fills short nested lists with None
73847,"list(map(list, itertools.zip_longest(*l, fillvalue=None)))"
73848,"map(list, zip(*l))"
73849,"[[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
73850,zip(*iterables)
73851,zip
73852,"zip([1, 2], [3, 4], [5, 6])"
73853,args
73854,f(*args)
73855,f
73856,args
73857,f
73858,itertools.zip_longest
73859,"l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
73860,zip(*l)
73861,"zip([1, 2, 3], [4, 5, 6], [7, 8, 9])"
73862,l
73863,zip
73864,"l=[[1,2],[3,4],[5]]"
73865,"[[1,3,5]]"
73866,itertools
73867,zip_longest()
73868,list(zip(*l))
73869,zip(*l)
73870,list(list(it))
73871,list(it)
73872,">>> l=[[1,2,3],[4,5,6],[7,8,9]]"
73873,>>> [list(i) for i in zip(*l)]
73874,"... [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
73875,map()
73876,>>> import numpy as np
73877,>>> np.array(a).T.tolist()
73878,"[[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
73879,">>> map(list,map(None,*a))"
73880,"[[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
73881,map
73882,"map(lambda *a: list(a), *l)"
73883,"map(None, ...)"
73884,next()
73885,TypeError: 'NoneType' object is not callable
73886,">>> m = [[1,2,3],[4,5,6],[7,8,9]]"
73887,>>> [[row[i] for row in m] for i in range(len(m[0]))]
73888,"[[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
73889,[[j[i] for j in l] for i in range(len(l[0]))]
73890,l
73891,import itertools
73892,import six
73893,
73894,"list_list = [[1,2,3], [4,5,6, 6.1, 6.2, 6.3], [7,8,9]]"
73895,map()
73896,zip_longest()
73897,">>> list(map(list, six.moves.zip_longest(*list_list, fillvalue='-')))"
73898,"[[1, 4, 7], [2, 5, 8], [3, 6, 9], ['-', 6.1, '-'], ['-', 6.2, '-'], ['-', 6.3, '-']]"
73899,six.moves.zip_longest()
73900,itertools.izip_longest()
73901,itertools.zip_longest()
73902,None
73903,map()
73904,list()
73905,zip_longest()
73906,">>> [list(row) for row in six.moves.zip_longest(*list_list, fillvalue='-')]"
73907,"[[1, 4, 7], [2, 5, 8], [3, 6, 9], ['-', 6.1, '-'], ['-', 6.2, '-'], ['-', 6.3, '-']]"
73908,map()
73909,map()
73910,">>> map(list, map(None, *list_list))"
73911,"[[1, 4, 7], [2, 5, 8], [3, 6, 9], [None, 6.1, None], [None, 6.2, None], [None, 6.3, None]]"
73912,map()
73913,map()
73914,map()
73915,">>> list(map(list, map(lambda *args: args, *list_list)))"
73916,"[[1, 4, 7], [2, 5, 8], [3, 6, 9]]   // Python 2.7"
73917,"[[1, 4, 7], [2, 5, 8], [3, 6, 9], [None, 6.1, None], [None, 6.2, None], [None, 6.3, None]] // 3.6+"
73918,"solution1 = map(list, zip(*l))"
73919,solution2 = [list(i) for i in zip(*l)]
73920,solution3 = []
73921,for i in zip(*l):
73922,    solution3.append((list(i)))
73923,print(*solution1)
73924,print(*solution2)
73925,print(*solution3)
73926,
73927,"# [1, 4, 7], [2, 5, 8], [3, 6, 9]"
73928,import numpy as np
73929,"r = list(map(list, np.transpose(l)))"
73930,def transpose(lst):
73931,    newlist = []
73932,    i = 0
73933,    while i < len(lst):
73934,        j = 0
73935,        colvec = []
73936,        while j < len(lst):
73937,            colvec.append(lst[j][i])
73938,            j = j + 1
73939,        newlist.append(colvec)
73940,        i = i + 1
73941,    return newlist
73942,more_itertools.unzip()
73943,import more_itertools
73944,"l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
73945,r = more_itertools.unzip(l) # a tuple of generators.
73946,"r = list(map(list, r))      # a list of lists"
73947,import more_itertools
73948,"l = more_itertools.chunked(range(1,10), 3)"
73949,r = more_itertools.unzip(l) # a tuple of generators.
73950,"r = list(map(list, r))      # a list of lists"
73951,"matrix = [[1,2,3],"
73952,"          [1,2,3],"
73953,"          [1,2,3],"
73954,"          [1,2,3],"
73955,"          [1,2,3],"
73956,"          [1,2,3],"
73957,"          [1,2,3]]"
73958,    
73959,rows = len(matrix)
73960,cols = len(matrix[0])
73961,
73962,transposed = []
73963,while len(transposed) < cols:
73964,    transposed.append([])
73965,    while len(transposed[-1]) < rows:
73966,        transposed[-1].append(0)
73967,
73968,for i in range(rows):
73969,    for j in range(cols):
73970,        transposed[j][i] = matrix[i][j]
73971,
73972,for i in transposed:
73973,    print(i)
73974,def transpose(m):
73975,"    for i in range(1, len(m)):"
73976,        for j in range(i):
73977,"            m[i][j], m[j][i] = m[j][i], m[i][j]"
73978,"In [1]: l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
73979,"   ...: fruits = [""Apple"", ""Pear"", ""Peach"",]"
73980,"   ...: [dict(zip(fruits, j)) for j in [list(i) for i in zip(*l)]]"
73981,Out[1]:
73982,"[{'Apple': 1, 'Pear': 4, 'Peach': 7},"
73983," {'Apple': 2, 'Pear': 5, 'Peach': 8},"
73984," {'Apple': 3, 'Pear': 6, 'Peach': 9}]"
73985,maxCol = len(l[0])
73986,for row in l:
73987,    rowLength = len(row)
73988,    if rowLength > maxCol:
73989,        maxCol = rowLength
73990,lTrans = []
73991,for colIndex in range(maxCol):
73992,    lTrans.append([])
73993,    for row in l:
73994,        if colIndex < len(row):
73995,            lTrans[colIndex].append(row[colIndex])
73996,    #Import functions from library
73997,"    from numpy import size, array"
73998,    #Transpose a 2D list
73999,    def transpose_list_2d(list_in_mat):
74000,        list_out_mat = []
74001,        array_in_mat = array(list_in_mat)
74002,        array_out_mat = array_in_mat.T
74003,"        nb_lines = size(array_out_mat, 0)"
74004,"        for i_line_out in range(0, nb_lines):"
74005,            array_out_line = array_out_mat[i_line_out]
74006,            list_out_line = list(array_out_line)
74007,            list_out_mat.append(list_out_line)
74008,        return list_out_mat
74009,time
74010,import time
74011,time.sleep(1)
74012,number of seconds
74013,floating point number of seconds
74014,import time
74015,time.sleep(1) #sleep for 1 sec
74016,time.sleep(0.25) #sleep for 250 milliseconds
74017,time.sleep(secs)
74018,time.sleep(secs)
74019,time.sleep(sec)
74020,WebDriverWait()
74021,expected_conditions()
74022,class selenium.webdriver.support.expected_conditions.presence_of_element_located(locator)
74023,
74024,Parameter : locator - used to find the element returns the WebElement once it is located
74025,
74026,Description : An expectation for checking that an element is present on the DOM of a page. This does not necessarily mean that the element is visible or interactable (i.e. clickable). 
74027,class selenium.webdriver.support.expected_conditions.visibility_of_element_located(locator)
74028,
74029,Parameter : locator -  used to find the element returns the WebElement once it is located and visible
74030,
74031,Description : An expectation for checking that an element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0.
74032,class selenium.webdriver.support.expected_conditions.element_to_be_clickable(locator)
74033,
74034,"Parameter : locator - used to find the element returns the WebElement once it is visible, enabled and interactable (i.e. clickable)."
74035,
74036,"Description : An Expectation for checking an element is visible, enabled and interactable such that you can click it. "
74037,expected_conditions
74038,time.sleep()
74039,time.sleep(0.25)
74040,import time
74041,time.sleep(0.25)
74042,
74043,#0.25 > 250ms
74044,#0.1  > 100ms
74045,#0.05 > 50ms
74046,time.sleep(0.25)
74047,driver.implicitly_wait(0.25)
74048,WebDriverWait(driver).until(document_initialised)
74049,import tkinter as tk
74050,
74051,root = tk.Tk()
74052,"root.title(""root"")"
74053,
74054,other_window = tk.Tk()
74055,"other_window.title(""other_window"")"
74056,
74057,root.mainloop()
74058,Tk
74059,Tk
74060,import tkinter as tk
74061,
74062,def create_window(window_to_be_closed=None):
74063,    if window_to_be_closed:
74064,        window_to_be_closed.destroy()
74065,    window = tk.Tk()
74066,"    tk.Button(window, text=""Quit"", command=lambda arg=window : create_window(arg)).pack()"
74067,    window.mainloop()
74068,
74069,create_window()
74070,Tk
74071,Tk
74072,StringVar
74073,Tk
74074,Tk
74075,Toplevel
74076,Tk
74077,toplevel -use
74078,toplevel -container
74079,Tk
74080,Toplevel
74081,mainloop
74082,tkinter
74083,tk.Tk
74084,tk.Tk
74085,tk.Tk
74086,tk.Tk
74087,master=...
74088,PhotoImage
74089,StringVar
74090,IntVar
74091,import tkinter as tk
74092,
74093,root = tk.Tk()
74094,root2 = tk.Tk()
74095,
74096,variable = tk.StringVar() # Add `master=root2` to fix the problem
74097,"entry = tk.Entry(root2, textvariable=variable)"
74098,"entry.bind(""<Return>"", lambda e: print(repr(variable.get())))"
74099,entry.pack()
74100,
74101,root.mainloop()
74102,master=root2
74103,tk.StringVar()
74104,tkinter
74105,tk.Tk()
74106,tk._default_root
74107,master=...
74108,tk._default_root
74109,.mainloop()
74110,tk.Tk
74111,.mainloop()
74112,tk.Tk
74113,Tk()
74114,Toplevel()
74115,Tk()
74116,Tk()
74117,Tk()
74118,Tk()
74119,from os import startfile
74120,startfile(nameOfTheOtherFile)
74121,Toplevel()
74122,Tk()
74123,os.startfile()
74124,import
74125,import
74126,AttributeError
74127,sys.modules
74128,import foo
74129,bar.py
74130,import bar
74131,foo.py
74132,from foo import abc
74133,bar.py
74134,from bar import xyz
74135,foo.py
74136,from foo import *
74137,from bar import *
74138,from x import y
74139,import
74140,from foo import *
74141,from bar import *
74142,foo
74143,bar
74144,bar
74145,"print ""a in"""
74146,import sys
74147,"print ""b imported: %s"" % (""b"" in sys.modules, )"
74148,import b
74149,"print ""a out"""
74150,"print ""b in"""
74151,import a
74152,"print ""b out"""
74153,x = 3
74154,$ python a.py
74155,a in
74156,b imported: False
74157,b in
74158,a in
74159,b imported: True
74160,a out
74161,b out
74162,a out
74163,a in
74164,b
74165,b.x
74166,a
74167,AttributeError
74168,a.py
74169,print b.x
74170,$ python a.py
74171,a in                    
74172,b imported: False
74173,b in
74174,a in
74175,b imported: True
74176,a out
74177,Traceback (most recent call last):
74178,"  File ""a.py"", line 4, in <module>"
74179,    import b
74180,"  File ""/home/shlomme/tmp/x/b.py"", line 2, in <module>"
74181,    import a
74182," File ""/home/shlomme/tmp/x/a.py"", line 7, in <module>"
74183,    print b.x
74184,AttributeError: 'module' object has no attribute 'x'
74185,b.x
74186,x = 3
74187,b out
74188,__name__
74189,'a'
74190,def dostuff(self):
74191,     from foo import bar
74192,     ...
74193,ImportError
74194,import()
74195,ImportErrors
74196,# profiles/serializers.py
74197,
74198,from images.serializers import SimplifiedImageSerializer
74199,
74200,class SimplifiedProfileSerializer(serializers.Serializer):
74201,    name = serializers.CharField()
74202,
74203,class ProfileSerializer(SimplifiedProfileSerializer):
74204,    recent_images = SimplifiedImageSerializer(many=True)
74205,# images/serializers.py
74206,
74207,from profiles.serializers import SimplifiedProfileSerializer
74208,
74209,class SimplifiedImageSerializer(serializers.Serializer):
74210,    title = serializers.CharField()
74211,
74212,class ImageSerializer(SimplifiedImageSerializer):
74213,    profile = SimplifiedProfileSerializer()
74214,1:54:00
74215,try:
74216,    from images.serializers import SimplifiedImageSerializer
74217,except ImportError:
74218,    import sys
74219,    SimplifiedImageSerializer = sys.modules[__package__ + '.SimplifiedImageSerializer']
74220,SimplifiedImageSerializer
74221,ImportError
74222,module
74223,class
74224,import b
74225,"print(""This is from module a"")"
74226,import a
74227,"print(""This is from module b"")"
74228,>>> 
74229,'This is from module a'
74230,'This is from module b'
74231,'This is from module a'
74232,>>> 
74233,import b
74234,import a
74235,import b
74236,"""This is from module a"""
74237,"""This is from module b"""
74238,"""This is from module a"""
74239,a.py
74240,__main__
74241,a
74242,b
74243,import a
74244,__main__
74245,main.py
74246,from src.exceptions import SpecificException
74247,
74248,class Foo:
74249,"    def __init__(self, attrib: int):"
74250,        self.attrib = attrib
74251,
74252,raise SpecificException(Foo(5))
74253,exceptions.py
74254,from src.main import Foo
74255,
74256,class SpecificException(Exception):
74257,"    def __init__(self, cause: Foo):"
74258,        self.cause = cause
74259,
74260,    def __str__(self):
74261,        return f'Expected 3 but got {self.cause.attrib}.'
74262,ImportError
74263,main.py
74264,exception.py
74265,Foo
74266,SpecificException
74267,Foo
74268,exceptions.py
74269,TYPE_CHECKING
74270,True
74271,Foo
74272,from typing import TYPE_CHECKING
74273,if TYPE_CHECKING:  # Only imports the below statements during type checking
74274,   from src.main import Foo
74275,
74276,class SpecificException(Exception):
74277,"   def __init__(self, cause: 'Foo'):  # The quotes make Foo a forward reference"
74278,       self.cause = cause
74279,
74280,   def __str__(self):
74281,       return f'Expected 3 but got {self.cause.attrib}.'
74282,from __future__ import annotations
74283,from typing import TYPE_CHECKING
74284,if TYPE_CHECKING:  # Only imports the below statements during type checking
74285,   from src.main import Foo
74286,
74287,class SpecificException(Exception):
74288,"   def __init__(self, cause: Foo):  # Foo can be used in type hints without issue"
74289,       self.cause = cause
74290,
74291,   def __str__(self):
74292,       return f'Expected 3 but got {self.cause.attrib}.'
74293,from __future__ import annotations
74294,import bar
74295,
74296,class gX(object):
74297,    g = 10
74298,from foo import gX
74299,
74300,o = gX()
74301,import foo
74302,import bar
74303,
74304,"print ""all done"""
74305,Traceback (most recent call last):
74306,"  File ""m.py"", line 1, in <module>"
74307,    import foo
74308,"  File ""/home/xolve/foo.py"", line 1, in <module>"
74309,    import bar
74310,"  File ""/home/xolve/bar.py"", line 1, in <module>"
74311,    from foo import gX
74312,ImportError: cannot import name gX
74313,import bar
74314,foo.py
74315,bar
74316,foo
74317,gX
74318,gX
74319,foo
74320,bar
74321,bar
74322,gX
74323,gX
74324,from b import B
74325,
74326,class A:
74327,    @staticmethod
74328,    def save_result(result):
74329,        print('save the result')
74330,
74331,    @staticmethod
74332,    def do_something_a_ish(param):
74333,        A.save_result(A.use_param_like_a_would(param))
74334,    
74335,    @staticmethod
74336,    def do_something_related_to_b(param):
74337,        B.do_something_b_ish(param)
74338,from a import A
74339,
74340,class B:
74341,    @staticmethod
74342,    def do_something_b_ish(param):
74343,        A.save_result(B.use_param_like_b_would(param))
74344,c.py
74345,def save_result(result):
74346,    print('save the result')
74347,save_result
74348,from b import B
74349,from c import save_result
74350,
74351,class A:
74352,    @staticmethod
74353,    def do_something_a_ish(param):
74354,        save_result(A.use_param_like_a_would(param))
74355,    
74356,    @staticmethod
74357,    def do_something_related_to_b(param):
74358,        B.do_something_b_ish(param)
74359,from c import save_result
74360,
74361,class B:
74362,    @staticmethod
74363,    def do_something_b_ish(param):
74364,        save_result(B.use_param_like_b_would(param))
74365,staticmethod
74366,# Hack to import something without circular import issue
74367,def load_module(name):
74368,"    """"""Load module using imp.find_module"""""""
74369,"    names = name.split(""."")"
74370,    path = None
74371,    for name in names:
74372,"        f, path, info = imp.find_module(name, path)"
74373,        path = [path]
74374,"    return imp.load_module(name, f, path[0], info)"
74375,"constants = load_module(""app.constants"")"
74376,print 'import b'
74377,import b
74378,print 'a in globals() {}'.format('a' in globals())
74379,print 'import a'
74380,import a
74381,print 'a in globals() {}'.format('a' in globals())
74382,if __name__ == '__main__':
74383,    print 'imports done'
74384,"    print 'b has y {}, a is b.a {}'.format(hasattr(b, 'y'), a is b.a)"
74385,"print ""b in, __name__ = {}"".format(__name__)"
74386,x = 3
74387,print 'b imports a'
74388,import a
74389,y = 5
74390,"print ""b out"""
74391,"print 'a in, __name__ = {}'.format(__name__)"
74392,print 'a imports b'
74393,import b
74394,"print 'b has x {}'.format(hasattr(b, 'x'))"
74395,"print 'b has y {}'.format(hasattr(b, 'y'))"
74396,"print ""a out"""
74397,import b
74398,"b in, __name__ = b    # b code execution started"
74399,b imports a
74400,"a in, __name__ = a    # a code execution started"
74401,a imports b           # b code execution is already in progress
74402,b has x True
74403,"b has y False         # b defines y after a import,"
74404,a out
74405,b out
74406,a in globals() False  # import only adds a to main global symbol table 
74407,import a
74408,a in globals() True
74409,imports done
74410,"b has y True, a is b.a True # all b objects are available"
74411,request.py
74412,import request
74413,aaa.py
74414,request.py
74415,a.py
74416,b.py
74417,a.py
74418,"if __name__ == ""__main__"":"
74419,        main ()
74420,import b
74421,y = 2
74422,def main():
74423,"    print (""a out"")"
74424,    print (b.x)
74425,
74426,"if __name__ == ""__main__"":"
74427,    main ()
74428,import a
74429,"print (""b out"")"
74430,x = 3 + a.y
74431,>>> b out 
74432,>>> a out 
74433,>>> 5
74434,a
74435,b
74436,def
74437,class
74438,b
74439,a
74440,def
74441,class
74442,a
74443,b
74444,a
74445,a
74446,b
74447,b
74448,a
74449,import b
74450,b
74451,def
74452,class
74453,a
74454,CLASS
74455,from a import CLASS
74456,b
74457,b
74458,class A(object):
74459,
74460,"     def __init__(self, name):"
74461,
74462,         self.name = name
74463,
74464,"CLASS = A(""me"")"
74465,
74466,import b
74467,
74468,go = B(6)
74469,
74470,go.dostuff
74471,class B(object):
74472,
74473,"     def __init__(self, number):"
74474,
74475,         self.number = number
74476,
74477,     def dostuff(self):
74478,
74479,         from a import CLASS
74480,
74481,"         print ""Hello "" + CLASS.name + "", "" + str(number) + "" is an interesting number."""
74482,from a import CLASS
74483,import b
74484,go.dostuff()
74485,import a
74486,import a
74487,TypeErrors
74488,.
74489,mypy
74490, # type: type
74491,# type: type
74492,typing
74493,Py3.5
74494,collections.abc
74495,__getitem__()
74496,mypy documentation
74497,# type: type
74498,typing
74499,"# Generic List, supports indexing."
74500,from typing import List
74501,
74502,"# In this case, the type is easily inferred as type: int."
74503,i = 0
74504,
74505,# Even though the type can be inferred as of type list
74506,# there is no way to know the contents of this list.
74507,# By using type: List[str] we indicate we want to use a list of strings.
74508,a = []  # type: List[str]
74509,
74510,# Appending an int to our list
74511,# is statically not correct.
74512,a.append(i)
74513,
74514,# Appending a string is fine.
74515,"a.append(""i"")"
74516,
74517,"print(a)  # [0, 'i']"
74518,print(a)
74519,a
74520,# type
74521,mypy
74522,(Python3)jimmi@jim: mypy typeHintsCode.py
74523,"typesInline.py:14: error: Argument 1 to ""append"" of ""list"" has incompatible type ""int""; expected ""str"""
74524,str
74525,int
74526,a
74527,str
74528,a
74529,List[Any]
74530,Any
74531,typing
74532,param_name : type
74533,-> type
74534,__annotations__
74535,typing
74536,"def annotated(x: int, y: str) -> bool:"
74537,    return x < y
74538,annotated.__annotations__
74539,"{'y': <class 'str'>, 'return': <class 'bool'>, 'x': <class 'int'>}"
74540,TypeError
74541,annotated
74542,(Python3)jimmi@jim: mypy typeHintsCode.py
74543,"typeFunction.py: note: In function ""annotated"":"
74544,"typeFunction.py:2: error: Unsupported operand types for > (""str"" and ""int"")"
74545,"annotated(20, 20)"
74546,
74547,# mypy complains:
74548,"typeHintsCode.py:4: error: Argument 2 to ""annotated"" has incompatible type ""int""; expected ""str"""
74549,typing
74550,mypy
74551,.pyi
74552,randfunc.py
74553,def message(s):
74554,    print(s)
74555,
74556,def alterContents(myIterable):
74557,    return [i for i in myIterable if i % 2 == 0]
74558,
74559,"def combine(messageFunc, itFunc):"
74560,"    messageFunc(""Printing the Iterable"")"
74561,"    a = alterContents(range(1, 20))"
74562,    return set(a)
74563,randfunc.pyi
74564,pass
74565,int
74566,# Stub for randfucn.py
74567,"from typing import Iterable, List, Set, Callable"
74568,
74569,def message(s: str) -> None: pass
74570,
74571,def alterContents(myIterable: Iterable[int])-> List[int]: pass
74572,
74573,def combine(
74574,"    messageFunc: Callable[[str], Any],"
74575,"    itFunc: Callable[[Iterable[int]], List[int]]"
74576,)-> Set[int]: pass
74577,combine
74578,mypy
74579,typeshed
74580,__init__
74581,Counter
74582,.pyi
74583,"class Counter(Dict[_T, int], Generic[_T]):"
74584,        @overload
74585,        def __init__(self) -> None: ...
74586,        @overload
74587,"        def __init__(self, Mapping: Mapping[_T, int]) -> None: ..."
74588,        @overload
74589,"        def __init__(self, iterable: Iterable[_T]) -> None: ..."
74590,_T = TypeVar('_T')
74591,Counter
74592,Mapping
74593,int
74594,Iterable
74595,typing
74596,PEP 526
74597,# type
74598,varname: type
74599,typing
74600,str
74601,def greeting(name: str) -> str:
74602,    return 'Hello ' + name
74603,typing
74604,"def add(self, ic:int)"
74605,return...
74606,class C1:
74607,    def __init__(self):
74608,        self.idn = 1
74609,"    def add(self, ic: int):"
74610,        return self.idn + ic
74611,
74612,c1 = C1()
74613,c1.add(2)
74614,
74615,c1.add(c1)
74616,Traceback (most recent call last):
74617,"  File ""<input>"", line 1, in <module>"
74618,"  File ""<input>"", line 5, in add"
74619,TypeError: unsupported operand type(s) for +: 'int' and 'C1'
74620,from typing import List
74621,
74622,name: str = 'Tommy'
74623,age: int = 24
74624,height_in_meters: float = 1.7
74625,"@app.route(""/summary"")"
74626,def summary():
74627,    d = make_summary()
74628,    # send it back as json
74629,jsonify
74630,"@app.route(""/summary"")"
74631,def summary():
74632,    d = make_summary()
74633,    return d
74634,jsonify
74635,from flask import jsonify
74636,
74637,"@app.route(""/summary"")"
74638,def summary():
74639,    d = make_summary()
74640,    return jsonify(d)
74641,jsonify
74642,jsonify
74643,status=200
74644,mimetype='application/json'
74645,from flask import json
74646,
74647,@app.route('/summary')
74648,def summary():
74649,    data = make_summary()
74650,    response = app.response_class(
74651,"        response=json.dumps(data),"
74652,"        status=200,"
74653,        mimetype='application/json'
74654,    )
74655,    return response
74656,flask.jsonify
74657,@app.route('/_get_current_user')
74658,def get_current_user():
74659,    return jsonify(
74660,"        username=g.user.username,"
74661,"        email=g.user.email,"
74662,        id=g.user.id
74663,    )
74664,{
74665,"    ""username"": ""admin"","
74666,"    ""email"": ""admin@localhost"","
74667,"    ""id"": 42"
74668,}
74669,jsonify(d)
74670,jsonify
74671,flask.json.dumps
74672,application/json
74673,from flask import json
74674,
74675,@app.route('/summary')
74676,def summary():
74677,    data = make_summary()
74678,    response = app.response_class(
74679,"        response=json.dumps(data),"
74680,        mimetype='application/json'
74681,    )
74682,    return response
74683,flask.json
74684,json
74685,simplejson
74686,make_response
74687,"from flask import jsonify, make_response"
74688,
74689,@app.route('/summary')
74690,def summary():
74691,    d = make_summary()
74692,"    return make_response(jsonify(d), 200)"
74693,"@app.route(""/users"", methods=['GET'])"
74694,def get_user():
74695,    return {
74696,"        ""user"": ""John Doe"","
74697,    }
74698,request.files
74699,"from flask import request, jsonify"
74700,from werkzeug import secure_filename
74701,
74702,"@app.route('/summary', methods=['GET', 'POST'])"
74703,def summary():
74704,    if request.method == 'POST':
74705,        csv = request.files['data']
74706,        return jsonify(
74707,"            summary=make_summary(csv),"
74708,            csv_name=secure_filename(csv.filename)
74709,        )
74710,
74711,    return render_template('submit_data.html')
74712,'data'
74713,request.files
74714,jsonify
74715,jsonify
74716,"@app.route(""/"")"
74717,def index():
74718,    return {
74719,"        ""api_stuff"": ""values"","
74720,    }
74721,"@app.route(""/"")"
74722,def index():
74723,    return jsonify({
74724,"        ""api_stuff"": ""values"","
74725,    })
74726,jsonfiy
74727,"content, status"
74728,app.errorhandler
74729,import functools
74730,from flask import jsonify
74731,
74732,def return_json(f):
74733,    @functools.wraps(f)
74734,    def inner(**kwargs):
74735,        return jsonify(f(**kwargs))
74736,
74737,    return inner
74738,
74739,@app.route('/test/<arg>')
74740,@return_json
74741,def test(arg):
74742,    if arg == 'list':
74743,"        return [1, 2, 3]"
74744,    elif arg == 'dict':
74745,"        return {'a': 1, 'b': 2}"
74746,    elif arg == 'bool':
74747,        return True
74748,    return 'none of them'
74749,jsonfiy
74750,@app.route('/get_records')
74751,def get_records():
74752,    results = [
74753,        {
74754,"          ""rec_create_date"": ""12 Jun 2016"","
74755,"          ""rec_dietary_info"": ""nothing"","
74756,"          ""rec_dob"": ""01 Apr 1988"","
74757,"          ""rec_first_name"": ""New"","
74758,"          ""rec_last_name"": ""Guy"","
74759,"        },"
74760,        {
74761,"          ""rec_create_date"": ""1 Apr 2016"","
74762,"          ""rec_dietary_info"": ""Nut allergy"","
74763,"          ""rec_dob"": ""01 Feb 1988"","
74764,"          ""rec_first_name"": ""Old"","
74765,"          ""rec_last_name"": ""Guy"","
74766,"        },"
74767,    ]
74768,    return jsonify(results=list)
74769,make_summary()
74770,from flask import Flask
74771,
74772,app = Flask(__name__)
74773,
74774,@app.route('/summary')
74775,def summary():
74776,    d = make_summary()
74777,    return d
74778,"(dict, int)"
74779,dict
74780,int
74781,from flask import Flask
74782,
74783,app = Flask(__name__)
74784,
74785,@app.route('/summary')
74786,def summary():
74787,    d = make_summary()
74788,"    return d, 201  # 200 is the default"
74789,"curl --request GET ""http://127.0.0.1:5000/summary"" -w ""\ncode: %{http_code}\n\n"""
74790,"from flask import Flask, request, jsonify"
74791,from flask.views import MethodView
74792,
74793,app = Flask(__name__)
74794,
74795,class Summary(MethodView):
74796,    def get(self):
74797,        d = make_summary()
74798,        return jsonify(d)
74799,
74800,"app.add_url_rule('/summary/', view_func=Summary.as_view('summary'))"
74801,def summary():
74802,    d = make_summary()
74803,"    return d, 200"
74804,jsonify
74805,flask
74806,make_response
74807,jsonify
74808,make_response
74809,"    @app.route(""/summary"")"
74810,    def summary():
74811,"        responseBody = { ""message"": ""bla bla bla"", ""summary"": make_summary() }"
74812,"        return make_response(jsonify(responseBody), 200)"
74813,responseBody
74814,snake_case
74815,MainWindow
74816,design.ui
74817,Ui_Design.py
74818,"from PyQt5 import QtCore, QtGui, QtWidgets"
74819,
74820,class Ui_MainWindow(object):
74821,"    def setupUi(self, MainWindow):"
74822,        [...]
74823,
74824,"    def retranslateUi(self, MainWindow):"
74825,        [...]
74826,logic.py
74827,"class Logic(QMainWindow, Ui_MainWindow):"
74828,"    def __init__(self, *args, **kwargs):"
74829,"        QMainWindow.__init__(self, *args, **kwargs)"
74830,        self.setupUi(self)
74831,"class Logic(PyQtClass, DesignClass):"
74832,"    def __init__(self, *args, **kwargs):"
74833,"        PyQtClass.__init__(self, *args, **kwargs)"
74834,        self.setupUi(self)
74835,   Template                      PyQtClass
74836, ─────────────────────────────────────────────
74837,   Main Window                   QMainWindow
74838,   Widget                        QWidget 
74839,   Dialog with Buttons Bottom    QDialog
74840,   Dialog with Buttons Right     QDialog
74841,   Dialog with Without Buttons   QDialog
74842,"class Logic(QMainWindow, Ui_MainWindow):"
74843,"    def __init__(self, *args, **kwargs):"
74844,"        QMainWindow.__init__(self, *args, **kwargs)"
74845,        self.setupUi(self)
74846,"    def closeEvent(self, event):"
74847,        answer = QtWidgets.QMessageBox.question(
74848,"            self,"
74849,"            'Are you sure you want to quit ?',"
74850,"            'Task is in progress !',"
74851,"            QtWidgets.QMessageBox.Yes,"
74852,            QtWidgets.QMessageBox.No)
74853,        if answer == QtWidgets.QMessageBox.Yes:
74854,            event.accept()
74855,        else:
74856,            event.ignore()
74857,from PyQt5.QtWidgets import QMainWindow
74858,# imports
74859,from PyQt5 import uic
74860,
74861,# load ui file
74862,"baseUIClass, baseUIWidget = uic.loadUiType(""MainGui.ui"")"
74863,
74864,# use loaded ui file in the logic class
74865,"class Logic(baseUIWidget, baseUIClass):"
74866,"    def __init__(self, parent=None):"
74867,"        super(Logic, self).__init__(parent)"
74868,        self.setupUi(self)
74869,         .
74870,         .
74871,         .
74872,         .
74873,
74874,def main():
74875,    app = QtWidgets.QApplication(sys.argv)
74876,    ui = Logic(None)
74877,    ui.showMaximized()
74878,    sys.exit(app.exec_())
74879,Import pygame
74880,
74881,pygame.init()
74882,
74883,BG = pygame.image.load('_pycache_/test_bg.jpg')
74884,
74885,def DrawGameWin():
74886,"    window.blit(BG,(0,0))"
74887,
74888,pygame.display.update()
74889,
74890,
74891,DrawGameWin()
74892,__file__
74893,os.getcwd()
74894,os.chdir(path)
74895,import os
74896,
74897,os.chdir(os.path.dirname(os.path.abspath(__file__)))
74898,os.path.join()
74899,import pygame
74900,import os
74901,
74902,# get the directory of this file
74903,sourceFileDir = os.path.dirname(os.path.abspath(__file__))
74904,
74905,# [...]
74906,
74907,# join the filepath and the filename
74908,"filePath = os.path.join(sourceFileDir, 'test_bg.jpg')"
74909,"# filePath = os.path.join(sourceFileDir, '_pycache_/test_bg.jpg')"
74910,
74911,surface = pygame.image.load(filePath)
74912,pathlib
74913,"import os, pathlib"
74914,
74915,os.chdir(pathlib.Path(__file__).resolve().parent)
74916,import pathlib
74917,
74918,# [...]
74919,
74920,filePath = pathlib.Path(__file__).resolve().parent / 'test_bg.jpg'
74921,surface = pygame.image.load(filePath)
74922,o
74923,str
74924,isinstance
74925,o
74926,str
74927,str
74928,"if isinstance(o, str):"
74929,o
74930,str
74931,str
74932,if type(o) is str:
74933,"if issubclass(type(o), str):"
74934,o
74935,"if isinstance(o, basestring):"
74936,unicode
74937,str
74938,str
74939,unicode
74940,basestring
74941,basestring
74942,str
74943,bytes
74944,isinstance
74945,True
74946,o
74947,"(str, unicode)"
74948,"if isinstance(o, (str, unicode)):"
74949,type(a) is Object
74950,"isinstance(a, Object)"
74951,type(a) is SubClassOfObject
74952,type(a) is Object == False
74953,"isinstance(a, Object) == True"
74954,a is b
74955,a
74956,b
74957,isinstance()
74958,isinstance()
74959,len()
74960,isinstance
74961,try...except
74962,file
74963,.write()
74964,"isinstance(obj, cls)"
74965,"if hasattr(ob, ""write"") and callable(ob.write):"
74966,"func = getattr(ob, ""write"", None)"
74967,if callable(func): ...
74968,hasattr
74969,"isinstance(o, str)"
74970,True
74971,o
74972,str
74973,str
74974,type(o) is str
74975,True
74976,o
74977,False
74978,o
74979,str
74980,isinstance
74981,type(var) == type('')
74982,def foo(i: int):
74983,    return i
74984,
74985,foo(5)
74986,foo('oops')
74987,foo('oops')
74988,int
74989,mypy
74990,mypy script.py
74991,"script.py:12: error: Argument 1 to ""foo"" has incompatible type ""str""; expected ""int"""
74992,mypy
74993,list
74994,typing
74995,Iterable
74996,Callable
74997,mypy
74998,importlib
74999,|
75000,isinstance
75001,">>> isinstance('1223', int | str) "
75002,True
75003,
75004,">>> isinstance('abcd', int | str) "
75005,True
75006,">>> a = [1,2,3,4]  "
75007,>>> b = 1  
75008,>>> type(a).__name__
75009,'list'
75010,>>> type(a).__name__ == 'list'
75011,True
75012,>>> type(b).__name__ == 'list'
75013,False
75014,>>> type(b).__name__
75015,'int'
75016,class Bomb:
75017,    def talk(self):
75018,        self.explode()
75019,
75020,    def explode(self):
75021,"        print(""BOOM!, The bomb explodes."")"
75022,
75023,class Duck:
75024,    def talk(self):
75025,"        print(""I am a duck, I will not blow up if you ask me to talk."")"
75026,
75027,class Kid:
75028,    kids_duck = None
75029,
75030,    def __init__(self):
75031,"        print(""Kid comes around a corner and asks you for money so he could buy a duck."")"
75032,
75033,"    def take_duck(self, duck):"
75034,        self.kids_duck = duck
75035,"        print(""The kid accepts the duck, and happily skips along."")"
75036,
75037,    def do_your_thing(self):
75038,"        print(""The kid tries to get the duck to talk."")"
75039,        self.kids_duck.talk()
75040,
75041,my_kid = Kid()
75042,my_kid.take_duck(Bomb())
75043,my_kid.do_your_thing()
75044,__file__
75045,"isinstance(o, str)"
75046,from typeguard import check_type
75047,from typing import List
75048,
75049,try:
75050,"    check_type('mylist', [1, 2], List[int])"
75051,except TypeError as e:
75052,    print(e)
75053,"check_type('foo', [1, 3.14], List[Union[int, float]])"
75054,# vs
75055,"isinstance(foo, list) and all(isinstance(a, (int, float)) for a in foo) "
75056,AttributeError
75057,urllib2.urlopen()
75058,read()
75059,isinstance()
75060,"isinstance, issubclass, type"
75061,def sum(nums):
75062,"    """"""Expect an iterable of integers and return the sum."""""""
75063,    result = 0
75064,    for n in nums:
75065,        result += n
75066,    return result
75067,__iter__
75068,def sum(nums):
75069,"    """"""Try to catch exceptions?"""""""
75070,    try:
75071,        result = 0
75072,        for n in nums:
75073,            result += n
75074,        return result
75075,    except TypeError as e:
75076,        print(e)
75077,TypeError
75078,specific types
75079,specific behaviors
75080,nums
75081,n
75082,float
75083,int
75084,int
75085,nums
75086,TypeError
75087,def sum(nums):
75088,"    """""""
75089,    Try to catch all of our exceptions only.
75090,    Re-raise them with more specific details.
75091,"    """""""
75092,    result = 0
75093,
75094,    try:
75095,        iter(nums)
75096,    except TypeError as e:
75097,"        raise TypeError(""nums must be iterable"")"
75098,
75099,    for n in nums:
75100,        try:
75101,            result += int(n)
75102,        except TypeError as e:
75103,"            raise TypeError(""stopped mid iteration since a non-integer was found"")"
75104,
75105,    return result
75106,from typing import Iterable
75107,
75108,def sum(nums: Iterable[int]) -> int:
75109,    result = 0
75110,    for n in nums:
75111,        result += n
75112,    return result
75113,typeguard
75114,dataclasses
75115,help(...)
75116,list
75117,array
75118,try:
75119,   my_sequence.extend(o)
75120,except TypeError:
75121,  my_sequence.append(o)
75122,[ ]
75123,>>> a  = 1
75124,>>> type(a) == type(1)
75125,True
75126,>>> b = 'abc'
75127,>>> type(b) == type('')
75128,True
75129,from typing import NewType
75130,"UserId = NewType ('UserId', int)"
75131,some_id = UserId (524313`)
75132,import glob
75133,import pandas as pd
75134,
75135,# get data file names
75136,path =r'C:\DRO\DCL_rawdata_files'
75137,"filenames = glob.glob(path + ""/*.csv"")"
75138,
75139,dfs = []
75140,for filename in filenames:
75141,    dfs.append(pd.read_csv(filename))
75142,
75143,# Concatenate all data into one DataFrame
75144,"big_frame = pd.concat(dfs, ignore_index=True)"
75145,.read_
75146,csv
75147,header=0
75148,csv
75149,import pandas as pd
75150,import glob
75151,import os
75152,
75153,path = r'C:\DRO\DCL_rawdata_files' # use your path
75154,"all_files = glob.glob(os.path.join(path , ""/*.csv""))"
75155,
75156,li = []
75157,
75158,for filename in all_files:
75159,"    df = pd.read_csv(filename, index_col=None, header=0)"
75160,    li.append(df)
75161,
75162,"frame = pd.concat(li, axis=0, ignore_index=True)"
75163,"all_files = glob.glob(os.path.join(path, ""*.csv""))"
75164,
75165,"df = pd.concat((pd.read_csv(f) for f in all_files), ignore_index=True)"
75166,pathlib
75167,from pathlib import Path
75168,import pandas as pd
75169,import numpy as np
75170,
75171,path = r'C:\DRO\DCL_rawdata_files'  # or unix / linux / mac path
75172,
75173,# get the files from the path provided in the OP
75174,files = Path(path).glob('*.csv')  # .rglob to get subdirectories
75175,dfs = list()
75176,for f in files:
75177,    data = pd.read_csv(f)
75178,    # .stem is method for pathlib objects to get the filename w/o the extension
75179,    data['file'] = f.stem
75180,    dfs.append(data)
75181,    
75182,"df = pd.concat(dfs, ignore_index=True)"
75183,enumerate
75184,dfs = list()
75185,"for i, f in enumerate(files):"
75186,    data = pd.read_csv(f)
75187,    data['file'] = f'File {i}'
75188,    dfs.append(data)
75189,    
75190,"df = pd.concat(dfs, ignore_index=True)"
75191,np.repeat
75192,[f'S{i}' for i in range(len(dfs))]
75193,[len(df) for df in dfs]
75194,# read the files into dataframes
75195,dfs = [pd.read_csv(f) for f in files]
75196,
75197,# combine the list of dataframes
75198,"df = pd.concat(dfs, ignore_index=True)"
75199,
75200,# add a new column
75201,"df['Source'] = np.repeat([f'S{i}' for i in range(len(dfs))], [len(df) for df in dfs])"
75202,.assign
75203,"df = pd.concat((pd.read_csv(f).assign(filename=f.stem) for f in files), ignore_index=True)"
75204,"df = pd.concat((pd.read_csv(f).assign(Source=f'S{i}') for i, f in enumerate(files)), ignore_index=True)"
75205,df = pd.concat((pd.read_csv(f) for f in all_files))
75206,"os.path.join(path, ""*.csv"")"
75207,"path + ""/*.csv"""
75208,path = r'C:\DRO\DCL_rawdata_files'                     # use your path
75209,"all_files = glob.glob(os.path.join(path, ""*.csv""))     # advisable to use os.path.join as this makes concatenation OS independent"
75210,
75211,df_from_each_file = (pd.read_csv(f) for f in all_files)
75212,"concatenated_df   = pd.concat(df_from_each_file, ignore_index=True)"
75213,"# doesn't create a list, nor does it append to one"
75214,"pd.concat((pd.read_csv(f) for f in all_files), ignore_index=True)"
75215,glob.iglob
75216,glob.glob
75217,import glob
75218,import os
75219,import pandas as pd   
75220,"df = pd.concat(map(pd.read_csv, glob.glob(os.path.join('', ""my_files*.csv""))))"
75221,"df = pd.concat(map(lambda file: pd.read_csv(file, delim_whitespace=True), data_files))"
75222,functools.partial
75223,"df = pd.concat(map(pd.read_csv, ['d1.csv', 'd2.csv','d3.csv']))"
75224,import os
75225,
75226,"filepaths = [f for f in os.listdir(""."") if f.endswith('.csv')]"
75227,"df = pd.concat(map(pd.read_csv, filepaths))"
75228,def f(i):
75229,"    return pd.read_csv(i, header=None)"
75230,
75231,"df = pd.concat(map(f, filepaths))"
75232,pd.read_csv()
75233,"df = pd.concat(map(pd.read_csv, glob.glob('data/*.csv))"
75234,"df = pd.concat(map(pd.read_csv(header=0), glob.glob('data/*.csv))"
75235,csv
75236,import glob
75237,import pandas as pd
75238,
75239,"df = pd.concat(map(pd.read_csv, glob.glob('data/*.csv')))"
75240,>>> import dask.dataframe as dd
75241,>>> df = dd.read_csv('data*.csv')
75242,df.compute()
75243,import os
75244,import glob
75245,import pandas as pd
75246,import numpy as np
75247,
75248,"path = ""my_dir_full_path"""
75249,"allFiles = glob.glob(os.path.join(path,""*.csv""))"
75250,
75251,
75252,np_array_list = []
75253,for file_ in allFiles:
75254,"    df = pd.read_csv(file_,index_col=None, header=0)"
75255,    np_array_list.append(df.as_matrix())
75256,
75257,comb_np_array = np.vstack(np_array_list)
75258,big_frame = pd.DataFrame(comb_np_array)
75259,
75260,"big_frame.columns = [""col1"",""col2""....]"
75261,total files :192
75262,avg lines per file :8492
75263,--approach 1 without numpy -- 8.248656988143921 seconds ---
75264,total records old :1630571
75265,--approach 2 with numpy -- 2.289292573928833 seconds ---
75266,map
75267,import pandas as pd
75268,import glob
75269,import functools
75270,
75271,"df = pd.concat(map(functools.partial(pd.read_csv, sep='|', compression=None), "
75272,"                    glob.glob(""data/*.csv"")))"
75273,map
75274,from glob import iglob
75275,import pandas as pd
75276,
75277,path = r'C:\user\your\path\**\*.csv'
75278,
75279,"all_rec = iglob(path, recursive=True)     "
75280,dataframes = (pd.read_csv(f) for f in all_rec)
75281,"big_dataframe = pd.concat(dataframes, ignore_index=True)"
75282,"df = pd.concat((pd.read_csv(f) for f in iglob(path, recursive=True)), ignore_index=True)"
75283,**
75284,iglob
75285,glob
75286,"df = read_df_rec('C:\user\your\path', *.csv)"
75287,from glob import iglob
75288,from os.path import join
75289,import pandas as pd
75290,
75291,"def read_df_rec(path, fn_regex=r'*.csv'):"
75292,    return pd.concat((pd.read_csv(f) for f in iglob(
75293,"        join(path, '**', fn_regex), recursive=True)), ignore_index=True)"
75294,import glob
75295,import pandas as pd
75296,
75297,list_of_csv_files = glob.glob(directory_path + '/*.csv')
75298,list_of_csv_files.sort()
75299,
75300,"df = pd.concat(map(pd.read_csv, list_of_csv_files), ignore_index=True)"
75301,glob.glob
75302,pd.concat
75303,ignore_index=True
75304,    timestamp    id    valid_frame
75305,0
75306,1
75307,2
75308,.
75309,.
75310,.
75311,0
75312,1
75313,2
75314,.
75315,.
75316,.
75317,ignore_index=True
75318,    timestamp    id    valid_frame
75319,0
75320,1
75321,2
75322,.
75323,.
75324,.
75325,108
75326,109
75327,.
75328,.
75329,.
75330,begin_timestamp = df['timestamp'][0]
75331,ignore_index=True
75332,df['timestamp'][0]
75333,df = pd.concat([pd.read_csv(f'dir/{f}') for f in os.listdir('dir') if f.endswith('.csv')])
75334,import zipfile
75335,import pandas as pd
75336,
75337,ziptrain = zipfile.ZipFile('yourpath/yourfile.zip')
75338,
75339,train = []
75340,
75341,train = [ pd.read_csv(ziptrain.open(f)) for f in ziptrain.namelist() ]
75342,
75343,df = pd.concat(train)
75344,
75345,    
75346,pathlib
75347,os.path
75348,concat()
75349,apped()
75350,import pandas as pd
75351,from pathlib import Path
75352,
75353,"dir = Path(""../relevant_directory"")"
75354,
75355,"df = (pd.read_csv(f) for f in dir.glob(""*.csv""))"
75356,df = pd.concat(df)
75357,dict_of_df['filename.csv']
75358,import os
75359,import glob
75360,import pandas
75361,from collections import OrderedDict
75362,path =r'C:\DRO\DCL_rawdata_files'
75363,"filenames = glob.glob(path + ""/*.csv"")"
75364,OrderedDict
75365,"dict_of_df = OrderedDict((f, pandas.read_csv(f)) for f in filenames)"
75366,"pandas.concat(dict_of_df, sort=True)"
75367,f
75368,f
75369,os.path.basename(f)
75370,import os
75371,
75372,"os.system(""awk '(NR == 1) || (FNR > 1)' file*.csv > merged.csv"")"
75373,NR
75374,FNR
75375,FNR
75376,NR == 1
75377,FNR > 1
75378,import glob
75379,import os
75380,import pandas as pd
75381,
75382,"merged_df = pd.concat([pd.read_csv(csv_file, index_col=0, header=0) for csv_file in glob.glob("
75383,"        os.path.join(""data/"", ""*.csv""))], axis=0, ignore_index=True)"
75384,    
75385,"merged_df.to_csv(""merged.csv"")"
75386,import pandas as pd
75387,import os
75388,
75389,new_df = pd.DataFrame()
75390,"for r, d, f in os.walk(csv_folder_path):"
75391,    for file in f:
75392,        complete_file_path = csv_folder_path+file
75393,        read_file = pd.read_csv(complete_file_path)
75394,"        new_df = new_df.append(read_file, ignore_index=True)"
75395,
75396,
75397,new_df.shape
75398,import glob
75399,
75400,from convtools import conversion as c
75401,from convtools.contrib.tables import Table
75402,import pandas as pd
75403,
75404,
75405,def test_pandas():
75406,    df = pd.concat(
75407,        (
75408,"            pd.read_csv(filename, index_col=None, header=0)"
75409,"            for filename in glob.glob(""tmp/*.csv"")"
75410,"        ),"
75411,"        axis=0,"
75412,"        ignore_index=True,"
75413,    )
75414,"    df.to_csv(""out.csv"", index=False)"
75415,# took 20.9 s
75416,
75417,
75418,def test_convtools():
75419,    table = None
75420,"    for filename in glob.glob(""tmp/*.csv""):"
75421,"        table_ = Table.from_csv(filename, header=False)"
75422,        if table is None:
75423,            table = table_
75424,        else:
75425,            table = table.chain(table_)
75426,
75427,"    table.into_csv(""out_convtools.csv"", include_header=False)"
75428,# took 15.8 s
75429,4.63 s
75430,10.9 s
75431,import pandas as pd
75432,import glob
75433,
75434,path = r'C:\DRO\DCL_rawdata_files' # use your path
75435,"file_path_list = glob.glob(path + ""/*.csv"")"
75436,
75437,file_iter = iter(file_path_list)
75438,
75439,list_df_csv = []
75440,list_df_csv.append(pd.read_csv(next(file_iter)))
75441,
75442,for file in file_iter:
75443,"    lsit_df_csv.append(pd.read_csv(file, header=0))"
75444,"df = pd.concat(lsit_df_csv, ignore_index=True)"
75445,import pandas as pd
75446,import glob
75447,
75448,path = r'/content/drive/My Drive/data/actual/comments_only' # use your path
75449,"all_files = glob.glob(path + ""/*.csv"")"
75450,
75451,li = []
75452,
75453,for filename in all_files:
75454,"    df = pd.read_csv(filename, index_col=None, header=0)"
75455,    li.append(df)
75456,
75457,"frame = pd.concat(li, axis=0, ignore_index=True,sort=True)"
75458,frame.to_csv('/content/drive/onefile.csv')
75459,all
75460,any
75461,max
75462,min
75463,math.isclose
75464,cmath.isclose
75465,"def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):"
75466,"    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)"
75467,rel_tol
75468,abs_tol
75469,a
75470,b
75471,numpy
75472,array
75473,numpy.isclose
75474,rel_tol
75475,abs_tol
75476,isclose
75477,isclose
75478,return abs(f1 - f2) <= allowed_error
75479,"abs(f1-f2) < tol*max(abs(f1),abs(f2))"
75480,>>> abs(0.04 - 0.03) <= 0.01
75481,False
75482,Python 2.7.10 [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
75483,abs(f1 - f2) <= allowed_error
75484,"numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)"
75485,pip
75486,"numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False).all()"
75487,decimal
75488,Decimal
75489,(7/3*3 == 7*3/3)
75490,False
75491,from __future__ import division
75492,b
75493,a
75494,a==b
75495,a
75496,b
75497,AlmostEqual2sComplement
75498,if abs(a-b) <= eps1*(abs(a)+abs(b)) + eps2
75499,"if abs(a-b) <= eps*max(EPS,abs(a),abs(b))"
75500,EPS
75501,eps1
75502,eps2
75503,a
75504,b
75505,eps1
75506,eps2
75507,eps
75508,a
75509,b
75510,eps
75511,EPS
75512,EPS
75513,EPS
75514,"def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):"
75515,    '''
75516,    Python 2 implementation of Python 3.5 math.isclose()
75517,    https://hg.python.org/cpython/file/tip/Modules/mathmodule.c#l1993
75518,    '''
75519,    # sanity check on the inputs
75520,    if rel_tol < 0 or abs_tol < 0:
75521,"        raise ValueError(""tolerances must be non-negative"")"
75522,
75523,    # short circuit exact equality -- needed to catch two infinities of
75524,    # the same sign. And perhaps speeds things up a bit sometimes.
75525,    if a == b:
75526,        return True
75527,
75528,"    # This catches the case of two infinities of opposite sign, or"
75529,    # one infinity and one finite number. Two infinities of opposite
75530,    # sign would otherwise have an infinite relative tolerance.
75531,    # Two infinities of the same sign are caught by the equality check
75532,    # above.
75533,    if math.isinf(a) or math.isinf(b):
75534,        return False
75535,
75536,    # now do the regular computation
75537,"    # this is essentially the ""weak"" test from the Boost library"
75538,    diff = math.fabs(b - a)
75539,    result = (((diff <= math.fabs(rel_tol * b)) or
75540,               (diff <= math.fabs(rel_tol * a))) or
75541,              (diff <= abs_tol))
75542,    return result
75543,from nose.tools import assert_almost_equals
75544,
75545,"assert_almost_equals(x, y, places=7) #default is 7"
75546,"def isclose(a,b):                                       "
75547,    astr=str(a)                                         
75548,    aprec=len(astr.split('.')[1]) if '.' in astr else 0 
75549,    bstr=str(b)                                         
75550,    bprec=len(bstr.split('.')[1]) if '.' in bstr else 0 
75551,"    prec=min(aprec,bprec)                                      "
75552,"    return round(a,prec)==round(b,prec)                               "
75553,">>> isclose(10.0,10.049)"
75554,True
75555,">>> isclose(10.0,10.05)"
75556,False
75557,"isclose(1.0, 1.1)"
75558,False
75559,"isclose(0.1, 0.000000000001)"
75560,True
75561,if abs(a - b) <= error:
75562,"    print(""Almost equal"")"
75563,if f1 ==0 and f2 == 0:
75564,    return True
75565,else:
75566,"    return abs(f1-f2) < tol*max(abs(f1),abs(f2))"
75567,str(f1) == str(f2)
75568,str(.1 + .2) == str(.3)
75569,atol/rtol
75570,"def almost_equal(a, b, decimal=6):"
75571,"    return '{0:.{1}f}'.format(a, decimal) == '{0:.{1}f}'.format(b, decimal)"
75572,
75573,"print(almost_equal(0.0, 0.0001, decimal=5)) # False"
75574,"print(almost_equal(0.0, 0.0001, decimal=4)) # True "
75575,"def round_to(float_num, prec):"
75576,"    return eval(""'{:."" + str(int(prec)) + ""f}'.format("" + str(float_num) + "")"")"
75577,
75578,"def is_close(float_a, float_b, prec):"
75579,"    if round_to(float_a, prec) == round_to(float_b, prec):"
75580,        return True
75581,    return False
75582,
75583,>>>a = 10.0
75584,10.0
75585,>>>b = 10.0001
75586,10.0001
75587,">>>print is_close(a, b, prec=3)"
75588,True
75589,">>>print is_close(a, b, prec=4)"
75590,False
75591,"def round_to(float_num, prec):"
75592,"    return '{:.{precision}f}'.format(float_num, precision=prec)"
75593,"def round_to(float_num, prec):"
75594,    return f'{float_num:.{prec}f}'
75595,"def is_close(a, b, prec):"
75596,    return f'{a:.{prec}f}' == f'{b:.{prec}f}'
75597,eval()
75598,"return '{:.{precision}f'.format(float_num, precision=decimal_precision)"
75599,"return '{:.{precision}}f'.format(float_num, precision=decimal_precision)"
75600,pytest
75601,import pytest
75602,
75603,
75604,PRECISION = 1e-3
75605,
75606,def assert_almost_equal():
75607,    obtained_value = 99.99
75608,    expected_value = 100.00
75609,"    assert obtained_value == pytest.approx(expected_value, PRECISION)"
75610,==
75611,# Python 3.8.5
75612,>>> 1.0000000000001 == 1
75613,False
75614,>>> 1.00000000000001 == 1
75615,True
75616,0
75617,>>> 0 == 0.00000000000000000000000000000000000000000001
75618,False
75619,0
75620,math.isclose
75621,a == b
75622,"math.isclose(a, b, rel_tol=1e-16, abs_tol=0)"
75623,==
75624,>>> class MyFloat(float):
75625,"        def __eq__(self, another):"
75626,"        return math.isclose(self, another, rel_tol=0, abs_tol=0.001)"
75627,
75628,>>> a == MyFloat(0)
75629,>>> a
75630,0.0
75631,>>> a == 0.001
75632,True
75633,float
75634,mock
75635,float.__eq__
75636,1 + 1e-16 == 1
75637,1 + 1e-16
75638,1.0
75639,x
75640,x.__class__
75641,x
75642,type(x)
75643,<type
75644,  'instance'>
75645,type(x)
75646,x.__class__
75647,x.__class__
75648,object
75649,type(x)
75650,(object)
75651,super()
75652,class NewStyleClass(object):
75653,    pass
75654,
75655,class AnotherNewStyleClass(NewStyleClass):
75656,    pass
75657,class OldStyleClass():
75658,    pass
75659,object
75660,class AnotherOldStyleClass:  pass
75661,class A: pass
75662,class A(): pass
75663,not is
75664,is not
75665,Exception
75666,__slots__
75667,__mro__
75668,class C: i = 0
75669,class C1(C): pass
75670,class C2(C): i = 2
75671,"class C12(C1, C2): pass"
75672,"class C21(C2, C1): pass"
75673,
75674,assert C12().i == 0
75675,assert C21().i == 2
75676,
75677,try:
75678,    C12.__mro__
75679,except AttributeError:
75680,    pass
75681,else:
75682,    assert False
75683,__mro__
75684,class C(object): i = 0
75685,class C1(C): pass
75686,class C2(C): i = 2
75687,"class C12(C1, C2): pass"
75688,"class C21(C2, C1): pass"
75689,
75690,assert C12().i == 2
75691,assert C21().i == 2
75692,
75693,"assert C12.__mro__ == (C12, C1, C2, C, object)"
75694,"assert C21.__mro__ == (C21, C2, C1, C, object)"
75695,Exception
75696,"# OK, old:"
75697,class Old: pass
75698,try:
75699,    raise Old()
75700,except Old:
75701,    pass
75702,else:
75703,    assert False
75704,
75705,"# TypeError, new not derived from `Exception`."
75706,class New(object): pass
75707,try:
75708,    raise New()
75709,except TypeError:
75710,    pass
75711,else:
75712,    assert False
75713,
75714,"# OK, derived from `Exception`."
75715,class New(Exception): pass
75716,try:
75717,    raise New()
75718,except New:
75719,    pass
75720,else:
75721,    assert False
75722,
75723,"# `'str'` is a new style object, so you can't raise it:"
75724,try:
75725,    raise 'str'
75726,except TypeError:
75727,    pass
75728,else:
75729,    assert False
75730,%timeit aobj.a
75731,"10000000 loops, best of 3: 66.1 ns per loop"
75732,%timeit bobj.a
75733,"10000000 loops, best of 3: 53.9 ns per loop"
75734,object
75735,super
75736,class Person():
75737,    _names_cache = {}
75738,"    def __init__(self,name):"
75739,        self.name = name
75740,"    def __new__(cls,name):"
75741,"        return cls._names_cache.setdefault(name,object.__new__(cls,name))"
75742,
75743,"ahmed1 = Person(""Ahmed"")"
75744,"ahmed2 = Person(""Ahmed"")"
75745,print ahmed1 is ahmed2
75746,print ahmed1
75747,print ahmed2
75748,
75749,
75750,>>> False
75751,<__main__.Person instance at 0xb74acf8c>
75752,<__main__.Person instance at 0xb74ac6cc>
75753,>>>
75754,class Person(object):
75755,    _names_cache = {}
75756,"    def __init__(self,name):"
75757,        self.name = name
75758,"    def __new__(cls,name):"
75759,"        return cls._names_cache.setdefault(name,object.__new__(cls,name))"
75760,
75761,"ahmed1 = Person(""Ahmed"")"
75762,"ahmed2 = Person(""Ahmed"")"
75763,print ahmed2 is ahmed1
75764,print ahmed1
75765,print ahmed2
75766,
75767,>>> True
75768,<__main__.Person object at 0xb74ac66c>
75769,<__main__.Person object at 0xb74ac66c>
75770,>>>
75771,_names_cache
75772,Person.__new__
75773,__new__()
75774,if
75775,.setdefault()
75776,__new__
75777,__spam__
75778,__init__
75779,__new__
75780,__init__
75781,object
75782,class Classname(object):
75783,class Classname:
75784,"super(Foo, self)"
75785,Foo
75786,self
75787,"super(type[, object-or-type])"
75788,super()
75789,string1 = 'Hello'
75790,string2 = 'hello'
75791,
75792,if string1.lower() == string2.lower():
75793,"    print(""The strings are the same (case insensitive)"")"
75794,else:
75795,"    print(""The strings are NOT the same (case insensitive)"")"
75796,string1 = 'Hello'
75797,string2 = 'hello'
75798,
75799,if string1.casefold() == string2.casefold():
75800,"    print(""The strings are the same (case insensitive)"")"
75801,else:
75802,"    print(""The strings are NOT the same (case insensitive)"")"
75803,Σίσυφος
75804,ΣΊΣΥΦΟΣ
75805,'ß'.lower() == 'SS'.lower()
75806,text.lower() != text.upper().lower()
75807,"""ß"""
75808,"""ß"".lower()"
75809,#>>> 'ß'
75810,
75811,"""ß"".upper().lower()"
75812,#>>> 'ss'
75813,"""BUSSE"""
75814,"""Buße"""
75815,"""BUSSE"""
75816,"""BUẞE"""
75817,casefold
75818,lower
75819,casefold
75820,.upper().lower()
75821,"""ê"" == ""ê"""
75822,"""ê"" == ""ê"""
75823,#>>> False
75824,import unicodedata
75825,
75826,"[unicodedata.name(char) for char in ""ê""]"
75827,#>>> ['LATIN SMALL LETTER E WITH CIRCUMFLEX']
75828,
75829,"[unicodedata.name(char) for char in ""ê""]"
75830,"#>>> ['LATIN SMALL LETTER E', 'COMBINING CIRCUMFLEX ACCENT']"
75831,unicodedata.normalize
75832,"unicodedata.normalize(""NFKD"", ""ê"") == unicodedata.normalize(""NFKD"", ""ê"")"
75833,#>>> True
75834,import unicodedata
75835,
75836,def normalize_caseless(text):
75837,"    return unicodedata.normalize(""NFKD"", text.casefold())"
75838,
75839,"def caseless_equal(left, right):"
75840,    return normalize_caseless(left) == normalize_caseless(right)
75841,x.casefold() == y.casefold()
75842,x == y
75843,NFD(toCasefold(NFD(str)))
75844,NFKD(toCasefold(NFKD(toCasefold(NFD(X)))))
75845,NFD
75846,.lower()
75847,string1.lower() == string2.lower()
75848,unicode.txt
75849,Σίσυφος
75850,ΣΊΣΥΦΟΣ
75851,">>> utf8_bytes = open(""unicode.txt"", 'r').read()"
75852,>>> print repr(utf8_bytes)
75853,'\xce\xa3\xce\xaf\xcf\x83\xcf\x85\xcf\x86\xce\xbf\xcf\x82\n\xce\xa3\xce\x8a\xce\xa3\xce\xa5\xce\xa6\xce\x9f\xce\xa3\n'
75854,>>> u = utf8_bytes.decode('utf8')
75855,>>> print u
75856,Σίσυφος
75857,ΣΊΣΥΦΟΣ
75858,
75859,">>> first, second = u.splitlines()"
75860,>>> print first.lower()
75861,σίσυφος
75862,>>> print second.lower()
75863,σίσυφοσ
75864,>>> first.lower() == second.lower()
75865,False
75866,>>> first.upper() == second.upper()
75867,True
75868,.lower()
75869,">>> s = open('unicode.txt', encoding='utf8').read()"
75870,>>> print(s)
75871,Σίσυφος
75872,ΣΊΣΥΦΟΣ
75873,
75874,">>> first, second = s.splitlines()"
75875,>>> print(first.lower())
75876,σίσυφος
75877,>>> print(second.lower())
75878,σίσυφος
75879,>>> first.lower() == second.lower()
75880,True
75881,>>> first.upper() == second.upper()
75882,True
75883,X.casefold() == Y.casefold()
75884,'å'
75885,'å'
75886,import unicodedata
75887,
75888,def NFD(text):
75889,"    return unicodedata.normalize('NFD', text)"
75890,
75891,def canonical_caseless(text):
75892,    return NFD(NFD(text).casefold())
75893,NFD()
75894,>>> 'å'.casefold() == 'å'.casefold()
75895,False
75896,>>> canonical_caseless('å') == canonical_caseless('å')
75897,True
75898,'㎒'
75899,casefold()
75900,canonical_caseless('LİMANI') == canonical_caseless('limanı')
75901,True
75902,False
75903,import re
75904,"if re.search('mandy', 'Mandy Pande', re.IGNORECASE):"
75905,# is True
75906,"In [42]: if re.search(""ê"",""ê"", re.IGNORECASE):"
75907,....:        print(1)
75908,....:
75909,1
75910,"In [36]: ""ß"".lower()"
75911,Out[36]: 'ß'
75912,"In [37]: ""ß"".upper()"
75913,Out[37]: 'SS'
75914,"In [38]: ""ß"".upper().lower()"
75915,Out[38]: 'ss'
75916,"In [39]: if re.search(""ß"",""ßß"", re.IGNORECASE):"
75917,....:        print(1)
75918,....:
75919,1
75920,"In [40]: if re.search(""SS"",""ßß"", re.IGNORECASE):"
75921,....:        print(1)
75922,....:
75923,"In [41]: if re.search(""ß"",""SS"", re.IGNORECASE):"
75924,....:        print(1)
75925,....:
75926,ß
75927,SS
75928,"firstString = ""Hi EVERYONE"""
75929,"secondString = ""Hi everyone"""
75930,
75931,if firstString.casefold() == secondString.casefold():
75932,    print('The strings are equal.')
75933,else:
75934,    print('The strings are not equal.')
75935,The strings are equal.
75936,">>> ""hello"".upper() == ""HELLO"".upper()"
75937,True
75938,>>> 
75939,string.lower()
75940,Σίσυφος
75941,ΣΊΣΥΦΟΣ
75942,from pathlib import Path
75943,
75944,
75945,class CaseInsitiveString(str):
75946,"   def __eq__(self, __o: str) -> bool:"
75947,      return self.casefold() == __o.casefold()
75948,
75949,"GZ = CaseInsitiveString("".gz"")"
75950,"ZIP = CaseInsitiveString("".zip"")"
75951,"TAR = CaseInsitiveString("".tar"")"
75952,
75953,"path = Path(""/tmp/ALL_CAPS.TAR.GZ"")"
75954,
75955,"GZ in path.suffixes, ZIP in path.suffixes, TAR in path.suffixes, TAR == "".tAr"""
75956,
75957,"# (True, False, True, True)"
75958,"data['Column_name'].str.contains('abcd', case=False)"
75959,"def search_specificword(key, stng):"
75960,    key = key.lower()
75961,    stng = stng.lower()
75962,    flag_present = False
75963,"    if stng.startswith(key+"" ""):"
75964,        flag_present = True
75965,"    symb = [',','.']"
75966,    for i in symb:
75967,"        if stng.find("" ""+key+i) != -1:"
75968,            flag_present = True
75969,    if key == stng:
75970,        flag_present = True
75971,"    if stng.endswith("" ""+key):"
75972,        flag_present = True
75973,"    if stng.find("" ""+key+"" "") != -1:"
75974,        flag_present = True
75975,    print(flag_present)
75976,    return flag_present
75977,"def insenStringCompare(s1, s2):"
75978,"    """""" Method that takes two strings and returns True or False, based"
75979,"        on if they are equal, regardless of case."""""""
75980,    try:
75981,        return s1.lower() == s2.lower()
75982,    except AttributeError:
75983,"        print ""Please only pass strings into this method."""
75984,"        print ""You passed a %s and %s"" % (s1.__class__, s2.__class__)"
75985,    import re as yes
75986,
75987,    def bar_or_spam():
75988,
75989,"        message = raw_input(""\nEnter FoO for BaR or SpaM for EgGs (NCS): "") "
75990,
75991,"        message_in_coconut = yes.compile(r'foo*|spam*',  yes.I)"
75992,
75993,        lost_n_found = message_in_coconut.search(message).group()
75994,
75995,        if lost_n_found != None:
75996,            return lost_n_found.lower()
75997,        else:
75998,"            print (""Make tea not love"")"
75999,            return
76000,
76001,    whatz_for_breakfast = bar_or_spam()
76002,
76003,    if whatz_for_breakfast == foo:
76004,"        print (""BaR"")"
76005,
76006,    elif whatz_for_breakfast == spam:
76007,"        print (""EgGs"")"
76008,"{""text"":""lalala""}"
76009,"@app.route('/api/add_message/<uuid>', methods=['GET', 'POST'])"
76010,def add_message(uuid):
76011,    content = request.json
76012,    print content
76013,    return uuid
76014,None
76015,"{""text"":""lalala""}"
76016,.json
76017,request.get_json()
76018,None
76019,application/json
76020,.json
76021,.get_json()
76022,None
76023,Request
76024,is_json()
76025,None
76026,request.get_json()
76027,force=True
76028,import requests
76029,"res = requests.post('http://localhost:5000/api/add_message/1234', json={""mytext"":""lalala""})"
76030,if res.ok:
76031,    print(res.json())
76032,"from flask import Flask, request, jsonify"
76033,app = Flask(__name__)
76034,
76035,"@app.route('/api/add_message/<uuid>', methods=['GET', 'POST'])"
76036,def add_message(uuid):
76037,    content = request.json
76038,    print(content['mytext'])
76039,"    return jsonify({""uuid"":uuid})"
76040,
76041,if __name__ == '__main__':
76042,"    app.run(host= '0.0.0.0',debug=True)"
76043,"@app.route('/api/add_message/<uuid>', methods=['GET', 'POST'])"
76044,def add_message(uuid):
76045,    content = request.get_json(silent=True)
76046,    # print(content) # Do your processing
76047,    return uuid
76048,silent=True
76049,get_json
76050,False
76051,silent=False
76052,force=True
76053,request.headers.get('Content-Type') == 'application/json'
76054,False
76055,force=False
76056,Content-Type
76057,silent=True
76058,silent=True
76059,False
76060,application/json
76061,request.json
76062,"from flask import Flask, request, jsonify"
76063,
76064,app = Flask(__name__)
76065,
76066,
76067,"@app.route('/echo', methods=['POST'])"
76068,def hello():
76069,   return jsonify(request.json)
76070,"response = request.post('http://127.0.0.1:5000/hello', json={""foo"": ""bar""})"
76071,response.json()
76072,{'foo': 'bar'}
76073,dict
76074,JSON.stringify
76075,"    var dict = {username : ""username"" , password:""password""};"
76076,
76077,    $.ajax({
76078,"        type: ""POST"", "
76079,"        url: ""http://127.0.0.1:5000/"", //localhost Flask"
76080,"        data : JSON.stringify(dict),"
76081,"        contentType: ""application/json"","
76082,    });
76083,from flask import Flask
76084,from flask import request
76085,import json
76086,
76087,app = Flask(__name__)
76088,
76089,"@app.route(""/"",  methods = ['POST'])"
76090,def hello():
76091,    print(request.get_json())
76092,"    return json.dumps({'success':True}), 200, {'ContentType':'application/json'} "
76093,
76094,"if __name__ == ""__main__"":"
76095,    app.run()
76096,"const foo = {hello: ""world""}"
76097,request.json
76098,request.get_json()
76099,Content-type: application/json
76100,data = json.loads(request.data)
76101,force=True
76102,request.get_json(force=True)
76103,"from flask import Flask, jsonify, request"
76104,app = Flask(__name__)
76105,
76106,"@app.route('/service', methods=['POST'])"
76107,def service():
76108,    data = json.loads(request.data)
76109,"    text = data.get(""text"",None)"
76110,    if text is None:
76111,"        return jsonify({""message"":""text not found""})"
76112,    else:
76113,        return jsonify(data)
76114,
76115,if __name__ == '__main__':
76116,"    app.run(host= '0.0.0.0',debug=True)"
76117,"@app.route('/api/add_message/<uuid>', methods=['GET', 'POST'])"
76118,def add_message(uuid):
76119,    content = request.json
76120,    print content['uuid']
76121,    # Return data as JSON
76122,    return jsonify(content)
76123,"@app.route('/api/add_message/<uuid>', methods=['GET', 'POST'])"
76124,def add_message(uuid):
76125,  content = request.json['text']
76126,  print content
76127,  return uuid
76128,"from flask import app, request, Flask, jsonify"
76129,
76130,
76131,"@app.route('/api/add_message/<uuid>', methods=['GET', 'POST'])"
76132,def add_message(uuid):
76133,    
76134,    # Check if the request method is POST
76135,    if request.method == 'POST':
76136,        # content will return eather parse data as JSON
76137,        # Or None incase there is no data
76138,        content = request.get_json()
76139,        print(content)
76140,        # The content could be displayed in html page if serialized as json
76141,        return jsonify(content) # Return null if there is content
76142,
76143,    # if it is only get request then just return uuid
76144,    return uuid
76145,force
76146,True
76147,get_json()
76148,request.get_json(force = True)
76149,eval()
76150,eval()
76151,datamap = input('Provide some data here: ')
76152,datamap
76153,eval()
76154,datamap = eval(input('Provide some data here: ')
76155,"if not isinstance(datamap, dict):"
76156,    return
76157,datamap
76158,ast
76159,.literal_eval()
76160,datamap = eval(input('Provide some data here: '))
76161,eval
76162,ast.literal_eval
76163,ast.literal_eval
76164,eval
76165,"ast.literal_eval(""1 & 1"")"
76166,"eval(""1 & 1"")"
76167,ast.literal_eval
76168,&
76169,literal_eval
76170,ast.literal_eval()
76171,None
76172,__import__('os').system('rm -rf /a-path-you-really-care-about')
76173,ast.literal_eval()
76174,eval()
76175,ast.literal_eval()
76176,"eval(expression, globals=None, locals=None)"
76177,import ast
76178,ast.literal_eval(node_or_string)
76179,# python 2.x - doesn't accept operators in string format
76180,import ast
76181,"ast.literal_eval('[1, 2, 3]')  # output: [1, 2, 3]"
76182,ast.literal_eval('1+1') # output: ValueError: malformed string
76183,
76184,
76185,# python 3.0 -3.6
76186,import ast
76187,"ast.literal_eval(""1+1"") # output : 2"
76188,"ast.literal_eval(""{'a': 2, 'b': 3, 3:'xyz'}"") # output : {'a': 2, 'b': 3, 3:'xyz'}"
76189,# type dictionary
76190,"ast.literal_eval("""",{}) # output : Syntax Error required only one parameter"
76191,"ast.literal_eval(""__import__('os').system('rm -rf /')"") # output : error"
76192,
76193,"eval(""__import__('os').system('rm -rf /')"") "
76194,# output : start deleting all the files on your computer.
76195,# restricting using global and local variables
76196,"eval(""__import__('os').system('rm -rf /')"",{'__builtins__':{}},{})"
76197,# output : Error due to blocked imports by passing  '__builtins__':{} in global
76198,
76199,# But still eval is not safe. we can access and break the code as given below
76200,"s = """""""
76201,(lambda fc=(
76202,lambda n: [
76203,    c for c in 
76204,        ().__class__.__bases__[0].__subclasses__() 
76205,        if c.__name__ == n
76206,    ][0]
76207,):
76208,"fc(""function"")("
76209,"    fc(""code"")("
76210,"        0,0,0,0,""KABOOM"",(),(),(),"""","""",0,"""""
76211,"    ),{}"
76212,)()
76213,)()
76214,""""""""
76215,"eval(s, {'__builtins__':{}})"
76216,().__class__.__bases__[0]
76217,enter code here
76218,code
76219,function
76220,CPython
76221,"ast.literal_eval(""1+1"")"
76222,KABOOM
76223,KABOOM
76224,KABOOM
76225,eval(input(...))
76226,eval
76227,eval
76228,ast.literal_eval
76229,__import__('os').system('rm -rf /a-path-you-really-care-about')
76230,"import ast, operator, math"
76231,import logging
76232,
76233,logger = logging.getLogger(__file__)
76234,
76235,def safe_eval(s):
76236,
76237,"    def checkmath(x, *args):"
76238,"        if x not in [x for x in dir(math) if not ""__"" in x]:"
76239,"            raise SyntaxError(f""Unknown func {x}()"")"
76240,"        fun = getattr(math, x)"
76241,        return fun(*args)
76242,
76243,    binOps = {
76244,"        ast.Add: operator.add,"
76245,"        ast.Sub: operator.sub,"
76246,"        ast.Mult: operator.mul,"
76247,"        ast.Div: operator.truediv,"
76248,"        ast.Mod: operator.mod,"
76249,"        ast.Pow: operator.pow,"
76250,"        ast.Call: checkmath,"
76251,"        ast.BinOp: ast.BinOp,"
76252,    }
76253,
76254,    unOps = {
76255,"        ast.USub: operator.neg,"
76256,"        ast.UAdd: operator.pos,"
76257,"        ast.UnaryOp: ast.UnaryOp,"
76258,    }
76259,
76260,    ops = tuple(binOps) + tuple(unOps)
76261,
76262,"    tree = ast.parse(s, mode='eval')"
76263,
76264,    def _eval(node):
76265,"        if isinstance(node, ast.Expression):"
76266,"            logger.debug(""Expr"")"
76267,            return _eval(node.body)
76268,"        elif isinstance(node, ast.Str):"
76269,"            logger.debug(""Str"")"
76270,            return node.s
76271,"        elif isinstance(node, ast.Num):"
76272,"            logger.debug(""Num"")"
76273,            return node.value
76274,"        elif isinstance(node, ast.Constant):"
76275,"            logger.info(""Const"")"
76276,            return node.value
76277,"        elif isinstance(node, ast.BinOp):"
76278,"            logger.debug(""BinOp"")"
76279,"            if isinstance(node.left, ops):"
76280,                left = _eval(node.left)
76281,            else:
76282,                left = node.left.value
76283,"            if isinstance(node.right, ops):"
76284,                right = _eval(node.right)
76285,            else:
76286,                right = node.right.value
76287,"            return binOps[type(node.op)](left, right)"
76288,"        elif isinstance(node, ast.UnaryOp):"
76289,"            logger.debug(""UpOp"")"
76290,"            if isinstance(node.operand, ops):"
76291,                operand = _eval(node.operand)
76292,            else:
76293,                operand = node.operand.value
76294,            return unOps[type(node.op)](operand)
76295,"        elif isinstance(node, ast.Call):"
76296,            args = [_eval(x) for x in node.args]
76297,"            r = checkmath(node.func.id, *args)"
76298,            return r
76299,        else:
76300,"            raise SyntaxError(f""Bad syntax, {type(node)}"")"
76301,
76302,    return _eval(tree)
76303,
76304,
76305,"if __name__ == ""__main__"":"
76306,    logger.setLevel(logging.DEBUG)
76307,    ch = logging.StreamHandler()
76308,    logger.addHandler(ch)
76309,"    assert safe_eval(""1+1"") == 2"
76310,"    assert safe_eval(""1+-5"") == -4"
76311,"    assert safe_eval(""-1"") == -1"
76312,"    assert safe_eval(""-+1"") == -1"
76313,"    assert safe_eval(""(100*10)+6"") == 1006"
76314,"    assert safe_eval(""100*(10+6)"") == 1600"
76315,"    assert safe_eval(""2**4"") == 2**4"
76316,"    assert safe_eval(""sqrt(16)+1"") == math.sqrt(16) + 1"
76317,"    assert safe_eval(""1.2345 * 10"") == 1.2345 * 10"
76318,
76319,"    print(""Tests pass"")"
76320,json.loads
76321,literal_eval
76322,ast.literal_eval()
76323,None
76324,import ast
76325,"sample_string = '[{""id"":""XYZ_GTTC_TYR"", ""name"":""Suction""}]'"
76326,output_value = ast.literal_eval(sample_string)
76327,print(output_value)
76328,>>> ''.join([ str(_) for _ in xrange(10) ])
76329,'0123456789'
76330,join
76331,join
76332,[ str(_) for _ in xrange(10) ]
76333,>>>''.join( str(_) for _ in xrange(10) )
76334,'0123456789'
76335,join
76336,str(_) for _ in xrange(10)
76337,[]
76338,str(_) for _ in xrange(10)
76339,join
76340,_
76341,''.join()
76342,"~ $ python -m timeit '"""".join(str(n) for n in xrange(1000))'"
76343,"1000 loops, best of 3: 335 usec per loop"
76344,"~ $ python -m timeit '"""".join([str(n) for n in xrange(1000)])'"
76345,"1000 loops, best of 3: 288 usec per loop"
76346,"~ $ python -m timeit -s'from itertools import imap' '"""".join(imap(str, xrange(1000)))'"
76347,"1000 loops, best of 3: 220 usec per loop"
76348,"~ $ python -m timeit '"""".join(map(str, xrange(1000)))'"
76349,"1000 loops, best of 3: 212 usec per loop"
76350,join
76351,""""".join(l)"
76352,''.join()
76353,>>>''.join( str(_) for _ in xrange(10) )
76354,"''.join(map(str, xrange(10)))"
76355,( str(_) for _ in xrange(10) )
76356,()
76357,join
76358,"tup = 1, 2, 3; print(tup)"
76359,for
76360,.join()
76361,.join()
76362,[str(n) for n in xrange(10)]
76363,list(str(n) for n in xrange(10))
76364,[str(x) for x in xrange(1000)]
76365,list(str(x) for x in xrange(1000))
76366,"seq = PySequence_Fast(orig, """");"
76367,( str(_) for _ in xrange(10) )
76368,mylist = (str(_) for _ in xrange(10))
76369,''.join(mylist)
76370,join
76371,"teams_list = [""Man Utd"", ""Man City"", ""T Hotspur""]"
76372,"data = np.array([[1, 2, 1],"
76373,"                 [0, 1, 0],"
76374,"                 [2, 4, 2]])"
76375,            Man Utd   Man City   T Hotspur
76376,  Man Utd         1          0           0
76377, Man City         1          1           0
76378,T Hotspur         0          1           2
76379,from tabulate import tabulate
76380,"print(tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age']))"
76381,Name      Age
76382,------  -----
76383,Alice      24
76384,Bob        19
76385,"print(tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age'], tablefmt='orgtbl'))"
76386,| Name   |   Age |
76387,|--------+-------|
76388,| Alice  |    24 |
76389,| Bob    |    19 |
76390,from prettytable import PrettyTable
76391,"t = PrettyTable(['Name', 'Age'])"
76392,"t.add_row(['Alice', 24])"
76393,"t.add_row(['Bob', 19])"
76394,print(t)
76395,+-------+-----+
76396,|  Name | Age |
76397,+-------+-----+
76398,| Alice |  24 |
76399,|  Bob  |  19 |
76400,+-------+-----+
76401,from texttable import Texttable
76402,t = Texttable()
76403,"t.add_rows([['Name', 'Age'], ['Alice', 24], ['Bob', 19]])"
76404,print(t.draw())
76405,+-------+-----+
76406,| Name  | Age |
76407,+=======+=====+
76408,| Alice | 24  |
76409,+-------+-----+
76410,| Bob   | 19  |
76411,+-------+-----+
76412,import termtables as tt
76413,
76414,string = tt.to_string(
76415,"    [[""Alice"", 24], [""Bob"", 19]],"
76416,"    header=[""Name"", ""Age""],"
76417,"    style=tt.styles.ascii_thin_double,"
76418,"    # alignment=""ll"","
76419,"    # padding=(0, 1),"
76420,)
76421,print(string)
76422,+-------+-----+
76423,| Name  | Age |
76424,+=======+=====+
76425,| Alice | 24  |
76426,+-------+-----+
76427,| Bob   | 19  |
76428,+-------+-----+
76429,coalign
76430,"row_format =""{:>15}"" * (len(teams_list) + 1)"
76431,"print(row_format.format("""", *teams_list))"
76432,"for team, row in zip(teams_list, data):"
76433,"    print(row_format.format(team, *row))"
76434,str.format()
76435,>>> import pandas
76436,">>> pandas.DataFrame(data, teams_list, teams_list)"
76437,           Man Utd  Man City  T Hotspur
76438,Man Utd    1        2         1        
76439,Man City   0        1         0        
76440,T Hotspur  2        4         2        
76441,pip install numpy
76442,for i in range(10):
76443,"    print '%-12i%-12i' % (10 ** i, 20 ** i)"
76444,1           1           
76445,10          20          
76446,100         400         
76447,1000        8000        
76448,10000       160000      
76449,100000      3200000     
76450,1000000     64000000    
76451,10000000    1280000000  
76452,100000000   25600000000
76453,1000000000  512000000000
76454,'-' (left align)
76455,'12' (how much space to be given to this part of the output)
76456,'i' (we are printing an integer)
76457,"print('%-20.2f' % position['deg'], '%-17.2f' % position['v2'])"
76458,.2
76459,f
76460,"f""<%-{max(a)}s>"" % 1"
76461,"row_format =""{:>15}"" * (len(teams_list) + 1)"
76462,"print(row_format.format("""", *teams_list))"
76463,"for team, row in zip(teams_list, data):"
76464,"    print(row_format.format(team, *row))"
76465,import TableIt
76466,table = [
76467,"    [4, 3, ""Hi""],"
76468,"    [2, 1, 808890312093],"
76469,"    [5, ""Hi"", ""Bye""]"
76470,]
76471,TableIt.printTable(table)
76472,+--------------------------------------------+
76473,| 4            | 3            | Hi           |
76474,| 2            | 1            | 808890312093 |
76475,| 5            | Hi           | Bye          |
76476,+--------------------------------------------+
76477,"TableIt.printTable(table, useFieldNames=True)"
76478,+--------------------------------------------+
76479,| 4            | 3            | Hi           |
76480,+--------------+--------------+--------------+
76481,| 2            | 1            | 808890312093 |
76482,| 5            | Hi           | Bye          |
76483,+--------------------------------------------+
76484,import TableIt
76485,
76486,myList = [
76487,"    [""Name"", ""Email""],"
76488,"    [""Richard"", ""richard@fakeemail.com""],"
76489,"    [""Tasha"", ""tash@fakeemail.com""]"
76490,]
76491,
76492,"TableIt.print(myList, useFieldNames=True)"
76493,+-----------------------------------------------+
76494,| Name                  | Email                 |
76495,+-----------------------+-----------------------+
76496,| Richard               | richard@fakeemail.com |
76497,| Tasha                 | tash@fakeemail.com    |
76498,+-----------------------------------------------+
76499,import TableIt
76500,
76501,myList = [
76502,"    ["""", ""a"", ""b""],"
76503,"    [""x"", ""a + x"", ""a + b""],"
76504,"    [""z"", ""a + z"", ""z + b""]"
76505,]
76506,
76507,"TableIt.printTable(myList, useFieldNames=True)"
76508,+-----------------------+
76509,|       | a     | b     |
76510,+-------+-------+-------+
76511,| x     | a + x | a + b |
76512,| z     | a + z | z + b |
76513,+-----------------------+
76514,import TableIt
76515,
76516,myList = [
76517,"    ["""", ""a"", ""b""],"
76518,"    [""x"", ""a + x"", ""a + b""],"
76519,"    [""z"", ""a + z"", ""z + b""]"
76520,]
76521,
76522,"TableIt.printTable(myList, useFieldNames=True, color=(26, 156, 171))"
76523,34m
76524,from beautifultable import BeautifulTable
76525,
76526,table = BeautifulTable()
76527,"table.column_headers = ["""", ""Man Utd"",""Man City"",""T Hotspur""]"
76528,"table.append_row(['Man Utd',  1,  2,  3])"
76529,"table.append_row(['Man City', 7, 4,  1])"
76530,"table.append_row(['T Hotspur', 3, 2,  2])"
76531,print(table)
76532,table = [
76533,"    ["""", ""Man Utd"", ""Man City"", ""T Hotspur""],"
76534,"    [""Man Utd"", 1, 0, 0],"
76535,"    [""Man City"", 1, 1, 0],"
76536,"    [""T Hotspur"", 0, 1, 2],"
76537,]
76538,def print_table(table):
76539,    longest_cols = [
76540,        (max([len(str(row[i])) for row in table]) + 3)
76541,        for i in range(len(table[0]))
76542,    ]
76543,"    row_format = """".join([""{:>"" + str(longest_col) + ""}"" for longest_col in longest_cols])"
76544,    for row in table:
76545,        print(row_format.format(*row))
76546,>>> print_table(table)
76547,
76548,            Man Utd   Man City   T Hotspur
76549,  Man Utd         1          0           0
76550, Man City         1          1           0
76551,T Hotspur         0          1           2
76552,"[len(max(col , key=len))+3 for col in zip(*table)]"
76553,.format and f-string
76554,eval
76555,zip(*matrix)
76556,"def format_matrix(header, matrix,"
76557,"                  top_format, left_format, cell_format, row_delim, col_delim):"
76558,"    table = [[''] + header] + [[name] + row for name, row in zip(header, matrix)]"
76559,    table_format = [['{:^{}}'] + len(header) * [top_format]] \
76560,                 + len(matrix) * [[left_format] + len(header) * [cell_format]]
76561,    col_widths = [max(
76562,"                      len(format.format(cell, 0))"
76563,"                      for format, cell in zip(col_format, col))"
76564,"                  for col_format, col in zip(zip(*table_format), zip(*table))]"
76565,    return row_delim.join(
76566,               col_delim.join(
76567,"                   format.format(cell, width)"
76568,"                   for format, cell, width in zip(row_format, row, col_widths))"
76569,"               for row_format, row in zip(table_format, table))"
76570,
76571,"print format_matrix(['Man Utd', 'Man City', 'T Hotspur', 'Really Long Column'],"
76572,"                    [[1, 2, 1, -1], [0, 1, 0, 5], [2, 4, 2, 2], [0, 1, 0, 6]],"
76573,"                    '{:^{}}', '{:<{}}', '{:>{}.3f}', '\n', ' | ')"
76574,                   | Man Utd | Man City | T Hotspur | Really Long Column
76575,Man Utd            |   1.000 |    2.000 |     1.000 |             -1.000
76576,Man City           |   0.000 |    1.000 |     0.000 |              5.000
76577,T Hotspur          |   2.000 |    4.000 |     2.000 |              2.000
76578,Really Long Column |   0.000 |    1.000 |     0.000 |              6.000
76579," print >> out, row[0].ljust(col_paddings[0] + 1),"
76580," print >> out, row[0].rjust(col_paddings[0] + 1),"
76581,"def print_table(data, cols, wide):"
76582,    '''Prints formatted data on columns of given width.'''
76583,"    n, r = divmod(len(data), cols)"
76584,    pat = '{{:{}}}'.format(wide)
76585,    line = '\n'.join(pat * cols for _ in range(n))
76586,    last_line = pat * r
76587,    print(line.format(*data))
76588,    print(last_line.format(*data[n*cols:]))
76589,
76590,data = [str(i) for i in range(27)]
76591,"print_table(data, 6, 12)"
76592,0           1           2           3           4           5           
76593,6           7           8           9           10          11          
76594,12          13          14          15          16          17          
76595,18          19          20          21          22          23          
76596,24          25          26
76597,"table_data= [[1,2,3],[4,5,6],[7,8,9]]"
76598,
76599,for row in table_data:
76600,"    print(""{: >20} {: >20} {: >20}"".format(*row))"
76601,               1                  2                3
76602,               4                  5                6
76603,               7                  8                9
76604,zip
76605,izip
76606,"def print_results_table(data, teams_list):"
76607,    str_l = max(len(t) for t in teams_list)
76608,"    print("" "".join(['{:>{length}s}'.format(t, length = str_l) for t in ["" ""] + teams_list]))"
76609,"    for t, row in zip(teams_list, data):"
76610,"        print("" "".join(['{:>{length}s}'.format(str(x), length = str_l) for x in [t] + row]))"
76611,
76612,"teams_list = [""Man Utd"", ""Man City"", ""T Hotspur""]"
76613,"data = [[1, 2, 1],"
76614,"        [0, 1, 0],"
76615,"        [2, 4, 2]]"
76616,
76617,"print_results_table(data, teams_list)"
76618,            Man Utd  Man City T Hotspur
76619,  Man Utd         1         2         1
76620, Man City         0         1         0
76621,T Hotspur         2         4         2
76622,""" "".join"
76623,""" | "".join"
76624,f'{column1_value:15} {column2_value}'
76625,table = {
76626,"    'Amplitude': [round(amplitude, 3), 'm³/h'],"
76627,"    'MAE': [round(mae, 2), 'm³/h'],"
76628,"    'MAPE': [round(mape, 2), '%'],"
76629,}
76630,
76631,"for metric, value in table.items():"
76632,    print(f'{metric:14} : {value[0]:>6.3f} {value[1]}')
76633,Amplitude      :  1.438 m³/h
76634,MAE            :  0.171 m³/h
76635,MAPE           : 27.740 %
76636,"print(""Titlex\tTitley\tTitlez"")"
76637,"for x, y, z in data:"
76638,"    print(x, ""\t"", y, ""\t"", z)"
76639,#Column headers
76640,"print("""", end=""\t"")"
76641,for team in teams_list:
76642,"    print("" "", team, end="""")"
76643,print()
76644,# rows
76645,"for team, row in enumerate(data):"
76646,    teamlabel = teams_list[team]
76647,    while len(teamlabel) < 9:
76648,"        teamlabel = "" "" + teamlabel"
76649,"    print(teamlabel, end=""\t"")"
76650,    for entry in row:
76651,"        print(entry, end=""\t"")"
76652,    print()
76653,          Man Utd  Man City  T Hotspur
76654,  Man Utd       1       2       1   
76655, Man City       0       1       0   
76656,T Hotspur       2       4       2   
76657,from rich.console import Console
76658,from rich.table import Table
76659,
76660,console = Console()
76661,
76662,"table = Table(show_header=True, header_style=""bold magenta"")"
76663,"table.add_column(""Date"", style=""dim"", width=12)"
76664,"table.add_column(""Title"")"
76665,"table.add_column(""Production Budget"", justify=""right"")"
76666,"table.add_column(""Box Office"", justify=""right"")"
76667,table.add_row(
76668,"    ""Dec 20, 2019"", ""Star Wars: The Rise of Skywalker"", ""$275,000,000"", ""$375,126,118"""
76669,)
76670,table.add_row(
76671,"    ""May 25, 2018"","
76672,"    ""[red]Solo[/red]: A Star Wars Story"","
76673,"    ""$275,000,000"","
76674,"    ""$393,151,347"","
76675,)
76676,table.add_row(
76677,"    ""Dec 15, 2017"","
76678,"    ""Star Wars Ep. VIII: The Last Jedi"","
76679,"    ""$262,000,000"","
76680,"    ""[bold]$1,332,539,889[/bold]"","
76681,)
76682,
76683,console.print(table)
76684,table = [
76685,"    ['number1', 'x', 'name'],"
76686,"    [""4x"", ""3"", ""Hi""],"
76687,"    [""2"", ""1"", ""808890312093""],"
76688,"    [""5"", ""Hi"", ""Bye""]"
76689,]
76690,column_max_width = [max(len(row[column_index]) for row in table) for column_index in range(len(table[0]))]
76691,"row_format = [""{:>""+str(width)+""}"" for width in column_max_width]"
76692,for row in table:
76693,"    print(""|"".join([print_format.format(value) for print_format, value in zip(row_format, row)]))"
76694,number1| x|        name
76695,     4x| 3|          Hi
76696,      2| 1|808890312093
76697,      5|Hi|         Bye
76698,terminaltables
76699,pip install terminaltables
76700,from terminaltables import AsciiTable
76701,
76702,l = [
76703,"  ['Head', 'Head'],"
76704,"  ['R1 C1', 'R1 C2'],"
76705,"  ['R2 C1', 'R2 C2'],"
76706,"  ['R3 C1', 'R3 C2']"
76707,]
76708,
76709,table = AsciiTable(l)
76710,print(table.table)
76711,"list1 = [1, 2, 3]"
76712,"list2 = [10, 20, 30]"
76713,
76714,l = []
76715,
76716,"for i in range(0, len(list1)):"
76717,"    l.append(list1[i]), l.append(list2[i])"
76718,
76719,# print(l)
76720,
76721,"for i in range(0, len(l), 2):"
76722,"    print(l[i], """", l[i + 1])"
76723,UnicodeEncodeError: 'charmap' codec can't encode character ....
76724,?
76725,win-unicode-console
76726,print(unicode_string)
76727,UnicodeEncodeError: 'charmap' codec can't encode character...
76728,chcp
76729,cp437
76730,WriteConsoleW()
76731,win-unicode-console
76732,T:\> py -m pip install win-unicode-console
76733,T:\> py -m run your_script.py
76734,?
76735,?
76736,PYTHONIOENCODING
76737,T:\> set PYTHONIOENCODING=:replace
76738,"T:\> python3 -c ""print(u'[\N{EURO SIGN}]')"""
76739,[?]
76740,PYTHONIOENCODING
76741,PYTHONLEGACYWINDOWSIOENCODING
76742,print('\u4E01')
76743,print('\u6b63')
76744,"$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \"
76745,    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
76746,"    line = u""\u0411\n""; print type(line), len(line); \"
76747,    sys.stdout.write(line); print line'
76748,  UTF-8
76749,  <type 'unicode'> 2
76750,  Б
76751,  Б
76752,
76753,"  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \"
76754,    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
76755,"    line = u""\u0411\n""; print type(line), len(line); \"
76756,    sys.stdout.write(line); print line' | cat
76757,  None
76758,  <type 'unicode'> 2
76759,  Б
76760,  Б
76761,sys.stdout
76762,u'\u2013'
76763,û
76764,cp437
76765,cp1252
76766,UnicodeEncodeError: 'charmap' codec can't encode character
76767,Ø§©
76768,╪º⌐
76769,sys.setdefaultencoding
76770,win-unicode-console
76771,py -mrun your_script.py
76772,from __future__ import print_function
76773,import sys
76774,
76775,def safeprint(s):
76776,    try:
76777,        print(s)
76778,    except UnicodeEncodeError:
76779,"        if sys.version_info >= (3,):"
76780,            print(s.encode('utf8').decode(sys.stdout.encoding))
76781,        else:
76782,            print(s.encode('utf8'))
76783,
76784,"safeprint(u""\N{EM DASH}"")"
76785,.encode('utf8').decode(sys.stdout.encoding)
76786,"u""\N{EM DASH}"".encode('utf-8').decode('cp437')"
76787,ΓÇö
76788,print(s.encode('utf-8'))
76789,#!/usr/bin/python
76790,# -*- coding: UTF-8 -*-
76791,
76792,"import codecs, sys"
76793,
76794,reload(sys)
76795,sys.setdefaultencoding('utf-8')
76796,
76797,print sys.getdefaultencoding()
76798,
76799,if sys.platform == 'win32':
76800,    try:
76801,        import win32console 
76802,    except:
76803,"        print ""Python Win32 Extensions module is required.\n You can download it from https://sourceforge.net/projects/pywin32/ (x86 and x64 builds are available)\n"""
76804,        exit(-1)
76805,    # win32console implementation  of SetConsoleCP does not return a value
76806,    # CP_UTF8 = 65001
76807,    win32console.SetConsoleCP(65001)
76808,    if (win32console.GetConsoleCP() != 65001):
76809,"        raise Exception (""Cannot set console codepage to 65001 (UTF-8)"")"
76810,    win32console.SetConsoleOutputCP(65001)
76811,    if (win32console.GetConsoleOutputCP() != 65001):
76812,"        raise Exception (""Cannot set console output codepage to 65001 (UTF-8)"")"
76813,
76814,"#import sys, codecs"
76815,sys.stdout = codecs.getwriter('utf8')(sys.stdout)
76816,sys.stderr = codecs.getwriter('utf8')(sys.stderr)
76817,
76818,"print ""This is an Е乂αmp١ȅ testing Unicode support using Arabic, Latin, Cyrillic, Greek, Hebrew and CJK code points.\n"""
76819,import win32console
76820,try
76821,try
76822,import
76823,chcp 65001 & set PYTHONIOENCODING=utf-8
76824,def pr(s):
76825,    try:
76826,        print(s)
76827,    except UnicodeEncodeError:
76828,        for c in s:
76829,            try:
76830,"                print( c, end='')"
76831,            except UnicodeEncodeError:
76832,"                print( '?', end='')"
76833,>set PYTHONIOENCODING=UTF-8
76834,set PYTHONIOENCODING=UTF-8
76835,cp65001
76836,WriteConsoleW()
76837,PYTHONIOENCODING
76838,?
76839,WriteConsoleW()
76840,PYTHONIOENCODING
76841,"print unicode(string, 'unicode-escape')"
76842,import os
76843,"string = ""002 Could've Would've Should've"""
76844,os.system('echo ' + string)
76845,pip install win-unicode-console
76846,py -mrun your_script.py
76847,"print(yourstring.encode('ascii','replace'));"
76848,"msg = s.recv(1024).decode(""utf-8"")"
76849,"print(msg.encode('ascii','replace'));"
76850,UnicodeEncodeError: 'charmap'
76851,?
76852,import sys
76853,sys.getdefaultencoding()
76854,import sys
76855,sys.setdefaultencoding('utf-8')
76856,# -*- coding: UTF-8 -*-
76857,"import sys,time"
76858,OSError: [winError 87] The paraneter is incorrect 
76859,Exception ignored in: (_io-TextIOwrapper name='(stdout)' mode='w' ' encoding='utf8') 
76860,OSError: [WinError 87] The parameter is incorrect 
76861,font
76862,print()
76863,UnicodeEncodeError
76864,print(text)
76865,print(str(text).encode('utf-8'))
76866,str()
76867,encode()
76868,import locale 
76869,locale.getpreferredencoding()
76870,import os
76871,"if os.name == ""nt"":"
76872,    import _locale
76873,    _locale._gdl_bak = _locale._getdefaultlocale
76874,"    _locale._getdefaultlocale = (lambda *args: (_locale._gdl_bak()[0], 'utf8'))"
76875,"# directorys == {'login': <object at ...>, 'home': <object at ...>}"
76876,for d in directorys:
76877,"    self.command[""cd "" + d] = (lambda : self.root.change_directory(d))"
76878,# Expected :
76879,self.command == {
76880,"    ""cd login"": lambda: self.root.change_directory(""login""),"
76881,"    ""cd home"": lambda: self.root.change_directory(""home"")"
76882,}
76883,# Result :
76884,self.command == {
76885,"    ""cd login"": lambda: self.root.change_directory(""login""),"
76886,"    ""cd home"": lambda: self.root.change_directory(""login"")   # <- Why login ?"
76887,}
76888,lambda d=d: self.root.change_directory(d)
76889,lambda bound_d=d: self.root.change_directory(bound_d)
76890,(lambda d=d: lambda: self.root.change_directory(d))()
76891,# or
76892,(lambda d: lambda: self.root.change_directory(d))(d)
76893,command = lambda path = path: selected(path)
76894,d
76895,d
76896,funcs = []
76897,"for x in [1,2,3]:"
76898,  funcs.append(lambda: x)
76899,
76900,for f in funcs:
76901,  print f()
76902,
76903,# output:
76904,3
76905,3
76906,3
76907,def makeFunc(x):
76908,  return lambda: x
76909,
76910,funcs = []
76911,"for x in [1,2,3]:"
76912,  funcs.append(makeFunc(x))
76913,
76914,for f in funcs:
76915,  print f()
76916,
76917,# output:
76918,1
76919,2
76920,3
76921,lambda bound_x=x: bound_x
76922,def
76923,lambda
76924,functools.partial
76925,for d in directorys:
76926,"    self.command[""cd "" + d] = (lambda d=d: self.root.change_directory(d))"
76927,for d in directorys:
76928,"    self.command[""cd "" + d] = partial(self.root.change_directory, d)"
76929,"numbers = [1, 2, 3]"
76930,
76931,lambdas = [lambda: print(number) 
76932,           for number in numbers]
76933,lambdas_with_binding = [lambda number=number: print(number) 
76934,                        for number in numbers]
76935,"partials = [partial(print, number) "
76936,            for number in numbers]
76937,
76938,for function in lambdas:
76939,    function()
76940,# 3 3 3
76941,for function in lambdas_with_binding:
76942,    function()
76943,# 1 2 3
76944,for function in partials:
76945,    function()
76946,# 1 2 3
76947,lambda x=x
76948,functools.partial
76949,foo = lambda d: lambda : self.root.change_directory(d)
76950,for d in directorys:
76951,"    self.command[""cd "" + d] = (foo(d))"
76952,"['$a', '$b', '$c', '$d', '$e']"
76953,"['a', 'b', 'c', 'd', 'e']"
76954,df.rename()
76955,"df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})"
76956,# Or rename the existing DataFrame (rather than creating a copy) 
76957,"df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True)"
76958,"df = pd.DataFrame('x', index=range(3), columns=list('abcde'))"
76959,df
76960,
76961,   a  b  c  d  e
76962,0  x  x  x  x  x
76963,1  x  x  x  x  x
76964,2  x  x  x  x  x
76965,"df2 = df.rename({'a': 'X', 'b': 'Y'}, axis=1)  # new method"
76966,"df2 = df.rename({'a': 'X', 'b': 'Y'}, axis='columns')"
76967,"df2 = df.rename(columns={'a': 'X', 'b': 'Y'})  # old method  "
76968,
76969,df2
76970,
76971,   X  Y  c  d  e
76972,0  x  x  x  x  x
76973,1  x  x  x  x  x
76974,2  x  x  x  x  x
76975,inplace=True
76976,"df.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True)"
76977,df
76978,
76979,   X  Y  c  d  e
76980,0  x  x  x  x  x
76981,1  x  x  x  x  x
76982,2  x  x  x  x  x
76983, 
76984,errors='raise'
76985,rename()
76986,df.set_axis()
76987,axis=1
76988,inplace=False
76989,"df2 = df.set_axis(['V', 'W', 'X', 'Y', 'Z'], axis=1, inplace=False)"
76990,df2
76991,
76992,   V  W  X  Y  Z
76993,0  x  x  x  x  x
76994,1  x  x  x  x  x
76995,2  x  x  x  x  x
76996,inplace=True
76997,"df.columns = ['V', 'W', 'X', 'Y', 'Z']"
76998,df
76999,
77000,   V  W  X  Y  Z
77001,0  x  x  x  x  x
77002,1  x  x  x  x  x
77003,2  x  x  x  x  x
77004,code
77005,code
77006,SettingWithCopyWarning:
77007,"df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})"
77008,df['newName1']
77009,inplace=True
77010,df = df.copy().rename(columns={ 'old': 'new_name'})
77011,.columns
77012,">>> df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})"
77013,>>> df
77014,   $a  $b
77015,0   1  10
77016,1   2  20
77017,
77018,">>> df.columns = ['a', 'b']"
77019,>>> df
77020,   a   b
77021,0  1  10
77022,1  2  20
77023,new_columns = df.columns.values; 
77024,new_columns[0] = 'XX';
77025,df.columns  = new_columns
77026,"df.rename(columns = {'$b':'B'}, inplace = True)"
77027,rename
77028,In [11]: df.columns
77029,"Out[11]: Index([u'$a', u'$b', u'$c', u'$d', u'$e'], dtype=object)"
77030,
77031,"In [12]: df.rename(columns=lambda x: x[1:], inplace=True)"
77032,
77033,In [13]: df.columns
77034,"Out[13]: Index([u'a', u'b', u'c', u'd', u'e'], dtype=object)"
77035,"df.rename(columns=lambda x: x.lstrip(), inplace=True)"
77036,"t.columns = t.columns.str.replace(r'[^\x00-\x7F]+','')"
77037,"df.rename(columns=lambda x: x.replace(' ', '_'), inplace=True)"
77038,df.Column_1_Name
77039,"df.loc[:, 'Column 1 Name']"
77040,"df.columns = df.columns.str.replace('$', '')"
77041,rename
77042,axis
77043,columns
77044,1
77045,index
77046,columns
77047,set_axis
77048,inplace
77049,False
77050,"df = pd.DataFrame({'$a':[1,2], '$b': [3,4], "
77051,"                   '$c':[5,6], '$d':[7,8], "
77052,"                   '$e':[9,10]})"
77053,
77054,   $a  $b  $c  $d  $e
77055,0   1   3   5   7   9
77056,1   2   4   6   8  10
77057,rename
77058,axis='columns'
77059,axis=1
77060,"df.rename({'$a':'a', '$b':'b', '$c':'c', '$d':'d', '$e':'e'}, axis='columns')"
77061,"df.rename({'$a':'a', '$b':'b', '$c':'c', '$d':'d', '$e':'e'}, axis=1)"
77062,   a  b  c  d   e
77063,0  1  3  5  7   9
77064,1  2  4  6  8  10
77065,"df.rename(columns={'$a':'a', '$b':'b', '$c':'c', '$d':'d', '$e':'e'})"
77066,rename
77067,"df.rename(lambda x: x[1:], axis='columns')"
77068,"df.rename(lambda x: x[1:], axis=1)"
77069,set_axis
77070,inplace=False
77071,set_axis
77072,inplace
77073,True
77074,inplace
77075,False
77076,"df.set_axis(['a', 'b', 'c', 'd', 'e'], axis='columns', inplace=False)"
77077,"df.set_axis(['a', 'b', 'c', 'd', 'e'], axis=1, inplace=False)"
77078,"df.columns = ['a', 'b', 'c', 'd', 'e']"
77079,set_axis
77080,# new for pandas 0.21+
77081,df.some_method1()
77082,  .some_method2()
77083,  .set_axis()
77084,  .some_method3()
77085,
77086,# old way
77087,df1 = df.some_method1()
77088,        .some_method2()
77089,df1.columns = columns
77090,df1.some_method3()
77091,Pandas 0.21+ answer
77092,"(df      .groupby(['page',pd.Grouper(key='date',freq='MS')])['clicks'].sum()      .unstack(1)      .rename(lambda x: x.strftime(""%Y-%m""), axis='columns') )"
77093,"df = df.rename(columns=lambda x: x.replace('$', ''))"
77094,"df.rename(columns=lambda x: x.replace('$', ''), inplace=True)"
77095,"df.rename(columns={'$a': 'a', '$b': 'b', '$c': 'c', '$d': 'd', '$e': 'e'}, inplace=True)"
77096,columns
77097,"df.rename(columns=lambda name: name[1:], inplace=True)"
77098,"df.columns = ['a', 'b', 'c', 'd', 'e']"
77099,df.columns.values
77100,"old_names = ['$a', '$b', '$c', '$d', '$e'] "
77101,"new_names = ['a', 'b', 'c', 'd', 'e']"
77102,"df.rename(columns=dict(zip(old_names, new_names)), inplace=True)"
77103,new_names
77104,"df.columns = ['a', 'b', 'c', 'd', 'e']"
77105,df.columns.values
77106,myList = list(df)  myList[10:20]
77107,namez = df.columns.values
77108,df.columns = namez
77109,'$'
77110,columns
77111,df.columns = new
77112,new
77113,columns
77114,df
77115,"df = pd.DataFrame({'Jack': [1, 2], 'Mahesh': [3, 4], 'Xin': [5, 6]})"
77116,"new = ['x098', 'y765', 'z432']"
77117,
77118,df
77119,
77120,   Jack  Mahesh  Xin
77121,0     1       3    5
77122,1     2       4    6
77123,pd.DataFrame.rename
77124,pd.DataFrame.rename
77125,"d = {'Jack': 'x098', 'Mahesh': 'y765', 'Xin': 'z432'}"
77126,df.rename(columns=d)
77127,
77128,   x098  y765  z432
77129,0     1     3     5
77130,1     2     4     6
77131,rename
77132,df
77133,# Given just a list of new column names
77134,"df.rename(columns=dict(zip(df, new)))"
77135,
77136,   x098  y765  z432
77137,0     1     3     5
77138,1     2     4     6
77139,df = pd.DataFrame(
77140,"    [[1, 3, 5], [2, 4, 6]],"
77141,"    columns=['Mahesh', 'Mahesh', 'Xin']"
77142,)
77143,"new = ['x098', 'y765', 'z432']"
77144,
77145,df
77146,
77147,   Mahesh  Mahesh  Xin
77148,0       1       3    5
77149,1       2       4    6
77150,pd.concat
77151,keys
77152,"df.rename(columns=dict(zip(df, new)))"
77153,
77154,   y765  y765  z432
77155,0     1     3     5
77156,1     2     4     6
77157,new
77158,y765
77159,keys
77160,pd.concat
77161,df
77162,"pd.concat([c for _, c in df.items()], axis=1, keys=new) "
77163,
77164,   x098  y765  z432
77165,0     1     3     5
77166,1     2     4     6
77167,dtype
77168,dtype
77169,object
77170,dtype
77171,"pd.DataFrame(df.values, df.index, new)"
77172,
77173,   x098  y765  z432
77174,0     1     3     5
77175,1     2     4     6
77176,dtype
77177,"pd.DataFrame(df.values, df.index, new).astype(dict(zip(new, df.dtypes)))"
77178,
77179,   x098  y765  z432
77180,0     1     3     5
77181,1     2     4     6
77182,transpose
77183,set_index
77184,pd.DataFrame.set_index
77185,set_columns
77186,set_index
77187,dtype
77188,dtype
77189,dtype
77190,df.T.set_index(np.asarray(new)).T
77191,
77192,   x098  y765  z432
77193,0     1     3     5
77194,1     2     4     6
77195,dtype
77196,"df.T.set_index(np.asarray(new)).T.astype(dict(zip(new, df.dtypes)))"
77197,
77198,   x098  y765  z432
77199,0     1     3     5
77200,1     2     4     6
77201,lambda
77202,pd.DataFrame.rename
77203,new
77204,x
77205,y
77206,x
77207,"df.rename(columns=lambda x, y=iter(new): next(y))"
77208,
77209,   x098  y765  z432
77210,0     1     3     5
77211,1     2     4     6
77212,*
77213,x
77214,y
77215,y
77216,"df.rename(columns=lambda x, *, y=iter(new): next(y))"
77217,
77218,   x098  y765  z432
77219,0     1     3     5
77220,1     2     4     6
77221,"df.rename(lambda x : x.lstrip('$'),axis=1) "
77222,x
77223,numpy.array
77224,numpy.array
77225,.name
77226,df.columns
77227,list
77228,Series
77229,.name
77230,Series
77231,"df.columns = ['column_one', 'column_two']"
77232,df.columns.names = ['name of the list of columns']
77233,df.index.names = ['name of the index']
77234,
77235,name of the list of columns     column_one  column_two
77236,name of the index
77237,0                                    4           1
77238,1                                    5           2
77239,2                                    6           3
77240,.name
77241,"df.columns = ['one', 'two']"
77242,df.one.name
77243,'one'
77244,df.one.name = 'three'
77245,df.columns
77246,"['one', 'two']"
77247,df.one.name
77248,'three'
77249,pd.DataFrame(df.one)
77250,    three
77251,0       1
77252,1       2
77253,2       3
77254,.name
77255,Series
77256,    |one            |
77257,    |one      |two  |
77258,0   |  4      |  1  |
77259,1   |  5      |  2  |
77260,2   |  6      |  3  |
77261,"df.columns = [['one', 'one'], ['one', 'two']]"
77262," df = pd.DataFrame({""A"": [1, 2, 3], ""B"": [4, 5, 6]}) # Creating a df with column name A and B"
77263," df.rename({""A"": ""new_a"", ""B"": ""new_b""}, axis='columns', inplace =True) # Renaming column A with 'new_a' and B with 'new_b'"
77264,
77265, Output:
77266,
77267,    new_a  new_b
77268, 0  1       4
77269, 1  2       5
77270, 2  3       6
77271," df.rename({0: ""x"", 1: ""y"", 2: ""z""}, axis='index', inplace =True) # Row name are getting replaced by 'x', 'y', and 'z'."
77272,
77273, Output:
77274,
77275,        new_a  new_b
77276,     x  1       4
77277,     y  2       5
77278,     z  3       6
77279,"df = ['$a', '$b', '$c', '$d', '$e']`"
77280,"df.columns = ['a','b','c','d','e']"
77281,dataframe.columns=[#list]
77282,"df.columns=['a','b','c','d','e']"
77283,"df.columns = ['a','b','c','d']"
77284,rename()
77285,df = df.rename(columns={'$a':'a'})
77286,"df = pd.DataFrame({'$a':[1,2], '$b': [3,4]})"
77287,"df.rename(columns={'$a': 'a'}, inplace=True)"
77288,df.columns
77289,
77290,">>> Index(['a', '$b'], dtype='object')"
77291,"df = pd.DataFrame({'$a':[1,2], '$b': [3,4]})"
77292,"df2 = df.rename(columns={'$a': 'a'}, inplace=False)"
77293,df.columns
77294,    
77295,">>> Index(['$a', '$b'], dtype='object')"
77296,
77297,df2.columns
77298,
77299,">>> Index(['a', '$b'], dtype='object')"
77300,columns = df.columns
77301,"columns = [row.replace(""$"", """") for row in columns]"
77302,"df.rename(columns=dict(zip(columns, things)), inplace=True)"
77303,df.head() # To validate the output
77304,import pandas as pd
77305,"import cProfile, pstats, re"
77306,
77307,"old_names = ['$a', '$b', '$c', '$d', '$e']"
77308,"new_names = ['a', 'b', 'c', 'd', 'e']"
77309,"col_dict = {'$a': 'a', '$b': 'b', '$c': 'c', '$d': 'd', '$e': 'e'}"
77310,
77311,"df = pd.DataFrame({'$a':[1, 2], '$b': [10, 20], '$c': ['bleep', 'blorp'], '$d': [1, 2], '$e': ['texa$', '']})"
77312,
77313,df.head()
77314,
77315,"def eumiro(df, nn):"
77316,    df.columns = nn
77317,    # This direct renaming approach is duplicated in methodology in several other answers:
77318,    return df
77319,
77320,def lexual1(df):
77321,    return df.rename(columns=col_dict)
77322,
77323,"def lexual2(df, col_dict):"
77324,"    return df.rename(columns=col_dict, inplace=True)"
77325,
77326,def Panda_Master_Hayden(df):
77327,"    return df.rename(columns=lambda x: x[1:], inplace=True)"
77328,
77329,def paulo1(df):
77330,"    return df.rename(columns=lambda x: x.replace('$', ''))"
77331,
77332,def paulo2(df):
77333,"    return df.rename(columns=lambda x: x.replace('$', ''), inplace=True)"
77334,
77335,"def migloo(df, on, nn):"
77336,"    return df.rename(columns=dict(zip(on, nn)), inplace=True)"
77337,
77338,def kadee(df):
77339,"    return df.columns.str.replace('$', '')"
77340,
77341,def awo(df):
77342,    columns = df.columns
77343,"    columns = [row.replace(""$"", """") for row in columns]"
77344,"    return df.rename(columns=dict(zip(columns, '')), inplace=True)"
77345,
77346,def kaitlyn(df):
77347,    df.columns = [col.strip('$') for col in df.columns]
77348,    return df
77349,
77350,print 'eumiro'
77351,"cProfile.run('eumiro(df, new_names)')"
77352,print 'lexual1'
77353,cProfile.run('lexual1(df)')
77354,print 'lexual2'
77355,"cProfile.run('lexual2(df, col_dict)')"
77356,print 'andy hayden'
77357,cProfile.run('Panda_Master_Hayden(df)')
77358,print 'paulo1'
77359,cProfile.run('paulo1(df)')
77360,print 'paulo2'
77361,cProfile.run('paulo2(df)')
77362,print 'migloo'
77363,"cProfile.run('migloo(df, old_names, new_names)')"
77364,print 'kadee'
77365,cProfile.run('kadee(df)')
77366,print 'awo'
77367,cProfile.run('awo(df)')
77368,print 'kaitlyn'
77369,cProfile.run('kaitlyn(df)')
77370,"df.rename(index=str, columns={'A':'a', 'B':'b'})"
77371,"df = pd.DataFrame({'$a': [1], '$b': [1], '$c': [1], '$d': [1], '$e': [1]})"
77372,"new_cols = ['a', 'b', 'c', 'd', 'e']"
77373,df.columns = new_cols
77374,>>> df
77375,   a  b  c  d  e
77376,0  1  1  1  1  1
77377,"d = {'$a': 'a', '$b': 'b', '$c': 'c', '$d': 'd', '$e': 'e'}"
77378,df.columns = df.columns.map(lambda col: d[col])  # Or `.map(d.get)` as pointed out by @PiRSquared.
77379,>>> df
77380,   a  b  c  d  e
77381,0  1  1  1  1  1
77382,$
77383,df.columns = [col[1:] if col[0] == '$' else col for col in df]
77384,lambda col: d[col]
77385,d.get
77386,df.columns.map(d.get)
77387,"new_cols = ['a', 'b', 'c', 'd', 'e']"
77388,new_names_map = {df.columns[i]:new_cols[i] for i in range(len(new_cols))}
77389,
77390,"df.rename(new_names_map, axis=1, inplace=True)"
77391,df.columns = [col.strip('$') for col in df.columns]
77392,strip
77393,"df.columns = ['Name1', 'Name2', 'Name3'...]"
77394,# This way it will work
77395,import pandas as pd
77396,
77397,# Define a dictionary 
77398,"rankings = {'test': ['a'],"
77399,"        'odi': ['E'],"
77400,        't20': ['P']}
77401,
77402,# Convert the dictionary into DataFrame
77403,rankings_pd = pd.DataFrame(rankings)
77404,
77405,# Before renaming the columns
77406,print(rankings_pd)
77407,
77408,"rankings_pd.rename(columns = {'test':'TEST'}, inplace = True)"
77409,str.slice
77410,df.columns = df.columns.str.slice(1)
77411,df.columns.str[1:]
77412,import pandas as pd
77413,import re
77414,
77415,"df = pd.DataFrame({'$a':[1,2], '$b':[3,4], '$c':[5,6]})"
77416,
77417,"df = df.rename(columns=lambda x: re.sub('\$','',x))"
77418,>>> df
77419,   a  b  c
77420,0  1  3  5
77421,1  2  4  6
77422,delimiters=
77423,import pandas as pd
77424,import re
77425,
77426,
77427,"df = pd.DataFrame({'$a':[1,2], '$b': [3,4],'$c':[5,6], '$d': [7,8], '$e': [9,10]})"
77428,
77429,delimiters = '$'
77430,"matchPattern = '|'.join(map(re.escape, delimiters))"
77431,"df.columns = [re.split(matchPattern, i)[1] for i in df.columns ]"
77432,>>> df
77433,   $a  $b  $c  $d  $e
77434,0   1   3   5   7   9
77435,1   2   4   6   8  10
77436,
77437,>>> df
77438,   a  b  c  d   e
77439,0  1  3  5  7   9
77440,1  2  4  6  8  10
77441,">>> df = pd.DataFrame({('$a','$x'):[1,2], ('$b','$y'): [3,4], ('e','f'):[5,6]})"
77442,>>> df
77443,   $a $b  e
77444,   $x $y  f
77445,0  1  3  5
77446,1  2  4  6
77447,">>> rename = {('$a','$x'):('a','x'), ('$b','$y'):('b','y')}"
77448,>>> df.columns = pandas.MultiIndex.from_tuples([
77449,"        rename.get(item, item) for item in df.columns.tolist()])"
77450,>>> df
77451,   a  b  e
77452,   x  y  f
77453,0  1  3  5
77454,1  2  4  6
77455,"dict = dict(zip(df.columns, df.columns.str.replace('(:S$|:C1$|:L$|:D$|\.Serial:L$)', '')))"
77456,dict['brand_timeseries:C1'] = 'BTS'
77457,dict['respid:L'] = 'RespID'
77458,dict['country:C1'] = 'CountryID'
77459,dict['pim1:D'] = 'pim_actual'
77460,"df.rename(columns=dict, inplace=True)"
77461,"df.columns = pd.Series(df.columns.str.replace(""$"", """"))"
77462,names
77463,header=0
77464,import pandas as pd
77465,
77466,"ufo_cols = ['city', 'color reported', 'shape reported', 'state', 'time']"
77467,ufo.columns = ufo_cols
77468,
77469,"ufo = pd.read_csv('link to the file you are using', names = ufo_cols, header = 0)"
77470,"def rename(data, oldnames, newname):"
77471,    if type(oldnames) == str: # Input can be a string or list of strings
77472,        oldnames = [oldnames] # When renaming multiple columns
77473,        newname = [newname] # Make sure you pass the corresponding list of new names
77474,    i = 0
77475,    for name in oldnames:
77476,        oldvar = [c for c in data.columns if name in c]
77477,        if len(oldvar) == 0:
77478,"            raise ValueError(""Sorry, couldn't find that column in the dataset"")"
77479,        if len(oldvar) > 1: # Doesn't have to be an exact match
77480,"            print(""Found multiple columns that matched "" + str(name) + "": "")"
77481,            for c in oldvar:
77482,"                print(str(oldvar.index(c)) + "": "" + str(c))"
77483,            ind = input('Please enter the index of the column you would like to rename: ')
77484,            oldvar = oldvar[int(ind)]
77485,        if len(oldvar) == 1:
77486,            oldvar = oldvar[0]
77487,        data = data.rename(columns = {oldvar : newname[i]})
77488,        i += 1
77489,    return data
77490,"In [2]: df = pd.DataFrame(np.random.randint(0, 10, size=(10, 4)), columns = ['col1', 'col2', 'omg', 'idk'])"
77491,# First list = existing variables
77492,# Second list = new names for those variables
77493,"In [3]: df = rename(df, ['col', 'omg'],['first', 'ohmy'])"
77494,Found multiple columns that matched col:
77495,0: col1
77496,1: col2
77497,
77498,Please enter the index of the column you would like to rename: 0
77499,
77500,In [4]: df.columns
77501,"Out[5]: Index(['first', 'col2', 'ohmy', 'idk'], dtype='object')"
77502,figure
77503,from matplotlib.pyplot import figure
77504,
77505,"figure(figsize=(8, 6), dpi=80)"
77506,"figure(figsize=(1,1))"
77507,show()
77508,"figure(num=1,...)"
77509,figsize
77510,figure.set_size_inches
77511,fig = matplotlib.pyplot.gcf()
77512,"fig.set_size_inches(18.5, 10.5)"
77513,"fig.savefig('test2png.png', dpi=100)"
77514,forward=True
77515,"fig.set_size_inches(18.5, 10.5, forward=True)"
77516,figure.set_dpi
77517,fig.set_dpi(100)
77518,imshow
77519,"plt.subplots_adjust(left=0.0, right=1.0, bottom=0.0, top=1.0)"
77520,fig.set_dpi(100)
77521,plt.plot()
77522,import matplotlib.pyplot as plt
77523,"plt.rcParams[""figure.figsize""] = (20,3)"
77524,"plt.rcParams[""figure.figsize""] = plt.rcParamsDefault[""figure.figsize""]"
77525,figsize
77526,"plt.rcParams[""figure.figsize""] = (20,3)"
77527,plt.rcParams['figure.figsize'] = plt.rcParamsDefault['figure.figsize']
77528,from matplotlib import pyplot as plt
77529,"plt.figure(figsize=(1,1))"
77530,"x = [1,2,3]"
77531,"plt.plot(x, x)"
77532,plt.show()
77533,atplotlib.pyplot.figure
77534,matplotlib.figure
77535,matplotlib.figure.Figure
77536,"plt.figure(figsize=(1,1))"
77537,pylab
77538,matplotlib.pyplot
77539,from pylab import rcParams
77540,"rcParams['figure.figsize'] = 5, 10"
77541,"fig.set_size_inches(18.5, 10.5, forward=True)"
77542,"df['some_column'].plot(figsize=(10, 5))"
77543,df
77544,"fig, ax = plt.subplots(figsize=(10, 5))"
77545,df['some_column'].plot(ax=ax)
77546,import matplotlib
77547,
77548,"matplotlib.rc('figure', figsize=(10, 5))"
77549,pd.DataFrame.plot
77550,import matplotlib.pyplot as plt
77551,"plt.figure(figsize=(20,10))"
77552,"plt.plot(x,y) ## This is your plot"
77553,plt.show()
77554,"fig, ax = plt.subplots(figsize=(20, 10))"
77555,'matplotlib figure size'
77556,test[1-3].png
77557,#!/usr/bin/env python
77558,""""""""
77559,This is a small demo file that helps teach how to adjust figure sizes
77560,for matplotlib
77561,
77562,""""""""
77563,
77564,import matplotlib
77565,"print ""using MPL version:"", matplotlib.__version__"
77566,"matplotlib.use(""WXAgg"") # do this before pylab so you don'tget the default back end."
77567,
77568,import pylab
77569,import numpy as np
77570,
77571,# Generate and plot some simple data:
77572,"x = np.arange(0, 2*np.pi, 0.1)"
77573,y = np.sin(x)
77574,
77575,"pylab.plot(x,y)"
77576,F = pylab.gcf()
77577,
77578,# Now check everything with the defaults:
77579,DPI = F.get_dpi()
77580,"print ""DPI:"", DPI"
77581,DefaultSize = F.get_size_inches()
77582,"print ""Default size in Inches"", DefaultSize"
77583,"print ""Which should result in a %i x %i Image""%(DPI*DefaultSize[0], DPI*DefaultSize[1])"
77584,# the default is 100dpi for savefig:
77585,"F.savefig(""test1.png"")"
77586,"# this gives me a 797 x 566 pixel image, which is about 100 DPI"
77587,
77588,"# Now make the image twice as big, while keeping the fonts and all the"
77589,# same size
77590,"F.set_size_inches( (DefaultSize[0]*2, DefaultSize[1]*2) )"
77591,Size = F.get_size_inches()
77592,"print ""Size in Inches"", Size"
77593,"F.savefig(""test2.png"")"
77594,# this results in a 1595x1132 image
77595,
77596,"# Now make the image twice as big, making all the fonts and lines"
77597,# bigger too.
77598,
77599,F.set_size_inches( DefaultSize )# resetthe size
77600,Size = F.get_size_inches()
77601,"print ""Size in Inches"", Size"
77602,"F.savefig(""test3.png"", dpi = (200)) # change the dpi"
77603,"# this also results in a 1595x1132 image, but the fonts are larger."
77604,using MPL version: 0.98.1
77605,DPI: 80
77606,Default size in Inches [ 8.  6.]
77607,Which should result in a 640 x 480 Image
77608,Size in Inches [ 16.  12.]
77609,Size in Inches [ 16.  12.]
77610,"fig = plt.figure() default_size = fig.get_size_inches() fig.set_size_inches( (default_size[0]*2, default_size[1]*2) )"
77611,"fig.set_size_inches(width,height)"
77612,forward
77613,True
77614,fig.set_figwidth(val)
77615,fig.set_figheight(val)
77616,forward=True
77617,set_figwidth
77618,set_figheight
77619,forward
77620,fig = ...
77621,%matplotlib inline
77622,import numpy as np
77623,import matplotlib.pyplot as plt
77624,
77625,N = 50
77626,x = np.random.rand(N)
77627,y = np.random.rand(N)
77628,area = np.pi * (15 * np.random.rand(N))**2
77629,
77630,"fig = plt.figure(figsize=(18, 18))"
77631,"plt.scatter(x, y, s=area, alpha=0.5)"
77632,plt.show()
77633,from matplotlib import pyplot as plt
77634,
77635,F = plt.gcf()
77636,Size = F.get_size_inches()
77637,"F.set_size_inches(Size[0]*2, Size[1]*2, forward=True) # Set forward to True to resize window along with plot in figure."
77638,"plt.show() # Or plt.imshow(z_array) if using an animation, where z_array is a matrix or NumPy array"
77639,savefig
77640,#!/usr/bin/env python3
77641,
77642,import sys
77643,
77644,import numpy as np
77645,import matplotlib.pyplot as plt
77646,import matplotlib as mpl
77647,
77648,"fig, ax = plt.subplots()"
77649,print('fig.dpi = {}'.format(fig.dpi))
77650,print('fig.get_size_inches() = ' + str(fig.get_size_inches())
77651,"t = np.arange(-10., 10., 1.)"
77652,"plt.plot(t, t, '.')"
77653,"plt.plot(t, t**2, '.')"
77654,"ax.text(0., 60., 'Hello', fontdict=dict(size=25))"
77655,"plt.savefig('base.png', format='png')"
77656,./base.py
77657,identify base.png
77658,fig.dpi = 100.0
77659,fig.get_size_inches() = [6.4 4.8]
77660,base.png PNG 640x480 640x480+0+0 8-bit sRGB 13064B 0.000u 0:00.000
77661,plt.savefig(dpi=h/fig.get_size_inches()[1]
77662,#!/usr/bin/env python3
77663,
77664,import sys
77665,
77666,import numpy as np
77667,import matplotlib.pyplot as plt
77668,import matplotlib as mpl
77669,
77670,height = int(sys.argv[1])
77671,"fig, ax = plt.subplots()"
77672,"t = np.arange(-10., 10., 1.)"
77673,"plt.plot(t, t, '.')"
77674,"plt.plot(t, t**2, '.')"
77675,"ax.text(0., 60., 'Hello', fontdict=dict(size=25))"
77676,plt.savefig(
77677,"    'get_size.png',"
77678,"    format='png',"
77679,    dpi=height/fig.get_size_inches()[1]
77680,)
77681,./get_size.py 431
77682,get_size.png PNG 574x431 574x431+0+0 8-bit sRGB 10058B 0.000u 0:00.000
77683,./get_size.py 1293
77684,main.png PNG 1724x1293 1724x1293+0+0 8-bit sRGB 46709B 0.000u 0:00.000
77685,plt.savefig(bbox_inches='tight'
77686,bbox_inches='tight'
77687,plt.tight_layout(pad=1)
77688,plt.savefig(...
77689,set_aspect
77690,set_aspect
77691,plt.tight_layout
77692,plt.savefig(dpi=h/fig.get_size_inches()[1]
77693,#!/usr/bin/env python3
77694,
77695,import sys
77696,
77697,import numpy as np
77698,import matplotlib.pyplot as plt
77699,import matplotlib as mpl
77700,
77701,h = int(sys.argv[1])
77702,w = int(sys.argv[2])
77703,"fig, ax = plt.subplots()"
77704,"wi, hi = fig.get_size_inches()"
77705,"fig.set_size_inches(hi*(w/h), hi)"
77706,"t = np.arange(-10., 10., 1.)"
77707,"plt.plot(t, t, '.')"
77708,"plt.plot(t, t**2, '.')"
77709,"ax.text(0., 60., 'Hello', fontdict=dict(size=25))"
77710,plt.savefig(
77711,"    'width.png',"
77712,"    format='png',"
77713,    dpi=h/hi
77714,)
77715,./width.py 431 869
77716,width.png PNG 869x431 869x431+0+0 8-bit sRGB 10965B 0.000u 0:00.000
77717,./width.py 431 869
77718,width.png PNG 211x431 211x431+0+0 8-bit sRGB 6949B 0.000u 0:00.000
77719,100
77720,plt.tight_layout(pad=1)
77721,width.png PNG 211x431 211x431+0+0 8-bit sRGB 7134B 0.000u 0:00.000
77722,tight_layout
77723,dpi
77724,fig.set_size_inches
77725,plt.savefig(dpi=
77726,#!/usr/bin/env python3
77727,
77728,import sys
77729,
77730,import numpy as np
77731,import matplotlib.pyplot as plt
77732,import matplotlib as mpl
77733,
77734,magic_height = 300
77735,w = int(sys.argv[1])
77736,h = int(sys.argv[2])
77737,dpi = 80
77738,"fig, ax = plt.subplots(dpi=dpi)"
77739,"fig.set_size_inches(magic_height*w/(h*dpi), magic_height/dpi)"
77740,"t = np.arange(-10., 10., 1.)"
77741,"plt.plot(t, t, '.')"
77742,"plt.plot(t, t**2, '.')"
77743,"ax.text(0., 60., 'Hello', fontdict=dict(size=25))"
77744,plt.savefig(
77745,"    'magic.png',"
77746,"    format='png',"
77747,"    dpi=h/magic_height*dpi,"
77748,)
77749,./magic.py 431 231
77750,magic.png PNG 431x231 431x231+0+0 8-bit sRGB 7923B 0.000u 0:00.000
77751,./magic.py 1291 693
77752,magic.png PNG 1291x693 1291x693+0+0 8-bit sRGB 25013B 0.000u 0:00.000
77753,magic_height
77754,set_size_inches
77755,#!/usr/bin/env python3
77756,
77757,import sys
77758,
77759,import numpy as np
77760,import matplotlib.pyplot as plt
77761,import matplotlib as mpl
77762,
77763,w = int(sys.argv[1])
77764,h = int(sys.argv[2])
77765,"fig, ax = plt.subplots()"
77766,"fig.set_size_inches(w/fig.dpi, h/fig.dpi)"
77767,"t = np.arange(-10., 10., 1.)"
77768,"plt.plot(t, t, '.')"
77769,"plt.plot(t, t**2, '.')"
77770,ax.text(
77771,"    0,"
77772,"    60.,"
77773,"    'Hello',"
77774,    # Keep font size fixed independently of DPI.
77775,    # https://stackoverflow.com/questions/39395616/matplotlib-change-figsize-but-keep-fontsize-constant
77776,"    fontdict=dict(size=10*h/fig.dpi),"
77777,)
77778,plt.savefig(
77779,"    'set_size_inches.png',"
77780,"    format='png',"
77781,)
77782,./set_size_inches.py 431 231
77783,set_size_inches.png PNG 430x231 430x231+0+0 8-bit sRGB 8078B 0.000u 0:00.000
77784,./set_size_inches.py 1291 693
77785,set_size_inches.png PNG 1291x693 1291x693+0+0 8-bit sRGB 19798B 0.000u 0:00.000
77786,#!/usr/bin/env python3
77787,
77788,import sys
77789,
77790,import numpy as np
77791,import matplotlib.pyplot as plt
77792,import matplotlib as mpl
77793,
77794,height = int(sys.argv[1])
77795,"fig, ax = plt.subplots()"
77796,"t = np.arange(-10., 10., 1.)"
77797,"plt.plot(t, t, '.')"
77798,"plt.plot(t, t**2, '.')"
77799,"ax.text(0., 60., 'Hello', fontdict=dict(size=25))"
77800,plt.savefig(
77801,"    'get_size_svg.svg',"
77802,"    format='svg',"
77803,    dpi=height/fig.get_size_inches()[1]
77804,)
77805,./get_size_svg.py 431
77806,"<svg height=""345.6pt"" version=""1.1"" viewBox=""0 0 460.8 345.6"" width=""460.8pt"""
77807,get_size_svg.svg SVG 614x461 614x461+0+0 8-bit sRGB 17094B 0.000u 0:00.000
77808,inkscape -h 431 get_size_svg.svg -b FFF -e get_size_svg.png
77809,convert
77810,-density
77811,"<img height="""""
77812,N = 2
77813,params = pl.gcf()
77814,plSize = params.get_size_inches()
77815,"params.set_size_inches((plSize[0]*N, plSize[1]*N))"
77816,"plt.figure(figsize=(20,10))"
77817,"plt.plot(x,y)"
77818,plt.pie()
77819,import matplotlib.pyplot as plt
77820,"plt.figure(figsize=(20,10))"
77821,"plt.plot(x,y) ## This is your plot"
77822,plt.show()
77823,sizefactor
77824,import matplotlib.pyplot as plt
77825,
77826,# Here goes your code
77827,
77828,fig_size = plt.gcf().get_size_inches() # Get current size
77829,sizefactor = 0.8 # Set a zoom factor
77830,# Modify the current size by the factor
77831,plt.gcf().set_size_inches(sizefactor * fig_size) 
77832,"plt.subplots_adjust(left=0.16, bottom=0.19, top=0.82)"
77833,def cm2inch(*tupl):
77834,    inch = 2.54
77835,"    if isinstance(tupl[0], tuple):"
77836,        return tuple(i/inch for i in tupl[0])
77837,    else:
77838,        return tuple(i/inch for i in tupl)
77839,"plt.figure(figsize=cm2inch(21, 29.7))"
77840,"plt.figure(figsize=(width,height))"
77841,width
77842,height
77843,"rcParams[""figure.figsize""] = [6.4, 4.8]"
77844,"matplotlib.pyplot.get_current_fig_manager().resize(width_px, height_px)"
77845,import matplotlib
77846,"matplotlib.rc('figure', figsize=[10,5])"
77847,import matplotlib.pyplot as plt
77848,"plt.rc('figure', figsize=(10,5))"
77849,import matplotlib.pyplot as plt
77850,from matplotlib.pyplot import figure
77851,
77852,"figure(figsize=(16, 8), dpi=80)"
77853,"plt.plot(x_test, color = 'red', label = 'Predicted Price')"
77854,"plt.plot(y_test, color = 'blue', label = 'Actual Price')"
77855,plt.title('Dollar to PKR Prediction')
77856,plt.xlabel('Predicted Price')
77857,plt.ylabel('Actual Dollar Price')
77858,plt.legend()
77859,plt.show()
77860,           
77861,figsize
77862,import matplotlib.pyplot as plt
77863,"fig = plt.figure(figsize=(w,h))"
77864,set_size_inches()
77865,"fig.set_size_inches(w,h)"
77866,rc
77867,"plt.rc('figure', figsize=(w,h))"
77868,import random
77869,import math
77870,import matplotlib.pyplot as plt
77871,start=-20
77872,end=20
77873,"x=[v for v in range(start,end)]"
77874,#sigmoid function
77875,def sigmoid(x):
77876,    return 1/(1+math.exp(x))
77877,"plt.figure(figsize=(8,5))#setting the figure size"
77878,"plt.scatter([abs(v) for v in x],[sigmoid(v) for v in x])"
77879,"plt.scatter(x,[sigmoid(sigmoid(v)) for v in x])"
77880,import matplotlib as mpl
77881,import matplotlib.pyplot as plt
77882,"mpl.rcParams['figure.figsize'] = (8, 6)"
77883,mpl.rcParams['axes.grid'] = False
77884,import matplotlib.pyplot as plt
77885,
77886,"data = [2,5,8,10,15] # Random data, can use existing data frame column"
77887,
77888,"fig, axs = plt.subplots(figsize = (20,6)) # This is your answer to resize the figure"
77889,
77890,# The below will help you expand on your question and resize individual elements within your figure. Experiement with the below parameters.
77891,"axs.set_title(""Data"", fontsize = 17.5)"
77892,"axs.tick_params(axis = 'x', labelsize = 14)"
77893,"axs.set_xlabel('X Label Here', size = 15)"
77894,"axs.tick_params(axis = 'y', labelsize =14)"
77895,"axs.set_ylabel('Y Label Here', size = 15)"
77896,
77897,plt.plot(data)
77898,x_inches = 150*(1/25.4)     # [mm]*constant
77899,y_inches = x_inches*(0.8)
77900,dpi = 96
77901,
77902,"fig = plt.figure(1, figsize = (x_inches,y_inches), dpi = dpi, constrained_layout = True)"
77903,constrained_layout
77904,True
77905,dict2 = dict1
77906,dict2
77907,dict1
77908,">>> dict1 = {""key1"": ""value1"", ""key2"": ""value2""}"
77909,>>> dict2 = dict1
77910,">>> dict2[""key2""] = ""WHY?!"""
77911,>>> dict1
77912,"{'key2': 'WHY?!', 'key1': 'value1'}"
77913,dict1
77914,dict2
77915,dict2 = dict1
77916,dict2 = dict(dict1)
77917,dict2 = dict1.copy()
77918,dir(1)
77919,int
77920,float
77921,bool
77922,copy.deepcopy()
77923,dict()
77924,dict.copy()
77925,dict2 = dict1
77926,dict1
77927,dict2
77928,dict1
77929,copy
77930,deepcopy
77931,copy
77932,import copy
77933,
77934,dict2 = copy.deepcopy(dict1)
77935,dict.copy()
77936,dict(dict1)
77937,copy.deepcopy(dict1)
77938,">>> source = {'a': 1, 'b': {'m': 4, 'n': 5, 'o': 6}, 'c': 3}"
77939,>>> copy1 = x.copy()
77940,>>> copy2 = dict(x)
77941,>>> import copy
77942,>>> copy3 = copy.deepcopy(x)
77943,>>> source['a'] = 10  # a change to first-level properties won't affect copies
77944,>>> source
77945,"{'a': 10, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}"
77946,>>> copy1
77947,"{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}"
77948,>>> copy2
77949,"{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}"
77950,>>> copy3
77951,"{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}"
77952,>>> source['b']['m'] = 40  # a change to deep properties WILL affect shallow copies 'b.m' property
77953,>>> source
77954,"{'a': 10, 'c': 3, 'b': {'m': 40, 'o': 6, 'n': 5}}"
77955,>>> copy1
77956,"{'a': 1, 'c': 3, 'b': {'m': 40, 'o': 6, 'n': 5}}"
77957,>>> copy2
77958,"{'a': 1, 'c': 3, 'b': {'m': 40, 'o': 6, 'n': 5}}"
77959,>>> copy3  # Deep copy's 'b.m' property is unaffected
77960,"{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}"
77961,copy
77962,w=copy.deepcopy(x)
77963,dict2 = dict1
77964,dict2 = copy.deepcopy(dict1)
77965,">>> dict1 = {""key1"": ""value1"", ""key2"": ""value2""}"
77966,>>> dict2 = dict1.copy()
77967,>>> dict2
77968,"{'key1': 'value1', 'key2': 'value2'}"
77969,">>> dict2[""key2""] = ""WHY?"""
77970,>>> dict2
77971,"{'key1': 'value1', 'key2': 'WHY?'}"
77972,>>> dict1
77973,"{'key1': 'value1', 'key2': 'value2'}"
77974,>>> id(dict1)
77975,140641178056312
77976,>>> id(dict2)
77977,140641176198960
77978,>>> 
77979,>>> import copy
77980,">>> dict1 = {""key1"" : ""value1"", ""key2"": {""mutable"": True}}"
77981,>>> dict2 = dict1.copy()
77982,>>> dict2
77983,"{'key1': 'value1', 'key2': {'mutable': True}}"
77984,">>> dict2[""key2""][""mutable""] = False"
77985,>>> dict2
77986,"{'key1': 'value1', 'key2': {'mutable': False}}"
77987,>>> dict1
77988,"{'key1': 'value1', 'key2': {'mutable': False}}"
77989,>>> id(dict1)
77990,140641197660704
77991,>>> id(dict2)
77992,140641196407832
77993,">>> id(dict1[""key2""])"
77994,140641176198960
77995,">>> id(dict2[""key2""])"
77996,140641176198960
77997,>>>import copy
77998,">>> dict1 = {""key1"" : ""value1"", ""key2"": {""mutable"": True}}"
77999,>>> dict2 = copy.deepcopy(dict1)
78000,>>> dict2
78001,"{'key1': 'value1', 'key2': {'mutable': True}}"
78002,>>> id(dict1)
78003,140641196228824
78004,>>> id(dict2)
78005,140641197662072
78006,">>> id(dict1[""key2""])"
78007,140641178056312
78008,">>> id(dict2[""key2""])"
78009,140641197662000
78010,">>> dict2[""key2""][""mutable""] = False"
78011,>>> dict2
78012,"{'key1': 'value1', 'key2': {'mutable': False}}"
78013,>>> dict1
78014,"{'key1': 'value1', 'key2': {'mutable': True}}"
78015,">>>dict1 = {""key1"": ""value1"", ""key2"": ""value2""}"
78016,>>>dict2 = {**dict1}
78017,>>>print(dict2)
78018,"{'key1': 'value1', 'key2': 'value2'}"
78019,">>>dict2[""key2""] = ""WHY?!"""
78020,>>>print(dict1)
78021,"{'key1': 'value1', 'key2': 'value2'}"
78022,>>>print(dict2)
78023,"{'key1': 'value1', 'key2': 'WHY?!'}"
78024,>>>id(dict1)
78025, 178192816
78026,
78027,>>>id(dict2)
78028, 178192600
78029,"dict2 = {**dict1, 'key3':'value3'}"
78030,my_dict1 = dict()
78031,"my_dict1[""message""] = ""Hello Python"""
78032,print(my_dict1)  # {'message':'Hello Python'}
78033,
78034,my_dict2 = dict(my_dict1)
78035,print(my_dict2)  # {'message':'Hello Python'}
78036,
78037,# Made changes in my_dict1 
78038,"my_dict1[""name""] = ""Emrit"""
78039,"print(my_dict1)  # {'message':'Hello Python', 'name' : 'Emrit'}"
78040,print(my_dict2)  # {'message':'Hello Python'}
78041,my_dict2 = dict()
78042,my_dict2.update(my_dict1)
78043,print(my_dict2)  # {'message':'Hello Python'}
78044,
78045,# Made changes in my_dict1 
78046,"my_dict1[""name""] = ""Emrit"""
78047,"print(my_dict1)  # {'message':'Hello Python', 'name' : 'Emrit'}"
78048,print(my_dict2)  # {'message':'Hello Python'}
78049,import copy
78050,
78051,my_dict2 = copy.deepcopy(my_dict1)
78052,dict()
78053,dict
78054,dict
78055,"dout = dict((k,v) for k,v in mydict.items())"
78056,"dout = {k:v for k,v in mydict.items()}"
78057,d2 = dict.copy(d1)
78058,d2 = d1.copy()
78059,dict.items
78060,dict(mydict.items())
78061,dict(mydict)
78062,**
78063,shallow_copy_of_other_dict = {**other_dict}
78064,other_dict
78065,">>> dict1 = {""key1"": ""value1"", ""key2"": ""value2""}"
78066,>>> dict2 = {**dict1}
78067,>>> dict2
78068,"{'key1': 'value1', 'key2': 'value2'}"
78069,">>> dict2[""key2""] = ""WHY?!"""
78070,>>> dict1
78071,"{'key1': 'value1', 'key2': 'value2'}"
78072,>>>
78073,dict2 = dict1
78074,dict2
78075,dict1
78076,copy module
78077,copy.copy(x)
78078,Return a shallow copy of x.
78079,
78080,copy.deepcopy(x)
78081,Return a deep copy of x.
78082,>>> import copy
78083,">>> a = [1,2,3,4,['a', 'b']]"
78084,>>> b = a
78085,>>> c = copy.copy(a)
78086,>>> d = copy.deepcopy(a)
78087,>>> a.append(5)
78088,>>> a[4].append('c')
78089,>>> a
78090,"[1, 2, 3, 4, ['a', 'b', 'c'], 5]"
78091,>>> b
78092,"[1, 2, 3, 4, ['a', 'b', 'c'], 5]"
78093,>>> c
78094,"[1, 2, 3, 4, ['a', 'b', 'c']]"
78095,>>> d
78096,"[1, 2, 3, 4, ['a', 'b']]"
78097,dict
78098,">>> dict1 = {""key1"": ""value1"", ""key2"": ""value2""}"
78099,">>> dict2 = dict(dict1, key2=""WHY?!"")"
78100,>>> dict1
78101,"{'key2': 'value2', 'key1': 'value1'}"
78102,>>> dict2
78103,"{'key2': 'WHY?!', 'key1': 'value1'}"
78104,dict1
78105,dict1
78106,dict2
78107,dict2
78108,dict1
78109,"person = {'name': 'Mary', 'age': 25}"
78110,"one_year_later = {**person, 'age': 26}  # does not mutate person dict"
78111,"one_year_later = dict(person, age=26)"
78112,dict1
78113,str
78114,__builtins__
78115,dict1 = dict2
78116,dict1
78117,dict2
78118,dict1
78119,dict2
78120,dict1 is dict2
78121,True
78122,id(dict1)
78123,id(dict2)
78124,dict1 = copy(dict2)
78125,dict1 = deepcopy(dict2)
78126,copy
78127,deepcopy
78128,deepcopy
78129,dict2
78130,deepcopy
78131,dict2 = dict1
78132,dict2
78133,>>> dict2 = dict1
78134,"# dict2 is bind to the same Dict object which binds to dict1, so if you modify dict2, you will modify the dict1"
78135,dict_1 = {
78136,"           'a':1,"
78137,           'b':2
78138,         }
78139,dict_2 = {}
78140,dict_2.update(dict_1)
78141,dict_2 = dict_1.copy()
78142,def CopyDict(dSrc):
78143,    try:
78144,        return json.loads(json.dumps(dSrc))
78145,    except Exception as e:
78146,"        Logger.warning(""Can't copy dict the preferred way:""+str(dSrc))"
78147,        return deepcopy(dSrc)
78148,dict
78149,ValueDict
78150,=
78151,class ValueDict(dict):
78152,
78153,"    def __ilshift__(self, args):"
78154,        result = ValueDict(self)
78155,"        if isinstance(args, dict):"
78156,"            dict.update(result, args)"
78157,        else:
78158,"            dict.__setitem__(result, *args)"
78159,        return result # Pythonic LVALUE modification
78160,
78161,"    def __irshift__(self, args):"
78162,        result = ValueDict(self)
78163,"        dict.__delitem__(result, args)"
78164,        return result # Pythonic LVALUE modification
78165,
78166,"    def __setitem__(self, k, v):"
78167,"        raise AttributeError, \"
78168,"            ""Use \""value_dict<<='%s', ...\"" instead of \""d[%s] = ...\"""" % (k,k)"
78169,
78170,"    def __delitem__(self, k):"
78171,"        raise AttributeError, \"
78172,"            ""Use \""value_dict>>='%s'\"" instead of \""del d[%s]"" % (k,k)"
78173,
78174,"    def update(self, d2):"
78175,"        raise AttributeError, \"
78176,"            ""Use \""value_dict<<=dict2\"" instead of \""value_dict.update(dict2)\"""""
78177,
78178,
78179,# test
78180,d = ValueDict()
78181,
78182,"d <<='apples', 5"
78183,"d <<='pears', 8"
78184,"print ""d ="", d"
78185,
78186,e = d
78187,"e <<='bananas', 1"
78188,"print ""e ="", e"
78189,"print ""d ="", d"
78190,
78191,d >>='pears'
78192,"print ""d ="", d"
78193,"d <<={'blueberries': 2, 'watermelons': 315}"
78194,"print ""d ="", d"
78195,"print ""e ="", e"
78196,"print ""e['bananas'] ="", e['bananas']"
78197,
78198,
78199,# result
78200,"d = {'apples': 5, 'pears': 8}"
78201,"e = {'apples': 5, 'pears': 8, 'bananas': 1}"
78202,"d = {'apples': 5, 'pears': 8}"
78203,d = {'apples': 5}
78204,"d = {'watermelons': 315, 'blueberries': 2, 'apples': 5}"
78205,"e = {'apples': 5, 'pears': 8, 'bananas': 1}"
78206,e['bananas'] = 1
78207,
78208,# e[0]=3
78209,# would give:
78210,"# AttributeError: Use ""value_dict<<='0', ..."" instead of ""d[0] = ..."""
78211,str
78212,int
78213,str
78214,int
78215,dict
78216,ValueDict
78217,dict(srcData) or srcData.copy() or {**srcData}
78218,srcData = {
78219,  'first': {
78220,    'second': 'second Value'
78221,  }
78222,}
78223,newData = dict(srcData) # srcData.copy() or {**srcData}
78224,newData['first']['second'] = 'new Second Value'
78225,
78226,print(srcData)
78227,print(newData)
78228,
78229,# it will print
78230,# srcData: {'first': {'second': 'new Second Value'}}
78231,# newData:{'first': {'second': 'new Second Value'}}
78232,
78233,# but it should be
78234,# srcData: {'first': {'second': 'second Value'}}
78235,# newData:{'first': {'second': 'new Second Value'}}
78236,json
78237,JSON.parse(JSON.stringify(obj))
78238,import json
78239,
78240,srcData = {'first': {'second': 'second Value'}}
78241,newData = json.loads(json.dumps(srcData))
78242,newData['first']['second'] = 'new Second Value'
78243,
78244,print(srcData)
78245,print(newData)
78246,
78247,# srcData: {'first': {'second': 'second Value'}}
78248,# newData: {'first': {'second': 'new Second Value'}}
78249,new = copy.deepcopy(my_class.a)
78250,new
78251,my_class.a
78252,old = my_class.a
78253,new = copy.deepcopy(old)
78254,new
78255,my_class.a
78256,my_class.a
78257,"orig = {""X2"": 674.5, ""X3"": 245.0}"
78258,
78259,copy = {}
78260,for key in orig:
78261,    copy[key] = orig[key]
78262,
78263,"print(orig) # {'X2': 674.5, 'X3': 245.0}"
78264,"print(copy) # {'X2': 674.5, 'X3': 245.0}"
78265,"copy[""X2""] = 808"
78266,"print(orig) # {'X2': 674.5, 'X3': 245.0}"
78267,"print(copy) # {'X2': 808, 'X3': 245.0}"
78268,deepcopy
78269,def _copy_dict(dictionary:dict):     return {key: dictionary[key] for key in dictionary}
78270,dict2 = eval(repr(dict1))
78271,__repr__
78272,dict2
78273,dict1
78274,Ellipsis
78275,dict1.copy()
78276,">>> a = [{""name"":""Onkar"",""Address"": {""state"":""MH"",""country"":""India"",""innerAddress"":{""city"":""Pune""}}}]"
78277,>>> b = json.dumps(a)
78278,>>> b = json.loads(b)
78279,>>> id(a)
78280,2334461105416
78281,>>> id(b)
78282,2334461105224
78283,">>> a[0][""Address""][""innerAddress""][""city""]=""Nagpur"""
78284,>>> a
78285,"[{'name': 'Onkar', 'Address': {'state': 'MH', 'country': 'India', 'innerAddress': {'city': 'Nagpur'}}}]"
78286,>>> b
78287,"[{'name': 'Onkar', 'Address': {'state': 'MH', 'country': 'India', 'innerAddress': {'city': 'Pune'}}}]"
78288,">>> id(a[0][""Address""][""innerAddress""])"
78289,2334460618376
78290,">>> id(b[0][""Address""][""innerAddress""])"
78291,2334424569880
78292,"listone = [1, 2, 3]"
78293,"listtwo = [4, 5, 6]"
78294,>>> joinedlist
78295,"[1, 2, 3, 4, 5, 6]"
78296,"[1,2,5] and [2,4,5,6]"
78297,+
78298,"listone = [1, 2, 3]"
78299,"listtwo = [4, 5, 6]"
78300,
78301,joinedlist = listone + listtwo
78302,>>> joinedlist
78303,"[1, 2, 3, 4, 5, 6]"
78304,listone += listtwo
78305,"listone == [1, 2, 3, 4, 5, 6]"
78306,list3 = listone
78307,listone+=listtwo
78308,>= 3.5
78309,"[*l1, *l2]"
78310,PEP 448
78311,*
78312,">>> l1 = [1, 2, 3]"
78313,">>> l2 = [4, 5, 6]"
78314,">>> joined_list = [*l1, *l2]  # unpack both iterables in a list literal"
78315,>>> print(joined_list)
78316,"[1, 2, 3, 4, 5, 6]"
78317,3.5
78318,3.x
78319,SyntaxError
78320,my_list + list(my_tuple) + list(my_range)
78321,"[*my_list, *my_tuple, *my_range]"
78322,+
78323,TypeError
78324,"l = [1, 2, 3]"
78325,"r = range(4, 7)"
78326,res = l + r
78327,"res = [*l, *r]"
78328,list
78329,"res = [*l1, *reversed(l2)]"
78330,reversed
78331,res = l1 + reversed(l2)
78332,**
78333,itertools.chain()
78334,import itertools
78335,"for item in itertools.chain(listone, listtwo):"
78336,    # Do something with each list item
78337,chain
78338,chain
78339,chain
78340,list.extend()
78341,list
78342,"listone = [1,2,3]"
78343,"listtwo = [4,5,6]"
78344,
78345,listone.extend(listtwo)
78346,list
78347,extend
78348,mergedlist = []
78349,mergedlist.extend(listone)
78350,mergedlist.extend(listtwo)
78351,None
78352,"listone = [1,2,3]; listtwo = [4,5,6]; listone.extend(listtwo)"
78353,None
78354,listone
78355,listone
78356,return list1.extend(list2)
78357,None
78358,mergedlist = list(set(listone + listtwo))
78359,listone + [x for x in listtwo if x not in listone]
78360,import collections; mergedlist = list(collections.OrderedDict.fromkeys(listone + listtwo))
78361,sum
78362,chain
78363,chain.from_iterable
78364,import itertools
78365,chain.from_iterable
78366,a += b
78367,a.extend(b)
78368,+=
78369,list.__iadd__
78370,iadd
78371,+=
78372,extend
78373,list.__add__
78374,operator
78375,a.__add__(b)
78376,a + b
78377,"reduce(operator.add, [a, b])"
78378,"sum([a, b], [])"
78379,set
78380,for i in b: a.append(i)
78381,a.extend(b)
78382,append
78383,heapq.merge
78384,yield
78385,chain
78386,"operator.add(a, b)"
78387,a + b
78388,a + b
78389,"""There's not much difference between these methods but that makes sense given they all have the same order of complexity (linear). There's no particular reason to prefer one over the other except as a matter of style."
78390,">>> listone = [1,2,3]"
78391,">>> listtwo = [4,5,6]"
78392,>>>
78393,>>> listone + listtwo
78394,"[1, 2, 3, 4, 5, 6]"
78395,">>> a = [[1,2,3], [4,5,6], [7,8,9]]"
78396,>>> [x for xs in a for x in xs]
78397,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
78398,">>> map(str, (x for xs in a for x in xs))"
78399,"['1', '2', '3', '4', '5', '6', '7', '8', '9']"
78400,"a = [[1,2,3], [4,5,6], [7,8,9]]"
78401,"reduce(lambda c, x: c + x, a, [])"
78402,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
78403,a
78404,[]
78405,"[[1,2,3]]"
78406,itertools
78407,"a = [[1,2,3], [4,5,6], [7,8,9]]"
78408,list(itertools.chain(*a))
78409,list
78410,list()
78411,"sum(a, [])"
78412,reduce
78413,functools
78414,+
78415,+=
78416,"a = [1, 2, 3]"
78417,"b = [4, 5, 6]"
78418,
78419,c = a + b
78420,c = []
78421,"a = [1, 2, 3]"
78422,"b = [4, 5, 6]"
78423,
78424,c += (a + b)
78425,c = list(set(a + b))
78426,list(dict.fromkeys(a + b))
78427,itertools.chain
78428,">>> l1 = ['a']; l2 = ['b', 'c']; l3 = ['d', 'e', 'f']"
78429,">>> [i for i in itertools.chain(l1, l2)]"
78430,"['a', 'b', 'c']"
78431,">>> [i for i in itertools.chain(l1, l2, l3)]"
78432,"['a', 'b', 'c', 'd', 'e', 'f']"
78433,from_iterable
78434,">>> il = [['a'], ['b', 'c'], ['d', 'e', 'f']]"
78435,>>> [i for i in itertools.chain.from_iterable(il)]
78436,"['a', 'b', 'c', 'd', 'e', 'f']"
78437,"In [1]: listone = [1, 2, 3] "
78438,"   ...: listtwo = [4, 5, 6]                                                                                                                                                                                 "
78439,
78440,In [2]: listone + listtwo                                                                                                                                                                                   
78441,"Out[2]: [1, 2, 3, 4, 5, 6]"
78442,                                                                                                                                                                                     
78443,"In [3]: [*listone, *listtwo]                                                                                                                                                                                "
78444,"Out[3]: [1, 2, 3, 4, 5, 6]"
78445,chain.from_iterable()
78446,itertools
78447,">>> l=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
78448,>>> import itertools
78449,>>> list(itertools.chain.from_iterable(l))
78450,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
78451,"listone = [1,2,3]"
78452,"listtwo = [4,5,6]"
78453,
78454,"def merge(l1, l2):"
78455,    yield from l1
78456,    yield from l2
78457,
78458,">>> list(merge(listone, listtwo))"
78459,"[1, 2, 3, 4, 5, 6]"
78460,def merge(*iters):
78461,    for it in iters:
78462,        yield from it
78463,
78464,">>> list(merge(listone, listtwo, 'abcd', [20, 21, 22]))"
78465,"[1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 20, 21, 22]"
78466,itertools.chain
78467,merge
78468,heapq
78469,from heapq import merge
78470,
78471,"a = [1, 2, 4]"
78472,"b = [2, 4, 6, 7]"
78473,
78474,"print list(merge(a, b))"
78475,+
78476,operator
78477,import operator
78478,
78479,"listone = [1,2,3]"
78480,"listtwo = [4,5,6]"
78481,
78482,"result = operator.add(listone, listtwo)"
78483,print(result)
78484,
78485,">>> [1, 2, 3, 4, 5, 6]"
78486,__add__
78487,"listone = [1,2,3]"
78488,"listtwo = [4,5,6]"
78489,
78490,"result = list.__add__(listone, listtwo)"
78491,print(result)
78492,
78493,">>> [1, 2, 3, 4, 5, 6]"
78494,+
78495,operator.add
78496,"list1 = [1,2,5]"
78497,"list2 = [2,3,4]"
78498,newlist = []
78499,
78500,while list1 and list2:
78501,    if list1[0] == list2[0]:
78502,        newlist.append(list1.pop(0))
78503,        list2.pop(0)
78504,    elif list1[0] < list2[0]:
78505,        newlist.append(list1.pop(0))
78506,    else:
78507,        newlist.append(list2.pop(0))
78508,
78509,if list1:
78510,    newlist.extend(list1)
78511,if list2:
78512,    newlist.extend(list2)
78513,
78514,"assert(newlist == [1, 2, 3, 4, 5])"
78515,heapq.merge
78516,"numpy.concatenate([a,b])"
78517,"joined_list = [item for list_ in [list_one, list_two] for item in list_]"
78518,">>> listone = [1, 2, 3]"
78519,">>> listtwo = [4, 5, 6]"
78520,">>> joinedlist = [*listone, *listtwo]"
78521,>>> joinedlist
78522,"[1, 2, 3, 4, 5, 6]"
78523,>>> 
78524,list(set(listone) | set(listtwo))
78525,itertools.chain()
78526,itertools.chain()
78527,for it in iterables:
78528,    for element in it:
78529,        yield element
78530,"for iterable, header, flag in ( (newList, 'New', ''), (modList, 'Modified', '-f')):"
78531,    print header + ':'
78532,    for path in iterable:
78533,        [...]
78534,        command = 'cp -r' if os.path.isdir(srcPath) else 'cp'
78535,"        print >> SCRIPT , command, flag, srcPath, mergedDirPath"
78536,        [...]
78537,for ... in
78538,append()
78539,list
78540,mergedlist =[]
78541,for elem in listone:
78542,    mergedlist.append(elem)
78543,for elem in listtwo:
78544,    mergedlist.append(elem)
78545,# easiest and least complexity method <= recommended
78546,
78547,"listone = [1, 2, 3]"
78548,"listtwo = [4, 5, 6]"
78549,
78550,newlist = listone + listtwo
78551,print(newlist)
78552,
78553,# 2nd easiest method
78554,newlist = listone.copy()
78555,newlist.extend(listtwo)
78556,print(newlist)
78557,newlist
78558,listone
78559,listone
78560,# 3rd method
78561,newlist = listone.copy()
78562,for j in listtwo:
78563,    newlist.append(j)
78564,
78565,print(newlist)
78566,"list = [1,2]"
78567,
78568,list = list + [3]
78569,"# list = [1,2,3]"
78570,
78571,list.append(3) 
78572,"# list = [1,2,3]"
78573,
78574,"list.append([3,4]) "
78575,"# list = [1,2,[3,4]]"
78576,"list = [1,2]"
78577,"list.extend([3,4]) "
78578,"# list = [1,2,3,4]"
78579,"list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]"
78580,"reduce(list.__add__, list_of_lists)"
78581,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
78582,list.__add__
78583,operator.add
78584,"sum(list_of_lists, [])"
78585,obj.__class__
78586,obj.__dict__
78587,__add__
78588,np.union1d
78589,+
78590,"In [1]: a = [1, 2, 3]"
78591,
78592,"In [2]: b = [4, 5, 6]"
78593,
78594,In [3]: a + b
78595,"Out[3]: [1, 2, 3, 4, 5, 6]"
78596,
78597,In [4]: %timeit a + b
78598,"10000000 loops, best of 3: 126 ns per loop"
78599,"In [1]: a = [1, 2, 3]"
78600,
78601,"In [2]: b = [4, 5, 6]"
78602,
78603,In [3]: %timeit a.extend(b)
78604,"10000000 loops, best of 3: 91.1 ns per loop"
78605,extend
78606,chain.from_iterable
78607,sum
78608,">>> a = [1, 2, 3]"
78609,">>> b = [4, 5, 6]"
78610,">>> sum([a, b], [])"
78611,"[1, 2, 3, 4, 5, 6]"
78612,>>> 
78613,">>> a = ['a', 'b', 'c', 'd']"
78614,">>> b = [1, 2, 3, 4]"
78615,">>> c = [1, 2]"
78616,">>> sum([a, b, c], [])"
78617,"['a', 'b', 'c', 'd', 1, 2, 3, 4, 1, 2]"
78618,>>> 
78619,[]
78620,start
78621,0
78622,start
78623,"0 + [1, 2, 3]"
78624,start
78625,[]
78626,[]
78627,"[] + [1, 2, 3]"
78628," a=[1,2,3]"
78629," b=[4,5,6]"
78630,
78631, c=a+b
78632, print(c)
78633," >>> [1, 2, 3, 4, 5, 6]"
78634," a=[1,2,3]"
78635," b=[4,5,6]"
78636, c=[] #Empty list in which we are going to append the values of list (a) and (b)
78637,
78638, for i in a:
78639,     c.append(i)
78640, for j in b:
78641,     c.append(j)
78642,
78643, print(c)
78644,">>> [1, 2, 3, 4, 5, 6]"
78645,"def concat_list(l1,l2):"
78646,    l3 = l1+l2
78647,    return l3
78648,"def concat_list(l1,l2):"
78649,   l3 = []
78650,"   for i in [l1,l2]:"
78651,     for j in i:   
78652,       if j not in l3:   
78653,"         #Check if element exists in final list, if no then add element to list"
78654,         l3.append(j)
78655,   return l3
78656,"a=[[1,2,3],[4,5,6]]"
78657,
78658,"b=[[0,1,2],[7,8,9]]"
78659,
78660,for i in range(len(a)):
78661,    cc.append(a[i]+b[i])
78662,import itertools
78663,
78664,"A = list(zip([1,3,5,7,9],[2,4,6,8,10]))"
78665,"B = [1,3,5,7,9]+[2,4,6,8,10]"
78666,"C = list(set([1,3,5,7,9] + [2,4,6,8,10]))"
78667,
78668,"D = [1,3,5,7,9]"
78669,"D.append([2,4,6,8,10])"
78670,
78671,"E = [1,3,5,7,9]"
78672,"E.extend([2,4,6,8,10])"
78673,
78674,F = []
78675,"for a in itertools.chain([1,3,5,7,9], [2,4,6,8,10]):"
78676,    F.append(a)
78677,
78678,
78679,"print (""A: "" + str(A))"
78680,"print (""B: "" + str(B))"
78681,"print (""C: "" + str(C))"
78682,"print (""D: "" + str(D))"
78683,"print (""E: "" + str(E))"
78684,"print (""F: "" + str(F))"
78685,"A: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]"
78686,"B: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]"
78687,"C: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
78688,"D: [1, 3, 5, 7, 9, [2, 4, 6, 8, 10]]"
78689,"E: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]"
78690,"F: [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]"
78691,__iter__
78692,__getitem__
78693,IndexError
78694,next
78695,__next__
78696,for
78697,map
78698,next
78699,collections.abc.AsyncIterator
78700,__aiter__
78701,__anext__
78702,__len__
78703,__getitem__
78704,"{'a': 'hi', 'b': 'bye'}"
78705,__iter__
78706,__getitem__
78707,for x in iterable: ...
78708,iter()
78709,iter(obj)
78710,__iter__
78711,__getitem__
78712,__next__
78713,StopIteration
78714,__iter__
78715,self
78716,__next__
78717,next
78718,next()
78719,>>> s = 'cat'      # s is an ITERABLE
78720,                   # s is a str object that is immutable
78721,                   # s has no state
78722,                   # s has a __getitem__() method 
78723,
78724,>>> t = iter(s)    # t is an ITERATOR
78725,"                   # t has state (it starts by pointing at the ""c"""
78726,                   # t has a next() method and an __iter__() method
78727,
78728,>>> next(t)        # the next() function returns the next value and advances the state
78729,'c'
78730,>>> next(t)        # the next() function returns the next value and advances
78731,'a'
78732,>>> next(t)        # the next() function returns the next value and advances
78733,'t'
78734,>>> next(t)        # next() raises StopIteration to signal that iteration is complete
78735,Traceback (most recent call last):
78736,...
78737,StopIteration
78738,
78739,>>> iter(t) is t   # the iterator is self-iterable
78740,for
78741,iter()
78742,iter()
78743,__iter__()
78744,__getitem__()
78745,__foo__()
78746,for
78747,next()
78748,__iter__()
78749,self
78750,next()
78751,for x in obj:
78752,for
78753,obj
78754,obj
78755,iter(obj)
78756,obj.__iter__()
78757,_i
78758,x = _i.next()
78759,x = _i.next()
78760,obj
78761,obj
78762,_i
78763,obj
78764,obj
78765,class IterableExample(object):
78766,
78767,    def __iter__(self):
78768,        return self
78769,
78770,    def next(self):
78771,        pass
78772,class Iterator(object):
78773,    def next(self):
78774,        pass
78775,
78776,class Iterable(object):
78777,    def __iter__(self):
78778,        return Iterator()
78779,class SmartIterableExample(object):
78780,
78781,    def create_iterator(self):
78782,        # An amazingly powerful yet simple way to create arbitrary
78783,"        # iterator, utilizing object state (or not, if you are fan"
78784,"        # of functional), magic and nuclear waste--no kittens hurt."
78785,        pass    # don't forget to add the next() method
78786,
78787,    def __iter__(self):
78788,        return self.create_iterator()
78789,for
78790,for
78791,__iter__()
78792,next()
78793,for
78794,while
78795,next()
78796,_i
78797,next()
78798,__next__()
78799,for
78800,for
78801,pass
78802,next
78803,pass
78804,pass
78805,...
78806,NotImplemented
78807,for
78808,__iter__()
78809,list()
78810,tuple()
78811,__iter__()
78812,__iter__()
78813,next()
78814,__next__()
78815,next()
78816,__next__()
78817,StopIteration
78818,">>> a = [1, 2, 3] # iterable"
78819,>>> b1 = iter(a) # iterator 1
78820,">>> b2 = iter(a) # iterator 2, independent of b1"
78821,>>> next(b1)
78822,1
78823,>>> next(b1)
78824,2
78825,">>> next(b2) # start over, as it is the first call to b2"
78826,1
78827,>>> next(b1)
78828,3
78829,>>> next(b1)
78830,Traceback (most recent call last):
78831,"  File ""<stdin>"", line 1, in <module>"
78832,StopIteration
78833,">>> b1 = iter(a) # new one, start over"
78834,>>> next(b1)
78835,1
78836,Iterable
78837,"for i in [1,3,4,6]: print(i)"
78838,"for i in {1,3,4,6}: print(i)"
78839,"for i in (1,3,4,6): print(i)"
78840, sequence
78841,  +
78842,  |
78843,  v
78844,"   def __getitem__(self, index: int):"
78845,  +    ...
78846,  |    raise IndexError
78847,  |
78848,  |
78849,  |              def __iter__(self):
78850,  |             +     ...
78851,  |             |     return <iterator>
78852,  |             |
78853,  |             |
78854,  +--> or <-----+        def __next__(self):
78855,       +        |       +    ...
78856,       |        |       |    raise StopIteration
78857,       v        |       |
78858,    iterable    |       |
78859,           +    |       |
78860,           |    |       v
78861,           |    +----> and +-------> iterator
78862,           |                               ^
78863,           v                               |
78864,   iter(<iterable>) +----------------------+
78865,                                           |
78866,   def generator():                        |
78867,  +    yield 1                             |
78868,  |                 generator_expression +-+
78869,  |                                        |
78870,  +-> generator() +-> generator_iterator +-+
78871,__iter__()
78872,__next__
78873,__iter__
78874,__iter__
78875,__iter__
78876,return <iterator>
78877,class Iterable1:
78878,    def __iter__(self):
78879,        # a method (which is a function defined inside a class body)
78880,        # calling iter() converts iterable (tuple) to iterator
78881,"        return iter((1,2,3))"
78882,
78883,class Iterable2:
78884,    def __iter__(self):
78885,        # a generator
78886,"        for i in (1, 2, 3):"
78887,            yield i
78888,
78889,class Iterable3:
78890,    def __iter__(self):
78891,        # with PEP 380 syntax
78892,"        yield from (1, 2, 3)"
78893,
78894,# passes
78895,"assert list(Iterable1()) == list(Iterable2()) == list(Iterable3()) == [1, 2, 3]"
78896,class MyIterable:
78897,
78898,    def __init__(self):
78899,        self.n = 0
78900,
78901,"    def __getitem__(self, index: int):"
78902,"        return (1, 2, 3)[index]"
78903,
78904,    def __next__(self):
78905,        n = self.n = self.n + 1
78906,        if n > 3:
78907,            raise StopIteration
78908,        return n
78909,
78910,"# if you can iter it without raising a TypeError, then it's an iterable."
78911,iter(MyIterable())
78912,
78913,# but obviously `MyIterable()` is not an iterator since it does not have
78914,# an `__iter__` method.
78915,from collections.abc import Iterator
78916,"assert isinstance(MyIterable(), Iterator)  # AssertionError"
78917,__iter__
78918,__iter__()
78919,__iter__()
78920,self
78921,__iter__()
78922,self
78923,"isinstance(MyIterable(), collections.abc.Iterable)"
78924," >>> X = [1,2,3,4,5]"
78925, >>> next(X)
78926, Traceback (most recent call last):
78927,"    File ""<pyshell#19>"", line 1, in <module>"
78928,      next(X)
78929, TypeError: 'list' object is not an iterator
78930,">>> X = [1,2,3,4,5]"
78931,">>> bricks_kit = [1,2,3,4,5]"
78932,>>> white_piece_of_paper = iter(bricks_kit)
78933,>>> next(white_piece_of_paper)
78934,1
78935,>>> next(white_piece_of_paper)
78936,2
78937,>>>
78938,next()
78939,__getitem__
78940,__iter__
78941,iter()
78942,iter()
78943,__next__()
78944,next()
78945,iter()
78946,__next__()
78947,__next__()
78948,__next__()
78949,next()
78950,>>> s = 'abc'
78951,>>> it = iter(s)
78952,>>> it
78953,<iterator object at 0x00A1DB50>
78954,>>> next(it)
78955,'a'
78956,>>> next(it)
78957,'b'
78958,>>> next(it)
78959,'c'
78960,>>> next(it)
78961,Traceback (most recent call last):
78962,"  File ""<stdin>"", line 1, in <module>"
78963,    next(it)
78964,StopIteration
78965,class Reverse:
78966,"    """"""Iterator for looping over a sequence backwards."""""""
78967,"    def __init__(self, data):"
78968,        self.data = data
78969,        self.index = len(data)
78970,    def __iter__(self):
78971,        return self
78972,    def __next__(self):
78973,        if self.index == 0:
78974,            raise StopIteration
78975,        self.index = self.index - 1
78976,        return self.data[self.index]
78977,
78978,
78979,>>> rev = Reverse('spam')
78980,>>> iter(rev)
78981,<__main__.Reverse object at 0x00A1DB50>
78982,>>> for char in rev:
78983,...     print(char)
78984,...
78985,m
78986,a
78987,p
78988,s
78989,__iter__
78990,__next__
78991,__iter__
78992,self
78993,class Squares:
78994,"    def __init__(self, length):"
78995,        self.length = length
78996,        self.i = 0
78997,        
78998,    def __iter__(self):
78999,        print('calling __iter__') # this will be called first and only once
79000,        return self
79001,    
79002,    def __next__(self): 
79003,        print('calling __next__') # this will be called for each iteration
79004,        if self.i >= self.length:
79005,            raise StopIteration
79006,        else:
79007,            result = self.i ** 2
79008,            self.i += 1
79009,            return result
79010,class Cities:
79011,    def __init__(self):
79012,"        self._cities = ['Brooklyn', 'Manhattan', 'Prag', 'Madrid', 'London']"
79013,        self._index = 0
79014,    
79015,    def __iter__(self):
79016,        return self
79017,    
79018,    def __next__(self):
79019,        if self._index >= len(self._cities):
79020,            raise StopIteration
79021,        else:
79022,            item = self._cities[self._index]
79023,            self._index += 1
79024,            return item
79025,class Cities:
79026,    def __init__(self):
79027,"        self._cities = ['New York', 'Newark', 'Istanbul', 'London']        "
79028,    def __len__(self):
79029,        return len(self._cities)
79030,
79031,
79032,
79033,class CityIterator:
79034,"    def __init__(self, city_obj):"
79035,        # cities is an instance of Cities
79036,        self._city_obj = city_obj
79037,        self._index = 0
79038,        
79039,    def __iter__(self):
79040,        return self
79041,    
79042,    def __next__(self):
79043,        if self._index >= len(self._city_obj):
79044,            raise StopIteration
79045,        else:
79046,            item = self._city_obj._cities[self._index]
79047,            self._index += 1
79048,            return item
79049,__iter__()
79050,class Cities:
79051,    def __init__(self):
79052,"        self._cities = ['New York', 'Newark', 'Istanbul', 'Paris']"
79053,        
79054,    def __len__(self):
79055,        return len(self._cities)
79056,    
79057,    def __iter__(self):
79058,        return self.CityIterator(self)
79059,    
79060,    class CityIterator:
79061,"        def __init__(self, city_obj):"
79062,            self._city_obj = city_obj
79063,            self._index = 0
79064,
79065,        def __iter__(self):
79066,            return self
79067,
79068,        def __next__(self):
79069,            if self._index >= len(self._city_obj):
79070,                raise StopIteration
79071,            else:
79072,                item = self._city_obj._cities[self._index]
79073,                self._index += 1
79074,                return item
79075,__iter__
79076,__next__
79077,__iter__
79078,__iter__()
79079,__next__()
79080,__get_item__
79081,class Cities:
79082,    def __init__(self):
79083,"        self._cities = ['New York', 'Newark', 'Budapest', 'Newcastle']"
79084,        
79085,    def __len__(self):
79086,        return len(self._cities)
79087,    
79088,"    def __getitem__(self, s): # now a sequence type"
79089,        return self._cities[s]
79090,    
79091,    def __iter__(self):
79092,        return self.CityIterator(self)
79093,    
79094,    class CityIterator:
79095,"        def __init__(self, city_obj):"
79096,            self._city_obj = city_obj
79097,            self._index = 0
79098,
79099,        def __iter__(self):
79100,            return self
79101,
79102,        def __next__(self):
79103,            if self._index >= len(self._city_obj):
79104,                raise StopIteration
79105,            else:
79106,                item = self._city_obj._cities[self._index]
79107,                self._index += 1
79108,                return item
79109,"iterable = [1, 2] "
79110,
79111,iterator = iter(iterable)
79112,
79113,print(iterator.__next__())   
79114,
79115,print(iterator.__next__())   
79116,iterable
79117,iter
79118,iterable
79119,__next__
79120,next
79121,"ls = ['hello','bye']"
79122,print(dir(ls))
79123,"['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']"
79124,__iter__
79125,"x=[1,2,3,4]"
79126,y=iter(x)
79127,iter(x)
79128,"y=[1,2,3,4]"
79129,next()
79130,>>> y.next()
79131,1
79132,>>> y.next()
79133,2
79134,>>> y.next()
79135,3
79136,>>> y.next()
79137,4
79138,>>> y.next()
79139,StopIteration
79140,yield
79141,In[2]: def my_generator():
79142,  ...:     yield 100
79143,  ...:     yield 200
79144,
79145,In[3]: my_generator
79146,Out[3]: <function __main__.my_generator()>
79147,In[4]: type(my_generator)
79148,Out[4]: function
79149,In[5]: my_iterator = my_generator()
79150,In[6]: my_iterator
79151,Out[6]: <generator object my_generator at 0x00000000053EAE48>
79152,In[7]: type(my_iterator)
79153,Out[7]: generator
79154,"In[8]: my_gen_expression = (2 * i for i in (10, 20))"
79155,In[9]: my_gen_expression
79156,Out[9]: <generator object <genexpr> at 0x000000000542C048>
79157,In[10]: type(my_gen_expression)
79158,Out[10]: generator
79159,collections.abc
79160,collections.abc
79161,builtins.object
79162,    Iterable
79163,        Iterator
79164,            Generator
79165,"[1, 2, 3]"
79166,range(10)
79167,"x = iter([1, 2, 3])"
79168,iter()
79169,it
79170,iter(it) is it
79171,[2 * x for x in nums]
79172,for x in nums:
79173,iter()
79174,nums
79175,nums
79176,"nums=[1, 2, 3]"
79177,for x in nums:
79178,for x in iter(nums):
79179,for x in iter(iter(nums))
79180,for x in iter(iter(iter(iter(iter(nums))))):
79181,iter()
79182,index()
79183,enumerate
79184,"indices = [i for i, x in enumerate(my_list) if x == ""whatever""]"
79185,enumerate(my_list)
79186,"(index, item)"
79187,"i, x"
79188,i
79189,x
79190,x
79191,i
79192,numpy
79193,import numpy as np
79194,"values = np.array([1,2,3,1,2,4,5,6,3,2,1])"
79195,searchval = 3
79196,ii = np.where(values == searchval)[0]
79197,"ii ==>array([2, 8])"
79198,values
79199,"np.where([7, 8, 9, 8] == 8)[0]"
79200,"np.where(np.array([7, 8, 9, 8]) == 8)[0]"
79201,list.index
79202,"def indices(lst, element):"
79203,    result = []
79204,    offset = -1
79205,    while True:
79206,        try:
79207,"            offset = lst.index(element, offset+1)"
79208,        except ValueError:
79209,            return result
79210,        result.append(offset)
79211,enumerate
79212,numpy
79213,timeit.timeit
79214,"In [1]: l=[1,2,3,4,3,2,5,6,7]"
79215,
79216,"In [2]: [i for i,val in enumerate(l) if val==3]"
79217,"Out[2]: [2, 4]"
79218,more_itertools.locate
79219,from more_itertools import locate
79220,
79221,
79222,"list(locate([0, 1, 1, 0, 1, 0, 0]))"
79223,"# [1, 2, 4]"
79224,
79225,"list(locate(['a', 'b', 'c', 'b'], lambda x: x == 'b'))"
79226,"# [1, 3]"
79227,more_itertools
79228,> pip install more_itertools
79229,"occurrences = lambda s, lst: (i for i,e in enumerate(lst) if e == s)"
79230,"list(occurrences(1, [1,2,3,1])) # = [0, 3]"
79231,range
79232,l=[i for i in range(len(lst)) if lst[i]=='something...']
79233,l=[i for i in xrange(len(lst)) if lst[i]=='something...']
79234,print(l)
79235,">>> alist = ['foo', 'spam', 'egg', 'foo']"
79236,">>> foo_indexes = [n for n,x in enumerate(alist) if x=='foo']"
79237,>>> foo_indexes
79238,"[0, 3]"
79239,>>>
79240,"def indexlist(item2find, list_or_string):"
79241,"  ""Returns all indexes of an item in a list or a string"""
79242,"  return [n for n,item in enumerate(list_or_string) if item==item2find]"
79243,
79244,"print(indexlist(""1"", ""010101010""))"
79245,"[1, 3, 5, 7]"
79246,"for n, i in enumerate([1, 2, 3, 4, 1]):"
79247,    if i == 1:
79248,        print(n)
79249,0
79250,4
79251,np.where
79252,numpy
79253,list
79254,numpy.array
79255,numpy
79256,list
79257,list
79258,array
79259,numpy
79260,np.where
79261,np.unique
79262,np.where
79263,numpy
79264,import numpy as np
79265,import random  # to create test list
79266,
79267,# create sample list
79268,random.seed(365)
79269,"l = [random.choice(['s1', 's2', 's3', 's4']) for _ in range(20)]"
79270,
79271,# convert the list to an array for use with these numpy methods
79272,a = np.array(l)
79273,
79274,# create a dict of each unique entry and the associated indices
79275,idx = {v: np.where(a == v)[0].tolist() for v in np.unique(a)}
79276,
79277,# print(idx)
79278,"{'s1': [7, 9, 10, 11, 17],"
79279," 's2': [1, 3, 6, 8, 14, 18, 19],"
79280," 's3': [0, 2, 13, 16],"
79281," 's4': [4, 5, 12, 15]}"
79282,%timeit
79283,# create 2M element list
79284,random.seed(365)
79285,"l = [random.choice(['s1', 's2', 's3', 's4']) for _ in range(2000000)]"
79286,# np.where: convert list to array
79287,%%timeit
79288,a = np.array(l)
79289,np.where(a == 's1')
79290,[out]:
79291,"409 ms ± 41.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
79292,
79293,# list-comprehension: on list l
79294,"%timeit [i for i, x in enumerate(l) if x == ""s1""]"
79295,[out]:
79296,"201 ms ± 24 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
79297,
79298,# filter: on list l
79299,"%timeit list(filter(lambda i: l[i]==""s1"", range(len(l))))"
79300,[out]:
79301,"344 ms ± 36.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
79302,# use np.where and np.unique: convert list to array
79303,%%timeit
79304,a = np.array(l)
79305,{v: np.where(a == v)[0].tolist() for v in np.unique(a)}
79306,[out]:
79307,"682 ms ± 28 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
79308,
79309,# list comprehension inside dict comprehension: on list l
79310,"%timeit {req_word: [idx for idx, word in enumerate(l) if word == req_word] for req_word in set(l)}"
79311,[out]:
79312,"713 ms ± 16.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
79313,"values = [1,2,3,1,2,4,5,6,3,2,1]"
79314,"map(lambda val: (val, [i for i in xrange(len(values)) if values[i] == val]), values)"
79315,">>> q = ['Yeehaw', 'Yeehaw', 'Googol', 'B9', 'Googol', 'NSM', 'B9', 'NSM', 'Dont Ask', 'Googol']"
79316,">>> filter(lambda i: q[i]==""Googol"", range(len(q)))"
79317,"[2, 4, 9]"
79318,"lst = ['to', 'be', 'or', 'not', 'to', 'be']"
79319,"{req_word: [idx for idx, word in enumerate(lst) if word == req_word] for req_word in set(lst)}"
79320,"{'be': [1, 5], 'or': [2], 'to': [0, 4], 'not': [3]}"
79321,index()
79322,for-loop
79323,enumerate
79324,indices
79325,for i in range(len(x)):
79326,"[0, 1, 2, 3, ..., len(x)-1]"
79327,i
79328,x[i]
79329,value
79330,indices
79331,x[i]
79332,"def get_indices(x: list, value: int) -> list:"
79333,    indices = list()
79334,    for i in range(len(x)):
79335,        if x[i] == value:
79336,            indices.append(i)
79337,    return indices
79338,
79339,"n = [1, 2, 3, -50, -60, 0, 6, 9, -60, -60]"
79340,"print(get_indices(n, -60))"
79341,
79342,">>> [4, 8, 9]"
79343,get_indices
79344,n
79345,int
79346,value
79347,int
79348,while-loop
79349,.index
79350,.index
79351,try-except
79352,ValueError
79353,value
79354,list
79355,"def get_indices(x: list, value: int) -> list:"
79356,    indices = list()
79357,    i = 0
79358,    while True:
79359,        try:
79360,            # find an occurrence of value and update i to that index
79361,"            i = x.index(value, i)"
79362,            # add i to the list
79363,            indices.append(i)
79364,            # advance i by 1
79365,            i += 1
79366,        except ValueError as e:
79367,            break
79368,    return indices
79369,
79370,"print(get_indices(n, -60))"
79371,">>> [4, 8, 9]"
79372,get_indeices
79373,"[i for i,x in enumerate([1,2,3,2]) if x==2 & 2<= i <=3] # -> [3]"
79374,from collections import defaultdict
79375,d1 = defaultdict(int)      # defaults to 0 values for keys
79376,"unq = set(lst1)              # lst1 = [1, 2, 2, 3, 4, 1, 2, 7]"
79377,for each in unq:
79378,      d1[each] = lst1.count(each)
79379,else:
79380,      print(d1)
79381,"f = lambda my_list, value:filter(lambda x: my_list[x] == value, range(len(my_list)))"
79382,my_list
79383,value
79384,"f(some_list, some_element)"
79385,"def indices(iter, val):"
79386,"    """"""Generator: Returns all indices of val in iter"
79387,    Raises a ValueError if no val does not occur in iter
79388,    Passes on the AttributeError if iter does not have an index method (e.g. is a set)
79389,"    """""""
79390,    i = -1
79391,    NotFound = False
79392,    while not NotFound:
79393,        try:
79394,"            i = iter.index(val, i+1)"
79395,        except ValueError:
79396,            NotFound = True
79397,        else:
79398,            yield i
79399,    if i == -1:
79400,"        raise ValueError(""No occurrences of {v} in {i}"".format(v = val, i = iter))"
79401,"list(indices(input,value))"
79402,"dict(indices(input,value))"
79403,"sum(indices(input,value))"
79404,"for index_ in indices(input,value):"
79405,.index
79406,iter
79407,val
79408,.index
79409,index
79410,ValueError
79411,try - except
79412,while
79413,while True:
79414,except ValueError: break
79415,err
79416,ValueError
79417,while val in iter[i:]
79418,while i < last
79419,.index
79420,ValueError
79421,None
79422,timeit
79423,"@version(""WhileTrueBreak"", versions)"
79424,"def indices2(iter, val):"
79425,    i = -1
79426,    while True:
79427,        try:
79428,"            i = iter.index(val, i+1)"
79429,        except ValueError:
79430,            break
79431,        else:
79432,            yield i
79433,
79434,"@version(""WhileErrFalse"", versions)"
79435,"def indices5(iter, val):"
79436,    i = -1
79437,    err = False
79438,    while not err:
79439,        try:
79440,"            i = iter.index(val, i+1)"
79441,        except ValueError:
79442,            err = True
79443,        else:
79444,            yield i
79445,
79446,"@version(""RemainingSlice"", versions)"
79447,"def indices1(iter, val):"
79448,    i = 0
79449,    while val in iter[i:]:
79450,"        i = iter.index(val, i)"
79451,        yield i
79452,        i += 1
79453,
79454,"@version(""LastOccurrence"", versions)"
79455,"def indices4(iter,val):"
79456,    i = 0
79457,    last = len(iter) - tuple(reversed(iter)).index(val)
79458,    while i < last:
79459,"        i = iter.index(val, i)"
79460,        yield i
79461,        i += 1
79462,"Length: 100, Ocurrences: 4.0%"
79463,"{'WhileTrueBreak': 0.0074799987487494946, 'WhileErrFalse': 0.006440002471208572, 'RemainingSlice': 0.01221001148223877, 'LastOccurrence': 0.00801000278443098}"
79464,"Length: 1000, Ocurrences: 1.2%"
79465,"{'WhileTrueBreak': 0.03101000329479575, 'WhileErrFalse': 0.0278000021353364, 'RemainingSlice': 0.08278000168502331, 'LastOccurrence': 0.03986000083386898}"
79466,"Length: 10000, Ocurrences: 2.05%"
79467,"{'WhileTrueBreak': 0.18062000162899494, 'WhileErrFalse': 0.1810499932616949, 'RemainingSlice': 2.9145700042136014, 'LastOccurrence': 0.2049500006251037}"
79468,"Length: 100000, Ocurrences: 1.977%"
79469,"{'WhileTrueBreak': 1.9361200043931603, 'WhileErrFalse': 1.7280600033700466, 'RemainingSlice': 254.4725100044161, 'LastOccurrence': 1.9101499929092824}"
79470,"Length: 100000, Ocurrences: 9.873%"
79471,"{'WhileTrueBreak': 2.832529996521771, 'WhileErrFalse': 2.9984100023284554, 'RemainingSlice': 1132.4922299943864, 'LastOccurrence': 2.6660699979402125}"
79472,"Length: 100000, Ocurrences: 25.058%"
79473,"{'WhileTrueBreak': 5.119729996658862, 'WhileErrFalse': 5.2082200068980455, 'RemainingSlice': 2443.0577100021765, 'LastOccurrence': 4.75954000139609}"
79474,"Length: 100000, Ocurrences: 49.698%"
79475,"{'WhileTrueBreak': 9.372120001353323, 'WhileErrFalse': 8.447749994229525, 'RemainingSlice': 5042.717969999649, 'LastOccurrence': 8.050809998530895}"
79476,np.where
79477,list_comprehension
79478,np.where
79479,# np.where
79480,start_times = []
79481,end_times = []
79482,for i in range(10000):
79483,    start = time.time()
79484,    start_times.append(start)
79485,"    temp_list = np.array([1,2,3,3,5])"
79486,    ixs = np.where(temp_list==3)[0].tolist()
79487,    end = time.time()
79488,    end_times.append(end)
79489,"print(""Took on average {} seconds"".format("
79490,    np.mean(end_times)-np.mean(start_times)))
79491,Took on average 3.81469726562e-06 seconds
79492,# list_comprehension
79493,start_times = []
79494,end_times = []
79495,for i in range(10000):
79496,    start = time.time()
79497,    start_times.append(start)
79498,"    temp_list = np.array([1,2,3,3,5])"
79499,    ixs = [i for i in range(len(temp_list)) if temp_list[i]==3]
79500,    end = time.time()
79501,    end_times.append(end)
79502,"print(""Took on average {} seconds"".format("
79503,    np.mean(end_times)-np.mean(start_times)))
79504,Took on average 4.05311584473e-06 seconds
79505,>>> def foo():
79506,"...     print ""foo"""
79507,...
79508,>>> class A:
79509,...     def bar( self ):
79510,"...         print ""bar"""
79511,...
79512,>>> a = A()
79513,>>> foo
79514,<function foo at 0x00A98D70>
79515,>>> a.bar
79516,<bound method A.bar of <__main__.A instance at 0x00A9BC88>>
79517,>>>
79518,>>> def fooFighters( self ):
79519,"...     print ""fooFighters"""
79520,...
79521,>>> A.fooFighters = fooFighters
79522,>>> a2 = A()
79523,>>> a2.fooFighters
79524,<bound method A.fooFighters of <__main__.A instance at 0x00A9BEB8>>
79525,>>> a2.fooFighters()
79526,fooFighters
79527,>>> a.fooFighters()
79528,fooFighters
79529,>>> def barFighters( self ):
79530,"...     print ""barFighters"""
79531,...
79532,>>> a.barFighters = barFighters
79533,>>> a.barFighters()
79534,Traceback (most recent call last):
79535,"  File ""<stdin>"", line 1, in <module>"
79536,TypeError: barFighters() takes exactly 1 argument (0 given)
79537,>>> a.barFighters
79538,<function barFighters at 0x00A98EF0>
79539,>>> import types
79540,">>> a.barFighters = types.MethodType( barFighters, a )"
79541,>>> a.barFighters
79542,<bound method ?.barFighters of <__main__.A instance at 0x00A9BC88>>
79543,>>> a.barFighters()
79544,barFighters
79545,>>> a2.barFighters()
79546,Traceback (most recent call last):
79547,"  File ""<stdin>"", line 1, in <module>"
79548,AttributeError: A instance has no attribute 'barFighters'
79549,MethodType
79550,barFighters.__get__(a)
79551,barFighters
79552,a
79553,descriptor protocol
79554,MethodType
79555,classmethod
79556,staticmethod
79557,a.barFighters = barFighters.__get__(a)
79558,object
79559,Foo.sample_method = sample_method
79560,class Foo(object):
79561,    '''An empty class to demonstrate adding a method to an instance'''
79562,foo = Foo()
79563,"def sample_method(self, bar, baz):"
79564,    print(bar + baz)
79565,__get__
79566,__get__
79567,foo.sample_method = sample_method.__get__(foo)
79568,">>> foo.sample_method(1,2)"
79569,3
79570,import types
79571,types
79572,"(function, instance)"
79573,"foo.sample_method = types.MethodType(sample_method, foo)"
79574,">>> foo.sample_method(1,2)"
79575,3
79576,"(function, instance, class)"
79577,"foo.sample_method = types.MethodType(sample_method, foo, Foo)"
79578,"def bind(instance, method):"
79579,"    def binding_scope_fn(*args, **kwargs): "
79580,"        return method(instance, *args, **kwargs)"
79581,    return binding_scope_fn
79582,">>> foo.sample_method = bind(foo, sample_method)    "
79583,">>> foo.sample_method(1,2)"
79584,3
79585,>>> from functools import partial
79586,">>> foo.sample_method = partial(sample_method, foo)"
79587,">>> foo.sample_method(1,2)"
79588,3    
79589,>>> foo.sample_method = sample_method
79590,">>> foo.sample_method(1,2)"
79591,Traceback (most recent call last):
79592,"  File ""<stdin>"", line 1, in <module>"
79593,TypeError: sample_method() takes exactly 3 arguments (2 given)
79594,self
79595,">>> foo.sample_method(foo, 1, 2)"
79596,3
79597,__get__
79598,"sample_method.__get__(foo, Foo)"
79599,patch_me()
79600,import types
79601,
79602,class A(object):#but seems to work for old style objects too
79603,    pass
79604,
79605,def patch_me(target):
79606,"    def method(target,x):"
79607,"        print ""x="",x"
79608,"        print ""called from"", target"
79609,"    target.method = types.MethodType(method,target)"
79610,    #add more if needed
79611,
79612,a = A()
79613,print a
79614,#out: <__main__.A object at 0x2b73ac88bfd0>  
79615,patch_me(a)    #patch instance
79616,a.method(5)
79617,#out: x= 5
79618,#out: called from <__main__.A object at 0x2b73ac88bfd0>
79619,patch_me(A)
79620,A.method(6)        #can patch class too
79621,#out: x= 6
79622,#out: called from <class '__main__.A'>
79623,class A(object):
79624,    def m(self):
79625,        pass
79626,In [2]: A.m
79627,Out[2]: <unbound method A.m>
79628,In [5]: A.__dict__['m']
79629,Out[5]: <function m at 0xa66b8b4>
79630,In [11]: class MetaA(type):
79631,"   ....:     def __getattribute__(self, attr_name):"
79632,"   ....:         print str(self), '-', attr_name"
79633,
79634,In [12]: class A(object):
79635,   ....:     __metaclass__ = MetaA
79636,
79637,In [23]: A.m
79638,<class '__main__.A'> - m
79639,<class '__main__.A'> - m
79640,"In [28]: A.__dict__['m'].__get__(None, A)"
79641,Out[28]: <unbound method A.m>
79642,B.m = m
79643,"b.m = types.MethodType(m, b)"
79644,In [2]: A.m
79645,Out[2]: <unbound method A.m>
79646,
79647,In [59]: type(A.m)
79648,Out[59]: <type 'instancemethod'>
79649,
79650,In [60]: type(b.m)
79651,Out[60]: <type 'instancemethod'>
79652,
79653,In [61]: types.MethodType
79654,Out[61]: <type 'instancemethod'>
79655,from SomeOtherProduct.SomeModule import SomeClass
79656,def speak(self):
79657,"   return ""ook ook eee eee eee!"""
79658,SomeClass.speak = speak
79659,speak
79660,def run(self):
79661,    print self._instanceString
79662,
79663,class A(object):
79664,    def __init__(self):
79665,"        self._instanceString = ""This is instance string"""
79666,
79667,a = A()
79668,a.run = lambda: run(a)
79669,a.run()
79670,This is instance string
79671,setattr
79672,>>> def printme(s): print repr(s)
79673,>>> class A: pass
79674,">>> setattr(A,'printme',printme)"
79675,>>> a = A()
79676,>>> a.printme() # s becomes the implicit 'self' variable
79677,< __ main __ . A instance at 0xABCDEFG>
79678,A
79679,a
79680,"setattr(A,'printme',printme)"
79681,A.printme = printme
79682,types.MethodType
79683,>>> class A:
79684,...  def m(self):
79685,"...   print 'im m, invoked with: ', self"
79686,
79687,>>> a = A()
79688,>>> a.m()
79689,"im m, invoked with:  <__main__.A instance at 0x973ec6c>"
79690,>>> a.m
79691,<bound method A.m of <__main__.A instance at 0x973ec6c>>
79692,>>> 
79693,>>> def foo(firstargument):
79694,"...  print 'im foo, invoked with: ', firstargument"
79695,
79696,>>> foo
79697,<function foo at 0x978548c>
79698,">>> a.foo = foo.__get__(a, A) # or foo.__get__(a, type(a))"
79699,>>> a.foo()
79700,"im foo, invoked with:  <__main__.A instance at 0x973ec6c>"
79701,>>> a.foo
79702,<bound method A.foo of <__main__.A instance at 0x973ec6c>>
79703,>>> instancemethod = type(A.m)
79704,>>> instancemethod
79705,<type 'instancemethod'>
79706,">>> a.foo2 = instancemethod(foo, a, type(a))"
79707,>>> a.foo2()
79708,"im foo, invoked with:  <__main__.A instance at 0x973ec6c>"
79709,>>> a.foo2
79710,<bound method instance.foo of <__main__.A instance at 0x973ec6c>>
79711,#!/usr/bin/python -u
79712,import types
79713,import inspect
79714,
79715,## dynamically adding methods to a unique instance of a class
79716,
79717,
79718,# get a list of a class's method type attributes
79719,def listattr(c):
79720,"    for m in [(n, v) for n, v in inspect.getmembers(c, inspect.ismethod) if isinstance(v,types.MethodType)]:"
79721,"        print m[0], m[1]"
79722,
79723,# externally bind a function as a method of an instance of a class
79724,"def ADDMETHOD(c, method, name):"
79725,"    c.__dict__[name] = types.MethodType(method, c)"
79726,
79727,class C():
79728,    r = 10 # class attribute variable to test bound scope
79729,
79730,    def __init__(self):
79731,        pass
79732,
79733,    #internally bind a function as a method of self's class -- note that this one has issues!
79734,"    def addmethod(self, method, name):"
79735,"        self.__dict__[name] = types.MethodType( method, self.__class__ )"
79736,
79737,    # predfined function to compare with
79738,"    def f0(self, x):"
79739,"        print 'f0\tx = %d\tr = %d' % ( x, self.r)"
79740,
79741,a = C() # created before modified instnace
79742,b = C() # modified instnace
79743,
79744,
79745,"def f1(self, x): # bind internally"
79746,"    print 'f1\tx = %d\tr = %d' % ( x, self.r )"
79747,"def f2( self, x): # add to class instance's .__dict__ as method type"
79748,"    print 'f2\tx = %d\tr = %d' % ( x, self.r )"
79749,"def f3( self, x): # assign to class as method type"
79750,"    print 'f3\tx = %d\tr = %d' % ( x, self.r )"
79751,"def f4( self, x): # add to class instance's .__dict__ using a general function"
79752,"    print 'f4\tx = %d\tr = %d' % ( x, self.r )"
79753,
79754,
79755,"b.addmethod(f1, 'f1')"
79756,"b.__dict__['f2'] = types.MethodType( f2, b)"
79757,"b.f3 = types.MethodType( f3, b)"
79758,"ADDMETHOD(b, f4, 'f4')"
79759,
79760,
79761,b.f0(0) # OUT: f0   x = 0   r = 10
79762,b.f1(1) # OUT: f1   x = 1   r = 10
79763,b.f2(2) # OUT: f2   x = 2   r = 10
79764,b.f3(3) # OUT: f3   x = 3   r = 10
79765,b.f4(4) # OUT: f4   x = 4   r = 10
79766,
79767,
79768,k = 2
79769,"print 'changing b.r from {0} to {1}'.format(b.r, k)"
79770,b.r = k
79771,print 'new b.r = {0}'.format(b.r)
79772,
79773,b.f0(0) # OUT: f0   x = 0   r = 2
79774,b.f1(1) # OUT: f1   x = 1   r = 10  !!!!!!!!!
79775,b.f2(2) # OUT: f2   x = 2   r = 2
79776,b.f3(3) # OUT: f3   x = 3   r = 2
79777,b.f4(4) # OUT: f4   x = 4   r = 2
79778,
79779,c = C() # created after modifying instance
79780,
79781,# let's have a look at each instance's method type attributes
79782,print '\nattributes of a:'
79783,listattr(a)
79784,# OUT:
79785,# attributes of a:
79786,# __init__ <bound method C.__init__ of <__main__.C instance at 0x000000000230FD88>>
79787,# addmethod <bound method C.addmethod of <__main__.C instance at 0x000000000230FD88>>
79788,# f0 <bound method C.f0 of <__main__.C instance at 0x000000000230FD88>>
79789,
79790,print '\nattributes of b:'
79791,listattr(b)
79792,# OUT:
79793,# attributes of b:
79794,# __init__ <bound method C.__init__ of <__main__.C instance at 0x000000000230FE08>>
79795,# addmethod <bound method C.addmethod of <__main__.C instance at 0x000000000230FE08>>
79796,# f0 <bound method C.f0 of <__main__.C instance at 0x000000000230FE08>>
79797,# f1 <bound method ?.f1 of <class __main__.C at 0x000000000237AB28>>
79798,# f2 <bound method ?.f2 of <__main__.C instance at 0x000000000230FE08>>
79799,# f3 <bound method ?.f3 of <__main__.C instance at 0x000000000230FE08>>
79800,# f4 <bound method ?.f4 of <__main__.C instance at 0x000000000230FE08>>
79801,
79802,print '\nattributes of c:'
79803,listattr(c)
79804,# OUT:
79805,# attributes of c:
79806,# __init__ <bound method C.__init__ of <__main__.C instance at 0x0000000002313108>>
79807,# addmethod <bound method C.addmethod of <__main__.C instance at 0x0000000002313108>>
79808,# f0 <bound method C.f0 of <__main__.C instance at 0x0000000002313108>>
79809,"def y(self, x):"
79810,    pass
79811,d = C()
79812,"for i in range(1,5):"
79813,"    ADDMETHOD(d, y, 'f%d' % i)"
79814,print '\nattributes of d:'
79815,listattr(d)
79816,# OUT:
79817,# attributes of d:
79818,# __init__ <bound method C.__init__ of <__main__.C instance at 0x0000000002303508>>
79819,# addmethod <bound method C.addmethod of <__main__.C instance at 0x0000000002303508>>
79820,# f0 <bound method C.f0 of <__main__.C instance at 0x0000000002303508>>
79821,# f1 <bound method ?.y of <__main__.C instance at 0x0000000002303508>>
79822,# f2 <bound method ?.y of <__main__.C instance at 0x0000000002303508>>
79823,# f3 <bound method ?.y of <__main__.C instance at 0x0000000002303508>>
79824,# f4 <bound method ?.y of <__main__.C instance at 0x0000000002303508>>
79825,addmethod
79826,"def addmethod(self, method, name):  self.__dict__[name] = types.MethodType( method, self )"
79827,"a.methodname = function () { console.log(""Yay, a new method!"") }"
79828,# this class resides inside ReloadCodeDemo.py
79829,class A:
79830,    def bar( self ):
79831,"        print ""bar1"""
79832,        
79833,"    def reloadCode(self, methodName):"
79834,        ''' use this function to reload any function of class A'''
79835,        import types
79836,        import ReloadCodeDemo as ReloadMod # import the code as module
79837,        reload (ReloadMod) # force a reload of the module
79838,"        myM = getattr(ReloadMod.A,methodName) #get reloaded Method"
79839,        myTempFunc = types.FunctionType(# convert the method to a simple function
79840,"                                myM.im_func.func_code, #the methods code"
79841,"                                globals(), # globals to use"
79842,                                argdefs=myM.im_func.func_defaults # default values for variables if any
79843,                                ) 
79844,"        myNewM = types.MethodType(myTempFunc,self,self.__class__) #convert the function to a method"
79845,"        setattr(self,methodName,myNewM) # add the method to the function"
79846,
79847,if __name__ == '__main__':
79848,    a = A()
79849,    a.bar()
79850,    # now change your code and save the file
79851,    a.reloadCode('bar') # reloads the file
79852,    a.bar() # now executes the reloaded code
79853,"def binder (function, instance):"
79854,"  copy_of_function = type (function) (function.func_code, {})"
79855,  copy_of_function.__bind_to__ = instance
79856,"  def bound_function (*args, **kwargs):"
79857,"    return copy_of_function (copy_of_function.__bind_to__, *args, **kwargs)"
79858,  return bound_function
79859,
79860,
79861,class SupaClass (object):
79862,  def __init__ (self):
79863,    self.supaAttribute = 42
79864,
79865,
79866,def new_method (self):
79867,  print self.supaAttribute
79868,
79869,
79870,supaInstance = SupaClass ()
79871,"supaInstance.supMethod = binder (new_method, supaInstance)"
79872,
79873,otherInstance = SupaClass ()
79874,otherInstance.supaAttribute = 72
79875,"otherInstance.supMethod = binder (new_method, otherInstance)"
79876,
79877,otherInstance.supMethod ()
79878,supaInstance.supMethod ()
79879,"def addmethod(obj, name, func):"
79880,    klass = obj.__class__
79881,"    subclass = type(klass.__name__, (klass,), {})"
79882,"    setattr(subclass, name, func)"
79883,    obj.__class__ = subclass
79884,needle()
79885,guineapig
79886,import gorilla
79887,import guineapig
79888,@gorilla.patch(guineapig)
79889,def needle():
79890,"    print(""awesome"")"
79891,from types import MethodType
79892,
79893,def method(self):
79894,   print 'hi!'
79895,
79896,
79897,"setattr( targetObj, method.__name__, MethodType(method, targetObj, type(method)) )"
79898,>>> class Test(object):
79899,...   def a(self):
79900,...     pass
79901,... 
79902,>>> def b(self):
79903,...   pass
79904,... 
79905,>>> Test.b = b
79906,>>> type(b)
79907,<type 'function'>
79908,>>> type(Test.a)
79909,<type 'instancemethod'>
79910,>>> type(Test.b)
79911,<type 'instancemethod'>
79912,Test
79913,class UnderWater:
79914,    def __init__(self):
79915,        self.net = 'underwater'
79916,
79917,marine = UnderWater() # Instantiate the class
79918,
79919,# Recover the class from the instance and add attributes to it.
79920,class SubMarine(marine.__class__):  
79921,    def __init__(self):
79922,        super().__init__()
79923,            self.sound = 'Sonar'
79924,    
79925,"print(SubMarine, SubMarine.__name__, SubMarine().net, SubMarine().sound)"
79926,
79927,# Output
79928,"# (__main__.SubMarine,'SubMarine', 'underwater', 'Sonar')"
79929,from types import MethodType
79930,import re
79931,from string import ascii_letters
79932,
79933,
79934,class DynamicAttr:
79935,    def __init__(self):
79936,        self.dict_all_files = {}
79937,
79938,"    def _copy_files(self, *args, **kwargs):"
79939,"        print(f'copy {args[0][""filename""]} {args[0][""copy_command""]}')"
79940,
79941,"    def _delete_files(self, *args, **kwargs):"
79942,"        print(f'delete {args[0][""filename""]} {args[0][""delete_command""]}')"
79943,
79944,    def _create_properties(self):
79945,"        for key, item in self.dict_all_files.items():"
79946,            setattr(
79947,"                self,"
79948,"                key,"
79949,"                self.dict_all_files[key],"
79950,            )
79951,            setattr(
79952,"                self,"
79953,"                key + ""_delete"","
79954,                MethodType(
79955,"                    self._delete_files,"
79956,                    {
79957,"                        ""filename"": key,"
79958,"                        ""delete_command"": f'del {item}',"
79959,"                    },"
79960,"                ),"
79961,            )
79962,            setattr(
79963,"                self,"
79964,"                key + ""_copy"","
79965,                MethodType(
79966,"                    self._copy_files,"
79967,                    {
79968,"                        ""filename"": key,"
79969,"                        ""copy_command"": f'copy {item}',"
79970,"                    },"
79971,"                ),"
79972,            )
79973,"    def add_files_to_class(self, filelist: list):"
79974,        for _ in filelist:
79975,"            attr_key = re.sub(rf'[^{ascii_letters}]+', '_', _).strip('_')"
79976,            self.dict_all_files[attr_key] = _
79977,        self._create_properties()
79978,dy = DynamicAttr()
79979,"dy.add_files_to_class([r""C:\Windows\notepad.exe"", r""C:\Windows\regedit.exe""])"
79980,
79981,"dy.add_files_to_class([r""C:\Windows\HelpPane.exe"", r""C:\Windows\win.ini""])"
79982,#output
79983,print(dy.C_Windows_HelpPane_exe)
79984,dy.C_Windows_notepad_exe_delete()
79985,dy.C_Windows_HelpPane_exe_copy()
79986,C:\Windows\HelpPane.exe
79987,delete C_Windows_notepad_exe del C:\Windows\notepad.exe
79988,copy C_Windows_HelpPane_exe copy C:\Windows\HelpPane.exe
79989,__repr__
79990,__str__
79991,repr()
79992,str()
79993,# Instance monkeypatch
79994,[ins] In [55]: x.__str__ = show.__get__(x)                                                                 
79995,
79996,[ins] In [56]: x                                                                                           
79997,Out[56]: <__main__.X at 0x7fc207180c10>
79998,
79999,[ins] In [57]: str(x)                                                                                      
80000,Out[57]: '<__main__.X object at 0x7fc207180c10>'
80001,
80002,[ins] In [58]: x.__str__()                                                                                 
80003,Nice object!
80004,
80005,# Class monkeypatch
80006,"[ins] In [62]: X.__str__ = lambda _: ""From class""                                                          "
80007,
80008,[ins] In [63]: str(x)                                                                                      
80009,Out[63]: 'From class'
80010,"print >>f, ""hi there"""
80011,"""\n"""
80012,"""\r\n"""
80013,"with open('somefile.txt', 'a') as the_file:"
80014,    the_file.write('Hello\n')
80015,os.linesep
80016,'\n'
80017,with
80018,open()
80019,'a'
80020,'w'
80021,os
80022,os.linesep
80023,with
80024,the_file.close()
80025,print()
80026,from __future__ import print_function  # Only needed for Python 2
80027,"print(""hi there"", file=f)"
80028,import
80029,print()
80030,"f = open('myfile', 'w')"
80031,f.write('hi there\n')  # python will convert \n to os.linesep
80032,f.close()  # you can omit in most cases as the destructor will call it
80033,'\n'
80034,os.linesep
80035,''
80036,'\n'
80037,\n
80038,\r\r\n
80039,\r\n
80040,\n
80041,\r\n
80042,\r\r\n
80043,"open('myfile','a')"
80044,"open('myfile','w')"
80045,"with open('file_to_write', 'w') as f:"
80046,    f.write('file contents\n')
80047,with
80048,"Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on"
80049,win32
80050,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
80051,>>> import os
80052,>>> os.linesep
80053,'\r\n'
80054,">>> f = open('myfile','w')"
80055,>>> f.write('hi there\n')
80056,>>> f.write('hi there' + os.linesep) # same result as previous line ?????????
80057,>>> f.close()
80058,">>> open('myfile', 'rb').read()"
80059,'hi there\r\nhi there\r\r\n'
80060,>>>
80061,'\n'
80062,'hi there' + os.linesep
80063,'hi there\r\n'
80064,'hi there\n'
80065,\n
80066,os.linesep
80067,\r\r\n
80068,\n
80069,\r\n
80070,\n
80071,\r
80072,os.linesep
80073,Department of Redundancy Department
80074,"with open ('myfile', 'a') as f: f.write ('hi there\n')"
80075,with
80076,zen of perl
80077,from __future__ import print_function
80078,"print(""hi there"", file=f)"
80079,f.write(...)
80080,"print(..., file=f)"
80081,import time    
80082,
80083,start = start = time.time()
80084,"with open(""test.txt"", 'w') as f:"
80085,    for i in range(10000000):
80086,"        # print('This is a speed test', file=f)"
80087,        # f.write('This is a speed test\n')
80088,end = time.time()
80089,print(end - start)
80090,write
80091,print
80092,"print(..., file=f)"
80093,end
80094,"with open(""test"", 'w') as f:"
80095,"    print('Foo1,', file=f, end='')"
80096,"    print('Foo2,', file=f, end='')"
80097,"    print('Foo3', file=f)"
80098,with
80099,write
80100,print
80101,start = start = time.time()
80102,long_line = 'This is a speed test' * 100
80103,"with open(""test.txt"", 'w') as f:"
80104,    for i in range(1000000):
80105,"        # print(long_line, file=f)"
80106,        # f.write(long_line + '\n')
80107,end = time.time()
80108,
80109,"print(end - start, ""s"")"
80110,write
80111,print
80112,print
80113,print()
80114,"print(line1, line2, ... sep=""\n"")"
80115,pathlib
80116,"Path.write_text(data, encoding=None, errors=None)"
80117,import pathlib
80118,
80119,pathlib.Path('textfile.txt').write_text('content')
80120,"with open('YOURFILE.txt', 'a') as the_file:"
80121,"    the_file.write(""Hello"")"
80122,w
80123,\n
80124,write()
80125,"the_file.write(""Hello\n"")"
80126,io
80127,import io
80128,"my_string = ""hi there"""
80129,
80130,"with io.open(""output_file.txt"", mode='w', encoding='utf-8') as f:"
80131,    f.write(my_string)
80132,write()
80133,writelines()
80134,print()
80135,"print(line1, line2, sep=""\n"", file=f)"
80136,print()
80137,print()
80138,"lines = [""The Quick Brown Fox"", ""Lorem Ipsum""]"
80139,"print(*lines, sep=""\n"", file=f)"
80140,"""\n"""
80141,print()
80142,"""\r\n"""
80143,"with open('somefile.txt', 'a') as the_file:"
80144,    for item in items:
80145,"        the_file.write(f""{item}\n"")"
80146,"filehandle = open(""text.txt"", ""w"")"
80147,"filebuffer = [""hi"",""welcome"",""yes yes welcome""]"
80148,filehandle.writelines(filebuffer)
80149,filehandle.close()
80150,"with open('file_to_write', 'w') as f:"
80151,close()
80152,filewriter
80153,pip install filewriter
80154,from filewriter import Writer
80155,
80156,"Writer(filename='my_file', ext='txt') << [""row 1 hi there"", ""row 2""]"
80157,my_file.txt
80158,__str__
80159,print
80160,"out = open(file_name, 'w')"
80161,"fwl = lambda *x, **y: print(*x, **y, file=out) # FileWriteLine"
80162,fwl('Hi')
80163,print
80164,partial
80165,from functools import partial
80166,"fwl = partial(print, file=out)"
80167,"from functools import partial; fwl = partial(print, file=out)"
80168,%%writefile test.txt
80169, i am writing this to test.txt file \n
80170, writing this line also
80171,"with FileOpenerCM('file.txt') as fp: # is equal to ""with open('file.txt') as fp:"""
80172,      fp.write('dummy text')
80173,context manager
80174,with
80175,class FileOpenerCM:
80176,"     def __init__(self, file, mode='w'):"
80177,"         self.file = open(file, mode)"
80178,      
80179,     def __enter__(self):
80180,          return self.file
80181,      
80182,"     def __exit__(self, exc_type, exc_value, exc_traceback):"
80183,         self.file.close()
80184,__init__
80185,obj.__init__
80186,__enter__
80187,as
80188,fp
80189,exc_type
80190,exc_value
80191,exc_traceback
80192,exc_type: TypeError
80193,exc_value: unsupported operand type(s) for +: 'int' and 'str
80194,exc_traceback: <traceback object at 0x6af8ee10bc4d>
80195,#!/usr/bin/env python
80196,
80197,import pygame
80198,from pygame.locals import *
80199,
80200,pygame.init()
80201,
80202,"win = pygame.display.set_mode((400,400))"
80203,"pygame.display.set_caption(""My first game"")"
80204,"pygame 2.0.0 (SDL 2.0.12, python 3.8.3)"
80205,Hello from the pygame community. https://www.pygame.org/contribute.html
80206,import pygame
80207,from pygame.locals import *
80208,
80209,pygame.init()
80210,
80211,"win = pygame.display.set_mode((400,400))"
80212,"pygame.display.set_caption(""My first game"")"
80213,clock = pygame.time.Clock()
80214,
80215,run = True
80216,while run:
80217,
80218,    # handle events
80219,    for event in pygame.event.get():
80220,        if event.type == pygame.QUIT:
80221,            run = False
80222,
80223,    # update game objects
80224,    # [...]
80225,
80226,    # clear display
80227,"    win.fill((0, 0, 0))"
80228,
80229,    # draw game objects
80230,    # [...]
80231,
80232,    # update display
80233,    pygame.display.flip()
80234,
80235,    # limit frames per second
80236,    clock.tick(60) 
80237,
80238,pygame.quit()
80239,pygame.event.pump()
80240,pygame.event.get()
80241,blit
80242,pygame.display.update()
80243,pygame.display.flip()
80244,pygame.time.Clock.tick
80245,import string
80246,"s = ""string. With. Punctuation?"" # Sample string "
80247,"out = s.translate(string.maketrans("""",""""), string.punctuation)"
80248,The temperature in the O'Reilly & Arbuthnot-Smythe server's main rack is 40.5 degrees.
80249,string.punctuation
80250,"s.translate(None, string.punctuation)"
80251,"s.translate(str.maketrans('', '', string.punctuation))"
80252,exclude = set(string.punctuation)
80253,s = ''.join(ch for ch in s if ch not in exclude)
80254,"import re, string, timeit"
80255,
80256,"s = ""string. With. Punctuation"""
80257,exclude = set(string.punctuation)
80258,"table = string.maketrans("""","""")"
80259,regex = re.compile('[%s]' % re.escape(string.punctuation))
80260,
80261,def test_set(s):
80262,    return ''.join(ch for ch in s if ch not in exclude)
80263,
80264,"def test_re(s):  # From Vinko's solution, with fix."
80265,"    return regex.sub('', s)"
80266,
80267,def test_trans(s):
80268,"    return s.translate(table, string.punctuation)"
80269,
80270,def test_repl(s):  # From S.Lott's solution
80271,    for c in string.punctuation:
80272,"        s=s.replace(c,"""")"
80273,    return s
80274,
80275,"print ""sets      :"",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)"
80276,"print ""regex     :"",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)"
80277,"print ""translate :"",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)"
80278,"print ""replace   :"",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)"
80279,sets      : 19.8566138744
80280,regex     : 6.86155414581
80281,translate : 2.12455511093
80282,replace   : 28.4436721802
80283,"table = string.maketrans("""","""")"
80284,table = str.maketrans({key: None for key in string.punctuation})
80285,regex
80286,import re
80287,"s = ""string. With. Punctuation?"""
80288,"s = re.sub(r'[^\w\s]','',s)"
80289,"s = re.sub(r'[^\w\s]','',s, re.UNICODE)"
80290,import string
80291,
80292,"s = ""string. With. Punctuation?"""
80293,"table = string.maketrans("""","""")"
80294,"new_s = s.translate(table, string.punctuation)      # Output: string without punctuation"
80295,import string
80296,
80297,"s = ""string. With. Punctuation?"""
80298,table = str.maketrans(dict.fromkeys(string.punctuation))  # OR {key: None for key in string.punctuation}
80299,new_s = s.translate(table)                          # Output: string without punctuation
80300,"myString.translate(None, string.punctuation)"
80301,str
80302,unicode
80303,deletechars
80304,TypeError: translate() takes exactly one argument (2 given)
80305,string.punctuation
80306,# -*- coding: utf-8 -*-
80307,from unicodedata import category
80308,s = u'String — with -  «punctation »...'
80309,s = ''.join(ch for ch in s if category(ch)[0] != 'P')
80310,"print 'stripped', s"
80311,''.join(ch for ch in s if category(ch)[0] not in 'SP')
80312,~*+§$
80313,"regex.sub(ur""\p{P}+"", """", text)"
80314,~
80315,">>> s = ""string. With. Punctuation?"" # Sample string"
80316,>>> import string
80317,>>> for c in string.punctuation:
80318,"...     s= s.replace(c,"""")"
80319,...
80320,>>> s
80321,'string With Punctuation'
80322,"reduce(lambda s,c: s.replace(c, ''), string.punctuation, s)"
80323,"import re, string"
80324,"s = ""string. With. Punctuation?"" # Sample string "
80325,"out = re.sub('[%s]' % re.escape(string.punctuation), '', s)"
80326,str
80327,unicode
80328,str.translate()
80329,None
80330,import string
80331,
80332,"remove_punct_map = dict.fromkeys(map(ord, string.punctuation))"
80333,s.translate(remove_punct_map)
80334,dict.fromkeys()
80335,None
80336,import unicodedata
80337,import sys
80338,
80339,remove_punct_map = dict.fromkeys(i for i in range(sys.maxunicode)
80340,                                 if unicodedata.category(chr(i)).startswith('P'))
80341,string.punctuation
80342,unicode
80343,str
80344,string.punctuation
80345,import regex
80346,"s = u""string. With. Some・Really Weird、Non？ASCII。 「（Punctuation）」?"""
80347,"remove = regex.compile(ur'[\p{C}|\p{M}|\p{P}|\p{S}|\p{Z}]+', regex.UNICODE)"
80348,"remove.sub(u"" "", s).strip()"
80349,\{S}
80350,$
80351,\{Pd}
80352,"remove = regex.compile(ur'[\p{C}|\p{M}|\p{P}|\p{S}|\p{Z}]+', regex.UNICODE)"
80353,\w
80354,\d
80355,\s
80356,import re
80357,"s = ""string. With. Punctuation?"" # Sample string "
80358,"out = re.sub(ur'[^\w\d\s]+', '', s)"
80359,\d
80360,\w
80361,\w
80362,import string
80363,"""l*ots! o(f. p@u)n[c}t]u[a'ti\""on#$^?/"".translate(str.maketrans({a:None for a in string.punctuation}))"
80364,import string
80365,f = lambda x: ''.join([i for i in x if i not in string.punctuation])
80366,import re
80367,"s = ""string. With. Punctuation?"" # Sample string "
80368,"out = re.sub(r'[^a-zA-Z0-9\s]', '', s)"
80369,def stripPunc(wordList):
80370,"    """"""Strips punctuation from list of words"""""""
80371,"    puncList = [""."","";"","":"",""!"",""?"",""/"",""\\"","","",""#"",""@"",""$"",""&"","")"",""("",""\""""]"
80372,    for punc in puncList:
80373,        for word in wordList:
80374,"            wordList=[word.replace(punc,'') for word in wordList]"
80375,    return wordList
80376,punctlist
80377,re.compile
80378,table = str.maketrans({key: None for key in string.punctuation})
80379,"table = str.maketrans('', '', string.punctuation)"
80380,"import re, string, timeit"
80381,
80382,"s = ""string. With. Punctuation"""
80383,
80384,
80385,def test_set(s):
80386,    exclude = set(string.punctuation)
80387,    return ''.join(ch for ch in s if ch not in exclude)
80388,
80389,
80390,def test_set2(s):
80391,    _punctuation = set(string.punctuation)
80392,    for punct in set(s).intersection(_punctuation):
80393,"        s = s.replace(punct, ' ')"
80394,    return ' '.join(s.split())
80395,
80396,
80397,"def test_re(s):  # From Vinko's solution, with fix."
80398,    regex = re.compile('[%s]' % re.escape(string.punctuation))
80399,"    return regex.sub('', s)"
80400,
80401,
80402,def test_trans(s):
80403,    table = str.maketrans({key: None for key in string.punctuation})
80404,    return s.translate(table)
80405,
80406,
80407,def test_trans2(s):
80408,"    table = str.maketrans('', '', string.punctuation)"
80409,    return(s.translate(table))
80410,
80411,
80412,def test_repl(s):  # From S.Lott's solution
80413,    for c in string.punctuation:
80414,"        s=s.replace(c,"""")"
80415,    return s
80416,
80417,
80418,"print(""sets      :"",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000))"
80419,"print(""sets2      :"",timeit.Timer('f(s)', 'from __main__ import s,test_set2 as f').timeit(1000000))"
80420,"print(""regex     :"",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000))"
80421,"print(""translate :"",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000))"
80422,"print(""translate2 :"",timeit.Timer('f(s)', 'from __main__ import s,test_trans2 as f').timeit(1000000))"
80423,"print(""replace   :"",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000))"
80424,sets      : 3.1830138750374317
80425,sets2      : 2.189873124472797
80426,regex     : 7.142953420989215
80427,translate : 4.243278483860195
80428,translate2 : 2.427158243022859
80429,replace   : 4.579746678471565
80430,''.join([c for c in s if c.isalnum() or c.isspace()])
80431,">>> s = ""string. With. Punctuation?"""
80432,">>> s = re.sub(r'[^\w\s]','',s)"
80433,">>> re.split(r'\s*', s)"
80434,
80435,
80436,"['string', 'With', 'Punctuation']"
80437,import string
80438,
80439,"input_text = ""!where??and!!or$$then:)"""
80440,"punctuation_replacer = string.maketrans(string.punctuation, ' '*len(string.punctuation))    "
80441,print ' '.join(input_text.translate(punctuation_replacer).split()).strip()
80442,
80443,Output>> where and or then
80444," ''.join(filter(str.isalnum, s)) "
80445,import re 
80446,
80447,"s = ""string. With. Punctuation?"" "
80448,"s = re.sub(r'[\W\s]', ' ', s)"
80449,
80450,print(s)
80451,'string  With  Punctuation '
80452,import re
80453,
80454,punct = re.compile(r'(\w+)')
80455,
80456,sentence = 'This ! is : a # sample $ sentence.' # Text with punctuation
80457,tokenized = [m.group() for m in punct.finditer(sentence)]
80458,sentence = ' '.join(tokenized)
80459,print(sentence) 
80460,'This is a sample sentence'
80461,# FIRST METHOD
80462,# Storing all punctuations in a variable    
80463,"punctuation='!?,.:;""\')(_-'"
80464,newstring ='' # Creating empty string
80465,"word = raw_input(""Enter string: "")"
80466,for i in word:
80467,     if(i not in punctuation):
80468,                  newstring += i
80469,"print (""The string without punctuation is"", newstring)"
80470,
80471,# SECOND METHOD
80472,"word = raw_input(""Enter string: "")"
80473,"punctuation = '!?,.:;""\')(_-'"
80474,"newstring = word.translate(None, punctuation)"
80475,"print (""The string without punctuation is"",newstring)"
80476,
80477,
80478,# Output for both methods
80479,"Enter string: hello! welcome -to_python(programming.language)??,"
80480,The string without punctuation is: hello welcome topythonprogramminglanguage
80481,"with open('one.txt','r')as myFile:"
80482,
80483,    str1=myFile.read()
80484,
80485,    print(str1)
80486,
80487,
80488,"    punctuation = ['(', ')', '?', ':', ';', ',', '.', '!', '/', '""', ""'""] "
80489,
80490,for i in punctuation:
80491,
80492,"        str1 = str1.replace(i,"" "") "
80493,        myList=[]
80494,"        myList.extend(str1.split("" ""))"
80495,print (str1) 
80496,for i in myList:
80497,
80498,"    print(i,end='\n')"
80499,"    print (""____________"")"
80500,"regex.sub(r'\p{P}','', s)"
80501,you're
80502,anal-retentive
80503,# using lambda
80504,"''.join(filter(lambda c: c not in string.punctuation, s))"
80505,
80506,# using list comprehension
80507,''.join('' if c in string.punctuation else c for c in s)
80508,translate
80509,#!/usr/bin/env python3
80510,
80511,"""""""Determination of most efficient way to remove punctuation in Python 3."
80512,
80513,Results in Python 3.8.10 on my system using the default arguments:
80514,
80515,set       : 51.897
80516,regex     : 17.901
80517,translate :  2.059
80518,replace   : 13.209
80519,""""""""
80520,
80521,import argparse
80522,import re
80523,import string
80524,import timeit
80525,
80526,parser = argparse.ArgumentParser()
80527,"parser.add_argument(""--filename"", ""-f"", default=argparse.__file__)"
80528,"parser.add_argument(""--iterations"", ""-i"", type=int, default=10000)"
80529,opts = parser.parse_args()
80530,with open(opts.filename) as fp:
80531,    s = fp.read()
80532,exclude = set(string.punctuation)
80533,"table = str.maketrans("""", """", string.punctuation)"
80534,"regex = re.compile(f""[{re.escape(string.punctuation)}]"")"
80535,
80536,def test_set(s):
80537,"    return """".join(ch for ch in s if ch not in exclude)"
80538,
80539,"def test_regex(s):  # From Vinko's solution, with fix."
80540,"    return regex.sub("""", s)"
80541,
80542,def test_translate(s):
80543,    return s.translate(table)
80544,
80545,def test_replace(s):  # From S.Lott's solution
80546,    for c in string.punctuation:
80547,"        s = s.replace(c, """")"
80548,    return s
80549,
80550,"opts = dict(globals=globals(), number=opts.iterations)"
80551,"solutions = ""set"", ""regex"", ""translate"", ""replace"""
80552,for solution in solutions:
80553,"    elapsed = timeit.timeit(f""test_{solution}(s)"", **opts)"
80554,"    print(f""{solution:<10}: {elapsed:6.3f}"")"
80555,str.translate
80556,s
80557,replace
80558,regex
80559,from unicodedata import category
80560,"text = 'hi, how are you?'"
80561,text_without_punc = ''.join(ch for ch in text if not category(ch).startswith('P'))
80562,import string
80563,' '.join(word.strip(string.punctuation) for word in 'text'.split())
80564,regex
80565,\p{X}
80566,\P{X}
80567,[:name:]
80568,pip install regex
80569,pip3 install regex
80570,"regex.sub(r'[\p{P}\p{S}]', '', text)  # to remove one by one"
80571,"regex.sub(r'[\p{P}\p{S}]+', '', text) # to remove all consecutive punctuation/symbols with one go"
80572,"regex.sub(r'[[:punct:]]+', '', text)  # Same with a POSIX character class"
80573,import regex
80574,
80575,"text = 'भारत India <><>^$.,,! 002'"
80576,"new_text = regex.sub(r'[\p{P}\p{S}\s]+', ' ', text).lower().strip()"
80577,# OR
80578,"# new_text = regex.sub(r'[[:punct:]\s]+', ' ', text).lower().strip()"
80579,
80580,print(new_text)
80581,# => भारत india 002
80582,\s
80583,postgreSQL
80584,df
80585,Station ID     Pollutants
80586,"8809           {""a"": ""46"", ""b"": ""3"", ""c"": ""12""}"
80587,"8810           {""a"": ""36"", ""b"": ""5"", ""c"": ""8""}"
80588,"8811           {""b"": ""2"", ""c"": ""7""}"
80589,"8812           {""c"": ""11""}"
80590,"8813           {""a"": ""82"", ""c"": ""15""}"
80591,Station ID     a      b       c
80592,8809           46     3       12
80593,8810           36     5       8
80594,8811           NaN    2       7
80595,8812           NaN    NaN     11
80596,8813           82     NaN     15
80597,"objs = [df, pandas.DataFrame(df['Pollutant Levels'].tolist()).iloc[:, :3]]"
80598,"df2 = pandas.concat(objs, axis=1).drop('Pollutant Levels', axis=1)"
80599,print(df2)
80600,IndexError: out-of-bounds on slice (end) 
80601,.tolist()
80602,#My data format 
80603,"u{'a': '1', 'b': '2', 'c': '3'}"
80604,
80605,#and not
80606,"{u'a': '1', u'b': '2', u'c': '3'}"
80607,postgreSQL
80608,df['Pollutant Levels'].map(eval)
80609,.apply(pd.Series)
80610,"In [2]: df = pd.DataFrame({'a':[1,2,3], 'b':[{'c':1}, {'d':3}, {'c':5, 'd':6}]})"
80611,
80612,In [3]: df
80613,Out[3]:
80614,   a                   b
80615,0  1           {u'c': 1}
80616,1  2           {u'd': 3}
80617,"2  3  {u'c': 5, u'd': 6}"
80618,
80619,In [4]: df['b'].apply(pd.Series)
80620,Out[4]:
80621,     c    d
80622,0  1.0  NaN
80623,1  NaN  3.0
80624,2  5.0  6.0
80625,concat
80626,"In [7]: pd.concat([df.drop(['b'], axis=1), df['b'].apply(pd.Series)], axis=1)"
80627,Out[7]:
80628,   a    c    d
80629,0  1  1.0  NaN
80630,1  2  NaN  3.0
80631,2  3  5.0  6.0
80632,iloc
80633,"In [15]: pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"
80634,Out[15]:
80635,   a    c    d
80636,0  1  1.0  NaN
80637,1  2  NaN  3.0
80638,2  3  5.0  6.0
80639,df[col].map(eval)
80640,.map(eval)
80641,literal_eval
80642,apply(pd.Series)
80643,json_normalize
80644,import pandas as pd
80645,
80646,df2 = pd.json_normalize(df['Pollutant Levels'])
80647,pd.DataFrame(df['b'].tolist())
80648,normalize
80649,dicts
80650,df.join(pd.DataFrame(df.pop('Pollutants').values.tolist()))
80651,list
80652,dicts
80653,NaN
80654,dicts
80655,pd.json_normalize(df.Pollutants)
80656,df.Pollutants.apply(pd.Series)
80657,%%timeit
80658,.json_normalize
80659,.apply
80660,dict
80661,dict
80662,str
80663,str
80664,dict
80665,ast.literal_eval
80666,json.loads(…)
80667,pd.json_normalize
80668,dicts
80669,keys
80670,values
80671,record_path
80672,meta
80673,dicts
80674,pandas.DataFrame.join
80675,df
80676,pd.json_normalize
80677,df.reset_index()
80678,pandas.DataFrame.pop
80679,pandas.DataFrame.drop
80680,NaN
80681,dict
80682,df.Pollutants = df.Pollutants.fillna({i: {} for i in df.index})
80683,'Pollutants'
80684,'{}'
80685,import pandas as pd
80686,from ast import literal_eval
80687,import numpy as np
80688,
80689,"data = {'Station ID': [8809, 8810, 8811, 8812, 8813, 8814],"
80690,"        'Pollutants': ['{""a"": ""46"", ""b"": ""3"", ""c"": ""12""}', '{""a"": ""36"", ""b"": ""5"", ""c"": ""8""}', '{""b"": ""2"", ""c"": ""7""}', '{""c"": ""11""}', '{""a"": ""82"", ""c"": ""15""}', np.nan]}"
80691,
80692,df = pd.DataFrame(data)
80693,
80694,# display(df)
80695,   Station ID                        Pollutants
80696,"0        8809  {""a"": ""46"", ""b"": ""3"", ""c"": ""12""}"
80697,"1        8810   {""a"": ""36"", ""b"": ""5"", ""c"": ""8""}"
80698,"2        8811              {""b"": ""2"", ""c"": ""7""}"
80699,"3        8812                       {""c"": ""11""}"
80700,"4        8813            {""a"": ""82"", ""c"": ""15""}"
80701,5        8814                               NaN
80702,
80703,# check the type of the first value in Pollutants
80704,">>> print(type(df.iloc[0, 1]))"
80705,<class 'str'>
80706,
80707,"# replace NaN with '{}' if the column is strings, otherwise replace with {}"
80708,df.Pollutants = df.Pollutants.fillna('{}')  # if the NaN is in a column of strings
80709,# df.Pollutants = df.Pollutants.fillna({i: {} for i in df.index})  # if the column is not strings
80710,
80711,# Convert the column of stringified dicts to dicts
80712,"# skip this line, if the column contains dicts"
80713,df.Pollutants = df.Pollutants.apply(literal_eval)
80714,
80715,# reset the index if the index is not unique integers from 0 to n-1
80716,# df.reset_index(inplace=True)  # uncomment if needed
80717,
80718,"# remove and normalize the column of dictionaries, and join the result to df"
80719,df = df.join(pd.json_normalize(df.pop('Pollutants')))
80720,
80721,# display(df)
80722,   Station ID    a    b    c
80723,0        8809   46    3   12
80724,1        8810   36    5    8
80725,2        8811  NaN    2    7
80726,3        8812  NaN  NaN   11
80727,4        8813   82  NaN   15
80728,5        8814  NaN  NaN  NaN
80729,%%timeit
80730,# dataframe with 1M rows
80731,dfb = pd.concat([df]*20000).reset_index(drop=True)
80732,
80733,%%timeit
80734,dfb.join(pd.json_normalize(dfb.Pollutants))
80735,[out]:
80736,"46.9 ms ± 201 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
80737,
80738,%%timeit
80739,"pd.concat([dfb.drop(columns=['Pollutants']), dfb.Pollutants.apply(pd.Series)], axis=1)"
80740,[out]:
80741,"7.75 s ± 52.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
80742,"""Pollutant Levels"""
80743,Pollutants'
80744,   StationID                   Pollutants
80745,"0       8809  {""a"":""46"",""b"":""3"",""c"":""12""}"
80746,"1       8810   {""a"":""36"",""b"":""5"",""c"":""8""}"
80747,"2       8811            {""b"":""2"",""c"":""7""}"
80748,"3       8812                   {""c"":""11""}"
80749,"4       8813          {""a"":""82"",""c"":""15""}"
80750,
80751,
80752,"df2[""Pollutants""] = df2[""Pollutants""].apply(lambda x : dict(eval(x)) )"
80753,"df3 = df2[""Pollutants""].apply(pd.Series )"
80754,
80755,    a    b   c
80756,0   46    3  12
80757,1   36    5   8
80758,2  NaN    2   7
80759,3  NaN  NaN  11
80760,4   82  NaN  15
80761,
80762,
80763,"result = pd.concat([df, df3], axis=1).drop('Pollutants', axis=1)"
80764,result
80765,
80766,   StationID    a    b   c
80767,0       8809   46    3  12
80768,1       8810   36    5   8
80769,2       8811  NaN    2   7
80770,3       8812  NaN  NaN  11
80771,4       8813   82  NaN  15
80772,"df_pollutants = pd.DataFrame(df['Pollutants'].values.tolist(), index=df.index)"
80773,df_pollutants = df['Pollutants'].apply(pd.Series)
80774,apply
80775,values
80776,numpy ndarrays
80777,c
80778,# step 1: convert the `Pollutants` column to Pandas dataframe series
80779,df_pol_ps = data_df['Pollutants'].apply(pd.Series)
80780,
80781,df_pol_ps:
80782,    a   b   c
80783,0   46  3   12
80784,1   36  5   8
80785,2   NaN 2   7
80786,3   NaN NaN 11
80787,4   82  NaN 15
80788,
80789,"# step 2: concat columns `a, b, c` and drop/remove the `Pollutants` "
80790,"df_final = pd.concat([df, df_pol_ps], axis = 1).drop('Pollutants', axis = 1)"
80791,
80792,df_final:
80793,    StationID   a   b   c
80794,0   8809    46  3   12
80795,1   8810    36  5   8
80796,2   8811    NaN 2   7
80797,3   8812    NaN NaN 11
80798,4   8813    82  NaN 15
80799,"df_final = pd.concat([df, df['Pollutants'].apply(pd.Series)], axis = 1).drop('Pollutants', axis = 1)"
80800,
80801,df_final:
80802,    StationID   a   b   c
80803,0   8809    46  3   12
80804,1   8810    36  5   8
80805,2   8811    NaN 2   7
80806,3   8812    NaN NaN 11
80807,4   8813    82  NaN 15
80808,pd.DataFrame(df['val'].tolist())
80809,pop
80810,drop
80811,pop
80812,drop
80813,pd.DataFrame
80814,pop
80815,df['val'].apply(pd.Series)
80816,pd.json_normalize(df['val']))
80817,json_normalize
80818,pd.DataFrame
80819,df.pop('val').values.tolist()
80820,df.pop('val').to_numpy().tolist()
80821,>>> df
80822,
80823,   Station ID                        Pollutants
80824,"0        8809  {""a"": ""46"", ""b"": ""3"", ""c"": ""12""}"
80825,"1        8810   {""a"": ""36"", ""b"": ""5"", ""c"": ""8""}"
80826,"2        8811              {""b"": ""2"", ""c"": ""7""}"
80827,"3        8812                       {""c"": ""11""}"
80828,"4        8813            {""a"": ""82"", ""c"": ""15""}"
80829,>>> df = pd.concat([df]*2000000).reset_index(drop=True)
80830,>>> print(df.shape)
80831,"(10000000, 2)"
80832,def apply_drop(df):
80833,"    return df.join(df['Pollutants'].apply(pd.Series)).drop('Pollutants', axis=1)  "
80834,
80835,def json_normalise_drop(df):
80836,"    return df.join(pd.json_normalize(df.Pollutants)).drop('Pollutants', axis=1)  "
80837,
80838,def tolist_drop(df):
80839,"    return df.join(pd.DataFrame(df['Pollutants'].tolist())).drop('Pollutants', axis=1)  "
80840,
80841,def vlues_tolist_drop(df):
80842,"    return df.join(pd.DataFrame(df['Pollutants'].values.tolist())).drop('Pollutants', axis=1)  "
80843,
80844,def pop_tolist(df):
80845,    return df.join(pd.DataFrame(df.pop('Pollutants').tolist()))  
80846,
80847,def pop_values_tolist(df):
80848,    return df.join(pd.DataFrame(df.pop('Pollutants').values.tolist()))
80849,>>> %timeit apply_drop(df.copy())
80850,"1 loop, best of 3: 53min 20s per loop"
80851,>>> %timeit json_normalise_drop(df.copy())
80852,"1 loop, best of 3: 54.9 s per loop"
80853,>>> %timeit tolist_drop(df.copy())
80854,"1 loop, best of 3: 6.62 s per loop"
80855,>>> %timeit vlues_tolist_drop(df.copy())
80856,"1 loop, best of 3: 6.63 s per loop"
80857,>>> %timeit pop_tolist(df.copy())
80858,"1 loop, best of 3: 5.99 s per loop"
80859,>>> %timeit pop_values_tolist(df.copy())
80860,"1 loop, best of 3: 5.94 s per loop"
80861,+---------------------+-----------+
80862,| apply_drop          | 53min 20s |
80863,| json_normalise_drop |    54.9 s |
80864,| tolist_drop         |    6.62 s |
80865,| vlues_tolist_drop   |    6.63 s |
80866,| pop_tolist          |    5.99 s |
80867,| pop_values_tolist   |    5.94 s |
80868,+---------------------+-----------+
80869,df.join(pd.DataFrame(df.pop('Pollutants').values.tolist()))
80870,join
80871,pop
80872,tolist
80873,concat
80874,drop
80875,tolist
80876,res = df.join(pd.DataFrame(df.pop('b').tolist()))
80877,"df = pd.DataFrame({'a':[1,2,3], 'b':[{'c':1}, {'d':3}, {'c':5, 'd':6}]})"
80878,
80879,def joris1(df):
80880,"    return pd.concat([df.drop('b', axis=1), df['b'].apply(pd.Series)], axis=1)"
80881,
80882,def joris2(df):
80883,"    return pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"
80884,
80885,def jpp(df):
80886,    return df.join(pd.DataFrame(df.pop('b').tolist()))
80887,
80888,"df = pd.concat([df]*1000, ignore_index=True)"
80889,
80890,%timeit joris1(df.copy())  # 1.33 s per loop
80891,%timeit joris2(df.copy())  # 7.42 ms per loop
80892,%timeit jpp(df.copy())     # 7.68 ms per loop
80893,">>> df = pd.concat([df['Station ID'], df['Pollutants'].apply(pd.Series)], axis=1)"
80894,>>> print(df)
80895,   Station ID    a    b   c
80896,0        8809   46    3  12
80897,1        8810   36    5   8
80898,2        8811  NaN    2   7
80899,3        8812  NaN  NaN  11
80900,4        8813   82  NaN  15
80901,"df = pd.concat([df['a'], df.b.apply(pd.Series)], axis=1)"
80902,"def expand_dataframe(dw: pd.DataFrame, column_to_expand: str) -> pd.DataFrame:"
80903,"    """""""
80904,    dw: DataFrame with some column which contain a dict to expand
80905,        in columns
80906,    column_to_expand: String with column name of dw
80907,"    """""""
80908,    import pandas as pd
80909,
80910,    def convert_to_dict(sequence: str) -> Dict:
80911,        import json
80912,        s = sequence
80913,"        json_acceptable_string = s.replace(""'"", ""\"""")"
80914,        d = json.loads(json_acceptable_string)
80915,        return d    
80916,
80917,"    expanded_dataframe = pd.concat([dw.drop([column_to_expand], axis=1),"
80918,                                    dw[column_to_expand]
80919,                                    .apply(convert_to_dict)
80920,"                                    .apply(pd.Series)],"
80921,                                    axis=1)
80922,    return expanded_dataframe
80923,"my_df = pd.DataFrame.from_dict(my_dict, orient='index', columns=['my_col'])"
80924,None
80925,f
80926,[f(x) for x in xs if x is not None else '']
80927,[f(x) if x is not None else '' for x in xs]
80928,[f(x) if condition else g(x) for x in sequence]
80929,if
80930,[f(x) for x in sequence if condition]
80931,if
80932,for…in
80933,?:
80934,value = 123
80935,"print(value, 'is', 'even' if value % 2 == 0 else 'odd')"
80936,"l = [ 2, 3, 4, 5]"
80937,[x if x % 2 == 0 for x in l]
80938,[x if x % 2 == 0 else 200 for x in l]
80939,[ x for x in l if x % 2 == 0]
80940,[x for x in range(50) if (x%3)==0]
80941,[x if (x%3)==0 for x in range(50)]
80942,x if (x%3)==0
80943,[x for x in range(50) if ((x%3)==0 if x>20 else False)]
80944,"X = [1.5, 2.3, 4.4, 5.4, 'n', 1.5, 5.1, 'a']     # Original list"
80945,
80946,# Extract non-strings from X to new list
80947,"X_non_str = [el for el in X if not isinstance(el, str)]  # When using only 'if', put 'for' in the beginning"
80948,
80949,"# Change all strings in X to 'b', preserve everything else as is"
80950,"X_str_changed = ['b' if isinstance(el, str) else el for el in X]  # When using 'if' and 'else', put 'for' in the end"
80951,X_non_str
80952,X_str_changed
80953,if
80954,if/else
80955,"vals = list(range(40)); [val if val % 3 else ""Fizz"" for val in vals if val % 5]"
80956,if/else
80957,new_list
80958,new_list = [expression for item in iterable]
80959,"new_list = [x for x in range(1, 10)]"
80960,"> [1, 2, 3, 4, 5, 6, 7, 8, 9]"
80961,new_list
80962,new_list = [expression for item in iterable if condition == True]
80963,"new_list = [x for x in range(1, 10) if x % 2 == 0]"
80964,"> [2, 4, 6, 8]"
80965,new_list
80966,new_list = [expression for item in iterable if condition == True]
80967,"new_list = [x for x in range(1, 10) if x % 2 == 0 if x % 3 == 0]"
80968,> [6]
80969,if
80970,new_list
80971,"new_list = [x for x in range(1, 10) if x % 2 and x % 3 == 0]"
80972,> [6]
80973,if
80974,new_list = []
80975,"for x in range(1, 10):"
80976,    if x % 2 == 0 and x % 3 == 0:
80977,        new_list.append(x)
80978,> [6]
80979,or
80980,new_list
80981,"new_list = [x for x in range(1, 10) if x % 2 == 0 or x % 3 == 0]"
80982,"> [2, 3, 4, 6, 8, 9]"
80983,<Exp1> if condition else <Exp2>
80984,condition
80985,condition
80986,True
80987,<Exp1>
80988,condition
80989,False
80990,<Exp2>
80991,<Exp1> if condition else <Exp2> if condition else <Exp3>...    
80992,age = 12
80993,s = 'minor' if age < 21 else 'adult'
80994,> minor
80995,s
80996,age
80997,new_list = [<Conditional Expression> for <item> in <iterable>]
80998,
80999,new_list = [<Exp1> if condition else <Exp2> if condition else <Exp3> for <item> in <iterable>]
81000,'even'
81001,'number three'
81002,'odd'
81003,new_list = ['even' if x % 2 == 0 else 'number three' if x == 3 else 'odd' 
81004,"             for x in range(1, 10)]"
81005,"> ['odd', 'even', 'number three', 'even', 'odd', 'even', 'odd', 'even', 'odd']"
81006,[f(x) for x in xs if x is not None else '']
81007,for x in xs
81008,[f(x) if x is not None else '' for x in xs]
81009,Guzman Ojero
81010,def change(x):
81011,    if x is None:
81012,        return f(x)
81013,    else:
81014,        return ''
81015,
81016,result = [change(x) for x in xs]
81017,"result = map(change, xs)"
81018,if
81019,else
81020,">>> print("", "".join([""ha"" if i else ""Ha"" for i in range(3)]) + ""!"")"
81021,"Ha, ha, ha!"
81022,if i
81023,False
81024,0
81025,True
81026,range()
81027,">>> [""ha"" if i else ""Ha"" for i in range(3)]"
81028,"['Ha', 'ha', 'ha']"
81029,if
81030,else
81031,"xs = [None, 'This', 'is', 'a', 'filler', 'test', 'string', None]"
81032,
81033,"d = {None: '', 'filler': 'manipulated'}"
81034,
81035,"res = [d.get(x, x) for x in xs]"
81036,
81037,print(res)
81038,
81039,"['', 'This', 'is', 'a', 'manipulated', 'test', 'string', '']"
81040,[f(x) if x != None else '' for x in xs]
81041,[item if condition else item for item in items]
81042,[f(item) if condition else value for item in items]
81043,[item if condition for item in items]
81044,[value if condition else value1 if condition1 else value2]
81045,[value if condition else value1 if condition1 else value2]
81046,[ expression for item in list if conditional ]
81047,for item in list:
81048,    if conditional:
81049,        expression
81050,expression
81051,[x+1 for x in l if x >= 45]
81052,for x in l:
81053,    if x >= 45:
81054,        x+1
81055,[x+1 if x >= 45 else x+5 for x in l]
81056,expression
81057,for x in l:
81058,    if x>=45: x+1
81059,    else: x+5
81060,[expression1(item)                                        for item in iterable]
81061,
81062,[expression1(item) if conditional1                        for item in iterable]
81063,
81064,[expression1(item) if conditional1 else expression2(item) for item in iterable]
81065,
81066,[expression1(item) if conditional1 else expression2(item) for item in iterable if conditional2]
81067,item
81068,conditional3
81069,newlist = [s for s in firstlist if s.strip()]
81070,this if condition else that
81071,value = this if condition
81072,value = this if condition else None
81073,row = [unicode((x or '').strip()) for x in row]
81074, ps = PorterStemmer()
81075, stop_words_english = stopwords.words('english')
81076," best = sorted(word_scores.items(), key=lambda x: x[1], reverse=True)[:10000]"
81077," bestwords = set([w for w, s in best])"
81078,
81079,
81080, def best_word_feats(words):
81081,"   return dict([(word, True) for word in words if word in bestwords])"
81082,
81083, # with stemmer
81084, def best_word_feats_stem(words):
81085,"   return dict([(ps.stem(word), True) for word in words if word in bestwords])"
81086,
81087, # with stemmer and not stopwords
81088, def best_word_feats_stem_stop(words):
81089,"   return dict([(ps.stem(word), True) for word in words if word in bestwords and word not in stop_words_english])"
81090,# coding=utf-8
81091,
81092,def my_function_get_list():
81093,"    my_list = [0, 1, 2, 3, 4, 5]"
81094,
81095,"    # You may use map() to convert each item in the list to a string, "
81096,    # and then join them to print my_list
81097,
81098,"    print(""Affichage de my_list [{0}]"".format(', '.join(map(str, my_list))))"
81099,
81100,    return my_list
81101,
81102,
81103,my_result_list = [
81104,   (
81105,"       number_in_my_list + 4,  # Condition is False : append number_in_my_list + 4 in my_result_list"
81106,       number_in_my_list * 2  # Condition is True : append number_in_my_list * 2 in my_result_list
81107,   )
81108,
81109,   [number_in_my_list % 2 == 0]  # [Condition] If the number in my list is even
81110,
81111,   for number_in_my_list in my_function_get_list()  # For each number in my list
81112,]
81113,
81114,"print(""Affichage de my_result_list [{0}]"".format(', '.join(map(str, my_result_list))))"
81115,"row = [('', unicode(x.strip()))[x is not None] for x in row]"
81116,Displaying / overview of my_result_list
81117,"string.replace(""condition1"", """")"
81118,"string.replace(""condition1"", """").replace(""condition2"", ""text"")"
81119,\1
81120,\2
81121,import re
81122,
81123,"rep = {""condition1"": """", ""condition2"": ""text""} # define desired replacements here"
81124,
81125,# use these three lines to do the replacement
81126,"rep = dict((re.escape(k), v) for k, v in rep.iteritems()) "
81127,#Python 3 renamed dict.iteritems to dict.items so use rep.items() for latest versions
81128,"pattern = re.compile(""|"".join(rep.keys()))"
81129,"text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)"
81130,">>> pattern.sub(lambda m: rep[re.escape(m.group(0))], ""(condition1) and --condition2--"")"
81131,'() and --text--'
81132,"""spamham sha"".replace(""spam"", ""eggs"").replace(""sha"",""md5"")"
81133,"""eggmd5m md5"""
81134,"""eggsham md5"""
81135,"def replace_all(text, dic):"
81136,"    for i, j in dic.iteritems():"
81137,"        text = text.replace(i, j)"
81138,    return text
81139,text
81140,dic
81141,iteritems()
81142,items()
81143,"d = { ""cat"": ""dog"", ""dog"": ""pig""}"
81144,"my_sentence = ""This is my cat and this is my dog."""
81145,"replace_all(my_sentence, d)"
81146,print(my_sentence)
81147,from collections import OrderedDict
81148,"def replace_all(text, dic):"
81149,"    for i, j in dic.items():"
81150,"        text = text.replace(i, j)"
81151,    return text
81152,"od = OrderedDict([(""cat"", ""dog""), (""dog"", ""pig"")])"
81153,"my_sentence = ""This is my cat and this is my dog."""
81154,"replace_all(my_sentence, od)"
81155,print(my_sentence)
81156,"""This is my pig and this is my pig."""
81157,text
81158,OrderedDict
81159,"s = ""The quick brown fox jumps over the lazy dog"""
81160,"for r in ((""brown"", ""red""), (""lazy"", ""quick"")):"
81161,    s = s.replace(*r)
81162,
81163,#output will be:  The quick red fox jumps over the quick dog
81164,replace
81165,"""abc"""
81166,"((""a"", ""b""), (""b"", ""a""))"
81167,"""bac"""
81168,"""aac"""
81169,O(number of replacements * len(s))
81170,functools.reduce
81171,"reduce(lambda a, e: a.replace(*e), (""ab"",), ""abac"")"
81172,"repls = {'hello' : 'goodbye', 'world' : 'earth'}"
81173,"s = 'hello, world'"
81174,"reduce(lambda a, kv: a.replace(*kv), repls.iteritems(), s)"
81175,"repls = ('hello', 'goodbye'), ('world', 'earth')"
81176,"s = 'hello, world'"
81177,"reduce(lambda a, kv: a.replace(*kv), repls, s)"
81178,repls
81179,iteritems()
81180,"repls = ('hello', 'goodbye'), ('world', 'earth')"
81181,"reduce(lambda a, kv: a.replace(*kv), repls, s)"
81182,reduce
81183,reduce
81184,functools
81185,reduce
81186,import
81187,"def multiple_replace(string, rep_dict):"
81188,"    pattern = re.compile(""|"".join([re.escape(k) for k in sorted(rep_dict,key=len,reverse=True)]), flags=re.DOTALL)"
81189,"    return pattern.sub(lambda x: rep_dict[x.group(0)], string)"
81190,">>>multiple_replace(""Do you like cafe? No, I prefer tea."", {'cafe':'tea', 'tea':'cafe', 'like':'prefer'})"
81191,"'Do you prefer tea? No, I prefer cafe.'"
81192,"rep_dict = {""but"": ""mut"", ""mutton"": ""lamb""}"
81193,"""button"""
81194,"""mutton"""
81195,"""lamb"""
81196,"Do you prefer cafe? No, I prefer cafe."
81197,Python 3.8
81198,:=
81199,"# text = ""The quick brown fox jumps over the lazy dog"""
81200,"# replacements = [(""brown"", ""red""), (""lazy"", ""quick"")]"
81201,"[text := text.replace(a, b) for a, b in replacements]"
81202,# text = 'The quick red fox jumps over the quick dog'
81203,"['The quick red fox jumps over the lazy dog', 'The quick red fox jumps over the quick dog']"
81204,text := text.replace
81205,text
81206,text
81207,text
81208,"[text := text.replace(a, b) for a, b in replacements][-1]"
81209,[-1]
81210,text
81211,import re
81212,
81213,def multiple_replacer(*key_values):
81214,    replace_dict = dict(key_values)
81215,    replacement_function = lambda match: replace_dict[match.group(0)]
81216,"    pattern = re.compile(""|"".join([re.escape(k) for k, v in key_values]), re.M)"
81217,"    return lambda string: pattern.sub(replacement_function, string)"
81218,
81219,"def multiple_replace(string, *key_values):"
81220,    return multiple_replacer(*key_values)(string)
81221,">>> replacements = (u""café"", u""tea""), (u""tea"", u""café""), (u""like"", u""love"")"
81222,">>> print multiple_replace(u""Do you like café? No, I prefer tea."", *replacements)"
81223,"Do you love tea? No, I prefer café."
81224,">>> my_escaper = multiple_replacer(('""','\\""'), ('\t', '\\t'))"
81225,">>> many_many_strings = (u'This text will be escaped by ""my_escaper""',"
81226,"                       u'Does this work?\tYes it does',"
81227,"                       u'And can we span\nmultiple lines?\t""Yes\twe\tcan!""')"
81228,>>> for line in many_many_strings:
81229,...     print my_escaper(line)
81230,... 
81231,"This text will be escaped by \""my_escaper\"""
81232,Does this work?\tYes it does
81233,And can we span
81234,"multiple lines?\t\""Yes\twe\tcan!\"""
81235,pattern.sub
81236,replace_dict
81237,re.M
81238,>>> from string import Template
81239,>>> s = Template('$who likes $what')
81240,">>> s.substitute(who='tim', what='kung pao')"
81241,'tim likes kung pao'
81242,>>> d = dict(who='tim')
81243,>>> Template('Give $who $100').substitute(d)
81244,Traceback (most recent call last):
81245,[...]
81246,"ValueError: Invalid placeholder in string: line 1, col 10"
81247,>>> Template('$who likes $what').substitute(d)
81248,Traceback (most recent call last):
81249,[...]
81250,KeyError: 'what'
81251,>>> Template('$who likes $what').safe_substitute(d)
81252,'tim likes $what'
81253,substitute
81254,a = 'This is a test string.'
81255,"b = {'i': 'I', 's': 'S'}"
81256,"for x,y in b.items():"
81257,"    a = a.replace(x, y)"
81258,>>> a
81259,'ThIS IS a teSt StrIng.'
81260,i
81261,s
81262,"b = [     ['i',  'Z'],     ['s', 'Y'] ]; for x,y in (b):      a = a.replace(x, y)"
81263,"def multireplace(string, replacements):"
81264,"    """""""
81265,"    Given a string and a replacement map, it returns the replaced string."
81266,
81267,    :param str string: string to execute replacements on
81268,    :param dict replacements: replacement dictionary {value to find: value to replace}
81269,    :rtype: str
81270,
81271,"    """""""
81272,    # Place longer ones first to keep shorter substrings from matching
81273,    # where the longer ones should take place
81274,"    # For instance given the replacements {'ab': 'AB', 'abc': 'ABC'} against "
81275,"    # the string 'hey abc', it should produce 'hey ABC' and not 'hey ABc'"
81276,"    substrs = sorted(replacements, key=len, reverse=True)"
81277,
81278,    # Create a big OR regex that matches any of the substrings to replace
81279,"    regexp = re.compile('|'.join(map(re.escape, substrs)))"
81280,
81281,"    # For each match, look up the new string in the replacements"
81282,"    return regexp.sub(lambda match: replacements[match.group(0)], string)"
81283,"def multiple_replace(string, reps, re_flags = 0):"
81284,"    """""" Transforms string, replacing keys from re_str_dict with values."
81285,"    reps: dictionary, or list of key-value pairs (to enforce ordering;"
81286,          earlier items have higher priority).
81287,          Keys are used as regular expressions.
81288,"    re_flags: interpretation of regular expressions, such as re.DOTALL"
81289,"    """""""
81290,"    if isinstance(reps, dict):"
81291,        reps = reps.items()
81292,"    pattern = re.compile(""|"".join(""(?P<_%d>%s)"" % (i, re_str[0])"
81293,"                                  for i, re_str in enumerate(reps)),"
81294,                         re_flags)
81295,"    return pattern.sub(lambda x: reps[int(x.lastgroup[1:])][1], string)"
81296,">>> multiple_replace(""(condition1) and --condition2--"","
81297,"...                  {""condition1"": """", ""condition2"": ""text""})"
81298,'() and --text--'
81299,
81300,">>> multiple_replace('hello, world', {'hello' : 'goodbye', 'world' : 'earth'})"
81301,"'goodbye, earth'"
81302,
81303,">>> multiple_replace(""Do you like cafe? No, I prefer tea."","
81304,"...                  {'cafe': 'tea', 'tea': 'cafe', 'like': 'prefer'})"
81305,"'Do you prefer tea? No, I prefer cafe.'"
81306,">>> s = ""I don't want to change this name:\n  Philip II of Spain"""
81307,">>> re_str_dict = {r'\bI\b': 'You', r'[\n\t ]+': ' '}"
81308,">>> multiple_replace(s, re_str_dict)"
81309,"""You don't want to change this name: Philip II of Spain"""
81310,def escape_keys(d):
81311,"    """""" transform dictionary d by applying re.escape to the keys """""""
81312,"    return dict((re.escape(k), v) for k, v in d.items())"
81313,
81314,">>> multiple_replace(s, escape_keys(re_str_dict))"
81315,"""I don't want to change this name:\n  Philip II of Spain"""
81316,def check_re_list(re_list):
81317,"    """""" Checks if each regular expression in list is well-formed. """""""
81318,"    for i, e in enumerate(re_list):"
81319,        try:
81320,            re.compile(e)
81321,"        except (TypeError, re.error):"
81322,"            print(""Invalid regular expression string """
81323,"                  ""at position {}: '{}'"".format(i, e))"
81324,
81325,>>> check_re_list(re_str_dict.keys())
81326,">>> multiple_replace(""button"", {""but"": ""mut"", ""mutton"": ""lamb""})"
81327,'mutton'
81328,">>> multiple_replace(""button"", [(""button"", ""lamb""),"
81329,"...                             (""but"", ""mut""), (""mutton"", ""lamb"")])"
81330,'lamb'
81331,TypeError: 'dict_items' object is not subscriptable
81332,"source = ""Here is foo, it does moo!"""
81333,
81334,replacements = {
81335,"    'is': 'was', # replace 'is' with 'was'"
81336,"    'does': 'did',"
81337,    '!': '?'
81338,}
81339,
81340,"def replace(source, replacements):"
81341,"    finder = re.compile(""|"".join(re.escape(k) for k in replacements.keys())) # matches every string we want replaced"
81342,    result = []
81343,    pos = 0
81344,    while True:
81345,"        match = finder.search(source, pos)"
81346,        if match:
81347,            # cut off the part up until match
81348,            result.append(source[pos : match.start()])
81349,            # cut off the matched part and replace it in place
81350,            result.append(replacements[source[match.start() : match.end()]])
81351,            pos = match.end()
81352,        else:
81353,            # the rest after the last match
81354,            result.append(source[pos:])
81355,            break
81356,"    return """".join(result)"
81357,
81358,"print replace(source, replacements)"
81359,pandas
81360,replace
81361,"df = pd.DataFrame({'text': ['Billy is going to visit Rome in November', 'I was born in 10/10/2010', 'I will be there at 20:00']})"
81362,
81363,"to_replace=['Billy','Rome','January|February|March|April|May|June|July|August|September|October|November|December', '\d{2}:\d{2}', '\d{2}/\d{2}/\d{4}']"
81364,"replace_with=['name','city','month','time', 'date']"
81365,
81366,"print(df.text.replace(to_replace, replace_with, regex=True))"
81367,0    name is going to visit city in month
81368,1                      I was born in date
81369,2                 I will be there at time
81370,string.replace
81371,    from flashtext import KeywordProcessor
81372,    self.processor = KeywordProcessor(case_sensitive=False)
81373,"    for k, v in self.my_dict.items():"
81374,"        self.processor.add_keyword(k, v)"
81375,    new_string = self.processor.replace_keywords(string)
81376,<p>
81377,/n
81378,<
81379,>
81380,"dictionary = {1: ['hate', 'love'],"
81381,"              2: ['salad', 'burger'],"
81382,"              3: ['vegetables', 'pizza']}"
81383,
81384,def normalize(text):
81385,    for i in dictionary:
81386,"        text = text.replace(dictionary[i][0], dictionary[i][1])"
81387,    return text
81388,string_to_change = 'I hate salad and vegetables'
81389,print(normalize(string_to_change))
81390,">>> mrep = lambda s, d: s if not d else mrep(s.replace(*d.popitem()), d)"
81391,">>> mrep('abcabc', {'a': '1', 'c': '2'})"
81392,'1b21b2'
81393,">>> mrep = lambda s, d: s if not d else mrep(s.replace(*d.pop()), d)"
81394,">>> mrep('abcabc', [('a', '1'), ('c', '2')])"
81395,sys.getrecursionlimit()
81396,"REPLACEMENTS = {'<': '&lt;', '>': '&gt;', '&': '&amp;'}"
81397,
81398,"event_title = ''.join([REPLACEMENTS.get(c,c) for c in event['summary']])"
81399,">>> replacements = {'cond1':'text1', 'cond2':'text2'}"
81400,>>> cmd = 'answer = s'
81401,">>> for k,v in replacements.iteritems():"
81402,">>>     cmd += "".replace(%s, %s)"" %(k,v)"
81403,>>> exec(cmd)
81404,answer
81405,translate
81406,str.maketrans
81407,result_string = your_string.translate(str.maketrans(dict_mapping))
81408,my_string = 'This is a test string.'
81409,"dict_mapping = {'i': 's', 's': 'S'}"
81410,result_good = my_string.translate(str.maketrans(dict_mapping))
81411,result_bad = my_string
81412,"for x, y in dict_mapping.items():"
81413,"    result_bad = result_bad.replace(x, y)"
81414,print(result_good)  # ThsS sS a teSt Strsng.
81415,print(result_bad)   # ThSS SS a teSt StrSng.
81416,"reduce(lambda a, b: a.replace(*b)"
81417,"    , [('o','W'), ('t','X')] #iterable of pairs: (oldval, newval)"
81418,"    , 'tomato' #The string from which to replace values"
81419,    )
81420,import glob
81421,import re
81422,
81423,"mapfile = input(""Enter map file name with extension eg. codifica.txt: "")"
81424,"sep = input(""Enter map file column separator eg. |: "")"
81425,"mask = input(""Enter search mask with extension eg. 2010*txt for all files to be processed: "")"
81426,"suff = input(""Enter suffix with extension eg. _NEW.txt for newly generated files: "")"
81427,
81428,rep = {} # creation of empy dictionary
81429,
81430,"with open(mapfile) as temprep: # loading of definitions in the dictionary using input file, separator is prompted"
81431,    for line in temprep:
81432,"        (key, val) = line.strip('\n').split(sep)"
81433,        rep[key] = val
81434,
81435,for filename in glob.iglob(mask): # recursion on all the files with the mask prompted
81436,
81437,"    with open (filename, ""r"") as textfile: # load each file in the variable text"
81438,        text = textfile.read()
81439,
81440,        # start replacement
81441,"        #rep = dict((re.escape(k), v) for k, v in rep.items()) commented to enable the use in the mapping of re reserved characters"
81442,"        pattern = re.compile(""|"".join(rep.keys()))"
81443,"        text = pattern.sub(lambda m: rep[m.group(0)], text)"
81444,
81445,        #write of te output files with the prompted suffice
81446,"        target = open(filename[:-4]+""_NEW.txt"", ""w"")"
81447,        target.write(text)
81448,        target.close()
81449,"def mass_replace(text, dct):"
81450,"    new_string = """""
81451,    old_string = text
81452,    while len(old_string) > 0:
81453,"        s = """""
81454,"        sk = """""
81455,        for k in dct.keys():
81456,            if old_string.startswith(k):
81457,                s = dct[k]
81458,                sk = k
81459,        if s:
81460,            new_string+=s
81461,            old_string = old_string[len(sk):]
81462,        else:
81463,            new_string+=old_string[0]
81464,            old_string = old_string[1:]
81465,    return new_string
81466,
81467,"print mass_replace(""The dog hunts the cat"", {""dog"":""cat"", ""cat"":""dog""})"
81468,The cat hunts the dog
81469,"error_list = ['[br]', '[ex]', 'Something']"
81470,"words = ['how', 'much[ex]', 'is[br]', 'the', 'fish[br]', 'noSomething', 'really']"
81471,"words = ['how', 'much', 'is', 'the', 'fish', 'no', 'really']"
81472,"[n[0][0] if len(n[0]) else n[1] for n in [[[w.replace(e,"""") for e in error_list if e in w],w] for w in words]] "
81473,"remove_words = {""we"", ""this""}"
81474,"target_sent = ""we should modify this string"""
81475,target_sent_words = target_sent.split()
81476,"filtered_sent = "" "".join(list(filter(lambda word: word not in remove_words, target_sent_words)))"
81477,filtered_sent
81478,'should modify string'
81479,import re
81480,
81481,class StringReplacer:
81482,
81483,"    def __init__(self, replacements, ignore_case=False):"
81484,"        patterns = sorted(replacements, key=len, reverse=True)"
81485,        self.replacements = [replacements[k] for k in patterns]
81486,        re_mode = re.IGNORECASE if ignore_case else 0
81487,"        self.pattern = re.compile('|'.join((""({})"".format(p) for p in patterns)), re_mode)"
81488,        def tr(matcher):
81489,"            index = next((index for index,value in enumerate(matcher.groups()) if value), None)"
81490,            return self.replacements[index]
81491,        self.tr = tr
81492,
81493,"    def __call__(self, string):"
81494,"        return self.pattern.sub(self.tr, string)"
81495,table = {
81496,"    ""aaa""    : ""[This is three a]"","
81497,"    ""b+""     : ""[This is one or more b]"","
81498,"    r""<\w+>"" : ""[This is a tag]"""
81499,}
81500,
81501,"replacer = StringReplacer(table, True)"
81502,
81503,"sample1 = ""whatever bb, aaa, <star> BBB <end>"""
81504,
81505,print(replacer(sample1))
81506,
81507,# output: 
81508,"# whatever [This is one or more b], [This is three a], [This is a tag] [This is one or more b] [This is a tag]"
81509,"index = next((index for index,value in enumerate(matcher.groups()) if value), None)"
81510,for line in to_read:
81511,    read_buffer = line              
81512,"    stripped_buffer1 = read_buffer.replace(""term1"", "" "")"
81513,"    stripped_buffer2 = stripped_buffer1.replace(""term2"", "" "")"
81514,    write_to_file = to_write.write(stripped_buffer2)
81515,"listA=""The cat jumped over the house"".split()"
81516,"modify = {word:word for number,word in enumerate(listA)}"
81517,"modify[""cat""],modify[""jumped""]=""dog"",""walked"""
81518,"print "" "".join(modify[x] for x in listA)"
81519,sentence='its some sentence with a something text'
81520,
81521,"def replaceAll(f,Array1,Array2):"
81522,    if len(Array1)==len(Array2):
81523,        for x in range(len(Array1)):
81524,"            return f.replace(Array1[x],Array2[x])"
81525,
81526,"newSentence=replaceAll(sentence,['a','sentence','something'],['another','sentence','something something'])"
81527,
81528,print(newSentence)
81529,import flask
81530,
81531,app = flask.Flask(__name__)
81532,import gevent.pywsgi
81533,
81534,"app_server = gevent.pywsgi.WSGIServer((host, port), app)"
81535,app_server.serve_forever()
81536,gevent.pywsgi.WSGIServer
81537,app_server.serve_forever()
81538,app_server.stop()
81539,localhost:port
81540,and
81541,or
81542,and
81543,or
81544,>>> def fun(i):
81545,"...     print ""executed"""
81546,...     return i
81547,... 
81548,and
81549,or
81550,>>> fun(1)
81551,executed
81552,1
81553,">>> 1 or fun(1)    # due to short-circuiting  ""executed"" not printed"
81554,1
81555,">>> 1 and fun(1)   # fun(1) called and ""executed"" printed "
81556,executed
81557,1
81558,">>> 0 and fun(1)   # due to short-circuiting  ""executed"" not printed "
81559,0
81560,"        False    None    0    """"    ()    []     {}"
81561,any()
81562,all()
81563,any()
81564,all()
81565,any()
81566,">>> any(fun(i) for i in [1, 2, 3, 4])   # bool(1) = True"
81567,executed
81568,True
81569,">>> any(fun(i) for i in [0, 2, 3, 4])   "
81570,executed                               # bool(0) = False
81571,executed                               # bool(2) = True
81572,True
81573,">>> any(fun(i) for i in [0, 0, 3, 4])"
81574,executed
81575,executed
81576,executed
81577,True
81578,all()
81579,">>> all(fun(i) for i in [0, 0, 3, 4])"
81580,executed
81581,False
81582,">>> all(fun(i) for i in [1, 0, 3, 4])"
81583,executed
81584,executed
81585,False
81586,x < y <= z
81587,x < y and y <= z
81588,y
81589,z
81590,x < y
81591,>>> 5 > 6 > fun(3)    # same as:  5 > 6 and 6 > fun(3)
81592,"False                 # 5 > 6 is False so fun() not called and ""executed"" NOT printed"
81593,>>> 5 < 6 > fun(3)    # 5 < 6 is True 
81594,"executed              # fun(3) called and ""executed"" printed"
81595,True
81596,>>> 4 <= 6 > fun(7)   # 4 <= 6 is True  
81597,"executed              # fun(3) called and ""executed"" printed"
81598,False
81599,">>> 5 < fun(6) < 3    # only prints ""executed"" once"
81600,executed
81601,False
81602,">>> 5 < fun(6) and fun(6) < 3 # prints ""executed"" twice, because the second part executes it again"
81603,executed
81604,executed
81605,False
81606,and
81607,or
81608,True
81609,False
81610,x and y
81611,"if x is false, then x, else y"
81612,&&
81613,||
81614,>>> 3 and 5    # Second operand evaluated and returned 
81615,5                   
81616,>>> 3  and ()
81617,()
81618,>>> () and 5   # Second operand NOT evaluated as first operand () is  false
81619,()             # so first operand returned 
81620,or
81621,bool(value)
81622,True
81623,>>> 2 or 5    # left most operand bool(2) == True
81624,2    
81625,>>> 0 or 5    # bool(0) == False and bool(5) == True
81626,5
81627,>>> 0 or ()
81628,()
81629,'<Unknown>'
81630,In [171]: name = raw_input('Enter Name: ') or '<Unknown>'
81631,Enter Name: 
81632,
81633,In [172]: name
81634,Out[172]: '<Unknown>'
81635,raw_input
81636,'<Unknown>'
81637,name
81638,0
81639,0
81640,0.0
81641,0j
81642,decimal.Decimal(0)
81643,fractions.Fraction(0)
81644,0
81645,b''
81646,u''
81647,set()
81648,frozenset()
81649,__bool__
81650,__nonzero__
81651,__len__
81652,>>>False and 3/0
81653,False
81654,>>>True and 3/0
81655,ZeroDivisionError: integer division or modulo by zero
81656,>>>True or 3/0
81657,True
81658,>>>False or 3/0
81659,ZeroDivisionError: integer division or modulo by zero
81660,def a(x):
81661,    print('a')
81662,    return x
81663,
81664,def b(x):
81665,    print('b')
81666,    return x 
81667,if(a(True) and b(True)):
81668,"    print(1,end='\n\n')"
81669,
81670,if(a(False) and b(True)):
81671,"    print(2,end='\n\n') "
81672,a
81673,b
81674,1
81675,
81676,a 
81677,if(a(True) or b(False)):
81678,"    print(3,end='\n\n')"
81679,
81680,if(a(False) or b(True)):
81681,"    print(4,end='\n\n') "
81682,a
81683,3
81684,
81685,a
81686,b
81687,4 
81688,$ python myapp.py command1
81689,myapp/
81690,    __init__.py
81691,    commands/
81692,        __init__.py
81693,        command1.py
81694,        command2.py
81695,    foo.py
81696,    bar.py
81697,__import__()
81698,"__import__(name, globals=None, locals=None, fromlist=(), level=0)"
81699,name
81700,globals
81701,locals
81702,fromlist
81703,name
81704,command = sys.argv[1]
81705,try:
81706,"    command_module = __import__(""myapp.commands.%s"" % command, fromlist=[""myapp.commands""])"
81707,except ImportError:
81708,    # Display error message
81709,
81710,command_module.run()
81711,dir(__import__)
81712,importlib
81713,importlib.import_module
81714,exec
81715,__import__
81716,">>> moduleNames = ['sys', 'os', 're', 'unittest'] "
81717,>>> moduleNames
81718,"['sys', 'os', 're', 'unittest']"
81719,">>> modules = map(__import__, moduleNames)"
81720,__import__
81721,imp
81722,foreach
81723,for element in
81724,map()
81725,importlib
81726,importlib.import_module(
81727,"name, package=None)"
81728,pkg.mod
81729,..mod
81730,"import_module('..mod', 'pkg.subpkg')"
81731,pkg.mod
81732,my_module = importlib.import_module('os.path')
81733,__import__
81734,os.path
81735,from os.path import *
81736,globals().update(my_module.__dict)
81737,"imp.load_source(name, path)"
81738,"imp.load_compiled(name, path)"
81739,import imp
81740,import os
81741,
81742,def load_from_file(filepath):
81743,    class_inst = None
81744,    expected_class = 'MyClass'
81745,
81746,"    mod_name,file_ext = os.path.splitext(os.path.split(filepath)[-1])"
81747,
81748,    if file_ext.lower() == '.py':
81749,"        py_mod = imp.load_source(mod_name, filepath)"
81750,
81751,    elif file_ext.lower() == '.pyc':
81752,"        py_mod = imp.load_compiled(mod_name, filepath)"
81753,
81754,"    if hasattr(py_mod, expected_class):"
81755,"        class_inst = getattr(py_mod, expected_class)()"
81756,
81757,    return class_inst
81758,expected_class
81759,"class_inst = getattr(py_mod,expected_name)()"
81760,import sys
81761,import importlib.util
81762,
81763,file_path = 'pluginX.py'
81764,module_name = 'pluginX'
81765,
81766,"spec = importlib.util.spec_from_file_location(module_name, file_path)"
81767,module = importlib.util.module_from_spec(spec)
81768,spec.loader.exec_module(module)
81769,
81770,# check if it's all there..
81771,def bla(mod):
81772,    print(dir(mod))
81773,bla(module)
81774,hello
81775,pluginX.py
81776,module
81777,module.hello()
81778,hello
81779,module
81780,pluginX
81781,sys.modules[module_name] = module
81782,
81783,from pluginX import hello
81784,hello()
81785,pluginX/__init__.py
81786,import importlib
81787,
81788,pkg = importlib.import_module('pluginX')
81789,
81790,# check if it's all there..
81791,def bla(mod):
81792,    print(dir(mod))
81793,bla(pkg)
81794,sys.modules[module_name] = module
81795,import module_name
81796,__import__()
81797,>>> mod = 'sys'
81798,>>> locals()['my_module'] = __import__(mod)
81799,>>> my_module.version
81800,"'2.6.6 (r266:84297, Aug 24 2010, 18:46:32) [MSC v.1500 32 bit (Intel)]'"
81801,globals()
81802,locals()
81803,exec
81804,"exec(""import myapp.commands.%s"" % command)"
81805,as command_module
81806,command_module.run()
81807,import os
81808,import imp
81809,
81810,"def importFromURI(uri, absl):"
81811,    mod = None
81812,    if not absl:
81813,"        uri = os.path.normpath(os.path.join(os.path.dirname(__file__), uri))"
81814,"    path, fname = os.path.split(uri)"
81815,"    mname, ext = os.path.splitext(fname)"
81816,
81817,"    if os.path.exists(os.path.join(path,mname)+'.pyc'):"
81818,        try:
81819,"            return imp.load_compiled(mname, uri)"
81820,        except:
81821,            pass
81822,"    if os.path.exists(os.path.join(path,mname)+'.py'):"
81823,        try:
81824,"            return imp.load_source(mname, uri)"
81825,        except:
81826,            pass
81827,
81828,    return mod
81829,>>>import imp; 
81830,">>>fp, pathname, description = imp.find_module(""/home/test_module""); "
81831,">>>test_module = imp.load_module(""test_module"", fp, pathname, description);"
81832,>>>print test_module.print_hello();
81833,python -c '<above entire code in one line>'
81834,"import sys, glob"
81835,sys.path.append('/home/marc/python/importtest/modus')
81836,fl = glob.glob('modus/*.py')
81837,modulist = []
81838,adapters=[]
81839,for i in range(len(fl)):
81840,    fl[i] = fl[i].split('/')[1]
81841,    fl[i] = fl[i][0:(len(fl[i])-3)]
81842,"    modulist.append(getattr(__import__(fl[i]),fl[i]))"
81843,    adapters.append(modulist[i]())
81844,class modu1():
81845,    def __init__(self):
81846,        self.x=1
81847,        print self.x
81848,fl
81849,__import__
81850,fl[i]
81851,to_datetime
81852,"raw_data['Mycol'] =  pd.to_datetime(raw_data['Mycol'], format='%d%b%Y:%H:%M:%S.%f')"
81853,format
81854,to_datetime
81855,SettingWithCopyWarning
81856,infer_datetime_format=True
81857,"df[[""col1"", ""col2"", ""col3""]] = df[[""col1"", ""col2"", ""col3""]].apply(pd.to_datetime)"
81858,"states_df[['from_datetime','to_datetime','timestamp']].apply(lambda _: pd.to_datetime(_,format='%Y-%m-%d %H:%M:%S.%f', errors='coerce'))"
81859,.apply()
81860,">>> df = pd.DataFrame(['05SEP2014:00:00:00.000'],columns=['Mycol'])"
81861,>>> df
81862,                    Mycol
81863,0  05SEP2014:00:00:00.000
81864,>>> import datetime as dt
81865,>>> df['Mycol'] = df['Mycol'].apply(lambda x: 
81866,"                                    dt.datetime.strptime(x,'%d%b%Y:%H:%M:%S.%f'))"
81867,>>> df
81868,       Mycol
81869,0 2014-09-05
81870,to_datetime
81871,infer_datetime_format=True
81872,import pandas as pd
81873,"raw_data['Mycol'] =  pd.to_datetime(raw_data['Mycol'], infer_datetime_format=True)"
81874,infer_datetime_format=True
81875,"raw_data['Mycol'] =  pd.to_datetime(raw_data['Mycol'], format='%d%b%Y:%H:%M:%S.%f')"
81876,".loc[row_indexer,col_indexer] = value"
81877,raw_data['Mycol'] =  pd.to_datetime(raw_data['Mycol'])
81878,raw_data['Mycol']=raw_data['Mycol'].astype('datetime64[ns]')
81879,Entry
81880,validate=True
81881,validatecommand=command
81882,validatecommand
81883,Entry
81884,KeyPress
81885,Cut
81886,Paste
81887,Entry
81888,FocusOut
81889,validatecommand
81890,True
81891,False
81892,import tkinter as tk  # python 3.x
81893,# import Tkinter as tk # python 2.x
81894,
81895,class Example(tk.Frame):
81896,
81897,"    def __init__(self, parent):"
81898,"        tk.Frame.__init__(self, parent)"
81899,
81900,        # valid percent substitutions (from the Tk entry man page)
81901,        # note: you only have to register the ones you need; this
81902,        # example registers them all for illustrative purposes
81903,        #
81904,"        # %d = Type of action (1=insert, 0=delete, -1 for others)"
81905,"        # %i = index of char string to be inserted/deleted, or -1"
81906,        # %P = value of the entry if the edit is allowed
81907,        # %s = value of entry prior to editing
81908,"        # %S = the text string being inserted or deleted, if any"
81909,        # %v = the type of validation that is currently set
81910,        # %V = the type of validation that triggered the callback
81911,"        #      (key, focusin, focusout, forced)"
81912,        # %W = the tk name of the widget
81913,
81914,"        vcmd = (self.register(self.onValidate),"
81915,"                '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')"
81916,"        self.entry = tk.Entry(self, validate=""key"", validatecommand=vcmd)"
81917,"        self.text = tk.Text(self, height=10, width=40)"
81918,"        self.entry.pack(side=""top"", fill=""x"")"
81919,"        self.text.pack(side=""bottom"", fill=""both"", expand=True)"
81920,
81921,"    def onValidate(self, d, i, P, s, S, v, V, W):"
81922,"        self.text.delete(""1.0"", ""end"")"
81923,"        self.text.insert(""end"",""OnValidate:\n"")"
81924,"        self.text.insert(""end"",""d='%s'\n"" % d)"
81925,"        self.text.insert(""end"",""i='%s'\n"" % i)"
81926,"        self.text.insert(""end"",""P='%s'\n"" % P)"
81927,"        self.text.insert(""end"",""s='%s'\n"" % s)"
81928,"        self.text.insert(""end"",""S='%s'\n"" % S)"
81929,"        self.text.insert(""end"",""v='%s'\n"" % v)"
81930,"        self.text.insert(""end"",""V='%s'\n"" % V)"
81931,"        self.text.insert(""end"",""W='%s'\n"" % W)"
81932,
81933,        # Disallow anything but lowercase letters
81934,        if S == S.lower():
81935,            return True
81936,        else:
81937,            self.bell()
81938,            return False
81939,
81940,"if __name__ == ""__main__"":"
81941,    root = tk.Tk()
81942,"    Example(root).pack(fill=""both"", expand=True)"
81943,    root.mainloop()
81944,register
81945,from tkinter import *
81946,
81947,root = Tk()
81948,
81949,"def testVal(inStr,acttyp):"
81950,    if acttyp == '1': #insert
81951,        if not inStr.isdigit():
81952,            return False
81953,    return True
81954,
81955,"entry = Entry(root, validate=""key"")"
81956,"entry['validatecommand'] = (entry.register(testVal),'%P','%d')"
81957,entry.pack()
81958,
81959,root.mainloop()
81960,entry.configure(validatecommand=...)
81961,test_val
81962,testVal
81963,"""."".isdigit()"
81964,False
81965,Tkinter.StringVar
81966,Entry
81967,StringVar
81968,trace
81969,Entry
81970,try:
81971,    from tkinter import *
81972,except ImportError:
81973,    from Tkinter import *  # Python 2
81974,
81975,
81976,root = Tk()
81977,sv = StringVar()
81978,
81979,def validate_float(var):
81980,    new_value = var.get()
81981,    try:
81982,        new_value == '' or float(new_value)
81983,        validate_float.old_value = new_value
81984,    except:
81985,        var.set(validate_float.old_value)
81986,
81987,validate_float.old_value = ''  # Define function attribute.
81988,
81989,"# trace wants a callback with nearly useless parameters, fixing with lambda."
81990,"sv.trace('w', lambda nm, idx, mode, var=sv: validate_float(var))"
81991,"ent = Entry(root, textvariable=sv)"
81992,ent.pack()
81993,ent.focus_set()
81994,
81995,root.mainloop()
81996,validate
81997,validatecommand
81998,import tkinter as tk
81999,
82000,
82001,def validator(P):
82002,"    """"""Validates the input."
82003,
82004,    Args:
82005,        P (int): the value the text would have after the change.
82006,
82007,    Returns:
82008,"        bool: True if the input is digit-only or empty, and False otherwise."
82009,"    """""""
82010,
82011,"    return P.isdigit() or P == """""
82012,
82013,
82014,root = tk.Tk()
82015,
82016,entry = tk.Entry(root)
82017,entry.configure(
82018,"    validate=""key"","
82019,    validatecommand=(
82020,"        root.register(validator),"
82021,"        ""%P"","
82022,"    ),"
82023,)
82024,entry.grid()
82025,
82026,root.mainloop()
82027,#! /usr/bin/env python3
82028,# https://stackoverflow.com/questions/4140437
82029,import enum
82030,import inspect
82031,import tkinter
82032,from tkinter.constants import *
82033,
82034,
82035,"Mode = enum.Enum('Mode', 'none key focus focusin focusout all')"
82036,"CAST = dict(d=int, i=int, P=str, s=str, S=str,"
82037,"            v=Mode.__getitem__, V=Mode.__getitem__, W=str)"
82038,
82039,
82040,"def on_validate(widget, mode, validator):"
82041,    # http://www.tcl.tk/man/tcl/TkCmd/ttk_entry.htm#M39
82042,    if mode not in Mode:
82043,        raise ValueError('mode not recognized')
82044,    parameters = inspect.signature(validator).parameters
82045,    if not set(parameters).issubset(CAST):
82046,        raise ValueError('validator arguments not recognized')
82047,"    casts = tuple(map(CAST.__getitem__, parameters))"
82048,"    widget.configure(validate=mode.name, validatecommand=[widget.register("
82049,"        lambda *args: bool(validator(*(cast(arg) for cast, arg in zip("
82050,"            casts, args)))))]+['%' + parameter for parameter in parameters])"
82051,
82052,
82053,class Example(tkinter.Frame):
82054,
82055,    @classmethod
82056,    def main(cls):
82057,        tkinter.NoDefaultRoot()
82058,        root = tkinter.Tk()
82059,        root.title('Validation Example')
82060,        cls(root).grid(sticky=NSEW)
82061,"        root.grid_rowconfigure(0, weight=1)"
82062,"        root.grid_columnconfigure(0, weight=1)"
82063,        root.mainloop()
82064,
82065,"    def __init__(self, master, **kw):"
82066,"        super().__init__(master, **kw)"
82067,        self.entry = tkinter.Entry(self)
82068,"        self.text = tkinter.Text(self, height=15, width=50,"
82069,"                                 wrap=WORD, state=DISABLED)"
82070,"        self.entry.grid(row=0, column=0, sticky=NSEW)"
82071,"        self.text.grid(row=1, column=0, sticky=NSEW)"
82072,"        self.grid_rowconfigure(1, weight=1)"
82073,"        self.grid_columnconfigure(0, weight=1)"
82074,"        on_validate(self.entry, Mode.key, self.validator)"
82075,
82076,"    def validator(self, d, i, P, s, S, v, V, W):"
82077,        self.text['state'] = NORMAL
82078,"        self.text.delete(1.0, END)"
82079,"        self.text.insert(END, 'd = {!r}\ni = {!r}\nP = {!r}\ns = {!r}\n'"
82080,                              'S = {!r}\nv = {!r}\nV = {!r}\nW = {!r}'
82081,"                         .format(d, i, P, s, S, v, V, W))"
82082,        self.text['state'] = DISABLED
82083,        return not S.isupper()
82084,
82085,
82086,if __name__ == '__main__':
82087,    Example.main()
82088,import tkinter
82089,tk=tkinter.Tk()
82090,def only_numeric_input(e):
82091,    #this is allowing all numeric input
82092,    if e.isdigit():
82093,        return True
82094,    #this will allow backspace to work
82095,"    elif e=="""":"
82096,        return True
82097,    else:
82098,        return False
82099,#this will make the entry widget on root window
82100,e1=tkinter.Entry(tk)
82101,#arranging entry widget on screen
82102,"e1.grid(row=0,column=0)"
82103,c=tk.register(only_numeric_input)
82104,"e1.configure(validate=""key"",validatecommand=(c,'%P'))"
82105,tk.mainloop()
82106,#very usefull for making app like calci
82107,from tkinter import *
82108,
82109,root = Tk()
82110,
82111,def validate(P):
82112,    if len(P) == 0 or len(P) <= 10 and P.isdigit():  # 10 characters
82113,        return True
82114,    else:
82115,        return False
82116,
82117,"ent = Entry(root, validate=""key"", validatecommand=(root.register(validate), '%P'))"
82118,ent.pack()
82119,
82120,root.mainloop()
82121,Entry
82122,StringVar
82123,StringVar
82124,try:
82125,    from tkinter import *
82126,except ImportError:
82127,    from Tkinter import *  # Python 2
82128,
82129,
82130,class ValidateFloatVar(StringVar):
82131,"    """"""StringVar subclass that only allows valid float values to be put in it."""""""
82132,
82133,"    def __init__(self, master=None, value=None, name=None):"
82134,"        StringVar.__init__(self, master, value, name)"
82135,        self._old_value = self.get()
82136,"        self.trace('w', self._validate)"
82137,
82138,"    def _validate(self, *_):"
82139,        new_value = self.get()
82140,        try:
82141,            new_value == '' or float(new_value)
82142,            self._old_value = new_value
82143,        except ValueError:
82144,"            StringVar.set(self, self._old_value)"
82145,
82146,
82147,root = Tk()
82148,"ent = Entry(root, textvariable=ValidateFloatVar(value=42.0))"
82149,ent.pack()
82150,ent.focus_set()
82151,ent.icursor(END)
82152,
82153,root.mainloop()
82154,StringVar
82155,Widget.after_idle()
82156,after_idle()
82157,class ValidatedEntry(Entry):
82158,"    def __init__(self, *args, **kwargs):"
82159,"        super().__init__(*args, **kwargs)"
82160,
82161,"        self.tclValidate = (self.register(self.validate), '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')"
82162,        # attach the registered validation function to this spinbox
82163,"        self.config(validate = ""all"", validatecommand = self.tclValidate)"
82164,
82165,"    def validate(self, type, index, result, prior, indelText, currentValidationMode, reason, widgetName):"
82166,
82167,"        if typeOfAction == ""0"":"
82168,            # set a flag that can be checked by the insertion validation for being part of the substitution
82169,            self.substitutionFlag = True
82170,            # store desired data
82171,            self.priorBeforeDeletion = prior
82172,            self.indexBeforeDeletion = index
82173,            # reset the flag after idle
82174,"            self.after_idle(lambda: setattr(self, ""substitutionFlag"", False))"
82175,
82176,            # normal deletion validation
82177,            pass
82178,
82179,"        elif typeOfAction == ""1"":"
82180,
82181,"            # if this is a substitution, everything is shifted left by a deletion, so undo this by using the previous prior"
82182,            if self.substitutionFlag:
82183,                # restore desired data to what it was during validation of the deletion
82184,                prior = self.priorBeforeDeletion
82185,                index = self.indexBeforeDeletion
82186,
82187,                # optional (often not required) additional behavior upon substitution
82188,                pass
82189,
82190,            else:
82191,                # normal insertion validation
82192,                pass
82193,
82194,        return True
82195,.set()
82196,.icursor()
82197,.index(SEL_FIRST)
82198,.index(SEL_LAST)
82199,.index(INSERT)
82200,"[1234567891,2345678912,3456789123,4567891234,5678912345,6789123456,7891234567,8912345678,9123456789]"
82201,(a|ab|abc)
82202,(a(b(c)?)?)?
82203,import re 
82204,"s = ""123456789123456789"""
82205,"matches = re.finditer(r'(?=(\d{10}))',s)"
82206,results = [int(match.group(1)) for match in matches]
82207,# results: 
82208,"# [1234567891,"
82209,"#  2345678912,"
82210,"#  3456789123,"
82211,"#  4567891234,"
82212,"#  5678912345,"
82213,"#  6789123456,"
82214,"#  7891234567,"
82215,"#  8912345678,"
82216,#  9123456789]
82217,regex
82218,re
82219,>>> import regex as re
82220,">>> s = ""123456789123456789"""
82221,">>> matches = re.findall(r'\d{10}', s, overlapped=True)"
82222,>>> for match in matches: print(match)  # print match
82223,...
82224,1234567891
82225,2345678912
82226,3456789123
82227,4567891234
82228,5678912345
82229,6789123456
82230,7891234567
82231,8912345678
82232,9123456789
82233,TypeError: findall() got an unexpected keyword argument 'overlapped'
82234,regex
82235,pip install regex
82236,"s =  ""123456789123456789"""
82237,
82238,n = 10
82239,li = [ s[i:i+n] for i in xrange(len(s)-n+1) ]
82240,print '\n'.join(li)
82241,1234567891
82242,2345678912
82243,3456789123
82244,4567891234
82245,5678912345
82246,6789123456
82247,7891234567
82248,8912345678
82249,9123456789
82250,0 <= i < len(s)-n+1
82251,import re
82252,"s = ""123456789123456789"""
82253,"matches = re.findall(r'(?=(\d{10}))',s)"
82254,results = [int(match) for match in matches]
82255,import re
82256,
82257,
82258,S = '123456789123456789'
82259,result = []
82260,while len(S):
82261,"    m = re.search(r'\d{10}', S)"
82262,    if m:
82263,        result.append(int(m.group()))
82264,        S = S[m.start() + 1:]
82265,    else:
82266,        break
82267,print(result)
82268,{
82269,"    ""maps"": ["
82270,        {
82271,"            ""id"": ""blabla"","
82272,"            ""iscategorical"": ""0"""
82273,"        },"
82274,        {
82275,"            ""id"": ""blabla"","
82276,"            ""iscategorical"": ""0"""
82277,        }
82278,"    ],"
82279,"    ""masks"": ["
82280,"        ""id"": ""valore"""
82281,"    ],"
82282,"    ""om_points"": ""value"","
82283,"    ""parameters"": ["
82284,"        ""id"": ""valore"""
82285,    ]
82286,}
82287,import json
82288,from pprint import pprint
82289,
82290,with open('data.json') as f:
82291,    data = json.load(f)
82292,
82293,pprint(data)
82294,Traceback (most recent call last):
82295,"  File ""<pyshell#1>"", line 5, in <module>"
82296,    data = json.load(f)
82297,"  File ""/usr/lib/python3.5/json/__init__.py"", line 319, in loads"
82298,    return _default_decoder.decode(s)
82299,"  File ""/usr/lib/python3.5/json/decoder.py"", line 339, in decode"
82300,"    obj, end = self.raw_decode(s, idx=_w(s, 0).end())"
82301,"  File ""/usr/lib/python3.5/json/decoder.py"", line 355, in raw_decode"
82302,"    obj, end = self.scan_once(s, idx)"
82303,"json.decoder.JSONDecodeError: Expecting ',' delimiter: line 13 column 13 (char 213)"
82304,[]
82305,{}
82306,"""masks"""
82307,"""parameters"""
82308,[]
82309,list
82310,{}
82311,dict
82312,{
82313,"    ""maps"": ["
82314,        {
82315,"            ""id"": ""blabla"","
82316,"            ""iscategorical"": ""0"""
82317,"        },"
82318,        {
82319,"            ""id"": ""blabla"","
82320,"            ""iscategorical"": ""0"""
82321,        }
82322,"    ],"
82323,"    ""masks"": {"
82324,"        ""id"": ""valore"""
82325,"    },"
82326,"    ""om_points"": ""value"","
82327,"    ""parameters"": {"
82328,"        ""id"": ""valore"""
82329,    }
82330,}
82331,import json
82332,from pprint import pprint
82333,
82334,with open('data.json') as f:
82335,    data = json.load(f)
82336,
82337,pprint(data)
82338,"data[""maps""][0][""id""]"
82339,"data[""masks""][""id""]"
82340,"data[""om_points""]"
82341,u'
82342,data.json
82343,{
82344," ""maps"":["
82345,"         {""id"":""blabla"",""iscategorical"":""0""},"
82346,"         {""id"":""blabla"",""iscategorical"":""0""}"
82347,"        ],"
82348,"""masks"":"
82349,"         {""id"":""valore""},"
82350,"""om_points"":""value"","
82351,"""parameters"":"
82352,"         {""id"":""valore""}"
82353,}
82354,import json
82355,from pprint import pprint
82356,
82357,with open('data.json') as data_file:    
82358,    data = json.load(data_file)
82359,pprint(data)
82360,with
82361,from __future__ import with_statement
82362,"data[""maps""][0][""id""]  # will return 'blabla'"
82363,"data[""masks""][""id""]    # will return 'valore'"
82364,"data[""om_points""]      # will return 'value'"
82365,data_file
82366,open
82367,pprint
82368,with
82369,data_file
82370,"data[""om_points""]"
82371,"data[""masks""][""id""]"
82372,KeyError
82373,data.json
82374,{
82375,"    ""maps"": ["
82376,        {
82377,"            ""id"": ""blabla"","
82378,"            ""iscategorical"": ""0"""
82379,"        },"
82380,        {
82381,"            ""id"": ""blabla"","
82382,"            ""iscategorical"": ""0"""
82383,        }
82384,"    ],"
82385,"    ""masks"": [{"
82386,"        ""id"": ""valore"""
82387,"    }],"
82388,"    ""om_points"": ""value"","
82389,"    ""parameters"": [{"
82390,"        ""id"": ""valore"""
82391,    }]
82392,}
82393,import json
82394,from pprint import pprint
82395,with open('data.json') as data_file:
82396,    data_item = json.load(data_file)
82397,pprint(data_item)
82398,print(data_item['parameters'][0]['id'])
82399,"{'maps': [{'id': 'blabla', 'iscategorical': '0'},"
82400,"          {'id': 'blabla', 'iscategorical': '0'}],"
82401," 'masks': [{'id': 'valore'}],"
82402," 'om_points': 'value',"
82403, 'parameters': [{'id': 'valore'}]}
82404,print(data_item['parameters'][0]['id'])
82405,valore
82406,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82407,"Y = [ 0,   1,   1,   0,   1,   2,   2,   0,   1 ]"
82408,"[""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
82409,for
82410,"[x for _, x in sorted(zip(Y, X))]"
82411,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82412,"Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]"
82413,
82414,"Z = [x for _,x in sorted(zip(Y,X))]"
82415,"print(Z)  # [""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
82416,"[x for _, x in sorted(zip(Y, X), key=lambda pair: pair[0])]"
82417,zip
82418,list
82419,list
82420,zip
82421,sorted()
82422,list
82423,key
82424,sorted
82425,Y
82426,Y
82427,X
82428,">>> yx = zip(Y, X)"
82429,>>> yx
82430,"[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]"
82431,>>> yx.sort()
82432,>>> yx
82433,"[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]"
82434,">>> x_sorted = [x for y, x in yx]"
82435,>>> x_sorted
82436,"['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
82437,"[x for y, x in sorted(zip(Y, X))]"
82438,X
82439,str
82440,<
82441,X
82442,None
82443,AttributeError: 'zip' object has no attribute 'sort'
82444,sorted(zip(...))
82445,them = list(zip(...)); them.sort()
82446,"people = ['Jim', 'Pam', 'Micheal', 'Dwight']"
82447,"ages = [27, 25, 4, 9]"
82448,
82449,import numpy
82450,people = numpy.array(people)
82451,ages = numpy.array(ages)
82452,inds = ages.argsort()
82453,sortedPeople = people[inds]
82454,sortedArray1= array1[array2.argsort()]
82455,"sortedArray1= array1[array2[:,2].argsort()]"
82456,key
82457,">>> X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82458,">>> Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]"
82459,">>> keydict = dict(zip(X, Y))"
82460,>>> X.sort(key=keydict.get)
82461,>>> X
82462,"['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
82463,">>> X.sort(key=dict(zip(X, Y)).get)"
82464,X
82465,">>> Z = [""A"", ""A"", ""C"", ""C"", ""C"", ""F"", ""G"", ""H"", ""I""]"
82466,>>> Z_index = list(range(len(Z)))
82467,>>> Z_index.sort(key=keydict.get)
82468,>>> Z = [Z[i] for i in Z_index]
82469,>>> Z
82470,"['A', 'C', 'H', 'A', 'C', 'C', 'I', 'F', 'G']"
82471,more_itertools
82472,from more_itertools import sort_together
82473,
82474,
82475,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82476,"Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]"
82477,"sort_together([Y, X])[1]"
82478,"# ('a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g')"
82479,"sort_together([Index,X,Y,Z])"
82480,"list_a = ['foo', 'bar', 'baz']"
82481,"list_b = ['baz', 'bar', 'foo']"
82482,"sorted(list_b, key=lambda x: list_a.index(x))"
82483,"# ['foo', 'bar', 'baz']"
82484,index
82485,list_a
82486,O(N² log N)
82487,"zip(*sorted(zip(Y,X)))[1]"
82488,"list(zip(*sorted(zip(B,A))))[1]"
82489,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82490,"Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]"
82491,
82492,"sorted_y_idx_list = sorted(range(len(Y)),key=lambda x:Y[x])"
82493,Xs = [X[i] for i in sorted_y_idx_list ]
82494,
82495,"print( ""Xs:"", Xs )"
82496,"# prints: Xs: [""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
82497,numpy.argsort()
82498,"X1= [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""] X2 = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]  X1s, X2s = [X1[i], X2[i] for i in sorted_y_idx_list ]"
82499,"zip(*sorted(zip(X,Y), key=operator.itemgetter(1)))[0]"
82500,"list(zip(*sorted(zip(X,Y), key=operator.itemgetter(1))))[0]"
82501,zip
82502,import operator
82503,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82504,"Y = [ 0,   1,   1,   0,   1,   2,   2,   0,   1 ]"
82505,"# Zip (decorate), sort and unzip (undecorate)."
82506,# Converting to list to script the output and extract X
82507,"list(zip(*(sorted(zip(Y,X)))))[1]                                                                                                                       "
82508,"# Results in: ('a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g')"
82509,Y
82510,X
82511,Y
82512,X
82513,operator
82514,import operator    
82515,
82516,# Sort by Y (1) and extract X [0]
82517,"list(zip(*sorted(zip(X,Y), key=operator.itemgetter(1))))[0]                                                                                                 "
82518,"# Results in: ('a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g')"
82519,lambda x: x[1]
82520,operator.itemgetter(1)
82521,operator.itemgetter
82522,pandas Series
82523,data
82524,index
82525,import pandas as pd
82526,"pd.Series(data=X,index=Y).sort_index().tolist()"
82527,"['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
82528,"list_a = [5,4,3,2,1]"
82529,"list_b = [1,1.5,1.75,2,3,3.5,3.75,4,5]"
82530,"orderedList =  sorted(list_a, key=lambda x: list_b.index(x))"
82531,X
82532,Y
82533,index
82534,list_b
82535,O(N² log N)
82536,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82537,"Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]"
82538,
82539,"Zx, Zy = zip(*[(x, y) for x, y in sorted(zip(Y, X))])"
82540,
82541,"print(list(Zx))  # [0, 0, 0, 1, 1, 1, 1, 2, 2]"
82542,"print(list(Zy))  # ['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
82543,def parallel_sort(*lists):
82544,"    """""""
82545,"    Sorts the given lists, based on the first one."
82546,    :param lists: lists to be sorted
82547,
82548,    :return: a tuple containing the sorted lists
82549,"    """""""
82550,
82551,    # Create the initially empty lists to later store the sorted items
82552,    sorted_lists = tuple([] for _ in range(len(lists)))
82553,
82554,"    # Unpack the lists, sort them, zip them and iterate over them"
82555,    for t in sorted(zip(*lists)):
82556,        # list items are now sorted based on the first list
82557,"        for i, item in enumerate(t):    # for each item..."
82558,            sorted_lists[i].append(item)  # ...store it in the appropriate list
82559,
82560,    return sorted_lists
82561,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]"
82562,"Y = [ 0,   1,   1,   0,   1,   2,   2,   0,   1 ]"
82563,"X, Y = zip(*sorted(zip(Y, X)))"
82564,B
82565,A
82566,"def sortBoth(x,y,reverse=False):"
82567,    '''
82568,"    Sort both x and y, according to x. "
82569,    '''
82570,"    xy_sorted=array(sorted(zip(x,y),reverse=reverse)).T"
82571,"    return xy_sorted[0],xy_sorted[1]"
82572,"list1 = ['a','b','c','d','e','f','g','h','i']"
82573,"list2 = [0,1,1,0,1,2,2,0,1]"
82574,
82575,output=[]
82576,cur_loclist = []
82577,list2
82578,list_set = set(list2)
82579,list2
82580,list_str = ''.join(str(s) for s in list2)
82581,list2
82582,cur_loclist
82583,for i in list_set:
82584,cur_loc = list_str.find(str(i))
82585,
82586,while cur_loc >= 0:
82587,    cur_loclist.append(cur_loc)
82588,"    cur_loc = list_str.find(str(i),cur_loc+1)"
82589,
82590,print(cur_loclist)
82591,
82592,"for i in range(0,len(cur_loclist)):"
82593,output.append(list1[cur_loclist[i]])
82594,print(output)
82595,for i in range(10):
82596,    print(i)
82597,
82598,    if i == 9:
82599,"        print(""Too big - I'm giving up!"")"
82600,        break
82601,else:
82602,"    print(""Completed successfully"")"
82603,else
82604,for
82605,for
82606,else
82607,continue
82608,continuewith
82609,break
82610,else
82611,for ... else foo()
82612,foo()
82613,break
82614,for
82615,else
82616,for i in mylist:
82617,    if i == theflag:
82618,        break
82619,    process(i)
82620,else:
82621,"    raise ValueError(""List argument missing terminal flag."")"
82622,flagfound = False
82623,for i in mylist:
82624,    if i == theflag:
82625,        flagfound = True
82626,        break
82627,    process(i)
82628,
82629,if not flagfound:
82630,"    raise ValueError(""List argument missing terminal flag."")"
82631,raise
82632,Python: the good parts
82633,process(i)
82634,mylist
82635,theflag
82636,theflag
82637,process
82638,i
82639,theflag
82640,theflag
82641,theflag
82642,found_obj = None
82643,for obj in objects:
82644,    if obj.key == search_key:
82645,        found_obj = obj
82646,        break
82647,else:
82648,    print('No object found.')
82649,def find_obj(search_key):
82650,    for obj in objects:
82651,        if obj.key == search_key:
82652,            return obj
82653,matching_objs = [o for o in objects if o.key == search_key]
82654,if matching_objs:
82655,    print('Found {}'.format(matching_objs[0]))
82656,else:
82657,    print('No object found.')
82658,for
82659,"next((o for o in objects if o.key == search_key), None)"
82660,try
82661,except
82662,if
82663,else
82664,for/else
82665,else
82666,for
82667,break
82668,else
82669,break
82670,else
82671,"for x in [1, 2, 3]:\n print x\n else:\n print 'this executes due to no break'"
82672,for ... else
82673,for ... else
82674,GOTO
82675,else
82676,for
82677,if
82678,GOTO
82679,else
82680,else
82681,# no break
82682,else
82683,for item in sequence:
82684,    process(item)
82685,else:  # no break
82686,    suite
82687,__future__
82688,nobreak
82689,break
82690,for
82691,else
82692,break
82693,for
82694,else
82695,break
82696,else
82697,else
82698,for/else
82699,for/nobreak
82700,finally
82701,finally
82702,finally
82703,continue
82704,else
82705,continue
82706,else
82707,continue
82708,for a in range(3):
82709,    print(a)
82710,    if a==4: # change value to force break or not
82711,        break
82712,else: #no break  +10 for whoever thought of this decoration
82713,    print('for completed OK')
82714,
82715,print('statement after for loop')
82716,for
82717,for a in range(3):
82718,    print(a)
82719,    if a==4: # change value to force break or not
82720,        print('ending for loop with a break')
82721,        break
82722,else: # for iterable exhausted  
82723,    print('ending for loop as iterable exhausted')
82724,
82725,print('for loop ended one way or another')
82726,if iterable_supplies_a_value:
82727,    run_the_for_with_that_value
82728,else:
82729,    do_something_else
82730,for:
82731,else:
82732,else
82733,then:
82734,else
82735,for:
82736,else:
82737,else:
82738,else
82739,while
82740,for
82741,else
82742,if / else
82743,else
82744,then
82745,x = 2
82746,while x > 3:
82747,"    print(""foo"")"
82748,    break
82749,else:
82750,"    print(""boo"")"
82751,x = 2
82752,if x > 3:
82753,"    print(""foo"")"
82754,else:
82755,"    print(""boo"")"
82756,break
82757,if
82758,while
82759,if
82760,if
82761,while
82762,else
82763,break
82764,return
82765,else
82766,for
82767,for
82768,while
82769,break
82770,return
82771,break
82772,else
82773,break
82774,for
82775,for
82776,else
82777,else
82778,else
82779,iterable
82780,for
82781,break
82782,else
82783,For... else
82784,While... else
82785,else
82786,==
82787,if the loop completes normally (without a break or error)
82788,else
82789,==
82790,if the loop does not encounter a break
82791,else
82792,==
82793,else not (condition raising break)
82794,else
82795,for...else
82796,for:
82797,    do stuff
82798,    conditional break # implied by else
82799,else not break:
82800,    do more stuff
82801,for...else
82802,for:
82803,    do stuff
82804,    condition:
82805,        break
82806,"else: # read as ""else not break"" or ""else not condition"""
82807,    do more stuff
82808,else:
82809,"for x in range(0,3):"
82810,"    print(""x: {}"".format(x))"
82811,    if x == 2:
82812,        try:
82813,"            raise AssertionError(""ASSERTION ERROR: x is {}"".format(x))"
82814,        except:
82815,"            print(AssertionError(""ASSERTION ERROR: x is {}"".format(x)))"
82816,            break
82817,else:
82818,"    print(""X loop complete without error"")"
82819,x: 0
82820,x: 1
82821,x: 2
82822,ASSERTION ERROR: x is 2
82823,----------
82824,"# loop not completed (hit break), so else didn't run"
82825,"for y in range(0,3):"
82826,"    print(""y: {}"".format(y))"
82827,    if y == 2: # will be executed
82828,"        print(""BREAK: y is {}\n----------"".format(y))"
82829,        break
82830,else: # not executed because break is hit
82831,"    print(""y_loop completed without break----------\n"")"
82832,y: 0
82833,y: 1
82834,y: 2
82835,BREAK: y is 2
82836,----------
82837,"# loop not completed (hit break), so else didn't run"
82838,"for z in range(0,3):"
82839,"     print(""z: {}"".format(z))"
82840,     if z == 4: # will not be executed
82841,"         print(""BREAK: z is {}\n"".format(y))"
82842,         break
82843,     if z == 4: # will not be executed
82844,"         raise AssertionError(""ASSERTION ERROR: x is {}"".format(x))"
82845,else:
82846,"     print(""z_loop complete without break or error\n----------\n"")"
82847,z: 0
82848,z: 1
82849,z: 2
82850,z_loop complete without break or error
82851,----------
82852,else
82853,nobreak
82854,notbreak
82855,for ... else ...
82856,try...except...else
82857,if...else...
82858,try:
82859,    do_something()
82860,except:
82861,"    print(""Error happened."") # The try block threw an exception"
82862,else:
82863,"    print(""Everything is find."") # The try block does things just find."
82864,break
82865,Exception
82866,for x in iterable:
82867,    do_something(x)
82868,except break:
82869,    pass # Implied by Python's loop semantics
82870,else:
82871,    print('no break encountered')  # No break statement was encountered
82872,python
82873,except break
82874,for x in iterable:
82875,    do_something(x)
82876,else:
82877,    print('no break encountered')  # No break statement was encountered
82878,try: stuff(); except: error(); else: ok()
82879,try: stuff(); ok(); except: error()
82880,else
82881,for
82882,"for x in xrange(1,5):"
82883,    if x == 5:
82884,        print 'find 5'
82885,        break
82886,else:
82887,    print 'can not find 5!'
82888,#can not find 5!
82889,">>> for n in range(2, 10):"
82890,"...     for x in range(2, n):"
82891,...         if n % x == 0:
82892,"...             print(n, 'equals', x, '*', n//x)"
82893,...             break
82894,...     else:
82895,...         # loop fell through without finding a factor
82896,"...         print(n, 'is a prime number')"
82897,...
82898,2 is a prime number
82899,3 is a prime number
82900,4 equals 2 * 2
82901,5 is a prime number
82902,6 equals 2 * 3
82903,7 is a prime number
82904,8 equals 2 * 4
82905,9 equals 3 * 3
82906,">>> for num in range(2, 10):"
82907,...     if num % 2 == 0:
82908,"...         print(""Found an even number"", num)"
82909,...         continue
82910,"...     print(""Found a number"", num)"
82911,Found an even number 2
82912,Found a number 3
82913,Found an even number 4
82914,Found a number 5
82915,Found an even number 6
82916,Found a number 7
82917,Found an even number 8
82918,Found a number 9
82919,for item in sequence:
82920,    do_something(item)
82921,item = None
82922,while sequence.hasnext():
82923,    item = sequence.next()
82924,    do_something(item)
82925,for i in range(3):
82926,    print(i)
82927,
82928,    if i == 2:
82929,"        print(""Too big - I'm giving up!"")"
82930,        break;
82931,else:
82932,"    print(""Completed successfully"")"
82933,for clause
82934,for i in range(3):
82935,    print(i)
82936,
82937,    if i == 2:
82938,"        print(""Too big - I'm giving up!"")"
82939,        break;
82940,"if ""for clause is completed"":"
82941,"    print(""Completed successfully"")"
82942,else
82943,for clause is not run at all
82944,In [331]: for i in range(0):
82945,     ...:     print(i)
82946,     ...: 
82947,     ...:     if i == 9:
82948,"     ...:         print(""Too big - I'm giving up!"")"
82949,     ...:         break
82950,     ...: else:
82951,"     ...:     print(""Completed successfully"")"
82952,     ...:     
82953,Completed successfully
82954,"if ""for clause is completed"" or ""not run at all"":"
82955,     do else stuff
82956,"if ""for clause is not partially run"":"
82957,    do else stuff
82958,"if ""for clause not encounter a break"":"
82959,    do else stuff
82960,while...else
82961,import socket
82962,import time
82963,
82964,sock = socket.socket()
82965,timeout = time.time() + 15
82966,while time.time() < timeout:
82967,"    if sock.connect_ex(('127.0.0.1', 80)) is 0:"
82968,        print('Port is open now!')
82969,        break
82970,    print('Still waiting...')
82971,else:
82972,    raise TimeoutError()
82973,else
82974,if
82975,for
82976,else
82977,if
82978,if
82979,else
82980,if
82981,if
82982,elif
82983,else
82984,for i in range(10):
82985,    print(i)
82986,
82987,    if i == 9:
82988,"        print(""Too big - I'm giving up!"")"
82989,        break;
82990,else:
82991,"    print(""Completed successfully"")"
82992,else
82993,for item in lista:
82994,if(obj == item ):
82995,"    print(""if True then break will run and else not run"")"
82996,    break;
82997,else:
82998,"print(""in  else => obj not fount "")"
82999,next
83000,StopIteration
83001,return
83002,yield
83003,yield
83004,>>> def myGen(n):
83005,...     yield n
83006,...     yield n + 1
83007,... 
83008,>>> g = myGen(6)
83009,>>> next(g)
83010,6
83011,>>> next(g)
83012,7
83013,>>> next(g)
83014,Traceback (most recent call last):
83015,"  File ""<stdin>"", line 1, in <module>"
83016,StopIteration
83017,myGen(n)
83018,n
83019,n + 1
83020,next
83021,for
83022,next
83023,>>> for n in myGen(6):
83024,...     print(n)
83025,... 
83026,6
83027,7
83028,">>> g = (n for n in range(3, 5))"
83029,>>> next(g)
83030,3
83031,>>> next(g)
83032,4
83033,>>> next(g)
83034,Traceback (most recent call last):
83035,"  File ""<stdin>"", line 1, in <module>"
83036,StopIteration
83037,">>> lc = [n for n in range(3, 5)]"
83038,>>> lc
83039,"[3, 4]"
83040,next
83041,yield
83042,next
83043,yield
83044,send
83045,>>> def fib():
83046,"...     a, b = 0, 1"
83047,...     while True:
83048,...         yield a
83049,"...         a, b = b, a + b"
83050,... 
83051,>>> import itertools
83052,">>> list(itertools.islice(fib(), 10))"
83053,"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
83054,itertools.islice
83055,itertools
83056,next
83057,__next__
83058,o.next()
83059,next(o)
83060,next()
83061,.next
83062,">>> g = (n for n in range(3, 5))"
83063,>>> g.next()
83064,3
83065,send
83066,Lock
83067,yield
83068,yield
83069,>>> def myGenerator():
83070,...     yield 'These'
83071,...     yield 'words'
83072,...     yield 'come'
83073,...     yield 'one'
83074,...     yield 'at'
83075,...     yield 'a'
83076,...     yield 'time'
83077,
83078,>>> myGeneratorInstance = myGenerator()
83079,>>> next(myGeneratorInstance)
83080,These
83081,>>> next(myGeneratorInstance)
83082,words
83083,>>> for word in myGeneratorInstance:
83084,...     print word
83085,These
83086,words
83087,come
83088,one
83089,at 
83090,a 
83091,time
83092,">>> from time import gmtime, strftime"
83093,>>> def myGen():
83094,...     while True:
83095,"...         yield strftime(""%a, %d %b %Y %H:%M:%S +0000"", gmtime())    "
83096,>>> myGeneratorInstance = myGen()
83097,>>> next(myGeneratorInstance)
83098,"Thu, 28 Jun 2001 14:17:15 +0000"
83099,>>> next(myGeneratorInstance)
83100,"Thu, 28 Jun 2001 14:18:02 +0000   "
83101,>>> g = (x for x in range(10))
83102,>>> g
83103,<generator object <genexpr> at 0x7fac1c1e6aa0>
83104,>>> g.next()
83105,0
83106,>>> g.next()
83107,1
83108,>>> g.next()
83109,2
83110,>>> list(g)   # force iterating the rest
83111,"[3, 4, 5, 6, 7, 8, 9]"
83112,>>> g.next()  # iterator is at the end; calling next again will throw
83113,Traceback (most recent call last):
83114,"  File ""<stdin>"", line 1, in <module>"
83115,StopIteration
83116,>>> def infinite_gen():
83117,...     n = 0
83118,...     while True:
83119,...         yield n
83120,...         n = n + 1
83121,... 
83122,>>> g = infinite_gen()
83123,>>> g.next()
83124,0
83125,>>> g.next()
83126,1
83127,>>> g.next()
83128,2
83129,>>> g.next()
83130,3
83131,...
83132,Stream
83133,#! /usr/bin/python
83134,def  mygen(n):
83135,    x = 0
83136,    while x < n:
83137,        x = x + 1
83138,        if x % 3 == 0:
83139,            yield x
83140,
83141,for a in mygen(100):
83142,    print a
83143,for
83144,"print ""hello"""
83145,x=x+1
83146,def foo(n):
83147,    yield n
83148,    yield n+1
83149,for n in foo(6):
83150,    print(n)
83151,# 6
83152,# 7
83153,yield
83154,return
83155,bar=foo(6)
83156,next
83157,next(bar)    # Works in Python 2.6 or Python 3.x
83158,"bar.next()   # Works in Python 2.5+, but is deprecated. Use next() if possible."
83159,next(bar)
83160,F0 = 0
83161,F1 = 1
83162,Fn = Fn-1 + Fn-2
83163,size_t Fib(size_t n)
83164,{
83165,    //Fib(0) = 0
83166,    if(n == 0)
83167,        return 0;
83168,
83169,    //Fib(1) = 1
83170,    if(n == 1)
83171,        return 1;
83172,
83173,    //Fib(N) = Fib(N-2) + Fib(N-1)
83174,    return Fib(n-2) + Fib(n-1);
83175,}
83176,Fib(3) = Fib(2) + Fib(1)
83177,Fib(2)
83178,Fib(1)
83179,main
83180,// Not supported for the first two elements of Fib
83181,"size_t GetNextFib(size_t &pp, size_t &p)"
83182,{
83183,    int result = pp + p;
83184,    pp = p;
83185,    p = result;
83186,    return result;
83187,}
83188,
83189,"int main(int argc, char *argv[])"
83190,{
83191,    size_t pp = 0;
83192,    size_t p = 1;
83193,"    std::cout << ""0 "" << ""1 "";"
83194,    for(size_t i = 0; i <= 4; ++i)
83195,    {
83196,"        size_t fibI = GetNextFib(pp, p);"
83197,"        std::cout << fibI << "" "";"
83198,    }
83199,    return 0;
83200,}
83201,main
83202,main
83203,vector
83204,iterator
83205,main
83206,"void GetFibNumbers(size_t max, void(*FoundNewFibCallback)(size_t))"
83207,{
83208,    if(max-- == 0) return;
83209,    FoundNewFibCallback(0);
83210,    if(max-- == 0) return;
83211,    FoundNewFibCallback(1);
83212,
83213,    size_t pp = 0;
83214,    size_t p = 1;
83215,    for(;;)
83216,    {
83217,        if(max-- == 0) return;
83218,        int result = pp + p;
83219,        pp = p;
83220,        p = result;
83221,        FoundNewFibCallback(result);
83222,    }
83223,}
83224,
83225,void foundNewFib(size_t fibI)
83226,{
83227,"    std::cout << fibI << "" "";"
83228,}
83229,
83230,"int main(int argc, char *argv[])"
83231,{
83232,"    GetFibNumbers(6, foundNewFib);"
83233,    return 0;
83234,}
83235,main
83236,main
83237,def fib():
83238,"    pp, p = 0, 1"
83239,    while 1:
83240,        yield pp
83241,"        pp, p = p, pp+p"
83242,
83243,g = fib()
83244,for i in range(6):
83245,    g.next()
83246,yield
83247,def numbers():
83248,    for i in range(10):
83249,            yield i
83250,
83251,"gen = numbers() #this line only returns a generator object, it does not run the code defined inside numbers"
83252,
83253,for i in gen: #we iterate over the generator and the values are printed
83254,    print(i)
83255,
83256,#the generator is now empty
83257,
83258,for i in gen: #so this for block does not print anything
83259,    print(i)
83260,sum([x*x for x in range(10)])
83261,sum(x*x for x in range(10))
83262,s = Set(word  for line in page  for word in line.split())
83263,"d = dict( (k, func(k)) for k in keylist)"
83264,max(len(line)  for line in file  if line.strip())
83265,macOS Big Sur 11.1
83266,"MacBook Pro (13-inch, M1, 2020)"
83267,Chip Apple M1
83268,Memory 8gb
83269,import random
83270,import psutil # pip install psutil
83271,import os
83272,from datetime import datetime
83273,
83274,
83275,def memory_usage_psutil():
83276,    # return the memory usage in MB
83277,    process = psutil.Process(os.getpid())
83278,    mem = process.memory_info().rss / float(2 ** 20)
83279,    return '{:.2f} MB'.format(mem)
83280,
83281,
83282,"names = ['John', 'Milovan', 'Adam', 'Steve', 'Rick', 'Thomas']"
83283,"majors = ['Math', 'Engineering', 'CompSci', 'Arts', 'Business']"
83284,
83285,print('Memory (Before): {}'.format(memory_usage_psutil()))
83286,
83287,
83288,def people_list(num_people):
83289,    result = []
83290,    for i in range(num_people):
83291,        person = {
83292,"            'id': i,"
83293,"            'name': random.choice(names),"
83294,            'major': random.choice(majors)
83295,        }
83296,        result.append(person)
83297,    return result
83298,
83299,
83300,t1 = datetime.now()
83301,people = people_list(1000000)
83302,t2 = datetime.now()
83303,
83304,
83305,print('Memory (After) : {}'.format(memory_usage_psutil()))
83306,print('Took {} Seconds'.format(t2 - t1))
83307,Memory (Before): 50.38 MB
83308,Memory (After) : 1140.41 MB
83309,Took 0:00:01.056423 Seconds
83310,1 million results
83311,50.38 megabytes
83312,1 million records
83313,1140.41 megabytes
83314,"1,1 seconds"
83315,import random
83316,import psutil # pip install psutil
83317,import os
83318,from datetime import datetime
83319,
83320,def memory_usage_psutil():
83321,    # return the memory usage in MB
83322,    process = psutil.Process(os.getpid())
83323,    mem = process.memory_info().rss / float(2 ** 20)
83324,    return '{:.2f} MB'.format(mem)
83325,
83326,
83327,"names = ['John', 'Milovan', 'Adam', 'Steve', 'Rick', 'Thomas']"
83328,"majors = ['Math', 'Engineering', 'CompSci', 'Arts', 'Business']"
83329,
83330,print('Memory (Before): {}'.format(memory_usage_psutil()))
83331,
83332,def people_generator(num_people):
83333,    for i in range(num_people):
83334,        person = {
83335,"            'id': i,"
83336,"            'name': random.choice(names),"
83337,            'major': random.choice(majors)
83338,        }
83339,        yield person
83340,
83341,
83342,t1 = datetime.now()
83343,people = people_generator(1000000)
83344,t2 = datetime.now()
83345,
83346,print('Memory (After) : {}'.format(memory_usage_psutil()))
83347,print('Took {} Seconds'.format(t2 - t1))
83348,Memory (Before): 50.52 MB
83349,Memory (After) : 50.73 MB
83350,Took 0:00:00.000008 Seconds
83351,the memory is almost exactly the same
83352,didn't take any time
83353,big performance boosts not only with execution time but with memory
83354,the advantages that come along with that
83355,import copy
83356,
83357,"a = ""deepak"""
83358,"b = 1, 2, 3, 4"
83359,"c = [1, 2, 3, 4]"
83360,"d = {1: 10, 2: 20, 3: 30}"
83361,
83362,a1 = copy.copy(a)
83363,b1 = copy.copy(b)
83364,c1 = copy.copy(c)
83365,d1 = copy.copy(d)
83366,
83367,
83368,"print(""immutable - id(a)==id(a1)"", id(a) == id(a1))"
83369,"print(""immutable - id(b)==id(b1)"", id(b) == id(b1))"
83370,"print(""mutable - id(c)==id(c1)"", id(c) == id(c1))"
83371,"print(""mutable - id(d)==id(d1)"", id(d) == id(d1))"
83372,immutable - id(a)==id(a1) True
83373,immutable - id(b)==id(b1) True
83374,mutable - id(c)==id(c1) False
83375,mutable - id(d)==id(d1) False
83376,a1 = copy.deepcopy(a)
83377,b1 = copy.deepcopy(b)
83378,c1 = copy.deepcopy(c)
83379,d1 = copy.deepcopy(d)
83380,immutable - id(a)==id(a1) True
83381,immutable - id(b)==id(b1) True
83382,mutable - id(c)==id(c1) False
83383,mutable - id(d)==id(d1) False
83384,a1 = a
83385,b1 = b
83386,c1 = c
83387,d1 = d
83388,immutable - id(a)==id(a1) True
83389,immutable - id(b)==id(b1) True
83390,mutable - id(c)==id(c1) True
83391,mutable - id(d)==id(d1) True
83392,import copy
83393,
83394,"a = [1, 2, 3]"
83395,"b = [4, 5, 6]"
83396,"c = [a, b]"
83397,d = c
83398,
83399,print id(c) == id(d)          # True - d is the same object as c
83400,print id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]
83401,d = copy.copy(c)
83402,
83403,print id(c) == id(d)          # False - d is now a new object
83404,print id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]
83405,d = copy.deepcopy(c)
83406,
83407,print id(c) == id(d)          # False - d is now a new object
83408,print id(c[0]) == id(d[0])    # False - d[0] is now a new object
83409,"list_=[[1,2],[3,4]] newlist = list_.copy() list_[0]=[7,8] print(list_) print(newlist)"
83410,newlist
83411,"[[1, 2], [3, 4]]"
83412,list_[0]
83413,copies
83414,"With just copy, you have a new outer list but inner lists are references."
83415,"list_=[[1,2],[3,4]] newlist = list_.copy() list_[0]=[7,8]"
83416,newlist
83417,list_[0][0] = 7
83418,assignment
83419,copy
83420,deepcopy
83421,">>> i = [1,2,3]"
83422,>>> j=i
83423,">>> hex(id(i)), hex(id(j))"
83424,">>> ('0x10296f908', '0x10296f908') #Both addresses are identical"
83425,i
83426,j
83427,i
83428,j
83429,>>> i.append(4)
83430,>>> j
83431,">>> [1,2,3,4] #Destination is updated"
83432,
83433,>>> j.append(5)
83434,>>> i
83435,">>> [1,2,3,4,5] #Source is updated"
83436,copy
83437,deepcopy
83438,copy(shallow copy)
83439,copy
83440,deepcopy
83441,copy
83442,>>> import copy
83443,">>> i = [1,2,3]"
83444,>>> j = copy.copy(i)
83445,">>> hex(id(i)), hex(id(j))"
83446,">>> ('0x102b9b7c8', '0x102971cc8') #Both addresses are different"
83447,
83448,>>> i.append(4)
83449,>>> j
83450,">>> [1,2,3] #Updation of original list didn't affected copied variable"
83451,copy
83452,>>> import copy
83453,">>> i = [1,2,3,[4,5]]"
83454,>>> j = copy.copy(i)
83455,
83456,">>> hex(id(i)), hex(id(j))"
83457,">>> ('0x102b9b7c8', '0x102971cc8') #Both addresses are still different"
83458,
83459,">>> hex(id(i[3])), hex(id(j[3]))"
83460,">>> ('0x10296f908', '0x10296f908') #Nested lists have same address"
83461,
83462,>>> i[3].append(6)
83463,>>> j
83464,">>> [1,2,3,[4,5,6]] #Updation of original nested list updated the copy as well"
83465,deepcopy
83466,>>> import copy
83467,">>> i = [1,2,3]"
83468,>>> j = copy.deepcopy(i)
83469,">>> hex(id(i)), hex(id(j))"
83470,">>> ('0x102b9b7c8', '0x102971cc8') #Both addresses are different"
83471,
83472,>>> i.append(4)
83473,>>> j
83474,">>> [1,2,3] #Updation of original list didn't affected copied variable"
83475,deepcopy
83476,>>> import copy
83477,">>> i = [1,2,3,[4,5]]"
83478,>>> j = copy.deepcopy(i)
83479,
83480,">>> hex(id(i)), hex(id(j))"
83481,">>> ('0x102b9b7c8', '0x102971cc8') #Both addresses are still different"
83482,
83483,">>> hex(id(i[3])), hex(id(j[3]))"
83484,">>> ('0x10296f908', '0x102b9b7c8') #Nested lists have different addresses"
83485,
83486,>>> i[3].append(6)
83487,>>> j
83488,">>> [1,2,3,[4,5]] #Updation of original nested list didn't affected the copied variable    "
83489,import copy
83490,
83491,class Foo(object):
83492,    def __init__(self):
83493,        pass
83494,
83495,
83496,"a = [Foo(), Foo()]"
83497,shallow = copy.copy(a)
83498,deep = copy.deepcopy(a)
83499,"c=[1,2,3,4]"
83500,c
83501,c1=c
83502,c1
83503,c
83504,c1
83505,c1=copy.copy(c)
83506,c1
83507,c
83508,c1
83509,c
83510,a
83511,b
83512,c1=copy.deepcopy(c)
83513,"e = [[1, 2],[4, 5, 6],[7, 8, 9]]"
83514,e
83515,e1
83516,e[0].append(3)
83517,e
83518,"[[1, 2, 3],[4, 5, 6],[7, 8, 9]]"
83519,e1
83520,"[[1, 2, 3],[4, 5, 6],[7, 8, 9]]"
83521,"e.append([10, 11, 12])"
83522,e
83523,"[[1, 2, 3],[4, 5, 6],[7, 8, 9],[10, 11, 12]]"
83524,e1
83525,"[[1, 2, 3],[4, 5, 6],[7, 8, 9]]"
83526,e
83527,e1
83528,"list1 = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ]  ]"
83529,list2 = list1
83530,"list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f ']  ]"
83531,list1[0][0] = 'x’
83532,list1.append( [ 'g'] )
83533,"list1 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g'] ]"
83534,"list2 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g’ ] ]"
83535,import copy
83536,
83537,"list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f ']  ]      # assigning a list"
83538,list2 = copy.copy(list1)       # shallow copy is done using copy function of copy module
83539,
83540,"list1.append ( [ 'g', 'h', 'i'] )   # appending another list to list1"
83541,
83542,print list1
83543,"list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ]"
83544,"list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] ]"
83545,list1[0][0] = 'x’
83546,"list1 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ] "
83547,"list2 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] ]"
83548,import copy
83549,
83550,"list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f ']  ]         # assigning a list"
83551,list2 = deepcopy.copy(list1)       # deep copy is done using deepcopy function of copy module
83552,
83553,"list1.append ( [ 'g', 'h', 'i'] )   # appending another list to list1"
83554,
83555,print list1
83556,"list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ]"
83557,"list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] ]"
83558,list1[0][0] = 'x’
83559,"list1 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ] "
83560,"list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f  ' ] ]"
83561,import copy
83562,"spam = [[0, 1, 2, 3], 4, 5]"
83563,cheese = copy.copy(spam)
83564,cheese.append(3)
83565,cheese[0].append(3)
83566,print(spam)
83567,print(cheese)
83568,import copy
83569,"spam = [[0, 1, 2, 3], 4, 5]"
83570,cheese = copy.deepcopy(spam)
83571,cheese.append(3)
83572,cheese[0].append(3)
83573,print(spam)
83574,print(cheese)
83575,from copy import deepcopy
83576,
83577,"########""List assignment (does not create a copy) ############"
83578,"l1 = [1,2,3, [4,5,6], [7,8,9]]"
83579,l1_assigned = l1
83580,
83581,print(l1)
83582,print(l1_assigned)
83583,
83584,"print(id(l1), id(l1_assigned))"
83585,"print(id(l1[3]), id(l1_assigned[3]))"
83586,"print(id(l1[3][0]), id(l1_assigned[3][0]))"
83587,
83588,l1[3][0] = 100
83589,l1.pop(4)
83590,l1.remove(1)
83591,
83592,
83593,print(l1)
83594,print(l1_assigned)
83595,"print(""###################################"")"
83596,
83597,"########""List copy using copy method (shallow copy)############"
83598,
83599,"l2 = [1,2,3, [4,5,6], [7,8,9]]"
83600,l2_copy = l2.copy()
83601,
83602,print(l2)
83603,print(l2_copy)
83604,
83605,"print(id(l2), id(l2_copy))"
83606,"print(id(l2[3]), id(l2_copy[3]))"
83607,"print(id(l2[3][0]), id(l2_copy[3][0]))"
83608,l2[3][0] = 100
83609,l2.pop(4)
83610,l2.remove(1)
83611,
83612,
83613,print(l2)
83614,print(l2_copy)
83615,
83616,"print(""###################################"")"
83617,
83618,"########""List copy using slice (shallow copy)############"
83619,
83620,"l3 = [1,2,3, [4,5,6], [7,8,9]]"
83621,l3_slice = l3[:]
83622,
83623,print(l3)
83624,print(l3_slice)
83625,
83626,"print(id(l3), id(l3_slice))"
83627,"print(id(l3[3]), id(l3_slice[3]))"
83628,"print(id(l3[3][0]), id(l3_slice[3][0]))"
83629,
83630,l3[3][0] = 100
83631,l3.pop(4)
83632,l3.remove(1)
83633,
83634,
83635,print(l3)
83636,print(l3_slice)
83637,
83638,"print(""###################################"")"
83639,
83640,"########""List copy using deepcopy ############"
83641,
83642,"l4 = [1,2,3, [4,5,6], [7,8,9]]"
83643,l4_deep = deepcopy(l4)
83644,
83645,print(l4)
83646,print(l4_deep)
83647,
83648,"print(id(l4), id(l4_deep))"
83649,"print(id(l4[3]), id(l4_deep[3]))"
83650,"print(id(l4[3][0]), id(l4_deep[3][0]))"
83651,
83652,l4[3][0] = 100
83653,l4.pop(4)
83654,l4.remove(1)
83655,
83656,print(l4)
83657,print(l4_deep)
83658,"print(""##########################"")"
83659,"print(l4[2], id(l4[2]))"
83660,"print(l4_deep[3], id(l4_deep[3]))"
83661,
83662,"print(l4[2][0], id(l4[2][0]))"
83663,"print(l4_deep[3][0], id(l4_deep[3][0]))"
83664,"from copy import deepcopy, copy"
83665,
83666,class A(object):
83667,"    """"""docstring for A"""""""
83668,    def __init__(self):
83669,        super().__init__()
83670,
83671,class B(object):
83672,"    """"""docstring for B"""""""
83673,    def __init__(self):
83674,        super().__init__()
83675,        self.myA = A()
83676,
83677,a = B()
83678,"print(""a is"", a)"
83679,"print(""a.myA is"", a.myA)"
83680,"print(""After copy"")"
83681,b = copy(a)
83682,"print(""b is"", b)"
83683,"print(""b.myA is"", b.myA)"
83684,b.myA = A()
83685,"print(""-- after changing value"")"
83686,"print(""a is"", a)"
83687,"print(""a.myA is"", a.myA)"
83688,"print(""b is"", b)"
83689,"print(""b.myA is"", b.myA)"
83690,
83691,"print(""Resetting"")"
83692,"print(""*""*40)"
83693,a = B()
83694,"print(""a is"", a)"
83695,"print(""a.myA is"", a.myA)"
83696,"print(""After deepcopy"")"
83697,b = deepcopy(a)
83698,"print(""b is"", b)"
83699,"print(""b.myA is"", b.myA)"
83700,b.myA = A()
83701,"print(""-- after changing value"")"
83702,"print(""a is"", a)"
83703,"print(""a.myA is"", a.myA)"
83704,"print(""b is"", b)"
83705,"print(""b.myA is"", b.myA)"
83706,
83707,"print(""Resetting"")"
83708,"print(""*""*40)"
83709,a = B()
83710,"print(""a is"", a)"
83711,"print(""a.myA is"", a.myA)"
83712,"print(""After assignment"")"
83713,b = a
83714,"print(""b is"", b)"
83715,"print(""b.myA is"", b.myA)"
83716,b.myA = A()
83717,"print(""-- after changing value"")"
83718,"print(""a is"", a)"
83719,"print(""a.myA is"", a.myA)"
83720,"print(""b is"", b)"
83721,"print(""b.myA is"", b.myA)"
83722,a is <__main__.B object at 0x7f1d8ff59760>
83723,a.myA is <__main__.A object at 0x7f1d8fe8f970>
83724,After copy
83725,b is <__main__.B object at 0x7f1d8fe43280>
83726,b.myA is <__main__.A object at 0x7f1d8fe8f970>
83727,-- after changing value
83728,a is <__main__.B object at 0x7f1d8ff59760>
83729,a.myA is <__main__.A object at 0x7f1d8fe8f970>
83730,b is <__main__.B object at 0x7f1d8fe43280>
83731,b.myA is <__main__.A object at 0x7f1d8fe85820>
83732,Resetting
83733,****************************************
83734,a is <__main__.B object at 0x7f1d8fe85370>
83735,a.myA is <__main__.A object at 0x7f1d8fe43310>
83736,After deepcopy
83737,b is <__main__.B object at 0x7f1d8fde3040>
83738,b.myA is <__main__.A object at 0x7f1d8fde30d0>
83739,-- after changing value
83740,a is <__main__.B object at 0x7f1d8fe85370>
83741,a.myA is <__main__.A object at 0x7f1d8fe43310>
83742,b is <__main__.B object at 0x7f1d8fde3040>
83743,b.myA is <__main__.A object at 0x7f1d8fe43280>
83744,Resetting
83745,****************************************
83746,a is <__main__.B object at 0x7f1d8fe432b0>
83747,a.myA is <__main__.A object at 0x7f1d8fe85820>
83748,After assignment
83749,b is <__main__.B object at 0x7f1d8fe432b0>
83750,b.myA is <__main__.A object at 0x7f1d8fe85820>
83751,-- after changing value
83752,a is <__main__.B object at 0x7f1d8fe432b0>
83753,a.myA is <__main__.A object at 0x7f1d8fe85370>
83754,b is <__main__.B object at 0x7f1d8fe432b0>
83755,b.myA is <__main__.A object at 0x7f1d8fe85370>
83756,copy
83757,copy
83758,deepcopy
83759,deepcopy
83760,copy
83761,deep copy
83762,copy
83763,import copy
83764,"original_list = [1, 2, 3, 4, 5, ['a', 'b']]"
83765,copy_list = copy.copy(original_list)
83766,print
83767,"print(hex(id(original_list)), hex(id(copy_list))) # 0x1fb3030 0x1fb3328"
83768,"print(hex(id(original_list[1])), hex(id(copy_list[1]))) # 0x537ed440 0x537ed440"
83769,"print(hex(id(original_list[5])), hex(id(copy_list[5]))) # 0x1faef08 0x1faef08"
83770,original_list.append(6)
83771,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]"
83772,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b']]"
83773,copy_list.append(7)
83774,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]"
83775,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b'], 7]"
83776,original_list[5].append('c')
83777,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c'], 6]"
83778,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c'], 7]"
83779,copy_list[5].append('d')
83780,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c', 'd'], 6]"
83781,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c', 'd'], 7]"
83782,deepcopy
83783,copy
83784,import copy
83785,"original_list = [1, 2, 3, 4, 5, ['a', 'b']]"
83786,copy_list = copy.copy(original_list)
83787,print
83788,import copy
83789,"original_list = [1, 2, 3, 4, 5, ['a', 'b']]"
83790,copy_list = copy.deepcopy(original_list)
83791,"print(hex(id(original_list)), hex(id(copy_list))) # 0x1fb3030 0x1fb3328"
83792,"print(hex(id(original_list[1])), hex(id(copy_list[1]))) # 0x537ed440 0x537ed440"
83793,"print(hex(id(original_list[5])), hex(id(copy_list[5]))) # 0x24eef08 0x24f3300"
83794,original_list.append(6)
83795,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]"
83796,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b']]"
83797,copy_list.append(7)
83798,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]"
83799,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b'], 7]"
83800,original_list[5].append('c')
83801,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c'], 6]"
83802,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b'], 7]"
83803,copy_list[5].append('d')
83804,"print(""original_list is:"", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c', 'd'], 6]"
83805,"print(""copy_list is:"", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b', 'd'], 7]"
83806,">>lst=[1,2,3,4,5]"
83807,
83808,>>a=lst
83809,
83810,>>b=lst[:]
83811,
83812,>>> b
83813,"[1, 2, 3, 4, 5]"
83814,
83815,>>> a
83816,"[1, 2, 3, 4, 5]"
83817,
83818,>>> lst is b
83819,False
83820,
83821,>>> lst is a
83822,True
83823,
83824,>>> id(lst)
83825,46263192
83826,
83827,>>> id(a)
83828,46263192 ------>  See here id of a and id of lst is same so its called deep copy and even boolean answer is true
83829,
83830,>>> id(b)
83831,46263512 ------>  See here id of b and id of lst is not same so its called shallow copy and even boolean answer is false although output looks same.
83832,a
83833,lst
83834,float
83835,class RoundFloat(float):
83836,"    def __new__(cls, val):"
83837,"        return float.__new__(cls, round(val, 2))"
83838,float
83839,dict
83840,class SortedKeyDict(dict):
83841,"    def __new__(cls, val):"
83842,"        return dict.__new__(cls, val.clear())"
83843,class SortedKeyDict_a(dict):
83844,    def example(self):
83845,        return self.keys()
83846,class(SortedKeyDict_a)
83847,"d = (('zheng-cai', 67), ('hui-jun', 68),('xin-yi', 2))"
83848,example
83849,SortedKeyDict
83850,__new__
83851,RoundFloat
83852,__new__
83853,x = 5.0
83854,x += 7.0
83855,print x # 12.0
83856,s = 'foo'
83857,s += 'bar'
83858,print s # foobar
83859,x = something # immutable type
83860,print x
83861,func(x)
83862,print x # prints the same thing
83863,
83864,x = something # mutable type
83865,print x
83866,func(x)
83867,print x # might print something different
83868,
83869,x = something # immutable type
83870,y = x
83871,print x
83872,# some statement that operates on y
83873,print x # prints the same thing
83874,
83875,x = something # mutable type
83876,y = x
83877,print x
83878,# some statement that operates on y
83879,print x # might print something different
83880,x = 'foo'
83881,y = x
83882,print x # foo
83883,y += 'bar'
83884,print x # foo
83885,
83886,"x = [1, 2, 3]"
83887,y = x
83888,"print x # [1, 2, 3]"
83889,"y += [3, 2, 1]"
83890,"print x # [1, 2, 3, 3, 2, 1]"
83891,
83892,def func(val):
83893,    val += 'bar'
83894,
83895,x = 'foo'
83896,print x # foo
83897,func(x)
83898,print x # foo
83899,
83900,def func(val):
83901,"    val += [3, 2, 1]"
83902,
83903,"x = [1, 2, 3]"
83904,"print x # [1, 2, 3]"
83905,func(x)
83906,"print x # [1, 2, 3, 3, 2, 1]"
83907,"def f(my_list): my_list = [1, 2, 3]"
83908,"def f(my_list): my_list[:] = [1, 2, 3]"
83909,a += b
83910,a[0] = b
83911,a[0]
83912,a
83913,TypeError
83914,">>> s = ""abc"""
83915,>>> id(s)
83916,4702124
83917,>>> s[0] 
83918,'a'
83919,">>> s[0] = ""o"""
83920,Traceback (most recent call last):
83921,"  File ""<stdin>"", line 1, in <module>"
83922,TypeError: 'str' object does not support item assignment
83923,">>> s = ""xyz"""
83924,>>> id(s)
83925,4800100
83926,">>> s += ""uvw"""
83927,>>> id(s)
83928,4800500
83929,">>> i = [1,2,3]"
83930,>>> id(i)
83931,2146718700
83932,>>> i[0] 
83933,1
83934,>>> i[0] = 7
83935,>>> id(i)
83936,2146718700
83937,int()
83938,float()
83939,complex()
83940,str()
83941,tuple()
83942,frozenset()
83943,bytes()
83944,list()
83945,bytearray()
83946,set()
83947,dict()
83948,id()
83949,>>> i = 1
83950,>>> id(i)
83951,***704
83952,>>> i += 1
83953,>>> i
83954,2
83955,>>> id(i)
83956,***736 (different from ***704)
83957,>>> a = [1]
83958,>>> id(a)
83959,***416
83960,>>> a.append(2)
83961,>>> a
83962,"[1, 2]"
83963,>>> id(a)
83964,***416 (same with the above id)
83965,id()
83966,id()
83967,int
83968,float
83969,a = 1
83970,a += 5
83971,a
83972,1
83973,1
83974,5
83975,6
83976,a
83977,6
83978,1
83979,6
83980,b = 'some string'
83981,b += 'some other string'
83982,"c = ('some', 'tuple')"
83983,"c += ('some', 'other', 'tuple')"
83984,"d = [1, 2, 3]"
83985,1
83986,2
83987,3
83988,e = d
83989,e
83990,list
83991,d
83992,"e += [4, 5]"
83993,e
83994,d
83995,4
83996,5
83997,tuple
83998,"f = (1, 2, 3)"
83999,g = f
84000,"g += (4, 5)"
84001,f
84002,tuple
84003,g
84004,tuple
84005,class SortedKeyDict(dict):
84006,"    def __new__(cls, val):"
84007,"        return dict.__new__(cls, val.clear())"
84008,"d = (('zheng-cai', 67), ('hui-jun', 68),('xin-yi', 2))"
84009,tuple
84010,tuples
84011,val
84012,tuple
84013,.clear()
84014,dict(d)
84015,val
84016,SortedKeyDict
84017,>>> a = 1
84018,">>> a = 2 # I thought int was immutable, but I just changed it?!"
84019,a = 2
84020,a.operator=(2)
84021,a
84022,a
84023,a = 2
84024,a
84025,2
84026,a
84027,a
84028,a
84029,int
84030,int
84031,a = 2
84032,"0, 0, 0, 1"
84033,"0, 0, 0, 2"
84034,1
84035,2
84036,a
84037,int
84038,1
84039,a = 2
84040,a
84041,1
84042,2
84043,a.append(b)
84044,None
84045,a.spam = b
84046,a[0] = b
84047,a += b
84048,a + b
84049,a
84050,a[0] = b
84051,a[0]
84052,a
84053,list
84054,Dictionary
84055,Set
84056,bytearray
84057,user defined classes
84058,int
84059,float
84060,decimal
84061,complex
84062,bool
84063,string
84064,tuple
84065,range
84066,frozenset
84067,bytes
84068,"a = ""Hello"""
84069,"a +="" World"""
84070,print a
84071,"a = ""Hello"""
84072,identity_a = id(a)
84073,"a += "" World"""
84074,new_identity_a = id(a)
84075,if identity_a != new_identity_a:
84076,"    print ""String is Immutable"""
84077,"a = ""Hello World"""
84078,"a[0] = ""M"""
84079,"tuple_a = (1,)"
84080,"tuple_a[0] = (2,)"
84081,print a
84082,int
84083,float
84084,tuple
84085,str
84086,list
84087,append
84088,">>> a = [1,2,3]"
84089,>>> a.append('hello') # `a` has mutated but is still the same object
84090,>>> a
84091,"[1, 2, 3, 'hello']"
84092,float
84093,>>> b = 5.0 
84094,>>> b = b + 0.1
84095,>>> b
84096,5.1
84097,=
84098,b = b + 0.1
84099,=
84100,5 + 0.1
84101,=
84102,=
84103,a = 1.0
84104,=
84105,1.0
84106,1.0
84107,float(1.0)
84108,1.0
84109,1.0
84110,b
84111,a = b
84112,b += 1
84113,b
84114,a
84115,b
84116,c
84117,list
84118,a = c
84119,a
84120,c
84121,list
84122,c.append('msg')
84123,a
84124,id(x)
84125,(name)
84126,"my_string = ""Hello world"" "
84127,"my_string[0] = ""h"""
84128,print my_string 
84129,Traceback (most recent call last):
84130,"File ""test.py"", line 4, in <module>"
84131,"my_string[0] = ""h"""
84132,TypeError: 'str' object does not support item assignment
84133,string
84134,"my_string = ""Hello World"" "
84135,"my_string = ""hello world"""
84136,print my_string #hello world
84137,my_string = 'h' + my_string[1:]
84138,id(my_string)
84139,l = list(my_string)
84140,l[0] = 'h'
84141,my_string = ''.join(l)
84142,__hash__
84143,__hash__()
84144,>>>x = 5
84145,>>>y = x
84146,>>>x = x + y
84147,lists
84148,"list = [1, 2, 3, 4, 5]"
84149,list[0] = '!'
84150,"#['!', '2', '3', '4', '5']"
84151,y = list
84152,list[0] = 'Hello'
84153,"#['Hello', '2', '3', '4', '5']"
84154,y
84155,"['Hello', '2', '3', '4', '5']"
84156,list
84157,y
84158,const a = 10
84159,a = 20
84160,strings
84161,a
84162,a = 'abcd'
84163,a[0]
84164,#'a'
84165,a[0] = '!'
84166,a += 'e'
84167,#'abcde'
84168,a
84169,a = a + 'f'
84170,len()
84171,"a = [1,2]"
84172,b = a
84173,b[1] = 3
84174,    >>> s='asd'
84175,    >>> s is 'asd'
84176,    True
84177,    >>> s=None
84178,    >>> s is None
84179,    True
84180,    >>> s=123
84181,    >>> s is 123
84182,    True
84183,>>> s={}
84184,>>> s is {}
84185,False
84186,>>> {} is {}
84187,Flase
84188,">>> s=[1,2]"
84189,">>> s is [1,2]"
84190,False
84191,">>> s=(1,2)"
84192,">>> s is (1,2)"
84193,False
84194,>>> s=abs
84195,>>> s is abs
84196,True
84197,>>> s=12.3
84198,>>> s is 12.3
84199,False
84200,>>> 12.3 is 12.3
84201,True
84202,>>> s == 12.3
84203,True
84204,>>> id(12.3)
84205,140241478380112
84206,>>> id(s)
84207,140241478380256
84208,>>> s=12.3
84209,>>> id(s)
84210,140241478380112
84211,>>> id(12.3)
84212,140241478380256
84213,>>> id(12.3)
84214,140241478380256
84215,"x = (1, 2)"
84216,x
84217,hash
84218,hash(1)
84219,hash('a')
84220,"hash((1, 2))"
84221,hash(True)
84222,hash([])
84223,hash({})
84224,"hash({1, 2})"
84225,hash()
84226,__hash__()
84227,hash
84228,__hash__()
84229,x=7
84230,y=x
84231,"print(x,y)"
84232,x=10 # so for immutable objects this creates a new copy so that it doesnot 
84233,#effect the value of y
84234,"print(x,y)"
84235,"x=[1,2,3,4]"
84236,print(x)
84237,y=x #for immutable objects assignment doesn't create new copy 
84238,x[2]=5
84239,"print(x,y) # both x&y holds the same list"
84240,x=10
84241,x[2] = 5
84242,int
84243,f()
84244,x
84245,main()
84246,n
84247,"def f(n, x):"
84248,    n = 2
84249,    x.append(4)
84250,"    print('In f():', n, x)"
84251,
84252,def main():
84253,    n = 1
84254,"    x = [0,1,2,3]"
84255,"    print('Before:', n, x)"
84256,"    f(n, x)"
84257,"    print('After: ', n, x)"
84258,
84259,main()
84260,"Before: 1 [0, 1, 2, 3]"
84261,"In f(): 2 [0, 1, 2, 3, 4]"
84262,"After:  1 [0, 1, 2, 3, 4]"
84263,"def f(n, x): # these `n`, `x` have nothing to do with `n` and `x` from main()"
84264,    n = 2    # put `n` label on `2` balloon
84265,    x.append(4) # call `append` method of whatever object `x` is referring to.
84266,"    print('In f():', n, x)"
84267,    x = []   # put `x` label on `[]` ballon
84268,    # x = [] has no effect on the original list that is passed into the function
84269,"def foo(x, l=None): l=l or []; l.append(x**2); return l[-1]"
84270,x = []
84271,f()
84272,x
84273,varname =
84274,varname
84275,varname.foo()
84276,varname
84277,list.append
84278,varname
84279,varname
84280,global
84281,f
84282,x
84283,n
84284,x
84285,x
84286,x
84287,n
84288,n
84289,"def f(nf, xf):"
84290,    nf = 2
84291,    xf.append(4)
84292,"    print 'In f():', nf, xf"
84293,
84294,def main():
84295,    nmain = 1
84296,"    xmain = [0,1,2,3]"
84297,"    print 'Before:', nmain, xmain"
84298,"    f(nmain, xmain)"
84299,"    print 'After: ', nmain, xmain"
84300,
84301,main()
84302,"    xf = [""foo"", ""bar""]"
84303,    xf.append(4)
84304,nf = 2
84305,nf
84306,2
84307,n
84308,x
84309,"def f(y, z):"
84310,    y = 2
84311,    z.append(4)
84312,"    print ('In f():             ', id(y), id(z))"
84313,
84314,def main():
84315,    n = 1
84316,"    x = [0,1,2,3]"
84317,"    print ('Before in main:', n, x,id(n),id(x))"
84318,"    f(n, x)"
84319,"    print ('After in main:', n, x,id(n),id(x))"
84320,
84321,main()
84322,"Before in main: 1 [0, 1, 2, 3]   94635800628352 139808499830024"
84323,In f():                          94635800628384 139808499830024
84324,"After in main: 1 [0, 1, 2, 3, 4] 94635800628352 139808499830024"
84325,"def f(n, x=None):"
84326,    if x is None:
84327,        x = []
84328,    ...
84329,x = x + [4]
84330,x.append(4)
84331,x += [4]
84332,x
84333,x.append(4)
84334,"def func1(x, l1):"
84335,    x = 5
84336,"    l1.append(""nonsense"")"
84337,
84338,y = 10
84339,"list1 = [""meaning""]"
84340,"func1(y, list1)"
84341,print(y)
84342,print(list1)
84343,int
84344,int
84345,def foo(x):
84346,    x[0] = 5
84347,
84348,def goo(x):
84349,    x = []
84350,">>> cow = [3,4,5]"
84351,>>> foo(cow)
84352,>>> cow
84353,"[5,4,5]"
84354,">>> cow = [3,4,5]"
84355,>>> goo(cow)
84356,>>> goo
84357,"[3,4,5]"
84358,"    m = [1,2,3]"
84359,    n = m   # this tells n to point at the same object as m does at the moment
84360,"    m = [1,2,3,4] # writing m = m + [4] would also do the same"
84361,"    print('n = ', n,'m = ',m)"
84362,"    m = [1,2,3]"
84363,    n = m
84364,    m.append(4)
84365,"    print('n = ', n,'m = ',m)"
84366,B = A
84367,A = [1]
84368,B = A   # Now B is an alias of A
84369,
84370,A.append(2)  # Now the value of A had been changes
84371,print(B)
84372,">>> [1, 2]  "
84373,# B is still an alias of A
84374,"# Which means when we call B, the real name we are calling is A"
84375,
84376,"# When we do something to B,  the real name of our object is A"
84377,B.append(3)
84378,print(A)
84379,">>> [1, 2, 3]"
84380,def test(B):
84381,    print('My name is B')
84382,    print(f'My value is {B}') 
84383,"    print(' I am just a nickname,  My real name is A')"
84384,    B.append(2)
84385,
84386,
84387,A = [1]
84388,test(A) 
84389,print(A)
84390,">>> [1, 2]"
84391,B.append
84392,A.append
84393,A = [1]
84394,B = A
84395,B.append(2)
84396,"A = A[0]  # Now the A is a brand new name, and has nothing todo with the old A from now on."
84397,
84398,B.append(3)
84399,print(A)
84400,>>> 1
84401,# the relation of A and B is removed when we assign the name A to something else
84402,# Now B is a independent variable of hisown.
84403," A = [1, 2, 3]"
84404,
84405,"# No equal sign, we are working on the origial object,"
84406,A.append(4)
84407,">>> [1, 2, 3, 4]"
84408,
84409,# This would create a new A
84410,A = A + [4]  
84411,">>> [1, 2, 3, 4]"
84412,def test(B):
84413,"    B = [1, 2, 3]   # B is a new name now, not an alias of A anymore"
84414,    B.append(4)  # so this operation won't effect A
84415,    
84416,"A = [1, 2, 3]"
84417,test(A)
84418,print(A)
84419,">>> [1, 2, 3]"
84420,
84421,# ---------------------------
84422,
84423,def test(B):
84424,"    B.append(4)  # B is a nickname of A, we are doing A"
84425,    
84426,"A = [1, 2, 3]"
84427,test(A)
84428,print(A)
84429,">>> [1, 2, 3, 4]"
84430,B = A
84431,A= 123
84432,B = A
84433,A = 'string'
84434,list.append
84435,A = B.method
84436,a = 'string'
84437,"a.replace('t', '_')"
84438,print(a)
84439,>>> 'string'
84440,
84441,"a = a.replace('t', '_')"
84442,print(a)
84443,>>> 's_ring'
84444,
84445,b = 100
84446,b + 1
84447,print(b)
84448,>>> 100
84449,
84450,b = b + 1
84451,print(b)
84452,>>> 101
84453,def test_id(arg):
84454,    c = id(arg)
84455,    arg = 123
84456,    d = id(arg)
84457,    return
84458,
84459,a = 'test ids'
84460,b = id(a)
84461,test_id(a)
84462,e = id(a)
84463,
84464,# b = c  = e != d
84465,# this function do change original value
84466,del change_like_mutable(arg):
84467,    arg.append(1)
84468,"    arg.insert(0, 9)"
84469,    arg.remove(2)
84470,    return
84471, 
84472,"test_1 = [1, 2, 3]"
84473,change_like_mutable(test_1)
84474,
84475,
84476,
84477,# this function doesn't 
84478,def wont_change_like_str(arg):
84479,"     arg = [1, 2, 3]"
84480,     return
84481,
84482,
84483,"test_2 = [1, 1, 1]"
84484,wont_change_like_str(test_2)
84485,"print(""Doesn't change like a imutable"", test_2)"
84486,def weightedChoice(choices):
84487,"    """"""Like random.choice, but each element can have a different chance of"
84488,    being selected.
84489,
84490,    choices can be any iterable containing iterables with two items each.
84491,"    Technically, they can have more than two items, the rest will just be"
84492,"    ignored.  The first item is the thing being chosen, the second item is"
84493,"    its weight.  The weights can be any numeric values, what matters is the"
84494,    relative differences between them.
84495,"    """""""
84496,    space = {}
84497,    current = 0
84498,"    for choice, weight in choices:"
84499,        if weight > 0:
84500,            space[current] = choice
84501,            current += weight
84502,"    rand = random.uniform(0, current)"
84503,    for key in sorted(space.keys() + [current]):
84504,        if rand < key:
84505,            return choice
84506,        choice = space[key]
84507,    return None
84508,choice
84509,from numpy.random import choice
84510,"draw = choice(list_of_candidates, number_of_items_to_pick,"
84511,              p=probability_distribution)
84512,probability_distribution
84513,list_of_candidates
84514,replace=False
84515,random.choices
84516,number_of_items_to_pick
84517,len(list_of_candidates)
84518,list_of_candidates[draw]
84519,choices()
84520,choice()
84521,choices()
84522,choice()
84523,choices
84524,random
84525,In [1]: import random
84526,
84527,In [2]: random.choices(
84528,"...:     population=[['a','b'], ['b','a'], ['c','b']],"
84529,"...:     weights=[0.2, 0.2, 0.6],"
84530,...:     k=10
84531,...: )
84532,
84533,Out[2]:
84534,"[['c', 'b'],"
84535," ['c', 'b'],"
84536," ['b', 'a'],"
84537," ['c', 'b'],"
84538," ['c', 'b'],"
84539," ['b', 'a'],"
84540," ['c', 'b'],"
84541," ['b', 'a'],"
84542," ['c', 'b'],"
84543," ['c', 'b']]"
84544,random.choices
84545,k
84546,numpy.choice
84547,replace
84548,random.choices
84549,np.random.choice
84550,random.choices
84551,random.choices
84552,def weighted_choice(choices):
84553,"   total = sum(w for c, w in choices)"
84554,"   r = random.uniform(0, total)"
84555,   upto = 0
84556,"   for c, w in choices:"
84557,      if upto + w >= r:
84558,         return c
84559,      upto += w
84560,"   assert False, ""Shouldn't get here"""
84561,upto +=w; if upto > r
84562,if r < 0
84563,r <= 0
84564,# pragma: no branch
84565,0.0 <= x < total
84566,from random import random
84567,from bisect import bisect
84568,
84569,def weighted_choice(choices):
84570,"    values, weights = zip(*choices)"
84571,    total = 0
84572,    cum_weights = []
84573,    for w in weights:
84574,        total += w
84575,        cum_weights.append(total)
84576,    x = random() * total
84577,"    i = bisect(cum_weights, x)"
84578,    return values[i]
84579,
84580,">>> weighted_choice([(""WHITE"",90), (""RED"",8), (""GREEN"",2)])"
84581,'WHITE'
84582,O(n)
84583,random()
84584,"[0.0, 1.0)"
84585,import numpy
84586,
84587,"items  = [[""item1"", 0.2], [""item2"", 0.3], [""item3"", 0.45], [""item4"", 0.05]"
84588,elems = [i[0] for i in items]
84589,probs = [i[1] for i in items]
84590,
84591,trials = 1000
84592,results = [0] * len(items)
84593,for i in range(trials):
84594,"    res = numpy.random.choice(items, p=probs)  #This is where the item is selected!"
84595,    results[items.index(res)] += 1
84596,results = [r / float(trials) for r in results]
84597,"print ""item\texpected\tactual"""
84598,for i in range(len(probs)):
84599,"    print ""%s\t%0.4f\t%0.4f"" % (items[i], probs[i], results[i])"
84600,"numpy.random.choice(items, trials, p=probs)"
84601,v3.6
84602,random.choices
84603,list
84604,"random.choices(population, weights=None, *, cum_weights=None, k=1)"
84605,list
84606,IndexError
84607,len
84608,list
84609,len()=1
84610,np.random.choice
84611,int/float/fraction
84612,Decimal
84613,>>> import random
84614,# weights being integers
84615,">>> random.choices([""white"", ""green"", ""red""], [12, 12, 4], k=10)"
84616,"['green', 'red', 'green', 'white', 'white', 'white', 'green', 'white', 'red', 'white']"
84617,# weights being floats
84618,">>> random.choices([""white"", ""green"", ""red""], [.12, .12, .04], k=10)"
84619,"['white', 'white', 'green', 'green', 'red', 'red', 'white', 'green', 'white', 'green']"
84620,# weights being fractions
84621,">>> random.choices([""white"", ""green"", ""red""], [12/100, 12/100, 4/100], k=10)"
84622,"['green', 'green', 'white', 'red', 'green', 'red', 'white', 'green', 'green', 'green']"
84623,TypeError
84624,">>> random.choices([""white"", ""green"", ""red""], k=10)"
84625,"['white', 'white', 'green', 'red', 'red', 'red', 'white', 'white', 'white', 'green']"
84626,itertools.accumulate
84627,"weights=[12, 12, 4]"
84628,"cum_weights=[12, 24, 28]"
84629,import random
84630,"weighted_choice = lambda s : random.choice(sum(([v]*wt for v,wt in s),[]))"
84631,# define choices and relative weights
84632,"choices = [(""WHITE"",90), (""RED"",8), (""GREEN"",2)]"
84633,
84634,# initialize tally dict
84635,"tally = dict.fromkeys(choices, 0)"
84636,
84637,# tally up 1000 weighted choices
84638,for i in xrange(1000):
84639,    tally[weighted_choice(choices)] += 1
84640,
84641,print tally.items()
84642,"[('WHITE', 904), ('GREEN', 22), ('RED', 74)]"
84643,"weights = [.6, .2, .001, .199]"
84644,while any(w < 1.0 for w in weights):
84645,    weights = [w*10 for w in weights]
84646,"weights = map(int, weights)"
84647,[[]]*10
84648,int
84649,[id(x) for x in ([99**99] * 100)]
84650,id
84651,"items = { ""a"": 10, ""b"": 5, ""c"": 1 } "
84652,random.choice([k for k in items for dummy in range(items[k])])
84653,[k for k in items for dummy in range(items[k])]
84654,"['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'b', 'b', 'b', 'b']"
84655,import itertools as _itertools
84656,import bisect as _bisect
84657,
84658,class Random36(random.Random):
84659,"    ""Show the code included in the Python 3.6 version of the Random class"""
84660,
84661,"    def choices(self, population, weights=None, *, cum_weights=None, k=1):"
84662,"        """"""Return a k sized list of population elements chosen with replacement."
84663,
84664,"        If the relative weights or cumulative weights are not specified,"
84665,        the selections are made with equal probability.
84666,
84667,"        """""""
84668,        random = self.random
84669,        if cum_weights is None:
84670,            if weights is None:
84671,                _int = int
84672,                total = len(population)
84673,                return [population[_int(random() * total)] for i in range(k)]
84674,            cum_weights = list(_itertools.accumulate(weights))
84675,        elif weights is not None:
84676,            raise TypeError('Cannot specify both weights and cumulative weights')
84677,        if len(cum_weights) != len(population):
84678,            raise ValueError('The number of weights does not match the population')
84679,        bisect = _bisect.bisect
84680,        total = cum_weights[-1]
84681,"        return [population[bisect(cum_weights, random() * total)] for i in range(k)]"
84682,"np.random.choice(['A', 'B', 'C'], p=[0.3, 0.4, 0.3])"
84683,import numpy as np
84684,"w=np.array([ 0.4,  0.8,  1.6,  0.8,  0.4])"
84685,"np.random.choice(w, p=w/sum(w))"
84686,def choose_index(probabilies):
84687,    cmf = probabilies[0]
84688,    choice = random.random()
84689,    for k in xrange(len(probabilies)):
84690,        if choice <= cmf:
84691,            return k
84692,        else:
84693,            cmf += probabilies[k+1]
84694,def choose_index(weights):
84695,    probabilities = weights / sum(weights)
84696,    cmf = probabilies[0]
84697,    choice = random.random()
84698,    for k in xrange(len(probabilies)):
84699,        if choice <= cmf:
84700,            return k
84701,        else:
84702,            cmf += probabilies[k+1]
84703,np.random.choice
84704,probabilities = weights / sum(weights)
84705,probabilities
84706,weights
84707,"[1,1,1,1,1,1,1]"
84708,probabilities
84709,random.random
84710,choice <= cmf
84711,# run only when `choices` changes.
84712,"preprocessed_data = prep(weight for _,weight in choices)"
84713,
84714,# O(1) selection
84715,value = choices[sample(preprocessed_data)][0]
84716,numpy
84717,"import itertools, bisect, random"
84718,
84719,def weighted_choice(choices):
84720,   weights = list(zip(*choices))[1]
84721,"   return choices[bisect.bisect(list(itertools.accumulate(weights)),"
84722,"                                random.uniform(0, sum(weights)))][0]"
84723,import random
84724,import bisect
84725,
84726,try:
84727,    range = xrange
84728,except:
84729,    pass
84730,
84731,def weighted_choice(choices):
84732,"    total, cumulative = 0, []"
84733,"    for c,w in choices:"
84734,        total += w
84735,"        cumulative.append((total, c))"
84736,"    r = random.uniform(0, total)"
84737,    # return index
84738,"    return bisect.bisect(cumulative, (r,))"
84739,    # return item string
84740,"    #return choices[bisect.bisect(cumulative, (r,))][0]"
84741,
84742,# define choices and relative weights
84743,"choices = [(""WHITE"",90), (""RED"",8), (""GREEN"",2)]"
84744,
84745,tally = [0 for item in choices]
84746,
84747,n = 100000
84748,# tally up n weighted choices
84749,for i in range(n):
84750,    tally[weighted_choice(choices)] += 1
84751,
84752,print([t/sum(tally)*100 for t in tally])
84753,import random
84754,"def weighted_choice(choices, weights):"
84755,    total = sum(weights)
84756,"    treshold = random.uniform(0, total)"
84757,"    for k, weight in enumerate(weights):"
84758,        total -= weight
84759,        if total < treshold:
84760,            return choices[k]
84761,import numpy as np
84762,
84763,"def weighted_choice(weights, n=1):"
84764,    if np.sum(weights)!=1:
84765,        weights = weights/np.sum(weights)
84766,
84767,    draws = np.random.random_sample(size=n)
84768,
84769,    weights = np.cumsum(weights)
84770,"    weights = np.insert(weights,0,0.0)"
84771,
84772,"    counts = np.histogram(draws, bins=weights)"
84773,    return(counts[0])
84774,np.random.choice()
84775,O(K(n + log(n)))
84776,n
84777,O(log(n))
84778,O(n+K*log(n))
84779,import numpy as np
84780,
84781,"n,k = 10**6,10**3"
84782,
84783,# Create dummy distribution
84784,a = np.array([i+1 for i in range(n)])
84785,p = np.array([1.0/n]*n)
84786,
84787,cfd = p.cumsum()
84788,for _ in range(k):
84789,    x = np.random.uniform()
84790,"    idx = cfd.searchsorted(x, side='right')"
84791,    sampled_element = a[idx]
84792,%
84793,while w[index] < beta:
84794,    beta = beta - w[index]
84795,    index = index + 1
84796,
84797,select p[index]
84798,import numpy as np
84799,"weights = [0.1, 0.3, 0.5] #weights for the item at index 0,1,2"
84800,"# sum of weights should be <=1, you can also divide each weight by sum of all weights to standardise it to <=1 constraint."
84801,trials = 1 #number of trials
84802,num_item = 1 #number of items that can be picked in each trial
84803,"selected_item_arr = np.random.multinomial(num_item, weights, trials)"
84804,# gives number of times an item was selected at a particular index
84805,# this assumes selection with replacement
84806,# one possible output
84807,# selected_item_arr
84808,"# array([[0, 0, 1]])"
84809,"# say if trials = 5, the the possible output could be "
84810,# selected_item_arr
84811,"# array([[1, 0, 0],"
84812,"#   [0, 0, 1],"
84813,"#   [0, 0, 1],"
84814,"#   [0, 1, 0],"
84815,"#   [0, 0, 1]])"
84816,num_item = 3
84817,trials = 1
84818,"selected_item_arr = np.random.multinomial(num_item, weights, trials)"
84819,# selected_item_arr can give output like :
84820,"# array([[1, 0, 2]])"
84821,num_binomial_trial = 5
84822,"weights = [0.1,0.9] #say an unfair coin weights for H/T"
84823,num_experiment_set = 1
84824,"selected_item_arr = np.random.multinomial(num_binomial_trial, weights, num_experiment_set)"
84825,# possible output
84826,# selected_item_arr
84827,"# array([[1, 4]])"
84828,# i.e H came 1 time and T came 4 times in 5 binomial trials. And one set contains 5 binomial trails.
84829,def rand_weighted(weights):
84830,"    """""""
84831,    Generator which uses the weights to generate a
84832,    weighted random values
84833,"    """""""
84834,    sum_weights = sum(weights.values())
84835,    cum_weights = {}
84836,    current_weight = 0
84837,"    for key, value in sorted(weights.iteritems()):"
84838,        current_weight += value
84839,        cum_weights[key] = current_weight
84840,    while True:
84841,"        sel = int(random.uniform(0, 1) * sum_weights)"
84842,"        for key, value in sorted(cum_weights.iteritems()):"
84843,            if sel < value:
84844,                break
84845,        yield key
84846,"def choice(items, weights):"
84847,    return items[np.argmin((np.cumsum(weights) / sum(weights)) < np.random.rand())]
84848,np.random.choice
84849,def weighted_choice(weighted_dict):
84850,"    """"""Input example: dict(apples=60, oranges=30, pineapples=10)"""""""
84851,    weight_list = []
84852,    for key in weighted_dict.keys():
84853,        weight_list += [key] * weighted_dict[key]
84854,    return random.choice(weight_list)
84855,random.choices
84856,"import random, string"
84857,from numpy import cumsum
84858,
84859,class randomChoiceWithProportions:
84860,    '''
84861,    Accepts a dictionary of choices as keys and weights as values. Example if you want a unfair dice:
84862,
84863,
84864,"    choiceWeightDic = {""1"":0.16666666666666666, ""2"": 0.16666666666666666, ""3"": 0.16666666666666666"
84865,"    , ""4"": 0.16666666666666666, ""5"": .06666666666666666, ""6"": 0.26666666666666666}"
84866,    dice = randomChoiceWithProportions(choiceWeightDic)
84867,
84868,    samples = []
84869,    for i in range(100000):
84870,        samples.append(dice.sample())
84871,
84872,    # Should be close to .26666
84873,"    samples.count(""6"")/len(samples)"
84874,
84875,    # Should be close to .16666
84876,"    samples.count(""1"")/len(samples)"
84877,    '''
84878,"    def __init__(self, choiceWeightDic):"
84879,        self.choiceWeightDic = choiceWeightDic
84880,        weightSum = sum(self.choiceWeightDic.values())
84881,"        assert weightSum == 1, 'Weights sum to ' + str(weightSum) + ', not 1.'"
84882,        self.valWeightDict = self._compute_valWeights()
84883,
84884,    def _compute_valWeights(self):
84885,        valWeights = list(cumsum(list(self.choiceWeightDic.values())))
84886,"        valWeightDict = dict(zip(list(self.choiceWeightDic.keys()), valWeights))"
84887,        return valWeightDict
84888,
84889,    def sample(self):
84890,"        num = random.uniform(0,1)"
84891,"        for key, val in self.valWeightDict.items():"
84892,            if val >= num:
84893,                return key
84894,import random
84895,
84896,"options = ['a', 'b', 'c', 'd']"
84897,"weights = [1, 2, 5, 2]"
84898,
84899,"weighted_options = [[opt]*wgt for opt, wgt in zip(options, weights)]"
84900,weighted_options = [opt for sublist in weighted_options for opt in sublist]
84901,print(weighted_options)
84902,
84903,# test
84904,
84905,counts = {c: 0 for c in options}
84906,for x in range(10000):
84907,    counts[random.choice(weighted_options)] += 1
84908,
84909,"for opt, wgt in zip(options, weights):"
84910,    wgt_r = counts[opt] / 10000 * sum(weights)
84911,"    print(opt, counts[opt], wgt, wgt_r)"
84912,"['a', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'd', 'd']"
84913,a 1025 1 1.025
84914,b 1948 2 1.948
84915,c 5019 5 5.019
84916,d 2008 2 2.008
84917,k=10
84918,"soup_items = ['pepper', 'onion', 'tomato', 'celery'] "
84919,"items_probability = [0.2, 0.3, 0.9, 0.1]"
84920,
84921,"selected_items = [item for item,p in zip(soup_items,items_probability) if random.random()<p]"
84922,print(selected_items)
84923,">>>['pepper','tomato']"
84924,F
84925,u
84926,z=F^{-1}(u)
84927,class A(object):
84928,    foo = 5   # some default value
84929,class B(object):
84930,"    def __init__(self, foo=5):"
84931,        self.foo = foo
84932,>>> class A: foo = []
84933,">>> a, b = A(), A()"
84934,>>> a.foo.append(5)
84935,>>> b.foo
84936,[5]
84937,>>> class A:
84938,...  def __init__(self): self.foo = []
84939,">>> a, b = A(), A()"
84940,>>> a.foo.append(5)
84941,>>> b.foo    
84942,[]
84943,int
84944,str
84945,int
84946,str
84947,is
84948,id
84949,__dict__
84950,__dict__
84951,a.foo = 5
84952,b.foo
84953,[]
84954,a.foo
84955,>>> class A(object): foo = 5
84956,">>> a, b = A(), A()"
84957,>>> a.foo = 10
84958,>>> b.foo
84959,5
84960,a.foo.append(5)
84961,a.foo
84962,a.foo = 5
84963,a.foo
84964,5
84965,a.foo = 5
84966,b.foo
84967,class Bar(object):
84968,    ## No need for dot syntax
84969,    class_var = 1
84970,
84971,"    def __init__(self, i_var):"
84972,        self.i_var = i_var
84973,
84974,## Need dot syntax as we've left scope of class namespace
84975,Bar.class_var
84976,## 1
84977,foo = MyClass(2)
84978,
84979,## Finds i_var in foo's instance namespace
84980,foo.i_var
84981,## 2
84982,
84983,## Doesn't find class_var in instance namespace…
84984,## So look's in class namespace (Bar.__dict__)
84985,foo.class_var
84986,## 1
84987,foo = Bar(2)
84988,foo.class_var
84989,## 1
84990,Bar.class_var = 2
84991,foo.class_var
84992,## 2
84993,foo = Bar(2)
84994,foo.class_var
84995,## 1
84996,foo.class_var = 2
84997,foo.class_var
84998,## 2
84999,Bar.class_var
85000,## 1
85001,class Circle(object):
85002,     pi = 3.14159
85003,
85004,"     def __init__(self, radius):"
85005,          self.radius = radius   
85006,    def area(self):
85007,         return Circle.pi * self.radius * self.radius
85008,
85009,Circle.pi
85010,## 3.14159
85011,c = Circle(10)
85012,c.pi
85013,## 3.14159
85014,c.area()
85015,## 314.159
85016,class MyClass(object):
85017,    limit = 10
85018,
85019,    def __init__(self):
85020,        self.data = []
85021,"    def item(self, i):"
85022,        return self.data[i]
85023,
85024,"    def add(self, e):"
85025,        if len(self.data) >= self.limit:
85026,"            raise Exception(""Too many elements"")"
85027,        self.data.append(e)
85028,
85029, MyClass.limit
85030, ## 10
85031,id
85032,is
85033,>>> class A: foo = object()
85034,">>> a, b = A(), A()"
85035,>>> a.foo is b.foo
85036,True
85037,>>> class A:
85038,...     def __init__(self): self.foo = object()
85039,">>> a, b = A(), A()"
85040,>>> a.foo is b.foo
85041,False
85042,object()
85043,5
85044,5
85045,5
85046,object()
85047,a.foo.append(5)
85048,b.foo
85049,a.foo = 5
85050,a.foo = 5
85051,b.foo
85052,a.foo = 5
85053,a.foo
85054,5
85055,b.foo
85056,a.foo
85057,shared_ptr<T>
85058,T
85059,# -*- encoding: utf-8 -*-
85060,
85061,
85062,class RevealAccess(object):
85063,"    def __init__(self, initval=None, name='var'):"
85064,        self.val = initval
85065,        self.name = name
85066,
85067,"    def __get__(self, obj, objtype):"
85068,        return self.val
85069,
85070,
85071,class Base(object):
85072,"    attr_1 = RevealAccess(10, 'var ""x""')"
85073,
85074,    def __init__(self):
85075,"        self.attr_2 = RevealAccess(10, 'var ""x""')"
85076,
85077,
85078,def main():
85079,    b = Base()
85080,"    print(""Access to class attribute, return: "", Base.attr_1)"
85081,"    print(""Access to instance attribute, return: "", b.attr_2)"
85082,
85083,if __name__ == '__main__':
85084,    main()
85085,"('Access to class attribute, return: ', 10)"
85086,"('Access to instance attribute, return: ', <__main__.RevealAccess object at 0x10184eb50>)"
85087,__get__
85088,__set__
85089,__get__
85090,"re.search(pattern, cell_in_question) "
85091,"df[df['A'] == ""hello world""]"
85092,'hello'
85093,"df[df['A'].str.contains(""hello"")]"
85094,"df[df['A'].str.contains(""Hello|Britain"")]"
85095,.str.contains
85096,.query()
85097,df[df['value'].astype(str).str.contains('1234.+')]
85098,"df[df[""A""].str.contains(""Hello|Britain"")]"
85099,"df[df['A'].str.contains(""Hello|Britain"")==True]"
85100,"df[df['A'].astype(str).str.contains(""Hello|Britain"")]"
85101,df1[df1['col'].str.contains(r'foo(?!$)')]
85102,isin
85103,df4[df4['col'].str.contains(r'foo|baz')]
85104,df3[df3['col'].str.contains(r'\bblue\b')]
85105,"str.contains('pattern',na=False)"
85106,# setup
85107,"df1 = pd.DataFrame({'col': ['foo', 'foobar', 'bar', 'baz']})"
85108,df1
85109,
85110,      col
85111,0     foo
85112,1  foobar
85113,2     bar
85114,3     baz
85115,str.contains
85116,"# find rows in `df1` which contain ""foo"" followed by something"
85117,df1[df1['col'].str.contains(r'foo(?!$)')]
85118,
85119,      col
85120,1  foobar
85121,regex=False
85122,"#select all rows containing ""foo"""
85123,"df1[df1['col'].str.contains('foo', regex=False)]"
85124,# same as df1[df1['col'].str.contains('foo')] but faster.
85125,   
85126,      col
85127,0     foo
85128,1  foobar
85129,"df2 = pd.concat([df1] * 1000, ignore_index=True)"
85130,
85131,%timeit df2[df2['col'].str.contains('foo')]
85132,"%timeit df2[df2['col'].str.contains('foo', regex=False)]"
85133,
85134,"6.31 ms ± 126 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
85135,"2.8 ms ± 241 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
85136,ValueError
85137,ValueError: cannot index with vector containing NA / NaN values
85138,"s = pd.Series(['foo', 'foobar', np.nan, 'bar', 'baz', 123])"
85139,s.str.contains('foo|bar')
85140,
85141,0     True
85142,1     True
85143,2      NaN
85144,3     True
85145,4    False
85146,5      NaN
85147,dtype: object
85148,
85149,
85150,s[s.str.contains('foo|bar')]
85151,# ---------------------------------------------------------------------------
85152,# ValueError                                Traceback (most recent call last)
85153,na=False
85154,"s.str.contains('foo|bar', na=False)"
85155,
85156,0     True
85157,1     True
85158,2    False
85159,3     True
85160,4    False
85161,5    False
85162,dtype: bool
85163,DataFrame.apply
85164,# `axis=1` tells `apply` to apply the lambda function column-wise.
85165,"df.apply(lambda col: col.str.contains('foo|bar', na=False), axis=1)"
85166,
85167,       A      B
85168,0   True   True
85169,1   True  False
85170,2  False   True
85171,3   True  False
85172,4  False  False
85173,5  False  False
85174,apply
85175,select_dtypes
85176,# Slightly modified example.
85177,"df4 = pd.DataFrame({'col': ['foo abc', 'foobar xyz', 'bar32', 'baz 45']})"
85178,df4
85179,
85180,          col
85181,0     foo abc
85182,1  foobar xyz
85183,2       bar32
85184,3      baz 45
85185,
85186,df4[df4['col'].str.contains(r'foo|baz')]
85187,
85188,          col
85189,0     foo abc
85190,1  foobar xyz
85191,3      baz 45
85192,"terms = ['foo', 'baz']"
85193,df4[df4['col'].str.contains('|'.join(terms))]
85194,
85195,          col
85196,0     foo abc
85197,1  foobar xyz
85198,3      baz 45
85199,. ^ $ * + ? { } [ ] \ | ( )
85200,re.escape
85201,import re
85202,"df4[df4['col'].str.contains('|'.join(map(re.escape, terms)))]"
85203,
85204,          col
85205,0     foo abc
85206,1  foobar xyz
85207,3      baz 45
85208,re.escape
85209,re.escape(r'.foo^')
85210,# '\\.foo\\^'
85211,\b
85212,"df3 = pd.DataFrame({'col': ['the sky is blue', 'bluejay by the window']})"
85213,df3
85214,
85215,                     col
85216,0        the sky is blue
85217,1  bluejay by the window
85218, 
85219,df3[df3['col'].str.contains('blue')]
85220,
85221,                     col
85222,0        the sky is blue
85223,1  bluejay by the window
85224,df3[df3['col'].str.contains(r'\bblue\b')]
85225,
85226,               col
85227,0  the sky is blue
85228,\b
85229,"p = r'\b(?:{})\b'.format('|'.join(map(re.escape, terms)))"
85230,df4[df4['col'].str.contains(p)]
85231,
85232,       col
85233,0  foo abc
85234,3   baz 45
85235,p
85236,p
85237,# '\\b(?:foo|baz)\\b'
85238,"df1[df1['col'].str.contains('foo', regex=False)]"
85239,in
85240,df1[['foo' in x for x in df1['col']]]
85241,
85242,       col
85243,0  foo abc
85244,1   foobar
85245,regex_pattern = r'foo(?!$)'
85246,df1[df1['col'].str.contains(regex_pattern)]
85247,re.compile
85248,Pattern.search
85249,"p = re.compile(regex_pattern, flags=re.IGNORECASE)"
85250,df1[[bool(p.search(x)) for x in df1['col']]]
85251,
85252,      col
85253,1  foobar
85254,"df1[df1['col'].str.contains(regex_pattern, na=False)]"
85255,"def try_search(p, x):"
85256,    try:
85257,        return bool(p.search(x))
85258,    except TypeError:
85259,        return False
85260,
85261,p = re.compile(regex_pattern)
85262,"df1[[try_search(p, x) for x in df1['col']]]"
85263,
85264,      col
85265,1  foobar
85266, 
85267,np.char.find
85268,np.vectorize
85269,DataFrame.query
85270,str.contains
85271,np.char.find
85272,"df4[np.char.find(df4['col'].values.astype(str), 'foo') > -1]"
85273,
85274,          col
85275,0     foo abc
85276,1  foobar xyz
85277,np.vectorize
85278,str
85279,"f = np.vectorize(lambda haystack, needle: needle in haystack)"
85280,"f(df1['col'], 'foo')"
85281,"# array([ True,  True, False, False])"
85282,
85283,"df1[f(df1['col'], 'foo')]"
85284,
85285,       col
85286,0  foo abc
85287,1   foobar
85288,regex_pattern = r'foo(?!$)'
85289,p = re.compile(regex_pattern)
85290,f = np.vectorize(lambda x: pd.notna(x) and bool(p.search(x)))
85291,df1[f(df1['col'])]
85292,
85293,      col
85294,1  foobar
85295,DataFrame.query
85296,"df1.query('col.str.contains(""foo"")', engine='python')"
85297,
85298,      col
85299,0     foo
85300,1  foobar
85301,query
85302,eval
85303,str.contains
85304,np.vectorize
85305,df.query
85306,"any(needle in haystack for needling in ['foo', 'bar'] and haystack in (df['col'], df['col2']))"
85307,any()
85308,"df[['col1', 'col2']].apply(lambda x: x.str.contains('foo|bar')).any(axis=1)"
85309,df.filter(like='hello')  # select columns which contain the word hello
85310,axis=0
85311,# selects rows which contain the word hello in their index label
85312,"df.filter(like='hello', axis=0)  "
85313,"df.loc[:, df.columns.str.contains('a')]"
85314,df.filter(like='a')
85315,df['stridx']=df.index
85316,"df[df['stridx'].str.contains(""Hello|Britain"")]"
85317,to_series
85318,df[df.index.str.contains('Hello|Britain')]
85319,DataFrame
85320,">>> df = pd.DataFrame([['hello', 'hello world'], ['abcd', 'defg']], columns=['a','b'])"
85321,>>> df
85322,       a            b
85323,0  hello  hello world
85324,1   abcd         defg
85325,in
85326,">>> df.apply(lambda x: x['a'] in x['b'], axis=1)"
85327,0     True
85328,1    False
85329,dtype: bool
85330,axis=1
85331,apply
85332,"df[df['A'].str.contains(""hello"", case=False)]"
85333,"df[df['A'].astype(str).str.contains(""Hello|Britain"")]"
85334,df
85335,df
85336,df
85337,mask = df['ENTITY'].str.contains('DM')
85338,
85339,df = df.loc[~(mask)].copy(deep=True)
85340,"def stringSearchColumn_DataFrame(df, colName, regex):"
85341,    newdf = DataFrame()
85342,"    for idx, record in df[colName].iteritems():"
85343,
85344,"        if re.search(regex, record):"
85345,"            newdf = concat([df[df[colName] == record], newdf], ignore_index=True)"
85346,
85347,    return newdf
85348,"df[df['A'].str.find(""hello"") != -1]"
85349,"df = pd.DataFrame([('cat andhat', 1000.0), ('hat', 2000000.0), ('the small dog', 1000.0), ('fog', 330000.0),('pet', 330000.0)], columns=['col1', 'col2'])"
85350,searchfor = '.*cat.*hat.*|.*the.*dog.*'
85351,"df[""TrueFalse""]=df['col1'].str.contains(searchfor, regex=True)"
85352,
85353,    col1             col2           TrueFalse
85354,0   cat andhat       1000.0         True
85355,1   hat              2000000.0      False
85356,2   the small dog    1000.0         True
85357,3   fog              330000.0       False
85358,4   pet 3            30000.0        False
85359,"df[df.apply(lambda row: row.astype(str).str.contains('String To Find').any(), axis=1)]"
85360,"df.query('A.str.contains(""hello"").values')"
85361,"df.filter(regex="".*STRING_YOU_LOOK_FOR.*"")"
85362,sale_method = pd.DataFrame(model_data['Sale Method'].str.upper())
85363,sale_method['sale_classification'] = \
85364,"    np.where(sale_method['Sale Method'].isin(['PRIVATE']),"
85365,"             'private',"
85366,             np.where(sale_method['Sale Method']
85367,"                      .str.contains('AUCTION'),"
85368,"                      'auction',"
85369,                      'other'
85370,             )
85371,    )
85372,accented_string = u'Málaga'
85373,# accented_string is of type 'unicode'
85374,import unidecode
85375,unaccented_string = unidecode.unidecode(accented_string)
85376,# unaccented_string contains 'Malaga'and is of type 'str'
85377,unidecode
85378,°
85379,deg
85380,import unicodedata
85381,def strip_accents(s):
85382,"   return ''.join(c for c in unicodedata.normalize('NFD', s)"
85383,                  if unicodedata.category(c) != 'Mn')
85384,">>> strip_accents(u""A \u00c0 \u0394 \u038E"")"
85385,u'A A \u0394 \u03a5'
85386,>>> 
85387,Nonspacing_Mark
85388,unicodedata.name
85389,A
85390,import unicodedata
85391,
85392,def remove_accents(input_str):
85393,"    nfkd_form = unicodedata.normalize('NFKD', input_str)"
85394,"    only_ascii = nfkd_form.encode('ASCII', 'ignore')"
85395,    return only_ascii
85396,import unicodedata
85397,
85398,def remove_accents(input_str):
85399,"    nfkd_form = unicodedata.normalize('NFKD', input_str)"
85400,"    return u"""".join([c for c in nfkd_form if not unicodedata.combining(c)])"
85401,unicodedata.combining(c)
85402,c
85403,remove_accents
85404,"encoding = ""utf-8"" # or iso-8859-15, or cp1252, or whatever encoding you use"
85405,"byte_string = b""café""  # or simply ""café"" before python 3."
85406,unicode_string = byte_string.decode(encoding)
85407,"nkfd_form = unicodedata.normalize('NFKD', unicode(input_str, 'utf8'))"
85408,", 'utf8'"
85409,input_str
85410,remove_accents
85411,remove_accents
85412,ascii
85413,import re
85414,import unicodedata
85415,
85416,def strip_accents(text):
85417,"    """""""
85418,    Strip accents from input String.
85419,
85420,    :param text: The input string.
85421,    :type text: String.
85422,
85423,    :returns: The processed String.
85424,    :rtype: String.
85425,"    """""""
85426,    try:
85427,"        text = unicode(text, 'utf-8')"
85428,"    except (TypeError, NameError): # unicode is a default on python 3 "
85429,        pass
85430,"    text = unicodedata.normalize('NFD', text)"
85431,"    text = text.encode('ascii', 'ignore')"
85432,"    text = text.decode(""utf-8"")"
85433,    return str(text)
85434,
85435,def text_to_id(text):
85436,"    """""""
85437,    Convert input text to id.
85438,
85439,    :param text: The input string.
85440,    :type text: String.
85441,
85442,    :returns: The processed String.
85443,    :rtype: String.
85444,"    """""""
85445,    text = strip_accents(text.lower())
85446,"    text = re.sub('[ ]+', '_', text)"
85447,"    text = re.sub('[^0-9a-zA-Z_-]', '', text)"
85448,    return text
85449,"text_to_id(""Montréal, über, 12.89, Mère, Françoise, noël, 889"")"
85450,>>> 'montreal_uber_1289_mere_francoise_noel_889'
85451,"text = unicode(text, 'utf-8')"
85452,except TypeError: pass
85453,import unicodedata as ud
85454,
85455,def rmdiacritics(char):
85456,    '''
85457,"    Return the base character of char, by ""removing"" any"
85458,    diacritics like accents or curls and strokes and the like.
85459,    '''
85460,    desc = ud.name(char)
85461,    cutoff = desc.find(' WITH ')
85462,    if cutoff != -1:
85463,        desc = desc[:cutoff]
85464,        try:
85465,            char = ud.lookup(desc)
85466,        except KeyError:
85467,"            pass  # removing ""WITH ..."" produced an invalid name"
85468,    return char
85469,unicode
85470,find
85471,unicode
85472,unidecode
85473,accented_string = u'Málagueña'
85474,# accented_string is of type 'unicode'
85475,import unidecode
85476,unaccented_string = unidecode.unidecode(accented_string)
85477,# unaccented_string contains 'Malaguena'and is of type 'str'
85478,def f_remove_accents(old):
85479,"    """""""
85480,"    Removes common accent characters, lower form."
85481,    Uses: regex.
85482,"    """""""
85483,    new = old.lower()
85484,"    new = re.sub(r'[àáâãäå]', 'a', new)"
85485,"    new = re.sub(r'[èéêë]', 'e', new)"
85486,"    new = re.sub(r'[ìíîï]', 'i', new)"
85487,"    new = re.sub(r'[òóôõö]', 'o', new)"
85488,"    new = re.sub(r'[ùúûü]', 'u', new)"
85489,    return new
85490,'Sef chomutovskych komunistu dostal postou bily prasek'
85491,'ł'
85492,''
85493,'l'
85494,deaccent
85495,ł
85496,l
85497,NumPy
85498,SciPy
85499,test.txt
85500,2
85501,3
85502,import sys 
85503,reload(sys) 
85504,"sys.setdefaultencoding(""utf-8"")"
85505,import csv
85506,import unicodedata
85507,
85508,def remove_accents(input_str):
85509,"    nkfd_form = unicodedata.normalize('NFKD', unicode(input_str))"
85510,"    return u"""".join([c for c in nkfd_form if not unicodedata.combining(c)])"
85511,
85512,with open('test.txt') as f:
85513,    read = csv.reader(f)
85514,    for row in read:
85515,        for element in row:
85516,            print remove_accents(element)
85517,Montreal
85518,uber
85519,12.89
85520,Mere
85521,Francoise
85522,noel
85523,889
85524,remove_accents
85525,unicode(input_str)
85526,remove_accents
85527,element
85528,"element.decode(""utf-8"")"
85529,iso-8859-1
85530,"reload(sys); sys.setdefaultencoding(""utf-8"")"
85531,import unicodedata
85532,from random import choice
85533,
85534,import perfplot
85535,import regex
85536,import text_unidecode
85537,
85538,
85539,def remove_accent_chars_regex(x: str):
85540,"    return regex.sub(r'\p{Mn}', '', unicodedata.normalize('NFKD', x))"
85541,
85542,
85543,def remove_accent_chars_join(x: str):
85544,    # answer by MiniQuark
85545,    # https://stackoverflow.com/a/517974/7966259
85546,"    return u"""".join([c for c in unicodedata.normalize('NFKD', x) if not unicodedata.combining(c)])"
85547,
85548,
85549,perfplot.show(
85550,"    setup=lambda n: ''.join([choice('Málaga François Phút Hơn 中文') for i in range(n)]),"
85551,    kernels=[
85552,"        remove_accent_chars_regex,"
85553,"        remove_accent_chars_join,"
85554,"        text_unidecode.unidecode,"
85555,"    ],"
85556,"    labels=['regex', 'join', 'unidecode'],"
85557,"    n_range=[2 ** k for k in range(22)],"
85558,"    equality_check=None, relative_to=0, xlabel='str len'"
85559,)
85560,unidecode
85561,"def strip_accents(string, accents=('COMBINING ACUTE ACCENT', 'COMBINING GRAVE ACCENT', 'COMBINING TILDE')):"
85562,"    accents = set(map(unicodedata.lookup, accents))"
85563,"    chars = [c for c in unicodedata.normalize('NFD', string) if c not in accents]"
85564,"    return unicodedata.normalize('NFC', ''.join(chars))"
85565,asciifolding
85566,from fold_to_ascii import fold
85567,s = u'Astroturf® paté'
85568,fold(s)
85569,> u'Astroturf pate'
85570,"fold(s, u'?')"
85571,> u'Astroturf? pate'
85572,fold_to_ascii
85573,remove_accent_chars_regex
85574,"from sklearn.feature_extraction.text import strip_accents_ascii, strip_accents_unicode"
85575,
85576,accented_string = u'Málagueña®'
85577,
85578,print(strip_accents_unicode(accented_string)) # output: Malaguena®
85579,print(strip_accents_ascii(accented_string)) # output: Malaguena
85580,strip_accents='ascii'
85581,strip_accents_ascii
85582,strip_accents='unicode'
85583,strip_accents_unicode
85584,Signature: strip_accents_ascii(s)
85585,Transform accentuated unicode symbols into ascii or nothing
85586,
85587,Warning: this solution is only suited for languages that have a direct
85588,transliteration to ASCII symbols.
85589,Signature: strip_accents_unicode(s)
85590,Transform accentuated unicode symbols into their simple counterpart
85591,
85592,Warning: the python-level loop and join operations make this
85593,implementation 20 times slower than the strip_accents_ascii basic
85594,normalization.
85595,"""à"""
85596,"""a"""
85597,unicodedata
85598,"""æ"""
85599,"""ae"""
85600,"from unicodedata import combining, normalize"
85601,
85602,"LATIN = ""ä  æ  ǽ  đ ð ƒ ħ ı ł ø ǿ ö  œ  ß  ŧ ü """
85603,"ASCII = ""ae ae ae d d f h i l o o oe oe ss t ue"""
85604,
85605,"def remove_diacritics(s, outliers=str.maketrans(dict(zip(LATIN.split(), ASCII.split())))):"
85606,"    return """".join(c for c in normalize(""NFD"", s.lower().translate(outliers)) if not combining(c))"
85607,outliers
85608,"sorted(['cote', 'coteau', ""crottez"", 'crotté', 'côte', 'côté'], key=remove_diacritics)"
85609,"['cote', 'côte', 'côté', 'coteau', 'crotté', 'crottez']"
85610,remove_diacritics()
85611,string_to_pairs()
85612,examples = [
85613,"    (""hello, world"", ""hello, world""),"
85614,"    (""42"", ""42""),"
85615,"    (""你好，世界"", ""你好，世界""),"
85616,    (
85617,"        ""Dès Noël, où un zéphyr haï me vêt de glaçons würmiens, je dîne d’exquis rôtis de bœuf au kir, à l’aÿ d’âge mûr, &cætera."","
85618,"        ""des noel, ou un zephyr hai me vet de glacons wuermiens, je dine d’exquis rotis de boeuf au kir, a l’ay d’age mur, &caetera."","
85619,"    ),"
85620,    (
85621,"        ""Falsches Üben von Xylophonmusik quält jeden größeren Zwerg."","
85622,"        ""falsches ueben von xylophonmusik quaelt jeden groesseren zwerg."","
85623,"    ),"
85624,    (
85625,"        ""Љубазни фењерџија чађавог лица хоће да ми покаже штос."","
85626,"        ""љубазни фењерџија чађавог лица хоће да ми покаже штос."","
85627,"    ),"
85628,    (
85629,"        ""Ljubazni fenjerdžija čađavog lica hoće da mi pokaže štos."","
85630,"        ""ljubazni fenjerdzija cadavog lica hoce da mi pokaze stos."","
85631,"    ),"
85632,    (
85633,"        ""Quizdeltagerne spiste jordbær med fløde, mens cirkusklovnen Walther spillede på xylofon."","
85634,"        ""quizdeltagerne spiste jordbaer med flode, mens cirkusklovnen walther spillede pa xylofon."","
85635,"    ),"
85636,    (
85637,"        ""Kæmi ný öxi hér ykist þjófum nú bæði víl og ádrepa."","
85638,"        ""kaemi ny oexi her ykist þjofum nu baedi vil og adrepa."","
85639,"    ),"
85640,    (
85641,"        ""Glāžšķūņa rūķīši dzērumā čiepj Baha koncertflīģeļu vākus."","
85642,"        ""glazskuna rukisi dzeruma ciepj baha koncertfligelu vakus."","
85643,    )
85644,]
85645,
85646,"for (given, expected) in examples:"
85647,    assert remove_diacritics(given) == expected
85648,"LATIN = ""ä  æ  ǽ  đ ð ƒ ħ ı ł ø ǿ ö  œ  ß  ŧ ü  Ä  Æ  Ǽ  Đ Ð Ƒ Ħ I Ł Ø Ǿ Ö  Œ  SS Ŧ Ü """
85649,"ASCII = ""ae ae ae d d f h i l o o oe oe ss t ue AE AE AE D D F H I L O O OE OE SS T UE"""
85650,
85651,"def remove_diacritics(s, outliers=str.maketrans(dict(zip(LATIN.split(), ASCII.split())))):"
85652,"    return """".join(c for c in normalize(""NFD"", s.translate(outliers)) if not combining(c))"
85653,"var array1 = [1, 2, 3];"
85654,"var array2 = ['a','b','c'];"
85655,"var array3 = [4, 5, 6];"
85656,"var outputArray = [[1,'a',4], [2,'b',5], [3,'c',6]]"
85657,forEach
85658,reduce
85659,map
85660,every
85661,zip
85662,flatMap
85663,"zip= rows=>rows[0].map((_,c)=>rows.map(row=>row[c]))"
85664,zip(*args)
85665,"> zip([['row0col0', 'row0col1', 'row0col2'],"
85666,"       ['row1col0', 'row1col1', 'row1col2']]);"
85667,"[[""row0col0"",""row1col0""],"
85668," [""row0col1"",""row1col1""],"
85669," [""row0col2"",""row1col2""]]"
85670,zip(zip(x))
85671,x
85672,zip(...zip(...x))==x
85673,zip(*zip(*x))==x
85674,zip
85675,"> zip = (...rows) => [...rows[0]].map((_,c) => rows.map(row => row[c]))"
85676,"> zip( ['row0col0', 'row0col1', 'row0col2'] ,"
85677,"       ['row1col0', 'row1col1', 'row1col2'] );"
85678,"             // note zip(row0,row1), not zip(matrix)"
85679,same answer as above
85680,...
85681,function zip(arrays) {
85682,"    return arrays[0].map(function(_,i){"
85683,        return arrays.map(function(array){return array[i]})
85684,    });
85685,}
85686,
85687,"// > zip([[1,2],[11,22],[111,222]])"
85688,"// [[1,11,111],[2,22,222]]]"
85689,
85690,// If you believe the following is a valid return value:
85691,//   > zip([])
85692,//   []
85693,"// then you can special-case it, or just do"
85694,//  return arrays.length==0 ? [] : arrays[0].map(...)
85695,zip
85696,function zip() {
85697,    var args = [].slice.call(arguments);
85698,"    var shortest = args.length==0 ? [] : args.reduce(function(a,b){"
85699,        return a.length<b.length ? a : b
85700,    });
85701,
85702,"    return shortest.map(function(_,i){"
85703,        return args.map(function(array){return array[i]})
85704,    });
85705,}
85706,
85707,"// > zip([1,2],[11,22],[111,222,333])"
85708,"// [[1,11,111],[2,22,222]]]"
85709,
85710,// > zip()
85711,// []
85712,itertools.zip_longest
85713,undefined
85714,function zip() {
85715,    var args = [].slice.call(arguments);
85716,"    var longest = args.reduce(function(a,b){"
85717,        return a.length>b.length ? a : b
85718,"    }, []);"
85719,
85720,"    return longest.map(function(_,i){"
85721,        return args.map(function(array){return array[i]})
85722,    });
85723,}
85724,
85725,"// > zip([1,2],[11,22],[111,222,333])"
85726,"// [[1,11,111],[2,22,222],[null,null,333]]"
85727,
85728,// > zip()
85729,// []
85730,zip(*[...])
85731,"zip.apply(this, [...])"
85732,zip
85733,function iterView(iterable) {
85734,    // returns an array equivalent to the iterable
85735,}
85736,zip
85737,function zip(arrays) {
85738,"    return Array.apply(null,Array(arrays[0].length)).map(function(_,i){"
85739,        return arrays.map(function(array){return array[i]})
85740,    });
85741,}
85742,"> JSON.stringify( zip(['abcde',[1,2,3,4,5]]) )"
85743,"[[""a"",1],[""b"",2],[""c"",3],[""d"",4],[""e"",5]]"
85744,range(...)
85745,"zip = (...rows) => [...rows[0]].map((_,c) => rows.map(row => row[c]));"
85746,zip(zip(x)) = x
85747,zip(...zip(...x)) = x
85748,const the_longest_array_length = Math.max(...(arrays.map(array => array.length)));
85749,zip()
85750,"_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);"
85751,"// returns [[""moe"", 30, true], [""larry"", 40, false], [""curly"", 50, false]]"
85752,function *zip (...iterables){
85753,    let iterators = iterables.map(i => i[Symbol.iterator]() )
85754,    while (true) {
85755,        let results = iterators.map(iter => iter.next() )
85756,        if (results.some(res => res.done) ) return
85757,        else yield results.map(res => res.value )
85758,    }
85759,}
85760,iterators
85761,.some()
85762,"//Arrays: aIn, aOut"
85763,"Array.prototype.map.call( aIn, function(e,i){return [e, aOut[i]];})"
85764,tuples
85765,map
85766,zip
85767,izip
85768,map
85769,map
85770,Array
85771,Array.prototype.map
85772,"_tarrin = [0..constructor, function(){}, false, undefined, '', 100, 123.324,"
85773,"         2343243243242343242354365476453654625345345, 'sdf23423dsfsdf',"
85774,"         'sdf2324.234dfs','234,234fsf','100,100','100.100']"
85775,_parseInt = function(i){return parseInt(i);}
85776,_tarrout = _tarrin.map(_parseInt)
85777,"_tarrin.map(function(e,i,a){return [e, _tarrout[i]]})"
85778,"//'('+_tarrin.map(function(e,i,a){return [e, _tarrout[i]]}).join('),\n(')+')'"
85779,>>
85780,"(function Number() { [native code] },NaN),"
85781,"(function (){},NaN),"
85782,"(false,NaN),"
85783,"(,NaN),"
85784,"(,NaN),"
85785,"(100,100),"
85786,"(123.324,123),"
85787,"(2.3432432432423434e+42,2),"
85788,"(sdf23423dsfsdf,NaN),"
85789,"(sdf2324.234dfs,NaN),"
85790,"(234,234fsf,234),"
85791,"(100,100,100),"
85792,"(100.100,100)"
85793,map
85794,for
85795,false
85796,undefined
85797,toString
85798,parseInt
85799,map
85800,"aIn.map(function(e, i) {return [e, aOut[i]];})"
85801,Array.prototype.map
85802,Array.prototype.map.call
85803,pythonic
85804,zip
85805,Iterator
85806,"import {zip, zipLongest} from 'pythonic';"
85807,
85808,"const arr1 = ['a', 'b'];"
85809,"const arr2 = ['c', 'd', 'e'];"
85810,"for (const [first, second] of zip(arr1, arr2))"
85811,"    console.log(`first: ${first}, second: ${second}`);"
85812,"// first: a, second: c"
85813,"// first: b, second: d"
85814,
85815,"for (const [first, second] of zipLongest(arr1, arr2))"
85816,"    console.log(`first: ${first}, second: ${second}`);"
85817,"// first: a, second: c"
85818,"// first: b, second: d"
85819,"// first: undefined, second: e"
85820,
85821,// unzip
85822,"const [arrayFirst, arraySecond] = [...zip(...zip(arr1, arr2))];"
85823,const zip = (...arrays) => {
85824,    const length = Math.min(...arrays.map(arr => arr.length));
85825,"    return Array.from({ length }, (value, index) => arrays.map((array => array[index])));"
85826,};
85827,console.log(zip(
85828,"    [1, 2, 3, 'a'],"
85829,"    [667, false, -378, '337'],"
85830,"    [111],"
85831,"    [11, 221]"
85832,));
85833,console.log(zip(
85834,"    [1, 2, 3, 'a'],"
85835,"    [667, false, -378, '337'],"
85836,"    [111, 212, 323, 433, '1111']"
85837,));
85838,console.log(zip(
85839,"    [1, 2, 3, 'a'],"
85840,"    [667, false, -378, '337'],"
85841,"    [111],"
85842,    []
85843,));
85844,"const zipLongest = (placeholder = undefined, ...arrays) => {"
85845,    const length = Math.max(...arrays.map(arr => arr.length));
85846,    return Array.from(
85847,"        { length }, (value, index) => arrays.map("
85848,            array => array.length - 1 >= index ? array[index] : placeholder
85849,        )
85850,    );
85851,};
85852,console.log(zipLongest(
85853,"    undefined,"
85854,"    [1, 2, 3, 'a'],"
85855,"    [667, false, -378, '337'],"
85856,"    [111],"
85857,    []
85858,));
85859,console.log(zipLongest(
85860,"    null,"
85861,"    [1, 2, 3, 'a'],"
85862,"    [667, false, -378, '337'],"
85863,"    [111],"
85864,    []
85865,));
85866,console.log(zipLongest(
85867,"    'Is None',"
85868,"    [1, 2, 3, 'a'],"
85869,"    [667, false, -378, '337'],"
85870,"    [111],"
85871,    []
85872,));
85873,Array.map
85874,Array.map
85875,console.json = obj => console.log(JSON.stringify(obj));
85876,
85877,"const zip = (arr, ...arrs) =>"
85878,"  arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));"
85879,
85880,// Example
85881,
85882,"const array1 = [1, 2, 3];"
85883,"const array2 = ['a','b','c'];"
85884,"const array3 = [4, 5, 6];"
85885,
85886,"console.json(zip(array1, array2));         // [[1,""a""],[2,""b""],[3,""c""]]"
85887,"console.json(zip(array1, array2, array3)); // [[1,""a"",4],[2,""b"",5],[3,""c"",6]]"
85888,"function _zip(func, args) {"
85889,  const iterators = args.map(arr => arr[Symbol.iterator]());
85890,  let iterateInstances = iterators.map((i) => i.next());
85891,  ret = []
85892,  while(iterateInstances[func](it => !it.done)) {
85893,    ret.push(iterateInstances.map(it => it.value));
85894,    iterateInstances = iterators.map((i) => i.next());
85895,  }
85896,  return ret;
85897,}
85898,"const array1 = [1, 2, 3];"
85899,"const array2 = ['a','b','c'];"
85900,"const array3 = [4, 5, 6];"
85901,
85902,"const zipShort = (...args) => _zip('every', args);"
85903,
85904,"const zipLong = (...args) => _zip('some', args);"
85905,
85906,"console.log(zipShort(array1, array2, array3)) // [[1, 'a', 4], [2, 'b', 5], [3, 'c', 6]]"
85907,"console.log(zipLong([1,2,3], [4,5,6, 7]))"
85908,// [
85909,"//  [ 1, 4 ],"
85910,"//  [ 2, 5 ],"
85911,"//  [ 3, 6 ],"
85912,"//  [ undefined, 7 ]]"
85913,zip-array
85914,zip
85915,tf.data.zip()
85916,zip
85917,tf.data.zip()
85918,zip_longest
85919,undefined
85920,mixin
85921,zipShortest
85922,zip
85923,zip
85924,"_.zipShortest([1,2,3], ['a'])"
85925,"[[1, 'a']]"
85926,"// Underscore library addition - zip like python does, dominated by the shortest list"
85927,//  The default injects undefineds to match the length of the longest list.
85928,_.mixin({
85929,    zipShortest : function() {
85930,        var args = Array.Prototype.slice.call(arguments);
85931,"        var length = _.min(_.pluck(args, 'length')); // changed max to min"
85932,        var results = new Array(length);
85933,        for (var i = 0; i < length; i++) {
85934,"            results[i] = _.pluck(args, """" + i);"
85935,        }
85936,        return results;
85937,}});
85938,function* iter(it) {
85939,    yield* it;
85940,}
85941,
85942,function* zip(...its) {
85943,    its = its.map(iter);
85944,    while (true) {
85945,        let rs = its.map(it => it.next());
85946,        if (rs.some(r => r.done))
85947,            return;
85948,        yield rs.map(r => r.value);
85949,    }
85950,}
85951,
85952,"for (let r of zip([1,2,3], [4,5,6,7], [8,9,0,11,22]))"
85953,    console.log(r.join())
85954,
85955,"// the only change for ""longest"" is some -> every"
85956,
85957,function* zipLongest(...its) {
85958,    its = its.map(iter);
85959,    while (true) {
85960,        let rs = its.map(it => it.next());
85961,        if (rs.every(r => r.done))
85962,            return;
85963,        yield rs.map(r => r.value);
85964,    }
85965,}
85966,
85967,"for (let r of zipLongest([1,2,3], [4,5,6,7], [8,9,0,11,22]))"
85968,    console.log(r.join())
85969,zip(*[iter(a)]*n)
85970,triples = [...zip(...Array(3).fill(iter(a)))]
85971," function* zip(arrays, i = 0) {"
85972,  while (i<Math.min(...arrays.map(({length})=>length))) {
85973,"    yield arrays.map((arr, j) => arr[j < arrays.length - 1 ? i : i++])"
85974,  }
85975, }
85976," function* zip(arrays, i = 0) {"
85977,      while (i<Math.min(...arrays.map(arr=>arr.length))) {
85978,"        yield arrays.map((arr, j) => arr[j < arrays.length - 1 ? i : i++])"
85979,      }
85980,     }
85981,     
85982,"   const arr1 = [false,0,1,2]"
85983,"const arr2 = [100,null,99,98,97]"
85984,"const arr3 = [7,8,undefined,""monkey"",""banana""]"
85985,
85986,"console.log(...zip([arr1,arr2,arr3]))"
85987,"function * zip(arr1, arr2, i = 0) {"
85988,"  while(arr1[i] || arr2[i]) yield [arr1[i], arr2[i++]].filter(x => !!x);"
85989,}
85990,    
85991,"[ ...zip(arr1, arr2) ]  // result"
85992,arr1[i]
85993,arr2[i]
85994,"console.log(...zip([9,0], [2,0])) "
85995,"[9,2]"
85996,"[9,2],[0,0]"
85997,"var array1 = [1, 2, 3],"
85998,"    array2 = ['a','b','c'],"
85999,"    array3 = [4, 5, 6],"
86000,"    array = [array1, array2, array3],"
86001,"    transposed = array.reduce((r, a) => a.map((v, i) => (r[i] || []).concat(v)), []);"
86002,
86003,console.log(transposed);
86004,const
86005,"    transpose = (r, a) => a.map((v, i) => [...(r[i] || []), v]),"
86006,"    array1 = [1, 2, 3],"
86007,"    array2 = ['a','b','c'],"
86008,"    array3 = [4, 5, 6],"
86009,"    transposed = [array1, array2, array3].reduce(transpose, []);"
86010,
86011,console.log(transposed);
86012,init();
86013,
86014,function init() {
86015,"    var one = [0, 1, 2, 3];"
86016,"    var two = [4, 5, 6, 7];"
86017,"    var three = [8, 9, 10, 11, 12];"
86018,"    var four = zip(one, two, one);"
86019,    //returns array
86020,"    //four = zip(one, two, three);"
86021,    //returns false since three.length !== two.length
86022,    console.log(four);
86023,}
86024,
86025,function zip() {
86026,    for (var i = 0; i < arguments.length; i++) {
86027,        if (!arguments[i].length || !arguments.toString()) {
86028,            return false;
86029,        }
86030,        if (i >= 1) {
86031,            if (arguments[i].length !== arguments[i - 1].length) {
86032,                return false;
86033,            }
86034,        }
86035,    }
86036,    var zipped = [];
86037,    for (var j = 0; j < arguments[0].length; j++) {
86038,        var toBeZipped = [];
86039,        for (var k = 0; k < arguments.length; k++) {
86040,            toBeZipped.push(arguments[k][j]);
86041,        }
86042,        zipped.push(toBeZipped);
86043,    }
86044,    return zipped;
86045,}
86046,console.log
86047,alert
86048,document.write()
86049,function* zip(...arrs){
86050,  for(let i = 0; i < arrs[0].length; i++){
86051,    a = arrs.map(e=>e[i])
86052,    if(a.indexOf(undefined) == -1 ){yield a }else{return undefined;}
86053,  }
86054,}
86055,// use as multiple iterators
86056,"for( let [a,b,c] of zip([1, 2, 3, 4], ['a', 'b', 'c', 'd'], ['hi', 'hello', 'howdy', 'how are you']) )"
86057,"  console.log(a,b,c)"
86058,
86059,// creating new array with the combined arrays
86060,let outputArr = []
86061,"for( let arr of zip([1, 2, 3, 4], ['a', 'b', 'c', 'd'], ['hi', 'hello', 'howdy', 'how are you']) )"
86062,  outputArr.push(arr)
86063,"function zip(zipper, ...arrays) {"
86064,    if (zipper instanceof Array) {
86065,        arrays.unshift(zipper)
86066,        zipper = (...elements) => elements
86067,    }
86068,
86069,    const length = Math.min(...arrays.map(array => array.length))
86070,    const zipped = []
86071,
86072,    for (let i = 0; i < length; i++) {
86073,        zipped.push(zipper(...arrays.map(array => array[i])))
86074,    }
86075,
86076,    return zipped
86077,}
86078,Array.map
86079,"function zip(a,b){"
86080,    // pre-allocate an array to hold the results 
86081,"    rval=Array(Math.max(a.length, b.length));"
86082,    for(i=0; i<rval.length; i++){ 
86083,"        rval[i]=[a[i],b[i]] "
86084,    }
86085,    return rval
86086,}
86087,"function* _zip(a,b){"
86088,"    len = Math.max(a.length, b.length) // handle different sized arrays"
86089,"    for(i=0; i<len; i++) { yield [a[i],b[i]] }"
86090,}
86091,Array.map
86092,"function map(a,b){"
86093,    x = a.length > b.length ? a : b // call map on the biggest array
86094,"    return x.map((_,i)=>[a[i],b[i]])"
86095,}
86096,"const {pipe, zip} = require('iter-ops');"
86097,
86098,"const i = pipe(array1, zip(array2, array3));"
86099,
86100,"console.log(...i); //=> [ 1, 'a', 4 ] [ 2, 'b', 5 ] [ 3, 'c', 6 ]"
86101,Iterable
86102,AsyncIterable
86103,Iterator
86104,AsyncIterator
86105,pipe
86106,"zip(array1, array2, array3)"
86107,for
86108,"var array1 = [1, 2, 3];"
86109,"var array2 = ['a','b','c'];"
86110,
86111,"for (let i = 0; i < Math.min(array1.length, array2.length); i++) {"
86112,"    doStuff(array1[i], array2[i]);"
86113,}
86114,"let zip = (a, b) => (a.length < b.length"
86115,"  ? a.map((e, i) => [e, b[i]])"
86116,"  : b.map((e, i) => [a[i], e]))"
86117,function* zip(...toZip) {
86118,  const iterators = toZip.map((arg) => arg[Symbol.iterator]());
86119,  const next = () => toZip = iterators.map((iter) => iter.next());
86120,  while (next().every((item) => !item.done)) {
86121,    yield toZip.map((item) => item.value);
86122,  }
86123,}
86124,"const zip = (arr,...arrs) =>("
86125,                            arr.map(
86126,"                              (v,i) => arrs.reduce((a,arr)=>[...a, arr[i]], [v])))"
86127,url_for
86128,static
86129,static/bootstrap
86130,static/bootstrap
86131," <link rel=stylesheet type=text/css href=""{{ url_for('static/bootstrap', filename='bootstrap.min.css') }}"">"
86132," <link rel=stylesheet type=text/css href=""{{ url_for('static', filename='bootstrap.min.css') }}"">"
86133,url_for
86134,url_for
86135,static
86136,Flask
86137,static_url_path
86138,static_folder
86139,static_folder
86140,static_url_path
86141,filename
86142,static_folder
86143,static_url_default
86144,"url_for('static', filename='path/to/file')"
86145,static_folder/path/to/file
86146,static_url_default/path/to/file
86147,static/bootstrap
86148,"<link rel=""stylesheet"" type=""text/css"" href=""{{ url_for('static', filename='bootstrap/bootstrap.min.css') }}"">"
86149,"<link rel=""stylesheet"" type=""text/css"" href=""static/bootstrap/bootstrap.min.css"">"
86150,url_for
86151,location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
86152,            try_files $uri =404;
86153,    }
86154,/etc/nginx/nginx.conf
86155,"<iframe name=""Dialogue Window"">"
86156,<iframe>
86157,"iframe = driver.find_element_by_xpath(""//iframe[@name='Dialogue Window']"")"
86158,switch_to
86159,<iframe>
86160,driver.switch_to.frame(iframe)
86161,<iframe>
86162,driver.switch_to.default_content()
86163,name
86164,<iframe>
86165,<iframe>
86166,switch_to()
86167,<iframe>
86168,# driver.switch_to.frame(‘frame_name’)
86169,"driver.switch_to.frame(""Dialogue Window"")"
86170,<iframe>
86171,driver.switch_to.frame(driver.find_element_by_name('Dialogue Window'))
86172,<iframe>
86173,"driver.switch_to.frame(driver.find_element_by_css_selector(""iframe[name='Dialogue Window']""))"
86174,<iframe>
86175,"driver.switch_to.frame(driver.find_element_by_xpath(""//iframe[@name='Dialogue Window']""))"
86176,frame_to_be_available_and_switch_to_it()
86177,"WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.NAME,""Dialogue Window""))) "
86178,"WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR,""iframe[name='Dialogue Window']"")))"
86179,"WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,""//iframe[@name='Dialogue Window']"")))"
86180,driver.switch_to.parent_frame()
86181,driver.switch_to.default_content()
86182,srtHandle = driver.window_handles
86183,driver.switch_to_window(srtHandle[0])
86184,**kwargs
86185,objects.filter
86186,**kwargs
86187,timedelta(hours = time1)
86188,"a,b=1,2"
86189,**kwargs
86190,>>> def print_keyword_args(**kwargs):
86191,...     # kwargs is a dict of the keyword args passed to the function
86192,"...     for key, value in kwargs.iteritems():"
86193,"...         print ""%s = %s"" % (key, value)"
86194,... 
86195,">>> print_keyword_args(first_name=""John"", last_name=""Doe"")"
86196,first_name = John
86197,last_name = Doe
86198,**kwargs
86199,">>> kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}"
86200,>>> print_keyword_args(**kwargs)
86201,first_name = Bobby
86202,last_name = Smith
86203,iteritems()
86204,items()
86205,**
86206,"func(a=1, b=2, c=3)"
86207,"args = {'a': 1, 'b': 2, 'c':3}"
86208,func(**args)
86209,args = {'name': person.name}
86210,"if hasattr(person, ""address""):"
86211,"    args[""address""] = person.address"
86212,func(**args)  # either expanded to func(name=person.name) or
86213,"              #                    func(name=person.name, address=person.address)"
86214,.items()
86215,.iteritems()
86216,def setstyle(**styles):
86217,"    for key, value in styles.iteritems():      # styles is a regular dictionary"
86218,"        setattr(someobject, key, value)"
86219,"setstyle(color=""red"", bold=False)"
86220,kwargs
86221,**
86222,*
86223,kwargs
86224,args
86225,"def myDo(what, where, why):"
86226,   if what == 'swim':
86227,"      doSwim(where, why)"
86228,   elif what == 'walk':
86229,"      doWalk(where, why)"
86230,   ...
86231,elif what == 'drive':
86232,"   doDrive(where, why, vehicle)"
86233,"def myDo(what, where, why, **kwargs):"
86234,   if what == 'drive':
86235,"      doDrive(where, why, **kwargs)"
86236,   elif what == 'swim':
86237,"      doSwim(where, why, **kwargs)"
86238,"def f(a = 0, *args, **kwargs):"
86239,"    print(""Received by f(a, *args, **kwargs)"")"
86240,"    print(""=> f(a=%s, args=%s, kwargs=%s"" % (a, args, kwargs))"
86241,"    print(""Calling g(10, 11, 12, *args, d = 13, e = 14, **kwargs)"")"
86242,"    g(10, 11, 12, *args, d = 13, e = 14, **kwargs)"
86243,
86244,"def g(f, g = 0, *args, **kwargs):"
86245,"    print(""Received by g(f, g = 0, *args, **kwargs)"")"
86246,"    print(""=> g(f=%s, g=%s, args=%s, kwargs=%s)"" % (f, g, args, kwargs))"
86247,
86248,"print(""Calling f(1, 2, 3, 4, b = 5, c = 6)"")"
86249,"f(1, 2, 3, 4, b = 5, c = 6)"
86250,"Calling f(1, 2, 3, 4, b = 5, c = 6)"
86251,"Received by f(a, *args, **kwargs) "
86252,"=> f(a=1, args=(2, 3, 4), kwargs={'c': 6, 'b': 5}"
86253,"Calling g(10, 11, 12, *args, d = 13, e = 14, **kwargs)"
86254,"Received by g(f, g = 0, *args, **kwargs)"
86255,"=> g(f=10, g=11, args=(12, 2, 3, 4), kwargs={'c': 6, 'b': 5, 'e': 14, 'd': 13})"
86256,*args
86257,**kwargs
86258,*args
86259,**kwargs
86260,"def args_kwargs_test(arg1, arg2, arg3):"
86261,"    print ""arg1:"", arg1"
86262,"    print ""arg2:"", arg2"
86263,"    print ""arg3:"", arg3"
86264,*args
86265,"#args can either be a ""list"" or ""tuple"""
86266,">>> args = (""two"", 3, 5)  "
86267,>>> args_kwargs_test(*args)
86268,**kwargs
86269,"#keyword argument ""kwargs"" has to be a dictionary"
86270,">>> kwargs = {""arg3"":3, ""arg2"":'two', ""arg1"":5}"
86271,>>> args_kwargs_test(**kwargs)
86272,*args
86273,**kwargs
86274,kwargs
86275,**kwargs
86276,**anyVariableName
86277,kwargs
86278,param1
86279,param2
86280,"func(param1=""val1"",param2=""val2"")"
86281,"func(val1,val2)"
86282,func
86283,func(**kwargs)
86284,kwargs
86285,"def function1(param1,param2=""arg2"",param3=""arg3""):"
86286,"    print(""\n""+str(param1)+"" ""+str(param2)+"" ""+str(param3)+""\n"")"
86287,
86288,function1(1)                      #1 arg2 arg3   #1 positional arg
86289,function1(param1=1)               #1 arg2 arg3   #1 named arg
86290,"function1(1,param2=2)             #1 2 arg3      #1 positional arg, 1 named arg"
86291,"function1(param1=1,param2=2)      #1 2 arg3      #2 named args       "
86292,"function1(param2=2, param1=1)     #1 2 arg3      #2 named args out of order"
86293,"function1(1, param3=3, param2=2)  #1 2 3         #"
86294,
86295,#function1()                      #invalid: required argument missing
86296,"#function1(param2=2,1)            #invalid: SyntaxError: non-keyword arg after keyword arg"
86297,"#function1(1,param1=11)           #invalid: TypeError: function1() got multiple values for argument 'param1'"
86298,#function1(param4=4)              #invalid: TypeError: function1() got an unexpected keyword argument 'param4'
86299,kwargs
86300,"def function2(param1, *tupleParams, param2, param3, **dictionaryParams):"
86301,"    print(""param1: ""+ param1)"
86302,"    print(""param2: ""+ param2)"
86303,"    print(""param3: ""+ param3)"
86304,"    print(""custom tuple params"",""-""*10)"
86305,    for p in tupleParams:
86306,"        print(str(p) + "","")"
86307,"    print(""custom named params"",""-""*10)"
86308,"    for k,v in dictionaryParams.items():"
86309,"        print(str(k)+"":""+str(v))"
86310,
86311,"function2(""arg1"","
86312,"          ""custom param1"","
86313,"          ""custom param2"","
86314,"          ""custom param3"","
86315,"          param3=""arg3"","
86316,"          param2=""arg2"", "
86317,"          customNamedParam1 = ""val1"","
86318,"          customNamedParam2 = ""val2"""
86319,          )
86320,
86321,# Output
86322,#
86323,#param1: arg1
86324,#param2: arg2
86325,#param3: arg3
86326,#custom tuple params ----------
86327,"#custom param1,"
86328,"#custom param2,"
86329,"#custom param3,"
86330,#custom named params ----------
86331,#customNamedParam2:val2
86332,#customNamedParam1:val1
86333,"tupleCustomArgs = (""custom param1"", ""custom param2"", ""custom param3"")"
86334,"dictCustomNamedArgs = {""customNamedParam1"":""val1"", ""customNamedParam2"":""val2""}"
86335,
86336,"function2(""arg1"","
86337,"      *tupleCustomArgs,    #note *"
86338,"      param3=""arg3"","
86339,"      param2=""arg2"", "
86340,      **dictCustomNamedArgs     #note **
86341,      )
86342,*
86343,**
86344,*
86345,"function2(""arg1"","
86346,"      tupleCustomArgs,   #omitting *"
86347,"      param3=""arg3"","
86348,"      param2=""arg2"", "
86349,      **dictCustomNamedArgs
86350,      )
86351,param1: arg1
86352,param2: arg2
86353,param3: arg3
86354,custom tuple params ----------
86355,"('custom param1', 'custom param2', 'custom param3'),"
86356,custom named params ----------
86357,customNamedParam2:val2
86358,customNamedParam1:val1
86359,"('custom param1', 'custom param2', 'custom param3')"
86360,dict
86361,"function2(""arg1"","
86362,"      *tupleCustomArgs,   "
86363,"      param3=""arg3"","
86364,"      param2=""arg2"", "
86365,      dictCustomNamedArgs   #omitting **
86366,      )
86367,dictCustomNamedArgs
86368,         ^
86369,SyntaxError: non-keyword arg after keyword arg
86370,def test(**kwargs):
86371,    print kwargs['a']
86372,    print kwargs['b']
86373,    print kwargs['c']
86374,
86375,
86376,"args = { 'b': 2, 'c': 3}"
86377,
86378,"test( a=1, **args )"
86379,1
86380,2
86381,3
86382,"def print_wrap(arg1, *args, **kwargs):"
86383,    print(arg1)
86384,    print(args)
86385,    print(kwargs)
86386,"    print(arg1, *args, **kwargs)"
86387,args
86388,kwargs
86389,">>> print_wrap('one', 'two', 'three', end='blah', sep='--')"
86390,one
86391,"('two', 'three')"
86392,"{'end': 'blah', 'sep': '--'}"
86393,one--two--threeblah
86394,">>> print_wrap('blah', dead_arg='anything')"
86395,TypeError: 'dead_arg' is an invalid keyword argument for this function
86396,#! /usr/bin/env python
86397,#
86398,def g( **kwargs) :
86399,"  print ( ""In g ready to print kwargs"" )"
86400,  print kwargs
86401,"  print ( ""in g, calling f"")"
86402,  f ( **kwargs )
86403,"  print ( ""In g, after returning from f"")"
86404,
86405,def f( **kwargs ) :
86406,"  print ( ""in f, printing kwargs"")"
86407,  print ( kwargs )
86408,"  print ( ""In f, after printing kwargs"")"
86409,
86410,
86411,"g( a=""red"", b=5, c=""Nassau"")"
86412,
86413,"g( q=""purple"", w=""W"", c=""Charlie"", d=[4, 3, 6] )"
86414,$ python kwargs_demo.py 
86415,In g ready to print kwargs
86416,"{'a': 'red', 'c': 'Nassau', 'b': 5}"
86417,"in g, calling f"
86418,"in f, printing kwargs"
86419,"{'a': 'red', 'c': 'Nassau', 'b': 5}"
86420,"In f, after printing kwargs"
86421,"In g, after returning from f"
86422,In g ready to print kwargs
86423,"{'q': 'purple', 'c': 'Charlie', 'd': [4, 3, 6], 'w': 'W'}"
86424,"in g, calling f"
86425,"in f, printing kwargs"
86426,"{'q': 'purple', 'c': 'Charlie', 'd': [4, 3, 6], 'w': 'W'}"
86427,"In f, after printing kwargs"
86428,"In g, after returning from f"
86429,"def my_callback(sender, **kwargs):"
86430,"    print(""Request finished!"")"
86431,">>> def f(*args, **kwargs):"
86432,"...    print 'args', args, 'kwargs', kwargs"
86433,">>>f(1, 2)"
86434,">>> args (1,2) kwargs {} #args return parameter without reference as a tuple"
86435,">>>f(a = 1, b = 2)"
86436,">>> args () kwargs {'a': 1, 'b': 2} #args is empty tuple and kwargs return parameter with reference as a dictionary"
86437,class Robot():
86438,    # name is an arg and color is a kwarg
86439,"    def __init__(self,name, color='red'):"
86440,        self.name = name
86441,        self.color = color
86442,
86443,red_robot = Robot('Bob')
86444,"blue_robot = Robot('Bob', color='blue')"
86445,
86446,"print(""I am a {color} robot named {name}."".format(color=red_robot.color, name=red_robot.name))"
86447,"print(""I am a {color} robot named {name}."".format(color=blue_robot.color, name=blue_robot.name))"
86448,
86449,>>> I am a red robot named Bob.
86450,>>> I am a blue robot named Bob.
86451,import module
86452,from module import
86453,from … import …
86454,"'from module import X,Y,Z"
86455,'from module import *
86456,from module import *
86457,import module
86458,from module import foo
86459,import module
86460,import
86461,module.foo
86462,import module as mo
86463,mo.foo
86464,from module import foo
86465,foo
86466,import
86467,foo
86468,ceil()
86469,math.ceil()
86470,from module import *
86471,import *
86472,import
86473,from module import *
86474,if(windows):\n\t from module_win import * \n else: \n\t from module_lin import *
86475,"bar = ""apples"""
86476,import foo
86477,"foo.bar = ""oranges""   # update bar inside foo module object"
86478,import foo           
86479,"print foo.bar        # if executed after a's ""foo.bar"" assignment, will print ""oranges"""
86480,from foo import bar
86481,"bar = ""oranges"""
86482,a
86483,bar
86484,bar
86485,a
86486,foo
86487,bar
86488,global
86489,import
86490,import from
86491,import foo
86492,foo
86493,foo.bar
86494,bar
86495,from foo import bar
86496,foo
86497,bar
86498,foo
86499,bar
86500,baz
86501,foo.baz
86502,from foo import *
86503,foo
86504,__all__
86505,__all__
86506,_
86507,foo
86508,bar
86509,baz
86510,_qux
86511,foo._qux
86512,import X.Y
86513,>>> import sys
86514,>>> import os.path
86515,sys.modules
86516,os
86517,os.path
86518,>>> sys.modules['os']
86519,<module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'>
86520,>>> sys.modules['os.path']
86521,<module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86522,globals()
86523,locals()
86524,os
86525,os.path
86526,>>> globals()['os']
86527,<module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'>
86528,>>> locals()['os']
86529,<module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'>
86530,>>> globals()['os.path']
86531,Traceback (most recent call last):
86532,"  File ""<stdin>"", line 1, in <module>"
86533,KeyError: 'os.path'
86534,>>>
86535,os
86536,>>> os
86537,<module 'os' from
86538,  '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'>
86539,>>> os.path
86540,<module 'posixpath' from
86541, '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86542,>>>
86543,path
86544,>>> path
86545,Traceback (most recent call last):
86546,"  File ""<stdin>"", line 1, in <module>"
86547,NameError: name 'path' is not defined
86548,>>>
86549,os
86550,os
86551,os.path
86552,>>> del locals()['os']
86553,>>> os
86554,Traceback (most recent call last):
86555,"  File ""<stdin>"", line 1, in <module>"
86556,NameError: name 'os' is not defined
86557,>>> os.path
86558,Traceback (most recent call last):
86559,"  File ""<stdin>"", line 1, in <module>"
86560,NameError: name 'os' is not defined
86561,>>>
86562,import from
86563,from
86564,>>> import sys
86565,>>> from os import path
86566,sys.modules
86567,os
86568,os.path
86569,>>> sys.modules['os']
86570,<module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'>
86571,>>> sys.modules['os.path']
86572,<module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86573,sys.modules
86574,import name
86575,locals()
86576,globals()
86577,>>> globals()['path']
86578,<module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86579,>>> locals()['path']
86580,<module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86581,>>> globals()['os']
86582,Traceback (most recent call last):
86583,"  File ""<stdin>"", line 1, in <module>"
86584,KeyError: 'os'
86585,>>>
86586,path
86587,os.path
86588,>>> path
86589,<module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86590,>>> os.path
86591,Traceback (most recent call last):
86592,"  File ""<stdin>"", line 1, in <module>"
86593,NameError: name 'os' is not defined
86594,>>>
86595,locals()
86596,>>> del locals()['path']
86597,>>> path
86598,Traceback (most recent call last):
86599,"  File ""<stdin>"", line 1, in <module>"
86600,NameError: name 'path' is not defined
86601,>>>
86602,>>> from os import path as HELL_BOY
86603,>>> locals()['HELL_BOY']
86604,<module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86605,>>> globals()['HELL_BOY']
86606,<module 'posixpath' from /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'>
86607,>>>
86608,>>> globals()['path']
86609,Traceback (most recent call last):
86610," File ""<stdin>"", line 1, in <module>"
86611,KeyError: 'path'
86612,>>>
86613,as SYMBOL
86614,import module
86615,from module import ...
86616,import module
86617,from module import ...
86618,from M import X
86619,M.X
86620,"class m: from something.too.long import x, y, z"
86621,from package.subpackage.subsubpackage import module
86622,module.function
86623,module.modulevar
86624,from package1.subpackage import module
86625,from package2.subpackage import module
86626,pathlib
86627,pathlib.Path
86628,import module
86629,from module import function
86630,function
86631,foo
86632,from itertools import count
86633,bar
86634,count
86635,foo
86636,itertools
86637,import foo
86638,foo.count()
86639,foo
86640,import itertools
86641,bar
86642,import foo
86643,foo.itertools.count()
86644,from module import SomeException
86645,from package import item
86646,import item.subitem.subsubitem
86647,import
86648,import math
86649,math.sqrt(4)
86650,import math as m
86651,math.sqrt()
86652,m.sqrt()
86653,from math import sqrt
86654,from math import * 
86655,import package
86656,import module
86657,import
86658,sys.path
86659,__init__.py
86660,import package1.package2.package
86661,import package1.package2.module
86662,package2
86663,package1
86664,package1
86665,package2
86666,__init__.py
86667,from
86668,from package1.package2 import package
86669,from package1.package2 import module
86670,import
86671,module
86672,package
86673,package1.package2.module
86674,a = big_package_name.subpackage.even_longer_subpackage_name.function
86675,from
86676,from package3.module import some_function
86677,import package3.module.some_function 
86678,from x import *
86679,.  
86680,└─a  
86681,   └─b  
86682,     └─c
86683,import
86684,In[1]: import a.b.c
86685,
86686,In[2]: a
86687,Out[2]: <module 'a' (namespace)>
86688,
86689,In[3]: a.b
86690,Out[3]: <module 'a.b' (namespace)>
86691,
86692,In[4]: a.b.c
86693,Out[4]: <module 'a.b.c' (namespace)>
86694,from ... import ...
86695,In[1]: from a.b import c
86696,
86697,In[2]: a
86698,NameError: name 'a' is not defined
86699,
86700,In[2]: a.b
86701,NameError: name 'a' is not defined
86702,
86703,In[3]: a.b.c
86704,NameError: name 'a' is not defined
86705,
86706,In[4]: c
86707,Out[4]: <module 'a.b.c' (namespace)>
86708,mod/
86709,    __init__.py
86710,    main.py
86711,    a.py
86712,    b.py
86713,    c.py
86714,    d.py
86715,import mod.a
86716,import mod.b as b
86717,from mod import c
86718,import d
86719,  1           0 LOAD_CONST               0 (-1)
86720,              3 LOAD_CONST               1 (None)
86721,              6 IMPORT_NAME              0 (mod.a)
86722,              9 STORE_NAME               1 (mod)
86723,
86724,  2          12 LOAD_CONST               0 (-1)
86725,             15 LOAD_CONST               1 (None)
86726,             18 IMPORT_NAME              2 (b)
86727,             21 STORE_NAME               2 (b)
86728,
86729,  3          24 LOAD_CONST               0 (-1)
86730,"             27 LOAD_CONST               2 (('c',))"
86731,             30 IMPORT_NAME              1 (mod)
86732,             33 IMPORT_FROM              3 (c)
86733,             36 STORE_NAME               3 (c)
86734,             39 POP_TOP
86735,
86736,  4          40 LOAD_CONST               0 (-1)
86737,             43 LOAD_CONST               1 (None)
86738,             46 IMPORT_NAME              4 (mod.d)
86739,             49 LOAD_ATTR                5 (d)
86740,             52 STORE_NAME               5 (d)
86741,             55 LOAD_CONST               1 (None)
86742,foo/
86743,   __init__.py
86744,   a.py
86745,   b.py
86746,a.py:
86747,import foo.b 
86748,b.py:
86749,import foo.a
86750,>>> import foo.a
86751,>>>
86752,bar/
86753,   __init__.py
86754,   a.py
86755,   b.py
86756,a.py:
86757,import bar.b as b
86758,b.py:
86759,import bar.a as a
86760,>>> import bar.a
86761,Traceback (most recent call last):
86762,"  File ""<stdin>"", line 1, in <module>"
86763,"  File ""bar\a.py"", line 1, in <module>"
86764,    import bar.b as b
86765,"  File ""bar\b.py"", line 1, in <module>"
86766,    import bar.a as a
86767,AttributeError: 'module' object has no attribute 'a'
86768,baz/
86769,   __init__.py
86770,   a.py
86771,   b.py
86772,a.py:
86773,from baz import b
86774,b.py:
86775,from baz import a
86776,>>> import baz.a
86777,Traceback (most recent call last):
86778,"  File ""<stdin>"", line 1, in <module>"
86779,"  File ""baz\a.py"", line 1, in <module>"
86780,    from baz import b
86781,"  File ""baz\b.py"", line 1, in <module>"
86782,    from baz import a
86783,ImportError: cannot import name a
86784,qux/
86785,   __init__.py
86786,   a.py
86787,   b.py
86788,a.py:
86789,import b 
86790,b.py:
86791,import a
86792,>>> import qux.a
86793,>>>
86794,from
86795,import
86796,import
86797,private variable
86798,private functions
86799,public_variable = 42
86800,_private_variable = 141
86801,def public_function():
86802,"    print(""I'm a public function! yay!"")"
86803,def _private_function():
86804,"    print(""Ain't nobody accessing me from another module...usually"")"
86805,import settings
86806,print (settings._private_variable)
86807,print (settings.public_variable)
86808,settings.public_function()
86809,settings._private_function()
86810,
86811,# Prints:
86812,# 141
86813,# 42
86814,# I'm a public function! yay!
86815,# Ain't nobody accessing me from another module...usually
86816,from settings import *
86817,#print (_private_variable) #doesn't work
86818,print (public_variable)
86819,public_function()
86820,#_private_function()   #doesn't work
86821,from math import gcd
86822,...
86823,import mymath
86824,"mymath.gcd(30, 42)  # will work though maybe not expected"
86825,gcd
86826,mymath
86827,import math
86828,# for instance...
86829,from math import gcd as _gcd
86830,# or...
86831,import math as _math
86832,import module
86833,module
86834,form module import <foo>
86835,unittest
86836,pytest
86837,import foo
86838,from foo import bar
86839,# my_module.py
86840,
86841,from foo import bar
86842,
86843,
86844,class Thing:
86845,    def do_thing(self):
86846,        bar('do a thing')
86847,# test_my_module.py
86848,
86849,from unittest.mock import patch
86850,import my_module
86851,
86852,
86853,"patch.object(my_module, 'bar')"
86854,def test_do_thing(mock_bar):
86855,    my_module.Thing().do_thing()
86856,    mock_bar.assert_called_with('do a thing')
86857,Thing
86858,# my_module.py
86859,
86860,from tools import Thing
86861,
86862,
86863,def do_thing():
86864,    Thing().do_thing()
86865,
86866,
86867,# tools.py
86868,
86869,from foo import bar
86870,
86871,
86872,class Thing:
86873,    def do_thing(self):
86874,        bar('do a thing')
86875,
86876,
86877,# test_my_module.py
86878,
86879,from unittest.mock import patch
86880,import my_module
86881,import tools  # Had to import implementation file...
86882,
86883,
86884,"patch.object(tools, 'bar')  # Changed patch"
86885,def test_do_thing(mock_bar):
86886,    my_module.do_thing()  # Changed test (expected)
86887,    mock_bar.assert_called_with('do a thing')
86888,from foo import bar
86889,tools
86890,import foo
86891,# my_module.py
86892,
86893,from tools import Thing
86894,
86895,
86896,def do_thing():
86897,    Thing().do_thing()
86898,
86899,
86900,# tools.py
86901,
86902,import foo
86903,
86904,
86905,class Thing:
86906,    def do_thing(self):
86907,        foo.bar('do a thing')  # Specify 'bar' is from 'foo' module
86908,
86909,
86910,# test_my_module.py
86911,
86912,from unittest.mock import patch
86913,import my_module
86914,
86915,
86916,patch('foo')  # Patch entire foo module
86917,def test_do_thing(mock_foo):
86918,    my_module.do_thing()  # Changed test (expected)
86919,    mock_foo.bar.assert_called_with('do a thing')
86920,"copysign(foo, bar)"
86921,monotonic()
86922,"copystat(foo, bar)"
86923,"math.copysign(foo, bar)"
86924,time.monotonic()
86925,"shutil.copystat(foo, bar)"
86926,configparser.RawConfigParser()
86927,datetime.DateTime()
86928,email.message.EmailMessage()
86929,tempfile.NamedTemporaryFile()
86930,zipfile.ZipFile()
86931,package1
86932,  |-- __init__.py
86933,package2
86934,  |-- __init__.py
86935,  |-- module1.py
86936,  |-- module2.py
86937,func1()
86938,__init__.py
86939,mylibrary1
86940,foo()
86941,module2.py
86942,mylibrary2
86943,func1()
86944,import package1
86945,
86946,package1.func1()
86947,import package1 as my
86948,
86949,my.func1()
86950,from package1 import func1
86951,
86952,func1()
86953,from package1 import *
86954,
86955,func1()
86956,foo()
86957,import package2.module2
86958,
86959,package2.module2.foo()
86960,import package2.module2 as mod2
86961,
86962,mod2.foo()
86963,from package2 import module2
86964,
86965,module2.foo()
86966,from package2 import module2 as mod2
86967,
86968,mod2.foo()
86969,from package2.module2 import *
86970,
86971,foo()
86972,import module
86973,import module
86974,module.method()
86975,from module import all
86976,from module import all
86977,method()
86978,MemoryError                               Traceback (most recent call last)
86979,<ipython-input-58-67a72687871b> in <module>()
86980,"----> 1 data=pd.read_csv('aphro.csv',sep=';')"
86981,
86982,...
86983,
86984,MemoryError: 
86985,chunksize
86986,chunksize = 10 ** 6
86987,"for chunk in pd.read_csv(filename, chunksize=chunksize):"
86988,    process(chunk)
86989,chunksize
86990,chunksize
86991,read_csv
86992,chunksize
86993,chunksize = 10 ** 6
86994,"with pd.read_csv(filename, chunksize=chunksize) as reader:"
86995,    for chunk in reader:
86996,        process(chunk)
86997,DF.append(chunk)
86998,O(N^2)
86999,pd.DataFrame
87000,pd.concat
87001,DF.append(chunk)
87002,O(N^2)
87003,N
87004,DF.append
87005,pd.DataFrame
87006,pd.concat
87007,O(N)
87008,chunksize
87009,chunksize
87010,pd.concat([list_of_dfs])
87011,pd.concat
87012,df.append
87013,usecols
87014,chunks
87015,# Dataframes implement the Pandas API
87016,import dask.dataframe as dd
87017,df = dd.read_csv('s3://.../2018-*-*.csv')
87018,# Datatable python library
87019,import datatable as dt
87020,"df = dt.fread(""s3://.../2018-*-*.csv"")"
87021,"chunks=pd.read_table('aphro.csv',chunksize=1000000,sep=';',\"
87022,"       names=['lat','long','rf','date','slno'],index_col='slno',\"
87023,"       header=None,parse_dates=['date'])"
87024,
87025,df=pd.DataFrame()
87026,"%time df=pd.concat(chunk.groupby(['lat','long',chunk['date'].map(lambda x: x.year)])['rf'].agg(['sum']) for chunk in chunks)"
87027,read_csv
87028,read_table
87029,import pandas as pd 
87030,import pickle
87031,
87032,"in_path = """" #Path where the large file is"
87033,"out_path = """" #Path to save the pickle files to"
87034,chunk_size = 400000 #size of chunks relies on your available memory
87035,"separator = ""~"""
87036,
87037,"reader = pd.read_csv(in_path,sep=separator,chunksize=chunk_size, "
87038,                    low_memory=False)    
87039,
87040,
87041,"for i, chunk in enumerate(reader):"
87042,"    out_file = out_path + ""/data_{}.pkl"".format(i+1)"
87043,"    with open(out_file, ""wb"") as f:"
87044,"        pickle.dump(chunk,f,pickle.HIGHEST_PROTOCOL)"
87045,import glob
87046,"pickle_path = """" #Same Path as out_path i.e. where the pickle files are"
87047,
87048,data_p_files=[]
87049,"for name in glob.glob(pickle_path + ""/data_*.pkl""):"
87050,   data_p_files.append(name)
87051,
87052,
87053,df = pd.DataFrame([])
87054,for i in range(len(data_p_files)):
87055,"    df = df.append(pd.read_pickle(data_p_files[i]),ignore_index=True)"
87056,df
87057,read
87058,The maximum value of UNSIGNED CHAR = 255                                    
87059,The minimum value of SHORT INT = -32768                                     
87060,The maximum value of SHORT INT = 32767                                      
87061,The minimum value of INT = -2147483648                                      
87062,The maximum value of INT = 2147483647                                       
87063,The minimum value of CHAR = -128                                            
87064,The maximum value of CHAR = 127                                             
87065,The minimum value of LONG = -9223372036854775808                            
87066,The maximum value of LONG = 9223372036854775807
87067,dtype
87068,read_csv
87069,np.int8
87070,np.uint8
87071,dtype
87072,read
87073,import numpy as np
87074,import pandas as pd
87075,
87076,df_dtype = {
87077,"        ""column_1"": int,"
87078,"        ""column_2"": str,"
87079,"        ""column_3"": np.int16,"
87080,"        ""column_4"": np.uint8,"
87081,        ...
87082,"        ""column_n"": np.float32"
87083,}
87084,
87085,"df = pd.read_csv('path/to/file', dtype=df_dtype)"
87086,compute
87087,persist
87088,"def get_from_action_data(fname, chunk_size=100000):"
87089,"    reader = pd.read_csv(fname, header=0, iterator=True)"
87090,    chunks = []
87091,    loop = True
87092,    while loop:
87093,        try:
87094,"            chunk = reader.get_chunk(chunk_size)[[""user_id"", ""type""]]"
87095,            chunks.append(chunk)
87096,        except StopIteration:
87097,            loop = False
87098,"            print(""Iteration is stopped"")"
87099,
87100,"    df_ac = pd.concat(chunks, ignore_index=True)"
87101,"small_df = pd.read_csv(filename, nrows=100)"
87102,"TextFileReader = pd.read_csv(path, chunksize=1000)  # the number of rows per chunk"
87103,
87104,dfList = []
87105,for df in TextFileReader:
87106,    dfList.append(df)
87107,
87108,"df = pd.concat(dfList,sort=False)"
87109,dfList.append
87110,df
87111,chunkTemp = []
87112,queryTemp = []
87113,query = pd.DataFrame()
87114,
87115,"for chunk in pd.read_csv(file, header=0, chunksize=<your_chunksize>, iterator=True, low_memory=False):"
87116,
87117,    #REPLACING BLANK SPACES AT COLUMNS' NAMES FOR SQL OPTIMIZATION
87118,"    chunk = chunk.rename(columns = {c: c.replace(' ', '') for c in chunk.columns})"
87119,
87120,    #YOU CAN EITHER: 
87121,    #1)BUFFER THE CHUNKS IN ORDER TO LOAD YOUR WHOLE DATASET 
87122,    chunkTemp.append(chunk)
87123,
87124,    #2)DO YOUR PROCESSING OVER A CHUNK AND STORE THE RESULT OF IT
87125,    query = chunk[chunk[<column_name>].str.startswith(<some_pattern>)]   
87126,    #BUFFERING PROCESSED DATA
87127,    queryTemp.append(query)
87128,
87129,#!  NEVER DO pd.concat OR pd.DataFrame() INSIDE A LOOP
87130,"print(""Database: CONCATENATING CHUNKS INTO A SINGLE DATAFRAME"")"
87131,chunk = pd.concat(chunkTemp)
87132,"print(""Database: LOADED"")"
87133,
87134,#CONCATENATING PROCESSED DATA
87135,query = pd.concat(queryTemp)
87136,print(query)
87137,import pandas as pd
87138,
87139,"def chunck_generator(filename, header=False,chunk_size = 10 ** 5):"
87140,"   for chunk in pd.read_csv(filename,delimiter=',', iterator=True, chunksize=chunk_size, parse_dates=[1] ): "
87141,        yield (chunk)
87142,
87143,"def _generator( filename, header=False,chunk_size = 10 ** 5):"
87144,"    chunk = chunck_generator(filename, header=False,chunk_size = 10 ** 5)"
87145,    for row in chunk:
87146,        yield row
87147,
87148,"if __name__ == ""__main__"":"
87149,filename = r'file.csv'
87150,        generator = generator(filename=filename)
87151,        while True:
87152,           print(next(generator))
87153,import modin.pandas as pd
87154,pd.read_csv(CSV_FILE_NAME)
87155,modin
87156,dask.dataframe
87157,csv
87158,millions
87159,dask_cudf
87160,import dask_cudf as dc
87161,
87162,"df = dc.read_csv(""large_data.csv"")"
87163,def apply(dfg):
87164,    # do stuff
87165,    return dfg
87166,
87167,"c = d6tstack.combine_csv.CombinerCSV([bigfile.csv], apply_after_read=apply, sep=',', chunksize=1e6)"
87168,
87169,# or
87170,"c = d6tstack.combine_csv.CombinerCSV(glob.glob('*.csv'), apply_after_read=apply, chunksize=1e6)"
87171,
87172,"# output to various formats, automatically chunked to reduce memory consumption"
87173,c.to_csv_combine(filename='out.csv')
87174,c.to_parquet_combine(filename='out.pq')
87175,"c.to_psql_combine('postgresql+psycopg2://usr:pwd@localhost/db', 'tablename') # fast for postgres"
87176,"c.to_mysql_combine('mysql+mysqlconnector://usr:pwd@localhost/db', 'tablename') # fast for mysql"
87177,"c.to_sql_combine('postgresql+psycopg2://usr:pwd@localhost/db', 'tablename') # slow but flexible"
87178,# Generator expression
87179,(x*2 for x in range(256))
87180,
87181,# List comprehension
87182,[x*2 for x in range(256)]
87183,[exp for x in iter]
87184,list((exp for x in iter))
87185,X = [x**2 for x in range(5)]; print x
87186,Y = list(y**2 for y in range(5)); print y
87187,list()
87188,def gen():
87189,    return (something for something in get_some_stuff())
87190,
87191,print gen()[:2]     # generators don't support indexing or slicing
87192,"print [5,6] + gen() # generators can't be added to lists"
87193,"a = [1, 2, 3] b = [4, 5, 6] a.extend(b)"
87194,"a = (x for x in range(0,10)), b = [1,2,3]"
87195,a.extend(b)
87196,b.extend(a)
87197,itertools.count(n)
87198,(2 ** item for item in itertools.count(n))
87199,2
87200,2 ** n
87201,lists
87202,generator
87203,"logfile = open(""hugefile.txt"",""r"")"
87204,"entry_lines = [(line,len(line)) for line in logfile if line.startswith(""ENTRY"")]"
87205,"logfile = open(""hugefile.txt"",""r"")"
87206,"entry_lines = ((line,len(line)) for line in logfile if line.startswith(""ENTRY""))"
87207,"long_entries = ((line,length) for (line,length) in entry_lines if length > 80)"
87208,"outfile = open(""filtered.txt"",""a"")"
87209,"for entry,length in long_entries:"
87210,    outfile.write(entry)
87211,for
87212,long_entries
87213,entry_lines
87214,entry_lines
87215,logfile
87216,sum(x*2 for x in xrange(256))
87217,
87218,"dict( (k, some_func(k)) for k in some_list_of_keys )"
87219,reversed( [x*2 for x in xrange(256)] )
87220,sum(x*2 for x in xrange(256))
87221,sorted
87222,reversed
87223,">>> mylist = [""a"", ""b"", ""c""]"
87224,">>> gen = (elem + ""1"" for elem in mylist)"
87225,>>> mylist.clear()
87226,>>> for x in gen: print (x)
87227,# nothing
87228,any
87229,False
87230,import mincemeat
87231,
87232,"def mapfn(k,v):"
87233,    for w in v:
87234,"        yield 'sum',w"
87235,"        #yield 'count',1"
87236,
87237,
87238,"def reducefn(k,v): "
87239,    r1=sum(v)
87240,    r2=len(v)
87241,    print r2
87242,    m=r1/r2
87243,    std=0
87244,    for i in range(r2):
87245,"       std+=pow(abs(v[i]-m),2)  "
87246,"    res=pow((std/r2),0.5)"
87247,"    return r1,r2,res"
87248,next()
87249,next()
87250,next()
87251,from itertools import islice
87252,
87253,def slice_and_continue(sequence):
87254,    ret = []
87255,    seq_i = iter(sequence) #create an iterator from the list
87256,
87257,"    seq_slice = islice(seq_i,3) #take first 3 elements and print"
87258,"    for x in seq_slice: print(x),"
87259,
87260,"    for x in seq_i: print(x**2), #square the rest of the numbers"
87261,
87262,"slice_and_continue([1,2,3,4,5])"
87263,any
87264,all
87265,any
87266,all
87267,min
87268,max
87269,sum
87270,max
87271,"$ python -m timeit ""max(_ for _ in range(1))"""
87272,"500000 loops, best of 5: 476 nsec per loop"
87273,"$ python -m timeit ""max([_ for _ in range(1)])"""
87274,"500000 loops, best of 5: 425 nsec per loop"
87275,"$ python -m timeit ""max(_ for _ in range(100))"""
87276,"50000 loops, best of 5: 4.42 usec per loop"
87277,"$ python -m timeit ""max([_ for _ in range(100)])"""
87278,"100000 loops, best of 5: 3.79 usec per loop"
87279,"$ python -m timeit ""max(_ for _ in range(10000))"""
87280,"500 loops, best of 5: 468 usec per loop"
87281,"$ python -m timeit ""max([_ for _ in range(10000)])"""
87282,"500 loops, best of 5: 442 usec per loop"
87283,type
87284,import types
87285,
87286,if type(a) is types.DictType:
87287,    do_something()
87288,if type(b) in types.StringTypes:
87289,    do_something_else()
87290,isinstance
87291,"if isinstance(a, dict):"
87292,    do_something()
87293,"if isinstance(b, str) or isinstance(b, unicode):"
87294,    do_something_else()
87295,str
87296,unicode
87297,basestring
87298,something
87299,int
87300,str
87301,"isinstance(something, (int, str))"
87302,type()
87303,type(9) == int
87304,isinstance()
87305,isinstance
87306,isinstance
87307,type
87308,isinstance
87309,type
87310,isinstance
87311,try
87312,except
87313,except
87314,basestring
87315,isinstance
87316,str
87317,unicode
87318,basestring
87319,basestring
87320,isinstance
87321,"if isinstance(x, basestring)"
87322,  return treatasscalar(x)
87323,try:
87324,  return treatasiter(iter(x))
87325,except TypeError:
87326,  return treatasscalar(x)
87327,basestring
87328,isinstance
87329,isinstance
87330,issubclass
87331,isinstance
87332,issubclass
87333,isinstance
87334,isinstance
87335,type
87336,class Vehicle:
87337,    pass
87338,
87339,class Truck(Vehicle):
87340,    pass
87341,"isinstance(Vehicle(), Vehicle)  # returns True"
87342,type(Vehicle()) == Vehicle      # returns True
87343,"isinstance(Truck(), Vehicle)    # returns True"
87344,"type(Truck()) == Vehicle        # returns False, and this probably won't be what you want."
87345,isinstance
87346,type
87347,isinstance
87348,type()
87349,type()
87350,isinstance()
87351,isinstance()
87352,type()
87353,"isinstance(obj, Base)"
87354,"isinstance(obj, (Base1, Base2))"
87355,type(obj) is Base
87356,is
87357,type(obj) == Base
87358,def function_of_duck(duck):
87359,    duck.quack()
87360,    duck.swim()
87361,function_of_duck(mallard)
87362,function_of_duck(object_that_quacks_and_swims_like_a_duck)
87363,isinstance()
87364,type()
87365,type
87366,def foo(data):
87367,"    '''accepts a dict to construct something, string support in future'''"
87368,    if type(data) is not dict:
87369,        # we're only going to test for dicts for now
87370,        raise ValueError('only dicts are supported for now')
87371,dict
87372,from collections import OrderedDict
87373,
87374,"foo(OrderedDict([('foo', 'bar'), ('fizz', 'buzz')]))"
87375,Traceback (most recent call last):
87376,"  File ""<stdin>"", line 1, in <module>"
87377,"  File ""<stdin>"", line 3, in foo"
87378,ValueError: argument must be a dict
87379,isinstance
87380,isinstance
87381,def foo(a_dict):
87382,"    if not isinstance(a_dict, dict):"
87383,        raise ValueError('argument must be a dict')
87384,    return a_dict
87385,
87386,"foo(OrderedDict([('foo', 'bar'), ('fizz', 'buzz')]))"
87387,"OrderedDict([('foo', 'bar'), ('fizz', 'buzz')])"
87388,collections
87389,Mapping
87390,from collections import Mapping
87391,
87392,def foo(a_dict):
87393,"    if not isinstance(a_dict, Mapping):"
87394,        raise ValueError('argument must be a dict')
87395,    return a_dict
87396,"type(obj) in (A, B, C)"
87397,"isinstance(obj, (A, B, C))"
87398,isinstance
87399,type
87400,isinstance
87401,"isinstance(instance, y)"
87402,from v.w.x import y
87403,instance
87404,from x import y
87405,isinstance()
87406,"if isinstance(b, (str, unicode)):"
87407,    do_something_else()
87408,basestring
87409,"if isinstance(b, basestring):"
87410,    do_something_else()
87411,booleans
87412,True
87413,False
87414,1
87415,0
87416,"isinstance(True, int)"
87417,"isinstance(False, int)"
87418,True
87419,type()
87420,type(True) == int
87421,False
87422,int()
87423,str()
87424,isinstance()
87425,type()
87426,code
87427,isinstance()
87428,abc.__instancecheck__
87429,# file tree
87430,# /test/__init__.py
87431,# /test/aaa/__init__.py
87432,# /test/aaa/aa.py
87433,class b():
87434,pass
87435,
87436,# /test/aaa/a.py
87437,import sys
87438,sys.path.append('/test')
87439,
87440,from aaa.aa import b
87441,from aa import b as c
87442,
87443,d = b()
87444,
87445,"print(b, c, d.__class__)"
87446,"for i in [b, c, object]:"
87447,"    print(i, '__subclasses__',  i.__subclasses__())"
87448,"    print(i, '__mro__', i.__mro__)"
87449,"    print(i, '__subclasshook__', i.__subclasshook__(d.__class__))"
87450,"    print(i, '__subclasshook__', i.__subclasshook__(type(d)))"
87451,"print(isinstance(d, b))"
87452,"print(isinstance(d, c))"
87453,
87454,<class 'aaa.aa.b'> <class 'aa.b'> <class 'aaa.aa.b'>
87455,<class 'aaa.aa.b'> __subclasses__ []
87456,"<class 'aaa.aa.b'> __mro__ (<class 'aaa.aa.b'>, <class 'object'>)"
87457,<class 'aaa.aa.b'> __subclasshook__ NotImplemented
87458,<class 'aaa.aa.b'> __subclasshook__ NotImplemented
87459,<class 'aa.b'> __subclasses__ []
87460,"<class 'aa.b'> __mro__ (<class 'aa.b'>, <class 'object'>)"
87461,<class 'aa.b'> __subclasshook__ NotImplemented
87462,<class 'aa.b'> __subclasshook__ NotImplemented
87463,"<class 'object'> __subclasses__ [..., <class 'aaa.aa.b'>, <class 'aa.b'>]"
87464,"<class 'object'> __mro__ (<class 'object'>,)"
87465,<class 'object'> __subclasshook__ NotImplemented
87466,<class 'object'> __subclasshook__ NotImplemented
87467,True
87468,False
87469,type
87470,"# according to `abc.__instancecheck__`, they are maybe different! I have not found negative one "
87471,type(INSTANCE) ~= INSTANCE.__class__
87472,type(CLASS) ~= CLASS.__class__
87473,isinstance
87474,# guess from `abc.__instancecheck__`
87475,"return any(c in cls.__mro__ or c in cls.__subclasses__ or cls.__subclasshook__(c) for c in {INSTANCE.__class__, type(INSTANCE)})"
87476,relative and absolutely import
87477,absolutely import
87478,sys.path
87479,type()
87480,isinstance()
87481,isinstance
87482,type(x) == ...
87483,type
87484,bool
87485,----Case bool----
87486,
87487,print(type(True) == int) # False
87488,print(type(False) == int) # False
87489,print(type(True) == bool) # True
87490,print(type(False) == bool) # True
87491,
87492,"print(isinstance(True, int)) # True"
87493,"print(isinstance(True, int)) # True"
87494,
87495,
87496,
87497,----Case inheritance----
87498,class A:
87499,    x=1
87500,
87501,class B(A):
87502,    x=2
87503,
87504,class C(B):
87505,    x=3
87506,    
87507,var1 = A()
87508,var2 = B()
87509,var3 = C()
87510,
87511,print(type(var1)) # <class '__main__.A'>
87512,print(type(var1) == A) # True
87513,print(type(var2) == A) # False
87514,print(type(var3) == A) # False
87515,
87516,"print(isinstance(var1, A)) # True"
87517,"print(isinstance(var2, A)) # True"
87518,"print(isinstance(var3, A)) # True"
87519,
87520,
87521,
87522,print(type(var2)) # <class '__main__.B'>
87523,print(type(var1) == B) # False
87524,print(type(var2) == B) # True
87525,print(type(var3) == B) # False
87526,
87527,"print(isinstance(var1, B)) # False"
87528,"print(isinstance(var2, B)) # True"
87529,"print(isinstance(var3, B)) # True"
87530,
87531,
87532,
87533,print(type(var3)) # <class '__main__.C'>
87534,print(type(var1) == C) # False
87535,print(type(var2) == C) # False
87536,print(type(var3) == C) # True
87537,
87538,"print(isinstance(var1, C)) # False"
87539,"print(isinstance(var2, C)) # False"
87540,"print(isinstance(var3, C)) # True"
87541,Dictionary
87542,"dictionary = {'george' : 16, 'amber' : 19}"
87543,"search_age = raw_input(""Provide age"")"
87544,for age in dictionary.values():
87545,    if age == search_age:
87546,        name = dictionary[age]
87547,        print name
87548,KeyError
87549,"mydict = {'george': 16, 'amber': 19}"
87550,print mydict.keys()[mydict.values().index(16)]  # Prints george
87551,"mydict = {'george': 16, 'amber': 19}"
87552,print(list(mydict.keys())[list(mydict.values()).index(16)])  # Prints george
87553,keys()
87554,.values()
87555,list.keys()
87556,list.values()
87557,index
87558,dict
87559,"dictionary = {'george': 16, 'amber': 19}"
87560,"search_age = input(""Provide age"")"
87561,"for name, age in dictionary.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)"
87562,    if age == search_age:
87563,        print(name)
87564,dict
87565,dict
87566,.items()
87567,"(key, value)"
87568,"for name, age in mydict.items():"
87569,    if age == search_age:
87570,        print name
87571,for
87572,"{16: 'george', 19: 'amber'}"
87573,mydict[search_age]
87574,mydict
87575,list
87576,list
87577,"[name for name, age in mydict.items() if age == search_age]"
87578,"next((name for name, age in mydict.items() if age == search_age), None)"
87579,None
87580,dict
87581,.iteritems()
87582,.items()
87583,dict
87584,dict
87585,value --> key
87586,key --> value
87587,"def method1(dict, search_age):"
87588,"    for name, age in dict.iteritems():"
87589,        if age == search_age:
87590,            return name
87591,
87592,"def method2(dict, search_age):"
87593,"    return [name for name,age in dict.iteritems() if age == search_age]"
87594,
87595,"def method3(dict, search_age):"
87596,    return dict.keys()[dict.values().index(search_age)]
87597,profile.run()
87598,">>> profile.run(""for i in range(0,100000): method1(dict, 16)"")"
87599,     200004 function calls in 1.173 seconds
87600,">>> profile.run(""for i in range(0,100000): method2(dict, 16)"")"
87601,     200004 function calls in 1.222 seconds
87602,">>> profile.run(""for i in range(0,100000): method3(dict, 16)"")"
87603,     400004 function calls in 2.125 seconds
87604,">>> profile.run(""for i in range(0,10000): method1(UIC_CRS,'7088380')"")"
87605,     20004 function calls in 2.928 seconds
87606,">>> profile.run(""for i in range(0,10000): method2(UIC_CRS,'7088380')"")"
87607,     20004 function calls in 3.872 seconds
87608,">>> profile.run(""for i in range(0,10000): method3(UIC_CRS,'7088380')"")"
87609,     40004 function calls in 1.176 seconds
87610,keys()
87611,values()
87612,list(dict.keys())[list(dict.values()).index(search_age)]
87613,dict.keys()
87614,"next((k for k, v in dict.items() if v == search_age), None)"
87615,"next((k for k, v in dict.items() if v == search_age), None)"
87616,i.keys()
87617,i.values()
87618,"p = dict(zip(i.values(),i.keys()))"
87619,"mydict = {'george':16,'amber':19}"
87620,"res = dict((v,k) for k,v in mydict.iteritems())"
87621,print(res[16]) # Prints george
87622,"mydict = {'george':16,'amber':19}"
87623,"res = dict((v,k) for k,v in mydict.items())"
87624,print(res[16]) # Prints george
87625,print(res.get(16)) # Prints george
87626,"{'george':16,'amber':19,'jack':16}"
87627,"[k for k, v in dictionary.items() if v == 16])"
87628,"a = {'a':1,'b':2,'c':3}"
87629,"{v:k for k, v in a.items()}[1]"
87630,"{k:v for k, v in a.items() if v == 1}"
87631,"key = next((k for k in my_dict if my_dict[k] == val), None)"
87632,"lKey = [k for k, v in lDictionary.iteritems() if v == lValue][0] or 'else-key'"
87633,"reversed_dictionary = dict(map(reversed, dictionary.items()))"
87634,"lookup = {value: key for key, value in self.data}"
87635,lookup[value]
87636,Key
87637,dict
87638,"def getKey(dct,value):"
87639,     return [key for key in dct if (dct[key] == value)]
87640,dict.keys()
87641,dict.values()
87642,list.index()
87643,"names_dict = {'george':16,'amber':19}"
87644,"search_age = int(raw_input(""Provide age""))"
87645,key = names_dict.keys()[names_dict.values().index(search_age)]
87646,search_age
87647,value
87648,search_age
87649,type(dict_values)
87650,names_dict.values().index(search_age)
87651,list(names_dict.values()).index(search_age)
87652,#Code without comments.
87653,
87654,"list1 = {'george':16,'amber':19, 'Garry':19}"
87655,"search_age = raw_input(""Provide age: "")"
87656,print
87657,search_age = int(search_age)
87658,
87659,listByAge = {}
87660,
87661,"for name, age in list1.items():"
87662,    if age == search_age:
87663,        age = str(age)
87664,"        results = name + "" "" +age"
87665,        print results
87666,
87667,        age2 = int(age)
87668,"        listByAge[name] = listByAge.get(name,0)+age2"
87669,
87670,print
87671,print listByAge
87672,#Code with comments.
87673,#I've added another name with the same age to the list.
87674,"list1 = {'george':16,'amber':19, 'Garry':19}"
87675,#Original code.
87676,"search_age = raw_input(""Provide age: "")"
87677,print
87678,"#Because raw_input gives a string, we need to convert it to int,"
87679,#so we can search the dictionary list with it.
87680,search_age = int(search_age)
87681,
87682,"#Here we define another empty dictionary, to store the results in a more "
87683,#permanent way.
87684,listByAge = {}
87685,
87686,"#We use double variable iteration, so we get both the name and age "
87687,#on each run of the loop.
87688,"for name, age in list1.items():"
87689,    #Here we check if the User Defined age = the age parameter 
87690,    #for this run of the loop.
87691,    if age == search_age:
87692,"        #Here we convert Age back to string, because we will concatenate it "
87693,        #with the person's name. 
87694,        age = str(age)
87695,        #Here we concatenate.
87696,"        results = name + "" "" +age"
87697,        #If you want just the names and ages displayed you can delete
87698,"        #the code after ""print results"". If you want them stored, don't..."
87699,        print results
87700,
87701,        #Here we create a second variable that uses the value of
87702,        #the age for the current person in the list.
87703,"        #For example if ""Anna"" is ""10"", age2 = 10,"
87704,        #integer value which we can use in addition.
87705,        age2 = int(age)
87706,        #Here we use the method that checks or creates values in dictionaries.
87707,        #We create a new entry for each name that matches the User Defined Age
87708,"        #with default value of 0, and then we add the value from age2."
87709,"        listByAge[name] = listByAge.get(name,0)+age2"
87710,
87711,#Here we print the new dictionary with the users with User Defined Age.
87712,print
87713,print listByAge
87714,#Results
87715,Running: *\test.py (Thu Jun 06 05:10:02 2013)
87716,
87717,Provide age: 19
87718,
87719,amber 19
87720,Garry 19
87721,
87722,"{'amber': 19, 'Garry': 19}"
87723,
87724,Execution Successful!
87725,"get_key = lambda v, d: next(k for k in d if d[k] is v)"
87726,is
87727,None
87728,True
87729,False
87730,a = 'foobar'; a is 'foobar'
87731,True
87732,get_key
87733,StopIteration
87734,"next(..., None)"
87735,None
87736,"get_first_key = lambda v, d: next((k for k in d if (v in d[k] is not None)), None)"
87737,import pandas as pd
87738,"list = {'george':16,'amber':19}"
87739,lookup_list = pd.Series(list)
87740,lookup_list[lookup_list.values == 19]
87741,Out[1]: 
87742,amber    19
87743,dtype: int64
87744,answer = lookup_list[lookup_list.values == 19].index
87745,answer = pd.Index.tolist(answer)
87746,"d= {'george':16,'amber':19}"
87747,
87748,"dict((v,k) for k,v in d.items()).get(16)"
87749,-> prints george
87750,"def recover_key(dicty,value):"
87751,    for a_key in dicty.keys():
87752,        if (dicty[a_key] == value):
87753,            return a_key
87754,for name in mydict:
87755,    if mydict[name] == search_age:
87756,        print(name) 
87757,        #or do something else with it. 
87758,"        #if in a function append to a temporary list, "
87759,        #then after the loop return the list
87760,"my_dict = {'A': 19, 'B': 28, 'carson': 28}"
87761,search_age = 28
87762,"name = next((name for name, age in my_dict.items() if age == search_age), None)"
87763,print(name)  # 'B'
87764,"name_list = [name for name, age in filter(lambda item: item[1] == search_age, my_dict.items())]"
87765,"print(name_list)  # ['B', 'carson']"
87766,">>> dictionary = {'george' : 16, 'amber' : 19, 'frank': 19}"
87767,>>>
87768,>>> age = 19
87769,>>> name = [k for k in dictionary.keys() if dictionary[k] == age]; name
87770,"['george', 'frank']"
87771,>>>
87772,">>> age = (16, 19)"
87773,>>> name = [k for k in dictionary.keys() if dictionary[k] in age]; name
87774,"['george', 'amber', 'frank']"
87775,>>>
87776,">>> age = (22, 25)"
87777,>>> name = [k for k in dictionary.keys() if dictionary[k] in age]; name
87778,[]
87779,"def find_key(value, dictionary):"
87780,"    return reduce(lambda x, y: x if x is not None else y,"
87781,"                  map(lambda x: x[0] if x[1] == value else None, "
87782,                      dictionary.iteritems()))
87783,"reversedict = dict([(value, key) for key, value in mydict.iteritems()])"
87784,"reversedict = {value:key for key, value in mydict.iteritems()}"
87785,reversedict = defaultdict(list)
87786,"[reversedict[value].append(key) for key, value in mydict.iteritems()]"
87787,"largedict = dict((x,x) for x in range(100000))"
87788,
87789,"# Should be slow, has to search 90000 entries before it finds it"
87790,In [26]: %timeit largedict.keys()[largedict.values().index(90000)]
87791,"100 loops, best of 3: 4.81 ms per loop"
87792,
87793,"# Should be fast, has to only search 9 entries to find it. "
87794,In [27]: %timeit largedict.keys()[largedict.values().index(9)]
87795,"100 loops, best of 3: 2.94 ms per loop"
87796,
87797,# How about using iterkeys() instead of keys()?
87798,"# These are faster, because you don't have to create the entire keys array."
87799,# You DO have to create the entire values array - more on that later.
87800,
87801,"In [31]: %timeit islice(largedict.iterkeys(), largedict.values().index(90000))"
87802,"100 loops, best of 3: 3.38 ms per loop"
87803,
87804,"In [32]: %timeit islice(largedict.iterkeys(), largedict.values().index(9))"
87805,"1000 loops, best of 3: 1.48 ms per loop"
87806,
87807,"In [24]: %timeit reversedict = dict([(value, key) for key, value in largedict.iteritems()])"
87808,"10 loops, best of 3: 22.9 ms per loop"
87809,
87810,In [23]: %%timeit
87811,....: reversedict = defaultdict(list)
87812,"....: [reversedict[value].append(key) for key, value in largedict.iteritems()]"
87813,....:
87814,"10 loops, best of 3: 53.6 ms per loop"
87815,In [72]: %%timeit
87816,"....: myf = ifilter(lambda x: x[1] == 90000, largedict.iteritems())"
87817,....: myf.next()[0]
87818,....:
87819,"100 loops, best of 3: 15.1 ms per loop"
87820,
87821,In [73]: %%timeit
87822,"....: myf = ifilter(lambda x: x[1] == 9, largedict.iteritems())"
87823,....: myf.next()[0]
87824,....:
87825,"100000 loops, best of 3: 2.36 us per loop"
87826,[
87827,;
87828,"d = { k1 : v1, k2 : v2, k3 : v1}"
87829,"myList = {'george':16,'amber':19, 'rachel':19, "
87830,           'david':15 }                         #Setting the dictionary
87831,result=[]                                       #Making ready of the result list
87832,search_age = int(input('Enter age '))
87833,
87834,for keywords in myList.keys():
87835,    if myList[keywords] ==search_age:
87836,"    result.append(keywords)                    #This part, we are making list of results"
87837,
87838,for res in result:                             #We are now printing the results
87839,    print(res)
87840,"D = {'Ali': 20, 'Marina': 12, 'George':16}"
87841,age = int(input('enter age:\t'))  
87842,for element in D.keys():
87843,    if D[element] == age:
87844,        print(element)
87845,enum
87846,enum34
87847,from enum import Enum
87848,
87849,class Color(Enum): 
87850,    red = 1 
87851,    green = 2 
87852,    blue = 3
87853,
87854,>>> print(Color.red) 
87855,Color.red
87856,
87857,>>> print(repr(Color.red)) 
87858,"<color.red: 1=""""> "
87859,
87860,>>> type(Color.red) 
87861,"<enum 'color'=""""> "
87862,">>> isinstance(Color.green, Color) "
87863,True 
87864,
87865,>>> member = Color.red 
87866,>>> member.name 
87867,'red' 
87868,>>> member.value 
87869,1 
87870,"def get_Value(dic,value):"
87871,    for name in dic:
87872,        if dic[name] == value:
87873,            del dic[name]
87874,            return name
87875,"d = {'Adams': [18, 29, 30],"
87876,"     'Allen': [9, 27],"
87877,"     'Anderson': [24, 26],"
87878,"     'Bailey': [7, 30],"
87879,"     'Baker': [31, 7, 10, 19],"
87880,"     'Barnes': [22, 31, 10, 21],"
87881,"     'Bell': [2, 24, 17, 26]}"
87882,for key in d.keys():    
87883,    if 24 in d[key]:
87884,        print(key)
87885,lambda
87886,filter
87887,"filter( lambda x, dictionary=dictionary, search_age=int(search_age): dictionary[x] == search_age  , dictionary )"
87888,"titleDic = {'Фильмы':1, 'Музыка':2}"
87889,
87890,"def categoryTitleForNumber(self, num):"
87891,    search_title = ''
87892,"    for title, titleNum in self.titleDic.items():"
87893,        if int(titleNum) == int(num):
87894,            search_title = title
87895,    return search_title
87896,--onefile
87897,--onedir
87898,--onefile
87899,\Temp\_MEI95642\
87900,.spec
87901,"a.datas += [('images/icon.ico', 'D:\\[workspace]\\App\\src\\images\\icon.ico',  'DATA'),"
87902,"('images/loaderani.gif','D:\\[workspace]\\App\\src\\images\\loaderani.gif','DATA')]     "
87903,a.datas += ...
87904,COLLECT
87905,--onefile
87906,env
87907,sys._MEIPASS
87908,def resource_path(relative_path):
87909,"    """""" Get absolute path to resource, works for dev and for PyInstaller """""""
87910,    try:
87911,        # PyInstaller creates a temp folder and stores path in _MEIPASS
87912,        base_path = sys._MEIPASS
87913,    except Exception:
87914,"        base_path = os.path.abspath(""."")"
87915,
87916,"    return os.path.join(base_path, relative_path)"
87917,_MEIPASS2
87918,sys._MEIPASS
87919,"path = getattr(sys, '_MEIPASS', os.getcwd())"
87920,AttributeError
87921,Exception
87922,os.path.abspath
87923,_MEIPASS2
87924,_MEIPASS2
87925,def resource_path(relative):
87926,    return os.path.join(
87927,        os.environ.get(
87928,"            ""_MEIPASS2"","
87929,"            os.path.abspath(""."")"
87930,"        ),"
87931,        relative
87932,    )
87933,# in development
87934,">>> resource_path(""app_icon.ico"")"
87935,"""/home/shish/src/my_app/app_icon.ico"""
87936,
87937,# in production
87938,">>> resource_path(""app_icon.ico"")"
87939,"""/tmp/_MEI34121/app_icon.ico"""
87940,"resource_path(""file_to_be_accessed.mp3"")"
87941,--one-file
87942,sys._MEIPASS
87943,import sys
87944,import os
87945,
87946,def resource_path(relative_path):
87947,"    """""" Get absolute path to resource, works for dev and for PyInstaller """""""
87948,"    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))"
87949,"    return os.path.join(base_path, relative_path)"
87950,os.env['_MEIPASS2']
87951,sys._MEIPASS
87952,resource_path()
87953,__file__
87954,def resource_path(relative_path):
87955,""""""" Get absolute path to resource, works for dev and for PyInstaller """""""
87956,"    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))"
87957,"    return os.path.join(base_path, relative_path)"
87958,"a = Analysis(['C:\\Users\\TCK\\Desktop\\Projeler\\Converter-GUI.py'],"
87959,"             pathex=['C:\\Users\\TCK\\Desktop\\Projeler'],"
87960,"             binaries=[],"
87961,"             datas=[],"
87962,"             hiddenimports=[],"
87963,"             hookspath=[],"
87964,"             runtime_hooks=[],"
87965,"             excludes=[],"
87966,"             win_no_prefer_redirects=False,"
87967,"             win_private_assemblies=False,"
87968,             cipher=block_cipher)
87969,#Add the file like the below example
87970,"a.datas += [('Converter-GUI.ico', 'C:\\Users\\TCK\\Desktop\\Projeler\\Converter-GUI.ico', 'DATA')]"
87971,"pyz = PYZ(a.pure, a.zipped_data,"
87972,     cipher=block_cipher)
87973,"exe = EXE(pyz,"
87974,"          a.scripts,"
87975,"          exclude_binaries=True,"
87976,"          name='Converter-GUI',"
87977,"          debug=False,"
87978,"          strip=False,"
87979,"          upx=True,"
87980,          #Turn the console option False if you don't want to see the console while executing the program.
87981,"          console=False,"
87982,          #Add an icon to the program.
87983,          icon='C:\\Users\\TCK\\Desktop\\Projeler\\Converter-GUI.ico')
87984,
87985,"coll = COLLECT(exe,"
87986,"               a.binaries,"
87987,"               a.zipfiles,"
87988,"               a.datas,"
87989,"               strip=False,"
87990,"               upx=True,"
87991,               name='Converter-GUI')
87992,def resource_path(relative_path):
87993,""""""" Get absolute path to resource, works for dev and for PyInstaller """""""
87994,"    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))"
87995,"    return os.path.join(base_path, relative_path)"
87996,"image_path = resource_path(""Converter-GUI.ico"")"
87997,    self.window.iconbitmap(image_path)
87998,    pyinstaller --onefile your_file.py
87999,    pyinstaller your_file.spec
88000,a.datas
88001,project_folder/
88002,    main.py
88003,    xxx.py # another module
88004,    yyy.py # another module
88005,    sound/ # directory containing the sound files
88006,    img/ # directory containing the image files
88007,    venv/ # if using a venv
88008,sound/
88009,img/
88010,sound_dir
88011,img_dir
88012,"img_dir = os.path.join(os.path.dirname(__file__), ""img"")"
88013,"sound_dir = os.path.join(os.path.dirname(__file__), ""sound"")"
88014,"img_dir = resource_path(""img"")"
88015,"sound_dir = resource_path(""sound"")"
88016,resource_path()
88017,def resource_path(relative_path):
88018,"    """""" Get absolute path to resource, works for dev and for PyInstaller """""""
88019,"    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))"
88020,"    return os.path.join(base_path, relative_path)"
88021,pip3 install pyinstaller
88022,pyi-makespec --onefile main.py
88023,project_folder/
88024,    main.py
88025,    xxx.py # modules
88026,    xxx.py # modules
88027,    sound/ # directory containing the sound files
88028,    img/ # directory containing the image files
88029,    venv/ # if using a venv
88030,    main.spec
88031,main.spec
88032,added_files = [
88033,
88034,"(""sound"", ""sound""),"
88035,"(""img"", ""img"")"
88036,
88037,]
88038,"datas=[],"
88039,"datas=added_files,"
88040,main.spec
88041,pyinstaller --onefile main.spec
88042,main
88043,project_folder/dist
88044,main
88045,"if getattr(sys, 'frozen', False):"
88046,    os.chdir(sys._MEIPASS)
88047,--onefile
88048,-F
88049,def img_resource_path(relative_path):
88050,"    """""" Get absolute path to resource, works for dev and for PyInstaller """""""
88051,    try:
88052,        # PyInstaller creates a temp folder and stores path in _MEIPASS
88053,        base_path = sys._MEIPASS
88054,    except Exception:
88055,"        base_path = os.path.abspath(""."")"
88056,
88057,"    return os.path.join(base_path, relative_path)"
88058,"icon_path = img_resource_path(""app/img/app_icon.ico"")"
88059,root.wm_iconbitmap(icon_path)
88060,pyinstaller
88061,"('app/img/*.ico', 'app/img')"
88062,"added_files = [ (), (), ()]"
88063,a = Analysis([main...
88064,datas=added_files
88065,datas=[]
88066,icon='app\\img\\app_icon.ico'
88067,added_files = [
88068,"    ('app/img/app_icon.ico','app/img/')"
88069,]
88070,"a = Analysis(['main.py'],"
88071,"             pathex=['D:\\Github Repos\\Processes-Killer\\Process Killer'],"
88072,"             binaries=[],"
88073,"             datas=added_files,"
88074,"             hiddenimports=[],"
88075,"             hookspath=[],"
88076,"             runtime_hooks=[],"
88077,"             excludes=[],"
88078,"             win_no_prefer_redirects=False,"
88079,"             win_private_assemblies=False,"
88080,"             cipher=block_cipher,"
88081,             noarchive=False)
88082,"pyz = PYZ(a.pure, a.zipped_data,"
88083,             cipher=block_cipher)
88084,"exe = EXE(pyz,"
88085,"          a.scripts,"
88086,"          a.binaries,"
88087,"          a.zipfiles,"
88088,"          a.datas,"
88089,"          [],"
88090,"          name='Process Killer',"
88091,"          debug=False,"
88092,"          bootloader_ignore_signals=False,"
88093,"          strip=False,"
88094,"          upx=True,"
88095,"          upx_exclude=[],"
88096,"          runtime_tmpdir=None,"
88097,"          console=True , uac_admin=True, icon='app\\img\\app_icon.ico')"
88098,"pyinstaller.exe ""Process Killer.spec"""
88099,def resource_path(relative_path):
88100,"    """""" Get absolute path to resource, works for dev and for PyInstaller """""""
88101,"    if hasattr(sys, '_MEIPASS'):"
88102,"        return os.path.join(sys._MEIPASS, relative_path)"
88103,
88104,"    return os.path.join(os.path.abspath("".""), relative_path)"
88105,resource_path()
88106,"for root, dirs, files in os.walk(resource_path("""")):"
88107,    print(root)
88108,    for file in files:
88109,"        print( ""  "",file)"
88110,--runtime-hook=my_hook.py
88111,pyinstaller.py --onefile -F --add-data=images;images --runtime-hook=cp_images_hook.py main.py
88112,import sys
88113,import os
88114,import shutil
88115,
88116,"path = getattr(sys, '_MEIPASS', os.getcwd())"
88117,
88118,"full_path = path+""\\images"""
88119,try:
88120,"    shutil.move(full_path, "".\\images"")"
88121,except:
88122,"    print(""Cannot create 'images' folder. Already exists."")"
88123,import sys
88124,import os
88125,
88126,"path = getattr(sys, '_MEIPASS', os.getcwd())   "
88127,os.chdir(path)
88128,Failed to execute script foo
88129,foo.py
88130,--noconsole
88131,main.spec
88132,console=False
88133,console=True
88134,"('x', 'x')"
88135,x
88136,sword.png
88137,C:\Users\ashes999\AppData\Local\Temp\_MEI157682\images\sword.png
88138,main.exe.manifest
88139,python35.dll
88140,"if hasattr(sys, '_MEIPASS'):"
88141,    os.chdir(sys._MEIPASS)
88142,def getPath(filename):
88143,    import os
88144,    import sys
88145,    from os import chdir
88146,    from os.path import join
88147,    from os.path import dirname
88148,    from os import environ
88149,    
88150,"    if hasattr(sys, '_MEIPASS'):"
88151,        # PyInstaller >= 1.6
88152,        chdir(sys._MEIPASS)
88153,"        filename = join(sys._MEIPASS, filename)"
88154,    elif '_MEIPASS2' in environ:
88155,        # PyInstaller < 1.6 (tested on 1.5 only)
88156,        chdir(environ['_MEIPASS2'])
88157,"        filename = join(environ['_MEIPASS2'], filename)"
88158,    else:
88159,        chdir(dirname(sys.argv[0]))
88160,"        filename = join(dirname(sys.argv[0]), filename)"
88161,        
88162,    return filename
88163,import pkgutil
88164,"datas = [(""path/to/mypackage/data_file.txt"", ""path/to/mypackage"")]"
88165,mypackage
88166,      __init__.py  # This is a MUST in order for the package to be registered
88167,      data_file.txt  # The data file you've added
88168,Hello world!
88169,import pkgutil
88170,
88171,"file = pkgutil.get_data(""mypackage"", ""data_file.txt"")"
88172,"contents = file.decode(""utf-8"")"
88173,print(contents)  # Hello world!
88174,pkgutil
88175,__init__.py
88176,"--add-data ""yourDir/And/OrFile;yourDir"""
88177,>>> from BeautifulSoup import BeautifulSoup
88178,
88179,">>> soup = BeautifulSoup(""<p>&pound;682m</p>"")"
88180,">>> text = soup.find(""p"").string"
88181,
88182,>>> print text
88183,&pound;682m
88184,text
88185,"""£682m"""
88186,"""&pound;682m"""
88187,html.unescape()
88188,import html
88189,print(html.unescape('&pound;682m'))
88190,html.parser.HTMLParser.unescape
88191,HTMLParser.unescape()
88192,HTMLParser
88193,html.parser
88194,>>> try:
88195,...     # Python 2.6-2.7 
88196,...     from HTMLParser import HTMLParser
88197,... except ImportError:
88198,...     # Python 3
88199,...     from html.parser import HTMLParser
88200,... 
88201,>>> h = HTMLParser()
88202,>>> print(h.unescape('&pound;682m'))
88203,£682m
88204,six
88205,>>> from six.moves.html_parser import HTMLParser
88206,>>> h = HTMLParser()
88207,>>> print(h.unescape('&pound;682m'))
88208,£682m
88209,"h.unescape(s).encode(""utf-8"")"
88210,convertEntities
88211,BeautifulSoup
88212,>>> from BeautifulSoup import BeautifulSoup
88213,">>> BeautifulSoup(""<p>&pound;682m</p>"", "
88214,...               convertEntities=BeautifulSoup.HTML_ENTITIES)
88215,<p>£682m</p>
88216,>>> from bs4 import BeautifulSoup
88217,">>> BeautifulSoup(""<p>&pound;682m</p>"")"
88218,<html><body><p>£682m</p></body></html>
88219,BeautifulSoup4
88220,HTMLParser
88221,In [202]: from w3lib.html import replace_entities
88222,
88223,"In [203]: replace_entities(""&pound;682m"")"
88224,Out[203]: u'\xa3682m'
88225,
88226,"In [204]: print replace_entities(""&pound;682m"")"
88227,£682m
88228,formatter=None
88229,print(soup.prettify(formatter=None))
88230,# <html>
88231,#  <body>
88232,#   <p>
88233,#    Il a dit <<Sacré bleu!>>
88234,#   </p>
88235,#  </body>
88236,# </html>
88237,
88238,"link_soup = BeautifulSoup('<a href=""http://example.com/?foo=val1&bar=val2"">A link</a>')"
88239,print(link_soup.a.encode(formatter=None))
88240,"# <a href=""http://example.com/?foo=val1&bar=val2"">A link</a>"
88241,    import unicodedata 
88242,"    table = pd.DataFrame(data,columns=['Name','Team','OVR / POT'])"
88243,    table.index+= 1
88244,     #this is where the magic happens
88245,"     html_data=unicodedata.normalize('NFKD',table.to_html()).encode('ascii','ignore')"
88246,"    file = open(""templates/home.html"",""w"") "
88247,
88248,    file.write(html_data) 
88249,
88250,    file.close() 
88251,import re
88252,import HTMLParser
88253,
88254,"regexp = ""&.+?;"" "
88255,"list_of_html = re.findall(regexp, page) #finds all html entites in page"
88256,for e in list_of_html:
88257,    h = HTMLParser.HTMLParser()
88258,    unescaped = h.unescape(e) #finds the unescaped value of the html entity
88259,"    page = page.replace(e, unescaped) #replaces html entity with unescaped value"
88260,.unescape()
88261,.unescape()
88262,+=
88263,class foo:  
88264,     bar = []
88265,"     def __init__(self,x):"
88266,         self.bar += [x]
88267,
88268,
88269,class foo2:
88270,     bar = []
88271,"     def __init__(self,x):"
88272,          self.bar = self.bar + [x]
88273,
88274,f = foo(1)
88275,g = foo(2)
88276,print f.bar
88277,print g.bar 
88278,
88279,f.bar += [3]
88280,print f.bar
88281,print g.bar
88282,
88283,f.bar = f.bar + [4]
88284,print f.bar
88285,print g.bar
88286,
88287,f = foo2(1)
88288,g = foo2(2)
88289,print f.bar 
88290,print g.bar 
88291,"[1, 2]"
88292,"[1, 2]"
88293,"[1, 2, 3]"
88294,"[1, 2, 3]"
88295,"[1, 2, 3, 4]"
88296,"[1, 2, 3]"
88297,[1]
88298,[2]
88299,foo += bar
88300,foo = foo + bar
88301,+=
88302,+
88303,+=
88304,my_list += [x]
88305,+=
88306,__iadd__
88307,__add__
88308,__iadd__
88309,__add__
88310,+
88311,+=
88312,__iadd__
88313,__add__
88314,+=
88315,a += b
88316,a = a + b
88317,__iadd__
88318,__add__
88319,a += b
88320,__iadd__
88321,a
88322,a = a + b
88323,a
88324,">>> a1 = a2 = [1, 2]"
88325,">>> b1 = b2 = [1, 2]"
88326,">>> a1 += [3]          # Uses __iadd__, modifies a1 in-place"
88327,">>> b1 = b1 + [3]      # Uses __add__, creates new list, assigns it to b1"
88328,>>> a2
88329,"[1, 2, 3]              # a1 and a2 are still the same list"
88330,>>> b2
88331,"[1, 2]                 # whereas only b1 was changed"
88332,__iadd__
88333,a += b
88334,a = a + b
88335,+=
88336,+=
88337,__radd__
88338,+=
88339,x = []; x = x + {}
88340,TypeError
88341,x = []; x += {}
88342,[]
88343,bar
88344,+=
88345,someListObject.extend(iterableObject)
88346,extend
88347,foo += something
88348,foo
88349,foo
88350,foo = foo + something
88351,>>> l = []
88352,>>> id(l)
88353,13043192
88354,>>> l += [3]
88355,>>> id(l)
88356,13043192
88357,>>> l = l + [3]
88358,>>> id(l)
88359,13059216
88360,l
88361,bar
88362,self.bar
88363,self.bar
88364,a += b
88365,a = a + b
88366,a
88367,b
88368,extend
88369,+=
88370,bar
88371,foo
88372,init
88373,foo2
88374,bar
88375,class foo:
88376,"    def __init__(self, x):"
88377,        self.bar = [x]
88378,class foo:
88379,    bar = []
88380,
88381,foo.bar = [x]
88382,1. class attributes and instance attributes
88383,2. difference between the operators + and += for lists
88384,+
88385,__add__
88386,+=
88387,__iadd__
88388,foo
88389,self.bar += [x]
88390,self.bar.__iadd__([x])  # modifies the class attribute  
88391,extend
88392,foo2
88393,init
88394,self.bar = self.bar + [x]  
88395,bar
88396,bar
88397,x
88398,self.bar = self.bar.__add__([x]) # bar on the lhs is the class attribute 
88399,bar
88400,bar
88401,bar
88402,foo
88403,bar
88404,bar
88405,foo2
88406,bar
88407,bar
88408,f = foo2(4)
88409,print f.bar # accessing the instance attribute. prints [4]  
88410,print f.__class__.bar # accessing the class attribute. prints []  
88411,+=
88412,foo
88413,__init__
88414,self.bar += [x]
88415,self.bar = self.bar.__iadd__([x])
88416,__iadd__()
88417,foo.bar = []
88418,bar
88419,foo2
88420,bar
88421,[x]
88422,self.bar.__add__([x])
88423,... = ... + ...
88424,... += ...
88425,f = foo(1) # adds 1 to the class's bar and assigns f.bar to this as well.
88426,g = foo(2) # adds 2 to the class's bar and assigns g.bar to this as well.
88427,"# Here, foo.bar, f.bar and g.bar refer to the same object."
88428,"print f.bar # [1, 2]"
88429,"print g.bar # [1, 2]"
88430,
88431,f.bar += [3] # adds 3 to this object
88432,"print f.bar # As these still refer to the same object,"
88433,print g.bar # the output is the same.
88434,
88435,"f.bar = f.bar + [4] # Construct a new list with the values of the old ones, 4 appended."
88436,print f.bar # Print the new one
88437,print g.bar # Print the old one.
88438,
88439,f = foo2(1) # Here a new list is created on every call.
88440,g = foo2(2)
88441,print f.bar # So these all obly have one element.
88442,print g.bar 
88443,"print id(foo), id(f), id(g)"
88444,()
88445,+=
88446,">>> elements=[[1],[2],[3]]"
88447,>>> subset=[]
88448,>>> subset+=elements[0:1]
88449,>>> subset
88450,[[1]]
88451,>>> elements
88452,"[[1], [2], [3]]"
88453,>>> subset[0][0]='change'
88454,>>> elements
88455,"[['change'], [2], [3]]"
88456,
88457,">>> a=[1,2,3,4]"
88458,>>> b=a
88459,>>> a+=[5]
88460,">>> a,b"
88461,"([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])"
88462,">>> a=[1,2,3,4]"
88463,>>> b=a
88464,>>> a=a+[5]
88465,">>> a,b"
88466,"([1, 2, 3, 4, 5], [1, 2, 3, 4])"
88467,>>> a = 89
88468,>>> id(a)
88469,4434330504
88470,>>> a = 89 + 1
88471,>>> print(a)
88472,90
88473,>>> id(a)
88474,4430689552  # this is different from before!
88475,
88476,">>> test = [1, 2, 3]"
88477,>>> id(test)
88478,48638344L
88479,>>> test2 = test
88480,>>> id(test)
88481,48638344L
88482,>>> test2 += [4]
88483,>>> id(test)
88484,48638344L
88485,">>> print(test, test2)  # [1, 2, 3, 4] [1, 2, 3, 4]```"
88486,"([1, 2, 3, 4], [1, 2, 3, 4])"
88487,>>> id(test2)
88488,48638344L # ID is different here
88489,listname.extend()
88490,DataFrame
88491,df.loc[:5]
88492,df.iloc[:5]
88493,df.ix[:5]
88494,ix
88495,loc
88496,iloc
88497,s
88498,">>> s = pd.Series(list(""abcdef""), index=[49, 48, 47, 0, 1, 2]) "
88499,49    a
88500,48    b
88501,47    c
88502,0     d
88503,1     e
88504,2     f
88505,
88506,>>> s.loc[0]    # value at index label 0
88507,'d'
88508,
88509,>>> s.iloc[0]   # value at index location 0
88510,'a'
88511,
88512,>>> s.loc[0:1]  # rows at index labels between 0 and 1 (inclusive)
88513,0    d
88514,1    e
88515,
88516,>>> s.iloc[0:1] # rows at index location between 0 and 1 (exclusive)
88517,49    a
88518,s.loc
88519,s.iloc
88520,s.loc[<object>]
88521,s.iloc[<object>]
88522,0
88523,0
88524,'d'
88525,'a'
88526,0:1
88527,0
88528,1
88529,1:47
88530,1:47:-1
88531,1
88532,47
88533,"[2, 0]"
88534,s > 'e'
88535,'f'
88536,NotImplementedError
88537,(s>'e').values
88538,'f'
88539,loc
88540,999
88541,KeyError
88542,IndexError
88543,-1
88544,KeyError
88545,s
88546,lambda x: x.index[3]
88547,s.loc[s.index[3]]
88548,s.iloc[s.index[3]]
88549,loc
88550,">>> s2 = pd.Series(s.index, index=s.values)"
88551,>>> s2
88552,a    49
88553,b    48
88554,c    47
88555,d     0
88556,e     1
88557,f     2
88558,loc
88559,s2.loc['a']
88560,>>> s2.loc['c':'e']  # all rows lying between 'c' and 'e' (inclusive)
88561,c    47
88562,d     0
88563,e     1
88564,">>> s3 = pd.Series(list('abcde'), pd.date_range('now', periods=5, freq='M')) "
88565,>>> s3
88566,2021-01-31 16:41:31.879768    a
88567,2021-02-28 16:41:31.879768    b
88568,2021-03-31 16:41:31.879768    c
88569,2021-04-30 16:41:31.879768    d
88570,2021-05-31 16:41:31.879768    e
88571,>>> s3.loc['2021-03':'2021-04']
88572,2021-03-31 17:04:30.742316    c
88573,2021-04-30 17:04:30.742316    d
88574,loc
88575,iloc
88576,>>> import numpy as np 
88577,">>> df = pd.DataFrame(np.arange(25).reshape(5, 5),  "
88578,"                      index=list('abcde'), "
88579,"                      columns=['x','y','z', 8, 9])"
88580,>>> df
88581,    x   y   z   8   9
88582,a   0   1   2   3   4
88583,b   5   6   7   8   9
88584,c  10  11  12  13  14
88585,d  15  16  17  18  19
88586,e  20  21  22  23  24
88587,">>> df.loc['c': , :'z']  # rows 'c' and onwards AND columns up to 'z'"
88588,    x   y   z
88589,c  10  11  12
88590,d  15  16  17
88591,e  20  21  22
88592,
88593,">>> df.iloc[:, 3]        # all rows, but only the column at index location 3"
88594,a     3
88595,b     8
88596,c    13
88597,d    18
88598,e    23
88599,loc
88600,iloc
88601,>>> import numpy as np 
88602,">>> df = pd.DataFrame(np.arange(25).reshape(5, 5),  "
88603,"                      index=list('abcde'), "
88604,"                      columns=['x','y','z', 8, 9])"
88605,>>> df
88606,    x   y   z   8   9
88607,a   0   1   2   3   4
88608,b   5   6   7   8   9
88609,c  10  11  12  13  14
88610,d  15  16  17  18  19
88611,e  20  21  22  23  24
88612,iloc
88613,">>> df.iloc[:df.index.get_loc('c') + 1, :4]"
88614,    x   y   z   8
88615,a   0   1   2   3
88616,b   5   6   7   8
88617,c  10  11  12  13
88618,get_loc()
88619,iloc
88620,loc
88621,iloc
88622,ix
88623,"dfmi.loc[:, 'one'].loc[:, 'second']"
88624,dfmi['one']['second']
88625,"df.ix[date, 'Cash']"
88626,loc
88627,ix
88628,"df.loc['2016-04-29', 'Cash']"
88629,'2016-01'
88630,iloc
88631,df.iloc[0]
88632,df.iloc[-5:]
88633,"df.iloc[:, 2]    # the : in the first position indicates all rows"
88634,"df.iloc[:3, :3] # The upper-left 3 X 3 entries (assuming df has 3+ rows and columns)"
88635,.loc
88636,"df = pd.DataFrame(index=['a', 'b', 'c'], columns=['time', 'date', 'name'])"
88637,df.loc['a']     # equivalent to df.iloc[0]
88638,'date'
88639,"df.loc['b':, 'date']   # equivalent to df.iloc[1:, 1]"
88640,DataFrame
88641,iloc
88642,loc
88643,df.loc[:5]
88644,__getitem__
88645,"df['time']    # equivalent to df.loc[:, 'time']"
88646,.ix
88647,"df.ix[:2, 'time']    # the first two rows of the 'time' column"
88648,loc
88649," b = [True, False, True]"
88650, df.loc[b] 
88651,df
88652,df[b]
88653,"df.loc[b, 'name'] = 'Mary', 'John'"
88654,"df.loc[:, :]"
88655,DataFrame
88656,.iloc
88657,.iloc
88658,.iloc
88659,.ix
88660,.loc
88661,.iloc
88662,"df = pd.DataFrame({'age':[30, 2, 12, 4, 32, 33, 69],"
88663,"                   'color':['blue', 'green', 'red', 'white', 'gray', 'black', 'red'],"
88664,"                   'food':['Steak', 'Lamb', 'Mango', 'Apple', 'Cheese', 'Melon', 'Beans'],"
88665,"                   'height':[165, 70, 120, 80, 180, 172, 150],"
88666,"                   'score':[4.6, 8.3, 9.0, 3.3, 1.8, 9.5, 2.2],"
88667,"                   'state':['NY', 'TX', 'FL', 'AL', 'AK', 'TX', 'TX']"
88668,"                   },"
88669,"                  index=['Jane', 'Nick', 'Aaron', 'Penelope', 'Dean', 'Christina', 'Cornelia'])"
88670,age
88671,color
88672,food
88673,height
88674,score
88675,state
88676,Jane
88677,Nick
88678,Aaron
88679,Penelope
88680,Dean
88681,Christina
88682,Cornelia
88683,.loc
88684,.iloc
88685,.loc
88686,.loc
88687,.loc
88688,df.loc['Penelope']
88689,age           4
88690,color     white
88691,food      Apple
88692,height       80
88693,score       3.3
88694,state        AL
88695,"Name: Penelope, dtype: object"
88696,"df.loc[['Cornelia', 'Jane', 'Dean']]"
88697,df.loc['Aaron':'Dean']
88698,.iloc
88699,.iloc
88700,df.iloc[4]
88701,age           32
88702,color       gray
88703,food      Cheese
88704,height       180
88705,score        1.8
88706,state         AK
88707,"Name: Dean, dtype: object"
88708,"df.iloc[[2, -2]]"
88709,df.iloc[:5:3]
88710,.loc/.iloc
88711,"df.loc[['Jane', 'Dean'], 'height':]"
88712,.iloc
88713,"df.iloc[[1,4], 2]"
88714,Nick      Lamb
88715,Dean    Cheese
88716,"Name: food, dtype: object"
88717,.ix
88718,Nick
88719,Cornelia
88720,.loc
88721,"col_names = df.columns[[2, 4]]"
88722,"df.loc[['Nick', 'Cornelia'], col_names] "
88723,get_loc
88724,"labels = ['Nick', 'Cornelia']"
88725,index_ints = [df.index.get_loc(label) for label in labels]
88726,"df.iloc[index_ints, [2, 4]]"
88727,food
88728,score
88729,"df.loc[df['age'] > 30, ['food', 'score']] "
88730,.iloc
88731,"df.iloc[(df['age'] > 30).values, [2, 4]] "
88732,.loc/.iloc
88733,"df.loc[:, 'color':'score':2]"
88734,[]
88735,df['food']
88736,
88737,Jane          Steak
88738,Nick           Lamb
88739,Aaron         Mango
88740,Penelope      Apple
88741,Dean         Cheese
88742,Christina     Melon
88743,Cornelia      Beans
88744,"Name: food, dtype: object"
88745,"df[['food', 'score']]"
88746,df['Penelope':'Christina'] # slice rows by label
88747,df[2:6:2] # slice rows by integer location
88748,.loc/.iloc
88749,"df[3:5, 'color']"
88750,TypeError: unhashable type: 'slice'
88751,loc
88752,label
88753,.loc
88754,.iloc
88755,.loc
88756,.iloc
88757,.loc
88758,.iloc
88759,.iloc
88760,.loc
88761,.loc
88762,.loc
88763,iloc
88764,.iloc
88765,pandas
88766,pandas
88767,IndexError
88768,.iloc
88769,.loc
88770,">>> s = pd.Series([11, 9], index=[""1990"", ""1993""], name=""Magic Numbers"")"
88771,>>> s
88772,1990    11
88773,1993     9
88774,"Name: Magic Numbers , dtype: int64"
88775,.iloc
88776,>>> s.iloc[0]
88777,11
88778,>>> s.iloc[-1]
88779,9
88780,>>> s.iloc[4]
88781,Traceback (most recent call last):
88782,    ...
88783,IndexError: single positional indexer is out-of-bounds
88784,>>> s.iloc[0:3] # slice
88785,1990 11
88786,1993  9
88787,"Name: Magic Numbers , dtype: int64"
88788,">>> s.iloc[[0,1]] # list"
88789,1990 11
88790,1993  9
88791,"Name: Magic Numbers , dtype: int64"
88792,.loc
88793,>>> s.loc['1990']
88794,11
88795,>>> s.loc['1970']
88796,Traceback (most recent call last):
88797,    ...
88798,KeyError: ’the label [1970] is not in the [index]’
88799,>>> mask = s > 9
88800,>>> s.loc[mask]
88801,1990 11
88802,"Name: Magic Numbers , dtype: int64"
88803,>>> s.loc['1990':] # slice
88804,1990    11
88805,1993     9
88806,"Name: Magic Numbers, dtype: int64"
88807,s
88808,.loc
88809,>>> s.loc[0]
88810,Traceback (most recent call last):
88811,    ...
88812,KeyError: 0
88813,DataFrame.loc()
88814,DataFrame.iloc()
88815,df1
88816,df1.iloc[:5]
88817,df1
88818,"df1.loc['A','B']"
88819,"df = pd.DataFrame({'col1': [1,2,3,4,5], 'col2': [""foo"", ""bar"", ""baz"", ""foobar"", ""foobaz""]})"
88820,  col1  col2
88821,0   1   foo
88822,1   2   bar
88823,2   3   baz
88824,3   4   foobar
88825,4   5   foobaz
88826,
88827,"df = df.sort_values('col1', ascending = False)"
88828,      col1  col2
88829,    4   5   foobaz
88830,    3   4   foobar
88831,    2   3   baz
88832,    1   2   bar
88833,    0   1   foo
88834,"df.iloc[0, 0:2]"
88835,col1         5
88836,col2    foobaz
88837,"Name: 4, dtype: object"
88838,"df.loc[0, 'col1':'col2']"
88839,col1      1
88840,col2    foo
88841,"Name: 0, dtype: object"
88842,pip
88843,pip
88844,easy_install
88845,"easy_install-2.{5,6}"
88846,pip34
88847,pip35
88848,pip3.x
88849,pip3.x -V
88850,python -m pip
88851,python
88852,# The system default python:
88853,$ python -m pip install fish
88854,
88855,# A virtualenv's python:
88856,$ .env/bin/python -m pip install fish
88857,
88858,# A specific version of python:
88859,$ python-3.6 -m pip install fish
88860,pip-{version}
88861,easy_install-{version}
88862,$ pip-2.5 install myfoopackage
88863,$ pip-2.6 install otherpackage
88864,$ pip-2.7 install mybarpackage
88865,pipVERSION
88866,pip-VERSION
88867,pip >= 1.5
88868,$ pip2.6 install otherpackage
88869,$ pip2.7 install mybarpackage
88870,pip
88871,pip
88872,easy_install
88873,get-pip.py
88874,pip install --upgrade pip
88875,pip
88876,pip-2.7
88877,pip
88878,py.exe
88879,py -3 -m pip install packagename
88880,py -2 -m pip install packagename
88881,py -3.6 -m pip install packagename
88882,py --list
88883,C:/path/to/specific/python.exe -m pip install packagename
88884,python2
88885,python3
88886,pip2
88887,pip3
88888,"/path/to/python2.{5,6} /path/to/pip install PackageName"
88889,python*version* setup.py install
88890,python3.3 setup.py install
88891,python2.7 -m pip install PackageName
88892,curl -O https://bootstrap.pypa.io/get-pip.py
88893,python27 get-pip.py
88894,pip2.7 install mysql-connector-python --allow-external mysql-connector-python
88895,python3 get-pip.py
88896,pip34 install example
88897,Could not find a version that satisfies the requirement pip (from versions: ) No matching distribution found for pip
88898,python2.6 get-pip.py
88899,python2.7 get-pip.py
88900,python3 -m pip install package
88901,/usr/bin/python3 -m pip install python-daemon
88902,/usr/bin/python -m pip install python-daemon
88903,python3 -m pip install python-daemon
88904,pip3 install python-daemon
88905,conda
88906,sudo apt-get install python-pip 
88907,sudo apt-get install python3-pip
88908,sudo apt-get install python-pip
88909,sudo apt-get install python3-pip
88910,pip install <package>
88911,pip3 install <package>
88912,python2   -m pip install SomePackage  # default Python 2
88913,python2.7 -m pip install SomePackage  # specifically Python 2.7
88914,python3   -m pip install SomePackage  # default Python 3
88915,python3.4 -m pip install SomePackage  # specifically Python 3.4
88916,python3.5 -m pip install SomePackage  # specifically Python 3.5
88917,python3.6 -m pip install SomePackage  # specifically Python 3.6
88918,py -2   -m pip install SomePackage  # default Python 2
88919,py -2.7 -m pip install SomePackage  # specifically Python 2.7
88920,py -3   -m pip install SomePackage  # default Python 3
88921,py -3.4 -m pip install SomePackage  # specifically Python 3.4
88922,pipenv
88923, python2.7 /usr/bin/pip install foo
88924,python2.7 -m pip install foo
88925,easy_install
88926,pip
88927,$ sudo easy_install-2.7 pip
88928,Searching for pip
88929,Best match: pip 1.1
88930,Adding pip 1.1 to easy-install.pth file
88931,Installing pip-2.7 script to /usr/local/bin
88932,
88933,Using /usr/lib/python2.7/dist-packages
88934,Processing dependencies for pip
88935,Finished processing dependencies for pip
88936,
88937,$ sudo pip-2.7 install django
88938,Downloading/unpacking django
88939,  Downloading Django-1.5.1.tar.gz (8.0Mb): 8.0Mb downloaded
88940,  Running setup.py egg_info for package django
88941,
88942,    warning: no previously-included files matching '__pycache__' found under directory '*'
88943,    warning: no previously-included files matching '*.py[co]' found under directory '*'
88944,Installing collected packages: django
88945,  Running setup.py install for django
88946,    changing mode of build/scripts-2.7/django-admin.py from 644 to 755
88947,
88948,    warning: no previously-included files matching '__pycache__' found under directory '*'
88949,    warning: no previously-included files matching '*.py[co]' found under directory '*'
88950,    changing mode of /usr/local/bin/django-admin.py to 755
88951,Successfully installed django
88952,Cleaning up...
88953,
88954,$ python
88955,"Python 2.7.3 (default, Sep 26 2012, 21:51:14) "
88956,[GCC 4.7.2] on linux2
88957,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
88958,>>> import django
88959,>>> 
88960,-m
88961,pip
88962,python2.7 -m pip install SomePackage
88963,python3.4 -m pip install SomePackage
88964,py
88965,-m
88966,py -2.7 -m pip install SomePackage  # specifically Python 2.7
88967,py -3.4 -m pip install SomePackage  # specifically Python 3.4
88968,py -3.4
88969,pip install SomePackage
88970,Installed Pythons found by py Launcher for Windows
88971, -3.7-64 *
88972, -3.7-32
88973, -3.6-32
88974,py -3.6-32 -m pip install (package)
88975,py -3.6-32 -m pip install opencv-python==4.1.0.25
88976,sudo apt-get update
88977,sudo apt-get install software-properties-common
88978,sudo apt-add-repository universe
88979,sudo apt-get update
88980,sudo apt-get install -y build-essential cmake
88981,
88982,sudo apt-get install -y zlib1g zlib1g-dev libsqlite3-dev \
88983,openssl libssl-dev libffi-dev unzip pciutils net-tools \
88984,libblas-dev gfortran libblas3 
88985, $HOME/
88986,"     python_versions/ : download Python-*.tgz packages here and ""tar xvf"" them.  You'll get directories like this:"
88987,       Python-3.4.8/
88988,       Python-3.6.5/
88989,       Python-3.x.y/
88990,       ...
88991, mkdir root
88992, ./configure --prefix=$PWD/root 
88993, make -j 2
88994, make install
88995, virtualenv --no-site-packages -p root/bin/python3.x env
88996, env_python3x.bash:
88997,
88998, #!/bin/bash
88999," echo ""type deactivate to exit"""
89000, source $HOME/python_versions/Python-3.x.y/env/bin/activate
89001, source $HOME/python_versions/env_python3x.bash
89002, pip install --upgrade package_name
89003,--no-site-packages
89004,export HOME=some/where/else
89005,ln -s $HOME/.local/lib/python3.6/site-packages/numpy $PWD/venv/lib/python3.6/site-packages/
89006,export PYTHONPATH=
89007,export HOME=/some/other/dir
89008,"Defaults        secure_path=""/home/USENAME/Python-3.x.y/env/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"""
89009,"Defaults        env_keep += ""VIRTUAL_ENV"""
89010,"Defaults        env_keep += ""PYTHONPATH"""
89011,ENV VIRTUAL_ENV=/home/USER/Python-3.x.y/env
89012,ENV PYTHONPATH=
89013,"ENV PATH=""$VIRTUAL_ENV/bin:$PATH"""
89014,pip2 install SomePackage
89015,pip3 install SomePackage
89016,python2 -m pip install SomePackage  
89017,python3 -m pip install SomePackage 
89018,sudo apt-get install python-pip
89019,sudo apt-get install python3-pip
89020,pip-2.7 install SomePackage
89021,python-3.6 -m pip install SomePackage
89022,pip install urllib3
89023,py -3.8 -m pip install urllib3
89024,/usr/local
89025,pip2.7 install
89026,/usr/bin
89027,/usr/local/bin
89028,sudo /usr/local/bin/python2.7 -m ensurepip
89029,/usr/local/bin
89030,$PATH
89031,/usr/local/bin
89032,sudo /usr/local/bin/pip2.7 install <module>
89033,sudo
89034,/usr/local/bin
89035,sudo pacman -S python2-pip
89036,sudo pip2.7 install boto
89037,python2
89038,import boto
89039,#!/usr/bin/env python3 <-- I changed this line.
89040,
89041,# -*- coding: utf-8 -*-
89042,import re
89043,import sys
89044,
89045,from pip._internal import main
89046,
89047,if __name__ == '__main__':
89048,"    sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])"
89049,    sys.exit(main())
89050,python3.6
89051,python3.7
89052,pip
89053,python3.7
89054,pip
89055,python3.7
89056,python3.7 -m pip install -U pip
89057,pip3.7
89058,.bashrc
89059,nano ~/.bashrc
89060,alias pip=pip3.7
89061,source ~/.bashrc
89062,pip --version
89063,pip install <package>
89064,<package>
89065,python3.7
89066,pip
89067,path/to/pythonX.Y -m pip
89068,/usr/bin/python3.8: No module named pip
89069,conda create -n myenv python=3.6.4
89070,source activae myenv
89071,python -m pip -r requirements.txt
89072,pip debug
89073,$ pip debug
89074,"WARNING: This command is only meant for debugging. Do not use this with automation for parsing and getting these details, since the output and options of this command may change without notice."
89075,pip version: pip 21.2.4 from /data/akshay/anaconda3/lib/python3.9/site-packages/pip (python 3.9)
89076,"sys.version: 3.9.12 (main, Apr  5 2022, 06:56:58)"
89077,sys.executable: /data/akshay/anaconda3/bin/python 
89078,/usr/bin $ python3.7 -m pip install irc
89079,subprocess.communicate()
89080,stdout
89081,subprocess.communicate()
89082,#!/usr/bin/env python2
89083,"from subprocess import Popen, PIPE"
89084,
89085,"p = Popen([""cmd"", ""arg1""], stdout=PIPE, bufsize=1)"
89086,with p.stdout:
89087,"    for line in iter(p.stdout.readline, b''):"
89088,"        print line,"
89089,p.wait() # wait for the subprocess to exit
89090,iter()
89091,pexpect
89092,pty
89093,unbuffer
89094,stdbuf
89095,script
89096,#!/usr/bin/env python3
89097,"from subprocess import Popen, PIPE"
89098,
89099,"with Popen([""cmd"", ""arg1""], stdout=PIPE, bufsize=1,"
89100,           universal_newlines=True) as p:
89101,    for line in p.stdout:
89102,"        print(line, end='')"
89103,locale.getpreferredencoding(False)
89104,b''
89105,bytes
89106,bufsize=1
89107,p.stdin
89108,pexpect
89109,stderr=subprocess.STDOUT
89110,Popen()
89111,stdout=PIPE
89112,stderr=subprocess.STDOUT
89113,import subprocess
89114,"proc = subprocess.Popen('ls',"
89115,"                       shell=True,"
89116,"                       stdout=subprocess.PIPE,"
89117,                       )
89118,while proc.poll() is None:
89119,    output = proc.stdout.readline()
89120,"    print output,"
89121,ls
89122,output = proc.communicate()[0]
89123,"print output,"
89124,while proc.poll() is None: time.sleep(0)
89125,import sys
89126,from subprocess import *
89127,"proc = Popen('ls', shell=True, stdout=PIPE)"
89128,while True:
89129,    data = proc.stdout.readline()   # Alternatively proc.stdout.read(1024)
89130,    if len(data) == 0:
89131,        break
89132,    sys.stdout.write(data)   # sys.stdout.buffer.write(data) on Python 3.x
89133,readline()
89134,read()
89135,readline()
89136,communicate()
89137,read()
89138,data = proc.stdout.read()
89139,"os.read(fd, maxsize)"
89140,read()
89141,readline()
89142,shell=True
89143,shell=True
89144,process.communicate()
89145,subprocess.Popen()
89146,stdout
89147,PIPE
89148,process.stdout
89149,process.poll()
89150,import subprocess
89151,
89152,# This will raise a CalledProcessError if the program return a nonzero code.
89153,# You can use call() instead if you don't care about that case.
89154,"subprocess.check_call(['ls', '-l'])"
89155,sys.stdout
89156,sys.stderr
89157,sys.stdout
89158,sys.stderr
89159,subprocess.check_call(args)
89160,call()
89161,check_call()
89162,CalledProcessError
89163,python -mthis
89164,check_call()
89165,call()
89166,call()
89167,grep
89168,"myCommand=""ls -l"""
89169,cmd=myCommand.split()
89170,"# ""universal newline support"" This will cause to interpret \n, \r\n and \r     equally, each as a newline."
89171,"p = subprocess.Popen(cmd, stderr=subprocess.PIPE, universal_newlines=True)"
89172,while True:    
89173,    print(p.stderr.readline().rstrip('\r\n'))
89174,shlex.split(myCommand)
89175,myCommand.split()
89176,with
89177,import subprocess
89178,import sys
89179,"def subcall_stream(cmd, fail_on_error=True):"
89180,"    # Run a shell command, streaming output to STDOUT in real time"
89181,"    # Expects a list style command, e.g. `[""docker"", ""pull"", ""ubuntu""]`"
89182,"    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=1, universal_newlines=True)"
89183,    for line in p.stdout:
89184,        sys.stdout.write(line)
89185,    p.wait()
89186,    exit_code = p.returncode
89187,    if exit_code != 0 and fail_on_error:
89188,"        raise RuntimeError(f""Shell command failed with exit code {exit_code}. Command: `{cmd}`"")"
89189,    return(exit_code)
89190,file.py
89191,import A
89192,from current_directory_name import *
89193,from current_directory_name import THINGS_YOU_WANT_TO_IMPORT
89194,def what_does_the_fox_say():
89195,"  print(""vixens cry"")"
89196,el@apollo:/home/el/foo$ python
89197,"Python 2.7.3 (default, Sep 26 2013, 20:03:06) "
89198,>>> import fox
89199,>>> fox.what_does_the_fox_say()
89200,vixens cry
89201,>>> 
89202,what_does_the_fox_say()
89203,execfile
89204,exec
89205,def moobar():
89206,"  print(""hi"")"
89207,"execfile(""/home/el/foo2/mylib.py"")"
89208,moobar()
89209,el@apollo:/home/el/foo$ python main.py
89210,hi
89211,def question():
89212,"  print ""where are the nuclear wessels?"""
89213,from chekov import question
89214,question()
89215,el@apollo:/home/el/foo3$ python main.py 
89216,where are the nuclear wessels?
89217,import *
89218,def watchout():
89219,"  print ""computers are transforming into a noose and a yoke for humans"""
89220,import sys 
89221,import os
89222,"sys.path.append(os.path.abspath(""/home/el/foo4/stuff""))"
89223,from riaa import *
89224,watchout()
89225,el@apollo:/home/el/foo4$ python main.py 
89226,computers are transforming into a noose and a yoke for humans
89227,"os.system(""python yourfile.py"")"
89228,import os
89229,"os.system(""python yourfile.py"")"
89230,~/.pythonrc.py
89231,class secretclass:
89232,"    def secretmessage(cls, myarg):"
89233,"        return myarg + "" is if.. up in the sky, the sky"""
89234,    secretmessage = classmethod( secretmessage )
89235,
89236,    def skycake(cls):
89237,"        return ""cookie and sky pie people can't go up and """
89238,    skycake = classmethod( skycake )
89239,import user
89240,"msg = ""The only way skycake tates good"" "
89241,msg = user.secretclass.secretmessage(msg)
89242,msg += user.secretclass.skycake()
89243,"print(msg + "" have the sky pie! SKYCAKE!"")"
89244,$ python main.py
89245,"The only way skycake tates good is if.. up in the sky, "
89246,the skycookie and sky pie people can't go up and  have the sky pie! 
89247,SKYCAKE!
89248,ModuleNotFoundError: No module named 'user'
89249,/home/el/foo5/
89250,/home/el/foo5/herp
89251,__init__.py
89252,el@apollo:/home/el/foo5/herp$ touch __init__.py
89253,el@apollo:/home/el/foo5/herp$ ls
89254,__init__.py
89255,__init__.py
89256,el@apollo:/home/el/foo5/herp/derp$ touch __init__.py
89257,el@apollo:/home/el/foo5/herp/derp$ ls
89258,__init__.py
89259,yolo.py
89260,def skycake():
89261,"  print ""SkyCake evolves to stay just beyond the cognitive reach of "" +"
89262,"  ""the bulk of men. SKYCAKE!!"""
89263,/home/el/foo5/main.py
89264,from herp.derp.yolo import skycake
89265,skycake()
89266,el@apollo:/home/el/foo5$ python main.py
89267,SkyCake evolves to stay just beyond the cognitive reach of the bulk 
89268,of men. SKYCAKE!!
89269,__init__.py
89270,__import__(py_file_name)
89271,importlib
89272,import importlib
89273,
89274,moduleName = input('Enter module name:')
89275,importlib.import_module(moduleName)
89276,moduleName
89277,package
89278,import file
89279,__init__.py
89280,__import__
89281,pmName = input('Enter module name:')
89282,pm = __import__(pmName)
89283,print(dir(pm))
89284,help(__import__)
89285,import filename
89286,help(__import__)
89287,Because this function is meant for use by the Python     interpreter and not for general use it is better to use     importlib.import_module() to programmatically import a module.
89288,A.py
89289,B.py
89290,. 
89291,├── A.py 
89292,└── B.py
89293,B.py
89294,import A
89295,from A import *
89296,from A import THINGS_YOU_WANT_TO_IMPORT_IN_A
89297,A.py
89298,B.py
89299,folder/A.py
89300,B.py
89301,.
89302,├── B.py
89303,└── folder
89304,     └── A.py
89305,B.py
89306,import folder.A
89307,from folder.A import *
89308,from folder.A import THINGS_YOU_WANT_TO_IMPORT_IN_A
89309,A.py
89310,B.py
89311,A.py
89312,B.py
89313,import module_name
89314,folder
89315,A.py
89316,import package_name.module_name
89317,import sys
89318,"sys.path.append("".."")"
89319,import os
89320,import sys
89321,"scriptpath = ""../Test/"""
89322,
89323,# Add the directory containing your module to the Python path (wants absolute paths)
89324,sys.path.append(os.path.abspath(scriptpath))
89325,
89326,# Do the import
89327,import MyModule
89328,"from root.parent.folder.file import variable, class, whatever"
89329,__init__.py
89330,__init__.py
89331,__all__
89332,mydir/spam/__init__.py
89333,mydir/spam/module.py
89334,import spam.module
89335,or
89336,from spam import module
89337,from file import function_name  ######## Importing specific function
89338,function_name()                 ######## Calling function
89339,import file              ######## Importing whole package
89340,file.function1_name()    ######## Calling function
89341,file.function2_name()    ######## Calling function
89342,x.py
89343,def greet():
89344,    print('Hello! How are you?')
89345,from x import greet
89346,__init__.py
89347,__init__.py
89348,__init__.py
89349,mymodule
89350,mymodule
89351,/main.py
89352,/mymodule
89353,    /__init__.py
89354,    /somefile.py
89355,    /otherstuff.py
89356,somefile.py
89357,otherstuff.py
89358,__init__.py
89359,from mymodule.somefile import somefunc
89360,from mymodule.otherstuff import otherfunc
89361,importlib.util
89362,.py
89363,sys.path
89364,import importlib.util
89365,import sys
89366,
89367,"def load_module(file_name, module_name)"
89368,"    spec = importlib.util.spec_from_file_location(module_name, file_name)"
89369,    module = importlib.util.module_from_spec(spec)
89370,    sys.modules[module_name] = module
89371,    spec.loader.exec_module(module)
89372,    return module
89373,file_name
89374,module_name
89375,sys
89376,importlib
89377,importlib.util
89378,"my_module = load_module(""file.py"", ""mymod"")"
89379,load_module()
89380,# file.py =
89381,"print(f""{__name__} imported (file.py)"")"
89382,# =========
89383,
89384,# one.py ==
89385,"print(f""{__name__} imported (one.py)"")"
89386,"load_module(""file.py"", ""mymod"")"
89387,import two
89388,# =========
89389,
89390,# two.py ==
89391,"print(f""{__name__} imported (two.py)"")"
89392,import mymod
89393,# =========
89394,file.py
89395,$ python3 -m one
89396,__main__ imported (one.py)
89397,two imported (two.py)
89398,mymod imported (file.py)
89399,importlib
89400,import sys
89401,#print(sys.path)
89402,sys.path.append('../input/tokenization')
89403,import tokenization
89404,import DoStuff.py as DS
89405,DS.main()
89406,import DoStuff.py as DS
89407,py
89408,DoStuff
89409,%load_ext autoreload 
89410,%autoreload 2
89411,app.py
89412,/path/to/common_dir/module/file.py
89413,/path/to/common_dir/application/app.py
89414,/path/to/common_dir/application/subpath/config.json
89415,app.py
89416,"import os, sys, inspect"
89417,
89418,sys.path.append(os.getcwd())
89419,from module.file import MyClass
89420,instance = MyClass()
89421,# Get dirname from inspect module
89422,filename = inspect.getframeinfo(inspect.currentframe()).filename
89423,dirname = os.path.dirname(os.path.abspath(filename))
89424,"MY_CONFIG = os.path.join(dirname, ""subpath/config.json"")"
89425,user@host:/path/to/common_dir$ python3 application/app.py
89426,"import os, importlib, sys"
89427,
89428,"def callfunc(myfile, myfunc, *args):"
89429,"    pathname, filename = os.path.split(myfile)"
89430,    sys.path.append(os.path.abspath(pathname))
89431,    modname = os.path.splitext(filename)[0]
89432,    mymod = importlib.import_module(modname)
89433,"    result = getattr(mymod, myfunc)(*args)"
89434,    return result
89435,
89436,"result = callfunc(""pathto/myfile.py"", ""myfunc"", arg1, arg2)"
89437,from mypath import Path
89438,"Path = callfunc(""/folder/to/mypath.py"", ""Path"")"
89439,def display():
89440,"    print(""I'm working sundar gsv"")"
89441,import helper
89442,helper.display()
89443,I'm working sundar gsv
89444,from filename import something
89445,from client import Client
89446,.py .pyw .pyui
89447,zip
89448,library.zip
89449,|-library
89450,|--__init__.py
89451,__init__.py
89452,def dummy():
89453,    print 'Testing things out...'
89454,import sys
89455,sys.path.append(r'library.zip')
89456,
89457,import library
89458,
89459,def run():
89460,    library.dummy()
89461,
89462,run()
89463,__init__.py
89464,implicit namespace package
89465,test_game_item.py
89466,omission
89467,├── omission
89468,│   ├── app.py
89469,│   ├── common
89470,│   │   ├── classproperty.py
89471,│   │   ├── constants.py
89472,│   │   ├── game_enums.py
89473,│   │   └── __init__.py
89474,│   ├── game
89475,│   │   ├── content_loader.py
89476,│   │   ├── game_item.py
89477,│   │   ├── game_round.py
89478,│   │   ├── __init__.py
89479,│   │   └── timer.py
89480,│   ├── __init__.py
89481,│   ├── __main__.py
89482,│   ├── resources
89483,│   └── tests
89484,│       ├── __init__.py
89485,│       ├── test_game_item.py
89486,│       ├── test_game_round_settings.py
89487,│       ├── test_scoreboard.py
89488,│       ├── test_settings.py
89489,│       ├── test_test.py
89490,│       └── test_timer.py
89491,├── pylintrc
89492,├── README.md
89493,└── .gitignore
89494,"""python.terminal.executeInFileDir"": true"
89495,file.property
89496,data.py
89497,"    testString= ""A string literal to import and test with"""
89498,.txt
89499,mainfile.py
89500,    #!usr/bin/env python3
89501,"    Data=open('data.txt','r+').read()"
89502,data.testString
89503,data
89504,str
89505,testString
89506,ImportedFile
89507,    class ImportedFile:
89508,    exec(data)
89509,data
89510,    data=ImportedFile()
89511,print(data.testString)
89512,A string literal to import and test with
89513,from mod import *
89514,exec
89515,from y import * 
89516,>>> 6/3
89517,2
89518,>>> 6//3
89519,2
89520,//
89521,5 / 2
89522,2.5
89523,5 // 2
89524,2
89525,from __future__ import division
89526,5.0 // 2
89527,2.0
89528,python -Qnew
89529,-Qold
89530,-Qwarn
89531,-Qwarnall
89532,5.0 / 2
89533,2.5
89534,5 / 2.0
89535,int
89536,/
89537,/
89538,int
89539,float
89540,//
89541,1.0/2.0
89542,0.5
89543,1/2
89544,1//2
89545,1.0//2.0
89546,0
89547,math.floor()
89548,math.fmod()
89549,/
89550,//
89551,print (2/3)  ----> 0                   Python 2.7
89552,print (2/3)  ----> 0.6666666666666666  Python 3.5
89553,print (4/2)  ----> 2         Python 2.7
89554,print (4/2)  ----> 2.0       Python 3.5
89555,from __future__ import division
89556,print (2/3)  ----> 0.6666666666666666   # Python 2.7
89557,print (4/2)  ----> 2.0                  # Python 2.7
89558,138.93//3 ---> 46.0        # Python 2.7
89559,138.93//3 ---> 46.0        # Python 3.5
89560,4//3      ---> 1           # Python 2.7
89561,4//3      ---> 1           # Python 3.5
89562,-100 // 33
89563,100 // -33
89564,-100 // -33
89565,//
89566,//
89567,/
89568,__future__
89569,-Q old
89570,-Q new
89571,>>> print 5.0 / 2
89572,2.5
89573,
89574,>>> print 5.0 // 2
89575,2.0
89576,/
89577,4 / 2 = 2
89578,//
89579,9//2 = 4
89580,9.0//2.0 = 4.0
89581,-11//3 = -4
89582,-11.0//3 = -4.0
89583,/
89584,//
89585,//
89586,>>> 7//3
89587,2
89588,//
89589,//
89590,/
89591,>>> int(755349677599789174 / 2) # Wrong answer
89592,377674838799894592
89593,>>> 755349677599789174 // 2     # Correct answer
89594,377674838799894587
89595,>>>print 5//2
89596,2
89597,>>> print 5.0//2
89598,2.0
89599,>>>print 5//2.0
89600,2.0
89601,>>>print 5.0//2.0
89602,2.0
89603,import math
89604,N = 1004291331219602346 # huge number 
89605,
89606,print(N//100) #=> 10042913312196023 is correct answer
89607,print(math.floor(N/100)) #=> 10042913312196024 is wrong answer
89608,print(math.ceil(N/100)) #=> 10042913312196024 is wrong answer
89609,print(int(N/100)) #=> 10042913312196024 is wrong answer
89610,int(x/y)
89611,x/y
89612,int(z)
89613,x / y
89614,x // y
89615,1//2
89616,0
89617,(-1)//2
89618,-1
89619,1//(-2)
89620,-1
89621,(-1)//(-2)
89622,0
89623,x / y
89624,x // y
89625,divmod()
89626,abs()
89627,//
89628,/
89629,/
89630,//
89631,>>> print (11 / 3)
89632,3.6666666666666665
89633,
89634,>>> print (11 // 3)
89635,3
89636,
89637,>>> print (11.3 / 3)
89638,3.7666666666666667
89639,
89640,>>> print (11.3 // 3)
89641,3.0
89642,5.0//2
89643,2.0
89644,2
89645,//
89646,session['my_connection'] = pyRserve.connect()
89647,flask.g.my_connection = pyRserve.connect()
89648,multiprocessing.Manager
89649,import atexit
89650,from multiprocessing import Lock
89651,from multiprocessing.managers import BaseManager
89652,import pyRserve
89653,
89654,connections = {}
89655,lock = Lock()
89656,
89657,
89658,def get_connection(user_id):
89659,    with lock:
89660,        if user_id not in connections:
89661,            connections[user_id] = pyRserve.connect()
89662,
89663,        return connections[user_id]
89664,
89665,
89666,@atexit.register
89667,def close_connections():
89668,    for connection in connections.values():
89669,        connection.close()
89670,
89671,
89672,"manager = BaseManager(('', 37844), b'password')"
89673,"manager.register('get_connection', get_connection)"
89674,server = manager.get_server()
89675,server.serve_forever()
89676,python rserve_manager.py
89677,from multiprocessing.managers import BaseManager
89678,"from flask import g, session"
89679,
89680,def get_rserve():
89681,"    if not hasattr(g, 'rserve'):"
89682,"        manager = BaseManager(('', 37844), b'password')"
89683,        manager.register('get_connection')
89684,        manager.connect()
89685,        g.rserve = manager.get_connection(session['user_id'])
89686,
89687,    return g.rserve
89688,result = get_rserve().eval('3 + 5')
89689,lambda
89690,lambda x: x**2 + 2*x - 5
89691,"mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])"
89692,mult3
89693,"[3, 6, 9]"
89694,def filterfunc(x):
89695,    return x % 3 == 0
89696,"mult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])"
89697,"mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]"
89698,"range(3,10,3)"
89699,  >>> def transform(n):
89700,  ...     return lambda x: x + n
89701,  ...
89702,  >>> f = transform(3)
89703,  >>> f(4)
89704,  7
89705,reduce()
89706,"  >>> reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])"
89707,"  '1, 2, 3, 4, 5, 6, 7, 8, 9'"
89708,"  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))"
89709,"  [5, 4, 6, 3, 7, 2, 8, 1, 9]"
89710,"','.join(str(x) for x in [1,2,3,4,5,6,7,8,9])"
89711,lambda
89712,lambda
89713,def
89714,lambda
89715,function
89716,lambda
89717,function
89718,>>> f = lambda x: x + 1
89719,>>> f(3)
89720,4
89721,x
89722,R
89723,> f = function(x) { x + 1 }
89724,> f(3)
89725,4
89726,lambda
89727,lambda
89728,function
89729,return
89730,type(lambda x: 3)
89731,lambda
89732,def
89733,function
89734,lambda
89735,lambda
89736,lambda
89737,lambda
89738,"a = int(input(""Enter a number:\n> "")); add=(lambda x: a+x); b = int(input(""Enter another number:\n> "")); print(""The sum of these numbers is"", add(b))"
89739,f
89740,a
89741,a
89742,a
89743,import f from this_comment
89744,lambda
89745,lambda
89746,"for value in [""one"",""two"",""three""]:"
89747,"    b = tk.Button(label=value, command=lambda arg=value: my_callback(arg))"
89748,    b.pack()
89749,lambda
89750,value
89751,arg=value
89752,functools.partial()
89753,lambda
89754,"partial(my_callback, value)"
89755,lambda arg=value: my_callback(arg)
89756,partial()
89757,lambda
89758,a = lambda x: x + 1
89759,print a(1)
89760,def a(x): return x + 1
89761,print a(1)
89762,>>> a = lambda x: x + 1
89763,>>> type(a)
89764,<type 'function'>
89765,lambda
89766,"fs=[f0,...,f9]"
89767,fi(n)=i+n
89768,>>> fs = [(lambda n: i + n) for i in range(10)]
89769,>>> fs[3](4)
89770,13
89771,>>> n = 4
89772,>>> [i + n for i in range(10)]
89773,"[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
89774,">>> fs = [(lambda n,i=i: i + n) for i in range(10)]"
89775,>>> fs[3](4)
89776,7
89777,w = PyQt4.QtGui.QLineEdit()
89778,w.textChanged.connect(lambda event: dothing())
89779,w.textChanged.connect(dothing)
89780,dothing
89781,event
89782,a
89783,__name__
89784,plural_rules = [
89785,"    lambda n: 'all',"
89786,"    lambda n: 'singular' if n == 1 else 'plural',"
89787,"    lambda n: 'singular' if 0 <= n <= 1 else 'plural',"
89788,    ...
89789,]
89790,# Call plural rule #1 with argument 4 to find out which sentence form to use.
89791,plural_rule[1](4) # returns 'plural'
89792,plural_rule_1
89793,plural_rule_2
89794,eval()
89795,lambda
89796,def main():
89797,...
89798,...
89799,y = square(some_number)
89800,...
89801,return something
89802,
89803,def square(x):
89804,    return x**2
89805,def main():
89806,...
89807,square = lambda x: x**2
89808,y = square(some_number)
89809,return something
89810,">>>a = [1,2,3,4]"
89811,>>>[x**2 for x in a]
89812,"[1,4,9,16]"
89813,>>> square = lambda x: x**2
89814,>>> [square(s) for x in a]
89815,"[1,4,9,16]"
89816,">>> a = [1,2,3,4]"
89817,">>> squared_list = map(lambda x: x**2, a)"
89818,lambda
89819,log_timestamp(datetime.datetime.now() - datetime.timedelta(minutes = 30))
89820,log_timestamp(lambda : datetime.datetime.now() - datetime.timedelta(minutes = 30))
89821,log_timestamp
89822,operator
89823,Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
89824,"squared = map(lambda x: x*x, [1, 2, 3, 4, 5])"
89825,def square(x):
89826,    return x*x
89827,
89828,"squared = map(square, [1, 2, 3, 4, 5])"
89829,def define_bindings(widget):
89830,"    widget.bind(""<Button-1>"", do-something-cool)"
89831,
89832,def do-something-cool(event):
89833,    #Your code to execute on the event trigger
89834,def main():
89835,    # define widgets and other imp stuff
89836,"    x, y = None, None"
89837,"    widget.bind(""<Button-1>"", lambda event: do-something-cool(x, y))"
89838,
89839,"def do-something-cool(event, x, y):"
89840,    x = event.x
89841,    y = event.y
89842,    #Do other cool stuff
89843,main
89844,do_something_cool
89845,x
89846,y
89847,event
89848,x
89849,y
89850,do-something-cool
89851,widget.bind
89852,event
89853,"x,y"
89854,x=event.x
89855,event
89856,"x, y"
89857,event
89858,"lambda event: do_something_cool(event,x,y)"
89859,loop_dic
89860,loop_dic
89861,i
89862,NameError
89863,">>> lis = [{""name"": ""Peter""}, {""name"": ""Josef""}]"
89864,
89865,">>> loop_dic = lambda i: {""name"": i[""name""] + "" Wallace"" }"
89866,>>> new_lis = [loop_dic(i) for i in lis]
89867,
89868,>>> new_lis
89869,"[{'name': 'Peter Wallace'}, {'name': 'Josef Wallace'}]"
89870,">>> lis = [{""name"": ""Peter""}, {""name"": ""Josef""}]"
89871,
89872,">>> new_lis = [{""name"": i[""name""] + "" Wallace""} for i in lis]"
89873,
89874,>>> new_lis
89875,"[{'name': 'Peter Wallace'}, {'name': 'Josef Wallace'}]"
89876,def a_func()
89877,  ...
89878,  if some_conditon:
89879,     ...
89880,"     call_some_big_func(arg1, arg2, arg3, arg4...)"
89881,  else
89882,     ...
89883,"     call_some_big_func(arg1, arg2, arg3, arg4...)"
89884,def a_func()
89885,  ...
89886,"  call_big_f = lambda args_that_change: call_some_big_func(arg1, arg2, arg3, args_that_change)"
89887,  if some_conditon:
89888,     ...
89889,     call_big_f(argX)
89890,  else
89891,     ...
89892,     call_big_f(argY)
89893,print 'hi there'
89894,def foo...
89895,foo
89896,lambda
89897,{
89898,    DATA_PACKET: self.handle_data_packets
89899,    NET_PACKET: self.handle_hardware_packets
89900,"}.get(packet_type, lambda x : None)(payload)"
89901,"def dump_hex(file, var)"
89902,    # some code
89903,    pass
89904,
89905,class X(object):
89906,    #...
89907,    def packet_received(data):
89908,        # some kind of preprocessing
89909,        self.callback(data)
89910,    #...
89911,"dump_file = file('hex_dump.txt','w')"
89912,"X.callback = lambda (x): dump_hex(dump_file, x)"
89913,...
89914,dump_file.close()
89915,lambda
89916,import imported.module
89917,
89918,def func():
89919,"    return lambda: imported.module.method(""foo"", ""bar"")"
89920,import imported.module
89921,
89922,def func():
89923,    def cb():
89924,"        return imported.module.method(""foo"", ""bar"")"
89925,    return cb
89926,import time
89927,start = time.time() # Measure the time taken for execution
89928,
89929,def first():
89930,"    squares = map(lambda x: x**2, range(10))"
89931,    # ^ Lambda
89932,    end = time.time()
89933,    elapsed = end - start
89934,    print elapsed + ' seconds'
89935,    return elapsed # gives 0.0 seconds
89936,
89937,def second():
89938,    lst = []
89939,    for i in range(10):
89940,        lst.append(i**2)
89941,    # ^ a 'for' loop
89942,    end = time.time()
89943,    elapsed = end - start
89944,    print elapsed + ' seconds'
89945,    return elapsed # gives 0.0019998550415 seconds.
89946,
89947,print abs(second() - first()) # Gives 0.0019998550415 seconds!(duh)
89948,timeit
89949,time.time()
89950,.py
89951,.pyc
89952,"mylicensedfunction(licenseblob liblob, int foo, int bar, std::string bash)"
89953,$ pyminifier --nonlatin --replacement-length=50 /tmp/tumult.py
89954,#!/usr/bin/env python3
89955,ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲמּ=ImportError
89956,ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ燱=print
89957,ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ巡=False
89958,ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ澨=object
89959,try:
89960, import demiurgic
89961,except ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲמּ:
89962," ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ燱(""Warning: You're not demiurgic. Actually, I think that's normal."")"
89963,try:
89964, import mystificate
89965,except ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲמּ:
89966," ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ燱(""Warning: Dark voodoo may be unreliable."")"
89967,ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲﺬ=ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ巡
89968,class ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ𐦚(ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ澨):
89969," def __init__(self,*args,**kwargs):"
89970,  pass
89971," def ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ클(self,dactyl):"
89972,  ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ퐐=demiurgic.palpitation(dactyl)
89973,  ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ𠛲=mystificate.dark_voodoo(ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ퐐)
89974,  return ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ𠛲
89975," def ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ𐠯(self,whatever):"
89976,  ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ燱(whatever)
89977,"if __name__==""__main__"":"
89978," ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ燱(""Forming..."")"
89979," ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲﺃ=ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ𐦚(""epicaricacy"",""perseverate"")"
89980," ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲﺃ.ﺭ异𞸐𐤔ﭞﰣﺁں𝕌𨿩𞸇뻛𐬑𥰫嬭ﱌ𢽁𐡆𧪮Ꝫﴹ뙫𢤴퉊ﳦﲣפּܟﺶ𐐤ﶨࠔ𐰷𢡶𧐎𐭈𞸏𢢘𦘼ﶻ𩏃𦽨𞺎𠛘𐠲䉊ﰸﭳᣲ𐠯(""Codswallop"")"
89981,# Created by pyminifier (https://github.com/liftoff/pyminifier)
89982,import pyconcrete
89983,MODULE
89984,MODULE.pye
89985,MODULE.pye
89986,_pyconcrete.pyd
89987,_pyconcrete.pyd
89988,.pyc
89989,#
89990,python -m compileall
89991,uncompyle6
89992,pip install licensing
89993,"pubKey = ""<RSAKeyValue><Modulus>sGbvxwdlDbqFXOMlVUnAF5ew0t0WpPW7rFpI5jHQOFkht/326dvh7t74RYeMpjy357NljouhpTLA3a6idnn4j6c3jmPWBkjZndGsPL4Bqm+fwE48nKpGPjkj4q/yzT4tHXBTyvaBjA8bVoCTnu+LiC4XEaLZRThGzIn5KQXKCigg6tQRy0GXE13XYFVz/x1mjFbT9/7dS8p85n8BuwlY5JvuBIQkKhuCNFfrUxBWyu87CFnXWjIupCD2VO/GbxaCvzrRjLZjAngLCMtZbYBALksqGPgTUN7ZM24XbPWyLtKPaXF2i4XRR9u6eTj5BfnLbKAU5PIVfjIS+vNYYogteQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>"""
89994,
89995,"res = Key.activate(token=""WyIyNTU1IiwiRjdZZTB4RmtuTVcrQlNqcSszbmFMMHB3aWFJTlBsWW1Mbm9raVFyRyJd"",\"
89996,"                   rsa_pub_key=pubKey,\"
89997,"                   product_id=3349, key=""ICVLD-VVSZR-ZTICT-YKGXL"", machine_code=Helpers.GetMachineCode())"
89998,
89999,if res[0] == None not Helpers.IsOnRightMachine(res[0]):
90000,"    print(""An error occured: {0}"".format(res[1]))"
90001,else:
90002,"    print(""Success"")"
90003,Cython
90004,Nuitka
90005,Nuitka
90006,Cython
90007,.pyd
90008,.exe
90009,.pyc
90010,.pyc
90011,import sys   sys.dont_write_bytecode = true
90012,5000
90013,from flask import Flask
90014, 
90015,app = Flask(__name__)
90016,app.debug = True
90017, 
90018,@app.route('/')
90019,def main():
90020,    return 'hi'
90021, 
90022,if __name__ == '__main__':
90023,    app.run()
90024,index.py
90025,# Dockerfile
90026,FROM dreen/flask
90027,MAINTAINER dreen
90028,WORKDIR /srv
90029,
90030,# Get source
90031,RUN mkdir -p /srv
90032,COPY perfektimprezy.tar.gz /srv/perfektimprezy.tar.gz
90033,RUN tar x -f perfektimprezy.tar.gz
90034,RUN rm perfektimprezy.tar.gz
90035,
90036,# Run server
90037,EXPOSE 5000
90038,"CMD [""python"", ""index.py""]"
90039,$> sudo docker build -t perfektimprezy .
90040,/srv
90041,$> sudo docker run -i -p 5000:5000 -d perfektimprezy
90042,1c50b67d45b1a4feade72276394811c8399b1b95692e0914ee72b103ff54c769
90043,$> sudo docker ps
90044,CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS              PORTS                    NAMES
90045,"1c50b67d45b1        perfektimprezy:latest   ""python index.py""   5 seconds ago       Up 5 seconds        0.0.0.0:5000->5000/tcp   loving_wozniak"
90046,
90047,$> sudo docker logs 1c50b67d45b1
90048, * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
90049, * Restarting with stat
90050, $> curl 127.0.0.1:5000 -v
90051, * Rebuilt URL to: 127.0.0.1:5000/
90052, * Hostname was NOT found in DNS cache
90053, *   Trying 127.0.0.1...
90054, * Connected to 127.0.0.1 (127.0.0.1) port 5000 (#0)
90055, > GET / HTTP/1.1
90056, > User-Agent: curl/7.35.0
90057, > Host: 127.0.0.1:5000
90058, > Accept: */*
90059, >
90060, * Empty reply from server
90061, * Connection #0 to host 127.0.0.1 left intact
90062, curl: (52) Empty reply from server
90063,$> sudo docker top 1c50b67d45b1
90064,UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
90065,root                2084                812                 0                   10:26               ?                   00:00:00            python index.py
90066,root                2117                2084                0                   10:26               ?                   00:00:00            /usr/bin/python index.py
90067,$> sudo docker exec -it 1c50b67d45b1 bash
90068,root@1c50b67d45b1:/srv# netstat -an
90069,Active Internet connections (servers and established)
90070,Proto Recv-Q Send-Q Local Address           Foreign Address         State
90071,tcp        0      0 127.0.0.1:5000          0.0.0.0:*               LISTEN
90072,tcp        0      0 127.0.0.1:47677         127.0.0.1:5000          TIME_WAIT
90073,Active UNIX domain sockets (servers and established)
90074,Proto RefCnt Flags       Type       State         I-Node   Path
90075,root@1c50b67d45b1:/srv# curl -I 127.0.0.1:5000
90076,HTTP/1.0 200 OK
90077,Content-Type: text/html; charset=utf-8
90078,Content-Length: 5447
90079,Server: Werkzeug/0.10.4 Python/2.7.6
90080,"Date: Tue, 19 May 2015 12:18:14 GMT"
90081,docker exec -it 1c50b67d45b1 bash
90082,netstat -an
90083,Connected to 127.0.0.1
90084,0.0.0.0
90085,if __name__ == '__main__':
90086,    app.run()
90087,if __name__ == '__main__':
90088,    app.run(host='0.0.0.0')
90089,-p 5000:5000
90090,docker run
90091,flask
90092,app.run
90093,--host
90094,"CMD [""flask"", ""run"", ""--host"", ""0.0.0.0""]"
90095,CMD flask run --host 0.0.0.0
90096,"app.run(host=""0.0.0.0"") "
90097,python run.py --host=0.0.0.0 
90098,"app.run(host=""0.0.0.0"")"
90099,"CMD [""flask"", ""run"", ""--host"", ""0.0.0.0"" ]"
90100,$ ip addr
90101,"1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000"
90102,    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
90103,    inet 127.0.0.1/8 scope host lo
90104,       valid_lft forever preferred_lft forever
90105,"32: eth0@if33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default "
90106,    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
90107,    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
90108,       valid_lft forever preferred_lft forever
90109,docker network inspect bridge
90110,CMD flask run --host 172.17.0.2
90111,172.17.0.2
90112,172.17.0.2
90113,0.0.0.0
90114,0.0.0.0
90115,0.0.0.0
90116,0.0.0.0
90117,# Example of Dockerfile
90118,
90119,FROM python:3.8.5-alpine3.12
90120,
90121,WORKDIR /app
90122,
90123,EXPOSE 5000
90124,ENV FLASK_APP=app.py
90125,
90126,COPY . /app
90127,RUN pip install -r requirements.txt
90128,
90129,"ENTRYPOINT [ ""flask""]"
90130,"CMD [ ""run"", ""--host"", ""0.0.0.0"" ]"
90131,app.py
90132,# app.py
90133,from flask import Flask
90134,
90135,app = Flask(__name__)
90136,
90137,"@app.route(""/"")"
90138,def home():
90139,"    return ""Hello world"""
90140,
90141,
90142,"if __name__ == ""__main__"":"
90143,    app.run()
90144,docker build . -t deploy_flask
90145,docker run -p 5000:5000 -t -i deploy_flask:latest
90146,curl http://127.0.0.1:5000/ -v
90147,EXPOSE
90148,app.run()
90149,"app.run(host=""0.0.0.0"")"
90150,"CMD [""flask"", ""run"", ""-h"", ""0.0.0.0"", ""-p"", ""5000""]"
90151,0.0.0.0:5000
90152,localhost:5000
90153,flask run --host=0.0.0.0
90154,docker run -it -p5000:5000 yourImageName
90155,"wait = WebDriverWait(browser, 20).wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id=""accountStandalone""]/div/div/div[2]/div/div/div[1]/button')))"
90156,wait.click()
90157,"<div class=""confirmation-title nsg-font-family--platform nsg-text--black edf-title-font-size--xlarge js-confirmationTitle"">NU ÄR DU MEDLEM, Hello.</div>"
90158,"<button type=""button"" class=""nsg-button nsg-bg--black register-next-step-cta js-nextStepCta"">FORTSÄTT</button>"
90159,"WebDriverWait(browser, 20).until(EC.element_to_be_clickable((By.XPATH, '//*[@id=""accountStandalone""]/div/div/div[2]/div/div/div[1]/button'))).click()"
90160,"WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ""div.confirmation-title.nsg-font-family--platform.nsg-text--black.edf-title-font-size--xlarge.js-confirmationTitle"")))"
90161,"WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.XPATH, ""//div[@class='confirmation-title nsg-font-family--platform nsg-text--black edf-title-font-size--xlarge js-confirmationTitle' and contains(.,'NU ÄR DU MEDLEM, Hello.')]"")))"
90162,"WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ""button.nsg-button.nsg-bg--black.register-next-step-cta.js-nextStepCta"")))"
90163,"WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, ""//button[@class='nsg-button nsg-bg--black register-next-step-cta js-nextStepCta' and contains(.,'FORTSÄTT')]"")))"
90164,yield
90165,yield
90166,"def read_in_chunks(file_object, chunk_size=1024):"
90167,"    """"""Lazy function (generator) to read a file piece by piece."
90168,"    Default chunk size: 1k."""""""
90169,    while True:
90170,        data = file_object.read(chunk_size)
90171,        if not data:
90172,            break
90173,        yield data
90174,
90175,
90176,with open('really_big_file.dat') as f:
90177,    for piece in read_in_chunks(f):
90178,        process_data(piece)
90179,iter
90180,f = open('really_big_file.dat')
90181,def read1k():
90182,    return f.read(1024)
90183,
90184,"for piece in iter(read1k, ''):"
90185,    process_data(piece)
90186,for line in open('really_big_file.dat'):
90187,    process_data(line)
90188,rb
90189,file.close()
90190,"with open('really_big_file.dat', 'rb') as f:"
90191,'rb'
90192,'b'
90193,Python on Windows makes a distinction between text and binary files; [...] it’ll corrupt binary data like that in JPEG or EXE files. Be very careful to use binary mode when reading and writing such files.
90194,"buf_iter = (x for x in iter(lambda: buf.read(1024), ''))"
90195,for chunk in buf_iter:
90196,file.readlines()
90197,"bigfile = open('bigfilename','r')"
90198,tmp_lines = bigfile.readlines(BUF_SIZE)
90199,while tmp_lines:
90200,    process([line for line in tmp_lines])
90201,    tmp_lines = bigfile.readlines(BUF_SIZE)
90202,.read()
90203,.readlines()
90204,with open('big.csv') as f:
90205,    for line in f:
90206,        process(line)
90207,'\n'
90208,'|'
90209,'|'
90210,'\n'
90211,'\n'
90212,"def rows(f, chunksize=1024, sep='|'):"
90213,"    """""""
90214,    Read a file where the row separator is '|' lazily.
90215,
90216,    Usage:
90217,
90218,    >>> with open('big.csv') as f:
90219,    >>>     for r in rows(f):
90220,    >>>         process(r)
90221,"    """""""
90222,    row = ''
90223,    while (chunk := f.read(chunksize)) != '':   # End of file
90224,        while (i := chunk.find(sep)) != -1:     # No separator found
90225,            yield row + chunk[:i]
90226,            chunk = chunk[i+1:]
90227,            row = ''
90228,        row += chunk
90229,    yield row
90230,"def rows(f, chunksize=1024, sep='|'):"
90231,"    """""""
90232,    Read a file where the row separator is '|' lazily.
90233,
90234,    Usage:
90235,
90236,    >>> with open('big.csv') as f:
90237,    >>>     for r in rows(f):
90238,    >>>         process(r)
90239,"    """""""
90240,    curr_row = ''
90241,    while True:
90242,        chunk = f.read(chunksize)
90243,        if chunk == '': # End of file
90244,            yield curr_row
90245,            break
90246,        while True:
90247,            i = chunk.find(sep)
90248,            if i == -1:
90249,                break
90250,            yield curr_row + chunk[:i]
90251,            curr_row = ''
90252,            chunk = chunk[i+1:]
90253,        curr_row += chunk
90254,test_file = 'test_file'
90255,
90256,def cleanup(func):
90257,"    def wrapper(*args, **kwargs):"
90258,"        func(*args, **kwargs)"
90259,        os.unlink(test_file)
90260,    return wrapper
90261,
90262,@cleanup
90263,def test_empty(chunksize=1024):
90264,"    with open(test_file, 'w') as f:"
90265,        f.write('')
90266,    with open(test_file) as f:
90267,"        assert len(list(rows(f, chunksize=chunksize))) == 1"
90268,
90269,@cleanup
90270,def test_1_char_2_rows(chunksize=1024):
90271,"    with open(test_file, 'w') as f:"
90272,        f.write('|')
90273,    with open(test_file) as f:
90274,"        assert len(list(rows(f, chunksize=chunksize))) == 2"
90275,
90276,@cleanup
90277,def test_1_char(chunksize=1024):
90278,"    with open(test_file, 'w') as f:"
90279,        f.write('a')
90280,    with open(test_file) as f:
90281,"        assert len(list(rows(f, chunksize=chunksize))) == 1"
90282,
90283,@cleanup
90284,def test_1025_chars_1_row(chunksize=1024):
90285,"    with open(test_file, 'w') as f:"
90286,        for i in range(1025):
90287,            f.write('a')
90288,    with open(test_file) as f:
90289,"        assert len(list(rows(f, chunksize=chunksize))) == 1"
90290,
90291,@cleanup
90292,def test_1024_chars_2_rows(chunksize=1024):
90293,"    with open(test_file, 'w') as f:"
90294,        for i in range(1023):
90295,            f.write('a')
90296,        f.write('|')
90297,    with open(test_file) as f:
90298,"        assert len(list(rows(f, chunksize=chunksize))) == 2"
90299,
90300,@cleanup
90301,def test_1025_chars_1026_rows(chunksize=1024):
90302,"    with open(test_file, 'w') as f:"
90303,        for i in range(1025):
90304,            f.write('|')
90305,    with open(test_file) as f:
90306,"        assert len(list(rows(f, chunksize=chunksize))) == 1026"
90307,
90308,@cleanup
90309,def test_2048_chars_2_rows(chunksize=1024):
90310,"    with open(test_file, 'w') as f:"
90311,        for i in range(1022):
90312,            f.write('a')
90313,        f.write('|')
90314,        f.write('a')
90315,        # -- end of 1st chunk --
90316,        for i in range(1024):
90317,            f.write('a')
90318,        # -- end of 2nd chunk
90319,    with open(test_file) as f:
90320,"        assert len(list(rows(f, chunksize=chunksize))) == 2"
90321,
90322,@cleanup
90323,def test_2049_chars_2_rows(chunksize=1024):
90324,"    with open(test_file, 'w') as f:"
90325,        for i in range(1022):
90326,            f.write('a')
90327,        f.write('|')
90328,        f.write('a')
90329,        # -- end of 1st chunk --
90330,        for i in range(1024):
90331,            f.write('a')
90332,        # -- end of 2nd chunk
90333,        f.write('a')
90334,    with open(test_file) as f:
90335,"        assert len(list(rows(f, chunksize=chunksize))) == 2"
90336,
90337,if __name__ == '__main__':
90338,"    for chunksize in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]:"
90339,        test_empty(chunksize)
90340,        test_1_char_2_rows(chunksize)
90341,        test_1_char(chunksize)
90342,        test_1025_chars_1_row(chunksize)
90343,        test_1024_chars_2_rows(chunksize)
90344,        test_1025_chars_1026_rows(chunksize)
90345,        test_2048_chars_2_rows(chunksize)
90346,        test_2049_chars_2_rows(chunksize)
90347,import mmap
90348,"with open(""hello.txt"", ""r+"") as f:"
90349,"    # memory-map the file, size 0 means whole file"
90350,"    map = mmap.mmap(f.fileno(), 0)"
90351,    # read content via standard file methods
90352,"    print map.readline()  # prints ""Hello Python!"""
90353,    # read content via slice notation
90354,"    print map[:5]  # prints ""Hello"""
90355,    # update content using slice notation;
90356,    # note that new content must have same size
90357,"    map[6:] = "" world!\n"""
90358,    # ... and read again using standard file methods
90359,    map.seek(0)
90360,"    print map.readline()  # prints ""Hello  world!"""
90361,    # close the map
90362,    map.close()
90363,"f = ... # file-like object, i.e. supporting read(size) function and "
90364,        # returning empty string '' when there is nothing to read
90365,
90366,"def chunked(file, chunk_size):"
90367,"    return iter(lambda: file.read(chunk_size), '')"
90368,
90369,"for data in chunked(f, 65536):"
90370,    # process the data
90371,.read()
90372,while
90373,"with open(""somefile.txt"") as f:"
90374,    while chunk := f.read(8192):
90375,        do_something(chunk)
90376,8192
90377,2**13
90378,"""""""A file object returned by open() is a iterator with"
90379,read method which could specify current read's block size
90380,""""""""
90381,"with open('mydata.db', 'r') as f_in:"
90382,"    block_read = partial(f_in.read, 1024 * 1024)"
90383,"    block_iterator = iter(block_read, '')"
90384,
90385,"    for index, block in enumerate(block_iterator, start=1):"
90386,        block = process_block(block)  # process your block data
90387,
90388,"        with open(f'{index}.txt', 'w') as f_out:"
90389,            f_out.write(block)
90390,"def read_file(path, block_size=1024): "
90391,"    with open(path, 'rb') as f: "
90392,        while True: 
90393,            piece = f.read(block_size) 
90394,            if piece: 
90395,                yield piece 
90396,            else: 
90397,                return
90398,
90399,for piece in read_file(path):
90400,    process_piece(piece)
90401,"s = """" "
90402,for i in xrange(100): 
90403,   s += file.next()
90404,def get_line():
90405,     with open('4gb_file') as file:
90406,         for i in file:
90407,             yield i
90408,
90409,lines_required = 100
90410,gen = get_line()
90411,"chunk = [i for i, j in zip(gen, range(lines_required))]"
90412,chunk = [next(gen) for i in range(lines_required)]
90413,file_obj = open('big_file') 
90414,file_size = os.stat('big_file').st_size
90415,
90416,for i in range( file_size/1024):
90417,    print file_obj.read(1024)
90418,"data = [[1,2,3], [4,5,6], [7,8,9]]"
90419,"data = [(1,2,3), (4,5,6), (7,8,9)]"
90420,2
90421,"(1,2,3)"
90422,5
90423,"(4,5,6)"
90424,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
90425,data.sort(key=lambda tup: tup[1])  # sorts in place
90426,reverse=True
90427,"sorted_by_second = sorted(data, key=lambda tup: tup[1], reverse=True)"
90428,"data.sort(key=lambda tup: tup[1], reverse=True)  # sorts in place"
90429,key=itemgetter(1)
90430,from operator import itemgetter
90431,sort
90432,List
90433,key
90434,tup
90435,t
90436,tup
90437,1
90438,"2, 5, 8"
90439,lambda
90440,itemgetter
90441,itemgetter
90442,lambda
90443,itemgetter
90444,itemgetter
90445,from operator import itemgetter
90446,data.sort(key=itemgetter(1))
90447,itemgetter
90448,lambda
90449,"data.sort(key=itemgetter(3,1))"
90450,"data = [(1,2,3),(1,2,1),(1,1,4)]"
90451,"sorted(data, key=lambda tup: (tup[1],tup[2]) )"
90452,"[(1, 1, 4), (1, 2, 1), (1, 2, 3)]"
90453,reverse = True
90454,"data.sort(key=lambda tup: tup[1], reverse=True)"
90455,"decorated = [(tup[1], tup) for tup in data]"
90456,decorated.sort()
90457,"undecorated = [tup for second, tup in decorated]"
90458,"[b for a,b in sorted((tup[1], tup) for tup in data)]"
90459,"(<word>, <count>)"
90460,count
90461,word
90462,data = [
90463,"('betty', 1),"
90464,"('bought', 1),"
90465,"('a', 1),"
90466,"('bit', 1),"
90467,"('of', 1),"
90468,"('butter', 2),"
90469,"('but', 1),"
90470,"('the', 1),"
90471,"('was', 1),"
90472,"('bitter', 1)]"
90473,"sorted(data, key=lambda tup:(-tup[1], tup[0]))"
90474,"[('butter', 2),"
90475,"('a', 1),"
90476,"('betty', 1),"
90477,"('bit', 1),"
90478,"('bitter', 1),"
90479,"('bought', 1),"
90480,"('but', 1),"
90481,"('of', 1),"
90482,"('the', 1),"
90483,"('was', 1)]"
90484,def sec_elem(s):
90485,    return s[1]
90486,
90487,"sorted(data, key=sec_elem)"
90488,itemgetter()
90489,lambda tup: tup[1]
90490,>>> from operator import itemgetter
90491,>>> from numpy.random import randint
90492,">>> values = randint(0, 9, 30000).reshape((10000,3))"
90493,">>> tpls = [tuple(values[i,:]) for i in range(len(values))]"
90494,
90495,>>> tpls[:5]    # display sample from list
90496,"[(1, 0, 0), "
90497," (8, 5, 5), "
90498," (5, 4, 0), "
90499," (5, 7, 7), "
90500," (4, 2, 1)]"
90501,
90502,">>> sorted(tpls[:5], key=itemgetter(1))    # example sort"
90503,"[(1, 0, 0), "
90504," (4, 2, 1), "
90505," (5, 4, 0), "
90506," (8, 5, 5), "
90507," (5, 7, 7)]"
90508,
90509,">>> %timeit sorted(tpls, key=itemgetter(1))"
90510,"100 loops, best of 3: 4.89 ms per loop"
90511,
90512,">>> %timeit sorted(tpls, key=lambda tup: tup[1])"
90513,"100 loops, best of 3: 6.39 ms per loop"
90514,
90515,">>> %timeit sorted(tpls, key=(itemgetter(1,0)))"
90516,"100 loops, best of 3: 16.1 ms per loop"
90517,
90518,">>> %timeit sorted(tpls, key=lambda tup: (tup[1], tup[0]))"
90519,"100 loops, best of 3: 17.1 ms per loop"
90520,">>> gunters = [('2044-04-05', 'parzival'), ('2044-04-07', 'aech'), ('2044-04-06', 'art3mis')]"
90521,>>> gunters.sort(key=lambda tup: tup[0])
90522,>>> print gunters
90523,"[('2044-04-05', 'parzival'), ('2044-04-06', 'art3mis'), ('2044-04-07', 'aech')]"
90524,key
90525,compareTo
90526,lambda
90527,"s.sort([cmp[, key[, reverse]]])"
90528,#To sort the list based on each element's second integer (elem[1])
90529,"sorted(d2, key=lambda elem: elem[1])"
90530,(elem[*insert the index of the element you are sorting it by*])
90531,sorted
90532,.sort(key=...)
90533,tuple(sorted(t))
90534,PyInt_Object
90535,int(-5)
90536,int(256)
90537,>>> a = 1
90538,>>> b = 1
90539,>>> a is b
90540,True
90541,>>> a = 257
90542,>>> b = 257
90543,>>> a is b
90544,False
90545,>>> a = 257; b = 257; a is b
90546,True
90547,PyRun_FileExFlags() 
90548,    mod = PyParser_ASTFromFile() 
90549,        node *n = PyParser_ParseFileFlagsEx() //source to cst
90550,            parsetoke() 
90551,                ps = PyParser_New() 
90552,                for (;;)
90553,                    PyTokenizer_Get() 
90554,"                    PyParser_AddToken(ps, ...)"
90555,"        mod = PyAST_FromNode(n, ...)  //cst to ast"
90556,"    run_mod(mod, ...)"
90557,"        co = PyAST_Compile(mod, ...) //ast to CFG"
90558,            PyFuture_FromAST()
90559,            PySymtable_Build()
90560,            co = compiler_mod()
90561,"        PyEval_EvalCode(co, ...)"
90562,            PyEval_EvalCodeEx()
90563,PyInt_FromLong
90564,PyAST_FromNode
90565,a = 257
90566,b = 257
90567,"print ""id(a) = %d, id(b) = %d"" % (id(a), id(b))"
90568,DEBUG: before PyAST_FromNode
90569,name = a
90570,"ival = 257, id = 176046536"
90571,name = b
90572,"ival = 257, id = 176046752"
90573,name = a
90574,name = b
90575,DEBUG: after PyAST_FromNode
90576,run_mod
90577,PyAST_Compile ok
90578,"id(a) = 176046536, id(b) = 176046536"
90579,Eval ok
90580,cst
90581,ast
90582,PyInt_Object
90583,ast_for_atom()
90584,PyAST_Compile
90585,PyEval_EvalCode
90586,"[-5, 256]"
90587,>>> a = 257
90588,>>> b = 257
90589,>>> a is b
90590,False
90591,$ echo 'a = 257
90592,> b = 257
90593,> print a is b' > testing.py
90594,$ python testing.py
90595,True
90596,>>> def test():
90597,...     a = 257
90598,...     b = 257
90599,...     print a is b
90600,... 
90601,>>> dis.dis(test)
90602,  2           0 LOAD_CONST               1 (257)
90603,              3 STORE_FAST               0 (a)
90604,
90605,  3           6 LOAD_CONST               1 (257)
90606,              9 STORE_FAST               1 (b)
90607,
90608,  4          12 LOAD_FAST                0 (a)
90609,             15 LOAD_FAST                1 (b)
90610,             18 COMPARE_OP               8 (is)
90611,             21 PRINT_ITEM          
90612,             22 PRINT_NEWLINE       
90613,             23 LOAD_CONST               0 (None)
90614,             26 RETURN_VALUE        
90615,>>> test()
90616,True
90617,>>> test.func_code.co_consts
90618,"(None, 257)"
90619,257
90620,>>> a = 5.0
90621,>>> b = 5.0
90622,>>> a is b
90623,False
90624,>>> a = 5.0; b = 5.0
90625,>>> a is b
90626,True
90627,">>> a = (1,2)"
90628,">>> b = (1,2)"
90629,>>> a is b
90630,False
90631,">>> a = (1,2); b = (1,2)"
90632,>>> a is b
90633,False
90634,">>> a = (257, 258)"
90635,">>> b = (257, 258)"
90636,>>> a[0] is b[0]
90637,False
90638,>>> a[1] is b[1]
90639,False
90640,">>> a = (257, 258); b = (257, 258)"
90641,>>> a[0] is b[0]
90642,True
90643,>>> a[1] is b[1]
90644,True
90645,True
90646,False
90647,PyInt_Object
90648,257
90649,>>> 257
90650,257
90651,>>> 0x101
90652,257
90653,>>> 0b100000001
90654,257
90655,>>> 0o401
90656,257
90657,Python/ast.c
90658,parsenumber
90659,PyOS_strtoul
90660,PyLong_FromString
90661,"    x = (long) PyOS_strtoul((char *)s, (char **)&end, 0);"
90662,    if (x < 0 && errno == 0) {
90663,"        return PyLong_FromString((char *)s,"
90664,"                                 (char **)0,"
90665,                                 0);
90666,    }
90667,Python/compile.c
90668,Python/peephole.c
90669,compiler_add_o
90670,compiler_lambda
90671,"/* Make None the first constant, so the lambda can't have a"
90672,   docstring. */
90673,"if (compiler_add_o(c, c->u->u_consts, Py_None) < 0)"
90674,    return 0;
90675,compiler_add_o
90676,compiler_add_o
90677,dict
90678,True
90679,"compile('a=5.0;b=5.0', '<stdin>', 'exec')).co_consts"
90680,5.0
90681,pow
90682,int
90683,int
90684,int
90685,PyLongObject
90686,"a = ""this is a sample"""
90687,"""hi"""
90688,"""hi"""
90689,"""is"""
90690,"re.search(r'\bis\b', your_string)"
90691,\b
90692,re
90693,\b
90694,test!
90695,"re.search(r""\bisn't\b"", ""it isn't bad"")"
90696,"re.search(r""\bisn'\b"", ""it isn' bad"")"
90697,test!a
90698,test!
90699,\x08
90700,\b
90701,re
90702,"x=""this is a sample"""
90703,"y=""this isis a sample."""
90704,"regex=re.compile(r""\bis\b"")  # For ignore case: re.compile(r""\bis\b"", re.IGNORECASE)"
90705,
90706,regex.findall(y)
90707,[]
90708,
90709,regex.findall(x)
90710,['is']
90711,re.search()
90712,\b
90713,r'\bfoo\b'
90714,'foo'
90715,'foo.'
90716,'(foo)'
90717,'bar foo baz'
90718,'foobar'
90719,'foo3'
90720,"a = ""this is a sample"""
90721,"""hi"""
90722,False
90723,"""hi"""
90724,"""hi"""
90725,"""this"""
90726,a
90727,"""hi"""
90728,False
90729,"""is"""
90730,True
90731,"""is"""
90732,"""is"""
90733,"""is"""
90734,"re.match(r""\bis\b"", your_string)"
90735,"r""\bis\b"""
90736,">>> y=""this isis a sample."""
90737,">>> regex=re.compile(r""\bis\b"")  # For ignore case: re.compile(r""\bis\b"", re.IGNORECASE)"
90738,>>> regex.findall(y)
90739,[]
90740,"find_only_whole_word(search_string, input_string)"
90741,">>> a = ""this is a sample"""
90742,">>> find_only_whole_word(""hi"", a)"
90743,False
90744,">>> find_only_whole_word(""is"", a)"
90745,True
90746,>>> import re
90747,">>> a = ""this is a sample"""
90748,">>> re.search(r""\bis\b"", a)"
90749,"<_sre.SRE_Match object; span=(5, 7), match='is'>"
90750,">>> re.search(r""\bhi\b"", a)"
90751,>>>
90752,True
90753,False
90754,">>> find_only_whole_word(""this"", a)"
90755,True
90756,">>> find_only_whole_word(""is"", a)"
90757,True
90758,">>> find_only_whole_word(""a"", a)"
90759,True
90760,">>> find_only_whole_word(""sample"", a)"
90761,True
90762,"# Use ""ample"", part of the word, ""sample"": (s)ample"
90763,">>> find_only_whole_word(""ample"", a)"
90764,False
90765,# (t)his
90766,">>> find_only_whole_word(""his"", a)"
90767,False
90768,# (sa)mpl(e)
90769,">>> find_only_whole_word(""mpl"", a)"
90770,False
90771,# Any random word
90772,">>> find_only_whole_word(""applesauce"", a)"
90773,False
90774,>>>
90775,#!/usr/bin/env python3
90776,# -*- coding: utf-8 -*-
90777,#
90778,#@file find_only_whole_word.py
90779,
90780,import re
90781,
90782,"def find_only_whole_word(search_string, input_string):"
90783,  # Create a raw string with word boundaries from the user's input_string
90784,"  raw_search_string = r""\b"" + search_string + r""\b"""
90785,
90786,"  match_output = re.search(raw_search_string, input_string)"
90787,"  ##As noted by @OmPrakesh, if you want to ignore case, uncomment"
90788,  ##the next two lines
90789,"  #match_output = re.search(raw_search_string, input_string, "
90790,  #                         flags=re.IGNORECASE)
90791,
90792,  no_match_was_found = ( match_output is None )
90793,  if no_match_was_found:
90794,    return False
90795,  else:
90796,    return True
90797,
90798,"##endof:  find_only_whole_word(search_string, input_string)"
90799,find_only_whole_word.py
90800,>>> from find_only_whole_word import find_only_whole_word
90801,">>> a = ""this is a sample"""
90802,">>> find_only_whole_word(""hi"", a)"
90803,False
90804,">>> find_only_whole_word(""is"", a)"
90805,True
90806,">>> find_only_whole_word(""cucumber"", a)"
90807,False
90808,# The excellent example from @OmPrakash
90809,">>> find_only_whole_word(""is"", ""this isis a sample"")"
90810,False
90811,>>>
90812,">>> find_only_whole_word(""another sentence"", ""To show this, I will use another sentence."")"
90813,True
90814,findall
90815,">>> len(re.findall(r""\bhi\b"", ""This IS a sample."", flags=re.IGNORECASE))"
90816,False
90817,\b
90818," word=""is"""
90819,"    srchedStr=""this is a sample"""
90820,"    if srchedStr.find("" ""+word+"" "") >=0  or \"
90821,"       srchedStr.endswith("" ""+word):"
90822,        <do stuff>
90823,find
90824,"foo = ['a', 'b', 'c', 'd', 'e']"
90825,random.choice()
90826,import random
90827,
90828,"foo = ['a', 'b', 'c', 'd', 'e']"
90829,print(random.choice(foo))
90830,secrets.choice()
90831,import secrets
90832,
90833,"foo = ['battery', 'correct', 'horse', 'staple']"
90834,print(secrets.choice(foo))
90835,secrets
90836,random.SystemRandom
90837,import random
90838,
90839,secure_random = random.SystemRandom()
90840,print(secure_random.choice(foo))
90841,random.choice(foo)
90842,"random.sample(lst, n)"
90843,Standard pseudo-random generators are not suitable for security/cryptographic purposes.
90844,random.sample
90845,import random
90846,"group_of_items = {'a', 'b', 'c', 'd', 'e'}  # a sequence or set will work here."
90847,num_to_select = 2                           # set the number to select here.
90848,"list_of_random_items = random.sample(group_of_items, num_to_select)"
90849,first_random_item = list_of_random_items[0]
90850,second_random_item = list_of_random_items[1] 
90851,"random.sample(some_list, 1)[0]"
90852,random.choice(some_list)
90853,random.choice(tuple(some_set))
90854,import secrets                              # imports secure module.
90855,secure_random = secrets.SystemRandom()      # creates a secure random object.
90856,"group_of_items = {'a', 'b', 'c', 'd', 'e'}  # a sequence or set will work here."
90857,num_to_select = 2                           # set the number to select here.
90858,"list_of_random_items = secure_random.sample(group_of_items, num_to_select)"
90859,first_random_item = list_of_random_items[0]
90860,second_random_item = list_of_random_items[1]
90861,import random
90862,"first_random_item, second_random_item = random.sample({'a', 'b', 'c', 'd', 'e'}, 2)"
90863,secrets
90864,random.randrange
90865,from random import randrange
90866,random_index = randrange(len(foo))
90867,print(foo[random_index])
90868,secrets
90869,random
90870,import secrets
90871,"foo = ['a', 'b', 'c', 'd', 'e']"
90872,print(secrets.choice(foo))
90873,print(secrets.randbelow(len(foo)))
90874,set
90875,choice
90876,"s=set(range(1,6))"
90877,import random
90878,
90879,while len(s)>0:
90880,  s.remove(random.choice(list(s)))
90881,  print(s)
90882,>>> 
90883,"set([1, 3, 4, 5])"
90884,"set([3, 4, 5])"
90885,"set([3, 4])"
90886,set([4])
90887,set([])
90888,>>> 
90889,"set([1, 2, 3, 5])"
90890,"set([2, 3, 5])"
90891,"set([2, 3])"
90892,set([2])
90893,set([])
90894,
90895,>>> 
90896,"set([1, 2, 3, 5])"
90897,"set([1, 2, 3])"
90898,"set([1, 2])"
90899,set([1])
90900,set([])
90901,random.shuffle
90902,list
90903,"foo = ['a', 'b', 'c', 'd', 'e']"
90904,number_of_samples = 1
90905,"random_items = random.sample(population=foo, k=number_of_samples)"
90906,"random_items = random.choices(population=foo, k=number_of_samples)"
90907,random.choices
90908,random.sample
90909,numpy.random.choice
90910,import random; random.choice()
90911,import numpy as np
90912,np.random.choice(foo) # randomly selects a single item
90913,np.random.seed(123)
90914,np.random.choice(foo) # first call will always return 'c'
90915,array
90916,size
90917,"np.random.choice(foo, 5)          # sample with replacement (default)"
90918,"np.random.choice(foo, 5, False)   # sample without replacement"
90919,secrets
90920,numpy.random.choice
90921,import random
90922,"foo = ['a', 'b', 'c', 'd', 'e']"
90923,print int(random.random() * len(foo))
90924,print foo[int(random.random() * len(foo))]
90925,"random.choice(self, seq)"
90926,return seq[int(self.random() * len(seq))]
90927,randrange()
90928,random.SystemRandom().randrange(3<<51)
90929,float
90930,Random.random()
90931,"[0, 2**53)"
90932,2**53
90933,random()
90934,collections.Counter(random.SystemRandom().randrange(3<<51)%6 for i in range(100000)).most_common()
90935,2**40
90936,random
90937,getrandbits
90938,randrange
90939,random.choice
90940,self.random() * len(seq)
90941,getrandbits
90942,"foo = ['a', 'b', 'c', 'd', 'e']  "
90943,secrets.choice
90944,>>> from secrets import choice         # Python 3 only
90945,>>> choice(list('abcde'))
90946,'c'
90947,SystemRandom
90948,random
90949,choice
90950,>>> import random                      # Python 2 compatible
90951,>>> sr = random.SystemRandom()
90952,>>> foo = list('abcde')
90953,>>> foo
90954,"['a', 'b', 'c', 'd', 'e']"
90955,>>> sr.choice(foo)
90956,'d'
90957,>>> sr.choice(foo)
90958,'e'
90959,>>> sr.choice(foo)
90960,'a'
90961,>>> sr.choice(foo)
90962,'b'
90963,>>> sr.choice(foo)
90964,'a'
90965,>>> sr.choice(foo)
90966,'c'
90967,>>> sr.choice(foo)
90968,'c'
90969,choice
90970,Random
90971,>>> random.choice
90972,<bound method Random.choice of <random.Random object at 0x800c1034>>
90973,">>> random.seed(42); random.choice(foo), random.choice(foo), random.choice(foo)"
90974,"('d', 'a', 'b')"
90975,">>> random.seed(42); random.choice(foo), random.choice(foo), random.choice(foo)"
90976,"('d', 'a', 'b')"
90977,">>> random.seed(42); random.choice(foo), random.choice(foo), random.choice(foo)"
90978,"('d', 'a', 'b')"
90979,">>> random.seed(42); random.choice(foo), random.choice(foo), random.choice(foo)"
90980,"('d', 'a', 'b')"
90981,">>> random.seed(42); random.choice(foo), random.choice(foo), random.choice(foo)"
90982,"('d', 'a', 'b')"
90983,sr = random.SystemRandom(42)
90984,SystemRandom
90985,"def seed(self, *args, **kwds):"
90986,"    ""Stub method.  Not used for a system random number generator."""
90987,    return None
90988,import random
90989,"foo = ['a', 'b', 'c', 'd', 'e']"
90990,print(random.choice(foo))
90991,random.sample
90992,sample
90993,import random
90994,"lst = ['a', 'b', 'c', 'd', 'e']"
90995,"random.seed(0)  # remove this line, if you want different results for each run"
90996,"rand_lst = random.sample(lst,3)  # 3 is the number of sample you want to retrieve"
90997,print(rand_lst)
90998,
90999,"Output:['d', 'e', 'a']"
91000,AttributeError: 'module' object has no attribute 'seed'
91001,import random
91002,
91003,"foo = ['a', 'b', 'c', 'd', 'e']"
91004,"randomindex = random.randint(0,len(foo)-1) "
91005,print (foo[randomindex])
91006,## print (randomindex)
91007,import random
91008,
91009,"foo = ['a', 'b', 'c', 'd', 'e']"
91010,"print (foo[random.randint(0,len(foo)-1)])"
91011,import random
91012,
91013,"foo = ['a', 'b', 'c', 'd', 'e']"
91014,print(random.choice(foo))
91015,import random
91016,
91017,"my_list = [1, 2, 3, 4, 5]"
91018,num_selections = 2
91019,
91020,"new_list = random.sample(my_list, num_selections)"
91021,"randIndex = random.sample(range(len(my_list)), n_selections)"
91022,randIndex.sort()
91023,new_list = [my_list[i] for i in randIndex]
91024,from random import randint
91025,
91026,"foo = [""a"", ""b"", ""c"", ""d"", ""e""]"
91027,
91028,"print(foo[randint(0,4)])"
91029,random.shuffle
91030,import random
91031,"foo = ['a', 'b', 'c', 'd', 'e']"
91032,random.shuffle(foo)
91033,numpy
91034,from numpy.random import default_rng
91035,
91036,rng = default_rng()
91037,rng.choice(foo)
91038,from random import randint
91039,"l= ['a','b','c']"
91040,
91041,def get_rand_element(l):
91042,    if l:
91043,"        return l[randint(0,len(l)-1)]"
91044,    else:
91045,        return None
91046,
91047,get_rand_element(l)
91048,random.choice()
91049,random.randrange()
91050,None
91051,dataDict = {
91052,"    ""a"":{"
91053,"        ""r"": 1,"
91054,"        ""s"": 2,"
91055,"        ""t"": 3"
91056,"        },"
91057,"    ""b"":{"
91058,"        ""u"": 1,"
91059,"        ""v"": {"
91060,"            ""x"": 1,"
91061,"            ""y"": 2,"
91062,"            ""z"": 3"
91063,"        },"
91064,"        ""w"": 3"
91065,        }
91066,}    
91067,
91068,"maplist = [""a"", ""r""]"
91069,"maplist = [""b"", ""v"", ""y""]"
91070,# Get a given data from a dictionary with position provided as a list
91071,"def getFromDict(dataDict, mapList):    "
91072,    for k in mapList: dataDict = dataDict[k]
91073,    return dataDict
91074,
91075,# Set a given data in a dictionary with position provided as a list
91076,"def setInDict(dataDict, mapList, value): "
91077,    for k in mapList[:-1]: dataDict = dataDict[k]
91078,    dataDict[mapList[-1]] = value
91079,reduce()
91080,from functools import reduce  # forward compatibility for Python 3
91081,import operator
91082,
91083,"def getFromDict(dataDict, mapList):"
91084,"    return reduce(operator.getitem, mapList, dataDict)"
91085,getFromDict
91086,setInDict()
91087,"def setInDict(dataDict, mapList, value):"
91088,"    getFromDict(dataDict, mapList[:-1])[mapList[-1]] = value"
91089,mapList
91090,">>> getFromDict(dataDict, [""a"", ""r""])"
91091,1
91092,">>> getFromDict(dataDict, [""b"", ""v"", ""y""])"
91093,2
91094,">>> setInDict(dataDict, [""b"", ""v"", ""w""], 4)"
91095,>>> import pprint
91096,>>> pprint.pprint(dataDict)
91097,"{'a': {'r': 1, 's': 2, 't': 3},"
91098," 'b': {'u': 1, 'v': {'w': 4, 'x': 1, 'y': 2, 'z': 3}, 'w': 3}}"
91099,get_by_path()
91100,set_by_path()
91101,from functools import reduce  # forward compatibility for Python 3
91102,import operator
91103,
91104,"def get_by_path(root, items):"
91105,"    """"""Access a nested object in root by item sequence."""""""
91106,"    return reduce(operator.getitem, items, root)"
91107,
91108,"def set_by_path(root, items, value):"
91109,"    """"""Set a value in a nested object in root by item sequence."""""""
91110,"    get_by_path(root, items[:-1])[items[-1]] = value"
91111,"def del_by_path(root, items):"
91112,"    """"""Delete a key-value in a nested object in root by item sequence."""""""
91113,"    del get_by_path(root, items[:-1])[items[-1]]"
91114,try:
91115,"except (KeyError, IndexError): return default_value"
91116,return
91117,dict.setdefault()
91118,dict.__getitem__
91119,"reduce(lambda a,b: a.get(b,{}), mapList, dataDict)"
91120,for
91121,reduce()
91122,functools.reduce()
91123,for
91124,"def nested_get(dic, keys):    "
91125,    for key in keys:
91126,        dic = dic[key]
91127,    return dic
91128,KeyError
91129,"def nested_set(dic, keys, value):"
91130,    for key in keys[:-1]:
91131,"        dic = dic.setdefault(key, {})"
91132,    dic[keys[-1]] = value
91133,getFromDict
91134,dataDict
91135,copy.deepcopy(dataDict)
91136,getFromDict
91137,dataDict
91138,"def nested_set(dic, keys, value):"
91139,    for key in keys[:-1]:
91140,"        dic = dic.setdefault(key, {})"
91141,    dic[keys[-1]] = value
91142,"def keysInDict(dataDict, parent=[]):"
91143,"    if not isinstance(dataDict, dict):"
91144,        return [tuple(parent)]
91145,    else:
91146,"        return reduce(list.__add__, "
91147,"            [keysInDict(v,parent+[k]) for k,v in dataDict.items()], [])"
91148,def dict_to_df(dataDict):
91149,    ret = []
91150,    for k in keysInDict(dataDict):
91151,"        v = np.array( getFromDict(dataDict, k), )"
91152,        v = pd.DataFrame(v)
91153,        v.columns = pd.MultiIndex.from_product(list(k) + [v.columns])
91154,        ret.append(v)
91155,"    return reduce(pd.DataFrame.join, ret)"
91156,nested_set
91157,"def getFromDict(dataDict, maplist):"
91158,"    first, rest = maplist[0], maplist[1:]"
91159,
91160,    if rest: 
91161,"        # if `rest` is not empty, run the function recursively"
91162,"        return getFromDict(dataDict[first], rest)"
91163,    else:
91164,        return dataDict[first]
91165,"def setInDict(dataDict, maplist, value):"
91166,"    first, rest = maplist[0], maplist[1:]"
91167,
91168,    if rest:
91169,        try:
91170,"            if not isinstance(dataDict[first], dict):"
91171,"                # if the key is not a dict, then make it a dict"
91172,                dataDict[first] = {}
91173,        except KeyError:
91174,"            # if key doesn't exist, create one"
91175,            dataDict[first] = {}
91176,
91177,"        setInDict(dataDict[first], rest, value)"
91178,    else:
91179,        dataDict[first] = value
91180,"def get(d,l):"
91181,    if len(l)==1: return d[l[0]]
91182,"    return get(d[l[0]],l[1:])"
91183,dataDict = {
91184,"    ""a"":{"
91185,"        ""r"": 1,"
91186,"        ""s"": 2,"
91187,"        ""t"": 3"
91188,"        },"
91189,"    ""b"":{"
91190,"        ""u"": 1,"
91191,"        ""v"": {"
91192,"            ""x"": 1,"
91193,"            ""y"": 2,"
91194,"            ""z"": 3"
91195,"        },"
91196,"        ""w"": 3"
91197,        }
91198,}
91199,"maplist1 = [""a"", ""r""]"
91200,"maplist2 = [""b"", ""v"", ""y""]"
91201,"print(get(dataDict, maplist1)) # 1"
91202,"print(get(dataDict, maplist2)) # 2"
91203,"def get(d,l, default_val=None):          if l[0] not in d:         return default_val          elif len(l)==1:          return d[l[0]]          else:         return get(d[l[0]],l[1:])"
91204,b:v:y
91205,"def flatten(mydict,sep = ':'):"
91206,  new_dict = {}
91207,"  for key,value in mydict.items():"
91208,"    if isinstance(value,dict):"
91209,"      _dict = {sep.join([key, _key]):_value for _key, _value in flatten(value).items()}"
91210,      new_dict.update(_dict)
91211,    else:
91212,      new_dict[key]=value
91213,  return new_dict
91214,
91215,dataDict = {
91216,"""a"":{"
91217,"    ""r"": 1,"
91218,"    ""s"": 2,"
91219,"    ""t"": 3"
91220,"    },"
91221,"""b"":{"
91222,"    ""u"": 1,"
91223,"    ""v"": {"
91224,"        ""x"": 1,"
91225,"        ""y"": 2,"
91226,"        ""z"": 3"
91227,"    },"
91228,"    ""w"": 3"
91229,    }
91230,}    
91231,
91232,flat_dict = flatten(dataDict)
91233,print flat_dict
91234,"{'b:w': 3, 'b:u': 1, 'b:v:y': 2, 'b:v:x': 1, 'b:v:z': 3, 'a:r': 1, 'a:s': 2, 'a:t': 3}"
91235,flat_dict['b:v:y']
91236,1
91237,"def nested_set(element, value, *keys):"
91238,    if type(element) is not dict:
91239,        raise AttributeError('nested_set() expects dict as first argument.')
91240,    if len(keys) < 2:
91241,"        raise AttributeError('nested_set() expects at least three arguments, not enough given.')"
91242,
91243,    _keys = keys[:-1]
91244,    _element = element
91245,    for key in _keys:
91246,        _element = _element[key]
91247,    _element[keys[-1]] = value
91248,
91249,"example = {""foo"": { ""bar"": { ""baz"": ""ok"" } } }"
91250,"keys = ['foo', 'bar']"
91251,"nested_set(example, ""yay"", *keys)"
91252,print(example)
91253,{'foo': {'bar': 'yay'}}
91254,"def get_value(self,your_dict,*keys):"
91255,    curr_dict_ = your_dict
91256,    for k in keys:
91257,"        v = curr_dict.get(k,None)"
91258,        if v is None:
91259,            break
91260,"        if isinstance(v,dict):"
91261,            curr_dict = v
91262,    return v
91263,"sattr(my_dict, 1, 2, 3, 5) is equal to my_dict[1][2][3][4]=5"
91264,"gattr(my_dict, 1, 2)"
91265,"def gattr(d, *attrs):"
91266,"    """""""
91267,    This method receives a dict and list of attributes to return the innermost value of the give dict       
91268,"    """""""
91269,    try:
91270,        for at in attrs:
91271,            d = d[at]
91272,        return d
91273,"    except(KeyError, TypeError):"
91274,        return None
91275,
91276,
91277,"def sattr(d, *attrs):"
91278,"    """""""
91279,"    Adds ""val"" to dict in the hierarchy mentioned via *attrs"
91280,    For ex:
91281,"    sattr(animals, ""cat"", ""leg"",""fingers"", 4) is equivalent to animals[""cat""][""leg""][""fingers""]=4"
91282,    This method creates necessary objects until it reaches the final depth
91283,    This behaviour is also known as autovivification and plenty of implementation are around
91284,    This implementation addresses the corner case of replacing existing primitives
91285,    https://gist.github.com/hrldcpr/2012250#gistcomment-1779319
91286,"    """""""
91287,    for attr in attrs[:-2]:
91288,        if type(d.get(attr)) is not dict:
91289,            d[attr] = {}
91290,        d = d[attr]
91291,    d[attrs[-2]] = attrs[-1]
91292,import pydash as _
91293,
91294,"_.get(dataDict, [""b"", ""v"", ""y""], default='Default')"
91295,NestedDict
91296,pip install ndicts
91297,from ndicts.ndicts import NestedDict
91298,
91299,data_dict = {
91300,"    ""a"":{"
91301,"        ""r"": 1,"
91302,"        ""s"": 2,"
91303,"        ""t"": 3"
91304,"        },"
91305,"    ""b"":{"
91306,"        ""u"": 1,"
91307,"        ""v"": {"
91308,"            ""x"": 1,"
91309,"            ""y"": 2,"
91310,"            ""z"": 3"
91311,"        },"
91312,"        ""w"": 3"
91313,        }
91314,}  
91315,
91316,nd = NestedDict(data_dict)
91317,">>> nd[""a"", ""r""]"
91318,    1
91319,">>> nd[""b"", ""v""]"
91320,"    {""x"": 1, ""y"": 2, ""z"": 3}"
91321,from functools import reduce
91322,
91323,
91324,"def get_furthest(s, path):"
91325,    '''
91326,    Gets the furthest value along a given key path in a subscriptable structure.
91327,
91328,"    subscriptable, list -> any"
91329,    :param s: the subscriptable structure to examine
91330,    :param path: the lookup path to follow
91331,"    :return: a tuple of the value at the furthest valid key, and whether the full path is valid"
91332,    '''
91333,
91334,"    def step_key(acc, key):"
91335,        s = acc[0]
91336,"        if isinstance(s, str):"
91337,"            return (s, False)"
91338,        try:
91339,"            return (s[key], acc[1])"
91340,        except LookupError:
91341,"            return (s, False)"
91342,
91343,"    return reduce(step_key, path, (s, True))"
91344,
91345,
91346,"def get_val(s, path):"
91347,"    val, successful = get_furthest(s, path)"
91348,    if successful:
91349,        return val
91350,    else:
91351,        raise LookupError('Invalid lookup path: {}'.format(path))
91352,
91353,
91354,"def set_val(s, path, value):"
91355,"    get_val(s, path[:-1])[path[-1]] = value"
91356,"def nested_yield(nested, keys_list):"
91357,"    """""""
91358,    Get current nested data by send(None) method. Allows change it to Value by calling send(Value) next time
91359,    :param nested: list or dict of lists or dicts
91360,    :param keys_list: list of indexes/keys
91361,"    """""""
91362,    if not len(keys_list):  # assign to 1st level list
91363,"        if isinstance(nested, list):"
91364,            while True:
91365,                nested[:] = yield nested
91366,        else:
91367,            raise IndexError('Only lists can take element without key')
91368,
91369,
91370,    last_key = keys_list.pop()
91371,    for key in keys_list:
91372,        nested = nested[key]
91373,
91374,    while True:
91375,        try:
91376,            nested[last_key] = yield nested[last_key]
91377,        except IndexError as e:
91378,"            print('no index {} in {}'.format(last_key, nested))"
91379,            yield None
91380,"ny = nested_yield(nested_dict, nested_address)"
91381,data_element = ny.send(None)
91382,if data_element:
91383,    # process element
91384,    ...
91385,else:
91386,    # extend/update nested data
91387,    ny.send(new_data_element)
91388,    ...
91389,ny.close()
91390,">>> cfg= {'Options': [[1,[0]],[2,[4,[8,16]]],[3,[9]]]}"
91391,"    ny = nested_yield(cfg, ['Options',1,1,1])"
91392,    ny.send(None)
91393,"[8, 16]"
91394,>>> ny.send('Hello!')
91395,'Hello!'
91396,>>> cfg
91397,"{'Options': [[1, [0]], [2, [4, 'Hello!']], [3, [9]]]}"
91398,>>> ny.close()
91399,"def getnestedvalue(dict, list):"
91400,
91401,    length = len(list)
91402,    try:
91403,"        for depth, key in enumerate(list):"
91404,            if depth == length - 1:
91405,                output = dict[key]
91406,                return output
91407,            dict = dict[key]
91408,"    except (KeyError, TypeError):"
91409,        return None
91410,
91411,    return None
91412,"def get_dictionary_value(dictionary_temp, variable_dictionary_keys):"
91413,     try:
91414,          if(len(variable_dictionary_keys) == 0):
91415,               return str(dictionary_temp)
91416,
91417,          variable_dictionary_key = variable_dictionary_keys[0]
91418,          variable_dictionary_keys.remove(variable_dictionary_key)
91419,
91420,"          return get_dictionary_value(dictionary_temp[variable_dictionary_key] , variable_dictionary_keys)"
91421,
91422,     except Exception as variable_exception:
91423,          logging.error(variable_exception)
91424, 
91425,          return ''
91426,"def get_value_by_path(data, maplist):"
91427,    if not maplist:
91428,        return data
91429,    for key in maplist:
91430,        if key in data:
91431,"            return get_value_by_path(data[key], maplist[1:])"
91432,"def get_sub_object_from_path(dict_name, map_list):"
91433,    for i in map_list:
91434,"        _string = ""['%s']"" % i"
91435,        dict_name += _string
91436,    value = eval(dict_name)
91437,    return value
91438,#Sample:
91439,"_dict = {'new': 'person', 'time': {'for': 'one'}}"
91440,"map_list = ['time', 'for']"
91441,"print get_sub_object_from_path(""_dict"",map_list)"
91442,#Output:
91443,#one
91444,dict
91445,list
91446,"def set_at_path(data0, keys, value):"
91447,    data = deepcopy(data0)
91448,    if len(keys)>1:
91449,"        if isinstance(data,dict):"
91450,"            return {k:(set_by_path(v,keys[1:],value) if k==keys[0] else v) for k,v in data.items()}"
91451,"        if isinstance(data,list):"
91452,"            return [set_by_path(x[1],keys[1:],value) if x[0]==keys[0] else x[1] for x in enumerate(data)]"
91453,    else:
91454,        data[keys[-1]]=value
91455,        return data
91456,"def map_at_path(data0, keys, f):"
91457,    data = deepcopy(data0)
91458,    if len(keys)>1:
91459,"        if isinstance(data,dict):"
91460,"            return {k:(map_at_path(v,keys[1:],f) if k==keys[0] else v) for k,v in data.items()}"
91461,"        if isinstance(data,list):"
91462,"            return [map_at_path(x[1],keys[1:],f) if x[0]==keys[0] else x[1] for x in enumerate(data)]"
91463,    else:
91464,        data[keys[-1]]=f(data[keys[-1]])
91465,        return data
91466,eval
91467,"def nested_parse(nest, map_list):"
91468,"    nestq = ""nest['"" + ""']['"".join(map_list) + ""']"""
91469,"    return eval(nestq, {'__builtins__':None}, {'nest':nest})"
91470,"maplist = [""b"", ""v"", ""y""]"
91471,nestq
91472,"""nest['b']['v']['y']"""
91473,nest
91474,eval
91475,eval
91476,nested_parse()
91477,__builtins__
91478,nest
91479,import pandas as pd
91480,import numpy as np
91481,import time
91482,
91483,s1 = np.random.randn(2000000)
91484,s2 = np.random.randn(2000000)
91485,"dfa = pd.DataFrame({'s1': s1, 's2': s2})"
91486,
91487,start = time.time()
91488,i=0
91489,"for rowindex, row in dfa.iterrows():"
91490,    i+=1
91491,end = time.time()
91492,print end - start
91493,import pandas as pd
91494,import numpy as np
91495,
91496,#%% Create the original tables
91497,"t1 = {'letter':['a','b'],"
91498,"      'number1':[50,-10]}"
91499,
91500,"t2 = {'letter':['a','a','b','b'],"
91501,"      'number2':[0.2,0.5,0.1,0.4]}"
91502,
91503,table1 = pd.DataFrame(t1)
91504,table2 = pd.DataFrame(t2)
91505,
91506,#%% Create the body of the new table
91507,"table3 = pd.DataFrame(np.nan, columns=['letter','number2'], index=[0])"
91508,
91509,"#%% Iterate through filtering relevant data, optimizing, returning info"
91510,"for row_index, row in table1.iterrows():   "
91511,    t2info = table2[table2.letter == row['letter']].reset_index()
91512,"    table3.ix[row_index,] = optimize(t2info,row['number1'])"
91513,
91514,#%% Define optimization
91515,"def optimize(t2info, t1info):"
91516,    calculation = []
91517,"    for index, r in t2info.iterrows():"
91518,        calculation.append(r['number2']*t1info)
91519,    maxrow = calculation.index(max(calculation))
91520,    return t2info.ix[maxrow]
91521,apply
91522,iterrows
91523,apply
91524,iterrows
91525,iterrows
91526,DatetimeIndex
91527,Timestamps
91528,iterrows
91529,1) vectorization
91530,2) using a custom cython routine
91531,3) apply
91532,    a) reductions that can be performed in cython
91533,    b) iteration in python space
91534,4) itertuples
91535,5) iterrows
91536,6) updating an empty frame (e.g. using loc one-row-at-a-time)
91537,DataFrame
91538,apply
91539,apply
91540,df.apply(lambda x: np.sum(x))
91541,df.sum(1)
91542,df.apply(lambda x: x['b'] + 1)
91543,itertuples
91544,Series
91545,iterrows
91546,Series
91547,DataFrame
91548,concat
91549,itertuples
91550,apply
91551,pd.DataFrame.apply
91552,itertuples
91553,map
91554,np.vectorize
91555,numba
91556,"In [58]: df = table1.merge(table2,on='letter')"
91557,
91558,In [59]: df['calc'] = df['number1']*df['number2']
91559,
91560,In [60]: df
91561,Out[60]: 
91562,  letter  number1  number2  calc
91563,0      a       50      0.2    10
91564,1      a       50      0.5    25
91565,2      b      -10      0.1    -1
91566,3      b      -10      0.4    -4
91567,
91568,In [61]: df.groupby('letter')['calc'].max()
91569,Out[61]: 
91570,letter
91571,a         25
91572,b         -1
91573,"Name: calc, dtype: float64"
91574,
91575,In [62]: df.groupby('letter')['calc'].idxmax()
91576,Out[62]: 
91577,letter
91578,a         1
91579,b         2
91580,"Name: calc, dtype: int64"
91581,
91582,In [63]: df.loc[df.groupby('letter')['calc'].idxmax()]
91583,Out[63]: 
91584,  letter  number1  number2  calc
91585,1      a       50      0.5    25
91586,2      b      -10      0.1    -1
91587,iteritems
91588,itertuples
91589,iter*
91590,apply
91591,iterrows
91592,iterrows
91593,vec
91594,vec_numpy
91595,iterrows
91596,to_records()
91597,itertuples
91598,iterrows
91599,def iterthrough():
91600,    ret = []
91601,"    grouped = table2.groupby('letter', sort=False)"
91602,    t2info = table2.to_records()
91603,"    for index, letter, n1 in table1.to_records():"
91604,        t2 = t2info[grouped.groups[letter].values]
91605,"        # np.multiply is in general faster than ""x * y"""
91606,"        maxrow = np.multiply(t2.number2, n1).argmax()"
91607,        # `[1:]`  removes the index column
91608,        ret.append(t2[maxrow].tolist()[1:])
91609,    global table3
91610,"    table3 = pd.DataFrame(ret, columns=('letter', 'number2'))"
91611,-- iterrows() --
91612,"100 loops, best of 3: 12.7 ms per loop"
91613,  letter  number2
91614,0      a      0.5
91615,1      b      0.1
91616,2      c      5.0
91617,3      d      4.0
91618,
91619,-- itertuple() --
91620,"100 loops, best of 3: 12.3 ms per loop"
91621,
91622,-- to_records() --
91623,"100 loops, best of 3: 7.29 ms per loop"
91624,
91625,-- Use group by --
91626,"100 loops, best of 3: 4.07 ms per loop"
91627,  letter  number2
91628,1      a      0.5
91629,2      b      0.1
91630,4      c      5.0
91631,5      d      4.0
91632,
91633,-- Avoid multiplication --
91634,"1000 loops, best of 3: 1.39 ms per loop"
91635,  letter  number2
91636,0      a      0.5
91637,1      b      0.1
91638,2      c      5.0
91639,3      d      4.0
91640,import pandas as pd
91641,import numpy as np
91642,
91643,#%% Create the original tables
91644,"t1 = {'letter':['a','b','c','d'],"
91645,"      'number1':[50,-10,.5,3]}"
91646,
91647,"t2 = {'letter':['a','a','b','b','c','d','c'],"
91648,"      'number2':[0.2,0.5,0.1,0.4,5,4,1]}"
91649,
91650,table1 = pd.DataFrame(t1)
91651,table2 = pd.DataFrame(t2)
91652,
91653,#%% Create the body of the new table
91654,"table3 = pd.DataFrame(np.nan, columns=['letter','number2'], index=table1.index)"
91655,
91656,
91657,print('\n-- iterrows() --')
91658,
91659,"def optimize(t2info, t1info):"
91660,    calculation = []
91661,"    for index, r in t2info.iterrows():"
91662,        calculation.append(r['number2'] * t1info)
91663,    maxrow_in_t2 = calculation.index(max(calculation))
91664,    return t2info.loc[maxrow_in_t2]
91665,
91666,"#%% Iterate through filtering relevant data, optimizing, returning info"
91667,def iterthrough():
91668,"    for row_index, row in table1.iterrows():   "
91669,        t2info = table2[table2.letter == row['letter']].reset_index()
91670,"        table3.iloc[row_index,:] = optimize(t2info, row['number1'])"
91671,
91672,%timeit iterthrough()
91673,print(table3)
91674,
91675,print('\n-- itertuple() --')
91676,"def optimize(t2info, n1):"
91677,    calculation = []
91678,"    for index, letter, n2 in t2info.itertuples():"
91679,        calculation.append(n2 * n1)
91680,    maxrow = calculation.index(max(calculation))
91681,    return t2info.iloc[maxrow]
91682,
91683,def iterthrough():
91684,"    for row_index, letter, n1 in table1.itertuples():   "
91685,        t2info = table2[table2.letter == letter]
91686,"        table3.iloc[row_index,:] = optimize(t2info, n1)"
91687,
91688,%timeit iterthrough()
91689,
91690,
91691,print('\n-- to_records() --')
91692,"def optimize(t2info, n1):"
91693,    calculation = []
91694,"    for index, letter, n2 in t2info.to_records():"
91695,        calculation.append(n2 * n1)
91696,    maxrow = calculation.index(max(calculation))
91697,    return t2info.iloc[maxrow]
91698,
91699,def iterthrough():
91700,"    for row_index, letter, n1 in table1.to_records():   "
91701,        t2info = table2[table2.letter == letter]
91702,"        table3.iloc[row_index,:] = optimize(t2info, n1)"
91703,
91704,%timeit iterthrough()
91705,
91706,print('\n-- Use group by --')
91707,
91708,def iterthrough():
91709,    ret = []
91710,"    grouped = table2.groupby('letter', sort=False)"
91711,"    for index, letter, n1 in table1.to_records():"
91712,        t2 = table2.iloc[grouped.groups[letter]]
91713,        calculation = t2.number2 * n1
91714,        maxrow = calculation.argsort().iloc[-1]
91715,        ret.append(t2.iloc[maxrow])
91716,    global table3
91717,    table3 = pd.DataFrame(ret)
91718,
91719,%timeit iterthrough()
91720,print(table3)
91721,
91722,print('\n-- Even Faster --')
91723,def iterthrough():
91724,    ret = []
91725,"    grouped = table2.groupby('letter', sort=False)"
91726,    t2info = table2.to_records()
91727,"    for index, letter, n1 in table1.to_records():"
91728,        t2 = t2info[grouped.groups[letter].values]
91729,"        maxrow = np.multiply(t2.number2, n1).argmax()"
91730,        # `[1:]`  removes the index column
91731,        ret.append(t2[maxrow].tolist()[1:])
91732,    global table3
91733,"    table3 = pd.DataFrame(ret, columns=('letter', 'number2'))"
91734,
91735,%timeit iterthrough()
91736,print(table3)
91737,groupby
91738,to_records
91739,import pandas as pd
91740,import numpy as np
91741,import time
91742,
91743,s1 = np.random.randn(2000000)
91744,s2 = np.random.randn(2000000)
91745,"dfa = pd.DataFrame({'s1': s1, 's2': s2})"
91746,columns = list(dfa.columns)
91747,dfa = dfa.values
91748,start = time.time()
91749,i=0
91750,for row in dfa:
91751,    blablabla = row[columns.index('s1')]
91752,    i+=1
91753,end = time.time()
91754,print (end - start)
91755,tk.mainloop()
91756,from Tkinter import *
91757,import random
91758,import time
91759,
91760,tk = Tk()
91761,"tk.title = ""Game"""
91762,"tk.resizable(0,0)"
91763,"tk.wm_attributes(""-topmost"", 1)"
91764,
91765,"canvas = Canvas(tk, width=500, height=400, bd=0, highlightthickness=0)"
91766,canvas.pack()
91767,
91768,class Ball:
91769,"    def __init__(self, canvas, color):"
91770,        self.canvas = canvas
91771,"        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)"
91772,"        self.canvas.move(self.id, 245, 100)"
91773,    def draw(self):
91774,        pass
91775,
91776,"ball = Ball(canvas, ""red"")"
91777,
91778,tk.mainloop()
91779,def draw(self):
91780,"    self.canvas.move(self.id, 0, -1)"
91781,while 1:
91782,    ball.draw()
91783,    tk.update_idletasks()
91784,    tk.update()
91785,    time.sleep(0.01)
91786,tk.mainloop()
91787,tk.mainloop()
91788,while 1:
91789,    ball.draw()
91790,    tk.mainloop()
91791,    time.sleep(0.01)
91792,tk.mainloop()
91793,tk.update_idletasks()
91794,tk.update()
91795,tk.mainloop()
91796,tk.mainloop()
91797,update
91798,update_idletasks
91799,tk.mainloop()
91800,while 1:
91801,    ball.draw()
91802,    tk.mainloop()
91803,"    print(""hello"")   #NEW CODE"
91804,    time.sleep(0.01)
91805,update_idletasks()
91806,update()
91807,while True:
91808,    ball.draw()
91809,    tk.update_idletasks()
91810,    tk.update()
91811,while
91812,update_idletasks()
91813,update()
91814,tk.mainloop()
91815,tk.mainloop()
91816,tk.mainloop()
91817,tk.update_idletasks()
91818,tk.update()
91819,tk.mainloop()
91820,while True:
91821,    tk.update_idletasks()
91822,    tk.update()
91823,update_idletasks()
91824,update()
91825,class Ball:
91826,"    def __init__(self, canvas, color):"
91827,        self.canvas = canvas
91828,"        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)"
91829,"        self.canvas.move(self.id, 245, 100)"
91830,
91831,    def draw(self):
91832,        while True:
91833,"           self.canvas.move(self.id, 0, -1)"
91834,
91835,"ball = Ball(canvas, ""red"")"
91836,ball.draw()
91837,tk.mainloop()
91838,after()
91839,from Tkinter import *
91840,import random
91841,import time
91842,
91843,tk = Tk()
91844,"tk.title = ""Game"""
91845,"tk.resizable(0,0)"
91846,"tk.wm_attributes(""-topmost"", 1)"
91847,
91848,"canvas = Canvas(tk, width=500, height=400, bd=0, highlightthickness=0)"
91849,canvas.pack()
91850,
91851,class Ball:
91852,"    def __init__(self, canvas, color):"
91853,        self.canvas = canvas
91854,"        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)"
91855,"        self.canvas.move(self.id, 245, 100)"
91856,
91857,    def draw(self):
91858,"        self.canvas.move(self.id, 0, -1)"
91859,"        self.canvas.after(1, self.draw)  #(time_delay, method_to_execute)"
91860,
91861,
91862,       
91863,
91864,"ball = Ball(canvas, ""red"")"
91865,ball.draw()  #Changed per Bryan Oakley's comment
91866,tk.mainloop()
91867,from Tkinter import *
91868,import random
91869,import time
91870,
91871,root = Tk()
91872,"root.title = ""Game"""
91873,"root.resizable(0,0)"
91874,"root.wm_attributes(""-topmost"", 1)"
91875,
91876,"canvas = Canvas(root, width=500, height=400, bd=0, highlightthickness=0)"
91877,canvas.pack()
91878,
91879,class Ball:
91880,"    def __init__(self, canvas, color):"
91881,        self.canvas = canvas
91882,"        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)"
91883,"        self.canvas.move(self.id, 245, 100)"
91884,
91885,"        self.canvas.bind(""<Button-1>"", self.canvas_onclick)"
91886,"        self.text_id = self.canvas.create_text(300, 200, anchor='se')"
91887,"        self.canvas.itemconfig(self.text_id, text='hello')"
91888,
91889,"    def canvas_onclick(self, event):"
91890,        self.canvas.itemconfig(
91891,"            self.text_id, "
91892,"            text=""You clicked at ({}, {})"".format(event.x, event.y)"
91893,        )
91894,
91895,    def draw(self):
91896,"        self.canvas.move(self.id, 0, -1)"
91897,"        self.canvas.after(50, self.draw)"
91898,
91899,
91900,       
91901,
91902,"ball = Ball(canvas, ""red"")"
91903,ball.draw()  #Changed per Bryan Oakley's comment.
91904,root.mainloop()
91905,update_idletasks
91906,update
91907,update_idletasks
91908,update
91909,update
91910,update_idletasks
91911,"canvas.after(0, ball.draw)"
91912,after
91913,ball.draw
91914,after
91915,after
91916,while 1:
91917,    root.update()
91918,root.mainloop()
91919,mainloop
91920,mainloop
91921,mainloop
91922,while the_window_has_not_been_destroyed():
91923,    wait_until_the_event_queue_is_not_empty()
91924,    event = event_queue.pop()
91925,    event.handle()
91926,mainloop
91927,import Tkinter as tk
91928,
91929,class Window(tk.Frame):
91930,"    def __init__(self, master=None, view=None ):"
91931,"        tk.Frame.__init__( self, master )"
91932,        self.view_ = view       
91933,"        """""" Setup window linking it to the view... """""""
91934,
91935,class GuiView( MyViewSuperClass ):
91936,
91937,    def open( self ):
91938,        self.tkRoot_ = tk.Tk()
91939,"        self.window_ = Window( master=None, view=self )"
91940,        self.window_.pack()
91941,        self.refresh()
91942,        self.onOpen()
91943,        self.tkRoot_.mainloop()         
91944,
91945,    def onOpen( self ):        
91946,"        """""" Do some initial tasks... """""""
91947,
91948,    def refresh( self ):        
91949,        self.tkRoot_.update()
91950,session['my_connection'] = pyRserve.connect()
91951,flask.g.my_connection = pyRserve.connect()
91952,multiprocessing.Manager
91953,import atexit
91954,from multiprocessing import Lock
91955,from multiprocessing.managers import BaseManager
91956,import pyRserve
91957,
91958,connections = {}
91959,lock = Lock()
91960,
91961,
91962,def get_connection(user_id):
91963,    with lock:
91964,        if user_id not in connections:
91965,            connections[user_id] = pyRserve.connect()
91966,
91967,        return connections[user_id]
91968,
91969,
91970,@atexit.register
91971,def close_connections():
91972,    for connection in connections.values():
91973,        connection.close()
91974,
91975,
91976,"manager = BaseManager(('', 37844), b'password')"
91977,"manager.register('get_connection', get_connection)"
91978,server = manager.get_server()
91979,server.serve_forever()
91980,python rserve_manager.py
91981,from multiprocessing.managers import BaseManager
91982,"from flask import g, session"
91983,
91984,def get_rserve():
91985,"    if not hasattr(g, 'rserve'):"
91986,"        manager = BaseManager(('', 37844), b'password')"
91987,        manager.register('get_connection')
91988,        manager.connect()
91989,        g.rserve = manager.get_connection(session['user_id'])
91990,
91991,    return g.rserve
91992,result = get_rserve().eval('3 + 5')
91993,shutil
91994,import shutil
91995,
91996,"shutil.copyfile(src, dst)"
91997,
91998,# 2nd option
91999,"shutil.copy(src, dst)  # dst can be a folder; use shutil.copy2() to preserve timestamp"
92000,src
92001,dst
92002,src
92003,dst
92004,IOError
92005,dst
92006,copy
92007,src
92008,dst
92009,str
92010,shutil
92011,shutil.copy2()
92012,os.path
92013,copy
92014,copyfile
92015,copyfile
92016,shutil.copy2()
92017,"copy2(src,dst)"
92018,"copyfile(src,dst)"
92019,dst
92020,src
92021,import shutil
92022,"shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given"
92023,"shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
92024,shutil
92025,os
92026,subprocess
92027,import os
92028,import shutil
92029,import subprocess
92030,shutil
92031,shutil.copyfile
92032,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)"
92033,
92034,# example    
92035,"shutil.copyfile('source.txt', 'destination.txt')"
92036,shutil.copy
92037,"shutil.copy(src_file, dest_file, *, follow_symlinks=True)"
92038,
92039,# example
92040,"shutil.copy('source.txt', 'destination.txt')"
92041,shutil.copy2
92042,"shutil.copy2(src_file, dest_file, *, follow_symlinks=True)"
92043,
92044,# example
92045,"shutil.copy2('source.txt', 'destination.txt')  "
92046,shutil.copyfileobj
92047,"shutil.copyfileobj(src_file_object, dest_file_object[, length])"
92048,
92049,# example
92050,file_src = 'source.txt'  
92051,"f_src = open(file_src, 'rb')"
92052,
92053,file_dest = 'destination.txt'  
92054,"f_dest = open(file_dest, 'wb')"
92055,
92056,"shutil.copyfileobj(f_src, f_dest)  "
92057,os
92058,os.popen
92059,"os.popen(cmd[, mode[, bufsize]])"
92060,
92061,# example
92062,# In Unix/Linux
92063,os.popen('cp source.txt destination.txt') 
92064,
92065,# In Windows
92066,os.popen('copy source.txt destination.txt')
92067,os.system
92068,os.system(command)
92069,
92070,
92071,# In Linux/Unix
92072,os.system('cp source.txt destination.txt')  
92073,
92074,# In Windows
92075,os.system('copy source.txt destination.txt')
92076,subprocess
92077,subprocess.call
92078,"subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)"
92079,
92080,# example (WARNING: setting `shell=True` might be a security-risk)
92081,# In Linux/Unix
92082,"status = subprocess.call('cp source.txt destination.txt', shell=True) "
92083,
92084,# In Windows
92085,"status = subprocess.call('copy source.txt destination.txt', shell=True)"
92086,subprocess.check_output
92087,"subprocess.check_output(args, *, stdin=None, stderr=None, shell=False, universal_newlines=False)"
92088,
92089,# example (WARNING: setting `shell=True` might be a security-risk)
92090,# In Linux/Unix
92091,"status = subprocess.check_output('cp source.txt destination.txt', shell=True)"
92092,
92093,# In Windows
92094,"status = subprocess.check_output('copy source.txt destination.txt', shell=True)"
92095,shutil
92096,import shutil
92097,"shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
92098,"def copyfileobj_example(source, dest, buffer_size=1024*1024):"
92099,"    """"""      "
92100,    Copy a file from source to dest. source and dest
92101,"    must be file-like objects, i.e. any object with a read or"
92102,"    write method, like for example StringIO."
92103,"    """""""
92104,    while True:
92105,        copy_buffer = source.read(buffer_size)
92106,        if not copy_buffer:
92107,            break
92108,        dest.write(copy_buffer)
92109,"def copyfile_example(source, dest):"
92110,"    # Beware, this example does not handle any edge cases!"
92111,"    with open(source, 'rb') as src, open(dest, 'wb') as dst:"
92112,"        copyfileobj_example(src, dst)"
92113,"copyfile(src, dst)"
92114,import os
92115,import shutil
92116,import tempfile
92117,
92118,"filename1 = tempfile.mktemp ("".txt"")"
92119,"open (filename1, ""w"").close ()"
92120,"filename2 = filename1 + "".copy"""
92121,"print filename1, ""=>"", filename2"
92122,
92123,"shutil.copy (filename1, filename2)"
92124,
92125,"if os.path.isfile (filename2): print ""Success"""
92126,
92127,"dirname1 = tempfile.mktemp ("".dir"")"
92128,os.mkdir (dirname1)
92129,"dirname2 = dirname1 + "".copy"""
92130,"print dirname1, ""=>"", dirname2"
92131,
92132,"shutil.copytree (dirname1, dirname2)"
92133,
92134,"if os.path.isdir (dirname2): print ""Success"""
92135,"with open(source, 'rb') as src, open(dest, 'wb') as dst: dst.write(src.read())"
92136,shutil_methods =
92137,"{'copy':['shutil.copyfileobj',"
92138,"          'shutil.copyfile',"
92139,"          'shutil.copymode',"
92140,"          'shutil.copystat',"
92141,"          'shutil.copy',"
92142,"          'shutil.copy2',"
92143,"          'shutil.copytree',],"
92144," 'move':['shutil.rmtree',"
92145,"         'shutil.move',],"
92146," 'exception': ['exception shutil.SameFileError',"
92147,"                 'exception shutil.Error'],"
92148," 'others':['shutil.disk_usage',"
92149,"             'shutil.chown',"
92150,"             'shutil.which',"
92151,"             'shutil.ignore_patterns',]"
92152,}
92153,"shutil.copyfileobj(fsrc, fdst[, length])"
92154,In [3]: src = '~/Documents/Head+First+SQL.pdf'
92155,In [4]: dst = '~/desktop'
92156,"In [5]: shutil.copyfileobj(src, dst)"
92157,AttributeError: 'str' object has no attribute 'read'
92158,#copy the file object
92159,"In [7]: with open(src, 'rb') as f1,open(os.path.join(dst,'test.pdf'), 'wb') as f2:"
92160,"    ...:      shutil.copyfileobj(f1, f2)"
92161,"In [8]: os.stat(os.path.join(dst,'test.pdf'))"
92162,"Out[8]: os.stat_result(st_mode=33188, st_ino=8598319475, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=13507926, st_atime=1516067347, st_mtime=1516067335, st_ctime=1516067345)"
92163,"shutil.copyfile(src, dst, *, follow_symlinks=True)"
92164,"In [9]: shutil.copyfile(src, dst)"
92165,IsADirectoryError: [Errno 21] Is a directory: ~/desktop'
92166,#so dst should be a filename instead of a directory name
92167,shutil.copy()
92168,"In [10]: shutil.copy(src, dst)"
92169,Out[10]: ~/desktop/Head+First+SQL.pdf'
92170,#check their metadata
92171,In [25]: os.stat(src)
92172,"Out[25]: os.stat_result(st_mode=33188, st_ino=597749, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=13507926, st_atime=1516066425, st_mtime=1493698739, st_ctime=1514871215)"
92173,"In [26]: os.stat(os.path.join(dst, 'Head+First+SQL.pdf'))"
92174,"Out[26]: os.stat_result(st_mode=33188, st_ino=8598313736, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=13507926, st_atime=1516066427, st_mtime=1516066425, st_ctime=1516066425)"
92175,"# st_atime,st_mtime,st_ctime changed"
92176,shutil.copy2()
92177,"In [30]: shutil.copy2(src, dst)"
92178,Out[30]: ~/desktop/Head+First+SQL.pdf'
92179,In [31]: os.stat(src)
92180,"Out[31]: os.stat_result(st_mode=33188, st_ino=597749, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=13507926, st_atime=1516067055, st_mtime=1493698739, st_ctime=1514871215)"
92181,"In [32]: os.stat(os.path.join(dst, 'Head+First+SQL.pdf'))"
92182,"Out[32]: os.stat_result(st_mode=33188, st_ino=8598313736, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=13507926, st_atime=1516067063, st_mtime=1493698739, st_ctime=1516067055)"
92183,# Preseved st_mtime
92184,shutil.copytree()
92185,os.system('cp nameoffilegeneratedbyprogram /otherdirectory/')
92186,os.system('cp '+ rawfile + ' rawdata.dat')
92187,rawfile
92188,shutil
92189,subprocess.run()
92190,shell=True
92191,os.system()
92192,subprocess.run()
92193,"['cp', rawfile, 'rawdata.dat']"
92194,shutil
92195,from pathlib import Path
92196,
92197,source = Path('../path/to/my/file.txt')
92198,destination = Path('../path/where/i/want/to/store/it.txt')
92199,destination.write_bytes(source.read_bytes())
92200,write_bytes
92201,shutil
92202,files
92203,copying
92204,removal
92205,"for line in open(""file.txt"", ""r""):"
92206,    list.append(line)
92207,    if len(list) == 1000000: 
92208,        output.writelines(list)
92209,        del list[:]
92210,"for l in open('file.txt','r'): output.write(l)"
92211,output.write(read(n)); output.flush()
92212,n
92213,writelines()
92214,write()
92215,shutil
92216,shutil
92217,"open(destination, 'wb').write(open(source, 'rb').read())"
92218,.close()
92219,open(...)
92220,with
92221,read()
92222,shutil
92223,subprocess.call
92224,from subprocess import call
92225,"call(""cp -p <file> <file>"", shell=True)"
92226,call
92227,import os
92228,
92229,"shutil.copy(os.path.join(old_dir, file), os.path.join(new_dir, file))"
92230,"with open('sourcefile', 'rb') as f, open('destfile', 'wb') as g:"
92231,    while True:
92232,        block = f.read(16*1024*1024)  # work by blocks of 16 MB
92233,        if not block:  # end of file
92234,            break
92235,        g.write(block)
92236,os.utime
92237,"from os import path, makedirs"
92238,from shutil import copyfile
92239,"makedirs(path.dirname(path.abspath(destination_path)), exist_ok=True)"
92240,"copyfile(source_path, destination_path)"
92241,if not path.exists(destination_path):
92242,"def copyFile(src, dst, buffer_size=10485760, perserveFileDate=True):"
92243,    '''
92244,    Copies a file to a new location. Much faster performance than Apache Commons due to use of larger buffer
92245,    @param src:    Source File
92246,    @param dst:    Destination File (not file path)
92247,    @param buffer_size:    Buffer size to use during copy
92248,    @param perserveFileDate:    Preserve the original file date
92249,    '''
92250,    #    Check to make sure destination directory exists. If it doesn't create the directory
92251,"    dstParent, dstFileName = os.path.split(dst)"
92252,    if(not(os.path.exists(dstParent))):
92253,        os.makedirs(dstParent)
92254,   
92255,    #    Optimize the buffer for small files
92256,"    buffer_size = min(buffer_size,os.path.getsize(src))"
92257,    if(buffer_size == 0):
92258,        buffer_size = 1024
92259,   
92260,"    if shutil._samefile(src, dst):"
92261,"        raise shutil.Error(""`%s` and `%s` are the same file"" % (src, dst))"
92262,"    for fn in [src, dst]:"
92263,        try:
92264,            st = os.stat(fn)
92265,        except OSError:
92266,            # File most likely does not exist
92267,            pass
92268,        else:
92269,"            # XXX What about other special files? (sockets, devices...)"
92270,            if shutil.stat.S_ISFIFO(st.st_mode):
92271,"                raise shutil.SpecialFileError(""`%s` is a named pipe"" % fn)"
92272,"    with open(src, 'rb') as fsrc:"
92273,"        with open(dst, 'wb') as fdst:"
92274,"            shutil.copyfileobj(fsrc, fdst, buffer_size)"
92275,   
92276,    if(perserveFileDate):
92277,"        shutil.copystat(src, dst)"
92278,"shutil.copy(src,dst)"
92279,"shutil.copystat(src,dst)"
92280,copy
92281,copystat
92282,copystat
92283,render_template
92284,"<""'>"
92285,|safe
92286,{{ something|safe }}
92287,Markup
92288,from markupsafe import Markup
92289,value = Markup('<strong>The HTML String</strong>')
92290,|safe
92291,|safe
92292," <div class=""info"">"
92293,   {{data.email_content|safe}}
92294, </div>
92295,autoescape
92296,{% autoescape false %}
92297,{{ something }}
92298,{{ something_else }}
92299,<b>{{ something_important }}</b>
92300,{% endautoescape %}
92301,<br />
92302,{% macro linebreaks_for_string( the_string ) -%}
92303,{% if the_string %}
92304,{% for line in the_string.split('\n') %}
92305,<br />
92306,{{ line }}
92307,{% endfor %}
92308,{% else %}
92309,{{ the_string }}
92310,{% endif %}
92311,{%- endmacro %}
92312,{{ linebreaks_for_string( my_string_in_a_variable ) }}
92313,safe
92314,bleach
92315,safe
92316,Markup
92317,{% set list1 = data.split('\n') %}
92318,{% for item in list1 %}
92319,{{ item }}
92320,  {% if not loop.last %}
92321,  <br/>
92322,  {% endif %}
92323,{% endfor %}
92324,split
92325,<br/>
92326,"<input type=""submit"" name=""submitNext"" value=""Next"">"
92327,"driver.find_element_by_name(""submitNext"").click()"
92328,Traceback (most recent call last):
92329,"  File ""C:/Users/thomas/PycharmProjects/test/mainapp/main.py"", line 194, in "
92330,<module>
92331,    visa()
92332,"  File ""C:/Users/thomas/PycharmProjects/test/mainapp/main.py"", line 174, in visa"
92333,"driver.find_element_by_name(""submitNext"").click()"
92334,"  File ""C:\Users\thomas\PycharmProjects\BudgetMain\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py"", line 487, in find_element_by_name"
92335,"return self.find_element(by=By.NAME, value=name)"
92336,"  File ""C:\Users\thomas\PycharmProjects\BudgetMain\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py"", line 955, in find_element"
92337,'value': value})['value']
92338,"  File ""C:\Users\thomas\PycharmProjects\BudgetMain\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py"", line 312, in execute"
92339,self.error_handler.check_response(response)
92340,"  File ""C:\Users\thomas\PycharmProjects\BudgetMain\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py"", line 242, in check_response"
92341,"raise exception_class(message, screen, stacktrace)"
92342,"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {""method"":""name"",""selector"":""submitNext""}"
92343,  (Session info: chrome=66.0.3359.170)
92344,"  (Driver info: chromedriver=2.36.540470 (e522d04694c7ebea4ba8821272dbef4f9b818c91),platform=Windows NT 10.0.16299 x86_64)"
92345,"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {""method"":""name"",""selector"":""submitNext""}"
92346,  (Session info: chrome=66.0.3359.170)
92347,  (Driver info: chromedriver=2.36.540470)
92348,css_selector
92349,"driver.find_element_by_css_selector(""input[name='submitNext'][value='Next']"").click()"
92350,xpath
92351,"driver.find_element_by_xpath(""//input[@name='submitNext' and @value='Next']"").click()"
92352,@Test
92353,chromedriver.storage.googleapis.com/LATEST_RELEASE
92354,http://chromedriver.storage.googleapis.com/version_number/chromedriver_linux64.zip
92355,.bat
92356,wget
92357,wget
92358,wget
92359,.1
92360,.wgetrc
92361,wget
92362,import urllib.request; s = urllib.request.urlopen('http://example.com/').read().decode()
92363,urlretrieve
92364,import urllib.request
92365,"urllib.request.urlretrieve(""http://www.example.com/songs/mp3.mp3"", ""mp3.mp3"")"
92366,import urllib
92367,urllib.urlretrieve
92368,if not os.path.isfile(file_name):
92369,urllib.request.urlretrieve
92370,urllib.request.urlopen()
92371,import urllib.request
92372,with urllib.request.urlopen('http://www.example.com/') as f:
92373,    html = f.read().decode('utf-8')
92374,urllib2
92375,import urllib2
92376,response = urllib2.urlopen('http://www.example.com/')
92377,html = response.read()
92378,urllib2.quote
92379,>>> import requests
92380,>>> 
92381,">>> url = ""http://download.thinkbroadband.com/10MB.zip"""
92382,>>> r = requests.get(url)
92383,>>> print len(r.content)
92384,10485760
92385,pip install requests
92386,tqdm
92387,from tqdm import tqdm
92388,import requests
92389,
92390,"url = ""http://download.thinkbroadband.com/10MB.zip"""
92391,"response = requests.get(url, stream=True)"
92392,
92393,"with open(""10MB"", ""wb"") as handle:"
92394,    for data in tqdm(response.iter_content()):
92395,        handle.write(data)
92396,r.text
92397,r.content
92398,chunk_size
92399,stream=True
92400,chunk_size
92401,1
92402,1
92403,import urllib2
92404,"mp3file = urllib2.urlopen(""http://www.example.com/songs/mp3.mp3"")"
92405,"with open('test.mp3','wb') as output:"
92406,  output.write(mp3file.read())
92407,wb
92408,"open('test.mp3','wb')"
92409,file.read
92410,"shutil.copyfileobj(mp3file, output)"
92411,urllib.request.urlopen
92412,import urllib.request
92413,response = urllib.request.urlopen('http://www.example.com/')
92414,html = response.read()
92415,urllib.request.urlretrieve
92416,import urllib.request
92417,"urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"
92418,urllib.request.urlretrieve
92419,urllib2.urlopen
92420,import urllib2
92421,response = urllib2.urlopen('http://www.example.com/')
92422,html = response.read()
92423,urllib.urlretrieve
92424,import urllib
92425,"urllib.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"
92426,urllib.request.urlretrieve
92427,urllib.request.urlretrieve
92428,import wget
92429,wget.download('url')
92430,"import os,requests"
92431,def download(url):
92432,"    get_response = requests.get(url,stream=True)"
92433,"    file_name  = url.split(""/"")[-1]"
92434,"    with open(file_name, 'wb') as f:"
92435,        for chunk in get_response.iter_content(chunk_size=1024):
92436,            if chunk: # filter out keep-alive new chunks
92437,                f.write(chunk)
92438,
92439,
92440,"download(""https://example.com/example.jpg"")"
92441,"with open(file_name,..."
92442,with open('thisname'...)
92443,#!/usr/bin/env python
92444,# -*- coding: utf-8 -*-
92445,"from __future__ import ( division, absolute_import, print_function, unicode_literals )"
92446,
92447,"import sys, os, tempfile, logging"
92448,
92449,"if sys.version_info >= (3,):"
92450,    import urllib.request as urllib2
92451,    import urllib.parse as urlparse
92452,else:
92453,    import urllib2
92454,    import urlparse
92455,
92456,"def download_file(url, dest=None):"
92457,"    """""" "
92458,"    Download and save a file specified by url to dest directory,"
92459,"    """""""
92460,    u = urllib2.urlopen(url)
92461,
92462,"    scheme, netloc, path, query, fragment = urlparse.urlsplit(url)"
92463,    filename = os.path.basename(path)
92464,    if not filename:
92465,        filename = 'downloaded.file'
92466,    if dest:
92467,"        filename = os.path.join(dest, filename)"
92468,
92469,"    with open(filename, 'wb') as f:"
92470,        meta = u.info()
92471,"        meta_func = meta.getheaders if hasattr(meta, 'getheaders') else meta.get_all"
92472,"        meta_length = meta_func(""Content-Length"")"
92473,        file_size = None
92474,        if meta_length:
92475,            file_size = int(meta_length[0])
92476,"        print(""Downloading: {0} Bytes: {1}"".format(url, file_size))"
92477,
92478,        file_size_dl = 0
92479,        block_sz = 8192
92480,        while True:
92481,            buffer = u.read(block_sz)
92482,            if not buffer:
92483,                break
92484,
92485,            file_size_dl += len(buffer)
92486,            f.write(buffer)
92487,
92488,"            status = ""{0:16}"".format(file_size_dl)"
92489,            if file_size:
92490,"                status += ""   [{0:6.2f}%]"".format(file_size_dl * 100 / file_size)"
92491,            status += chr(13)
92492,"            print(status, end="""")"
92493,        print()
92494,
92495,    return filename
92496,
92497,"if __name__ == ""__main__"":  # Only run if this file is called directly"
92498,"    print(""Testing with 10MB download"")"
92499,"    url = ""http://download.thinkbroadband.com/10MB.zip"""
92500,    filename = download_file(url)
92501,    print(filename)
92502,Python 2 & Python 3
92503,six
92504,from six.moves import urllib
92505,"urllib.request.urlretrieve(""http://www.example.com/songs/mp3.mp3"", ""mp3.mp3"")"
92506,"urllib.urlretrieve ('url_to_file', file_name)"
92507,urllib2.urlopen('url_to_file')
92508,requests.get(url)
92509,"wget.download('url', file_name)"
92510,urlopen
92511,urlretrieve
92512,requests.get
92513,urlretrieve
92514,-o
92515,-O
92516,wget.py
92517,wget
92518,-o
92519,curl
92520,pip3 install urllib3 shutil
92521,import urllib.request
92522,import shutil
92523,
92524,"url = ""http://www.somewebsite.com/something.pdf"""
92525,"output_file = ""save_this_name.pdf"""
92526,"with urllib.request.urlopen(url) as response, open(output_file, 'wb') as out_file:"
92527,"    shutil.copyfileobj(response, out_file)"
92528,urllib3
92529,urllib
92530,import urllib
92531,response = urllib.urlopen('http://www.example.com/sound.mp3')
92532,mp3 = response.read()
92533,import urllib
92534,mp3 = urllib.urlopen('http://www.example.com/sound.mp3').read()
92535,from parallel_sync import wget
92536,"urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"
92537,"wget.download('/tmp', urls)"
92538,# or a single file:
92539,"wget.download('/tmp', urls[0], filenames='x.zip', extract=True)"
92540,"def report(blocknr, blocksize, size):"
92541,    current = blocknr*blocksize
92542,"    sys.stdout.write(""\r{0:.2f}%"".format(100.0*current/size))"
92543,
92544,def downloadFile(url):
92545,"    print ""\n"",url"
92546,    fname = url.split('/')[-1]
92547,    print fname
92548,"    urllib.urlretrieve(url, fname, report)"
92549,urllib
92550,wget
92551,wget
92552,$ python wget_test.py 
92553,urlretrive_test : starting
92554,urlretrive_test : 6.56
92555,==============
92556,wget_no_bar_test : starting
92557,wget_no_bar_test : 7.20
92558,==============
92559,wget_with_bar_test : starting
92560,100% [......................................................................] 541335552 / 541335552
92561,wget_with_bar_test : 50.49
92562,==============
92563,import wget
92564,import urllib
92565,import time
92566,from functools import wraps
92567,
92568,def profile(func):
92569,    @wraps(func)
92570,    def inner(*args):
92571,"        print func.__name__, "": starting"""
92572,        start = time.time()
92573,        ret = func(*args)
92574,        end = time.time()
92575,"        print func.__name__, "": {:.2f}"".format(end - start)"
92576,        return ret
92577,    return inner
92578,
92579,url1 = 'http://host.com/500a.iso'
92580,url2 = 'http://host.com/500b.iso'
92581,url3 = 'http://host.com/500c.iso'
92582,
92583,def do_nothing(*args):
92584,    pass
92585,
92586,@profile
92587,def urlretrive_test(url):
92588,    return urllib.urlretrieve(url)
92589,
92590,@profile
92591,def wget_no_bar_test(url):
92592,"    return wget.download(url, out='/tmp/', bar=do_nothing)"
92593,
92594,@profile
92595,def wget_with_bar_test(url):
92596,"    return wget.download(url, out='/tmp/')"
92597,
92598,urlretrive_test(url1)
92599,print '=============='
92600,time.sleep(1)
92601,
92602,wget_no_bar_test(url2)
92603,print '=============='
92604,time.sleep(1)
92605,
92606,wget_with_bar_test(url3)
92607,print '=============='
92608,time.sleep(1)
92609,urllib
92610,subprocess
92611,urlretrieve
92612,wget
92613,-R
92614,-nc
92615,aria2
92616,import subprocess
92617,"subprocess.check_output(['wget', '-O', 'example_output_file.html', 'https://example.com'])"
92618,!
92619,!wget -O example_output_file.html https://example.com
92620,python>=3.6
92621,import dload
92622,dload.save(url)
92623,dload
92624,pip3 install dload
92625,"dload.save(url, ""/home/user/test.xls"")"
92626,import urllib
92627,"sock = urllib.urlopen(""http://diveintopython.org/"")"
92628,htmlSource = sock.read()                            
92629,sock.close()                                        
92630,print htmlSource  
92631,import sys
92632,try:
92633,    import urllib.request
92634,    python3 = True
92635,except ImportError:
92636,    import urllib2
92637,    python3 = False
92638,
92639,
92640,"def progress_callback_simple(downloaded,total):"
92641,    sys.stdout.write(
92642,"        ""\r"" +"
92643,"        (len(str(total))-len(str(downloaded)))*"" "" + str(downloaded) + ""/%d""%total +"
92644,"        "" [%3.2f%%]""%(100.0*float(downloaded)/float(total))"
92645,    )
92646,    sys.stdout.flush()
92647,
92648,"def download(srcurl, dstfilepath, progress_callback=None, block_size=8192):"
92649,"    def _download_helper(response, out_file, file_size):"
92650,"        if progress_callback!=None: progress_callback(0,file_size)"
92651,        if block_size == None:
92652,            buffer = response.read()
92653,            out_file.write(buffer)
92654,
92655,"            if progress_callback!=None: progress_callback(file_size,file_size)"
92656,        else:
92657,            file_size_dl = 0
92658,            while True:
92659,                buffer = response.read(block_size)
92660,                if not buffer: break
92661,
92662,                file_size_dl += len(buffer)
92663,                out_file.write(buffer)
92664,
92665,"                if progress_callback!=None: progress_callback(file_size_dl,file_size)"
92666,"    with open(dstfilepath,""wb"") as out_file:"
92667,        if python3:
92668,            with urllib.request.urlopen(srcurl) as response:
92669,"                file_size = int(response.getheader(""Content-Length""))"
92670,"                _download_helper(response,out_file,file_size)"
92671,        else:
92672,            response = urllib2.urlopen(srcurl)
92673,            meta = response.info()
92674,"            file_size = int(meta.getheaders(""Content-Length"")[0])"
92675,"            _download_helper(response,out_file,file_size)"
92676,
92677,import traceback
92678,try:
92679,    download(
92680,"        ""https://geometrian.com/data/programming/projects/glLib/glLib%20Reloaded%200.5.9/0.5.9.zip"","
92681,"        ""output.zip"","
92682,        progress_callback_simple
92683,    )
92684,except:
92685,    traceback.print_exc()
92686,    input()
92687,import pycurl
92688,
92689,FILE_DEST = 'pycurl.html'
92690,FILE_SRC = 'http://pycurl.io/'
92691,
92692,"with open(FILE_DEST, 'wb') as f:"
92693,    c = pycurl.Curl()
92694,"    c.setopt(c.URL, FILE_SRC)"
92695,"    c.setopt(c.WRITEDATA, f)"
92696,    c.perform()
92697,    c.close()
92698,"    import urllib2,os"
92699,
92700,"    url = ""http://download.thinkbroadband.com/10MB.zip"""
92701,
92702,    file_name = url.split('/')[-1]
92703,    u = urllib2.urlopen(url)
92704,"    f = open(file_name, 'wb')"
92705,    meta = u.info()
92706,"    file_size = int(meta.getheaders(""Content-Length"")[0])"
92707,"    print ""Downloading: %s Bytes: %s"" % (file_name, file_size)"
92708,    os.system('cls')
92709,    file_size_dl = 0
92710,    block_sz = 8192
92711,    while True:
92712,        buffer = u.read(block_sz)
92713,        if not buffer:
92714,            break
92715,
92716,        file_size_dl += len(buffer)
92717,        f.write(buffer)
92718,"        status = r""%10d  [%3.2f%%]"" % (file_size_dl, file_size_dl * 100. / file_size)"
92719,        status = status + chr(8)*(len(status)+1)
92720,"        print status,"
92721,
92722,    f.close()
92723,cls
92724,clear
92725,os.system()
92726,cls
92727,import urllib.request
92728,"url_request = urllib.request.Request(url, headers=headers)"
92729,url_connect = urllib.request.urlopen(url_request)
92730,
92731,#remember to open file in bytes mode
92732,"with open(filename, 'wb') as f:"
92733,    while True:
92734,        buffer = url_connect.read(buffer_size)
92735,        if not buffer: break
92736,
92737,        #an integer value of size of written data
92738,        data_wrote = f.write(buffer)
92739,
92740,#you could probably use with-open-as manner
92741,url_connect.close()
92742,>>> import urllib3
92743,>>> http = urllib3.PoolManager()
92744,">>> r = http.request('GET', 'your_url_goes_here')"
92745,>>> r.status
92746,   200
92747,>>> r.data
92748,   *****Response Data****
92749,import requets
92750,
92751,remote_url = 'http://www.example.com/sound.mp3'
92752,local_file_name = 'sound.mp3'
92753,
92754,data = requests.get(remote_url)
92755,
92756,# Save file data to local copy
92757,"with open(local_file_name, 'wb')as file:"
92758,    file.write(data.content)
92759,wget
92760,soupget
92761,#!/usr/bin/env python3
92762,# -*- coding: utf-8 -*-
92763,"from __future__ import (division, absolute_import, print_function, unicode_literals)"
92764,"import sys, os, argparse"
92765,from bs4 import BeautifulSoup
92766,
92767,# --- insert Stan's script here ---
92768,"# if sys.version_info >= (3,): "
92769,#...
92770,#...
92771,"# def download_file(url, dest=None): "
92772,#...
92773,#...
92774,
92775,# --- new stuff ---
92776,"def collect_all_url(page_url, extensions):"
92777,"    """""""
92778,    Recovers all links in page_url checking for all the desired extensions
92779,"    """""""
92780,    conn = urllib2.urlopen(page_url)
92781,    html = conn.read()
92782,"    soup = BeautifulSoup(html, 'lxml')"
92783,    links = soup.find_all('a')
92784,
92785,    results = []    
92786,    for tag in links:
92787,"        link = tag.get('href', None)"
92788,        if link is not None: 
92789,            for e in extensions:
92790,                if e in link:
92791,                    # Fallback for badly defined links
92792,                    # checks for missing scheme or netloc
92793,                    if bool(urlparse.urlparse(link).scheme) and bool(urlparse.urlparse(link).netloc):
92794,                        results.append(link)
92795,                    else:
92796,"                        new_url=urlparse.urljoin(page_url,link)                        "
92797,                        results.append(new_url)
92798,    return results
92799,
92800,"if __name__ == ""__main__"":  # Only run if this file is called directly"
92801,    # Command line arguments
92802,    parser = argparse.ArgumentParser(
92803,        description='Download all files from a webpage.')
92804,    parser.add_argument(
92805,"        '-u', '--url', "
92806,        help='Page url to request')
92807,    parser.add_argument(
92808,"        '-e', '--ext', "
92809,"        nargs='+',"
92810,        help='Extension(s) to find')    
92811,    parser.add_argument(
92812,"        '-d', '--dest', "
92813,"        default=None,"
92814,        help='Destination where to save the files')
92815,    parser.add_argument(
92816,"        '-p', '--par', "
92817,"        action='store_true', default=False, "
92818,"        help=""Turns on parallel download"")"
92819,    args = parser.parse_args()
92820,
92821,    # Recover files to download
92822,"    all_links = collect_all_url(args.url, args.ext)"
92823,
92824,    # Download
92825,    if not args.par:
92826,        for l in all_links:
92827,            try:
92828,"                filename = download_file(l, args.dest)"
92829,                print(l)
92830,            except Exception as e:
92831,"                print(""Error while downloading: {}"".format(e))"
92832,    else:
92833,        from multiprocessing.pool import ThreadPool
92834,        results = ThreadPool(10).imap_unordered(
92835,"            lambda x: download_file(x, args.dest), all_links)"
92836,        for p in results:
92837,            print(p)
92838,python3 soupget.py -p -e <list of extensions> -d <destination_folder> -u <target_webpage>
92839,python3 soupget.py -p -e .xlsx .pdf .csv -u https://healthdata.gov/dataset/chemicals-cosmetics
92840,from subprocess import call
92841,"url = """""
92842,"call([""curl"", {url}, '--output', ""song.mp3""])"
92843,for event in pygame.event.get()
92844,check_input
92845,def check_input(self):
92846,"    for event in pygame.event.get(): #NOT CHECKING THIS FAST ENOUGH, WHOLE PROCESS IS TOO SLOW"
92847,        if (event.type == pygame.KEYUP) and (event.key == pygame.K_SPACE):
92848,            print ('boop')
92849,            self.shootThrottle = 0
92850,
92851,    if self.shootThrottle == 0:
92852,        self.shootThrottle += 1
92853,"        bullets.add(Bullet(self.shape[0][0],self.shape[0][1], self.angle))"
92854,
92855,    key = pygame.key.get_pressed()
92856,
92857,    if key[pygame.K_LEFT]:
92858,        self.angle -= 7
92859,        self.rotate(-7)
92860,    elif key[pygame.K_RIGHT]:
92861,        self.angle += 7
92862,        self.rotate(7)
92863,
92864,    if self.angle > 360:
92865,        self.angle -= 360
92866,    elif self.angle < 0:
92867,        self.angle += 360
92868,
92869,    if key[pygame.K_UP]:
92870,        self.accelerate()
92871,    elif key[pygame.K_DOWN]:
92872,        self.decelerate()
92873,shootThrottle
92874,for event in pygame.event.get()
92875,pygame.event.get()
92876,pygame.event.get()
92877,pygame.event.get()
92878,def handle_events(events):
92879,    for event in events:
92880,        # [...]
92881,
92882,while run:
92883,
92884,    event_list = pygame.event.get()
92885,
92886,    # [...]
92887,
92888,    # 1st event loop
92889,    for event in event_list:
92890,        # [...]
92891,
92892,    # [...]
92893,
92894,    # 2nd event loop
92895,    for event in event_list:
92896,        # [...]
92897,
92898,    # [...]
92899,
92900,    # function which handles events
92901,    handle_events(event_list)
92902,"a = ['a', 'b', 'c']"
92903,"str = ""a123"""
92904,if a in str:
92905,"  print ""some of the strings found in str"""
92906,else:
92907,"  print ""no strings found in str"""
92908,[abc]
92909,any(x in str for x in a)
92910,any
92911,"a_string = ""A string is more than its parts!"""
92912,"matches = [""more"", ""wholesome"", ""milk""]"
92913,
92914,if any(x in a_string for x in matches):
92915,all
92916,any
92917,any()
92918,True
92919,False
92920,False
92921,"match = next((x for x in a if x in str), False)"
92922,matches = [x for x in a if x in str]
92923,matches = {x for x in a if x in str}
92924,matches = []
92925,for x in a:
92926,    if x in str and x not in matches:
92927,        matches.append(x)
92928,OrderedDict
92929,a
92930,str
92931,S
92932,str
92933,a
92934,regex
92935,import re
92936,
92937,"if any(re.findall(r'a|b|c', str, re.IGNORECASE)):"
92938,    print 'possible matches thanks to regex'
92939,else:
92940,    print 'no matches'
92941,"any(re.findall(r'|'.join(a), str, re.IGNORECASE))"
92942,(
92943,*
92944,"'|'.join(map(re.escape, strings_to_match))"
92945,re.compile('|'.join(...))
92946,set
92947,"a = ['a', 'b', 'c']"
92948,"str = ""a123"""
92949,if set(a) & set(str):
92950,"    print(""some of the strings found in str"")"
92951,else:
92952,"    print(""no strings found in str"")"
92953,a
92954,any
92955,a
92956,a = 'abc'
92957,"a = ['a', 'b', 'c']"
92958,"str = ""a123"""
92959,found_a_string = False
92960,for item in a:    
92961,    if item in str:
92962,        found_a_string = True
92963,
92964,if found_a_string:
92965,"    print ""found a match"""
92966,else:
92967,"    print ""no match found"""
92968,"a = ['a', 'b', 'c']"
92969,"str =  ""a123"""
92970,
92971,a_match = [True for match in a if match in str]
92972,
92973,if True in a_match:
92974,"  print ""some of the strings found in str"""
92975,else:
92976,"  print ""no strings found in str"""
92977,aho_corasick.py
92978,"from aho_corasick import aho_corasick #(string, keywords)"
92979,
92980,"print(aho_corasick(string, [""keyword1"", ""keyword2""]))"
92981,">>> astring = ['abc','def','ghi','jkl','mno']"
92982,">>> bstring = ['def', 'jkl']"
92983,>>> a_set = set(astring)  # convert list to set
92984,>>> b_set = set(bstring)
92985,>>> matches = a_set.intersection(b_set)
92986,>>> matches
92987,"{'def', 'jkl'}"
92988,>>> list(matches) # if you want a list instead of a set
92989,"['def', 'jkl']"
92990,>>>
92991,"words = {'he', 'or', 'low'}"
92992,"p = regex.compile(r""\L<name>"", name=words)"
92993,m = p.findall('helloworld')
92994,print(m)
92995,"['he', 'low', 'or']"
92996,"a = ['a', 'b', 'c']"
92997,"str = ""a123"" "
92998,"list(filter(lambda x:  x in str, a))"
92999,set.intersection
93000,"subset = {""some"" ,""words""} "
93001,"text = ""some words to be searched here"""
93002,if len(subset & set(text.split())) == len(subset):
93003,"   print(""All values present in text"")"
93004,
93005,if subset & set(text.split()):
93006,"   print(""Atleast one values present in text"")"
93007,"original_word =""hackerearcth"""
93008,for 'h' in original_word:
93009,"      print(""YES"")"
93010,if any(your_required in yourinput for your_required in original_word ):
93011,"original_word = ['h', 'a', 'c', 'k', 'e', 'r', 'e', 'a', 'r', 't', 'h']"
93012,yourinput = str(input()).lower()
93013,if all(requested_word in yourinput for requested_word in original_word):
93014,"    print(""yes"")"
93015,"flog = open('test.txt', 'r')"
93016,flogLines = flog.readlines()
93017,"strlist = ['SUCCESS', 'Done','SUCCESSFUL']"
93018,res = False
93019,for line in flogLines:
93020,     for fstr in strlist:
93021,         if line.find(fstr) != -1:
93022,            print('found') 
93023,            res = True
93024,
93025,
93026,if res:
93027,    print('res true')
93028,else: 
93029,    print('res false')
93030,"def check_string(string, substring_list):"
93031,    for substring in substring_list:
93032,        if substring in string:
93033,            return True
93034,    return False
93035,"data = ""firstName and favoriteFood"""
93036,"mandatory_fields = ['firstName', 'lastName', 'age']"
93037,
93038,
93039,# for each
93040,for field in mandatory_fields:
93041,    if field not in data:
93042,"        print(""Error, missing req field {0}"".format(field));"
93043,
93044,"# still fine, multiple if statements"
93045,if ('firstName' not in data or 
93046,    'lastName' not in data or
93047,    'age' not in data):
93048,"    print(""Error, missing a req field"");"
93049,
93050,"# not very readable, list comprehension"
93051,missing_fields = [x for x in mandatory_fields if x not in data]
93052,if (len(missing_fields)>0):
93053,"    print(""Error, missing fields {0}"".format("", "".join(missing_fields)));"
93054,from nltk.tokenize import word_tokenize
93055,"a_string = ""A string is more than its parts!"""
93056,tokens = word_tokenize(a_string)
93057,tokens
93058,"Out[46]: ['A', 'string', 'is', 'more', 'than', 'its', 'parts', '!']"
93059,"matches_1 = [""more"", ""wholesome"", ""milk""]"
93060,[x in tokens for x in matches_1]
93061,"Out[42]: [True, False, False]"
93062,"matches_2 = [""mo"", ""wholesome"", ""milk""]"
93063,[x in a_string for x in matches_1]
93064,"Out[43]: [True, False, False]"
93065,[x in tokens for x in matches_2]
93066,"Out[44]: [False, False, False]"
93067,pd.melt(df)
93068,pivot_table
93069,import pandas as pd
93070,"df = pd.DataFrame({'Name': ['Bob', 'John', 'Foo', 'Bar', 'Alex', 'Tom'], "
93071,"                   'Math': ['A+', 'B', 'A', 'F', 'D', 'C'], "
93072,"                   'English': ['C', 'B', 'B', 'A+', 'F', 'A'],"
93073,"                   'Age': [13, 16, 16, 15, 15, 13]})"
93074,
93075,
93076,>>> df
93077,   Name Math English  Age
93078,0   Bob   A+       C   13
93079,1  John    B       B   16
93080,2   Foo    A       B   16
93081,3   Bar    F      A+   15
93082,4  Alex    D       F   15
93083,5   Tom    C       A   13
93084,>>> 
93085,    Name  Age  Subject Grade
93086,0    Bob   13  English     C
93087,1   John   16  English     B
93088,2    Foo   16  English     B
93089,3    Bar   15  English    A+
93090,4   Alex   17  English     F
93091,5    Tom   12  English     A
93092,6    Bob   13     Math    A+
93093,7   John   16     Math     B
93094,8    Foo   16     Math     A
93095,9    Bar   15     Math     F
93096,10  Alex   17     Math     D
93097,11   Tom   12     Math     C
93098,Subject
93099,Math
93100,English
93101,   Name  Age Subject Grades
93102,0   Bob   13    Math     A+
93103,1  John   16    Math      B
93104,2   Foo   16    Math      A
93105,3   Bar   15    Math      F
93106,4  Alex   15    Math      D
93107,5   Tom   13    Math      C
93108,  value             Name                Subjects
93109,"0     A         Foo, Tom           Math, English"
93110,"1    A+         Bob, Bar           Math, English"
93111,"2     B  John, John, Foo  Math, English, English"
93112,"3     C         Tom, Bob           Math, English"
93113,4     D             Alex                    Math
93114,"5     F        Bar, Alex           Math, English"
93115,Subjects
93116,"print(df.melt(id_vars=['Name', 'Age'], var_name='Subject', value_name='Grades'))"
93117,    Name  Age  Subject Grades
93118,0    Bob   13     Math     A+
93119,1   John   16     Math      B
93120,2    Foo   16     Math      A
93121,3    Bar   15     Math      F
93122,4   Alex   15     Math      D
93123,5    Tom   13     Math      C
93124,6    Bob   13  English      C
93125,7   John   16  English      B
93126,8    Foo   16  English      B
93127,9    Bar   15  English     A+
93128,10  Alex   15  English      F
93129,11   Tom   13  English      A
93130,   Name Math English  Age
93131,0   Bob   A+       C   13
93132,1  John    B       B   16
93133,2   Foo    A       B   16
93134,3   Bar    F      A+   15
93135,4  Alex    D       F   15
93136,5   Tom    C       A   13
93137,   Name        Subject Grades
93138,"0  Alex  Math, English   D, F"
93139,"1   Bar  Math, English  F, A+"
93140,"2   Bob  Math, English  A+, C"
93141,"3   Foo  Math, English   A, B"
93142,"4  John  Math, English   B, B"
93143,"5   Tom  Math, English   C, A"
93144,     Column Value
93145,0      Name   Bob
93146,1      Name  John
93147,2      Name   Foo
93148,3      Name   Bar
93149,4      Name  Alex
93150,5      Name   Tom
93151,6      Math    A+
93152,7      Math     B
93153,8      Math     A
93154,9      Math     F
93155,10     Math     D
93156,11     Math     C
93157,12  English     C
93158,13  English     B
93159,14  English     B
93160,15  English    A+
93161,16  English     F
93162,17  English     A
93163,18      Age    13
93164,19      Age    16
93165,20      Age    16
93166,21      Age    15
93167,22      Age    15
93168,23      Age    13
93169,df.melt(...)
93170,df.melt
93171,"pd.melt(df, ...)"
93172,melt
93173,melt
93174,Math
93175,English
93176,Subject
93177,Grades
93178,melt
93179,pd.DataFrame.melt
93180,"print(df.melt(id_vars=['Name', 'Age'], var_name='Subject', value_name='Grades'))"
93181,id_vars
93182,"['Name', 'Age']"
93183,value_vars
93184,"['Math', 'English']"
93185,stack
93186,print(
93187,"    df.set_index([""Name"", ""Age""])"
93188,    .stack()
93189,"    .reset_index(name=""Grade"")"
93190,"    .rename(columns={""level_2"": ""Subject""})"
93191,"    .sort_values(""Subject"")"
93192,    .reset_index(drop=True)
93193,)
93194,Name
93195,Age
93196,Math
93197,English
93198,Grade
93199,level_2
93200,Subject
93201,Subject
93202,    Name  Age  Subject Grade
93203,0    Bob   13  English     C
93204,1   John   16  English     B
93205,2    Foo   16  English     B
93206,3    Bar   15  English    A+
93207,4   Alex   17  English     F
93208,5    Tom   12  English     A
93209,6    Bob   13     Math    A+
93210,7   John   16     Math     B
93211,8    Foo   16     Math     A
93212,9    Bar   15     Math     F
93213,10  Alex   17     Math     D
93214,11   Tom   12     Math     C
93215,Math
93216,value_vars
93217,print(
93218,    df.melt(
93219,"        id_vars=[""Name"", ""Age""],"
93220,"        value_vars=""Math"","
93221,"        var_name=""Subject"","
93222,"        value_name=""Grades"","
93223,    )
93224,)
93225,stack
93226,print(
93227,"    df.set_index([""Name"", ""Age""])[[""Math""]]"
93228,    .stack()
93229,"    .reset_index(name=""Grade"")"
93230,"    .rename(columns={""level_2"": ""Subject""})"
93231,"    .sort_values(""Subject"")"
93232,    .reset_index(drop=True)
93233,)
93234,   Name  Age Subject Grade
93235,0   Bob   13    Math    A+
93236,1  John   16    Math     B
93237,2   Foo   16    Math     A
93238,3   Bar   15    Math     F
93239,4  Alex   15    Math     D
93240,5   Tom   13    Math     C
93241,melt
93242,groupby
93243,agg
93244,"', '.join"
93245,print(
93246,"    df.melt(id_vars=[""Name"", ""Age""])"
93247,"    .groupby(""value"", as_index=False)"
93248,"    .agg("", "".join)"
93249,)
93250,stack
93251,stack
93252,groupby
93253,print(
93254,"    df.set_index([""Name"", ""Age""])"
93255,    .stack()
93256,    .reset_index()
93257,"    .rename(columns={""level_2"": ""Subjects"", 0: ""Grade""})"
93258,"    .groupby(""Grade"", as_index=False)"
93259,"    .agg("", "".join)"
93260,)
93261,stack
93262,melt
93263,  Grade             Name                Subjects
93264,"0     A         Foo, Tom           Math, English"
93265,"1    A+         Bob, Bar           Math, English"
93266,"2     B  John, John, Foo  Math, English, English"
93267,"3     C         Bob, Tom           English, Math"
93268,4     D             Alex                    Math
93269,"5     F        Bar, Alex           Math, English"
93270,"df = df.melt(id_vars=['Name', 'Age'], var_name='Subject', value_name='Grades')"
93271,pivot_table
93272,pivot_table
93273,values
93274,index
93275,columns
93276,aggfunc
93277,print(
93278,"    df.pivot_table(""Grades"", [""Name"", ""Age""], ""Subject"", aggfunc=""first"")"
93279,    .reset_index()
93280,    .rename_axis(columns=None)
93281,)
93282,   Name  Age English Math
93283,0  Alex   15       F    D
93284,1   Bar   15      A+    F
93285,2   Bob   13       C   A+
93286,3   Foo   16       B    A
93287,4  John   16       B    B
93288,5   Tom   13       A    C
93289,melt
93290,groupby
93291,print(
93292,"    df.melt(id_vars=[""Name"", ""Age""], var_name=""Subject"", value_name=""Grades"")"
93293,"    .groupby(""Name"", as_index=False)"
93294,"    .agg("", "".join)"
93295,)
93296,Name
93297,stack
93298,print(
93299,"    df.set_index([""Name"", ""Age""])"
93300,    .stack()
93301,    .reset_index()
93302,"    .groupby(""Name"", as_index=False)"
93303,"    .agg("", "".join)"
93304,"    .rename({""level_2"": ""Subjects"", 0: ""Grades""}, axis=1)"
93305,)
93306,   Name       Subjects Grades
93307,"0  Alex  Math, English   D, F"
93308,"1   Bar  Math, English  F, A+"
93309,"2   Bob  Math, English  A+, C"
93310,"3   Foo  Math, English   A, B"
93311,"4  John  Math, English   B, B"
93312,"5   Tom  Math, English   C, A"
93313,melt
93314,"print(df.melt(var_name='Column', value_name='Value'))"
93315,stack
93316,print(
93317,    df.stack()
93318,    .reset_index(level=1)
93319,"    .sort_values(""level_1"")"
93320,    .reset_index(drop=True)
93321,"    .set_axis([""Column"", ""Value""], axis=1)"
93322,)
93323,     Column Value
93324,0       Age    16
93325,1       Age    15
93326,2       Age    15
93327,3       Age    16
93328,4       Age    13
93329,5       Age    13
93330,6   English    A+
93331,7   English     B
93332,8   English     B
93333,9   English     A
93334,10  English     F
93335,11  English     C
93336,12     Math     C
93337,13     Math    A+
93338,14     Math     D
93339,15     Math     B
93340,16     Math     F
93341,17     Math     A
93342,18     Name  Alex
93343,19     Name   Bar
93344,20     Name   Tom
93345,21     Name   Foo
93346,22     Name  John
93347,23     Name   Bob
93348,melt
93349,melt
93350,"pd.melt(df, ...)"
93351,df.melt(...)
93352,black
93353,melt
93354,1970
93355,1980
93356,  A1970 A1980  B1970  B1980         X  id
93357,0     a     d    2.5    3.2 -1.085631   0
93358,1     b     e    1.2    1.3  0.997345   1
93359,2     c     f    0.7    0.1  0.282978   2
93360,pandas.wide_to_long
93361,"pd.wide_to_long(df, stubnames=[""A"", ""B""], i=""id"", j=""year"")"
93362,                X  A    B
93363,id year
93364,0  1970 -1.085631  a  2.5
93365,1  1970  0.997345  b  1.2
93366,2  1970  0.282978  c  0.7
93367,0  1980 -1.085631  d  3.2
93368,1  1980  0.997345  e  1.3
93369,2  1980  0.282978  f  0.1
93370,melt
93371,pd.stack
93372,pd.melt
93373,pd.wide_to_long
93374,df = pd.DataFrame(
93375,"    {'Sepal.Length': [5.1, 5.9],"
93376,"     'Sepal.Width': [3.5, 3.0],"
93377,"     'Petal.Length': [1.4, 5.1],"
93378,"     'Petal.Width': [0.2, 1.8],"
93379,"     'Species': ['setosa', 'virginica']}"
93380,    )
93381,
93382,df
93383,   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width    Species
93384,0           5.1          3.5           1.4          0.2     setosa
93385,1           5.9          3.0           5.1          1.8  virginica
93386,pd.melt
93387,pd.stack
93388,pivot_longer
93389,# pip install pyjanitor
93390,import janitor
93391,df.pivot_longer(index = 'Species')
93392,     Species      variable  value
93393,0     setosa  Sepal.Length    5.1
93394,1  virginica  Sepal.Length    5.9
93395,2     setosa   Sepal.Width    3.5
93396,3  virginica   Sepal.Width    3.0
93397,4     setosa  Petal.Length    1.4
93398,5  virginica  Petal.Length    5.1
93399,6     setosa   Petal.Width    0.2
93400,7  virginica   Petal.Width    1.8
93401,pd.melt
93402,variable
93403,value
93404,names_to
93405,values_to
93406,"df.pivot_longer(index = 'Species', "
93407,"                names_to = 'dimension', "
93408,                values_to = 'measurement_in_cm')
93409,
93410,     Species     dimension  measurement_in_cm
93411,0     setosa  Sepal.Length                5.1
93412,1  virginica  Sepal.Length                5.9
93413,2     setosa   Sepal.Width                3.5
93414,3  virginica   Sepal.Width                3.0
93415,4     setosa  Petal.Length                1.4
93416,5  virginica  Petal.Length                5.1
93417,6     setosa   Petal.Width                0.2
93418,7  virginica   Petal.Width                1.8
93419,"df.pivot_longer(index = 'Species', "
93420,"                names_to = 'dimension', "
93421,"                values_to = 'measurement_in_cm', "
93422,"                ignore_index = False, "
93423,                sort_by_appearance=True)
93424,     Species     dimension  measurement_in_cm
93425,0     setosa  Sepal.Length                5.1
93426,0     setosa   Sepal.Width                3.5
93427,0     setosa  Petal.Length                1.4
93428,0     setosa   Petal.Width                0.2
93429,1  virginica  Sepal.Length                5.9
93430,1  virginica   Sepal.Width                3.0
93431,1  virginica  Petal.Length                5.1
93432,1  virginica   Petal.Width                1.8
93433,names_to
93434,names_transform
93435,# pip install git+https://github.com/pyjanitor-devs/pyjanitor.git
93436,
93437,"out = df.pivot_longer(index = 'Species', "
93438,"                      names_to = 'dimension', "
93439,"                      values_to = 'measurement_in_cm', "
93440,"                      ignore_index = False, "
93441,"                      sort_by_appearance=True, "
93442,                      names_transform = 'category')
93443,
93444,out.dtypes
93445,
93446,Species                object
93447,dimension            category
93448,measurement_in_cm     float64
93449,dtype: object
93450,sepal
93451,petal
93452,part
93453,length
93454,width
93455,dimension
93456,pd.melt
93457,out = df.melt(id_vars = 'Species')
93458,arr = out.variable.str.split('.')
93459,(out
93460,".assign(part = arr.str[0], "
93461,        dimension = arr.str[1])
93462,.drop(columns = 'variable')
93463,)
93464,
93465,     Species  value   part dimension
93466,0     setosa    5.1  Sepal    Length
93467,1  virginica    5.9  Sepal    Length
93468,2     setosa    3.5  Sepal     Width
93469,3  virginica    3.0  Sepal     Width
93470,4     setosa    1.4  Petal    Length
93471,5  virginica    5.1  Petal    Length
93472,6     setosa    0.2  Petal     Width
93473,7  virginica    1.8  Petal     Width
93474,pd.stack
93475,out = df.set_index('Species')
93476,
93477,# this returns a MultiIndex
93478,"out.columns = out.columns.str.split('.', expand = True)"
93479,"new_names = ['part', 'dimension']"
93480,out.columns.names = new_names
93481,out.stack(new_names).rename('value').reset_index()
93482,
93483,     Species   part dimension  value
93484,0     setosa  Petal    Length    1.4
93485,1     setosa  Petal     Width    0.2
93486,2     setosa  Sepal    Length    5.1
93487,3     setosa  Sepal     Width    3.5
93488,4  virginica  Petal    Length    5.1
93489,5  virginica  Petal     Width    1.8
93490,6  virginica  Sepal    Length    5.9
93491,7  virginica  Sepal     Width    3.0
93492,pivot_longer
93493,pivot_longer
93494,.
93495,names_to
93496,names_sep
93497,pd.str.split
93498,"df.pivot_longer(index = 'Species', "
93499,"                names_to = ('part', 'dimension'), "
93500,                names_sep='.')
93501,
93502,     Species   part dimension  value
93503,0     setosa  Sepal    Length    5.1
93504,1  virginica  Sepal    Length    5.9
93505,2     setosa  Sepal     Width    3.5
93506,3  virginica  Sepal     Width    3.0
93507,4     setosa  Petal    Length    1.4
93508,5  virginica  Petal    Length    5.1
93509,6     setosa  Petal     Width    0.2
93510,7  virginica  Petal     Width    1.8
93511,# https://github.com/tidyverse/tidyr/blob/main/data-raw/who.csv
93512,"who = pd.DataFrame({'id': [1], 'new_sp_m5564': [2], 'newrel_f65': [3]})"
93513,who
93514,   id  new_sp_m5564  newrel_f65
93515,0   1             2           3
93516,_
93517,_
93518,sp
93519,rel
93520,diagnosis
93521,m
93522,f
93523,gender
93524,age
93525,pd.melt
93526,pd.melt
93527,out = who.melt('id')
93528,"regex = r""new_?(?P<diagnosis>.+)_(?P<gender>.)(?P<age>\d+)"""
93529,new_df = out.variable.str.extract(regex)
93530,# pd.concat can be used here instead
93531,out.drop(columns='variable').assign(**new_df)
93532,   id  value diagnosis gender   age
93533,0   1      2        sp      m  5564
93534,1   1      3       rel      f    65
93535,pd.stack
93536,out = who.set_index('id')
93537,"regex = r""new_?(.+)_(.)(\d+)"""
93538,"new_names = ['diagnosis', 'age', 'gender']"
93539,# returns a dataframe
93540,new_cols = out.columns.str.extract(regex)
93541,new_cols.columns = new_names
93542,new_cols = pd.MultiIndex.from_frame(new_cols)
93543,out.columns = new_cols
93544,out.stack(new_names).rename('value').reset_index()
93545,
93546,   id diagnosis age gender  value
93547,0   1       rel   f     65    3.0
93548,1   1        sp   m   5564    2.0
93549,pivot_longer
93550,names_pattern
93551,"regex = r""new_?(.+)_(.)(\d+)"""
93552,"new_names = ['diagnosis', 'age', 'gender']"
93553,"who.pivot_longer(index = 'id', "
93554,"                 names_to = new_names, "
93555,                 names_pattern = regex)
93556,
93557,   id diagnosis age gender  value
93558,0   1        sp   m   5564      2
93559,1   1       rel   f     65      3
93560,"df = pd.DataFrame({'City': ['Houston', 'Austin', 'Hoover'],"
93561,"                   'State': ['Texas', 'Texas', 'Alabama'],"
93562,"                   'Name':['Aria', 'Penelope', 'Niko'],"
93563,"                   'Mango':[4, 10, 90],"
93564,"                   'Orange': [10, 8, 14], "
93565,"                   'Watermelon':[40, 99, 43],"
93566,"                   'Gin':[16, 200, 34],"
93567,"                   'Vodka':[20, 33, 18]},"
93568,"                 columns=['City', 'State', 'Name', 'Mango', 'Orange', 'Watermelon', 'Gin', 'Vodka'])"
93569,
93570,df
93571,      City    State      Name  Mango  Orange  Watermelon  Gin  Vodka
93572,0  Houston    Texas      Aria      4      10          40   16     20
93573,1   Austin    Texas  Penelope     10       8          99  200     33
93574,2   Hoover  Alabama      Niko     90      14          43   34     18
93575,Mango
93576,Orange
93577,Watermelon
93578,Gin
93579,Vodka
93580,Drinks
93581,Pounds
93582,Ounces
93583,pd.melt
93584,"df1 = df.melt(id_vars=['City', 'State'], "
93585,"              value_vars=['Mango', 'Orange', 'Watermelon'],"
93586,"              var_name='Fruit', value_name='Pounds')"
93587,"df2 = df.melt(id_vars=['City', 'State'], "
93588,"              value_vars=['Gin', 'Vodka'], "
93589,"              var_name='Drink', value_name='Ounces')"
93590,
93591,"df1 = df1.set_index(['City', 'State', df1.groupby(['City', 'State']).cumcount()])"
93592,"df2 = df2.set_index(['City', 'State', df2.groupby(['City', 'State']).cumcount()])"
93593,
93594,
93595,"df3 = (pd.concat([df1, df2],axis=1)"
93596,         .sort_index(level=2)
93597,"         .reset_index(level=2, drop=True)"
93598,         .reset_index())
93599,print (df3)
93600,      City    State       Fruit  Pounds  Drink  Ounces
93601,0   Austin    Texas       Mango      10    Gin   200.0
93602,1   Hoover  Alabama       Mango      90    Gin    34.0
93603,2  Houston    Texas       Mango       4    Gin    16.0
93604,3   Austin    Texas      Orange       8  Vodka    33.0
93605,4   Hoover  Alabama      Orange      14  Vodka    18.0
93606,5  Houston    Texas      Orange      10  Vodka    20.0
93607,6   Austin    Texas  Watermelon      99    NaN     NaN
93608,7   Hoover  Alabama  Watermelon      43    NaN     NaN
93609,8  Houston    Texas  Watermelon      40    NaN     NaN
93610,pd.stack
93611,pivot_longer
93612,names_to
93613,values_to
93614,names_pattern
93615,names_pattern
93616,df.pivot_longer(
93617,"    index=[""City"", ""State""],"
93618,"    column_names=slice(""Mango"", ""Vodka""),"
93619,"    names_to=(""Fruit"", ""Drink""),"
93620,"    values_to=(""Pounds"", ""Ounces""),"
93621,"   names_pattern=[r""M|O|W"", r""G|V""],"
93622,   )
93623,      City    State       Fruit  Pounds  Drink  Ounces
93624,0  Houston    Texas       Mango       4    Gin    16.0
93625,1   Austin    Texas       Mango      10    Gin   200.0
93626,2   Hoover  Alabama       Mango      90    Gin    34.0
93627,3  Houston    Texas      Orange      10  Vodka    20.0
93628,4   Austin    Texas      Orange       8  Vodka    33.0
93629,5   Hoover  Alabama      Orange      14  Vodka    18.0
93630,6  Houston    Texas  Watermelon      40   None     NaN
93631,7   Austin    Texas  Watermelon      99   None     NaN
93632,8   Hoover  Alabama  Watermelon      43   None     NaN
93633,"df = pd.DataFrame({'x_1_mean': [10],"
93634,"                   'x_2_mean': [20],"
93635,"                   'y_1_mean': [30],"
93636,"                   'y_2_mean': [40],"
93637,                   'unit': [50]})
93638,
93639,df
93640,
93641,   x_1_mean  x_2_mean  y_1_mean  y_2_mean  unit
93642,0        10        20        30        40    50
93643,x*
93644,x_mean
93645,y*
93646,y_mean
93647,out = df.set_index('unit')
93648,grouped = out.columns.str.split('_\d_').str.join('')
93649,# group on the split
93650,"grouped = out.groupby(grouped, axis = 1)"
93651,"# iterate, melt individually, and recombine to get a new dataframe"
93652,out = {key : frame.melt(ignore_index = False).value
93653,"       for key, frame in grouped}"
93654,pd.DataFrame(out).reset_index()
93655,
93656,   unit  xmean  ymean
93657,0    50     10     30
93658,1    50     20     40
93659,out = df.set_index('unit')
93660,split = out.columns.str.split('_(\d)_')
93661,"split = [(f""{first}{last}"", middle) "
93662,"          for first, middle, last"
93663,          in split]
93664,out.columns = pd.MultiIndex.from_tuples(split)
93665,out.stack(-1).droplevel(-1).reset_index()
93666,   unit  xmean  ymean
93667,0    50     10     30
93668,1    50     20     40
93669,out = df.set_index('unit')
93670,"out.columns = [f""{first}{last}_{middle}"" "
93671,"               for first, middle, last "
93672,               in out.columns.str.split('_(\d)_')]
93673,
93674,(pd
93675,.wide_to_long(
93676,"    out.reset_index(), "
93677,"    stubnames = ['xmean', 'ymean'], "
93678,"    i = 'unit', "
93679,"    j = 'num', "
93680,    sep = '_')
93681,.droplevel(-1)
93682,.reset_index()
93683,)
93684,
93685,   unit  xmean  ymean
93686,0    50     10     30
93687,1    50     20     40
93688,pivot_longer
93689,names_to
93690,names_pattern
93691,"df.pivot_longer(index = 'unit', "
93692,"                names_to = ['xmean', 'ymean'], "
93693,"                names_pattern = ['x', 'y']"
93694,                )
93695,
93696,   unit  xmean  ymean
93697,0    50     10     30
93698,1    50     20     40
93699,pivot_longer
93700,# reorder the columns in a different form:
93701,"df = df.loc[:, ['x_1_mean', 'x_2_mean', 'y_2_mean', 'y_1_mean', 'unit']]"
93702,df
93703,   x_1_mean  x_2_mean  y_2_mean  y_1_mean  unit
93704,0        10        20        40        30    50
93705,x_1_mean
93706,y_2_mean
93707,y
93708,x_2_mean
93709,y_1_mean
93710,"df.pivot_longer(index = 'unit', "
93711,"                names_to = ['xmean', 'ymean'], "
93712,"                names_pattern = ['x', 'y']"
93713,                )
93714,   unit  xmean  ymean
93715,0    50     10     40
93716,1    50     20     30
93717,df = pd.DataFrame(
93718,"    {'Sepal.Length': [5.1, 5.9],"
93719,"     'Sepal.Width': [3.5, 3.0],"
93720,"     'Petal.Length': [1.4, 5.1],"
93721,"     'Petal.Width': [0.2, 1.8],"
93722,"     'Species': ['setosa', 'virginica']}"
93723,    )
93724,
93725,df
93726,   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width    Species
93727,0           5.1          3.5           1.4          0.2     setosa
93728,1           5.9          3.0           5.1          1.8  virginica
93729,Sepal
93730,Petal
93731,Length
93732,Width
93733,dimension
93734,out = df.melt(id_vars = 'Species')
93735,arr = out.variable.str.split('.')
93736,(out
93737,".assign(part = arr.str[0], "
93738,        dimension = arr.str[1])
93739,".pivot(['Species', 'dimension'], 'part', 'value')"
93740,.rename_axis(columns = None)
93741,.reset_index()
93742,)
93743,
93744,     Species dimension  Petal  Sepal
93745,0     setosa    Length    1.4    5.1
93746,1     setosa     Width    0.2    3.5
93747,2  virginica    Length    5.1    5.9
93748,3  virginica     Width    1.8    3.0
93749,out = df.set_index('Species')
93750,"out.columns = out.columns.str.split('.', expand = True)"
93751,"out.columns.names = [None, 'dimension']"
93752,out.stack('dimension').reset_index()
93753,
93754,     Species dimension  Petal  Sepal
93755,0     setosa    Length    1.4    5.1
93756,1     setosa     Width    0.2    3.5
93757,2  virginica    Length    5.1    5.9
93758,3  virginica     Width    1.8    3.0
93759,(pd
93760,.wide_to_long(
93761,"    df, "
93762,"    stubnames=['Sepal', 'Petal'], "
93763,"    i = 'Species', "
93764,"    j = 'dimension', "
93765,"    sep='.', "
93766,    suffix='.+')
93767,.reset_index()
93768,)
93769,     Species dimension  Sepal  Petal
93770,0     setosa    Length    5.1    1.4
93771,1  virginica    Length    5.9    5.1
93772,2     setosa     Width    3.5    0.2
93773,3  virginica     Width    3.0    1.8
93774,pd.wide_to_long
93775,.value
93776,.value
93777,names_sep
93778,names_pattern
93779,names_sep
93780,"df.pivot_longer(index = 'Species', "
93781,"                names_to = ('.value', 'dimension'), "
93782,                names_sep = '.')
93783,
93784,     Species dimension  Sepal  Petal
93785,0     setosa    Length    5.1    1.4
93786,1  virginica    Length    5.9    5.1
93787,2     setosa     Width    3.5    0.2
93788,3  virginica     Width    3.0    1.8
93789,.
93790,"Petal, Length"
93791,"('.value', 'dimension')"
93792,Petal
93793,.value
93794,Length
93795,dimension
93796,Petal
93797,Length
93798,dimension
93799,.value
93800,names_sep
93801,names_pattern
93802,Length
93803,Width
93804,Petal/Sepal
93805,part
93806,out = df.melt(id_vars = 'Species')
93807,arr = out.variable.str.split('.')
93808,(out
93809,".assign(part = arr.str[0], "
93810,        dimension = arr.str[1])
93811,".pivot(['Species', 'part'], 'dimension', 'value')"
93812,.rename_axis(columns = None)
93813,.reset_index()
93814,)
93815,
93816,     Species   part  Length  Width
93817,0     setosa  Petal     1.4    0.2
93818,1     setosa  Sepal     5.1    3.5
93819,2  virginica  Petal     5.1    1.8
93820,3  virginica  Sepal     5.9    3.0
93821,out = df.set_index('Species')
93822,"out.columns = out.columns.str.split('.', expand = True)"
93823,"out.columns.names = ['part', None]"
93824,out.stack('part').reset_index()
93825,
93826,     Species   part  Length  Width
93827,0     setosa  Petal     1.4    0.2
93828,1     setosa  Sepal     5.1    3.5
93829,2  virginica  Petal     5.1    1.8
93830,3  virginica  Sepal     5.9    3.0
93831,Length
93832,Width
93833,out = df.set_index('Species')
93834,out.columns = out.columns.str.split('.').str[::-1].str.join('.')
93835,(pd
93836,.wide_to_long(
93837,"    out.reset_index(), "
93838,"    stubnames=['Length', 'Width'], "
93839,"    i = 'Species', "
93840,"    j = 'part', "
93841,"    sep='.', "
93842,    suffix='.+')
93843,.reset_index()
93844,)
93845,
93846,     Species   part  Length  Width
93847,0     setosa  Sepal     5.1    3.5
93848,1  virginica  Sepal     5.9    3.0
93849,2     setosa  Petal     1.4    0.2
93850,3  virginica  Petal     5.1    1.8
93851,"df.pivot_longer(index = 'Species', "
93852,"                names_to = ('part', '.value'),"
93853,                names_sep = '.')
93854,
93855,     Species   part  Length  Width
93856,0     setosa  Sepal     5.1    3.5
93857,1  virginica  Sepal     5.9    3.0
93858,2     setosa  Petal     1.4    0.2
93859,3  virginica  Petal     5.1    1.8
93860,.value
93861,names_sep
93862,.value
93863,"df = pd.DataFrame({'x_1_mean': [10],"
93864,"                   'x_2_mean': [20],"
93865,"                   'y_1_mean': [30],"
93866,"                   'y_2_mean': [40],"
93867,                   'unit': [50]})
93868,
93869,df
93870,
93871,   x_1_mean  x_2_mean  y_1_mean  y_2_mean  unit
93872,0        10        20        30        40    50
93873,"df.pivot_longer(index = 'unit',"
93874,"                names_to = ('.value', '.value'),"
93875,"                names_pattern = r""(.).+(mean)"")"
93876,
93877,   unit  xmean  ymean
93878,0    50     10     30
93879,1    50     20     40
93880,pivot_longer
93881,enum34
93882,__order__
93883,enum34
93884,$ pip install enum34
93885,aenum
93886,$ pip install aenum
93887,enum
93888,"from enum import Enum     # for enum34, or the stdlib version"
93889,# from aenum import Enum  # for the aenum version
93890,"Animal = Enum('Animal', 'ant bee cat dog')"
93891,
93892,Animal.ant  # returns <Animal.ant: 1>
93893,Animal['ant']  # returns <Animal.ant: 1> (string lookup)
93894,Animal.ant.name  # returns 'ant' (inverse lookup)
93895,class Animal(Enum):
93896,    ant = 1
93897,    bee = 2
93898,    cat = 3
93899,    dog = 4
93900,def enum(**enums):
93901,"    return type('Enum', (), enums)"
93902,">>> Numbers = enum(ONE=1, TWO=2, THREE='three')"
93903,>>> Numbers.ONE
93904,1
93905,>>> Numbers.TWO
93906,2
93907,>>> Numbers.THREE
93908,'three'
93909,"def enum(*sequential, **named):"
93910,"    enums = dict(zip(sequential, range(len(sequential))), **named)"
93911,"    return type('Enum', (), enums)"
93912,">>> Numbers = enum('ZERO', 'ONE', 'TWO')"
93913,>>> Numbers.ZERO
93914,0
93915,>>> Numbers.ONE
93916,1
93917,"def enum(*sequential, **named):"
93918,"    enums = dict(zip(sequential, range(len(sequential))), **named)"
93919,"    reverse = dict((value, key) for key, value in enums.iteritems())"
93920,    enums['reverse_mapping'] = reverse
93921,"    return type('Enum', (), enums)"
93922,KeyError
93923,>>> Numbers.reverse_mapping['three']
93924,'THREE'
93925,typing.Literal
93926,from typing import Literal #python >=3.8
93927,"from typing_extensions import Literal #python 2.7, 3.4-3.7"
93928,
93929,
93930,"Animal = Literal['ant', 'bee', 'cat', 'dog']"
93931,
93932,def hello_animal(animal: Animal):
93933,"    print(f""hello {animal}"")"
93934,
93935,hello_animal('rock') # error
93936,hello_animal('bee') # passes
93937,**named
93938,"enum(""blue"", ""red"", ""green"", black=0)"
93939,class Animal:
93940,    DOG = 1
93941,    CAT = 2
93942,
93943,x = Animal.DOG
93944,name
93945,value
93946,from enum import Enum
93947,
93948,class Animal(Enum):
93949,    DOG = 1
93950,    CAT = 2
93951,
93952,print(Animal.DOG)
93953,# <Animal.DOG: 1>
93954,
93955,print(Animal.DOG.value)
93956,# 1
93957,
93958,print(Animal.DOG.name)
93959,"# ""DOG"""
93960,class Animal(Enum):
93961,"    DOG, CAT = range(2)"
93962,Enum
93963,class Animal(Enum):
93964,    DOG = 1
93965,    CAT = 2
93966,    COW = 0
93967,
93968,list(Animal)
93969,"# [<Animal.DOG: 1>, <Animal.CAT: 2>, <Animal.COW: 0>]"
93970,
93971,[animal.value for animal in Animal]
93972,"# [1, 2, 0]"
93973,
93974,Animal.CAT in Animal
93975,# True
93976,object()
93977,X = object()
93978,class Enum(set):
93979,"    def __getattr__(self, name):"
93980,        if name in self:
93981,            return name
93982,        raise AttributeError
93983,"Animals = Enum([""DOG"", ""CAT"", ""HORSE""])"
93984,
93985,print(Animals.DOG)
93986,"__setattr__(self, name, value)"
93987,"__delattr__(self, name)"
93988,Animals.DOG = CAT
93989,Animals.DOG
93990,setattr()
93991,__init__()
93992,__getattr__()
93993,try-except
93994,"dog, cat, rabbit = range(3)"
93995,"dog, cat, rabbit, horse, *_ = range(100)"
93996,enum
93997,enum
93998,"Pen, Pencil, Eraser = range(0, 3)"
93999,range
94000,"Pen, Pencil, Eraser = range(9, 12)"
94001,class Stationery:
94002,"    Pen, Pencil, Eraser = range(0, 3)"
94003,stype = Stationery.Pen
94004,range
94005,"my_enum = dict(map(reversed, enumerate(str.split('Item0 Item1 Item2'))))"
94006,my_enum
94007,my_enum['Item0']
94008,str.split
94009,"Flag1, Flag2, Flag3 = [2**i for i in range(3)]"
94010,class Animal:
94011,"   def __init__(self, name):"
94012,       self.name = name
94013,
94014,   def __str__(self):
94015,       return self.name
94016,
94017,   def __repr__(self):
94018,"       return ""<Animal: %s>"" % self"
94019,
94020,"Animal.DOG = Animal(""dog"")"
94021,"Animal.CAT = Animal(""cat"")"
94022,
94023,>>> x = Animal.DOG
94024,>>> x
94025,<Animal: dog>
94026,>>> x == 1
94027,False
94028,class Enum(tuple): __getattr__ = tuple.index
94029,">>> State = Enum(['Unclaimed', 'Claimed'])"
94030,>>> State.Claimed
94031,1
94032,>>> State[1]
94033,'Claimed'
94034,>>> State
94035,"('Unclaimed', 'Claimed')"
94036,>>> range(len(State))
94037,"[0, 1]"
94038,">>> [(k, State[k]) for k in range(len(State))]"
94039,"[(0, 'Unclaimed'), (1, 'Claimed')]"
94040,">>> [(k, getattr(State, k)) for k in State]"
94041,"[('Unclaimed', 0), ('Claimed', 1)]"
94042,in
94043,"'Claimed' in Enum(['Unclaimed', 'Claimed'])"
94044,enum.Enum
94045,class Animal(object):
94046,"    values = ['Horse','Dog','Cat']"
94047,
94048,    class __metaclass__(type):
94049,"        def __getattr__(self, name):"
94050,            return self.values.index(name)
94051,>>> Animal.Cat
94052,2
94053,"def name_of(self, i):"
94054,    return self.values[i]
94055,"Animal = Enum('horse', 'dog', 'cat')"
94056,enum.Enum
94057,enum
94058,enum
94059,"ANIMALS = ['cat', 'dog', 'python']"
94060,
94061,def take_for_a_walk(animal):
94062,    assert animal in ANIMALS
94063,    ...
94064,>>> from enum import Enum
94065,>>> class Color(Enum):
94066,...     red = 1
94067,...     green = 2
94068,...     blue = 3
94069,>>> print(Color.red)
94070,Color.red
94071,>>> print(repr(Color.red))
94072,<Color.red: 1>
94073,>>> for color in Color:
94074,...   print(color)
94075,...
94076,Color.red
94077,Color.green
94078,Color.blue
94079,>>> Color(1)
94080,Color.red
94081,>>> Color['blue']
94082,Color.blue
94083,class Animal:
94084,  class Dog: pass
94085,  class Cat: pass
94086,
94087,x = Animal.Dog
94088,class SymbolClass(type):
94089,    def __repr__(self): return self.__qualname__
94090,    def __str__(self): return self.__name__
94091,
94092,class Symbol(metaclass=SymbolClass): pass
94093,
94094,
94095,class Animal:
94096,    class Dog(Symbol): pass
94097,    class Cat(Symbol): pass
94098,">>> mydict = {Animal.Dog: 'Wan Wan', Animal.Cat: 'Nyaa'}"
94099,>>> mydict
94100,"{Animal.Dog: 'Wan Wan', Animal.Cat: 'Nyaa'}"
94101,def M_add_class_attribs(attribs):
94102,"    def foo(name, bases, dict_):"
94103,"        for v, k in attribs:"
94104,            dict_[k] = v
94105,"        return type(name, bases, dict_)"
94106,    return foo
94107,
94108,def enum(*names):
94109,    class Foo(object):
94110,        __metaclass__ = M_add_class_attribs(enumerate(names))
94111,"        def __setattr__(self, name, value):  # this makes it read-only"
94112,            raise NotImplementedError
94113,    return Foo()
94114,"Animal = enum('DOG', 'CAT')"
94115,Animal.DOG # returns 0
94116,Animal.CAT # returns 1
94117,Animal.DOG = 2 # raises NotImplementedError
94118,__metaclass__ = M_add_class_attribs(enumerate(names))
94119,"__metaclass__ = M_add_class_attribs((object(), name) for name in names)"
94120,enum(names)
94121,enum(*names)
94122,enum.Enum
94123,namedtuple
94124,from collections import namedtuple
94125,
94126,def enum(*keys):
94127,"    return namedtuple('Enum', keys)(*keys)"
94128,
94129,"MyEnum = enum('FOO', 'BAR', 'BAZ')"
94130,# With sequential number values
94131,def enum(*keys):
94132,"    return namedtuple('Enum', keys)(*range(len(keys)))"
94133,
94134,# From a dict / keyword args
94135,def enum(**kwargs):
94136,"    return namedtuple('Enum', kwargs.keys())(*kwargs.values())"
94137,
94138,
94139,
94140,
94141,# Example for dictionary param:
94142,"values = {""Salad"": 20, ""Carrot"": 99, ""Tomato"": ""No i'm not""} "
94143,Vegetables= enum(**values)
94144,
94145,# >>> print(Vegetables.Tomato)        'No i'm not'
94146,
94147,
94148,# Example for keyworded params: 
94149,"Fruits = enum(Apple=""Steve Jobs"", Peach=1, Banana=2)"
94150,
94151,# >>> print(Fruits.Apple)             'Steve Jobs'
94152,set
94153,'FOO' in MyEnum
94154,other = MyEnum.FOO
94155,assert other == MyEnum.FOO
94156,MyEnum.FOO < MyEnum.BAR
94157,collections
94158,collections.abc
94159,namedtuple
94160,namedtuple
94161,collections
94162,from enum import Enum
94163,class Color(Enum):
94164,     red = 1
94165,     green = 2
94166,     blue = 3
94167,months = {
94168,"    'January': 1,"
94169,"    'February': 2,"
94170,    ...
94171,}
94172,months = dict(
94173,"    January=1,"
94174,"    February=2,"
94175,    ...
94176,)
94177,mymonth = months['January']
94178,class Enum(object): 
94179,"    def __init__(self, tupleList):"
94180,            self.tupleList = tupleList
94181,    
94182,"    def __getattr__(self, name):"
94183,            return self.tupleList.index(name)
94184,"DIRECTION = Enum(('UP', 'DOWN', 'LEFT', 'RIGHT'))"
94185,DIRECTION.DOWN
94186,1
94187,from enum import Enum
94188,class MyEnum(Enum):
94189,    UP = 1
94190,    DOWN = 2
94191,    LEFT = 3
94192,    RIGHT = 4
94193,MyEnum.DOWN
94194,enum.Enum
94195,class Enum(object):
94196,"    def __init__(self, names, separator=None):"
94197,        self.names = names.split(separator)
94198,"        for value, name in enumerate(self.names):"
94199,"            setattr(self, name.upper(), value)"
94200,    def tuples(self):
94201,        return tuple(enumerate(self.names))
94202,>>> state = Enum('draft published retracted')
94203,>>> state.DRAFT
94204,0
94205,>>> state.RETRACTED
94206,2
94207,>>> state.FOO
94208,Traceback (most recent call last):
94209,"   File ""<stdin>"", line 1, in <module>"
94210,AttributeError: 'Enum' object has no attribute 'FOO'
94211,>>> state.tuples()
94212,"((0, 'draft'), (1, 'published'), (2, 'retracted'))"
94213,>>> from enum import Enum
94214,>>> class Colors(Enum):
94215,...     red = 1
94216,...     green = 2
94217,...     blue = 3
94218,>>> for color in Colors: print color
94219,Colors.red
94220,Colors.green
94221,Colors.blue
94222,"months = set('January', 'February', ..., 'December')"
94223,if m in months:
94224,"def cmp(a,b):"
94225,   if a < b: return -1
94226,   if b < a: return 1
94227,   return 0
94228,
94229,
94230,def Enum(*names):
94231,"   ##assert names, ""Empty enums are not supported"" # <- Don't like empty enums? Uncomment!"
94232,
94233,   class EnumClass(object):
94234,      __slots__ = names
94235,      def __iter__(self):        return iter(constants)
94236,      def __len__(self):         return len(constants)
94237,"      def __getitem__(self, i):  return constants[i]"
94238,      def __repr__(self):        return 'Enum' + str(names)
94239,      def __str__(self):         return 'enum ' + str(constants)
94240,
94241,   class EnumValue(object):
94242,      __slots__ = ('__value')
94243,"      def __init__(self, value): self.__value = value"
94244,      Value = property(lambda self: self.__value)
94245,      EnumType = property(lambda self: EnumType)
94246,      def __hash__(self):        return hash(self.__value)
94247,"      def __cmp__(self, other):"
94248,         # C fans might want to remove the following assertion
94249,         # to make all enums comparable by ordinal value {;))
94250,"         assert self.EnumType is other.EnumType, ""Only values from the same enum are comparable"""
94251,"         return cmp(self.__value, other.__value)"
94252,"      def __lt__(self, other):   return self.__cmp__(other) < 0"
94253,"      def __eq__(self, other):   return self.__cmp__(other) == 0"
94254,      def __invert__(self):      return constants[maximum - self.__value]
94255,      def __nonzero__(self):     return bool(self.__value)
94256,      def __repr__(self):        return str(names[self.__value])
94257,
94258,   maximum = len(names) - 1
94259,   constants = [None] * len(names)
94260,"   for i, each in enumerate(names):"
94261,      val = EnumValue(i)
94262,"      setattr(EnumClass, each, val)"
94263,      constants[i] = val
94264,   constants = tuple(constants)
94265,   EnumType = EnumClass()
94266,   return EnumType
94267,
94268,
94269,if __name__ == '__main__':
94270,   print( '\n*** Enum Demo ***')
94271,   print( '--- Days of week ---')
94272,"   Days = Enum('Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su')"
94273,   print( Days)
94274,   print( Days.Mo)
94275,   print( Days.Fr)
94276,   print( Days.Mo < Days.Fr)
94277,   print( list(Days))
94278,   for each in Days:
94279,"      print( 'Day:', each)"
94280,   print( '--- Yes/No ---')
94281,"   Confirmation = Enum('No', 'Yes')"
94282,   answer = Confirmation.No
94283,"   print( 'Your answer is not', ~answer)"
94284,.__int__()
94285,stat
94286,repr
94287,>>> class Enum(int):
94288,"...     def __new__(cls, value):"
94289,"...         if isinstance(value, str):"
94290,"...             return getattr(cls, value)"
94291,"...         elif isinstance(value, int):"
94292,...             return cls.__index[value]
94293,...     def __str__(self): return self.__name
94294,"...     def __repr__(self): return ""%s.%s"" % (type(self).__name__, self.__name)"
94295,...     class __metaclass__(type):
94296,"...         def __new__(mcls, name, bases, attrs):"
94297,...             attrs['__slots__'] = ['_Enum__name']
94298,"...             cls = type.__new__(mcls, name, bases, attrs)"
94299,...             cls._Enum__index = _index = {}
94300,...             for base in reversed(bases):
94301,"...                 if hasattr(base, '_Enum__index'):"
94302,...                     _index.update(base._Enum__index)
94303,...             # create all of the instances of the new class
94304,...             for attr in attrs.keys():
94305,...                 value = attrs[attr]
94306,"...                 if isinstance(value, int):"
94307,"...                     evalue = int.__new__(cls, value)"
94308,...                     evalue._Enum__name = attr
94309,...                     _index[value] = evalue
94310,"...                     setattr(cls, attr, evalue)"
94311,...             return cls
94312,... 
94313,>>> class Citrus(Enum):
94314,...     Lemon = 1
94315,...     Lime = 2
94316,... 
94317,>>> Citrus.Lemon
94318,Citrus.Lemon
94319,>>> 
94320,>>> Citrus(1)
94321,Citrus.Lemon
94322,>>> Citrus(5)
94323,Traceback (most recent call last):
94324,"  File ""<stdin>"", line 1, in <module>"
94325,"  File ""<stdin>"", line 6, in __new__"
94326,KeyError: 5
94327,>>> class Fruit(Citrus):
94328,...     Apple = 3
94329,...     Banana = 4
94330,... 
94331,>>> Fruit.Apple
94332,Fruit.Apple
94333,>>> Fruit.Lemon
94334,Citrus.Lemon
94335,>>> Fruit(1)
94336,Citrus.Lemon
94337,>>> Fruit(3)
94338,Fruit.Apple
94339,">>> ""%d %s %r"" % ((Fruit.Apple,)*3)"
94340,'3 Apple Fruit.Apple'
94341,>>> Fruit(1) is Citrus.Lemon
94342,True
94343,str()
94344,int()
94345,repr()
94346,is
94347,__instancecheck__
94348,1 in Fruit
94349,"isinstance(1, Fruit)"
94350,"def enum(*sequential, **named):"
94351,"    enums = dict(zip(sequential, [object() for _ in range(len(sequential))]), **named)"
94352,"    return type('Enum', (), enums)"
94353,">>> DOG = enum('BARK', 'WALK', 'SIT')"
94354,">>> CAT = enum('MEOW', 'WALK', 'SIT')"
94355,>>> DOG.WALK == CAT.WALK
94356,False
94357,">>> DOG = enum('BARK'=1, 'WALK'=2, 'SIT'=3)"
94358,">>> CAT = enum('WALK'=1, 'SIT'=2)"
94359,>>> pet1_state = DOG.BARK
94360,>>> pet2_state = CAT.WALK
94361,>>> pet1_state == pet2_state
94362,True
94363,enum.Enum
94364,def enum(**enums):
94365,"    '''simple constant ""enums""'''"
94366,"    return type('Enum', (object,), enums)"
94367,"def enum_base(t, **enums):"
94368,    '''enums with a base class'''
94369,"    T = type('Enum', (t,), {})"
94370,"    for key,val in enums.items():"
94371,"        setattr(T, key, T(val))"
94372,
94373,    return T
94374,">>> Numbers = enum_base(int, ONE=1, TWO=2, THREE=3)"
94375,>>> Numbers.ONE
94376,1
94377,>>> x = Numbers.TWO
94378,>>> 10 + x
94379,12
94380,>>> type(Numbers)
94381,<type 'type'>
94382,>>> type(Numbers.ONE)
94383,<class 'Enum'>
94384,">>> isinstance(x, Numbers)"
94385,True
94386,"def enum_repr(t, **enums):"
94387,    '''enums with a base class and repr() output'''
94388,    class Enum(t):
94389,        def __repr__(self):
94390,"            return '<enum {0} of type Enum({1})>'.format(self._name, t.__name__)"
94391,
94392,"    for key,val in enums.items():"
94393,        i = Enum(val)
94394,        i._name = key
94395,"        setattr(Enum, key, i)"
94396,
94397,    return Enum
94398,
94399,
94400,
94401,">>> Numbers = enum_repr(int, ONE=1, TWO=2, THREE=3)"
94402,>>> repr(Numbers.ONE)
94403,'<enum ONE of type Enum(int)>'
94404,>>> str(Numbers.ONE)
94405,'1'
94406,>>> from enum import Enum
94407,">>> Colors = Enum('red', 'blue', 'green')"
94408,>>> shirt_color = Colors.green
94409,>>> shirt_color = Colors[2]
94410,>>> shirt_color > Colors.red
94411,True
94412,>>> shirt_color.index
94413,2
94414,>>> str(shirt_color)
94415,'green'
94416,def enum(*names):
94417,"    """""""
94418,SYNOPSIS
94419,"    Well-behaved enumerated type, easier than creating custom classes"
94420,
94421,DESCRIPTION
94422,    Create a custom type that implements an enumeration.  Similar in concept
94423,    to a C enum but with some additional capabilities and protections.  See
94424,    http://code.activestate.com/recipes/413486-first-class-enums-in-python/.
94425,
94426,PARAMETERS
94427,    names       Ordered list of names.  The order in which names are given
94428,                will be the sort order in the enum type.  Duplicate names
94429,                are not allowed.  Unicode names are mapped to ASCII.
94430,
94431,RETURNS
94432,"    Object of type enum, with the input names and the enumerated values."
94433,
94434,EXAMPLES
94435,"    >>> letters = enum('a','e','i','o','u','b','c','y','z')"
94436,    >>> letters.a < letters.e
94437,    True
94438,
94439,    ## index by property
94440,    >>> letters.a
94441,    a
94442,
94443,    ## index by position
94444,    >>> letters[0]
94445,    a
94446,
94447,"    ## index by name, helpful for bridging string inputs to enum"
94448,    >>> letters['a']
94449,    a
94450,
94451,"    ## sorting by order in the enum() create, not character value"
94452,    >>> letters.u < letters.b
94453,    True
94454,
94455,    ## normal slicing operations available
94456,    >>> letters[-1]
94457,    z
94458,
94459,    ## error since there are not 100 items in enum
94460,    >>> letters[99]
94461,    Traceback (most recent call last):
94462,        ...
94463,    IndexError: tuple index out of range
94464,
94465,    ## error since name does not exist in enum
94466,    >>> letters['ggg']
94467,    Traceback (most recent call last):
94468,        ...
94469,    ValueError: tuple.index(x): x not in tuple
94470,
94471,    ## enums must be named using valid Python identifiers
94472,"    >>> numbers = enum(1,2,3,4)"
94473,    Traceback (most recent call last):
94474,        ...
94475,    AssertionError: Enum values must be string or unicode
94476,
94477,"    >>> a = enum('-a','-b')"
94478,    Traceback (most recent call last):
94479,        ...
94480,    TypeError: Error when calling the metaclass bases
94481,        __slots__ must be identifiers
94482,
94483,    ## create another enum
94484,"    >>> tags = enum('a','b','c')"
94485,    >>> tags.a
94486,    a
94487,    >>> letters.a
94488,    a
94489,
94490,    ## can't compare values from different enums
94491,    >>> letters.a == tags.a
94492,    Traceback (most recent call last):
94493,        ...
94494,    AssertionError: Only values from the same enum are comparable
94495,
94496,    >>> letters.a < tags.a
94497,    Traceback (most recent call last):
94498,        ...
94499,    AssertionError: Only values from the same enum are comparable
94500,
94501,    ## can't update enum after create
94502,    >>> letters.a = 'x'
94503,    Traceback (most recent call last):
94504,        ...
94505,    AttributeError: 'EnumClass' object attribute 'a' is read-only
94506,
94507,    ## can't update enum after create
94508,    >>> del letters.u
94509,    Traceback (most recent call last):
94510,        ...
94511,    AttributeError: 'EnumClass' object attribute 'u' is read-only
94512,
94513,    ## can't have non-unique enum values
94514,"    >>> x = enum('a','b','c','a')"
94515,    Traceback (most recent call last):
94516,        ...
94517,    AssertionError: Enums must not repeat values
94518,
94519,    ## can't have zero enum values
94520,    >>> x = enum()
94521,    Traceback (most recent call last):
94522,        ...
94523,    AssertionError: Empty enums are not supported
94524,
94525,    ## can't have enum values that look like special function names
94526,    ## since these could collide and lead to non-obvious errors
94527,"    >>> x = enum('a','b','c','__cmp__')"
94528,    Traceback (most recent call last):
94529,        ...
94530,    AssertionError: Enum values beginning with __ are not supported
94531,
94532,LIMITATIONS
94533,"    Enum values of unicode type are not preserved, mapped to ASCII instead."
94534,
94535,"    """""""
94536,    ## must have at least one enum value
94537,"    assert names, 'Empty enums are not supported'"
94538,    ## enum values must be strings
94539,"    assert len([i for i in names if not isinstance(i, types.StringTypes) and not \"
94540,"        isinstance(i, unicode)]) == 0, 'Enum values must be string or unicode'"
94541,    ## enum values must not collide with special function names
94542,"    assert len([i for i in names if i.startswith(""__"")]) == 0,\"
94543,        'Enum values beginning with __ are not supported'
94544,    ## each enum value must be unique from all others
94545,"    assert names == uniquify(names), 'Enums must not repeat values'"
94546,
94547,    class EnumClass(object):
94548,"        """""" See parent function for explanation """""""
94549,
94550,        __slots__ = names
94551,
94552,        def __iter__(self):
94553,            return iter(constants)
94554,
94555,        def __len__(self):
94556,            return len(constants)
94557,
94558,"        def __getitem__(self, i):"
94559,            ## this makes xx['name'] possible
94560,"            if isinstance(i, types.StringTypes):"
94561,                i = names.index(i)
94562,            ## handles the more normal xx[0]
94563,            return constants[i]
94564,
94565,        def __repr__(self):
94566,            return 'enum' + str(names)
94567,
94568,        def __str__(self):
94569,            return 'enum ' + str(constants)
94570,
94571,"        def index(self, i):"
94572,            return names.index(i)
94573,
94574,    class EnumValue(object):
94575,"        """""" See parent function for explanation """""""
94576,
94577,        __slots__ = ('__value')
94578,
94579,"        def __init__(self, value):"
94580,            self.__value = value
94581,
94582,        value = property(lambda self: self.__value)
94583,
94584,        enumtype = property(lambda self: enumtype)
94585,
94586,        def __hash__(self):
94587,            return hash(self.__value)
94588,
94589,"        def __cmp__(self, other):"
94590,"            assert self.enumtype is other.enumtype, 'Only values from the same enum are comparable'"
94591,"            return cmp(self.value, other.value)"
94592,
94593,        def __invert__(self):
94594,            return constants[maximum - self.value]
94595,
94596,        def __nonzero__(self):
94597,            ## return bool(self.value)
94598,"            ## Original code led to bool(x[0])==False, not correct"
94599,            return True
94600,
94601,        def __repr__(self):
94602,            return str(names[self.value])
94603,
94604,    maximum = len(names) - 1
94605,    constants = [None] * len(names)
94606,"    for i, each in enumerate(names):"
94607,        val = EnumValue(i)
94608,"        setattr(EnumClass, each, val)"
94609,        constants[i] = val
94610,    constants = tuple(constants)
94611,    enumtype = EnumClass()
94612,    return enumtype
94613,class Animal:    
94614,  TYPE_DOG = 1
94615,  TYPE_CAT = 2
94616,
94617,  type2str = {
94618,"    TYPE_DOG: ""dog"","
94619,"    TYPE_CAT: ""cat"""
94620,  }
94621,
94622,"  def __init__(self, type_):"
94623,    assert type_ in self.type2str.keys()
94624,    self._type = type_
94625,
94626,  def __repr__(self):
94627,"    return ""<%s type=%s>"" % ("
94628,"        self.__class__.__name__, self.type2str[self._type].upper())"
94629,flufl.enum
94630,"def enum(typename, field_names):"
94631,"    ""Create a new enumeration type"""
94632,
94633,"    if isinstance(field_names, str):"
94634,"        field_names = field_names.replace(',', ' ').split()"
94635,"    d = dict((reversed(nv) for nv in enumerate(field_names)), __slots__ = ())"
94636,"    return type(typename, (object,), d)()"
94637,"STATE = enum('STATE', 'GET_QUIZ, GET_VERSE, TEACH')"
94638,enum.Enum
94639,"def enum(*args, **kwargs):"
94640,"    return type('Enum', (), dict((y, x) for x, y in enumerate(args), **kwargs)) "
94641,
94642,"x = enum('POOH', 'TIGGER', 'EEYORE', 'ROO', 'PIGLET', 'RABBIT', 'OWL')"
94643,assert x.POOH == 0
94644,assert x.TIGGER == 1
94645,import new
94646,
94647,"def create(class_name, names):"
94648,    return new.classobj(
94649,"        class_name, (object,), dict((y, x) for x, y in enumerate(names))"
94650,    )
94651,import enumeration
94652,
94653,"Colors = enumeration.create('Colors', ("
94654,"    'red',"
94655,"    'orange',"
94656,"    'yellow',"
94657,"    'green',"
94658,"    'blue',"
94659,"    'violet',"
94660,))
94661,"type(class_name, (object,), dict(...))"
94662,from selenium import webdriver
94663,browser = webdriver.Firefox()
94664,Exception ignored in: <bound method Service.__del__ of <selenium.webdriver.firefox.service.Service object at 0x00000249C0DA1080>>
94665,Traceback (most recent call last):
94666,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py"", line 163, in __del__"
94667,    self.stop()
94668,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py"", line 135, in stop"
94669,    if self.process is None:
94670,AttributeError: 'Service' object has no attribute 'process'
94671,Exception ignored in: <bound method Service.__del__ of <selenium.webdriver.firefox.service.Service object at 0x00000249C0E08128>>
94672,Traceback (most recent call last):
94673,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py"", line 163, in __del__"
94674,    self.stop()
94675,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py"", line 135, in stop"
94676,    if self.process is None:
94677,AttributeError: 'Service' object has no attribute 'process'
94678,Traceback (most recent call last):
94679,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py"", line 64, in start"
94680,"    stdout=self.log_file, stderr=self.log_file)"
94681,"  File ""C:\Python\Python35\lib\subprocess.py"", line 947, in __init__"
94682,"    restore_signals, start_new_session)"
94683,"  File ""C:\Python\Python35\lib\subprocess.py"", line 1224, in _execute_child"
94684,    startupinfo)
94685,FileNotFoundError: [WinError 2] The system cannot find the file specified
94686,Traceback (most recent call last):
94687,"  File ""<pyshell#11>"", line 1, in <module>"
94688,    browser = webdriver.Firefox()
94689,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\firefox\webdriver.py"", line 135, in __init__"
94690,    self.service.start()
94691,"  File ""C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py"", line 71, in start"
94692,"    os.path.basename(self.path), self.start_error_message)"
94693,selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.
94694,geckodriver
94695,brew install geckodriver
94696,chromedriver
94697,geckodriver
94698,PATH
94699,  export PATH=$PATH:/path/to/directory/of/executable/downloaded/in/previous/step
94700,from selenium import webdriver
94701,
94702,browser = webdriver.Firefox()
94703,from selenium import webdriver
94704,from selenium.webdriver.firefox.firefox_binary import FirefoxBinary
94705,
94706,binary = FirefoxBinary('path/to/installed firefox binary')
94707,browser = webdriver.Firefox(firefox_binary=binary)
94708,C:\Users\MYUSERNAME\AppData\Local\Programs\Python\Python39
94709,geckodriver.exe
94710,C:\Python\Python35\selenium
94711,PATH
94712,"os.environ[""PATH""] += os.pathsep + 'path/to/dir/containing/geckodriver/'"
94713,mv geckodriver /usr/local/bin
94714,from selenium import webdriver
94715,driver = webdriver.Firefox(executable_path=r'your\path\geckodriver.exe')
94716,driver.get('http://inventwithpython.com')
94717,export PATH=$PATH:geckodriver
94718,/usr/local/bin
94719,firefox_capabilities = DesiredCapabilities.FIREFOX
94720,firefox_capabilities['marionette'] = True
94721,firefox_capabilities['binary'] = '/usr/bin/firefox'
94722,browser = webdriver.Firefox(capabilities=firefox_capabilities)
94723,pip install webdriver-manager
94724,from selenium import webdriver
94725,from webdriver_manager.firefox import GeckoDriverManager
94726,
94727,driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())
94728,pip3
94729,geckodriver
94730,export PATH=$PATH:/home/embo/.wdm/drivers/geckodriver/linux64/v0.28.0
94731,brew install geckodriver
94732,PATH
94733,pip install selenium==2.53.6
94734,self.driver = webdriver.Firefox(executable_path = 'D:\Selenium_RiponAlWasim\geckodriver-v0.18.0-win64\geckodriver.exe')
94735,C:\Python36\Scripts
94736,self.driver = webdriver.Firefox()
94737,    conda install -c conda-forge geckodriver
94738,export GV=v0.30.0
94739,"wget ""https://github.com/mozilla/geckodriver/releases/download/$GV/geckodriver-$GV-linux64.tar.gz"""
94740,tar xvzf geckodriver-$GV-linux64.tar.gz
94741,chmod +x geckodriver
94742,sudo cp geckodriver /usr/local/bin/
94743,geckodriver-$GV-macos.tar.gz
94744,geckodriver
94745,PATH
94746,geckodriver
94747,geckodriver
94748,"Command 'geckodriver' not found, but it can be installed with:"
94749,
94750,sudo apt install firefox-geckodriver
94751,PATH
94752,sudo apt install firefox-geckodriver
94753,which geckodriver
94754,/usr/bin/geckodriver
94755,geckodriver
94756,1337    geckodriver    INFO    Listening on 127.0.0.1:4444
94757,^C
94758, driver = webdriver.Firefox(executable_path='/your/path/to/geckodriver')
94759,.bash_profile
94760,touch ~/.bash_profile
94761,open ~/.bash_profile
94762,.bash_profile
94763," PATH=""/Users/<your-name>/Downloads/geckodriver:$PATH"""
94764, export PATH
94765,.bash_profile
94766,source ~/.bash_profile
94767,geckodriver
94768,brew install geckodriver
94769,"driver = webdriver.Firefox(executable_path=""/usr/local/bin/geckodriver"")"
94770,import os;
94771,"os.environ[""PATH""] += os.pathsep + r'X:\Folder\of\your\choice';"
94772,
94773,from selenium import webdriver;
94774,browser = webdriver.Firefox();
94775,browser.get('http://localhost:8000')
94776,assert 'Django' in browser.title
94777,sudo apt-get install firefox-geckodriver
94778,sudo apt-get install chromium-chromedriver
94779,from selenium import webdriver
94780,from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
94781,
94782,firefox_capabilities = DesiredCapabilities.FIREFOX
94783,firefox_capabilities['marionette'] = True
94784,
94785,#you probably don't need the next 3 lines they don't seem to work anyway
94786,firefox_capabilities['handleAlerts'] = True
94787,firefox_capabilities['acceptSslCerts'] = True
94788,firefox_capabilities['acceptInsecureCerts'] = True
94789,
94790,# In the next line I'm using a specific Firefox profile because
94791,# I wanted to get around the sec_error_unknown_issuer problems with the new Firefox and Marionette driver
94792,# I create a Firefox profile where I had already made an exception for the site I'm testing
94793,# see https://support.mozilla.org/en-US/kb/profile-manager-create-and-remove-firefox-profiles#w_starting-the-profile-manager
94794,
94795,ffProfilePath = 'D:\Work\PyTestFramework\FirefoxSeleniumProfile'
94796,profile = webdriver.FirefoxProfile(profile_directory=ffProfilePath)
94797,geckoPath = 'D:\Work\PyTestFramework\geckodriver.exe'
94798,"browser = webdriver.Firefox(firefox_profile=profile, capabilities=firefox_capabilities, executable_path=geckoPath)"
94799,browser.get('http://stackoverflow.com')
94800,geckodriver
94801, sudo cp geckodriver /usr/local/bin
94802,touch ~/.bash_profile; open ~/.bash_profile*
94803,# Setting PATH for geckodriver
94804,PATH=“/usr/bin/geckodriver:${PATH}”
94805,export PATH
94806,
94807,# Setting PATH for Selenium Firefox
94808,PATH=“~/Users/yourNamePATH/VEnvPythonInterpreter/lib/python2.7/site-packages/selenium/webdriver/firefox/:${PATH}”
94809,export PATH
94810,
94811,# Setting PATH for executable on Firefox driver
94812,PATH=“/Users/yournamePATH/VEnvPythonInterpreter/lib/python2.7/site-packages/selenium/webdriver/common/service.py:${PATH}”
94813,export PATH*
94814,docker pull selenium/standalone-firefox
94815,docker run --rm -d -p 5555:4444 --shm-size=2g selenium/standalone-firefox
94816,webdriver.Remote
94817,"driver = webdriver.Remote('http://localhost:5555/wd/hub', DesiredCapabilities.FIREFOX)"
94818,"driver.set_window_size(1280, 1024)"
94819,driver.get('https://toolbox.googleapps.com/apps/browserinfo/')
94820,driver.save_screenshot('info.png')
94821,conda install -c conda-forge geckodriver
94822,from webdriverdownloader import GeckoDriverDownloader # vs ChromeDriverDownloader vs OperaChromiumDriverDownloader
94823,gdd = GeckoDriverDownloader()
94824,gdd.download_and_install()
94825,"#gdd.download_and_install(""v0.19.0"")"
94826,from selenium import webdriver
94827,driver = webdriver.Firefox(executable_path=r'C:\\Users\\username\\\bin\\geckodriver.exe')
94828,driver.get('https://www.amazon.com/')
94829,geckodriver <https://github.com/mozilla/geckodriver/releases>
94830,PATH
94831,/usr/bin
94832,/usr/local/bin
94833,from selenium import webdriver
94834,browser = webdriver.Firefox()
94835,"driver.get(""https://www.google.com"")"
94836,brew install geckodriver
94837,pip install webdriver-manager
94838,def download(url):
94839,    firefox_capabilities = DesiredCapabilities.FIREFOX
94840,    firefox_capabilities['marionette'] = True
94841,"    browser = webdriver.Firefox(capabilities=firefox_capabilities,"
94842,                                executable_path=r'/Users/Do01/Documents/crawler-env/geckodriver')
94843,    browser.get(url)
94844,    return browser.page_source
94845,sudo nano /usr/local/lib/python2.7/dist-packages/selenium/webdriver/firefox/webdriver.py
94846,"def __init__(self, firefox_profile=None, firefox_binary=None,"
94847,"             timeout=30, capabilities=None, proxy=None,"
94848,"             executable_path=""/PATH/gecko/geckodriver"","
94849,"             firefox_options=None,"
94850,"             log_path=""/PATH/geckodriver.log""):"
94851,geckodriver
94852,brew install geckodriver
94853,from selenium import webdriver
94854,browser = webdriver.Firefox()
94855,cd script_install
94856,./installer --gecko-driver https://github.com/mozilla/geckodriver/releases/download/v0.18.0/geckodriver-v0.25.0-linux64.tar.gz
94857,C:\Users\Bhavya\Anaconda2\Scripts
94858,"x = numpy.array([1,2,3])"
94859,"y = numpy.array([4,5])"
94860,"array([[1,4],[2,4],[3,4],[1,5],[2,5],[3,5]])"
94861,itertools.product
94862,cartesian_product
94863,cartesian_product
94864,numpy
94865,def cartesian_product(*arrays):
94866,    la = len(arrays)
94867,    dtype = numpy.result_type(*arrays)
94868,"    arr = numpy.empty([len(a) for a in arrays] + [la], dtype=dtype)"
94869,"    for i, a in enumerate(numpy.ix_(*arrays)):"
94870,"        arr[...,i] = a"
94871,"    return arr.reshape(-1, la)"
94872,ix_
94873,ix_
94874,ix_
94875,numpy.result_type
94876,cartesian_product_transpose
94877,cartesian_product
94878,def cartesian_product_transpose(*arrays):
94879,    broadcastable = numpy.ix_(*arrays)
94880,    broadcasted = numpy.broadcast_arrays(*broadcastable)
94881,"    rows, cols = numpy.prod(broadcasted[0].shape), len(broadcasted)"
94882,    dtype = numpy.result_type(*arrays)
94883,
94884,"    out = numpy.empty(rows * cols, dtype=dtype)"
94885,"    start, end = 0, rows"
94886,    for a in broadcasted:
94887,        out[start:end] = a.reshape(-1)
94888,"        start, end = end, end + rows"
94889,"    return out.reshape(cols, rows).T"
94890,cartesian_product
94891,def cartesian_product_simple_transpose(arrays):
94892,    la = len(arrays)
94893,    dtype = numpy.result_type(*arrays)
94894,"    arr = numpy.empty([la] + [len(a) for a in arrays], dtype=dtype)"
94895,"    for i, a in enumerate(numpy.ix_(*arrays)):"
94896,"        arr[i, ...] = a"
94897,"    return arr.reshape(la, -1).T"
94898,cartesian_product_transpose_pp
94899,numpy
94900,import numpy
94901,import itertools
94902,from functools import reduce
94903,
94904,### Two-dimensional products ###
94905,
94906,"def repeat_product(x, y):"
94907,"    return numpy.transpose([numpy.tile(x, len(y)), "
94908,"                            numpy.repeat(y, len(x))])"
94909,
94910,"def dstack_product(x, y):"
94911,"    return numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"
94912,
94913,### Generalized N-dimensional products ###
94914,
94915,def cartesian_product(*arrays):
94916,    la = len(arrays)
94917,    dtype = numpy.result_type(*arrays)
94918,"    arr = numpy.empty([len(a) for a in arrays] + [la], dtype=dtype)"
94919,"    for i, a in enumerate(numpy.ix_(*arrays)):"
94920,"        arr[...,i] = a"
94921,"    return arr.reshape(-1, la)"
94922,
94923,def cartesian_product_transpose(*arrays):
94924,    broadcastable = numpy.ix_(*arrays)
94925,    broadcasted = numpy.broadcast_arrays(*broadcastable)
94926,"    rows, cols = numpy.prod(broadcasted[0].shape), len(broadcasted)"
94927,    dtype = numpy.result_type(*arrays)
94928,
94929,"    out = numpy.empty(rows * cols, dtype=dtype)"
94930,"    start, end = 0, rows"
94931,    for a in broadcasted:
94932,        out[start:end] = a.reshape(-1)
94933,"        start, end = end, end + rows"
94934,"    return out.reshape(cols, rows).T"
94935,
94936,# from https://stackoverflow.com/a/1235363/577088
94937,
94938,"def cartesian_product_recursive(*arrays, out=None):"
94939,    arrays = [numpy.asarray(x) for x in arrays]
94940,    dtype = arrays[0].dtype
94941,
94942,    n = numpy.prod([x.size for x in arrays])
94943,    if out is None:
94944,"        out = numpy.zeros([n, len(arrays)], dtype=dtype)"
94945,
94946,    m = n // arrays[0].size
94947,"    out[:,0] = numpy.repeat(arrays[0], m)"
94948,    if arrays[1:]:
94949,"        cartesian_product_recursive(arrays[1:], out=out[0:m,1:])"
94950,"        for j in range(1, arrays[0].size):"
94951,"            out[j*m:(j+1)*m,1:] = out[0:m,1:]"
94952,    return out
94953,
94954,def cartesian_product_itertools(*arrays):
94955,    return numpy.array(list(itertools.product(*arrays)))
94956,
94957,### Test code ###
94958,
94959,"name_func = [('repeat_product',                                                 "
94960,"              repeat_product),                                                  "
94961,"             ('dstack_product',                                                 "
94962,"              dstack_product),                                                  "
94963,"             ('cartesian_product',                                              "
94964,"              cartesian_product),                                               "
94965,"             ('cartesian_product_transpose',                                    "
94966,"              cartesian_product_transpose),                                     "
94967,"             ('cartesian_product_recursive',                           "
94968,"              cartesian_product_recursive),                            "
94969,"             ('cartesian_product_itertools',                                    "
94970,              cartesian_product_itertools)]
94971,
94972,"def test(in_arrays, test_funcs):"
94973,    global func
94974,    global arrays
94975,    arrays = in_arrays
94976,"    for name, func in test_funcs:"
94977,        print('{}:'.format(name))
94978,        %timeit func(*arrays)
94979,
94980,def test_all(*in_arrays):
94981,"    test(in_arrays, name_func)"
94982,
94983,# `cartesian_product_recursive` throws an 
94984,# unexpected error when used on more than
94985,"# two input arrays, so for now I've removed"
94986,# it from these tests.
94987,
94988,def test_cartesian(*in_arrays):
94989,"    test(in_arrays, name_func[2:4] + name_func[-1:])"
94990,
94991,x10 = [numpy.arange(10)]
94992,x50 = [numpy.arange(50)]
94993,x100 = [numpy.arange(100)]
94994,x500 = [numpy.arange(500)]
94995,x1000 = [numpy.arange(1000)]
94996,In [2]: test_all(*(x100 * 2))
94997,repeat_product:
94998,"67.5 µs ± 633 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
94999,dstack_product:
95000,"67.7 µs ± 1.09 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
95001,cartesian_product:
95002,"33.4 µs ± 558 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
95003,cartesian_product_transpose:
95004,"67.7 µs ± 932 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
95005,cartesian_product_recursive:
95006,"215 µs ± 6.01 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95007,cartesian_product_itertools:
95008,"3.65 ms ± 38.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95009,
95010,In [3]: test_all(*(x500 * 2))
95011,repeat_product:
95012,"1.31 ms ± 9.28 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95013,dstack_product:
95014,"1.27 ms ± 7.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95015,cartesian_product:
95016,"375 µs ± 4.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95017,cartesian_product_transpose:
95018,"488 µs ± 8.88 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95019,cartesian_product_recursive:
95020,"2.21 ms ± 38.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95021,cartesian_product_itertools:
95022,"105 ms ± 1.17 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
95023,
95024,In [4]: test_all(*(x1000 * 2))
95025,repeat_product:
95026,"10.2 ms ± 132 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95027,dstack_product:
95028,"12 ms ± 120 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95029,cartesian_product:
95030,"4.75 ms ± 57.1 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95031,cartesian_product_transpose:
95032,"7.76 ms ± 52.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95033,cartesian_product_recursive:
95034,"13 ms ± 209 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95035,cartesian_product_itertools:
95036,"422 ms ± 7.77 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95037,cartesian_product
95038,len(arrays) > 2
95039,cartesian_product_recursive
95040,In [5]: test_cartesian(*(x100 * 3))
95041,cartesian_product:
95042,"8.8 ms ± 138 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95043,cartesian_product_transpose:
95044,"7.87 ms ± 91.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95045,cartesian_product_itertools:
95046,"518 ms ± 5.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95047,
95048,In [6]: test_cartesian(*(x50 * 4))
95049,cartesian_product:
95050,"169 ms ± 5.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
95051,cartesian_product_transpose:
95052,"184 ms ± 4.32 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
95053,cartesian_product_itertools:
95054,"3.69 s ± 73.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95055,
95056,In [7]: test_cartesian(*(x10 * 6))
95057,cartesian_product:
95058,"26.5 ms ± 449 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)"
95059,cartesian_product_transpose:
95060,"16 ms ± 133 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95061,cartesian_product_itertools:
95062,"728 ms ± 16 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95063,
95064,In [8]: test_cartesian(*(x10 * 7))
95065,cartesian_product:
95066,"650 ms ± 8.14 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95067,cartesian_product_transpose:
95068,"518 ms ± 7.09 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95069,cartesian_product_itertools:
95070,"8.13 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)"
95071,cartesian_product
95072,cartesian_product_transpose
95073,numpy
95074,">>> %timeit cartesian_product_transpose(x500, y500) "
95075,"1000 loops, best of 3: 682 µs per loop"
95076,">>> %timeit cartesian_product(x500, y500)"
95077,"1000 loops, best of 3: 1.55 ms per loop"
95078,numpy
95079,numpy
95080,meshgrid
95081,dstack
95082,tile
95083,repeat
95084,meshgrid
95085,tile
95086,repeat
95087,In [1]: import numpy
95088,"In [2]: x = numpy.array([1,2,3])"
95089,"   ...: y = numpy.array([4,5])"
95090,   ...: 
95091,
95092,"In [3]: [numpy.tile(x, len(y)), numpy.repeat(y, len(x))]"
95093,"Out[3]: [array([1, 2, 3, 1, 2, 3]), array([4, 4, 4, 5, 5, 5])]"
95094,meshgrid
95095,"In [4]: numpy.meshgrid(x, y)"
95096,Out[4]: 
95097,"[array([[1, 2, 3],"
95098,"        [1, 2, 3]]), array([[4, 4, 4],"
95099,"        [5, 5, 5]])]"
95100,"In [5]: xt, xr = numpy.meshgrid(x, y)"
95101,"   ...: [xt.ravel(), xr.ravel()]"
95102,"Out[5]: [array([1, 2, 3, 1, 2, 3]), array([4, 4, 4, 5, 5, 5])]"
95103,meshgrid
95104,dstack
95105,"In [6]: numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"
95106,Out[6]: 
95107,"array([[1, 4],"
95108,"       [2, 4],"
95109,"       [3, 4],"
95110,"       [1, 5],"
95111,"       [2, 5],"
95112,"       [3, 5]])"
95113,meshgrid
95114,dstack
95115,repeat
95116,transpose
95117,meshgrid
95118,dstack
95119,">>> def repeat_product(x, y):"
95120,"...     return numpy.transpose([numpy.tile(x, len(y)), "
95121,"                                numpy.repeat(y, len(x))])"
95122,...
95123,">>> def dstack_product(x, y):"
95124,"...     return numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"
95125,...     
95126,numpy
95127,">>> x, y = numpy.arange(500), numpy.arange(500)"
95128,">>> %timeit repeat_product(x, y)"
95129,"10 loops, best of 3: 62 ms per loop"
95130,">>> %timeit dstack_product(x, y)"
95131,"100 loops, best of 3: 12.2 ms per loop"
95132,"In [7]: x, y = numpy.arange(500), numpy.arange(500)"
95133,"In [8]: %timeit repeat_product(x, y)"
95134,"1.32 ms ± 24.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95135,"In [9]: %timeit dstack_product(x, y)"
95136,"1.26 ms ± 8.47 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95137,tile
95138,repeat
95139,numpy
95140,cartesian
95141,cartesian_product_recursive
95142,cartesian
95143,dstack_prodct
95144,">>> x, y = numpy.arange(1000), numpy.arange(1000)"
95145,">>> %timeit cartesian([x, y])"
95146,"10 loops, best of 3: 25.4 ms per loop"
95147,">>> %timeit dstack_product(x, y)"
95148,"10 loops, best of 3: 66.6 ms per loop"
95149,"In [10]: x, y = numpy.arange(1000), numpy.arange(1000)"
95150,"In [11]: %timeit cartesian([x, y])"
95151,"12.1 ms ± 199 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95152,"In [12]: %timeit dstack_product(x, y)"
95153,"12.7 ms ± 334 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
95154,dstack_product
95155,cartesian
95156,"In [13]: x, y = numpy.arange(100), numpy.arange(100)"
95157,"In [14]: %timeit cartesian([x, y])"
95158,"215 µs ± 4.75 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"
95159,"In [15]: %timeit dstack_product(x, y)"
95160,"65.7 µs ± 1.15 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)"
95161,cartesian_product
95162,dtype=object
95163,arr = np.empty( )
95164,"arrays = [np.array([1,2,3]), ['str1', 'str2']]"
95165,cartesian_product_tranpose
95166,cartesian_product
95167,"%timeit cartesian_product_transpose(x500,y500)"
95168,"1000 loops, best of 3: 682 µs per loop"
95169,"%timeit cartesian_product(x500,y500)"
95170,"1000 loops, best of 3: 1.55 ms per loop"
95171,cartesian_product_transpose
95172,len(arrays) > 2
95173,cartesian_product
95174,cartesian_product_transpose
95175,cartesian_product_transpose
95176,"dtype = np.find_common_type([arr.dtype for arr in arrays], [])"
95177,">>> numpy.transpose([numpy.tile(x, len(y)), numpy.repeat(y, len(x))])"
95178,"array([[1, 4],"
95179,"       [2, 4],"
95180,"       [3, 4],"
95181,"       [1, 5],"
95182,"       [2, 5],"
95183,"       [3, 5]])"
95184,meshgrid
95185,dstack
95186,meshgrid
95187,dstack
95188,"x = numpy.array([1,2,3])"
95189,"y = numpy.array([4,5])"
95190,"[[x0, y0] for x0 in x for y0 in y]"
95191,"[[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]"
95192,"[(x0, y0) for x0 in x for y0 in y]"
95193,"[[(x0, y0) for x0 in x] for y0 in y]"
95194,from functools import reduce
95195,import itertools
95196,import numpy
95197,import perfplot
95198,
95199,
95200,def dstack_product(arrays):
95201,"    return numpy.dstack(numpy.meshgrid(*arrays, indexing=""ij"")).reshape(-1, len(arrays))"
95202,
95203,
95204,# Generalized N-dimensional products
95205,def cartesian_product(arrays):
95206,    la = len(arrays)
95207,"    dtype = numpy.find_common_type([a.dtype for a in arrays], [])"
95208,"    arr = numpy.empty([len(a) for a in arrays] + [la], dtype=dtype)"
95209,"    for i, a in enumerate(numpy.ix_(*arrays)):"
95210,"        arr[..., i] = a"
95211,"    return arr.reshape(-1, la)"
95212,
95213,
95214,def cartesian_product_transpose(arrays):
95215,    broadcastable = numpy.ix_(*arrays)
95216,    broadcasted = numpy.broadcast_arrays(*broadcastable)
95217,"    rows, cols = reduce(numpy.multiply, broadcasted[0].shape), len(broadcasted)"
95218,"    dtype = numpy.find_common_type([a.dtype for a in arrays], [])"
95219,
95220,"    out = numpy.empty(rows * cols, dtype=dtype)"
95221,"    start, end = 0, rows"
95222,    for a in broadcasted:
95223,        out[start:end] = a.reshape(-1)
95224,"        start, end = end, end + rows"
95225,"    return out.reshape(cols, rows).T"
95226,
95227,
95228,# from https://stackoverflow.com/a/1235363/577088
95229,"def cartesian_product_recursive(arrays, out=None):"
95230,    arrays = [numpy.asarray(x) for x in arrays]
95231,    dtype = arrays[0].dtype
95232,
95233,    n = numpy.prod([x.size for x in arrays])
95234,    if out is None:
95235,"        out = numpy.zeros([n, len(arrays)], dtype=dtype)"
95236,
95237,    m = n // arrays[0].size
95238,"    out[:, 0] = numpy.repeat(arrays[0], m)"
95239,    if arrays[1:]:
95240,"        cartesian_product_recursive(arrays[1:], out=out[0:m, 1:])"
95241,"        for j in range(1, arrays[0].size):"
95242,"            out[j * m : (j + 1) * m, 1:] = out[0:m, 1:]"
95243,    return out
95244,
95245,
95246,def cartesian_product_itertools(arrays):
95247,    return numpy.array(list(itertools.product(*arrays)))
95248,
95249,
95250,perfplot.show(
95251,"    setup=lambda n: 2 * (numpy.arange(n, dtype=float),),"
95252,"    n_range=[2 ** k for k in range(13)],"
95253,"    # setup=lambda n: 4 * (numpy.arange(n, dtype=float),),"
95254,"    # n_range=[2 ** k for k in range(6)],"
95255,    kernels=[
95256,"        dstack_product,"
95257,"        cartesian_product,"
95258,"        cartesian_product_transpose,"
95259,"        cartesian_product_recursive,"
95260,"        cartesian_product_itertools,"
95261,"    ],"
95262,"    logx=True,"
95263,"    logy=True,"
95264,"    xlabel=""len(a), len(b)"","
95265,"    equality_check=None,"
95266,)
95267,cartesian_product_transpose_pp
95268,cartesian_product_transpose
95269,cartesion_product
95270,cartesian_product_pp
95271,import numpy
95272,import numpy as np
95273,from functools import reduce
95274,import itertools
95275,import timeit
95276,import perfplot
95277,
95278,def dstack_product(arrays):
95279,    return numpy.dstack(
95280,"        numpy.meshgrid(*arrays, indexing='ij')"
95281,"        ).reshape(-1, len(arrays))"
95282,
95283,def cartesian_product_transpose_pp(arrays):
95284,    la = len(arrays)
95285,    dtype = numpy.result_type(*arrays)
95286,"    arr = numpy.empty((la, *map(len, arrays)), dtype=dtype)"
95287,"    idx = slice(None), *itertools.repeat(None, la)"
95288,"    for i, a in enumerate(arrays):"
95289,"        arr[i, ...] = a[idx[:la-i]]"
95290,"    return arr.reshape(la, -1).T"
95291,
95292,def cartesian_product(arrays):
95293,    la = len(arrays)
95294,    dtype = numpy.result_type(*arrays)
95295,"    arr = numpy.empty([len(a) for a in arrays] + [la], dtype=dtype)"
95296,"    for i, a in enumerate(numpy.ix_(*arrays)):"
95297,"        arr[...,i] = a"
95298,"    return arr.reshape(-1, la)"
95299,
95300,def cartesian_product_transpose(arrays):
95301,    broadcastable = numpy.ix_(*arrays)
95302,    broadcasted = numpy.broadcast_arrays(*broadcastable)
95303,"    rows, cols = numpy.prod(broadcasted[0].shape), len(broadcasted)"
95304,    dtype = numpy.result_type(*arrays)
95305,
95306,"    out = numpy.empty(rows * cols, dtype=dtype)"
95307,"    start, end = 0, rows"
95308,    for a in broadcasted:
95309,        out[start:end] = a.reshape(-1)
95310,"        start, end = end, end + rows"
95311,"    return out.reshape(cols, rows).T"
95312,
95313,"from itertools import accumulate, repeat, chain"
95314,
95315,"def cartesian_product_pp(arrays, out=None):"
95316,    la = len(arrays)
95317,"    L = *map(len, arrays), la"
95318,    dtype = numpy.result_type(*arrays)
95319,"    arr = numpy.empty(L, dtype=dtype)"
95320,"    arrs = *accumulate(chain((arr,), repeat(0, la-1)), np.ndarray.__getitem__),"
95321,"    idx = slice(None), *itertools.repeat(None, la-1)"
95322,"    for i in range(la-1, 0, -1):"
95323,"        arrs[i][..., i] = arrays[i][idx[:la-i]]"
95324,        arrs[i-1][1:] = arrs[i]
95325,"    arr[..., 0] = arrays[0][idx]"
95326,"    return arr.reshape(-1, la)"
95327,
95328,def cartesian_product_itertools(arrays):
95329,    return numpy.array(list(itertools.product(*arrays)))
95330,
95331,
95332,# from https://stackoverflow.com/a/1235363/577088
95333,"def cartesian_product_recursive(arrays, out=None):"
95334,    arrays = [numpy.asarray(x) for x in arrays]
95335,    dtype = arrays[0].dtype
95336,
95337,    n = numpy.prod([x.size for x in arrays])
95338,    if out is None:
95339,"        out = numpy.zeros([n, len(arrays)], dtype=dtype)"
95340,
95341,    m = n // arrays[0].size
95342,"    out[:, 0] = numpy.repeat(arrays[0], m)"
95343,    if arrays[1:]:
95344,"        cartesian_product_recursive(arrays[1:], out=out[0:m, 1:])"
95345,"        for j in range(1, arrays[0].size):"
95346,"            out[j*m:(j+1)*m, 1:] = out[0:m, 1:]"
95347,    return out
95348,
95349,### Test code ###
95350,if False:
95351,"  perfplot.save('cp_4el_high.png',"
95352,"    setup=lambda n: n*(numpy.arange(4, dtype=float),),"
95353,"                n_range=list(range(6, 11)),"
95354,    kernels=[
95355,"        dstack_product,"
95356,"        cartesian_product_recursive,"
95357,"        cartesian_product,"
95358,"#        cartesian_product_transpose,"
95359,"        cartesian_product_pp,"
95360,"#        cartesian_product_transpose_pp,"
95361,"        ],"
95362,"    logx=False,"
95363,"    logy=True,"
95364,"    xlabel='#factors',"
95365,    equality_check=None
95366,    )
95367,else:
95368,"  perfplot.save('cp_2f_T.png',"
95369,"    setup=lambda n: 2*(numpy.arange(n, dtype=float),),"
95370,"    n_range=[2**k for k in range(5, 11)],"
95371,    kernels=[
95372,"#        dstack_product,"
95373,"#        cartesian_product_recursive,"
95374,"#        cartesian_product,"
95375,"        cartesian_product_transpose,"
95376,"#        cartesian_product_pp,"
95377,"        cartesian_product_transpose_pp,"
95378,"        ],"
95379,"    logx=True,"
95380,"    logy=True,"
95381,"    xlabel='length of each factor',"
95382,    equality_check=None
95383,    )
95384,arrays
95385,MemoryError
95386,np.stack
95387,import numpy as np
95388,
95389,def cartesian_product(*arrays):
95390,    ndim = len(arrays)
95391,"    return (np.stack(np.meshgrid(*arrays), axis=-1)"
95392,"              .reshape(-1, ndim))"
95393,
95394,"a = np.array([1,2])"
95395,"b = np.array([10,20])"
95396,"cartesian_product(a,b)"
95397,
95398,# output:
95399,"# array([[ 1, 10],"
95400,"#        [ 2, 10],"
95401,"#        [ 1, 20],"
95402,"#        [ 2, 20]])  "
95403,axis=-1
95404,axis=ndim
95405,itertools
95406,from sklearn.utils.extmath import cartesian
95407,"product = cartesian((x,y))"
95408,"product = cartesian((y,x))[:, ::-1]"
95409,numpy.repeat()
95410,import numpy as np
95411,
95412,def cartesian_product(*args: np.ndarray) -> np.ndarray:
95413,"    """""""
95414,    Produce the cartesian product of arbitrary length vectors.
95415,
95416,    Parameters
95417,    ----------
95418,    np.ndarray args
95419,        vector of points of interest in each dimension
95420,
95421,    Returns
95422,    -------
95423,    np.ndarray
95424,        the cartesian product of size [m x n] wherein:
95425,            m = prod([len(a) for a in args])
95426,            n = len(args)
95427,"    """""""
95428,"    for i, a in enumerate(args):"
95429,"        assert a.ndim == 1, ""arg {:d} is not rank 1"".format(i)"
95430,"    return np.concatenate([np.reshape(xi, [-1, 1]) for xi in np.meshgrid(*args)], axis=1)"
95431,import tensorflow as tf
95432,
95433,def cartesian_product(*args: tf.Tensor) -> tf.Tensor:
95434,"    """""""
95435,    Produce the cartesian product of arbitrary length vectors.
95436,
95437,    Parameters
95438,    ----------
95439,    tf.Tensor args
95440,        vector of points of interest in each dimension
95441,
95442,    Returns
95443,    -------
95444,    tf.Tensor
95445,        the cartesian product of size [m x n] wherein:
95446,            m = prod([len(a) for a in args])
95447,            n = len(args)
95448,"    """""""
95449,"    for i, a in enumerate(args):"
95450,"        tf.assert_rank(a, 1, message=""arg {:d} is not rank 1"".format(i))"
95451,"    return tf.concat([tf.reshape(xi, [-1, 1]) for xi in tf.meshgrid(*args)], axis=1)"
95452,import numpy
95453,"def join_2d(a, b):"
95454,    assert a.dtype == b.dtype
95455,"    a_part = numpy.tile(a, (len(b), 1))"
95456,"    b_part = numpy.repeat(b, len(a), axis=0)"
95457,"    return numpy.hstack((a_part, b_part))"
95458,import numpy
95459,import datetime
95460,a = np.arange(1000)
95461,b = np.arange(200)
95462,
95463,start = datetime.datetime.now()
95464,
95465,"foo = (item for sublist in [list(map(lambda x: (x,i),a)) for i in b] for item in sublist)"
95466,
95467,print (list(foo))
95468,
95469,print ('execution time: {} s'.format((datetime.datetime.now() - start).total_seconds()))
95470,"[(0, 0), (1, 0), ...,(998, 199), (999, 199)]"
95471,execution time: 1.253567 s
95472,a = np.arange(1000)
95473,b = np.arange(200)
95474,
95475,start = datetime.datetime.now()
95476,
95477,"foo = ((x,y) for x in a for y in b)"
95478,
95479,print (list(foo))
95480,
95481,print ('execution time: {} s'.format((datetime.datetime.now() - start).total_seconds()))
95482,"[(0, 0), (1, 0), ...,(998, 199), (999, 199)]"
95483,execution time: 1.187415 s
95484,execution time: 0.079208 s
95485,execution time: 0.007093 s
95486,a = np.arange(1000)
95487,b = np.arange(200)
95488,
95489,start = datetime.datetime.now()
95490,
95491,"foo = np.dot(np.asmatrix([[i,0] for i in a]), np.asmatrix([[i,0] for i in b]).T)"
95492,
95493,print (foo)
95494,
95495,print ('execution time: {} s'.format((datetime.datetime.now() - start).total_seconds()))
95496," [[     0      0      0 ...,      0      0      0]"
95497," [     0      1      2 ...,    197    198    199]"
95498," [     0      2      4 ...,    394    396    398]"
95499," ..., "
95500," [     0    997   1994 ..., 196409 197406 198403]"
95501," [     0    998   1996 ..., 196606 197604 198602]"
95502," [     0    999   1998 ..., 196803 197802 198801]]"
95503,execution time: 0.003869 s
95504,execution time: 0.003083 s
95505,"foo = a[:,None]*b"
95506,print(foo)
95507,">>> a, b = np.array([1,2,3]), np.array([10,20,30])"
95508,">>> a[None,:] + b[:,None]"
95509,"array([[11, 12, 13],"
95510,"       [21, 22, 23],"
95511,"       [31, 32, 33]])"
95512,dtype
95513,float
95514,"(a[:, None, None] + 1j * b[None, :, None]).view(float)"
95515,from itertools import product
95516,import numpy as np
95517,
95518,"x = np.array([1, 2, 3])"
95519,"y = np.array([4, 5])"
95520,"cart_prod = np.array(list(product(*[x, y])),dtype='int32')"
95521,itertools.product
95522,cartesian_product
95523,import numba as nb
95524,import numpy as np
95525,from typing import List
95526,
95527,
95528,"@nb.njit(nb.types.Tuple((nb.int32[:, :],"
95529,"                         nb.int32[:]))(nb.int32[:],"
95530,"                                       nb.int32[:],"
95531,"                                       nb.int64, nb.int64))"
95532,"def cproduct(sizes: np.ndarray, current_tuple: np.ndarray, start_idx: int, end_idx: int):"
95533,"    """"""Generates ids tuples from start_id to end_id"""""""
95534,    assert len(sizes) >= 2
95535,    assert start_idx < end_idx
95536,
95537,"    tuples = np.zeros((end_idx - start_idx, len(sizes)), dtype=np.int32)"
95538,    tuple_idx = 0
95539,    # stores the current combination
95540,    current_tuple = current_tuple.copy()
95541,    while tuple_idx < end_idx - start_idx:
95542,        tuples[tuple_idx] = current_tuple
95543,        current_tuple[0] += 1
95544,        # using a condition here instead of including this in the inner loop
95545,"        # to gain a bit of speed: this is going to be tested each iteration,"
95546,        # and starting a loop to have it end right away is a bit silly
95547,        if current_tuple[0] == sizes[0]:
95548,            # the reset to 0 and subsequent increment amount to carrying
95549,"            # the number to the higher ""power"""
95550,            current_tuple[0] = 0
95551,            current_tuple[1] += 1
95552,"            for i in range(1, len(sizes) - 1):"
95553,                if current_tuple[i] == sizes[i]:
95554,"                    # same as before, but in a loop, since this is going"
95555,                    # to get called less often
95556,                    current_tuple[i + 1] += 1
95557,                    current_tuple[i] = 0
95558,                else:
95559,                    break
95560,        tuple_idx += 1
95561,"    return tuples, current_tuple"
95562,
95563,
95564,"def chunked_cartesian_product_ids(sizes: List[int], chunk_size: int):"
95565,"    """"""Just generates chunks of the cartesian product of the ids of each"
95566,"    input arrays (thus, we just need their sizes here, not the actual arrays)"""""""
95567,    prod = np.prod(sizes)
95568,
95569,    # putting the largest number at the front to more efficiently make use
95570,    # of the cproduct numba function
95571,"    sizes = np.array(sizes, dtype=np.int32)"
95572,    sorted_idx = np.argsort(sizes)[::-1]
95573,    sizes = sizes[sorted_idx]
95574,    if chunk_size > prod:
95575,"        chunk_bounds = (np.array([0, prod])).astype(np.int64)"
95576,    else:
95577,"        num_chunks = np.maximum(np.ceil(prod / chunk_size), 2).astype(np.int32)"
95578,        chunk_bounds = (np.arange(num_chunks + 1) * chunk_size).astype(np.int64)
95579,        chunk_bounds[-1] = prod
95580,"    current_tuple = np.zeros(len(sizes), dtype=np.int32)"
95581,"    for start_idx, end_idx in zip(chunk_bounds[:-1], chunk_bounds[1:]):"
95582,"        tuples, current_tuple = cproduct(sizes, current_tuple, start_idx, end_idx)"
95583,        # re-arrange columns to match the original order of the sizes list
95584,        # before yielding
95585,"        yield tuples[:, np.argsort(sorted_idx)]"
95586,
95587,
95588,"def chunked_cartesian_product(*arrays, chunk_size=2 ** 25):"
95589,"    """"""Returns chunks of the full cartesian product, with arrays of shape"
95590,"    (chunk_size, n_arrays). The last chunk will obviously have the size of the"
95591,"    remainder"""""""
95592,    array_lengths = [len(array) for array in arrays]
95593,"    for array_ids_chunk in chunked_cartesian_product_ids(array_lengths, chunk_size):"
95594,"        slices_lists = [arrays[i][array_ids_chunk[:, i]] for i in range(len(arrays))]"
95595,"        yield np.vstack(slices_lists).swapaxes(0,1)"
95596,
95597,
95598,def cartesian_product(*arrays):
95599,"    """"""Actual cartesian product, not chunked, still fast"""""""
95600,    total_prod = np.prod([len(array) for array in arrays])
95601,"    return next(chunked_cartesian_product(*arrays, total_prod))"
95602,
95603,
95604,"a = np.arange(0, 3)"
95605,"b = np.arange(8, 10)"
95606,"c = np.arange(13, 16)"
95607,"for cartesian_tuples in chunked_cartesian_product(*[a, b, c], chunk_size=5):"
95608,    print(cartesian_tuples)
95609,[[ 0  8 13]
95610, [ 0  8 14]
95611, [ 0  8 15]
95612, [ 1  8 13]
95613, [ 1  8 14]]
95614,[[ 1  8 15]
95615, [ 2  8 13]
95616, [ 2  8 14]
95617, [ 2  8 15]
95618, [ 0  9 13]]
95619,[[ 0  9 14]
95620, [ 0  9 15]
95621, [ 1  9 13]
95622, [ 1  9 14]
95623, [ 1  9 15]]
95624,[[ 2  9 13]
95625, [ 2  9 14]
95626, [ 2  9 15]]
95627,njitted
95628,">>>x1, y1 = np.meshgrid(x, y)"
95629,">>>np.c_[x1.ravel(), y1.ravel()]"
95630,"array([[1, 4],"
95631,"       [2, 4],"
95632,"       [3, 4],"
95633,"       [1, 5],"
95634,"       [2, 5],"
95635,"       [3, 5]])"
95636,.meshgrid
95637,.ravel()
95638,.c_
95639,">>> x, y = np.meshgrid(x, y)"
95640,">>> np.concatenate([x.flatten().reshape(-1,1), y.flatten().reshape(-1,1)], axis=1)"
95641,input
95642,raw_input()
95643,numbers = input()
95644,print(len(numbers))
95645,"[1,2,3]"
95646,1 2 3
95647,7
95648,5
95649,re.findall
95650,a = [int(x) for x in input().split()]
95651,>>> a = [int(x) for x in input().split()]
95652,3 4 5
95653,>>> a
95654,"[3, 4, 5]"
95655,>>> 
95656,int(x)
95657,string(x)
95658,input()
95659,split()
95660,[f(x) for x in iter]
95661,int
95662,s = input()
95663,"numbers = list(map(int, s.split()))"
95664,s = raw_input()
95665,"numbers = map(int, s.split())"
95666,s.split()
95667,shlex.split(s)
95668,eval(a_string)
95669,literal_eval
95670,ast
95671,raw_input()
95672,input()
95673,eval(raw_input())
95674,input()
95675,raw_input()
95676,eval(input())
95677,.split()
95678,"numbers = raw_input().split("","")"
95679,print len(numbers)
95680,"numbers = [int(n, 10) for n in raw_input().split("","")]"
95681,print len(numbers)
95682,eval
95683,memo=[] 
95684,for i in range (10):
95685,"    x=int(input(""enter no. \n"")) "
95686,"    memo.insert(i,x)"
95687,    i+=1
95688,print(memo) 
95689,input
95690,num = int(input('Size of elements : '))
95691,arr = list()
95692,
95693,for i in range(num) :
95694,  ele  = int(input())
95695,  arr.append(ele)
95696,
95697,print(arr)
95698,import json
95699,
95700,"str_list = raw_input(""Enter in a list: "")"
95701,my_list = json.loads(str_list)
95702,"[2, 34, 5.6, 90]"
95703,x=input()
95704,"[1,3,5,'aA','8as']"
95705,print len(x)
95706,print x[3]
95707,'aA'
95708,a=[]
95709,b=int(input())
95710,for i in range(b):
95711,    c=int(input())
95712,    a.append(c)
95713,"L=list(map(int,input(),split()))"
95714,a = [int(x) for x in input()]
95715,a
95716,11111
95717,"[1, 1, 1, 1, 1]"
95718,"1, 11, 111"
95719,"11, 1, 111"
95720,"1, 1, 1, 1, 1, 1"
95721,"n=int(raw_input(""Enter length of the list""))"
95722,l1=[]
95723,for i in range(n):
95724,    a=raw_input()
95725,    if(a.isdigit()):
95726,"        l1.insert(i,float(a)) #statement1"
95727,    else:
95728,"        l1.insert(i,a)        #statement2"
95729,from selenium import webdriver
95730,driver.get('http://sugang.korea.ac.kr')
95731,driver.implicitly_wait(30)
95732,driver.find_element_by_name('id').send_keys('abc')
95733,driver.find_element_by_name('pw').send_keys('cdef')
95734,frame
95735,from selenium import webdriver
95736,from selenium.webdriver.support.ui import WebDriverWait
95737,from selenium.webdriver.support import expected_conditions as EC
95738,from selenium.webdriver.common.by import By
95739,
95740,driver = webdriver.Firefox(executable_path=r'C:\\Utility\\BrowserDrivers\\geckodriver.exe')
95741,"driver.get(""http://sugang.korea.ac.kr"")"
95742,"WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.NAME,""firstF"")))"
95743,"WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ""input.input_login[name='id']""))).send_keys('abc')"
95744,"driver.find_element_by_css_selector(""input.input_login[name='pw']"").send_keys(""cdef"")"
95745,from selenium.webdriver.support import expected_conditions as EC
95746,
95747,"userNameElement= WebDriverWait(driver, 2).until("
95748,"EC.presence_of_element_located((By.NAME, ""id""))"
95749,userNameElement.send_keys('abc')
95750,
95751,"pwdElement= WebDriverWait(driver, 2).until("
95752,"EC.presence_of_element_located((By.NAME, ""pwd""))"
95753,pwdElement.send_keys('cdef')
95754,from selenium import webdriver
95755,from selenium.webdriver.common.by import By
95756,from selenium.webdriver.support.ui import WebDriverWait
95757,from selenium.webdriver.support import expected_conditions as EC
95758,
95759,"url =""http://sugang.korea.ac.kr"""
95760,driver = webdriver.Chrome()
95761,driver.get(url)
95762,"WebDriverWait(driver,5).until(EC.visibility_of_element_located((By.CSS_SELECTOR,'[name=firstF]')))"
95763,driver.switch_to.frame(driver.find_element_by_css_selector('[name=firstF]'))
95764,"WebDriverWait(driver,5).until(EC.visibility_of_element_located((By.ID,'id'))).send_keys('abc')"
95765,driver.find_element_by_id('pw').send_keys('def')
95766,driver.find_element_by_id('loginButton').click()
95767,"<input name=""id"">"
95768,"driver.find_element_by_id(""id"")"
95769,"<div class=""form-group"">"
95770,"    <input class=""form-control"" name=""username"">"
95771,</div>
95772,"<div class=""form-group"">"
95773,"    <input class=""form-control"" name=""password"" type=""password"">"
95774,</div>
95775,"<button id=""btn-login""  type=""submit"">Enter</button>"
95776,"username = driver.find_element_by_name(""username"")"
95777,"password = driver.find_element_by_name(""password"")"
95778,
95779,"username.send_keys(""your_username"")"
95780,"password.send_keys(""your_password"")"
95781,
95782,"driver.find_element_by_id(""btn-login"").click()"
95783,"temp1 = ['One', 'Two', 'Three', 'Four']"
95784,"temp2 = ['One', 'Two']"
95785,"temp3 = ['Three', 'Four']"
95786,"temp1 = ['One', 'One', 'One']"
95787,temp2 = ['One']
95788,"['One', 'One']"
95789,[]
95790,temp1
95791,temp2
95792,In [5]: list(set(temp1) - set(temp2))
95793,"Out[5]: ['Four', 'Three']"
95794,"In [5]: set([1, 2]) - set([2, 3])"
95795,Out[5]: set([1]) 
95796,"set([1, 3])"
95797,"set([1, 3])"
95798,"set([1, 2]).symmetric_difference(set([2, 3]))"
95799,"list(set(temp1) - set(temp2)) == ['Four', 'Three']"
95800,"list(set(temp1) - set(temp2)) == ['Three', 'Four']"
95801,"a=[1, 1, 1, 1, 2, 2], b=[1, 1, 2, 2]"
95802,s = set(temp2)
95803,temp3 = [x for x in temp1 if x not in s]
95804,import timeit
95805,init = 'temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]'
95806,"print timeit.timeit('list(set(temp1) - set(temp2))', init, number = 100000)"
95807,"print timeit.timeit('s = set(temp2);[x for x in temp1 if x not in s]', init, number = 100000)"
95808,"print timeit.timeit('[item for item in temp1 if item not in temp2]', init, number = 100000)"
95809,4.34620224079 # ars' answer
95810,4.2770634955  # This answer
95811,30.7715615392 # matt b's answer
95812,init = '''
95813,temp1 = [str(i) for i in range(100000)]
95814,temp2 = [str(i * 2) for i in range(50)]
95815,'''
95816,11.3836875916 # ars' answer
95817,3.63890368748 # this answer (3 times faster!)
95818,37.7445402279 # matt b's answer
95819,set(temp1) ^ set(temp2)
95820,temp2
95821,temp1
95822,temp3 = [item for item in temp1 if item not in temp2]
95823,temp2
95824,item not in temp2
95825,item not in set(temp2)
95826,temp2
95827,pip install deepdiff
95828,>>> from deepdiff import DeepDiff
95829,>>> from pprint import pprint
95830,>>> from __future__ import print_function # In case running on Python 2
95831,">>> t1 = {1:1, 2:2, 3:3}"
95832,>>> t2 = t1
95833,">>> print(DeepDiff(t1, t2))"
95834,{}
95835,">>> t1 = {1:1, 2:2, 3:3}"
95836,">>> t2 = {1:1, 2:""2"", 3:3}"
95837,">>> pprint(DeepDiff(t1, t2), indent=2)"
95838,"{ 'type_changes': { 'root[2]': { 'newtype': <class 'str'>,"
95839,"                                 'newvalue': '2',"
95840,"                                 'oldtype': <class 'int'>,"
95841,                                 'oldvalue': 2}}}
95842,">>> t1 = {1:1, 2:2, 3:3}"
95843,">>> t2 = {1:1, 2:4, 3:3}"
95844,">>> pprint(DeepDiff(t1, t2), indent=2)"
95845,"{'values_changed': {'root[2]': {'newvalue': 4, 'oldvalue': 2}}}"
95846,">>> t1 = {1:1, 2:2, 3:3, 4:4}"
95847,">>> t2 = {1:1, 2:4, 3:3, 5:5, 6:6}"
95848,">>> ddiff = DeepDiff(t1, t2)"
95849,>>> pprint (ddiff)
95850,"{'dic_item_added': ['root[5]', 'root[6]'],"
95851," 'dic_item_removed': ['root[4]'],"
95852," 'values_changed': {'root[2]': {'newvalue': 4, 'oldvalue': 2}}}"
95853,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":""world""}}"
95854,">>> t2 = {1:1, 2:4, 3:3, 4:{""a"":""hello"", ""b"":""world!""}}"
95855,">>> ddiff = DeepDiff(t1, t2)"
95856,">>> pprint (ddiff, indent = 2)"
95857,"{ 'values_changed': { 'root[2]': {'newvalue': 4, 'oldvalue': 2},"
95858,"                      ""root[4]['b']"": { 'newvalue': 'world!',"
95859,                                        'oldvalue': 'world'}}}
95860,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":""world!\nGoodbye!\n1\n2\nEnd""}}"
95861,">>> t2 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":""world\n1\n2\nEnd""}}"
95862,">>> ddiff = DeepDiff(t1, t2)"
95863,">>> pprint (ddiff, indent = 2)"
95864,"{ 'values_changed': { ""root[4]['b']"": { 'diff': '--- \n'"
95865,                                                '+++ \n'
95866,"                                                '@@ -1,5 +1,4 @@\n'"
95867,                                                '-world!\n'
95868,                                                '-Goodbye!\n'
95869,                                                '+world\n'
95870,                                                ' 1\n'
95871,                                                ' 2\n'
95872,"                                                ' End',"
95873,"                                        'newvalue': 'world\n1\n2\nEnd',"
95874,                                        'oldvalue': 'world!\n'
95875,                                                    'Goodbye!\n'
95876,                                                    '1\n'
95877,                                                    '2\n'
95878,                                                    'End'}}}
95879,
95880,>>> 
95881,">>> print (ddiff['values_changed'][""root[4]['b']""][""diff""])"
95882,--- 
95883,+++ 
95884,"@@ -1,5 +1,4 @@"
95885,-world!
95886,-Goodbye!
95887,+world
95888, 1
95889, 2
95890, End
95891,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2, 3]}}"
95892,">>> t2 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":""world\n\n\nEnd""}}"
95893,">>> ddiff = DeepDiff(t1, t2)"
95894,">>> pprint (ddiff, indent = 2)"
95895,"{ 'type_changes': { ""root[4]['b']"": { 'newtype': <class 'str'>,"
95896,"                                      'newvalue': 'world\n\n\nEnd',"
95897,"                                      'oldtype': <class 'list'>,"
95898,"                                      'oldvalue': [1, 2, 3]}}}"
95899,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2, 3, 4]}}"
95900,">>> t2 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2]}}"
95901,">>> ddiff = DeepDiff(t1, t2)"
95902,">>> pprint (ddiff, indent = 2)"
95903,"{'iterable_item_removed': {""root[4]['b'][2]"": 3, ""root[4]['b'][3]"": 4}}"
95904,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2, 3]}}"
95905,">>> t2 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 3, 2, 3]}}"
95906,">>> ddiff = DeepDiff(t1, t2)"
95907,">>> pprint (ddiff, indent = 2)"
95908,"{ 'iterable_item_added': {""root[4]['b'][3]"": 3},"
95909,"  'values_changed': { ""root[4]['b'][1]"": {'newvalue': 3, 'oldvalue': 2},"
95910,"                      ""root[4]['b'][2]"": {'newvalue': 2, 'oldvalue': 3}}}"
95911,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2, 3]}}"
95912,">>> t2 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 3, 2, 3]}}"
95913,">>> ddiff = DeepDiff(t1, t2, ignore_order=True)"
95914,>>> print (ddiff)
95915,{}
95916,">>> t1 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2, {1:1, 2:2}]}}"
95917,">>> t2 = {1:1, 2:2, 3:3, 4:{""a"":""hello"", ""b"":[1, 2, {1:3}]}}"
95918,">>> ddiff = DeepDiff(t1, t2)"
95919,">>> pprint (ddiff, indent = 2)"
95920,"{ 'dic_item_removed': [""root[4]['b'][2][2]""],"
95921,"  'values_changed': {""root[4]['b'][2][1]"": {'newvalue': 3, 'oldvalue': 1}}}"
95922,">>> t1 = {1, 2, 8}"
95923,">>> t2 = {1, 2, 3, 5}"
95924,">>> ddiff = DeepDiff(t1, t2)"
95925,">>> pprint (DeepDiff(t1, t2))"
95926,"{'set_item_added': ['root[3]', 'root[5]'], 'set_item_removed': ['root[8]']}"
95927,>>> from collections import namedtuple
95928,">>> Point = namedtuple('Point', ['x', 'y'])"
95929,">>> t1 = Point(x=11, y=22)"
95930,">>> t2 = Point(x=11, y=23)"
95931,">>> pprint (DeepDiff(t1, t2))"
95932,"{'values_changed': {'root.y': {'newvalue': 23, 'oldvalue': 22}}}"
95933,>>> class ClassA(object):
95934,...     a = 1
95935,"...     def __init__(self, b):"
95936,...         self.b = b
95937,... 
95938,>>> t1 = ClassA(1)
95939,>>> t2 = ClassA(2)
95940,>>> 
95941,">>> pprint(DeepDiff(t1, t2))"
95942,"{'values_changed': {'root.b': {'newvalue': 2, 'oldvalue': 1}}}"
95943,">>> t2.c = ""new attribute"""
95944,">>> pprint(DeepDiff(t1, t2))"
95945,"{'attribute_added': ['root.c'],"
95946," 'values_changed': {'root.b': {'newvalue': 2, 'oldvalue': 1}}}"
95947,temp3 = set(temp1) - set(temp2)
95948,"def diff(list1, list2):"
95949,    c = set(list1).union(set(list2))  # or c = set(list1) | set(list2)
95950,    d = set(list1).intersection(set(list2))  # or d = set(list1) & set(list2)
95951,    return list(c - d)
95952,"def diff(list1, list2):"
95953,    return list(set(list1).symmetric_difference(set(list2)))  # or return list(set(list1) ^ set(list2))
95954,"diff(temp2, temp1)"
95955,"diff(temp1, temp2)"
95956,"['Four', 'Three']"
95957,"list_a = [1,2,3]"
95958,"list_b = [2,3]"
95959,print set(list_a).difference(set(list_b))
95960,set([1])
95961,print list(set(list_a).difference(set(list_b)))
95962,temp3 = tuple(set(temp1) - set(temp2))
95963,"#edited using @Mark Byers idea. If you accept this one as answer, just accept his instead."
95964,temp3 = tuple(x for x in temp1 if x not in set(temp2))
95965,diff
95966,bash
95967,SequenceMather
95968,difflib
95969,diff
95970,a = 'A quick fox jumps the lazy dog'.split()
95971,b = 'A quick brown mouse jumps over the dog'.split()
95972,
95973,from difflib import SequenceMatcher
95974,
95975,"for tag, i, j, k, l in SequenceMatcher(None, a, b).get_opcodes():"
95976,"  if tag == 'equal': print('both have', a[i:j])"
95977,"  if tag in ('delete', 'replace'): print('  1st has', a[i:j])"
95978,"  if tag in ('insert', 'replace'): print('  2nd has', b[k:l])"
95979,"both have ['A', 'quick']"
95980,  1st has ['fox']
95981,"  2nd has ['brown', 'mouse']"
95982,both have ['jumps']
95983,  2nd has ['over']
95984,both have ['the']
95985,  1st has ['lazy']
95986,both have ['dog']
95987,diff
95988,"a = [1,2,3,4,5]"
95989,"b = [5,4,3,2,1]"
95990,"  2nd has [5, 4, 3, 2]"
95991,both have [1]
95992,"  1st has [2, 3, 4, 5]"
95993,Counter
95994,from collections import Counter
95995,
95996,"lst1 = ['One', 'Two', 'Three', 'Four']"
95997,"lst2 = ['One', 'Two']"
95998,
95999,c1 = Counter(lst1)
96000,c2 = Counter(lst2)
96001,diff = list((c1 - c2).elements())
96002,diff = list((Counter(lst1) - Counter(lst2)).elements())
96003,"['Three', 'Four']"
96004,list(...)
96005,"lst1 = ['One', 'Two', 'Two', 'Two', 'Three', 'Three', 'Four']"
96006,"lst2 = ['One', 'Two']"
96007,"['Two', 'Two', 'Three', 'Three', 'Four']"
96008,"list(itertools.filterfalse(set(temp2).__contains__, temp1))"
96009,from itertools import filterfalse
96010,pathlib
96011,import pathlib
96012,
96013,
96014,"temp1 = [""One"", ""Two"", ""Three"", ""Four""]"
96015,"temp2 = [""One"", ""Two""]"
96016,
96017,p = pathlib.Path(*temp1)
96018,r = p.relative_to(*temp2)
96019,list(r.parts)
96020,"# ['Three', 'Four']"
96021,itertools.zip_longest
96022,import itertools as it
96023,
96024,
96025,"[x for x, y in it.zip_longest(temp1, temp2) if x != y]"
96026,"# ['Three', 'Four']"
96027,temp1
96028,temp2
96029,temp2
96030,temp2
96031,temp1
96032,"def get_diff(a: list, b: list) -> list:"
96033,    return list(set(a) ^ set(b))
96034,"def diff(a, b):"
96035,    xa = [i for i in set(a) if i not in b]
96036,    xb = [i for i in set(b) if i not in a]
96037,    return xa + xb
96038,"list1=[1,2,3,4,5]"
96039,"list2=[1,2,3]"
96040,
96041,print list1[len(list2):]
96042,subset=set(list1).difference(list2)
96043,
96044,print subset
96045,
96046,import timeit
96047,init = 'temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]'
96048,"print ""Naive solution: "", timeit.timeit('temp1[len(temp2):]', init, number = 100000)"
96049,"print ""Native set solution: "", timeit.timeit('set(temp1).difference(temp2)', init, number = 100000)"
96050,list(set(x).symmetric_difference(set(y)))
96051,list(set(x) ^ set(y))
96052,import time
96053,import random
96054,from itertools import filterfalse
96055,
96056,# 1 - performance (time taken)
96057,"# 2 - correctness (answer - 1,4,5,6)"
96058,# set performance
96059,performance = 1
96060,numberoftests = 7
96061,
96062,"def answer(x,y,z):"
96063,    if z == 0:
96064,        start = time.clock()
96065,        lists = (str(list(set(x)-set(y))+list(set(y)-set(y))))
96066,"        times = (""1 = "" + str(time.clock() - start))"
96067,"        return (lists,times)"
96068,
96069,    elif z == 1:
96070,        start = time.clock()
96071,        lists = (str(list(set(x).symmetric_difference(set(y)))))
96072,"        times = (""2 = "" + str(time.clock() - start))"
96073,"        return (lists,times)"
96074,
96075,    elif z == 2:
96076,        start = time.clock()
96077,        lists = (str(list(set(x) ^ set(y))))
96078,"        times = (""3 = "" + str(time.clock() - start))"
96079,"        return (lists,times)"
96080,
96081,    elif z == 3:
96082,        start = time.clock()
96083,"        lists = (filterfalse(set(y).__contains__, x))"
96084,"        times = (""4 = "" + str(time.clock() - start))"
96085,"        return (lists,times)"
96086,
96087,    elif z == 4:
96088,        start = time.clock()
96089,        lists = (tuple(set(x) - set(y)))
96090,"        times = (""5 = "" + str(time.clock() - start))"
96091,"        return (lists,times)"
96092,
96093,    elif z == 5:
96094,        start = time.clock()
96095,        lists = ([tt for tt in x if tt not in y])
96096,"        times = (""6 = "" + str(time.clock() - start))"
96097,"        return (lists,times)"
96098,
96099,    else:    
96100,        start = time.clock()
96101,        Xarray = [iDa for iDa in x if iDa not in y]
96102,        Yarray = [iDb for iDb in y if iDb not in x]
96103,        lists = (str(Xarray + Yarray))
96104,"        times = (""7 = "" + str(time.clock() - start))"
96105,"        return (lists,times)"
96106,
96107,n = numberoftests
96108,
96109,if performance == 2:
96110,"    a = [1,2,3,4,5]"
96111,"    b = [3,2,6]"
96112,"    for c in range(0,n):"
96113,"        d = answer(a,b,c)"
96114,        print(d[0])
96115,
96116,elif performance == 1:
96117,"    for tests in range(0,10):"
96118,"        print(""Test Number"" + str(tests + 1))"
96119,"        a = random.sample(range(1, 900000), 9999)"
96120,"        b = random.sample(range(1, 900000), 9999)"
96121,"        for c in range(0,n):"
96122,"            #if c not in (1,4,5,6):"
96123,"            d = answer(a,b,c)"
96124,            print(d[1])
96125,"temp1 = ['One', 'Two', 'Three', 'Four'  ]                   "
96126,"temp2 = ['One', 'Two']"
96127,set1 = set(temp1)
96128,set2 = set(temp2)
96129,set3 = set1.difference(set2)
96130,temp3 = list(set3)
96131,print(temp3)
96132,>>>print(temp3)
96133,"['Three', 'Four']"
96134,TypeError: unhashable type: 'list'
96135,"set(map(tuple, list_of_lists1)).symmetric_difference(set(map(tuple, list_of_lists2)))"
96136,"list1 = [1, 3, 5, 7, 9]"
96137,"list2 = [1, 2, 3, 4, 5]"
96138,"def difference(list1, list2):"
96139,    new_list = []
96140,    for i in list1:
96141,        if i not in list2:
96142,            new_list.append(i)
96143,
96144,    for j in list2:
96145,        if j not in list1:
96146,            new_list.append(j)
96147,    return new_list
96148,"def sym_diff(list1, list2):"
96149,    return list(set(list1).symmetric_difference(set(list2)))
96150,"t1 = timeit.Timer(""difference(list1, list2)"", ""from __main__ import difference, "
96151,"list1, list2"")"
96152,"t2 = timeit.Timer(""sym_diff(list1, list2)"", ""from __main__ import sym_diff, "
96153,"list1, list2"")"
96154,
96155,"print('Using two for loops', t1.timeit(number=100000), 'Milliseconds')"
96156,"print('Using two for loops', t2.timeit(number=100000), 'Milliseconds')"
96157,"[7, 9, 2, 4]"
96158,Using two for loops 0.11572412995155901 Milliseconds
96159,Using symmetric_difference 0.11285737506113946 Milliseconds
96160,
96161,Process finished with exit code 0
96162,"def list_diff(a, b):"
96163,    r = []
96164,
96165,    for i in a:
96166,        if i not in b:
96167,            r.append(i)
96168,    return r
96169,"def list_diff(a, b):"
96170,    return [x for x in a if x not in b]
96171,from collections import Counter
96172,
96173,"def diff(a, b):"
96174,"  """""" more verbose than needs to be, for clarity """""""
96175,"  ca, cb = Counter(a), Counter(b)"
96176,  to_add = cb - ca
96177,  to_remove = ca - cb
96178,  changes = Counter(to_add)
96179,  changes.subtract(to_remove)
96180,  return changes
96181,
96182,"lista = ['one', 'three', 'four', 'four', 'one']"
96183,"listb = ['one', 'two', 'three']"
96184,
96185,"In [127]: diff(lista, listb)"
96186,"Out[127]: Counter({'two': 1, 'one': -1, 'four': -2})"
96187,"# in order to go from lista to list b, you need to add a ""two"", remove a ""one"", and remove two ""four""s"
96188,
96189,"In [128]: diff(listb, lista)"
96190,"Out[128]: Counter({'four': 2, 'one': 1, 'two': -1})"
96191,"# in order to go from listb to lista, you must add two ""four""s, add a ""one"", and remove a ""two"""
96192,"temp1 = ['One', 'Two', 'Three', 'Four']"
96193,"temp2 = ['One', 'Two', 'Five']"
96194,
96195,set(temp1+temp2)-(set(temp1)&set(temp2))
96196,
96197,"Out: set(['Four', 'Five', 'Three']) "
96198,temp3 = list(set(temp1).difference(set(temp2)))
96199,numpy
96200,"temp1 = ['One', 'Two', 'Three', 'Four']"
96201,"temp2 = ['One', 'Two']"
96202,
96203,"list(np.setdiff1d(temp1,temp2))"
96204,
96205,"['Four', 'Three'] #Output"
96206,"def diff(listA, listB):"
96207,    return set(listA) - set(listB) | set(listB) -set(listA)
96208,(set(a) - set(b)) | (set(a) - set(b))
96209,set(a) - (set(b) | set(a)) - set(b)
96210,a
96211,>>> from sets import Set
96212,>>>
96213,">>> l1 = ['xvda', False, 'xvdbb', 12, 'xvdbc']"
96214,">>> l2 = ['xvda', 'xvdbb', 'xvdbc', 'xvdbd', None]"
96215,>>>
96216,>>> Set(l1).symmetric_difference(Set(l2))
96217,"Set([False, 'xvdbd', None, 12])"
96218,temp3 = []
96219,for i in temp1:
96220,    if i not in temp2:
96221,        temp3.append(i)
96222,print(temp3)
96223,"def diffList(list1, list2):     # returns the difference between two lists."
96224,    if len(list1) > len(list2):
96225,        return (list(set(list1) - set(list2)))
96226,    else:
96227,        return (list(set(list2) - set(list1)))
96228,"list1 = [10, 15, 20, 25, 30, 35, 40]"
96229,"list2 = [25, 40, 35]"
96230,"output = [10, 20, 30, 15]"
96231,gcc -Wall utilsmodule.c -o Utilc
96232,> utilsmodule.c:1:20: fatal error: Python.h: No such file or directory
96233,compilation terminated.
96234,Python.h
96235,apt
96236,sudo apt-get install python-dev   # for python2.x installs
96237,sudo apt-get install python3-dev  # for python3.x installs
96238,yum
96239,sudo yum install python-devel    # for python2.x installs
96240,sudo yum install python3-devel   # for python3.x installs
96241,dnf
96242,sudo dnf install python2-devel  # for python2.x installs
96243,sudo dnf install python3-devel  # for python3.x installs
96244,zypper
96245,sudo zypper in python-devel   # for python2.x installs
96246,sudo zypper in python3-devel  # for python3.x installs
96247,apk
96248,# This is a departure from the normal Alpine naming
96249,"# scheme, which uses py2- and py3- prefixes"
96250,sudo apk add python2-dev  # for python2.x installs
96251,sudo apk add python3-dev  # for python3.x installs
96252,apt-cyg
96253,apt-cyg install python-devel   # for python2.x installs
96254,apt-cyg install python3-devel  # for python3.x installs
96255,sudo apt-get install python3-dev
96256,sudo apt-get install python3.5-dev
96257,sudo apt install libpython3.7-dev
96258,pythonm.n-dev
96259,sudo apt install libpython3.6-dev
96260,sudo apt install libpython3.8-dev
96261,sudo apt install libpython3.9-dev
96262,sudo apt install libpython3.10-dev
96263,sudo apt-get install python-dev
96264,-I/usr/include/python2.7 -lpython2.7 
96265,gcc -Wall -I/usr/include/python2.7 -lpython2.7  utilsmodule.c -o Utilc 
96266,sudo dnf install python2-devel
96267,sudo dnf install python3-devel
96268,apt-get install python-dev
96269,sudo apt-get install python2.6-dev 
96270,sudo apt-get install python2.7-dev 
96271,etc.
96272,$ pkg-config --cflags --libs python2
96273,-I/usr/include/python2.7 -lpython2.7
96274,gcc -Wall utilsmodule.c -o Utilc $(pkg-config --cflags --libs python2) 
96275,python2-devel
96276,python3-devel
96277,setup.exe
96278,setup.exe
96279,$ setup.exe -q --packages=python3-devel
96280,#include <python2.7/Python.h>
96281,/usr/include/python2.7/Python.h
96282,/usr/include
96283,python2.7/Python.h
96284,gcc -I/usr/lib/python2.7
96285,gcc -I/usr/lib/python2.7 etc
96286,yum install python27-devel
96287,pip install cryptography
96288,sudo yum install python34-devel
96289,yum install python3-devel
96290,sudo apt-get install python3.6-dev
96291,sudo python3-dev
96292,libpython-all-dev
96293,libpython3-all-dev
96294,python-all-dev
96295,gcc -fPIC -c existe.c existe_wrap.c -I /usr/include/python3.5m/
96296,sudo apt-get install python3-dev  # for python3.x installs
96297,gcc -fPIC -c existe.c existe_wrap.c -I /usr/include/python3.5m/
96298,gcc -shared -o UtilcS.so
96299,-fPIC -I/usr/include/python2.7 -lpython2.7  utilsmodule.c
96300,sudo apt-get install python3.6-dev
96301,gcc
96302,sudo apt-get install gcc
96303,python3-dev
96304,python3.6-dev
96305,root@ubuntu234:~/auto# apt-file search --regexp '/Python.h$'
96306,pypy-dev: /usr/lib/pypy/include/Python.h
96307,python2.7-dbg: /usr/include/python2.7_d/Python.h
96308,python2.7-dev: /usr/include/python2.7/Python.h
96309,python3.2-dbg: /usr/include/python3.2dmu/Python.h
96310,python3.2-dev: /usr/include/python3.2mu/Python.h
96311,root@ubuntu234:~/auto# 
96312,sudo yum install python36u-devel
96313,sudo zypper install python3-devel
96314,find / -iname 'Python.h'
96315,/usr/include/python3.7m/Python.h
96316,/usr/include/python3.6m/Python.h
96317,/home/ubuntu/workspace/blender-git/lib/linux_centos7_x86_64/python/include/python3.7m/Python.h
96318,/home/ubuntu/miniconda3/pkgs/python-3.8.5-h7579374_1/include/python3.8/Python.h
96319,/home/ubuntu/miniconda3/pkgs/python-3.7.0-h6e4f718_3/include/python3.7m/Python.h
96320,/home/ubuntu/miniconda3/include/python3.8/Python.h
96321,/home/ubuntu/miniconda3/envs/sim/include/python3.7m/Python.h
96322,/home/ubuntu/src/blender-deps/Python-3.7.7/Include/Python.h
96323,/opt/lib/python-3.7.7/include/python3.7m/Python.h
96324,export CPPFLAGS=-I/home/ubuntu/src/blender-deps/Python-3.7.7/Include
96325,pip install <package>
96326,sudo yum install python36-devel
96327,pip install
96328,# Install python3-devel like everyone says
96329,yum -y install python36-devel.x86_64
96330,
96331,# Find the install directory of `Python.h`
96332,"rpm -ql python36-devel.x86_64 | grep -i ""Python.h"""
96333,
96334,# Forcefully add it to your include path
96335,C_INCLUDE_PATH='/usr/include/python3.6m'
96336,export C_INCLUDE_PATH
96337,# Install python3-devel like everyone says
96338,RUN yum -y install python36-devel.x86_64
96339,
96340,"# Find the install directory of `Python.h`, for me it was /usr/include/python3.6m"
96341,"RUN rpm -ql python36-devel.x86_64 | grep -i ""Python.h"" && fake_command_so_docker_fails_and_shows_us_the_output"
96342,
96343,"# Since the previous command contains a purposeful error, remove it before the next run"
96344,
96345,# Forcefully add it to your include path
96346,ARG C_INCLUDE_PATH='/usr/include/python3.6m'
96347,CPLUS_INCLUDE_PATH
96348,asyncpg~=0.24.0
96349,python:3.9.4-slim
96350,python:3
96351,python-config
96352,--includes
96353,--ldflags
96354,gcc -c mypythonprogram.c $(python3-config --includes)
96355,gcc -o program mypythonprogram.o $(python3-config --ldflags)
96356,python-config
96357,python3-config
96358,python3.6-config
96359,python-dev
96360,libpython-all-dev
96361,apt
96362,install
96363,sudo apt-get install libffi-dev
96364,sudo pip install cffi
96365,c/_cffi_backend.c:2:20: fatal error: Python.h: No such file or directory
96366,gemfield@ThinkPad-X1C:~$ locate Python.h
96367,/home/gemfield/anaconda3/include/python3.7m/Python.h
96368,/home/gemfield/anaconda3/pkgs/python-3.7.6-h0371630_2/include/python3.7m/Python.h
96369,/usr/include/python3.8/Python.h
96370,g++ -I/usr/include/python3.8 ...
96371,sudo apt-get install python-dev   # for python2.x installs
96372,sudo apt-get install python3-dev  # for python3.x installs
96373,"#include ""Python.h"""
96374,make all
96375,    FILE := file.c
96376,    PYTHON := python3
96377,"    PYVERSION := $(shell $(PYTHON) -c ""import sys;                     "
96378,"    print(sys.version[:3])"")"
96379,"    PYPREFIX := $(shell $(PYTHON) -c ""import sys; print(sys.prefix)"")"
96380,
96381,"    INCDIR := $(shell $(PYTHON) -c ""from distutils import sysconfig; "
96382,"    print(sysconfig.get_python_inc())"")"
96383,"    PLATINCDIR := $(shell $(PYTHON) -c ""from distutils import "
96384,"    sysconfig; print(sysconfig.get_python_inc(plat_specific=True))"")"
96385,"    LIBDIR1 := $(shell $(PYTHON) -c ""from distutils import sysconfig; "
96386,"    print(sysconfig.get_config_var('LIBDIR'))"")"
96387,"    LIBDIR2 := $(shell $(PYTHON) -c ""from distutils import sysconfig; "
96388,"    print(sysconfig.get_config_var('LIBPL'))"")"
96389,"    PYLIB := $(shell $(PYTHON) -c ""from distutils import sysconfig; "
96390,"    print(sysconfig.get_config_var('LIBRARY')[3:-2])"")"
96391,
96392,"    CC := $(shell $(PYTHON) -c ""import distutils.sysconfig; "
96393,"    print(distutils.sysconfig.get_config_var('CC'))"")"
96394,"    LINKCC := $(shell $(PYTHON) -c ""import distutils.sysconfig; "
96395,"    print(distutils.sysconfig.get_config_var('LINKCC'))"")"
96396,"    LINKFORSHARED := $(shell $(PYTHON) -c ""import distutils.sysconfig; "
96397,"    print(distutils.sysconfig.get_config_var('LINKFORSHARED'))"")"
96398,"    LIBS := $(shell $(PYTHON) -c ""import distutils.sysconfig; "
96399,"    print(distutils.sysconfig.get_config_var('LIBS'))"")"
96400,"    SYSLIBS :=  $(shell $(PYTHON) -c ""import distutils.sysconfig; "
96401,"    print(distutils.sysconfig.get_config_var('SYSLIBS'))"")"
96402,
96403,    .PHONY: paths all clean test
96404,
96405,    paths:
96406,"        @echo ""PYTHON=$(PYTHON)"""
96407,"        @echo ""PYVERSION=$(PYVERSION)"""
96408,"        @echo ""PYPREFIX=$(PYPREFIX)"""
96409,"        @echo ""INCDIR=$(INCDIR)"""
96410,"        @echo ""PLATINCDIR=$(PLATINCDIR)"""
96411,"        @echo ""LIBDIR1=$(LIBDIR1)"""
96412,"        @echo ""LIBDIR2=$(LIBDIR2)"""
96413,"        @echo ""PYLIB=$(PYLIB)"""
96414,"        @echo ""CC=$(CC)"""
96415,"        @echo ""LINKCC=$(LINKCC)"""
96416,"        @echo ""LINKFORSHARED=$(LINKFORSHARED)"""
96417,"        @echo ""LIBS=$(LIBS)"""
96418,"        @echo ""SYSLIBS=$(SYSLIBS)"""
96419,
96420,    $(FILE:.c=): $(FILE:.c=.o)
96421,        $(LINKCC) -o $@ $^ -L$(LIBDIR1) -L$(LIBDIR2) -l$(PYLIB)         
96422,    $(LIBS) $(SYSLIBS) $(LINKFORSHARED)
96423,
96424,    $(FILE:.c=.o): $(FILE)
96425,        $(CC) -c $^ -I$(INCDIR) -I$(PLATINCDIR)
96426,
96427,    all: $(FILE:.c=)
96428,"#include ""Python.h"""
96429,#include
96430,yum install python34-devel
96431,Python.h
96432,/usr/include/python3.4m but not in /usr/include/python3.6m
96433,--global-option
96434,"pip3.6 install --global-option=build_ext --global-option=""--include-dirs=/usr/include/python3.4m"" ctds"
96435,lpython3.6m
96436,yum -y install https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/python36u-libs-3.6.3-1.ius.centos7.x86_64.rpm
96437,/usr/include/python3.6m/Python.h
96438,python3.5
96439,python3.6
96440,python3
96441,python3 -V
96442,python3.6
96443,python3.5
96444,python3.6-dev
96445,sudo apt-get install gcc
96446,sudo yum install gcc
96447,sudo dnf install gcc
96448,sudo zypper in gcc
96449,sudo apk gcc
96450,Python.h
96451,-I<path>
96452,-L<path>
96453,-l<name>
96454,"temp = open(filename,'r').readlines()"
96455,[l.strip('\n\r') for l in temp]
96456,rstrip
96457,in open
96458,in temp
96459,newline
96460,str.splitlines
96461,temp = file.read().splitlines()
96462,temp = [line[:-1] for line in file]
96463,"with open(the_file, 'r+') as f:"
96464,"    f.seek(-1, 2)  # go at the end of the file"
96465,    if f.read(1) != '\n':
96466,        # add missing newline if not already present
96467,        f.write('\n')
96468,        f.flush()
96469,        f.seek(0)
96470,    lines = [line[:-1] for line in f]
96471,strip
96472,[line.rstrip('\n') for line in file]
96473,[line[:-(line[-1] == '\n') or len(line)+1] for line in file]
96474,or
96475,readlines
96476,def readlines(self):
96477,    lines = []
96478,"    for line in iter(self.readline, ''):"
96479,        lines.append(line)
96480,    return lines
96481,
96482,# or equivalently
96483,
96484,def readlines(self):
96485,    lines = []
96486,    while True:
96487,        line = self.readline()
96488,        if not line:
96489,            break
96490,        lines.append(line)
96491,    return lines
96492,readline()
96493,readlines()
96494,readlines()
96495,writelines()
96496,f2.writelines(f.readlines())
96497,f
96498,f2
96499,[line.rstrip('\n') for line in file]
96500,\n
96501,[line[:-(line[-1] == '\n') or len(line)+1] for line in file]
96502,[line[:-(line[-1] == '\n') or None] for line in file]
96503,for line in (x.strip() for x in f):
96504,with
96505,with open(...) as f: lines = (line for line in f)
96506,lines
96507,with
96508,"temp = open(filename,'r').read().splitlines()"
96509,\r\n
96510,.split('\n')
96511,splitlines()
96512,split('\n')
96513,os.linesep
96514,\r\n
96515,\n
96516,os.linesep
96517,\n
96518,splitlines
96519,open()
96520,'r'
96521,str.rstrip(chars)
96522,"with open(filename, 'r') as fileobj:"
96523,    for row in fileobj:
96524,        print(row.rstrip('\n'))
96525,str.strip([chars])
96526,str.lstrip([chars])
96527,'r'
96528,temp = [line.strip() for line in file.readlines()]
96529,temp = [line.rstrip() for line in file.readlines()]
96530,.readlines()
96531,readlines()
96532,temp = [line.strip() for line in file]
96533,"temp = open(filename,'r').read().splitlines()"
96534,with
96535,with open(file) as f: temp = f.read().splitlines()
96536,"u=open(""url.txt"",""r"")  "
96537,"url=u.read().replace('\n','')  "
96538,print(url)  
96539,/n
96540,''
96541,"f = open(path_sample, ""r"")"
96542,lines = [line.rstrip('\n') for line in f.readlines() if line.strip() != '']
96543,newline
96544,from pathlib import Path
96545,lines = Path(filename).read_text().splitlines()
96546,with open()...
96547,"with open(""foo.txt"", 'r') as f:"
96548,    lst = [row.rstrip('\n') for row in f]
96549,"file = open(""temp.txt"", ""+r"")"
96550,"file2 = open(""res.txt"", ""+w"")"
96551,for line in file:
96552,"    file2.writelines(f""{line.splitlines()[0]},0\n"")"
96553,file2.close()
96554,splitlines()
96555,"my_file = open(""first_file.txt"", ""r"")"
96556,for line in my_file.readlines():
96557,"    if line[-1:] == ""\n"":"
96558,        print(line[:-1])
96559,    else:
96560,        print(line)
96561,my_file.close() 
96562,.readlines()
96563,import csv
96564,
96565,with open(filename) as f:
96566,    csvreader = csv.reader(f)
96567,    for line in csvreader:
96568,         print(line[0])
96569,regex
96570,lxml
96571,numpy
96572,b2a_bin(data)
96573,threading
96574,multiprocessing
96575,concurrent.futures.ProcessPoolExecutor
96576,global interpreter lock
96577,multiprocessing
96578,threading
96579,concurrent.futures.ProcessPoolExecutor
96580,multiprocessing
96581,ThreadPoolExecutor
96582,ThreadPoolExecutor
96583,ProcessPoolExecutor
96584,static void MyCallback(const Context &context){
96585,Auto<Lock> lock(GetMyMutexFromContext(context));
96586,...
96587,EvalMyPythonString(str); //A function that takes the GIL
96588,...    
96589,}
96590,╔═══╦════════════════════════════════════════╦══════════════════════════════════════╗
96591,║   ║ Main Thread                            ║ Other Thread                         ║
96592,╠═══╬════════════════════════════════════════╬══════════════════════════════════════╣
96593,║ 1 ║ Python Command acquires GIL            ║ Work started                         ║
96594,║ 2 ║ Computation requested                  ║ MyCallback runs and acquires MyMutex ║
96595,║ 3 ║                                        ║ MyCallback now waits for GIL         ║
96596,║ 4 ║ MyCallback runs and waits for MyMutex  ║ waiting for GIL                      ║
96597,╚═══╩════════════════════════════════════════╩══════════════════════════════════════╝
96598,root.mainloop()
96599,move()
96600,<b1-motion>
96601,after
96602,Tk
96603,from tkinter import *
96604,
96605,root = Tk()
96606,
96607,def task():
96608,"    print(""hello"")"
96609,"    root.after(2000, task)  # reschedule event in 2 seconds"
96610,
96611,"root.after(2000, task)"
96612,root.mainloop()
96613,after
96614,"def after(self, ms, func=None, *args):"
96615,"    """"""Call function once after given time."
96616,
96617,    MS specifies the time in milliseconds. FUNC gives the
96618,    function which shall be called. Additional parameters
96619,    are given as parameters to the function call.  Return
96620,"    identifier to cancel scheduling with after_cancel."""""""
96621,threading
96622,task()
96623,after()
96624,app.start()
96625,app.start()
96626,self.start()
96627,__init__
96628,mainloop()
96629,mainloop()
96630,# Run tkinter code in another thread
96631,
96632,import tkinter as tk
96633,import threading
96634,
96635,class App(threading.Thread):
96636,
96637,    def __init__(self):
96638,        threading.Thread.__init__(self)
96639,        self.start()
96640,
96641,    def callback(self):
96642,        self.root.quit()
96643,
96644,    def run(self):
96645,        self.root = tk.Tk()
96646,"        self.root.protocol(""WM_DELETE_WINDOW"", self.callback)"
96647,
96648,"        label = tk.Label(self.root, text=""Hello World"")"
96649,        label.pack()
96650,
96651,        self.root.mainloop()
96652,
96653,
96654,app = App()
96655,print('Now we can continue running code while mainloop runs!')
96656,
96657,for i in range(100000):
96658,    print(i)
96659,__init__(..)
96660,self
96661,run(..)
96662,while app.is_alive(): etc
96663,update
96664,mainloop
96665,def task():
96666,   # do something
96667,   root.update()
96668,
96669,while 1:
96670,   task()  
96671,task
96672,update
96673,import Tkinter
96674,import threading
96675,
96676,class MyTkApp(threading.Thread):
96677,    def __init__(self):
96678,        self.root=Tkinter.Tk()
96679,        self.s = Tkinter.StringVar()
96680,        self.s.set('Foo')
96681,"        l = Tkinter.Label(self.root,textvariable=self.s)"
96682,        l.pack()
96683,        threading.Thread.__init__(self)
96684,
96685,    def run(self):
96686,        self.root.mainloop()
96687,
96688,
96689,app = MyTkApp()
96690,app.start()
96691,
96692,# Now the app should be running and the value shown on the label
96693,# can be changed by changing the member variable s.
96694,# Like this:
96695,# app.s.set('Bar')
96696,import tkinter as tk
96697,import time
96698,
96699,def GetDateTime():
96700,  # Get current date and time in ISO8601
96701,  # https://en.wikipedia.org/wiki/ISO_8601 
96702,  # https://xkcd.com/1179/
96703,"  return (time.strftime(""%Y%m%d"", time.gmtime()),"
96704,"          time.strftime(""%H%M%S"", time.gmtime()),"
96705,"          time.strftime(""%Y%m%d"", time.localtime()),"
96706,"          time.strftime(""%H%M%S"", time.localtime()))"
96707,
96708,class Application(tk.Frame):
96709,
96710,"  def __init__(self, master):"
96711,
96712,    fontsize = 12
96713,    textwidth = 9
96714,
96715,"    tk.Frame.__init__(self, master)"
96716,    self.pack()
96717,
96718,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#be004e', fg = 'white', width = textwidth,"
96719,"             text='Local Time').grid(row=0, column=0)"
96720,    self.LocalDate = tk.StringVar()
96721,    self.LocalDate.set('waiting...')
96722,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#be004e', fg = 'white', width = textwidth,"
96723,"             textvariable=self.LocalDate).grid(row=0, column=1)"
96724,
96725,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#be004e', fg = 'white', width = textwidth,"
96726,"             text='Local Date').grid(row=1, column=0)"
96727,    self.LocalTime = tk.StringVar()
96728,    self.LocalTime.set('waiting...')
96729,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#be004e', fg = 'white', width = textwidth,"
96730,"             textvariable=self.LocalTime).grid(row=1, column=1)"
96731,
96732,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#40CCC0', fg = 'white', width = textwidth,"
96733,"             text='GMT Time').grid(row=2, column=0)"
96734,    self.nowGdate = tk.StringVar()
96735,    self.nowGdate.set('waiting...')
96736,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#40CCC0', fg = 'white', width = textwidth,"
96737,"             textvariable=self.nowGdate).grid(row=2, column=1)"
96738,
96739,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#40CCC0', fg = 'white', width = textwidth,"
96740,"             text='GMT Date').grid(row=3, column=0)"
96741,    self.nowGtime = tk.StringVar()
96742,    self.nowGtime.set('waiting...')
96743,"    tk.Label(self, font=('Helvetica', fontsize), bg = '#40CCC0', fg = 'white', width = textwidth,"
96744,"             textvariable=self.nowGtime).grid(row=3, column=1)"
96745,
96746,"    tk.Button(self, text='Exit', width = 10, bg = '#FF8080', command=root.destroy).grid(row=4, columnspan=2)"
96747,
96748,    self.gettime()
96749,  pass
96750,
96751,  def gettime(self):
96752,"    gdt, gtm, ldt, ltm = GetDateTime()"
96753,    gdt = gdt[0:4] + '/' + gdt[4:6] + '/' + gdt[6:8]
96754,    gtm = gtm[0:2] + ':' + gtm[2:4] + ':' + gtm[4:6] + ' Z'  
96755,    ldt = ldt[0:4] + '/' + ldt[4:6] + '/' + ldt[6:8]
96756,    ltm = ltm[0:2] + ':' + ltm[2:4] + ':' + ltm[4:6]  
96757,    self.nowGtime.set(gdt)
96758,    self.nowGdate.set(gtm)
96759,    self.LocalTime.set(ldt)
96760,    self.LocalDate.set(ltm)
96761,
96762,"    self.after(100, self.gettime)"
96763,"   #print (ltm)  # Prove it is running this and the external code, too."
96764,  pass
96765,
96766,root = tk.Tk()
96767,root.wm_title('Temp Converter')
96768,app = Application(master=root)
96769,
96770,w = 200 # width for the Tk root
96771,h = 125 # height for the Tk root
96772,
96773,# get display screen width and height
96774,ws = root.winfo_screenwidth()  # width of the screen
96775,hs = root.winfo_screenheight() # height of the screen
96776,
96777,# calculate x and y coordinates for positioning the Tk root window
96778,
96779,#centered
96780,#x = (ws/2) - (w/2)
96781,#y = (hs/2) - (h/2)
96782,
96783,#right bottom corner (misfires in Win10 putting it too low. OK in Ubuntu)
96784,x = ws - w
96785,"y = hs - h - 35  # -35 fixes it, more or less, for Win10"
96786,
96787,#set the dimensions of the screen and where it is placed
96788,"root.geometry('%dx%d+%d+%d' % (w, h, x, y))"
96789,
96790,root.mainloop()
96791,                         Bracket Matching -.  .- Line Numbering
96792,                          Smart Indent -.  |  |  .- UML Editing / Viewing
96793,         Source Control Integration -.  |  |  |  |  .- Code Folding
96794,                    Error Markup -.  |  |  |  |  |  |  .- Code Templates
96795,  Integrated Python Debugging -.  |  |  |  |  |  |  |  |  .- Unit Testing
96796,"    Multi-Language Support -.  |  |  |  |  |  |  |  |  |  |  .- GUI Designer (Qt, Eric, etc)"
96797,   Auto Code Completion -.  |  |  |  |  |  |  |  |  |  |  |  |  .- Integrated DB Support
96798,     Commercial/Free -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  .- Refactoring
96799,   Cross Platform -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     
96800,                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
96801,Atom              |Y |F |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |  |  |  |  |*many plugins
96802,Editra            |Y |F |Y |Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |
96803,Emacs             |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |
96804,Eric Ide          |Y |F |Y |  |Y |Y |  |Y |  |Y |  |Y |  |Y |  |  |  |
96805,Geany             |Y |F |Y*|Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |*very limited
96806,Gedit             |Y |F |Y¹|Y |  |  |  |Y |Y |Y |  |  |Y²|  |  |  |  |¹with plugin; ²sort of
96807,Idle              |Y |F |Y |  |Y |  |  |Y |Y |  |  |  |  |  |  |  |  |
96808,IntelliJ          |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |
96809,JEdit             |Y |F |  |Y |  |  |  |  |Y |Y |  |Y |  |  |  |  |  |
96810,KDevelop          |Y |F |Y*|Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |*no type inference
96811,Komodo            |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |Y |  |
96812,NetBeans*         |Y |F |Y |Y |Y |  |Y |Y |Y |Y |Y |Y |Y |Y |  |  |Y |*pre-v7.0
96813,Notepad++         |W |F |Y |Y |  |Y*|Y*|Y*|Y |Y |  |Y |Y*|  |  |  |  |*with plugin
96814,Pfaide            |W |C |Y |Y |  |  |  |Y |Y |Y |  |Y |Y |  |  |  |  |
96815,PIDA              |LW|F |Y |Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |VIM based
96816,PTVS              |W |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |  |  |Y*|  |Y |*WPF bsed
96817,PyCharm           |Y |CF|Y |Y*|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |*JavaScript
96818,PyDev (Eclipse)   |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |
96819,PyScripter        |W |F |Y |  |Y |Y |  |Y |Y |Y |  |Y |Y |Y |  |  |  |
96820,PythonWin         |W |F |Y |  |Y |  |  |Y |Y |  |  |Y |  |  |  |  |  |
96821,SciTE             |Y |F¹|  |Y |  |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |¹Mac version is
96822,ScriptDev         |W |C |Y |Y |Y |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |    commercial
96823,Spyder            |Y |F |Y |  |Y |Y |  |Y |Y |Y |  |  |  |  |  |  |  |
96824,"Sublime Text      |Y |CF|Y |Y |  |Y |Y |Y |Y |Y |  |Y |Y |Y*|  |  |  |extensible w/Python,"
96825,TextMate          |M |F |  |Y |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |    *PythonTestRunner
96826,UliPad            |Y |F |Y |Y |Y |  |  |Y |Y |  |  |  |Y |Y |  |  |  |
96827,Vim               |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |
96828,Visual Studio     |W |CF|Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |Y |? |Y |
96829,Visual Studio Code|Y |F |Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |? |? |Y |uses plugins
96830,WingIde           |Y |C |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |*support for C
96831,Zeus              |W |C |  |  |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |
96832,                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
96833,   Cross Platform -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     
96834,     Commercial/Free -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '- Refactoring
96835,   Auto Code Completion -'  |  |  |  |  |  |  |  |  |  |  |  |  '- Integrated DB Support
96836,"    Multi-Language Support -'  |  |  |  |  |  |  |  |  |  |  '- GUI Designer (Qt, Eric, etc)"
96837,  Integrated Python Debugging -'  |  |  |  |  |  |  |  |  '- Unit Testing
96838,                    Error Markup -'  |  |  |  |  |  |  '- Code Templates
96839,         Source Control Integration -'  |  |  |  |  '- Code Folding
96840,                          Smart Indent -'  |  |  '- UML Editing / Viewing
96841,                         Bracket Matching -'  '- Line Numbering
96842, L  - Linux
96843, W  - Windows
96844, M  - Mac
96845, C  - Commercial
96846, F  - Free
96847, CF - Commercial with Free limited edition
96848, ?  - To be confirmed
96849,'1234567890'
96850,"['12','34','56','78','90']"
96851,>>> line = '1234567890'
96852,>>> n = 2
96853,">>> [line[i:i+n] for i in range(0, len(line), n)]"
96854,"['12', '34', '56', '78', '90']"
96855,"for i in range(0, len(string), n):         print(string[i:i+n])"
96856,>>> import re
96857,">>> re.findall('..','1234567890')"
96858,"['12', '34', '56', '78', '90']"
96859,>>> import re
96860,">>> re.findall('..?', '123456789')"
96861,"['12', '34', '56', '78', '9']"
96862,>>> import re
96863,">>> re.findall('.{1,2}', '123456789')"
96864,"['12', '34', '56', '78', '9']"
96865,re.finditer
96866,'.'*n
96867,flags=re.S
96868,>>> from textwrap import wrap
96869,>>> s = '1234567890'
96870,">>> wrap(s, 2)"
96871,"['12', '34', '56', '78', '90']"
96872,>>> help(wrap)
96873,'''
96874,Help on function wrap in module textwrap:
96875,
96876,"wrap(text, width=70, **kwargs)"
96877,"    Wrap a single paragraph of text, returning a list of wrapped lines."
96878,
96879,    Reformat the single paragraph in 'text' so it fits in lines of no
96880,"    more than 'width' columns, and return a list of wrapped lines.  By"
96881,"    default, tabs in 'text' are expanded with string.expandtabs(), and"
96882,    all other whitespace characters (including newline) are converted to
96883,    space.  See TextWrapper class for available keyword args to customize
96884,    wrapping behaviour.
96885,'''
96886,wrap
96887,"wrap('0 1 2 3 4 5', 2)"
96888,"['0', '1', '2', '3', '4', '5']"
96889,>>> s = '1234567890'
96890,">>> map(''.join, zip(*[iter(s)]*2))"
96891,"['12', '34', '56', '78', '90']"
96892,zip()
96893,zip(*[iter(s)]*2)
96894,zip(*[iter(s)]*n)
96895,">>> map(''.join, zip(*[iter('01234567')]*5))"
96896,['01234']
96897,zip()
96898,itertools.zip_longest()
96899,"map(''.join, zip_longest(*[iter(s)]*2, fillvalue=''))"
96900,maps()
96901,"def split_by_n(seq, n):"
96902,    '''A generator to divide a sequence into chunks of n units.'''
96903,    while seq:
96904,        yield seq[:n]
96905,        seq = seq[n:]
96906,
96907,"print(list(split_by_n('1234567890', 2)))"
96908,>>> from more_itertools import sliced
96909,">>> list(sliced('1234567890', 2))"
96910,"['12', '34', '56', '78', '90']"
96911,s = '1234567890'
96912,o = []
96913,while s:
96914,    o.append(s[:2])
96915,    s = s[2:]
96916,grouper()
96917,itertools
96918,from itertools import izip_longest    
96919,
96920,"def grouper(iterable, n, fillvalue=None):"
96921,"    ""Collect data into fixed-length chunks or blocks"""
96922,"    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
96923,    args = [iter(iterable)] * n
96924,"    return izip_longest(fillvalue=fillvalue, *args)"
96925,from itertools import zip_longest
96926,
96927,"def grouper(iterable, n, fillvalue=None):"
96928,"    ""Collect data into fixed-length chunks or blocks"""
96929,"    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"""
96930,    args = [iter(iterable)] * n
96931,"    return zip_longest(*args, fillvalue=fillvalue)"
96932,a = '1234567890a'
96933,result = []
96934,
96935,"for i in range(0, len(a), 2):"
96936,    result.append(a[i : i + 2])
96937,print(result)
96938,"x=""1234567890"""
96939,n=2
96940,list=[]
96941,"for i in range(0,len(x),n):"
96942,    list.append(x[i:i+n])
96943,print(list)
96944,"['12', '34', '56', '78', '90']"
96945,my_list
96946,from itertools import islice
96947,
96948,"def split_every(n, iterable):"
96949,    i = iter(iterable)
96950,"    piece = list(islice(i, n))"
96951,    while piece:
96952,        yield piece
96953,"        piece = list(islice(i, n))"
96954,
96955,s = '1234567890'
96956,"print list(split_every(2, list(s)))"
96957,yield ''.join(piece)
96958,s='1234567890'
96959,"print([s[idx:idx+2] for idx,val in enumerate(s) if idx%2 == 0])"
96960,"['12', '34', '56', '78', '90']"
96961,>>> from functools import reduce
96962,>>> from operator import add
96963,>>> from itertools import izip
96964,>>> x = iter('1234567890')
96965,">>> [reduce(add, tup) for tup in izip(x, x)]"
96966,"['12', '34', '56', '78', '90']"
96967,>>> x = iter('1234567890')
96968,">>> [reduce(add, tup) for tup in izip(x, x, x)]"
96969,"['123', '456', '789']"
96970,n = 2  
96971,"line = ""this is a line split into n characters""  "
96972,"line = [line[i * n:i * n+n] for i,blah in enumerate(line[::n])]"
96973,print(line)
96974,this is a line split into n characters
96975,"line = [line[i * n:i * n+n] for i,blah in enumerate(line[::n])]"
96976,",blah"
96977,blah
96978,blah
96979,","
96980,enumerate
96981,blah
96982,more_itertools.sliced
96983,more_itertools
96984,"s = ""1234567890"""
96985,
96986,"["""".join(c) for c in mit.grouper(2, s)]"
96987,
96988,"["""".join(c) for c in mit.chunked(s, 2)]"
96989,
96990,"["""".join(c) for c in mit.windowed(s, 2, step=2)]"
96991,
96992,"["""".join(c) for c in  mit.split_after(s, lambda x: int(x) % 2 == 0)]"
96993,"['12', '34', '56', '78', '90']"
96994,grouper
96995,chunked
96996,windowed
96997,split_after
96998,"def split(s, n):"
96999,    if len(s) < n:
97000,        return []
97001,    else:
97002,"        return [s[:n]] + split(s[n:], n)"
97003,
97004,"print(split('1234567890', 2))"
97005,"def split(s, n):"
97006,    if len(s) < n:
97007,        return []
97008,    elif len(s) == n:
97009,        return [s]
97010,    else:
97011,"        return split(s[:n], n) + split(s[n:], n)"
97012,groupby
97013,"from itertools import groupby, chain, repeat, cycle"
97014,
97015,"text = ""wwworldggggreattecchemggpwwwzaz"""
97016,n = 3
97017,"c = cycle(chain(repeat(0, n), repeat(1, n)))"
97018,"res = ["""".join(g) for _, g in groupby(text, lambda x: next(c))]"
97019,print(res)
97020,"['www', 'orl', 'dgg', 'ggr', 'eat', 'tec', 'che', 'mgg', 'pww', 'wza', 'z']"
97021,"def SplitEvery(string, length):"
97022,    if len(string) <= length: return [string]        
97023,    sections = len(string) / length
97024,    lines = []
97025,    start = 0;
97026,    for i in range(sections):
97027,        line = string[start:start+length]
97028,        lines.append(line)
97029,        start += length
97030,    return lines
97031,text = '1234567890'
97032,"lines = SplitEvery(text, 2)"
97033,print(lines)
97034,
97035,"# output: ['12', '34', '56', '78', '90']"
97036,__name__
97037,foo = dict()
97038,foo['bar'] = 2
97039,retrieve_name()
97040,# List of dictionaries for my DataFrame
97041,"list_of_dicts = [n_jobs, users, queues, priorities]"
97042,columns = [retrieve_name(d) for d in list_of_dicts] 
97043,>>> foo = dict()
97044,>>> f'{foo=}'.split('=')[0]
97045,'foo' 
97046,'foo'
97047,f'{foo=}'
97048,>>> 'foo'
97049,f'{foo=}'.split('=')[0].split('.')[-1]
97050,"I am looking for a function/attribute, e.g. retrieve_name: retrieve_name(foo)  that returns the string 'foo' "
97051,f'{foo=}'.split('=')[0]
97052,foo
97053,foo
97054,retrieve_name
97055,inspect
97056,current frame
97057,import inspect
97058,
97059,"x, y, z = 1, 2, 3"
97060,
97061,def retrieve_name(var):
97062,    callers_local_vars = inspect.currentframe().f_back.f_locals.items()
97063,"    return [var_name for var_name, var_val in callers_local_vars if var_val is var]"
97064,
97065,print(retrieve_name(y))
97066,def foo(bar):
97067,    return retrieve_name(bar)
97068,
97069,foo(baz)
97070,baz
97071,bar
97072,.f_back
97073,caller_local_vars
97074,import hooks
97075,ironpython
97076,jython
97077,"a, b = 2, 2"
97078,retrieve_name(a)
97079,retrieve_name(b)
97080,"['a', 'b']"
97081,"['b', 'a']"
97082,true
97083,is
97084,def foo(bar): retrieve_name(bar)
97085,foo(baz)
97086,baz
97087,bar
97088,callers_local_vars
97089,foo
97090,inspect.currentframe().f_back.f_back.f_locals.items()
97091,f_back
97092,Wrapper
97093,python-varname
97094,from varname.helpers import Wrapper
97095,
97096,foo = Wrapper(dict())
97097,
97098,# foo.name == 'foo'
97099,# foo.value == {}
97100,foo.value['bar'] = 2
97101,n_jobs = Wrapper(<original_value>) 
97102,users = Wrapper(<original_value>) 
97103,queues = Wrapper(<original_value>) 
97104,priorities = Wrapper(<original_value>) 
97105,
97106,"list_of_dicts = [n_jobs, users, queues, priorities]"
97107,columns = [d.name for d in list_of_dicts]
97108,"# ['n_jobs', 'users', 'queues', 'priorities']"
97109,# REMEMBER that you have to access the <original_value> by d.value
97110,python-varname
97111,Wrapper
97112,pytest
97113,assert
97114,exec()
97115,from varname import varname
97116,
97117,def func():
97118,  return varname()
97119,
97120,def wrapped():
97121,  return func()
97122,
97123,x = wrapped()
97124,wrapped
97125,x = wrapped()
97126,x
97127,frame
97128,ignore
97129,varname
97130,x = [wrapped()]
97131,varname
97132,executing
97133,python-varname
97134,x = str(func())
97135,f-string
97136,foo
97137,varname
97138,from varname import varname
97139,
97140,def func():
97141,  return varname()
97142,
97143,# In external uses
97144,x = func() # 'x'
97145,y = func() # 'y'
97146,python-varname
97147,nameof
97148,will
97149,argname
97150,pip3 install python-varname==0.1.5
97151,from varname import nameof
97152,v0.2.0
97153,python-varname
97154,caller
97155,nameof
97156,columns
97157,columns
97158,for
97159,caller
97160,varname
97161,import inspect
97162,
97163,
97164,def retrieve_name(var):
97165,"        """""""
97166,        Gets the name of var. Does it from the out most frame inner-wards.
97167,        :param var: variable to get name from.
97168,        :return: string
97169,"        """""""
97170,        for fi in reversed(inspect.stack()):
97171,"            names = [var_name for var_name, var_val in fi.frame.f_locals.items() if var_val is var]"
97172,            if len(names) > 0:
97173,                return names[0]
97174,retrieve_name(SomeClass.some_attribute)
97175,stop_on_error
97176,>>> a = []
97177,>>> b = a
97178,>>> id(a)
97179,140031712435664
97180,>>> id(b)
97181,140031712435664
97182,a
97183,b
97184,def name(**variables):
97185,    return [x for x in variables]
97186,name(variable=variable)
97187,name(variable=variable)
97188,['variable']
97189,name(variable=another_variable)
97190,['another_variable']
97191,['variable']
97192,>>> a = []
97193,>>> b = a
97194,>>> name(a=b)
97195,['a']
97196,>>> name(b=a)
97197,['b']
97198,"lambda name, var: name"
97199,>> my_var = 5
97200,">> my_var_name = [ k for k,v in locals().items() if v == my_var][0]"
97201,>> my_var_name 
97202,'my_var'
97203, >> my_var = 5
97204,">> my_var_name = [ k for k,v in locals().items() if v is my_var][0]"
97205,>> my_var_name 
97206,'my_var'
97207,if
97208,myvar
97209,is`` rather than 
97210,"my_var_name = [ k for k,v in locals().items() if v is e][0]"
97211,from sorcery import dict_of
97212,
97213,"columns = dict_of(n_jobs, users, queues, priorities)"
97214,"columns = dict(n_jobs=n_jobs, users=users, queues=queues, priorities=priorities)"
97215,inspect
97216,autodict
97217,x = 'foo'
97218,y = 'bar'
97219,"d = autodict(x, y)"
97220,print d
97221,"{'x': 'foo', 'y': 'bar'}"
97222,locals()
97223,globals()
97224,def autodict(*args):
97225,"    get_rid_of = ['autodict(', ',', ')', '\n']"
97226,    calling_code = inspect.getouterframes(inspect.currentframe())[1][4][0]
97227,    calling_code = calling_code[calling_code.index('autodict'):]
97228,    for garbage in get_rid_of:
97229,"        calling_code = calling_code.replace(garbage, '')"
97230,"    var_names, var_values = calling_code.split(), args"
97231,"    dyn_dict = {var_name: var_value for var_name, var_value in"
97232,"                zip(var_names, var_values)}"
97233,    return dyn_dict
97234,inspect.getouterframes
97235,autodict
97236,>>> locals()['foo']
97237,{}
97238,>>> globals()['foo']
97239,{}
97240,locals
97241,globals
97242,import inspect
97243,
97244,def print_this(var):
97245,    callers_local_vars = inspect.currentframe().f_back.f_locals.items()
97246,"    print(str([k for k, v in callers_local_vars if v is var][0])+': '+str(var))"
97247,***Input & Function call:***
97248,my_var = 10
97249,
97250,print_this(my_var)
97251,
97252,***Output**:*
97253,my_var: 10
97254,"def getVariableName(variable, globalVariables=globals().copy()):"
97255,"    """""" Get Variable Name as String by comparing its ID to globals() Variables' IDs"
97256,
97257,        args:
97258,            variable(var): Variable to find name for (Obviously this variable has to exist)
97259,
97260,        kwargs:
97261,            globalVariables(dict): Copy of the globals() dict (Adding to Kwargs allows this function to work properly when imported from another .py)
97262,"    """""""
97263,    for globalVariable in globalVariables:
97264,        if id(variable) == id(globalVariables[globalVariable]): # If our Variable's ID matches this Global Variable's ID...
97265,            return globalVariable # Return its name from the Globals() dict
97266,def
97267,class
97268,lambda
97269,<lambda>
97270,"'...','...'"
97271,namedtuple
97272,"list_of_dicts = [n_jobs, users, queues, priorities]"
97273,
97274,"dict_of_dicts = {""n_jobs"" : n_jobs, ""users"" : users, ""queues"" : queues, ""priorities"" : priorities}"
97275,def getVariableNames(variable):
97276,    results = []
97277,    globalVariables=globals().copy()
97278,    for globalVariable in globalVariables:
97279,        if id(variable) == id(globalVariables[globalVariable]):
97280,            results.append(globalVariable)
97281,    return results
97282,
97283,a = 1
97284,b = 1
97285,getVariableNames(a)
97286,"# ['a', 'b']"
97287,"def retrieve_name(x, Vars=vars()):"
97288,    for k in Vars:
97289,"        if isinstance(x, type(Vars[k])):"
97290,            if x is Vars[k]:
97291,                return k
97292,    return None
97293,"def whatis(string, x):"
97294,"    print(string+' value=',repr(x),type(x))"
97295,    return string+' value='+repr(x)+repr(type(x))
97296,i_f=3.01
97297,i_n=int(i_f)
97298,i_s=str(i_n)
97299,"i_l=[i_f, i_n, i_s]"
97300,"i_u=(i_f, i_n, i_s)"
97301,
97302,## make report that identifies all types
97303,report='\n'+20*'#'+'\nThis is the report:\n'
97304,"report+= whatis('i_f ',i_f)+'\n'"
97305,"report+=whatis('i_n ',i_n)+'\n'"
97306,"report+=whatis('i_s ',i_s)+'\n'"
97307,"report+=whatis('i_l ',i_l)+'\n'"
97308,"report+=whatis('i_u ',i_u)+'\n'"
97309,print(report)
97310,def Retriever(bar):
97311,"    return (list(globals().keys()))[list(map(lambda x: id(x), list(globals().values()))).index(id(bar))]"
97312,"4.41 us +/- 1.2 us per loop (mean +/- std. dev. of 7 runs, 100000 loops each"
97313,"t = (var1, var2)"
97314,var2
97315,var1
97316,class Param:
97317,"    def __init__(self, name, value):"
97318,        self.name = name
97319,        self.value = value
97320,"frame_folder_count = Param({'name':'frame_folder_count', 'value':10})"
97321,>>> frame_folder_count.name
97322,'frame_folder_count'
97323,pydantic
97324,"Param('frame_folder_count', 10)"
97325,"Param(**{'name':'frame_folder_count', 'value':10})"
97326,">>> def varname(v, scope=None):"
97327,        d = globals() if not scope else vars(scope); return [k for k in d if d[k] == v]
97328,...
97329,>>> d1 = {'a': 'ape'}; d2 = {'b': 'bear'}; d3 = {'c': 'cat'}
97330,">>> ld = [d1, d2, d3]"
97331,>>> [varname(d) for d in ld]
97332,"[['d1'], ['d2'], ['d3']]"
97333,>>> d5 = d3
97334,>>> [varname(d) for d in ld]
97335,"[['d1'], ['d2'], ['d3', 'd5']]"
97336,">>> def varname(v, scope=None):"
97337,        d = globals() if not scope else vars(scope); return [k for k in d if d[k] is v]
97338,...
97339,>>> [varname(d) for d in ld]
97340,"[['d1'], ['d2'], ['d3', 'd5']]"
97341,RuntimeError: dictionary changed size during iteration
97342,class CustomDict(dict):
97343,"    def __add__(self, other):"
97344,"        return CustomDict({**self, **other})"
97345,
97346,class GlobalBase(type):
97347,"    def __getattr__(cls, key):"
97348,        return CustomDict({key: globals()[key]})
97349,
97350,"    def __getitem__(cls, keys):"
97351,        return CustomDict({key: globals()[key] for key in keys})
97352,
97353,class G(metaclass=GlobalBase):
97354,    pass
97355,
97356,"x, y, z = 0, 1, 2"
97357,
97358,"print('method 1:', G['x', 'y', 'z']) # Outcome: method 1: {'x': 0, 'y': 1, 'z': 2}"
97359,"print('method 2:', G.x + G.y + G.z) # Outcome: method 2: {'x': 0, 'y': 1, 'z': 2}"
97360,
97361,"A = [0, 1]"
97362,"B = [1, 2]"
97363,pd.DataFrame(G.A + G.B) # It will return a data frame with A and B columns
97364,#direct get from called function code
97365,def retrieve_name_ex(var):
97366,    stacks = inspect.stack()
97367,    try:
97368,        func = stacks[0].function
97369,        code = stacks[1].code_context[0]
97370,        s = code.index(func)
97371,"        s = code.index(""("", s + len(func)) + 1"
97372,"        e = code.index("")"", s)"
97373,        return code[s:e].strip()
97374,    except:
97375,"        return """""
97376,import re
97377,def retrieve_name(func):
97378,"    return re.match(""<function\s+(\w+)\s+at.*"", str(func)).group(1)"
97379,
97380,def foo(x):
97381,    return x**2
97382,
97383,print(retrieve_name(foo))
97384,# foo
97385,def find_var_name(val):
97386,
97387,    dict_list = []
97388,    global_dict = dict(globals())
97389,
97390,"    for k, v in global_dict.items():"
97391,"        dict_list.append([k, v])"
97392,   
97393,    return [item[0] for item in dict_list if item[1] == val]
97394,
97395,var1 = 'hello'
97396,var2 = 'hello'
97397,find_var_name('hello')
97398,"['var1', 'var2']"
97399,import inspect
97400,def varname(x):
97401,"  return [k for k,v in inspect.currentframe().f_back.f_locals.items() if v is x][0]"
97402,
97403,hi = 123
97404,print(varname(hi))
97405,# Variable to string of variable name
97406,
97407,"def var_name(variable,i=0):"
97408,
97409,  results = []
97410,  for name in globals():   
97411,     if eval(name) == variable:
97412,       results.append(name)
97413,
97414,  if len(results) > 1:
97415,    print('Warning:' )
97416,"    print('   var_name() has found',len(results), 'possible outcomes.')"
97417,"    print('   Please choose the suitable parameter ""i"". Where ""i"" is the index')"
97418,    print('   that matches your choice from the list below.')
97419,"    print('  ',results) ; print('')"
97420,
97421,  return results[i]
97422,var_1 = 10
97423,"var_name(var_1) # Output will be ""var_1"""
97424,var_1 = 8
97425,var_2 = 8
97426,var_1 = 8
97427,var_2 = 8
97428,"var_name(var_2)  # Output will be ""var_1"" too but Warning will appear"
97429,class FieldThatKnowsItsName():
97430,    def __init__(self):
97431,        self.name = None
97432,        self._value= None
97433,        self.owner = None
97434, 
97435,"    def __set_name__(self, owner, name):"
97436,        self.name = name
97437,        self.owner = owner
97438,        self.owner.fields[self.name] = self
97439,
97440,"    def __get__(self, instance, instance_type):"
97441,        return self
97442,
97443,"    def __set__(self, instance, value):"
97444,        self = value
97445,
97446,class SuperTable:
97447,    fields = {}
97448,    field_1=FieldThatKnowsItsName()
97449,    field_2=FieldThatKnowsItsName()
97450,
97451,table = SuperTable()
97452,print(table.field_1.name)
97453,print(table.field_2.name)
97454,kwargs
97455,var=2
97456,def getVarName(**kwargs):
97457,    return list(kwargs.keys())[0]
97458,
97459,print (getVarName(var = var))
97460,vel
97461,vol
97462,area
97463,dfstr_list = [
97464,"              'vel',"
97465,"              'vol',"
97466,              'area'
97467,             ]
97468,for dfstr in dfstr_list:
97469,    if dfstr in globals():
97470,"        exec(f""{dfstr}.to_excel(writer,sheet_name=dfstr)"")"
97471,/usr/bin/python
97472,from gnuradio import gr
97473,/usr/local/lib/python2.7/site-packages/gnuradio
97474,.idea
97475,.idea
97476,.idea
97477,>> import gnuradio
97478,>> gnuradio.__file__
97479,"""path/to/gnuradio"""
97480,foobarbaz/
97481,  gnuradio/
97482,    __init__.py
97483,    other_file.py
97484,+
97485,sys.path
97486,apt-get
97487,pip
97488,site-packages
97489,/usr/bin/python
97490,python2.7
97491,File > Invalidate Caches > Invalidate and Restart
97492,$ cd MyProject
97493,$ python2 -m virtualenv env
97494,$ . env/bin/activate
97495,$ pip install -U pip setuptools  # get the latest versions
97496,$ pip install flask  # install other packages
97497,File > Settings > Project > Project Interpreter
97498,virtualenvwrapper
97499,Add Local
97500,pip
97501,apt-get install gnuradio
97502,$ python2 -m virtualenv --system-site-packages env
97503,setup.py
97504,setup.py
97505,"from setuptools import setup, find_packages"
97506,
97507,setup(
97508,"    name='mypackage',"
97509,"    version='0.1',"
97510,"    packages=find_packages(),"
97511,)
97512,$ pip install -e /path/to/first/project
97513,import sys
97514,sys.path.append('C:\\Python27\\Lib\site-packages')
97515,.idea
97516,.idea
97517,.idea
97518,at
97519,cron
97520,cron
97521, 0 2 * * 7 /usr/bin/run-backup # run the backups at 0200 on Every Sunday
97522," 0 9-17/2 * * 1-5 /usr/bin/purge-temps # run the purge temps command, every 2 hours between 9am and 5pm on Mondays to Fridays."
97523,import schedule
97524,import time
97525,
97526,def job():
97527,"    print(""I'm working..."")"
97528,
97529,schedule.every(10).minutes.do(job)
97530,schedule.every().hour.do(job)
97531,"schedule.every().day.at(""10:30"").do(job)"
97532,
97533,while 1:
97534,    schedule.run_pending()
97535,    time.sleep(1)
97536,schedule
97537,do()
97538,"schedule.every().hour.do(job, param1, param2)"
97539,"from datetime import datetime, timedelta"
97540,import time
97541,
97542,# Some utility classes / functions first
97543,class AllMatch(set):
97544,"    """"""Universal set - match everything"""""""
97545,"    def __contains__(self, item): return True"
97546,
97547,allMatch = AllMatch()
97548,
97549,def conv_to_set(obj):  # Allow single integer to be provided
97550,"    if isinstance(obj, (int,long)):"
97551,        return set([obj])  # Single item
97552,"    if not isinstance(obj, set):"
97553,        obj = set(obj)
97554,    return obj
97555,
97556,# The actual Event class
97557,class Event(object):
97558,"    def __init__(self, action, min=allMatch, hour=allMatch, "
97559,"                       day=allMatch, month=allMatch, dow=allMatch, "
97560,"                       args=(), kwargs={}):"
97561,        self.mins = conv_to_set(min)
97562,        self.hours= conv_to_set(hour)
97563,        self.days = conv_to_set(day)
97564,        self.months = conv_to_set(month)
97565,        self.dow = conv_to_set(dow)
97566,        self.action = action
97567,        self.args = args
97568,        self.kwargs = kwargs
97569,
97570,"    def matchtime(self, t):"
97571,"        """"""Return True if this event should trigger at the specified datetime"""""""
97572,        return ((t.minute     in self.mins) and
97573,                (t.hour       in self.hours) and
97574,                (t.day        in self.days) and
97575,                (t.month      in self.months) and
97576,                (t.weekday()  in self.dow))
97577,
97578,"    def check(self, t):"
97579,        if self.matchtime(t):
97580,"            self.action(*self.args, **self.kwargs)"
97581,c = CronTab(
97582,"  Event(perform_backup, 0, 2, dow=6 ),"
97583,"  Event(purge_temps, 0, range(9,18,2), dow=range(0,5))"
97584,)
97585,class CronTab(object):
97586,"    def __init__(self, *events):"
97587,        self.events = events
97588,
97589,    def run(self):
97590,        t=datetime(*datetime.now().timetuple()[:5])
97591,        while 1:
97592,            for e in self.events:
97593,                e.check(t)
97594,
97595,            t += timedelta(minutes=1)
97596,            while datetime.now() < t:
97597,                time.sleep((t - datetime.now()).seconds)
97598,pip install anything
97599,"""""""Gevent based crontab implementation"""""""
97600,
97601,"from datetime import datetime, timedelta"
97602,import gevent
97603,
97604,# Some utility classes / functions first
97605,def conv_to_set(obj):
97606,"    """"""Converts to set allowing single integer to be provided"""""""
97607,
97608,"    if isinstance(obj, (int, long)):"
97609,        return set([obj])  # Single item
97610,"    if not isinstance(obj, set):"
97611,        obj = set(obj)
97612,    return obj
97613,
97614,class AllMatch(set):
97615,"    """"""Universal set - match everything"""""""
97616,"    def __contains__(self, item): "
97617,        return True
97618,
97619,allMatch = AllMatch()
97620,
97621,class Event(object):
97622,"    """"""The Actual Event Class"""""""
97623,
97624,"    def __init__(self, action, minute=allMatch, hour=allMatch, "
97625,"                       day=allMatch, month=allMatch, daysofweek=allMatch, "
97626,"                       args=(), kwargs={}):"
97627,        self.mins = conv_to_set(minute)
97628,        self.hours = conv_to_set(hour)
97629,        self.days = conv_to_set(day)
97630,        self.months = conv_to_set(month)
97631,        self.daysofweek = conv_to_set(daysofweek)
97632,        self.action = action
97633,        self.args = args
97634,        self.kwargs = kwargs
97635,
97636,"    def matchtime(self, t1):"
97637,"        """"""Return True if this event should trigger at the specified datetime"""""""
97638,        return ((t1.minute     in self.mins) and
97639,                (t1.hour       in self.hours) and
97640,                (t1.day        in self.days) and
97641,                (t1.month      in self.months) and
97642,                (t1.weekday()  in self.daysofweek))
97643,
97644,"    def check(self, t):"
97645,"        """"""Check and run action if needed"""""""
97646,
97647,        if self.matchtime(t):
97648,"            self.action(*self.args, **self.kwargs)"
97649,
97650,class CronTab(object):
97651,"    """"""The crontab implementation"""""""
97652,
97653,"    def __init__(self, *events):"
97654,        self.events = events
97655,
97656,    def _check(self):
97657,"        """"""Check all events in separate greenlets"""""""
97658,
97659,        t1 = datetime(*datetime.now().timetuple()[:5])
97660,        for event in self.events:
97661,"            gevent.spawn(event.check, t1)"
97662,
97663,        t1 += timedelta(minutes=1)
97664,        s1 = (t1 - datetime.now()).seconds + 1
97665,"        print ""Checking again in %s seconds"" % s1"
97666,"        job = gevent.spawn_later(s1, self._check)"
97667,
97668,    def run(self):
97669,"        """"""Run the cron forever"""""""
97670,
97671,        self._check()
97672,        while True:
97673,            gevent.sleep(60)
97674,
97675,import os 
97676,def test_task():
97677,"    """"""Just an example that sends a bell and asd to all terminals"""""""
97678,
97679,    os.system('echo asd | wall')  
97680,
97681,cron = CronTab(
97682,"  Event(test_task, 22, 1 ),"
97683,"  Event(test_task, 0, range(9,18,2), daysofweek=range(0,5)),"
97684,)
97685,cron.run()
97686,"schedule = ""*/5 * * * *"" # Run every five minutes"
97687,
97688,nextRunTime = getNextCronRunTime(schedule)
97689,while True:
97690,     roundedDownTime = roundDownTime()
97691,     if (roundedDownTime == nextRunTime):
97692,         ####################################
97693,         ### Do your periodic thing here. ###
97694,         ####################################
97695,         nextRunTime = getNextCronRunTime(schedule)
97696,     elif (roundedDownTime > nextRunTime):
97697,         # We missed an execution. Error. Re initialize.
97698,         nextRunTime = getNextCronRunTime(schedule)
97699,     sleepTillTopOfNextMinute()
97700,from croniter import croniter
97701,"from datetime import datetime, timedelta"
97702,
97703,# Round time down to the top of the previous minute
97704,"def roundDownTime(dt=None, dateDelta=timedelta(minutes=1)):"
97705,    roundTo = dateDelta.total_seconds()
97706,    if dt == None : dt = datetime.now()
97707,    seconds = (dt - dt.min).seconds
97708,    rounding = (seconds+roundTo/2) // roundTo * roundTo
97709,"    return dt + timedelta(0,rounding-seconds,-dt.microsecond)"
97710,
97711,"# Get next run time from now, based on schedule specified by cron string"
97712,def getNextCronRunTime(schedule):
97713,"    return croniter(schedule, datetime.now()).get_next(datetime)"
97714,
97715,# Sleep till the top of the next minute
97716,def sleepTillTopOfNextMinute():
97717,    t = datetime.utcnow()
97718,    sleeptime = 60 - (t.second + t.microsecond/1000000.0)
97719,    time.sleep(sleeptime)
97720,elif
97721,"""* * * * *"""
97722,time.sleep
97723,if
97724,"@repeatEveryDay(hour=6, minutes=30)"
97725,def sayHello(name):
97726,"    print(f""Hello {name}"")"
97727,
97728,"sayHello(""Bob"") # Now this function will be invoked every day at 6.30 a.m"
97729,"def repeatEveryDay(hour, minutes=0, seconds=0):"
97730,"    """""""
97731,"    Decorator that will run the decorated function everyday at that hour, minutes and seconds."
97732,    :param hour: 0-24
97733,    :param minutes: 0-60 (Optional)
97734,    :param seconds: 0-60 (Optional)
97735,"    """""""
97736,    def decoratorRepeat(func):
97737,
97738,        @functools.wraps(func)
97739,"        def wrapperRepeat(*args, **kwargs):"
97740,
97741,            def getLocalTime():
97742,                return datetime.datetime.fromtimestamp(time.mktime(time.localtime()))
97743,
97744,            # Get the datetime of the first function call
97745,            td = datetime.timedelta(seconds=15)
97746,            if wrapperRepeat.nextSent == None:
97747,                now = getLocalTime()
97748,"                wrapperRepeat.nextSent = datetime.datetime(now.year, now.month, now.day, hour, minutes, seconds)"
97749,                if wrapperRepeat.nextSent < now:
97750,                    wrapperRepeat.nextSent += td
97751,
97752,            # Waiting till next day
97753,            while getLocalTime() < wrapperRepeat.nextSent:
97754,                time.sleep(1)
97755,
97756,            # Call the function
97757,"            func(*args, **kwargs)"
97758,
97759,            # Get the datetime of the next function call
97760,            wrapperRepeat.nextSent += td
97761,"            wrapperRepeat(*args, **kwargs)"
97762,
97763,        wrapperRepeat.nextSent = None
97764,        return wrapperRepeat
97765,
97766,    return decoratorRepeat
97767,time.sleep(1)
97768,pass
97769,pass
97770,import pycron
97771,import time
97772,
97773,while True:
97774,    if pycron.is_now('0 2 * * 0'):   # True Every Sunday at 02:00
97775,        print('running backup')
97776,        time.sleep(60)               # The process should take at least 60 sec
97777,                                     # to avoid running twice in one minute
97778,    else:
97779,        time.sleep(15)               # Check again in 15 seconds
97780,from aqcron import At
97781,from time import sleep
97782,from datetime import datetime
97783,
97784,# Event scheduling
97785,event_1 = At( second=5 )
97786,"event_2 = At( second=[0,20,40] )"
97787,
97788,while True:
97789,    now = datetime.now()
97790,
97791,    # Event check
97792,"    if now in event_1: print ""event_1"""
97793,"    if now in event_2: print ""event_2"""
97794,
97795,    sleep(1)
97796,# aqcron.py
97797,
97798,class At(object):
97799,"    def __init__(self, year=None,    month=None,"
97800,"                 day=None,     weekday=None,"
97801,"                 hour=None,    minute=None,"
97802,                 second=None):
97803,        loc = locals()
97804,"        loc.pop(""self"")"
97805,"        self.at = dict((k, v) for k, v in loc.iteritems() if v != None)"
97806,
97807,"    def __contains__(self, now):"
97808,        for k in self.at.keys():
97809,            try:
97810,"                if not getattr(now, k) in self.at[k]: return False"
97811,            except TypeError:
97812,"                if self.at[k] != getattr(now, k): return False"
97813,        return True
97814,fips'
97815,'row'
97816,df
97817,          row
97818,0    00000 UNITED STATES
97819,1    01000 ALABAMA
97820,"2    01001 Autauga County, AL"
97821,"3    01003 Baldwin County, AL"
97822,"4    01005 Barbour County, AL"
97823,df.row.str[:]
97824,df['fips'] = hello
97825,hello
97826,         fips       row
97827,0    00000 UNITED STATES
97828,1    01000 ALABAMA 
97829,"2    01001 Autauga County, AL"
97830,"3    01003 Baldwin County, AL"
97831,"4    01005 Barbour County, AL"
97832,read_table()
97833,read_fwf()
97834,"df[['A', 'B']] = df['AB'].str.split(' ', 1, expand=True)"
97835,expand=True
97836,None
97837,.tolist()
97838,zip()
97839,str.extract()
97840,.str.split()
97841,>>> import pandas as pd
97842,">>> df = pd.DataFrame({'AB': ['A1-B1', 'A2-B2']})"
97843,>>> df
97844,
97845,      AB
97846,0  A1-B1
97847,1  A2-B2
97848,>>> df['AB_split'] = df['AB'].str.split('-')
97849,>>> df
97850,
97851,      AB  AB_split
97852,"0  A1-B1  [A1, B1]"
97853,"1  A2-B2  [A2, B2]"
97854,.str.split()
97855,.str
97856,">>> upper_lower_df = pd.DataFrame({""U"": [""A"", ""B"", ""C""]})"
97857,>>> upper_lower_df
97858,
97859,   U
97860,0  A
97861,1  B
97862,2  C
97863,">>> upper_lower_df[""L""] = upper_lower_df[""U""].str.lower()"
97864,>>> upper_lower_df
97865,
97866,   U  L
97867,0  A  a
97868,1  B  b
97869,2  C  c
97870,>>> df['AB'].str[0]
97871,
97872,0    A
97873,1    A
97874,"Name: AB, dtype: object"
97875,
97876,>>> df['AB'].str[1]
97877,
97878,0    1
97879,1    2
97880,"Name: AB, dtype: object"
97881,.str
97882,">>> df['AB'].str.split('-', 1).str[0]"
97883,
97884,0    A1
97885,1    A2
97886,"Name: AB, dtype: object"
97887,
97888,">>> df['AB'].str.split('-', 1).str[1]"
97889,
97890,0    B1
97891,1    B2
97892,"Name: AB, dtype: object"
97893,">>> df['A'], df['B'] = df['AB'].str.split('-', 1).str"
97894,>>> df
97895,
97896,      AB  AB_split   A   B
97897,"0  A1-B1  [A1, B1]  A1  B1"
97898,"1  A2-B2  [A2, B2]  A2  B2"
97899,.str.split()
97900,expand=True
97901,">>> df['AB'].str.split('-', 1, expand=True)"
97902,
97903,    0   1
97904,0  A1  B1
97905,1  A2  B2
97906,>>> df = df[['AB']]
97907,>>> df
97908,
97909,      AB
97910,0  A1-B1
97911,1  A2-B2
97912,
97913,">>> df.join(df['AB'].str.split('-', 1, expand=True).rename(columns={0:'A', 1:'B'}))"
97914,
97915,      AB   A   B
97916,0  A1-B1  A1  B1
97917,1  A2-B2  A2  B2
97918,expand=True
97919,">>> df = pd.DataFrame({'AB': ['A1-B1', 'A2-B2', 'A3-B3-C3']})"
97920,>>> df
97921,         AB
97922,0     A1-B1
97923,1     A2-B2
97924,2  A3-B3-C3
97925,">>> df['A'], df['B'], df['C'] = df['AB'].str.split('-')"
97926,Traceback (most recent call last):
97927,  [...]    
97928,ValueError: Length of values does not match length of index
97929,>>> 
97930,expand=True
97931,None
97932,>>> df.join(
97933,"...     df['AB'].str.split('-', expand=True).rename("
97934,"...         columns={0:'A', 1:'B', 2:'C'}"
97935,...     )
97936,... )
97937,         AB   A   B     C
97938,0     A1-B1  A1  B1  None
97939,1     A2-B2  A2  B2  None
97940,2  A3-B3-C3  A3  B3    C3
97941,.split()
97942,"df.join(df['AB'].str.split('-', 1, expand=True).rename(columns={0:'A', 1:'B'}))"
97943,Series.str.extract
97944,                            row
97945,    0       00000 UNITED STATES
97946,    1             01000 ALABAMA
97947,"    2  01001 Autauga County, AL"
97948,"    3  01003 Baldwin County, AL"
97949,"    4  01005 Barbour County, AL"
97950,"df = pd.DataFrame(df.row.str.split(' ',1).tolist(),"
97951,"                                 columns = ['fips','row'])"
97952,   fips                 row
97953,0  00000       UNITED STATES
97954,1  01000             ALABAMA
97955,"2  01001  Autauga County, AL"
97956,"3  01003  Baldwin County, AL"
97957,"4  01005  Barbour County, AL"
97958,index = df.index
97959,split
97960,tolist
97961,ValueError
97962,df
97963,row
97964,df.my_column_name.split(...)
97965,"In [11]: df.row.str.extract('(?P<fips>\d{5})((?P<state>[A-Z ]*$)|(?P<county>.*?), (?P<state_code>[A-Z]{2}$))')"
97966,Out[11]: 
97967,    fips                    1           state           county state_code
97968,0  00000        UNITED STATES   UNITED STATES              NaN        NaN
97969,1  01000              ALABAMA         ALABAMA              NaN        NaN
97970,"2  01001   Autauga County, AL             NaN   Autauga County         AL"
97971,"3  01003   Baldwin County, AL             NaN   Baldwin County         AL"
97972,"4  01005   Barbour County, AL             NaN   Barbour County         AL"
97973,
97974,[5 rows x 5 columns]
97975,(?P<fips>\d{5})
97976,\d
97977,"""fips"""
97978,"((?P<state>[A-Z ]*$)|(?P<county>.*?), (?P<state_code>[A-Z]{2}$))"
97979,|
97980,(?P<state>[A-Z ]*$)
97981,*
97982,[A-Z ]
97983,"""state"""
97984,$
97985,"(?P<county>.*?), (?P<state_code>[A-Z]{2}$))"
97986,.*
97987,state_code
97988,$
97989,(?P<label>...)
97990,<group_name>
97991,123-456
97992,(\d+)
97993,123
97994,123-456
97995,123-456-789
97996,"df[['fips', 'row']] = df['row'].str.split(' ', n=1, expand=True)"
97997,str.split
97998,expand=True
97999,DataFrame
98000,"df = pd.DataFrame({'row': ['00000 UNITED STATES', '01000 ALABAMA', "
98001,"                           '01001 Autauga County, AL', '01003 Baldwin County, AL', "
98002,"                           '01005 Barbour County, AL']})"
98003,print (df)
98004,                        row
98005,0       00000 UNITED STATES
98006,1             01000 ALABAMA
98007,"2  01001 Autauga County, AL"
98008,"3  01003 Baldwin County, AL"
98009,"4  01005 Barbour County, AL"
98010,
98011,
98012,
98013,"df[['a','b']] = df['row'].str.split(n=1, expand=True)"
98014,print (df)
98015,                        row      a                   b
98016,0       00000 UNITED STATES  00000       UNITED STATES
98017,1             01000 ALABAMA  01000             ALABAMA
98018,"2  01001 Autauga County, AL  01001  Autauga County, AL"
98019,"3  01003 Baldwin County, AL  01003  Baldwin County, AL"
98020,"4  01005 Barbour County, AL  01005  Barbour County, AL"
98021,DataFrame.pop
98022,"df[['a','b']] = df.pop('row').str.split(n=1, expand=True)"
98023,print (df)
98024,       a                   b
98025,0  00000       UNITED STATES
98026,1  01000             ALABAMA
98027,"2  01001  Autauga County, AL"
98028,"3  01003  Baldwin County, AL"
98029,"4  01005  Barbour County, AL"
98030,"df[['a','b']] = df['row'].str.split(n=1, expand=True)"
98031,"df = df.drop('row', axis=1)"
98032,print (df)
98033,
98034,       a                   b
98035,0  00000       UNITED STATES
98036,1  01000             ALABAMA
98037,"2  01001  Autauga County, AL"
98038,"3  01003  Baldwin County, AL"
98039,"4  01005  Barbour County, AL"
98040,#remove n=1 for split by all whitespaces
98041,"df[['a','b']] = df['row'].str.split(expand=True)"
98042,DataFrame
98043,print (df['row'].str.split(expand=True))
98044,       0        1        2     3
98045,0  00000   UNITED   STATES  None
98046,1  01000  ALABAMA     None  None
98047,"2  01001  Autauga  County,    AL"
98048,"3  01003  Baldwin  County,    AL"
98049,"4  01005  Barbour  County,    AL"
98050,DataFrame
98051,join
98052,"df = pd.DataFrame({'row': ['00000 UNITED STATES', '01000 ALABAMA', "
98053,"                           '01001 Autauga County, AL', '01003 Baldwin County, AL', "
98054,"                           '01005 Barbour County, AL'],"
98055,                    'a':range(5)})
98056,print (df)
98057,   a                       row
98058,0  0       00000 UNITED STATES
98059,1  1             01000 ALABAMA
98060,"2  2  01001 Autauga County, AL"
98061,"3  3  01003 Baldwin County, AL"
98062,"4  4  01005 Barbour County, AL"
98063,
98064,df = df.join(df['row'].str.split(expand=True))
98065,print (df)
98066,
98067,   a                       row      0        1        2     3
98068,0  0       00000 UNITED STATES  00000   UNITED   STATES  None
98069,1  1             01000 ALABAMA  01000  ALABAMA     None  None
98070,"2  2  01001 Autauga County, AL  01001  Autauga  County,    AL"
98071,"3  3  01003 Baldwin County, AL  01003  Baldwin  County,    AL"
98072,"4  4  01005 Barbour County, AL  01005  Barbour  County,    AL"
98073,df = df.join(df.pop('row').str.split(expand=True))
98074,print (df)
98075,   a      0        1        2     3
98076,0  0  00000   UNITED   STATES  None
98077,1  1  01000  ALABAMA     None  None
98078,"2  2  01001  Autauga  County,    AL"
98079,"3  3  01003  Baldwin  County,    AL"
98080,"4  4  01005  Barbour  County,    AL   "
98081,ValueError: columns overlap but no suffix specified:
98082,"df[""flips""], df[""row_name""] = zip(*df[""row""].str.split().tolist())"
98083,"del df[""row""]  "
98084,zip argument #1 must support iteration
98085,"df['column_name'].str.split('/', expand=True)"
98086,Series.str.partition
98087,partition
98088,"df['row'].str.partition(' ')[[0, 2]]"
98089,
98090,       0                   2
98091,0  00000       UNITED STATES
98092,1  01000             ALABAMA
98093,"2  01001  Autauga County, AL"
98094,"3  01003  Baldwin County, AL"
98095,"4  01005  Barbour County, AL"
98096,"df['row'].str.partition(' ')[[0, 2]].rename({0: 'fips', 2: 'row'}, axis=1)"
98097,
98098,    fips                 row
98099,0  00000       UNITED STATES
98100,1  01000             ALABAMA
98101,"2  01001  Autauga County, AL"
98102,"3  01003  Baldwin County, AL"
98103,"4  01005  Barbour County, AL"
98104,join
98105,concat
98106,"df.join(df['row'].str.partition(' ')[[0, 2]])"
98107,"pd.concat([df, df['row'].str.partition(' ')[[0, 2]]], axis=1)"
98108,
98109,                        row      0                   2
98110,0       00000 UNITED STATES  00000       UNITED STATES
98111,1             01000 ALABAMA  01000             ALABAMA
98112,"2  01001 Autauga County, AL  01001  Autauga County, AL"
98113,"3  01003 Baldwin County, AL  01003  Baldwin County, AL"
98114,"4  01005 Barbour County, AL  01005  Barbour County, AL"
98115,df.assign
98116,"split = df_selected['name'].str.split(',', 1, expand=True)"
98117,"df_split = df_selected.assign(first_name=split[0], last_name=split[1])"
98118,"df_split.drop('name', 1, inplace=True)"
98119,df_split = (df_selected
98120,"            .assign(list_col=lambda df: df['name'].str.split(',', 1, expand=False),"
98121,"                    first_name=lambda df: df.list_col.str[0],"
98122,                    last_name=lambda df: df.list_col.str[1])
98123,            .drop(columns=['list_col']))
98124," col1 = df[""<col_name>""].apply(<function>)"
98125, col2 = ...
98126," df = df.join(col1.to_frame(name=""<name1>""))"
98127," df = df.join(col2.toframe(name=""<name2>""))"
98128," df = df.drop([""<col_name>""], axis=1)"
98129,"lambda x: x.split("" "")[0] # for the first element"
98130,"lambda x: x.split("" "")[-1] # for the last element"
98131,"df[""<col_name>""].str.slice(stop=5)"
98132,"df[""<col_name>""].str.slice(start=6)"
98133,sys.input.readline
98134,timer.sleep()
98135,"<type 'exceptions.TypeError'>: [raw_]input expected at most 1 arguments, got 2"
98136,"import sys, select"
98137,
98138,"print ""You have ten seconds to answer!"""
98139,
98140,"i, o, e = select.select( [sys.stdin], [], [], 10 )"
98141,
98142,if (i):
98143,"  print ""You said"", sys.stdin.readline().strip()"
98144,else:
98145,"  print ""You said nothing!"""
98146,"termios.tcflush(sys.stdin, termios.TCIFLUSH)"
98147,import signal
98148,TIMEOUT = 5 # number of seconds your want for timeout
98149,
98150,"def interrupted(signum, frame):"
98151,"    ""called when read times out"""
98152,    print 'interrupted!'
98153,"signal.signal(signal.SIGALRM, interrupted)"
98154,
98155,def input():
98156,    try:
98157,            print 'You have 5 seconds to type in your stuff...'
98158,            foo = raw_input()
98159,            return foo
98160,    except:
98161,            # timeout
98162,            return
98163,
98164,# set alarm
98165,signal.alarm(TIMEOUT)
98166,s = input()
98167,# disable the alarm after success
98168,signal.alarm(0)
98169,"print 'You typed', s"
98170,"""interrupted"""
98171,input
98172,import subprocess
98173,"subprocess.call('read -t 30', shell=True)"
98174,"import threading, msvcrt"
98175,import sys
98176,
98177,"def readInput(caption, default, timeout = 5):"
98178,    class KeyboardThread(threading.Thread):
98179,        def run(self):
98180,            self.timedout = False
98181,            self.input = ''
98182,            while True:
98183,                if msvcrt.kbhit():
98184,                    chr = msvcrt.getche()
98185,                    if ord(chr) == 13:
98186,                        break
98187,                    elif ord(chr) >= 32:
98188,                        self.input += chr
98189,                if len(self.input) == 0 and self.timedout:
98190,                    break    
98191,
98192,
98193,"    sys.stdout.write('%s(%s):'%(caption, default));"
98194,    result = default
98195,    it = KeyboardThread()
98196,    it.start()
98197,    it.join(timeout)
98198,    it.timedout = True
98199,    if len(it.input) > 0:
98200,        # wait for rest of input
98201,        it.join()
98202,        result = it.input
98203,    print ''  # needed to move to next line
98204,    return result
98205,
98206,# and some examples of usage
98207,"ans = readInput('Please type a name', 'john') "
98208,print 'The name is %s' % ans
98209,"ans = readInput('Please enter a number', 10 ) "
98210,print 'The number is %s' % ans 
98211,sys.stdout.write
98212,"print(prompt, end='', flush=True)"
98213,pip install inputimeout
98214,"from inputimeout import inputimeout, TimeoutOccurred"
98215,
98216,"if __name__ == ""__main__"":"
98217,    try:
98218,"        c = inputimeout(prompt='hello\n', timeout=3)"
98219,    except TimeoutOccurred:
98220,        c = 'timeout'
98221,    print(c)
98222,msvcrt
98223,"import sys, time, msvcrt"
98224,
98225,"def readInput( caption, default, timeout = 5):"
98226,
98227,    start_time = time.time()
98228,"    sys.stdout.write('%s(%s):'%(caption, default))"
98229,    sys.stdout.flush()
98230,    input = ''
98231,    while True:
98232,        if msvcrt.kbhit():
98233,            byte_arr = msvcrt.getche()
98234,            if ord(byte_arr) == 13: # enter_key
98235,                break
98236,            elif ord(byte_arr) >= 32: #space_char
98237,"                input += """".join(map(chr,byte_arr))"
98238,        if len(input) == 0 and (time.time() - start_time) > timeout:
98239,"            print(""timing out, using default value."")"
98240,            break
98241,
98242,    print('')  # needed to move to next line
98243,    if len(input) > 0:
98244,        return input
98245,    else:
98246,        return default
98247,
98248,# and some examples of usage
98249,"ans = readInput('Please type a name', 'john') "
98250,print( 'The name is %s' % ans)
98251,"ans = readInput('Please enter a number', 10 ) "
98252,print( 'The number is %s' % ans) 
98253,#! /usr/bin/env python
98254,
98255,import signal
98256,
98257,timeout = None
98258,
98259,def main():
98260,"    inp = stdinWait(""You have 5 seconds to type text and press <Enter>... "", ""[no text]"", 5, ""Aw man! You ran out of time!!"")"
98261,    if not timeout:
98262,"        print ""You entered"", inp"
98263,    else:
98264,"        print ""You didn't enter anything because I'm on a tight schedule!"""
98265,
98266,"def stdinWait(text, default, time, timeoutDisplay = None, **kwargs):"
98267,"    signal.signal(signal.SIGALRM, interrupt)"
98268,    signal.alarm(time) # sets timeout
98269,    global timeout
98270,    try:
98271,        inp = raw_input(text)
98272,        signal.alarm(0)
98273,        timeout = False
98274,    except (KeyboardInterrupt):
98275,"        printInterrupt = kwargs.get(""printInterrupt"", True)"
98276,        if printInterrupt:
98277,"            print ""Keyboard interrupt"""
98278,        timeout = True # Do this so you don't mistakenly get input when there is none
98279,        inp = default
98280,    except:
98281,        timeout = True
98282,        if not timeoutDisplay is None:
98283,            print timeoutDisplay
98284,        signal.alarm(0)
98285,        inp = default
98286,    return inp
98287,
98288,"def interrupt(signum, frame):"
98289,"    raise Exception("""")"
98290,
98291,"if __name__ == ""__main__"":"
98292,    main()
98293,"def _input(msg, q):"
98294,    ra = raw_input(msg)
98295,    if ra:
98296,        q.put(ra)
98297,    else:
98298,"        q.put(""None"")"
98299,    return
98300,
98301,"def _slp(tm, q):"
98302,    time.sleep(tm)
98303,"    q.put(""Timeout"")"
98304,    return
98305,
98306,"def wait_for_input(msg=""Press Enter to continue"", time=10):"
98307,    q = Queue.Queue()
98308,"    th = threading.Thread(target=_input, args=(msg, q,))"
98309,"    tt = threading.Thread(target=_slp, args=(time, q,))"
98310,
98311,    th.start()
98312,    tt.start()
98313,    ret = None
98314,    while True:
98315,        ret = q.get()
98316,        if ret:
98317,            th._Thread__stop()
98318,            tt._Thread__stop()
98319,            return ret
98320,    return ret
98321,
98322,print time.ctime()    
98323,t= wait_for_input()
98324,"print ""\nResponse :"",t "
98325,print time.ctime()
98326,    from threading import Thread
98327,    class myClass:
98328,        _input = None
98329,
98330,        def __init__(self):
98331,            get_input_thread = Thread(target=self.get_input)
98332,            get_input_thread.daemon = True  # Otherwise the thread won't be terminated when the main program terminates.
98333,            get_input_thread.start()
98334,            get_input_thread.join(timeout=20)
98335,
98336,            if myClass._input is None:
98337,"                print(""No input was given within 20 seconds"")"
98338,            else:
98339,"                print(""Input given was: {}"".format(myClass._input))"
98340,
98341,
98342,        @classmethod
98343,        def get_input(cls):
98344,"            cls._input = input("""")"
98345,            return
98346,"def input_process(stdin_fd, sq, str):"
98347,    sys.stdin = os.fdopen(stdin_fd)
98348,    try:
98349,        inp = input (str)
98350,        sq.put (True)
98351,    except:
98352,        sq.put (False)
98353,
98354,"def input_in_time (str, max_time_sec):"
98355,    sq = multiprocessing.Queue()
98356,"    p = multiprocessing.Process(target=input_process, args=( sys.stdin.fileno(), sq, str))"
98357,    p.start()
98358,    t = time.time()
98359,    inp = False
98360,    while True:
98361,        if not sq.empty():
98362,            inp = sq.get()
98363,            break
98364,        if time.time() - t > max_time_sec:
98365,            break
98366,    p.terminate()
98367,    sys.stdin = os.fdopen( sys.stdin.fileno() )
98368,    return inp
98369,get()
98370,select
98371,read
98372,"import sys, select"
98373,
98374,"def timeout_input(prompt, timeout=3, default=""""):"
98375,"    print(prompt, end=': ', flush=True)"
98376,"    inputs, outputs, errors = select.select([sys.stdin], [], [], timeout)"
98377,    print()
98378,"    return (0, sys.stdin.readline().strip()) if inputs else (-1, default)"
98379,"In [29]: timeout_input(""Continue? (Y/n)"", 3, ""y"")                                                                                                                                                                  "
98380,Continue? (Y/n): 
98381,"Out[29]: (-1, 'y')"
98382,
98383,"In [30]: timeout_input(""Continue? (Y/n)"", 3, ""y"")                                                                                                                                                                  "
98384,Continue? (Y/n): n
98385,
98386,"Out[30]: (0, 'n')"
98387,yes_or_no
98388,"In [33]: yes_or_no_3 = lambda prompt: 'n' not in timeout_input(prompt + ""? (Y/n)"", 3, default=""y"")[1].lower()                                                                                                      "
98389,
98390,"In [34]: yes_or_no_3(""Continue"")                                                                                                                                                                                   "
98391,Continue? (Y/n): 
98392,Out[34]: True
98393,
98394,"In [35]: yes_or_no_3(""Continue"")                                                                                                                                                                                   "
98395,Continue? (Y/n): no
98396,
98397,Out[35]: False
98398,from threading import Thread
98399,import time
98400,
98401,
98402,def get_input():
98403,    while True:
98404,        print(input('> '))
98405,
98406,
98407,t1 = Thread(target=get_input)
98408,t1.setDaemon(True)
98409,t1.start()
98410,time.sleep(3)
98411,print('program exceeds')
98412,$ pip install inputimeout
98413,
98414,"from inputimeout import inputimeout, TimeoutOccurred"
98415,try:
98416,"    something = inputimeout(prompt='>>', timeout=5)"
98417,except TimeoutOccurred:
98418,    something = 'something'
98419,print(something)
98420,import subprocess  
98421,subprocess.call('timeout /T 30')
98422,func-timeout
98423,pip
98424,"from func_timeout import FunctionTimedOut, func_timeout"
98425,
98426,try:
98427,"   ans = func_timeout(5, lambda: int(input('What is the sum of 2 and 3?\n')))"
98428,   print(ans)
98429,except FunctionTimedOut:
98430,   print(5)
98431,func_timeout
98432,question()
98433,TimedOutException
98434,except
98435,input
98436,func-timeout
98437,stdin
98438,input
98439,stdin
98440,input
98441,"Fatal Python error: could not acquire lock for <_io.BufferedReader name='<stdin>'> at interpreter shutdown, possibly due to daemon threads"
98442,"def input_process(stdin_fd, sq, sstr):"
98443,    sys.stdin = os.fdopen(stdin_fd)
98444,    try:
98445,        inp = input(sstr)
98446,        sq.put(True)
98447,    except:
98448,        sq.put(False)
98449,
98450,"def input_in_time(sstr, max_time_sec):"
98451,    sq = multiprocessing.Queue()
98452,"    p = multiprocessing.Process(target=input_process, args=( sys.stdin.fileno(), sq, sstr))"
98453,    p.start()
98454,    t = time.time()
98455,    inp = False
98456,    while True:
98457,
98458,        if not sq.empty():
98459,            inp = sq.get()
98460,            break
98461,        if time.time() - t > max_time_sec:
98462,            break
98463,
98464,        tleft=int( (t+max_time_sec)-time.time())
98465,        if tleft<max_time_sec-1 and tleft>0:
98466,            print('\n  ...time left '+str(tleft)+'s\ncommand:')
98467,
98468,        time.sleep(2)
98469,
98470,    p.terminate()
98471,    sys.stdin = os.fdopen( sys.stdin.fileno() )
98472,    return inp
98473,
98474,if __name__=='__main__':
98475,"    input_in_time(""command:"", 17)"
98476,import sys
98477,import subprocess
98478,
98479,
98480,def switch():
98481,    if len(sys.argv) == 1:
98482,        main()
98483,"    elif sys.argv[1] == ""inp"":"
98484,        print(input(''))
98485,    else:
98486,"        print(""Wrong arguments:"", sys.argv[1:])"
98487,
98488,
98489,def main():
98490,"    passw = input_timed('You have 10 seconds to enter password:', timeout=10)"
98491,    if passw is None:
98492,"        print(""Time's out! You explode!"")"
98493,"    elif passw == ""PasswordShmashword"":"
98494,"        print(""H-h-how did you know you h-h-hacker"")"
98495,    else:
98496,"        print(""I spare your life because you at least tried"")"
98497,
98498,
98499,"def input_timed(*args, timeout, **kwargs):"
98500,"    """""""
98501,    Print a message and await user input - return None if timedout
98502,    :param args: positional arguments passed to print()
98503,    :param timeout: number of seconds to wait before returning None
98504,    :param kwargs: keyword arguments passed to print()
98505,    :return: user input or None if timed out
98506,"    """""""
98507,"    print(*args, **kwargs)"
98508,    try:
98509,"        out: bytes = subprocess.run([""python"", sys.argv[0], ""inp""], capture_output=True, timeout=timeout).stdout"
98510,    except subprocess.TimeoutExpired:
98511,        return None
98512,    return out.decode('utf8').splitlines()[0]
98513,
98514,
98515,switch()
98516,"from inputimeout import inputimeout, TimeoutOccurred"
98517,try:
98518,"    something = inputimeout(prompt='>>', timeout=5)"
98519,except TimeoutOccurred:
98520,    something = 'No input.'
98521,print(something)
98522,import multiprocessing
98523,import sys
98524,
98525,"def input_with_timeout(prompt, timeout=None):"
98526,"    """"""Requests the user to enter a code at the command line."""""""
98527,    queue = multiprocessing.Queue()
98528,    process = multiprocessing.Process(
98529,"        _input_with_timeout_process, args=(sys.stdin.fileno(), queue, prompt),"
98530,    )
98531,    process.start()
98532,    try:
98533,        process.join(timeout)
98534,        if process.is_alive():
98535,"            raise ValueError(""Timed out waiting for input."")"
98536,        return queue.get()
98537,    finally:
98538,        process.terminate()
98539,
98540,
98541,"def _input_with_timeout_process(stdin_file_descriptor, queue, prompt):"
98542,    sys.stdin = os.fdopen(stdin_file_descriptor)
98543,    queue.put(input(prompt))
98544,threading
98545,multiprocessing
98546,input
98547,input
98548,input
98549,import atexit
98550,import builtins
98551,import queue
98552,import threading
98553,
98554,
98555,def _make_input_func():
98556,    prompt_queue = queue.Queue(maxsize=1)
98557,    input_queue = queue.Queue(maxsize=1)
98558,
98559,    def get_input():
98560,        while (prompt := prompt_queue.get()) != GeneratorExit:
98561,            inp = builtins.input(prompt)
98562,            input_queue.put(inp)
98563,            prompt_queue.task_done()
98564,
98565,"    input_thread = threading.Thread(target=get_input, daemon=True)"
98566,
98567,    last_call_timed_out = False
98568,
98569,"    def input_func(prompt=None, timeout=None):"
98570,"        """"""Mimics :function:`builtins.input`, with an optional timeout"
98571,
98572,        :param prompt: string to pass to builtins.input
98573,        :param timeout: how long to wait for input in seconds; None means indefinitely
98574,
98575,"        :return: the received input if not timed out, otherwise None"
98576,"        """""""
98577,        nonlocal last_call_timed_out
98578,
98579,        if not last_call_timed_out:
98580,"            prompt_queue.put(prompt, block=False)"
98581,        else:
98582,"            print(prompt, end='', flush=True)"
98583,
98584,        try:
98585,            result = input_queue.get(timeout=timeout)
98586,            last_call_timed_out = False
98587,            return result
98588,        except queue.Empty:
98589,            print(flush=True) # optional: end prompt line if no input received
98590,            last_call_timed_out = True
98591,            return None
98592,
98593,
98594,    input_thread.start()
98595,    return input_func
98596,
98597,
98598,input = _make_input_func()
98599,del _make_input_func
98600,_make_input_func
98601,input
98602,builtins.input
98603,input
98604,builtins.input
98605,input
98606,None
98607,builtins.input
98608,import time
98609,
98610,if __name__ == '__main__':
98611,    timeout = 2
98612,    start_t = time.monotonic()
98613,"    if (inp := input(f""Enter something (you have {timeout} seconds): "", timeout)) is not None:"
98614,"        print(""Received some input:"", repr(inp))"
98615,    else:
98616,        end_t = time.monotonic()
98617,"        print(f""Timed out after {end_t - start_t} seconds"")"
98618,
98619,"    inp = input(""Enter something else (I'll wait this time): "")"
98620,"    print(""Received some input:"", repr(inp))"
98621,    
98622,"    input(f""Last chance to say something (you have {timeout} seconds): "", timeout)"
98623,Enter
98624,Enter
98625,class
98626,keyboard
98627,Enter
98628,input()
98629,input()
98630,Enter
98631,import threading
98632,import keyboard    # https://github.com/boppreh/keyboard
98633,
98634,class Utilities:
98635,
98636,    # Class variable
98637,    response = None
98638,
98639,    @classmethod
98640,"    def user_input(cls, timeout):"
98641,
98642,        def question():
98643,"            cls.response = input(""Enter something: "")"
98644,
98645,        t = threading.Thread(target=question)
98646,        # Daemon property allows the target function to terminate after timeout
98647,        t.daemon = True    
98648,        t.start()
98649,        t.join(timeout)
98650,
98651,        if cls.response:
98652,            # Do something
98653,        else:
98654,            # Do something else
98655,            # Optional.  Use if you have other input() statements in your code
98656,"            keyboard.send(""enter"")"
98657,Utilities.user_input(3)
98658,import signal
98659,"def alarm_handler(signum, frame):"
98660,    raise TimeoutError
98661,"def input_with_timeout(prompt, timeout=30):"
98662,"    """""" get input with timeout"
98663,
98664,    :param prompt: the prompt to print
98665,"    :param timeout: timeout in seconds, or None to disable"
98666,
98667,    :returns: the input
98668,    :raises: TimeoutError if times out
98669,"    """""""
98670,    # set signal handler
98671,    if timeout is not None:
98672,"        signal.signal(signal.SIGALRM, alarm_handler)"
98673,        signal.alarm(timeout) # produce SIGALRM in `timeout` seconds
98674,    try:
98675,        return input(prompt)
98676,    except TimeoutError as to:
98677,        raise to
98678,    finally:
98679,        if timeout is not None:
98680,            signal.alarm(0) # cancel alarm
98681,
98682,"def yes_or_no(question, default='y', timeout=None):"
98683,"    """""" Get y/n answer with default choice and optional timeout"
98684,
98685,    :param question: prompt
98686,"    :param default: the default choice, i.e. 'y' or 'n'"
98687,"    :param timeout: the timeout in seconds, default is None"
98688,
98689,    :returns: True or False
98690,"    """""""
98691,    if default is not None and (default!='y' and default!='n'):
98692,        log.error(f'bad option for default: {default}')
98693,        quit(1)
98694,    y='Y' if default=='y' else 'y'
98695,    n='N' if default=='n' else 'n'
98696,"    while ""the answer is invalid"":"
98697,        try:
98698,            to_str='' if timeout is None else f'(Timeout {default} in {timeout}s)'
98699,"            reply = str(input_with_timeout(f'{question} {to_str} ({y}/{n}): ',timeout=timeout)).lower().strip()"
98700,        except TimeoutError:
98701,"            log.warning(f'timeout expired, returning default={default} answer')"
98702,            reply=''
98703,        if len(reply)==0:
98704,            return True if default=='y' else False
98705,        elif reply[0] == 'y':
98706,            return True
98707,        if reply[0] == 'n':
98708,            return False
98709,"if yes_or_no(f'model {latest_model_folder} exists, start from it?', timeout=TIMEOUT):"
98710,     log.info(f'initializing model from {latest_model_folder}')
98711,     model = load_model(latest_model_folder)
98712,else:
98713,     log.info('creating new empty model')
98714,     model = create_model()
98715,"from inputimeout import inputimeout, TimeoutOccurred"
98716,
98717,"def timed_input (user_prompt, timeout=5):"
98718,"    user_input = """""
98719,    timed_out = False
98720,    try:
98721,"        user_input = inputimeout (prompt=user_prompt, timeout=timeout)"
98722,    except TimeoutOccurred:
98723,        timed_out = True
98724,"    return (timed_out, user_input)"
98725,
98726,"timed_out, user_input = timed_input (""Enter something within 3s... "", timeout=3)"
98727,
98728,if timed_out:
98729,"    print (""You failed to enter anything!"")"
98730,else:
98731,"    print (f""You entered {user_input}"")"
98732,"from multiprocessing import Queue, Process"
98733,from queue import Empty
98734,
98735,class ProcessTimedOutException(Exception):
98736,"    def __init__(self, message: str):"
98737,        self.message: str = message
98738,
98739,
98740,class Terminal:
98741,
98742,    @staticmethod
98743,"    def input_with_timeout(message: str = '', timeout: int = 60) -> Tuple[Optional[str], Optional[Exception]]:"
98744,        queue = Queue()
98745,        err: Optional[Exception] = None
98746,        user_input: Optional[str] = None
98747,"        input_thread = Process(target=Terminal._input_async, args=(queue, message), daemon=True)"
98748,        input_thread.start()
98749,        try:
98750,            user_input = queue.get(timeout=timeout)
98751,        except Empty:
98752,            input_thread.terminate()
98753,            err = ProcessTimedOutException(f'process timed out')
98754,"        return user_input, err"
98755,
98756,    @staticmethod
98757,"    def _input_async(queue, message: str = ''):"
98758,        sys.stdin = open(0)
98759,        user_input = input(message).strip()
98760,        queue.put(user_input)
98761,
98762,
98763,if __name__ == '__main__':
98764,    input_message: str = 'enter anything'
98765,"    user_input, err = Terminal.input_with_timeout(message=input_message,timeout=60)"
98766,    if err is not None:
98767,        raise err
98768,    print(user_input)                    
98769,pip install input-timeout
98770,        from input_timeout import InputTimeout
98771,
98772,
98773,
98774,        i = InputTimeout(
98775,
98776,"            timeout=20,"
98777,
98778,"            input_message="" >> "","
98779,
98780,"            timeout_message=""'Sorry, you were not fast enough'"","
98781,
98782,"            defaultvalue=""slow"","
98783,
98784,"            cancelbutton=""esc"","
98785,
98786,"            show_special_characters_warning='If you want to use special characters, you have to use alt+\\d\\d\\d\\d\nPress ""ctrl"" to see a complete list of all combinations!',"
98787,
98788,        ).finalvalue
98789,
98790,"        print(f""\n\nYour input was {i}"")"
98791,
98792,
98793,
98794,        i = InputTimeout(
98795,
98796,"            timeout=5,"
98797,
98798,"            input_message="" >> "","
98799,
98800,"            timeout_message=""Sorry, you were not fast enough: "","
98801,
98802,"            defaultvalue=""slow"","
98803,
98804,"            cancelbutton=""esc"","
98805,
98806,"            show_special_characters_warning='If you want to use special characters, you have to use alt+\\d\\d\\d\\d\nPress ""ctrl"" to see a complete list of all combinations!',"
98807,
98808,        ).finalvalue
98809,
98810,"        print(f""\n\nYour input was {i}"")"
98811,
98812,
98813,
98814,        i = InputTimeout(
98815,
98816,"            timeout=10,"
98817,
98818,"            input_message="" >> "","
98819,
98820,"            timeout_message=""Sorry, you were not fast enough"","
98821,
98822,"            defaultvalue=""Wake up!"","
98823,
98824,"            cancelbutton=None,"
98825,
98826,"            show_special_characters_warning=None,"
98827,
98828,        ).finalvalue
98829,
98830,"        print(f""\n\nYour input was {i}"")"
98831,
98832,
98833,
98834,        i = InputTimeout(
98835,
98836,"            timeout=10,"
98837,
98838,"            input_message="" >> "","
98839,
98840,"            timeout_message=""Sorry, you were not fast enough"","
98841,
98842,"            defaultvalue=""Are you sleeping?"","
98843,
98844,"            cancelbutton=""esc"","
98845,
98846,"            show_special_characters_warning=None,"
98847,
98848,        ).finalvalue
98849,
98850,"        print(f""\n\nYour input was {i}"")"
98851,
98852,
98853,
98854,        i = InputTimeout(
98855,
98856,"            timeout=10,"
98857,
98858,"            input_message="" >>"","
98859,
98860,"            timeout_message=""Sorry, you were not fast enough"","
98861,
98862,"            defaultvalue=""you are so slow"","
98863,
98864,"            cancelbutton=None,"
98865,
98866,"            show_special_characters_warning='If you want to use special characters, you have to use alt+\\d\\d\\d\\d\nPress ""ctrl"" to see a complete list of all combinations!',"
98867,
98868,        ).finalvalue
98869,
98870,"        print(f""\n\nYour input was {i}"")"
98871,
98872,#output
98873,
98874,"If you want to use special characters, you have to use alt+\d\d\d\d"
98875,
98876,"Press ""ctrl"" to see a complete list of all combinations!"
98877,
98878, >>  babba
98879,
98880,Your input was babba
98881,
98882,"If you want to use special characters, you have to use alt+\d\d\d\d"
98883,
98884,"Press ""ctrl"" to see a complete list of all combinations!"
98885,
98886,alt+0192    ->  À       alt+0193    ->  Á       alt+0196    ->  Ä       alt+0194    ->  Â       
98887,
98888,alt+0195    ->  Ã       alt+0197    ->  Å       alt+0198    ->  Æ       alt+0228    ->  ä       
98889,
98890,alt+0224    ->  à       alt+0225    ->  á       alt+0226    ->  â       alt+0227    ->  ã       
98891,
98892,alt+0229    ->  å       alt+0230    ->  æ       alt+0199    ->  Ç       alt+0231    ->  ç       
98893,
98894,alt+0208    ->  Ð       alt+0240    ->  ð       alt+0203    ->  Ë       alt+0200    ->  È       
98895,
98896,alt+0201    ->  É       alt+0202    ->  Ê       alt+0235    ->  ë       alt+0232    ->  è       
98897,
98898,alt+0233    ->  é       alt+0234    ->  ê       alt+0207    ->  Ï       alt+0204    ->  Ì       
98899,
98900,alt+0205    ->  Í       alt+0206    ->  Î       alt+0239    ->  ï       alt+0236    ->  ì       
98901,
98902,alt+0237    ->  í       alt+0238    ->  î       alt+0209    ->  Ñ       alt+0241    ->  ñ       
98903,
98904,alt+0214    ->  Ö       alt+0210    ->  Ò       alt+0211    ->  Ó       alt+0212    ->  Ô       
98905,
98906,alt+0213    ->  Õ       alt+0216    ->  Ø       alt+0140    ->  Œ       alt+0246    ->  ö       
98907,
98908,alt+0242    ->  ò       alt+0243    ->  ó       alt+0244    ->  ô       alt+0245    ->  õ       
98909,
98910,alt+0248    ->  ø       alt+0156    ->  œ       alt+0138    ->  Š       alt+0223    ->  ß       
98911,
98912,alt+0154    ->  š       alt+0222    ->  Þ       alt+0254    ->  þ       alt+0220    ->  Ü       
98913,
98914,alt+0217    ->  Ù       alt+0218    ->  Ú       alt+0219    ->  Û       alt+0252    ->  ü       
98915,
98916,alt+0249    ->  ù       alt+0250    ->  ú       alt+0251    ->  û       alt+0159    ->  Ÿ       
98917,
98918,alt+0221    ->  Ý       alt+0255    ->  ÿ       alt+0253    ->  ý       alt+0168    ->  ¨       
98919,
98920,alt+0136    ->  ˆ       alt+0180    ->  ´       alt+0175    ->  ¯       alt+0184    ->  ¸       
98921,
98922,alt+0192    ->  À       alt+0193    ->  Á       alt+0196    ->  Ä       alt+0194    ->  Â       
98923,
98924,alt+0195    ->  Ã       alt+0197    ->  Å       alt+0198    ->  Æ       alt+0228    ->  ä       
98925,
98926,alt+0224    ->  à       alt+0225    ->  á       alt+0226    ->  â       alt+0227    ->  ã       
98927,
98928,alt+0229    ->  å       alt+0230    ->  æ       alt+0199    ->  Ç       alt+0231    ->  ç       
98929,
98930,alt+0208    ->  Ð       alt+0240    ->  ð       alt+0203    ->  Ë       alt+0200    ->  È       
98931,
98932,alt+0201    ->  É       alt+0202    ->  Ê       alt+0235    ->  ë       alt+0232    ->  è       
98933,
98934,alt+0233    ->  é       alt+0234    ->  ê       alt+0207    ->  Ï       alt+0204    ->  Ì       
98935,
98936,alt+0205    ->  Í       alt+0206    ->  Î       alt+0239    ->  ï       alt+0236    ->  ì       
98937,
98938,alt+0237    ->  í       alt+0238    ->  î       alt+0209    ->  Ñ       alt+0241    ->  ñ       
98939,
98940,alt+0214    ->  Ö       alt+0210    ->  Ò       alt+0211    ->  Ó       alt+0212    ->  Ô       
98941,
98942,alt+0213    ->  Õ       alt+0216    ->  Ø       alt+0140    ->  Œ       alt+0246    ->  ö       
98943,
98944,alt+0242    ->  ò       alt+0243    ->  ó       alt+0244    ->  ô       alt+0245    ->  õ       
98945,
98946,alt+0248    ->  ø       alt+0156    ->  œ       alt+0138    ->  Š       alt+0223    ->  ß       
98947,
98948,alt+0154    ->  š       alt+0222    ->  Þ       alt+0254    ->  þ       alt+0220    ->  Ü       
98949,
98950,alt+0217    ->  Ù       alt+0218    ->  Ú       alt+0219    ->  Û       alt+0252    ->  ü       
98951,
98952,alt+0249    ->  ù       alt+0250    ->  ú       alt+0251    ->  û       alt+0159    ->  Ÿ       
98953,
98954,alt+0221    ->  Ý       alt+0255    ->  ÿ       alt+0253    ->  ý       alt+0168    ->  ¨       
98955,
98956,alt+0136    ->  ˆ       alt+0180    ->  ´       alt+0175    ->  ¯       alt+0184    ->  ¸       
98957,
98958,"Sorry, you were not fast enough: "
98959,
98960,Your input was slow
98961,
98962, >>  super
98963,
98964,Your input was super
98965,
98966, >>  adasa
98967,
98968,Your input was adasa
98969,
98970,"If you want to use special characters, you have to use alt+\d\d\d\d"
98971,
98972,"Press ""ctrl"" to see a complete list of all combinations!"
98973,
98974,"Sorry, you were not fast enough"
98975,
98976,Your input was you are so slow
98977,from time import sleep
98978,
98979,print('Please provide input in 20 seconds! (Hit Ctrl-C to start)')
98980,try:
98981,"    for i in range(0,20):"
98982,        sleep(1) # could use a backward counter to be preeety :)
98983,    print('No input is given.')
98984,except KeyboardInterrupt:
98985,    raw_input('Input x:')
98986,"    print('You, you! You know something.')"
98987,>>> (20-10) / (100-10)
98988,0
98989,>>> float((20-10) / (100-10))
98990,0.0
98991,>>> (20-10) / float((100-10))
98992,0.1111111111111111
98993,float
98994,float
98995,>>> 1 / 2
98996,0
98997,float
98998,>>> float(10 - 20) / (100 - 10)
98999,-0.1111111111111111
99000,from __future__ import division
99001,/
99002,>>> from __future__ import division
99003,>>> (10 - 20) / (100 - 10)
99004,-0.1111111111111111
99005,from __future__ import division
99006,1 // 2
99007,__future__
99008,//
99009,__floordiv__()
99010,__future__.division
99011,>>> 10 / 90
99012,0
99013,>>> 10 / 90.0
99014,0.1111111111111111
99015,>>> float(20-10) / (100-10)
99016,0.1111111111111111
99017,>>> (20-10) / float(100-10)
99018,0.1111111111111111
99019,/
99020,>>>20/15
99021,1
99022,
99023,>>>20.0/15.0
99024,1.33333333333
99025,
99026,>>>20.0/15
99027,1.33333333333
99028,/
99029,>>> 20/15
99030,1.33333333333
99031,
99032,>>>20.0/15
99033,1.33333333333
99034,//
99035,//
99036,>>>20//15
99037,1
99038,>>>a = 7.0/4.0
99039,>>>b = 7/4
99040,>>>print a == b
99041,/
99042,float(20 - 10) / (100 - 10)
99043,>>> a = 1/2/3/4/5/4/3
99044,>>> a
99045,0
99046,>>> a = 1/2/3/4/5/4/float(3)
99047,>>> a
99048,0.0
99049,>>> a = 1/2/3/float(4)/5/4/3
99050,>>> a
99051,0.0
99052,>>> a = float(1)/2/3/4/5/4/3
99053,>>> a
99054,0.0006944444444444445
99055,>>> a = float(1/2/3/4/5/4/3)
99056,>>> a
99057,0.0
99058,>>> 1 / 2
99059,0
99060,
99061,>>> 1. / 2.
99062,0.5
99063,>>> (20.0-10) / (100-10)
99064,0.1111111111111111
99065,cv2
99066,from __future__ import division
99067,float(20-10) / (100-10)
99068,float(20-10) / float(100-10)
99069,sage: (20-10) / (100-10)
99070,1/9
99071,int
99072,Integer
99073,1. *
99074,1. * (20-10) / (100-10)
99075,accuracy = 1. * (len(y_val) - sum(y_val)) / len(y_val)
99076,.0
99077,20.0
99078,float()
99079,# A Python program to demonstrate the use of
99080,"# ""//"" for integers"
99081,print (5//2)
99082,print (-5//2)
99083,2
99084,-3
99085,
99086,
99087,
99088,# A Python program to demonstrate use of
99089,"# ""/"" for floating point numbers"
99090,print (5.0/2)
99091,print (-5.0/2)
99092,2.5
99093,-2.5
99094,import discord
99095,import asyncio
99096,from discord.ext import commands
99097,
99098,bot = commands.Bot(command_prefix = '-')
99099,@bot.event
99100,async def on_ready():
99101,    print('Logged in as')
99102,    print(bot.user.name)
99103,    print(bot.user.id)
99104,    print('------')
99105,
99106,@bot.event
99107,async def on_message(message):
99108,    if message.content.startswith('-debug'):
99109,        await message.channel.send('d')
99110,
99111,@bot.command(pass_context=True)
99112,async def ping(ctx):
99113,    await ctx.channel.send('Pong!')
99114,
99115,@bot.command(pass_context=True)
99116,"async def add(ctx, *, arg):"
99117,    await ctx.send(arg)
99118,on_message
99119,bot.process_commands(message)
99120,on_message
99121,@bot.event
99122,async def on_message(message):
99123,    # do some extra stuff here
99124,
99125,    await bot.process_commands(message)
99126,on_message
99127,on_message
99128,on_message
99129,debug
99130,@bot.command()
99131,async def debug(ctx):
99132,"    await ctx.send(""d"")"
99133,def singleton(class_):
99134,    instances = {}
99135,"    def getinstance(*args, **kwargs):"
99136,        if class_ not in instances:
99137,"            instances[class_] = class_(*args, **kwargs)"
99138,        return instances[class_]
99139,    return getinstance
99140,
99141,@singleton
99142,class MyClass(BaseClass):
99143,    pass
99144,MyClass()
99145,MyClass
99146,x = MyClass();
99147,y = MyClass();
99148,t = type(n)();
99149,x == y
99150,x != t && y != t
99151,class Singleton(object):
99152,    _instance = None
99153,"    def __new__(class_, *args, **kwargs):"
99154,"        if not isinstance(class_._instance, class_):"
99155,"            class_._instance = object.__new__(class_, *args, **kwargs)"
99156,        return class_._instance
99157,
99158,"class MyClass(Singleton, BaseClass):"
99159,    pass
99160,__new__
99161,class Singleton(type):
99162,    _instances = {}
99163,"    def __call__(cls, *args, **kwargs):"
99164,        if cls not in cls._instances:
99165,"            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)"
99166,        return cls._instances[cls]
99167,
99168,#Python2
99169,class MyClass(BaseClass):
99170,    __metaclass__ = Singleton
99171,
99172,#Python3
99173,"class MyClass(BaseClass, metaclass=Singleton):"
99174,    pass
99175,__metaclass__
99176,def singleton(class_):
99177,    class class_w(class_):
99178,        _instance = None
99179,"        def __new__(class_, *args, **kwargs):"
99180,            if class_w._instance is None:
99181,"                class_w._instance = super(class_w,"
99182,"                                    class_).__new__(class_,"
99183,"                                                    *args,"
99184,                                                    **kwargs)
99185,                class_w._instance._sealed = False
99186,            return class_w._instance
99187,"        def __init__(self, *args, **kwargs):"
99188,            if self._sealed:
99189,                return
99190,"            super(class_w, self).__init__(*args, **kwargs)"
99191,            self._sealed = True
99192,    class_w.__name__ = class_.__name__
99193,    return class_w
99194,
99195,@singleton
99196,class MyClass(BaseClass):
99197,    pass
99198,_sealed
99199,super()
99200,__new__
99201,__init__
99202,singleton.py
99203,foo.x
99204,Foo.x
99205,Foo().x
99206,Foo.x
99207,class Singleton(type):
99208,    _instances = {}
99209,"    def __call__(cls, *args, **kwargs):"
99210,        if cls not in cls._instances:
99211,"            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)"
99212,        return cls._instances[cls]
99213,        
99214,class Logger(object):
99215,    __metaclass__ = Singleton
99216,class Logger(metaclass=Singleton):
99217,    pass
99218,__init__
99219,        else:
99220,"            cls._instances[cls].__init__(*args, **kwargs)"
99221,if
99222,Singleton.__call__
99223,type(obj)
99224,type
99225,Logger
99226,class 'your_module.Singleton'
99227,Logger
99228,class 'your_module.Logger'
99229,Logger()
99230,Logger
99231,Singleton
99232,__getattr__
99233,myclass.attribute
99234,struct
99235,__new__
99236,SubClassOfSingleton()
99237,__call__
99238,type
99239,Singleton
99240,# works in Python 2 & 3
99241,class _Singleton(type):
99242,"    """""" A metaclass that creates a Singleton base class when called. """""""
99243,    _instances = {}
99244,"    def __call__(cls, *args, **kwargs):"
99245,        if cls not in cls._instances:
99246,"            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)"
99247,        return cls._instances[cls]
99248,
99249,"class Singleton(_Singleton('SingletonMeta', (object,), {})): pass"
99250,
99251,class Logger(Singleton):
99252,    pass
99253,"isinstance(inst, Singleton)"
99254,True
99255,_instances
99256,super()
99257,__new__
99258,class Singleton(object):
99259,  _instances = {}
99260,"  def __new__(class_, *args, **kwargs):"
99261,    if class_ not in class_._instances:
99262,"        class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)"
99263,    return class_._instances[class_]
99264,
99265,class MyClass(Singleton):
99266,  pass
99267,
99268,c = MyClass()
99269,__class__
99270,super()
99271,__new__
99272,__init__
99273,__new__
99274,MyClass()
99275,class Foo(object):
99276,     pass
99277,
99278,some_global_variable = Foo()
99279,s = some_global_variable; str = pickle.dumps(s); s1 = pickle.loads(str); print s is s1; # False
99280,is
99281,pickle.loads
99282,s is s1
99283,True
99284,False
99285,None
99286,pickle.loads
99287,pickle.loads
99288,import ABC as X
99289,import
99290,import * from base_module
99291,import datetime
99292,file_name=None
99293,
99294,def set_file_name(new_file_name: str):
99295,    global file_name
99296,    file_name=new_file_name
99297,
99298,def write(message: str):
99299,    global file_name
99300,    if file_name:
99301,"        with open(file_name, 'a+') as f:"
99302,"            f.write(""{} {}\n"".format(datetime.datetime.now(), message))"
99303,    else:
99304,"        print(""LOG: {}"", message)"
99305,import log
99306,"log.set_file_name(""debug.log"")"
99307,"log.write(""System starting"")"
99308,...
99309,class MySingleton(object):
99310,    def foo(self):
99311,        pass
99312,
99313,my_singleton = MySingleton()
99314,from mysingleton import my_singleton
99315,my_singleton.foo()
99316,mysingleton.py
99317,MySingleton
99318,singleton = lambda c: c()
99319,@singleton
99320,class wat(object):
99321,    def __init__(self): self.x = 1
99322,    def get_x(self): return self.x
99323,
99324,assert wat.get_x() == 1
99325,wat2 = type(wat)()
99326,decorators
99327,serial
99328,>>> from decorators import singleton
99329,>>>
99330,>>> @singleton
99331,... class A:
99332,"...     def __init__(self, *args, **kwargs):"
99333,...         pass
99334,...
99335,>>>
99336,>>> a = A(name='Siddhesh')
99337,">>> b = A(name='Siddhesh', lname='Sathe')"
99338,">>> c = A(name='Siddhesh', lname='Sathe')"
99339,>>> a is b  # has to be different
99340,False
99341,>>> b is c  # has to be same
99342,True
99343,>>>
99344,pip install handy-decorators
99345,ERROR: Could not find a version that satisfies the requirement handy-decorators
99346,previous_instances
99347,@singleton
99348,def f():
99349,"    if not hasattr(f, 'value'):"
99350,"        setattr(f, 'value', singletonvalue)"
99351,    return f.value
99352,Instance
99353,@Singleton
99354,class Foo:
99355,    def __init__(self):
99356,        print 'Foo created'
99357,
99358,"f = Foo() # Error, this isn't how you get the instance of a singleton"
99359,
99360,f = Foo.Instance() # Good. Being explicit is in line with the Python Zen
99361,g = Foo.Instance() # Returns already created instance
99362,
99363,print f is g # True
99364,class Singleton:
99365,"    """""""
99366,    A non-thread-safe helper class to ease implementing singletons.
99367,    This should be used as a decorator -- not a metaclass -- to the
99368,    class that should be a singleton.
99369,
99370,    The decorated class can define one `__init__` function that
99371,"    takes only the `self` argument. Other than that, there are"
99372,    no restrictions that apply to the decorated class.
99373, 
99374,"    To get the singleton instance, use the `Instance` method. Trying"
99375,    to use `__call__` will result in a `TypeError` being raised.
99376,
99377,    Limitations: The decorated class cannot be inherited from.
99378,
99379,"    """""""
99380,
99381,"    def __init__(self, decorated):"
99382,        self._decorated = decorated
99383,
99384,    def Instance(self):
99385,"        """""""
99386,"        Returns the singleton instance. Upon its first call, it creates a"
99387,        new instance of the decorated class and calls its `__init__` method.
99388,"        On all subsequent calls, the already created instance is returned."
99389,
99390,"        """""""
99391,        try:
99392,            return self._instance
99393,        except AttributeError:
99394,            self._instance = self._decorated()
99395,            return self._instance
99396,
99397,    def __call__(self):
99398,        raise TypeError('Singletons must be accessed through `Instance()`.')
99399,
99400,"    def __instancecheck__(self, inst):"
99401,"        return isinstance(inst, self._decorated)"
99402,SingletonList = Singleton(list).Instance(); print(SingletonList is type(SingletonList)())
99403,True
99404,False
99405,import threading
99406,
99407,
99408,# Based on tornado.ioloop.IOLoop.instance() approach.
99409,# See https://github.com/facebook/tornado
99410,class SingletonMixin(object):
99411,    __singleton_lock = threading.Lock()
99412,    __singleton_instance = None
99413,
99414,    @classmethod
99415,    def instance(cls):
99416,        if not cls.__singleton_instance:
99417,            with cls.__singleton_lock:
99418,                if not cls.__singleton_instance:
99419,                    cls.__singleton_instance = cls()
99420,        return cls.__singleton_instance
99421,
99422,
99423,if __name__ == '__main__':
99424,    class A(SingletonMixin):
99425,        pass
99426,
99427,    class B(SingletonMixin):
99428,        pass
99429,
99430,"    a, a2 = A.instance(), A.instance()"
99431,"    b, b2 = B.instance(), B.instance()"
99432,
99433,    assert a is a2
99434,    assert b is b2
99435,    assert a is not b
99436,
99437,"    print('a:  %s\na2: %s' % (a, a2))"
99438,"    print('b:  %s\nb2: %s' % (b, b2))"
99439,__singleton_instance
99440,__singleton_lock
99441,from functools import cache
99442,
99443,@cache
99444,class xxx:
99445,   ....
99446,__new__
99447,class SingletonClass:
99448,    _instance = None
99449,
99450,"    def __new__(cls, *args, **kwargs):"
99451,        # If no instance of class already exits
99452,        if cls._instance is None:
99453,            cls._instance = object.__new__(cls)
99454,            cls._instance._initialized = False
99455,        return cls._instance
99456,        
99457,"    def __init__(self, *args, **kwargs):"
99458,        if self._initialized:
99459,            return
99460,
99461,        self.attr1 = args[0]
99462,        # set the attribute to `True` to not initialize again
99463,        self._initialized = True
99464,class Singleton(type):
99465,    _instances = {}
99466,"    def __call__(cls, *args, **kwargs):"
99467,        if cls not in cls._instances:
99468,"            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)"
99469,        return cls._instances[cls]
99470,
99471,"MC = Singleton('MC', (object), {})"
99472,
99473,class MyClass(MC):
99474,    pass    # Code for the class implementation
99475,class MyClass(metaclass=Singleton)
99476,from abc import ABC
99477,
99478,def singleton(real_cls):
99479,
99480,    class SingletonFactory(ABC):
99481,
99482,        instance = None
99483,
99484,"        def __new__(cls, *args, **kwargs):"
99485,            if not cls.instance:
99486,"                cls.instance = real_cls(*args, **kwargs)"
99487,            return cls.instance
99488,
99489,    SingletonFactory.register(real_cls)
99490,    return SingletonFactory
99491,
99492,# Usage
99493,@singleton
99494,class YourClass:
99495,"    ...  # Your normal implementation, no special requirements."
99496,YourClass
99497,YourClass
99498,YourClass()
99499,YourClass
99500,"isinstance(instance, YourClass)"
99501,__getattr__()
99502,def unique(real_cls):
99503,
99504,    class UniqueFactory(ABC):
99505,
99506,"        @functools.lru_cache(None)  # Handy for 3.2+, but use any memoization decorator you like"
99507,"        def __new__(cls, *args, **kwargs):"
99508,"            return real_cls(*args, **kwargs)"
99509,
99510,    UniqueFactory.register(real_cls)
99511,    return UniqueFactory
99512,class Singleton(type): 
99513,"    # Inherit from ""type"" in order to gain access to method __call__"
99514,"    def __init__(self, *args, **kwargs):"
99515,        self.__instance = None # Create a variable to store the object reference
99516,"        super().__init__(*args, **kwargs)"
99517,
99518,"    def __call__(self, *args, **kwargs):"
99519,        if self.__instance is None:
99520,            # if the object has not already been created
99521,"            self.__instance = super().__call__(*args, **kwargs) # Call the __init__ method of the subclass (Spam) and save the reference"
99522,            return self.__instance
99523,        else:
99524,            # if object (Spam) reference already exists; return it
99525,            return self.__instance
99526,
99527,class Spam(metaclass=Singleton):
99528,"    def __init__(self, x):"
99529,        print('Creating Spam')
99530,        self.x = x
99531,
99532,
99533,if __name__ == '__main__':
99534,    spam = Spam(100)
99535,    spam2 = Spam(200)
99536,Creating Spam
99537,def singleton(class_):
99538,    class class_w(class_):
99539,        _instance = None
99540,"        def __new__(class2, *args, **kwargs):"
99541,            if class_w._instance is None:
99542,"                class_w._instance = super(class_w, class2).__new__(class2, *args, **kwargs)"
99543,                class_w._instance._sealed = False
99544,            return class_w._instance
99545,"        def __init__(self, *args, **kwargs):"
99546,            if self._sealed:
99547,                return
99548,"            super(class_w, self).__init__(*args, **kwargs)"
99549,            self._sealed = True
99550,    class_w.__name__ = class_.__name__
99551,    return class_w
99552,
99553,@singleton
99554,class MyClass(object):
99555,"    def __init__(self, text):"
99556,        print text
99557,    @classmethod
99558,    def name(class_):
99559,        print class_.__name__
99560,
99561,x = MyClass(111)
99562,x.name()
99563,y = MyClass(222)
99564,print id(x) == id(y)
99565,111     # the __init__ is called only on the 1st time
99566,MyClass # the __name__ is preserved
99567,True    # this is actually the same instance
99568,_sealed
99569,__init__
99570,def singleton(cls):
99571,    instance=cls()
99572,    cls.__new__ = cls.__call__= lambda cls: instance
99573,    cls.__init__ = lambda self: None
99574,    return instance
99575,@singleton
99576,class MySingleton:
99577,    #....
99578,singleton = lambda c: c()
99579,MySingleton
99580,MySingleton()
99581,type(MySingleton)()
99582,type(MySingleton)()
99583,MySingleton.__init__()
99584,cls.__init__ = lambda self: pass
99585,singleton
99586,cls.__call__
99587,__call__
99588,"MySingleton(any, list, of, arguments)"
99589,"type(MySingleton)(any, list, of, arguments)"
99590,__init__()
99591,type(MySingleton)()
99592,cls.__init__ = lambda self: pass
99593,cls.__init__ = lambda self: None
99594,__call__
99595,type(MySingleton)()
99596,MySingleton()
99597,mything = object()
99598,#!python
99599,MyNone = object()  # The singleton
99600,
99601,for item in my_list:
99602,    if item is MyNone:  # An Example identity comparison
99603,        raise StopIteration
99604,eval
99605,importlib.reload
99606,Foo
99607,Foo
99608,#!/usr/bin/env python3
99609,
99610,class Foo:
99611,    me = None
99612,
99613,    def __init__(self):
99614,        if Foo.me != None:
99615,            raise Exception('Instance of Foo still exists!')
99616,
99617,        Foo.me = self
99618,
99619,
99620,if __name__ == '__main__':
99621,    Foo()
99622,    Foo()
99623,Traceback (most recent call last):
99624,"  File ""./x.py"", line 15, in <module>"
99625,    Foo()
99626,"  File ""./x.py"", line 8, in __init__"
99627,    raise Exception('Instance of Foo still exists!')
99628,Exception: Instance of Foo still exists!
99629,__call__
99630,__new__
99631,"from typing import Callable, Dict, Set"
99632,
99633,
99634,def singleton(cls_: Callable) -> type:
99635,"    """""" Implements a simple singleton decorator"
99636,"    """""""
99637,    class Singleton(cls_):  # type: ignore
99638,"        __instances: Dict[type, object] = {}"
99639,        __initialized: Set[type] = set()
99640,
99641,"        def __new__(cls, *args, **kwargs):"
99642,            if Singleton.__instances.get(cls) is None:
99643,"                Singleton.__instances[cls] = super().__new__(cls, *args, **kwargs)"
99644,            return Singleton.__instances[cls]
99645,
99646,"        def __init__(self, *args, **kwargs):"
99647,            if self.__class__ not in Singleton.__initialized:
99648,                Singleton.__initialized.add(self.__class__)
99649,"                super().__init__(*args, **kwargs)"
99650,
99651,    return Singleton
99652,
99653,
99654,@singleton
99655,class MyClass(...):
99656,    ...
99657,"isinstance(MyClass(), MyClass)"
99658,property
99659,classmethod
99660,staticmethod
99661,__init__()
99662,print(MyClass().__class__.__name__)
99663,Singleton
99664,MyClass
99665,class MySingleton(object):
99666,"    def __init__(self, *, props={}):"
99667,        self.__dict__ = props
99668,
99669,mything = MySingleton()
99670,mything.test = 1
99671,mything2 = MySingleton()
99672,print(mything2.test)
99673,mything2.test = 5
99674,print(mything.test)
99675,class Elvis():
99676,    def __init__(self):
99677,"        if hasattr(self.__class__, 'instance'):"
99678,            raise Exception()
99679,        self.__class__.instance = self
99680,        # initialisation code...
99681,
99682,    @staticmethod
99683,    def the():
99684,"        if hasattr(Elvis, 'instance'):"
99685,            return Elvis.instance
99686,        return Elvis()
99687,instance
99688,if Elvis() is King.instance:
99689,Elvis
99690,King
99691,the
99692,Elvis.the().leave(Building.the())
99693,__delattr__()
99694,instance
99695,__del__()
99696,try:
99697,    # This is jython-specific
99698,    from synchronize import make_synchronized
99699,except ImportError:
99700,    # This should work across different python implementations
99701,    def make_synchronized(func):
99702,        import threading
99703,        func.__lock__ = threading.Lock()
99704,    
99705,"        def synced_func(*args, **kws):"
99706,            with func.__lock__:
99707,"                return func(*args, **kws)"
99708,
99709,        return synced_func
99710,
99711,class Elvis(object): # NB must be subclass of object to use __new__
99712,    instance = None
99713,
99714,    @classmethod
99715,    @make_synchronized
99716,"    def __new__(cls, *args, **kwargs):"
99717,        if cls.instance is not None:
99718,            raise Exception()
99719,"        cls.instance = object.__new__(cls, *args, **kwargs)"
99720,        return cls.instance
99721,    
99722,    def __init__(self):
99723,        pass
99724,        # initialisation code...
99725,
99726,    @classmethod
99727,    @make_synchronized
99728,    def the(cls):
99729,        if cls.instance is not None:
99730,            return cls.instance
99731,        return cls()
99732,__new__
99733,__new__
99734,__new__
99735,the
99736,instance
99737,__new
99738,__init__
99739,__init__
99740,__init__
99741,the
99742,class SomeSingleton(dict):
99743,    __instance__ = None
99744,"    def __new__(cls, *args,**kwargs):"
99745,        if SomeSingleton.__instance__ is None:
99746,            SomeSingleton.__instance__ = dict.__new__(cls)
99747,        return SomeSingleton.__instance__
99748,
99749,    def __init__(self):
99750,        pass
99751,
99752,"    def some_func(self,arg):"
99753,        pass
99754,__new__
99755,__new__
99756,*args
99757,**kwargs
99758,dict.__new__
99759,"dict.__new__(cls, *args, **kwargs)"
99760,__init__
99761,__init__
99762,SomeSingleton()
99763,__init__
99764,"#decorator, modyfies new_cls"
99765,def _singleton(new_cls):
99766,    instance = new_cls()                                              #2
99767,    def new(cls):
99768,"        if isinstance(instance, cls):                                 #4"
99769,            return instance
99770,        else:
99771,"            raise TypeError(""I can only return instance of {}, caller wanted {}"".format(new_cls, cls))"
99772,    new_cls.__new__  = new                                            #3
99773,    new_cls.__init__ = lambda self: None                              #5
99774,    return new_cls
99775,
99776,
99777,"#decorator, creates new class"
99778,def singleton(cls):
99779,"    new_cls = type('singleton({})'.format(cls.__name__), (cls,), {} ) #1"
99780,    return _singleton(new_cls)
99781,
99782,
99783,#metaclass
99784,"def meta_singleton(name, bases, attrs):"
99785,"    new_cls = type(name, bases, attrs)                                #1"
99786,    return _singleton(new_cls)
99787,cls
99788,cls
99789,singleton(list)
99790,__new__
99791,__new__
99792,instance
99793,TypeError
99794,__new__()
99795,cls
99796,__init__()
99797,"__init__(self[, ...])"
99798,__new__()
99799,instance
99800,__init__
99801,class A:
99802,    instance = None
99803,    # Methods and variables of the class/object A follow
99804,A.instance = A()
99805,A
99806,import builtins
99807,
99808,# -----------------------------------------------------------------------------
99809,"# So..... you would expect that a class would be ""global"" in scope, however"
99810,"#   when different modules use this,"
99811,#   EACH ONE effectively has its own class namespace.  
99812,"#   In order to get around this, we use a metaclass to intercept"
99813,"#   ""new"" and provide the ""truly global metaclass instance"" if it already exists"
99814,
99815,class MetaConfig(type):
99816,"    def __new__(cls, name, bases, dct):"
99817,        try:
99818,            class_inst = builtins.CONFIG_singleton
99819,
99820,        except AttributeError:
99821,"            class_inst = super().__new__(cls, name, bases, dct)"
99822,            builtins.CONFIG_singleton = class_inst
99823,            class_inst.do_load()
99824,
99825,        return class_inst
99826,
99827,# -----------------------------------------------------------------------------
99828,
99829,class Config(metaclass=MetaConfig):
99830,
99831,    config_attr = None
99832,
99833,    @classmethod
99834,    def do_load(cls):
99835,        ...<load-cfg-from-file>...
99836,metaclass
99837,instance
99838,class SingletonMeta(type):
99839,"    def __init__(cls, *args, **kwargs):"
99840,"        super().__init__(*args, **kwargs)"
99841,        cls._instance = None
99842,        cls._locker = threading.Lock()
99843,
99844,    @property
99845,"    def instance(self, *args, **kwargs):"
99846,        if self._instance is None:
99847,            with self._locker:
99848,                if self._instance is None:
99849,"                    self._instance = self(*args, **kwargs)"
99850,        return self._instance
99851,
99852,
99853,class MyClass(metaclass=SingletonMeta):
99854,    def __init__(self):
99855,        # init here
99856,        pass
99857,
99858,
99859,# get the instance
99860,my_class_instance = MyClass.instance
99861,MyClass
99862,import sys
99863,
99864,class Myclass:
99865,  def __init__(self):
99866,     # do your stuff
99867,      vars(sys.modules[__name__])[type(self).__name__] = lambda: self # singletonify
99868,class Singleton():
99869,    def __init__(self):
99870,        Singleton.instance = self
99871,        Singleton.__new__ = lambda _: Singleton.instance
99872,"def set_property(property,value):  "
99873,def get_property(property):  
99874,object.property = value  
99875,value = object.property
99876,class C(object):
99877,    def __init__(self):
99878,        self._x = None
99879,
99880,    @property
99881,    def x(self):
99882,"        """"""I'm the 'x' property."""""""
99883,"        print(""getter of x called"")"
99884,        return self._x
99885,
99886,    @x.setter
99887,"    def x(self, value):"
99888,"        print(""setter of x called"")"
99889,        self._x = value
99890,
99891,    @x.deleter
99892,    def x(self):
99893,"        print(""deleter of x called"")"
99894,        del self._x
99895,
99896,
99897,c = C()
99898,c.x = 'foo'  # setter called
99899,foo = c.x    # getter called
99900,del c.x      # deleter called
99901,._x
99902,property
99903,.x
99904,property
99905,del
99906,value = 'something'
99907,
99908,obj.attribute = value  
99909,value = obj.attribute
99910,del obj.attribute
99911,property
99912,class Obj:
99913,"    """"""property demo"""""""
99914,    #
99915,    @property            # first decorate the getter method
99916,    def attribute(self): # This getter method name is *the* name
99917,        return self._attribute
99918,    #
99919,    @attribute.setter    # the property decorates with `.setter` now
99920,"    def attribute(self, value):   # name, e.g. ""attribute"", is the same"
99921,"        self._attribute = value   # the ""value"" name isn't special"
99922,    #
99923,    @attribute.deleter     # decorate with `.deleter`
99924,"    def attribute(self):   # again, the method name is the same"
99925,        del self._attribute
99926,obj = Obj()
99927,obj.attribute = value  
99928,the_value = obj.attribute
99929,del obj.attribute
99930,"def set_property(property,value):  "
99931,def get_property(property):  
99932,self
99933,class Obj:
99934,
99935,"    def set_property(self, property, value): # don't do this"
99936,        ...
99937,"    def get_property(self, property):        # don't do this either"
99938,        ...
99939,__setattr__
99940,__getattr__
99941,setattr
99942,getattr
99943,"setattr(object, 'property_name', value)"
99944,"getattr(object, 'property_name', default_value)  # default is optional"
99945,@property
99946,class Protective(object):
99947,
99948,    @property
99949,    def protected_value(self):
99950,        return self._protected_value
99951,
99952,    @protected_value.setter
99953,"    def protected_value(self, value):"
99954,        if acceptable(value): # e.g. type or range check
99955,            self._protected_value = value
99956,property
99957,class Protective(object):
99958,"    """"""protected property demo"""""""
99959,    #
99960,"    def __init__(self, start_protected_value=0):"
99961,        self.protected_value = start_protected_value
99962,    # 
99963,    @property
99964,    def protected_value(self):
99965,        return self._protected_value
99966,    #
99967,    @protected_value.setter
99968,"    def protected_value(self, value):"
99969,        if value != int(value):
99970,"            raise TypeError(""protected_value must be an integer"")"
99971,        if 0 <= value <= 100:
99972,            self._protected_value = int(value)
99973,        else:
99974,"            raise ValueError(""protected_value must be "" +"
99975,"                             ""between 0 and 100 inclusive"")"
99976,    #
99977,    @protected_value.deleter
99978,    def protected_value(self):
99979,"        raise AttributeError(""do not delete, protected_value can be set to 0"")"
99980,__init__
99981,self.protected_value
99982,self._protected_value
99983,__init__
99984,>>> p1 = Protective(3)
99985,>>> p1.protected_value
99986,3
99987,>>> p1 = Protective(5.0)
99988,>>> p1.protected_value
99989,5
99990,>>> p2 = Protective(-5)
99991,Traceback (most recent call last):
99992,"  File ""<stdin>"", line 1, in <module>"
99993,"  File ""<stdin>"", line 3, in __init__"
99994,"  File ""<stdin>"", line 15, in protected_value"
99995,ValueError: protectected_value must be between 0 and 100 inclusive
99996,>>> p1.protected_value = 7.3
99997,Traceback (most recent call last):
99998,"  File ""<stdin>"", line 1, in <module>"
99999,"  File ""<stdin>"", line 17, in protected_value"
100000,TypeError: protected_value must be an integer
100001,>>> p1.protected_value = 101
100002,Traceback (most recent call last):
100003,"  File ""<stdin>"", line 1, in <module>"
100004,"  File ""<stdin>"", line 15, in protected_value"
100005,ValueError: protectected_value must be between 0 and 100 inclusive
100006,>>> del p1.protected_value
100007,Traceback (most recent call last):
100008,"  File ""<stdin>"", line 1, in <module>"
100009,"  File ""<stdin>"", line 18, in protected_value"
100010,"AttributeError: do not delete, protected_value can be set to 0"
100011,.setter
100012,.deleter
100013,class Obj:
100014,"    """"""property demo"""""""
100015,    #
100016,    @property
100017,    def get_only(self):
100018,        return self._attribute
100019,    #
100020,    @get_only.setter
100021,"    def get_or_set(self, value):"
100022,        self._attribute = value
100023,    #
100024,    @get_or_set.deleter
100025,    def get_set_or_delete(self):
100026,        del self._attribute
100027,obj = Obj()
100028,# obj.get_only = 'value' # would error
100029,obj.get_or_set = 'value'  
100030,obj.get_set_or_delete = 'new value'
100031,the_value = obj.get_only
100032,del obj.get_set_or_delete
100033,# del obj.get_or_set # would error
100034,set_...
100035,get_...
100036,__init__
100037,self.protected_value
100038,self._protected_value
100039,__init__
100040,self.protected_value = start_protected_value
100041,In [1]: class test(object):
100042,    def __init__(self):
100043,        self.pants = 'pants'
100044,    @property
100045,    def p(self):
100046,        return self.pants
100047,    @p.setter
100048,"    def p(self, value):"
100049,        self.pants = value * 2
100050,   ....: 
100051,In [2]: t = test()
100052,In [3]: t.p
100053,Out[3]: 'pants'
100054,In [4]: t.p = 10
100055,In [5]: t.p
100056,Out[5]: 20
100057,@property
100058,@attribute.setter
100059,class Person(object):
100060,"    def __init__(self, p_name=None):"
100061,        self.name = p_name
100062,
100063,    @property
100064,    def name(self):
100065,        return self._name
100066,
100067,    @name.setter
100068,"    def name(self, new_name):"
100069,        if type(new_name) == str: #type checking for name property
100070,            self._name = new_name
100071,        else:
100072,"            raise Exception(""Invalid value for name"")"
100073,_name
100074,p = Person(12)
100075,Exception: Invalid value for name
100076,>>>p = person('Mike')
100077,>>>print(p.name)
100078,Mike
100079,>>>p.name = 'George'
100080,>>>print(p.name)
100081,George
100082,>>>p.name = 2.3 # Causes an exception
100083,self.name
100084,self._name
100085,p = person('Mike')
100086,p = Person('Mike')
100087,self.name
100088,self._name
100089,__init__
100090,Person(12)
100091,"from objects import properties, self_properties"
100092,
100093,
100094,class Car:
100095,"    with properties(locals(), 'meta') as meta:"
100096,
100097,        @meta.prop(read_only=True)
100098,        def brand(self) -> str:
100099,"            """"""Brand"""""""
100100,
100101,        @meta.prop(read_only=True)
100102,        def max_speed(self) -> float:
100103,"            """"""Maximum car speed"""""""
100104,
100105,        @meta.prop(listener='_on_acceleration')
100106,        def speed(self) -> float:
100107,"            """"""Speed of the car"""""""
100108,            return 0  # Default stopped
100109,
100110,        @meta.prop(listener='_on_off_listener')
100111,        def on(self) -> bool:
100112,"            """"""Engine state"""""""
100113,            return False
100114,
100115,"    def __init__(self, brand: str, max_speed: float = 200):"
100116,"        self_properties(self, locals())"
100117,
100118,"    def _on_off_listener(self, prop, old, on):"
100119,        if on:
100120,"            print(f""{self.brand} Turned on, Runnnnnn"")"
100121,        else:
100122,            self._speed = 0
100123,"            print(f""{self.brand} Turned off."")"
100124,
100125,"    def _on_acceleration(self, prop, old, speed):"
100126,        if self.on:
100127,            if speed > self.max_speed:
100128,"                print(f""{self.brand} {speed}km/h Bang! Engine exploded!"")"
100129,                self.on = False
100130,            else:
100131,"                print(f""{self.brand} New speed: {speed}km/h"")"
100132,        else:
100133,"            print(f""{self.brand} Car is off, no speed change"")"
100134,mycar = Car('Ford')
100135,
100136,# Car is turned off
100137,"for speed in range(0, 300, 50):"
100138,    mycar.speed = speed
100139,
100140,# Car is turned on
100141,mycar.on = True
100142,"for speed in range(0, 350, 50):"
100143,    mycar.speed = speed
100144,"Ford Car is off, no speed change"
100145,"Ford Car is off, no speed change"
100146,"Ford Car is off, no speed change"
100147,"Ford Car is off, no speed change"
100148,"Ford Car is off, no speed change"
100149,"Ford Car is off, no speed change"
100150,"Ford Turned on, Runnnnnn"
100151,Ford New speed: 0km/h
100152,Ford New speed: 50km/h
100153,Ford New speed: 100km/h
100154,Ford New speed: 150km/h
100155,Ford New speed: 200km/h
100156,Ford 250km/h Bang! Engine exploded!
100157,Ford Turned off.
100158,"Ford Car is off, no speed change"
100159,objects
100160,# Python program displaying the use of @property 
100161,class AgeSet:
100162,    def __init__(self):
100163,        self._age = 0
100164,
100165,    # using property decorator a getter function
100166,    @property
100167,    def age(self):
100168,"        print(""getter method called"")"
100169,        return self._age
100170,
100171,    # a setter function
100172,    @age.setter
100173,"    def age(self, a):"
100174,        if(a < 18):
100175,"            raise ValueError(""Sorry your age is below eligibility criteria"")"
100176,"        print(""setter method called"")"
100177,        self._age = a
100178,
100179,pkj = AgeSet()
100180,
100181,"pkj.age = int(input(""set the age using setter: ""))"
100182,
100183,print(pkj.age)
100184,@attr.setter
100185,@property
100186,@property
100187,class myClass:
100188,    def __init__(a):
100189,        self._a = a
100190,
100191,    @property
100192,    def a(self):
100193,        return self._a
100194,@property
100195,class myClass:
100196,"    def __init__(a, b):"
100197,        self.a = a
100198,        self.b = b
100199,
100200,    @property
100201,    def a(self):
100202,        return self.a
100203,self.b
100204,@attribute.setter
100205,class myClass:
100206,"    def __init__(a, b):"
100207,        self.a = a
100208,        self.b = b 
100209,
100210,    @a.setter
100211,"    def a(self, value):"
100212,        return self.a = value
100213,a
100214,b
100215,a
100216,b
100217,@property
100218,@property
100219,@property
100220,@attribute.setter
100221,@property
100222,object
100223,@property
100224,@property
100225,@property
100226,@propery
100227,@property
100228,return this._x
100229,this._x = new_x
100230,@property
100231,@property
100232,__getattribute__
100233,__setattr__
100234,class MyClass:
100235,"    def __init__(self, attrvalue):"
100236,        self.myattr = attrvalue
100237,"    def __getattribute__(self, attr):"
100238,"        if attr == ""myattr"":"
100239,            #Getter for myattr
100240,"    def __setattr__(self, attr):"
100241,"        if attr == ""myattr"":"
100242,            #Setter for myattr
100243,__getattr__
100244,__getattribute__
100245,__getattr__
100246,"def method(self, blah):"
100247,    def __init__(?):
100248,        ....
100249,    ....
100250,self
100251,__init__
100252,class A(object):
100253,    def __init__(self):
100254,        self.x = 'Hello'
100255,
100256,"    def method_a(self, foo):"
100257,        print self.x + ' ' + foo
100258,self
100259,A
100260,a = A()               # We do not pass any argument to the __init__ method
100261,a.method_a('Sailor!') # We only pass a single argument
100262,__init__
100263,A()
100264,__init__
100265,"A(24, 'Hello')"
100266,x = 'Hello'
100267,A.x
100268,a.x
100269,A.x = 'foo'; a.x = 'bar'; print a.x; print A.x
100270,bar
100271,foo
100272,self
100273,object
100274,object
100275,__init__
100276,self
100277,this
100278,class Point:
100279,"    def __init__(self, x, y):"
100280,        self._x = x
100281,        self._y = y
100282,__init__
100283,"x = Point(1,2)"
100284,self
100285,__init__
100286,class Point:
100287,"    def __init__(self, x, y):"
100288,        _x = x
100289,        _y = y
100290,x
100291,y
100292,self._x
100293,self._y
100294,Point
100295,__new__
100296,__init__
100297,self
100298,__init__
100299,__new__
100300,import this
100301,self
100302,self
100303,classmethod
100304,staticmethod
100305,self
100306,__init__
100307,class MyClass(object):
100308,    i = 123
100309,    def __init__(self):
100310,        self.i = 345
100311,     
100312,a = MyClass()
100313,print(a.i)
100314,print(MyClass.i)
100315,345
100316,123
100317,__init__
100318,self
100319,self.a
100320,a
100321,__init__
100322,class MyClass:
100323,"    """"""A simple example class"""""""
100324,    i = 12345
100325,
100326,    def f(self):
100327,        return 'hello world'
100328,MyClass.i
100329,MyClass.f
100330,MyClass.i
100331,__doc__
100332,x = MyClass()
100333,__init__()
100334,def __init__(self):
100335,    self.data = []
100336,__init__()
100337,__init__()
100338,x = MyClass()
100339,__init__()
100340,__init__()
100341,class Complex:
100342,"    def __init__(self, realpart, imagpart):"
100343,        self.r = realpart
100344,        self.i = imagpart
100345,
100346,"x = Complex(3.0, -4.5)"
100347,"x.r, x.i"
100348,class Bill():
100349,"    def __init__(self,apples,figs,dates):"
100350,        self.apples = apples
100351,        self.figs = figs
100352,        self.dates = dates
100353,        self.bill = apples + figs + dates
100354,"        print (""Buy"",self.apples,""apples"", self.figs,""figs "
100355,"                and"",self.dates,""dates. "
100356,"                Total fruitty bill is"",self.bill,"" pieces of fruit :)"")"
100357,"purchase = Bill(5,6,7)"
100358,> Buy 5 apples 6 figs and 7 dates. Total fruitty bill is 18  pieces of
100359,> fruit :)
100360,__init__
100361,#! /usr/bin/python2
100362,
100363,class Person:
100364,
100365,    '''Doc - Inside Class '''
100366,
100367,"    def __init__(self, name):"
100368,        '''Doc - __init__ Constructor'''
100369,        self.n_name = name        
100370,
100371,"    def show(self, n1, n2):"
100372,        '''Doc - Inside Show'''
100373,        print self.n_name
100374,"        print 'Sum = ', (n1 + n2)"
100375,
100376,    def __del__(self):
100377,"        print 'Destructor Deleting object - ', self.n_name"
100378,
100379,p=Person('Jay')
100380,"p.show(2, 3)"
100381,print p.__doc__
100382,print p.__init__.__doc__
100383,print p.show.__doc__
100384,Jay
100385,Sum =  5
100386,Doc - Inside Class
100387,Doc - __init__ Constructor
100388,Doc - Inside Show
100389,Destructor Deleting object -  Jay
100390,__init__
100391,__init__
100392,"def __init__(self, arg1, arg2):"
100393,"instance = OurClass('arg1', 'arg2')"
100394,__init__
100395,__init__
100396,self.arg1 = arg1
100397,self.arg2 = arg2
100398,"instance = OurClass('arg1', 'arg2')"
100399,print instance.arg1
100400,arg1
100401,__init__
100402,self
100403,class A(object):
100404,    def __init__(foo):
100405,        foo.x = 'Hello'
100406,
100407,"    def method_a(bar, foo):"
100408,        print bar.x + ' ' + foo
100409,self
100410,self
100411,self
100412,TypeError: __init___() takes no arguments (1 given)
100413,init
100414,__init__
100415,self
100416,class foo:
100417,    def bar(self):
100418,"            print ""hi"""
100419,f = foo()
100420,f.bar()
100421,f = foo()
100422,foo.bar(f)
100423,class foo:
100424,    def bar(s):
100425,"            print ""hi"""
100426,s
100427,class MyClass:
100428,
100429,    def __init__(self):
100430,        print('__init__ is the constructor for a class')
100431,
100432,    def __del__(self):
100433,        print('__del__ is the destructor for a class')
100434,
100435,    def __enter__(self):
100436,        print('__enter__ is for context manager')
100437,        return self
100438,
100439,"    def __exit__(self, exc_type, exc_value, traceback):"
100440,        print('__exit__ is for context manager')
100441,
100442,    def greeting(self):
100443,        print('hello python')
100444,
100445,
100446,if __name__ == '__main__':
100447,    with MyClass() as mycls:
100448,        mycls.greeting()
100449,$ python3 class.objects_instantiation.py
100450,__init__ is the constructor for a class
100451,__enter__ is for context manager
100452,hello python
100453,__exit__ is for context manager
100454,__del__ is the destructor for a class
100455,class Cat:
100456,"    def __init__(self, name):"
100457,        self.name = name
100458,    def info(self):
100459,"        print 'I am a cat and I am called', self.name"
100460,__init__
100461,self
100462,c = Cat('Kitty')
100463,c.info()
100464,I am a cat and I am called Kitty
100465,# Source: Class and Instance Variables
100466,# https://docs.python.org/2/tutorial/classes.html#class-and-instance-variables
100467,
100468,class MyClass(object):
100469,    # class variable
100470,    my_CLS_var = 10
100471,
100472,"    # sets ""init'ial"" state to objects/instances, use self argument"
100473,    def __init__(self):
100474,        # self usage => instance variable (per object)
100475,        self.my_OBJ_var = 15
100476,
100477,"        # also possible, class name is used => init class variable"
100478,        MyClass.my_CLS_var = 20
100479,
100480,
100481,def run_example_func():
100482,    # PRINTS    10    (class variable)
100483,    print MyClass.my_CLS_var
100484,
100485,    # executes __init__ for obj1 instance
100486,    # NOTE: __init__ changes class variable above
100487,    obj1 = MyClass()
100488,
100489,    # PRINTS    15    (instance variable)
100490,    print obj1.my_OBJ_var
100491,
100492,"    # PRINTS    20    (class variable, changed value)"
100493,    print MyClass.my_CLS_var
100494,
100495,
100496,run_example_func()
100497,self
100498,__init__
100499,__init__
100500,self
100501,self
100502,__init__
100503,class SomeObject(object):
100504,
100505,"    def __init__(self, blah):"
100506,        self.blah = blah
100507,
100508,    def method(self):
100509,        return self.blah 
100510,__init__
100511,SomeObject
100512,'blah'
100513,__init__
100514,blah
100515,an_object = SomeObject('blah')
100516,self
100517,SomeObject
100518,an_object
100519,an_object.method()
100520,an_object.method
100521,self
100522,self
100523,__init__
100524,__new__
100525,__new__
100526,#!/usr/bin/env python
100527,#!/usr/bin/env python3
100528,#!/usr/bin/env python
100529,/usr/bin/env
100530,$PATH
100531,#!/usr/bin/python
100532,#!
100533,chmod +x myscript.py
100534,./myscript.py
100535,python myscript.py
100536,env
100537,ps
100538,env
100539,py
100540,/usr/bin/env: Key has expired
100541,PATH
100542,.py
100543,perl
100544,/usr/bin/perl
100545,/usr/bin/env
100546,$ /usr/local/bin/python -V
100547,Python 2.6.4
100548,$ /usr/bin/python -V
100549,Python 2.5.1
100550,$ cat my_script.py 
100551,#!/usr/bin/env python
100552,import json
100553,"print ""hello, json"""
100554,$ PATH=/usr/local/bin:/usr/bin
100555,$ ./my_script.py 
100556,"hello, json"
100557,$ PATH=/usr/bin:/usr/local/bin
100558,$ ./my_script.py 
100559,Traceback (most recent call last):
100560,"  File ""./my_script.py"", line 2, in <module>"
100561,    import json
100562,ImportError: No module named json
100563,$ cat my_script.py 
100564,#!/usr/bin/env python2.6
100565,import json
100566,"print ""hello, json"""
100567,python3
100568,$ cat my_script.py 
100569,#!/usr/bin/env python3
100570,import json
100571,"print(""hello, json"")"
100572,which python
100573,/usr/bin/python
100574,#!/usr/bin/python
100575,#!/usr/bin/env python
100576,#!
100577,#
100578,#
100579,env
100580,env
100581,#!/usr/bin/env perl
100582,exec
100583,#!
100584,./something
100585,exec
100586,./something
100587,exec
100588,if ((bprm->buf[0] != '#') || (bprm->buf[1] != '!'))
100589,#!
100590,exec
100591,/usr/bin/env
100592,python
100593,/usr/bin/env python /path/to/script.py
100594,env
100595,PATH
100596,/usr/bin/python
100597,/usr/bin/python /path/to/script.py
100598,#!
100599,#
100600,printf '#!/a\n' | sudo tee /a
100601,sudo chmod +x /a
100602,/a
100603,-bash: /a: /a: bad interpreter: Too many levels of symbolic links
100604,#!
100605,exec
100606,7f 45 4c 46
100607,.ELF
100608,/bin/ls
100609,"head -c 4 ""$(which ls)"" | hd "
100610,00000000  7f 45 4c 46                                       |.ELF|
100611,00000004                                                                 
100612,binfmt_misc
100613,.jar
100614,PATH
100615,PATH
100616,basename-of-command
100617,/full/path/to/basename-of-command
100618, basename-of-command.py
100619,python basename-of-command
100620,env
100621,pyenv
100622,#!/usr/bin/env python
100623,/usr/bin/python
100624,pyenv
100625,pyenv
100626,/home/ciro/.pyenv/shims/python
100627,/usr/bin/python
100628,update-alternatives
100629,$python myscript.py
100630,$./myscript.py
100631,chmod 755
100632,#!/c/python3k/python 
100633,#!/usr/local/bin/python 
100634,#!/usr/bin/python
100635,#!/Applications/MacPython 2.5/python
100636,#!/usr/local/bin/python
100637,#!/usr/bin/env python
100638,/usr/bin/python
100639,/usr/bin/python
100640,/usr/bin/env
100641,python
100642,py.exe
100643,python
100644,PATH
100645,/path/to/app.py
100646,/usr/bin/env
100647,PATH
100648,#! /usr/bin/env python3.2
100649,touch test.py
100650,#!/usr/bin/env python3
100651,"print ""test"""
100652,chmod +x test.py
100653,./test.py
100654,"  File ""./test.py"", line 2"
100655,"    print ""test"""
100656,               ^
100657,SyntaxError: Missing parentheses in call to 'print'
100658,#!/usr/bin/env python2
100659,test
100660,#! /usr/bin/env python
100661,import sys
100662,print(sys.version)
100663,virtualenv test2.6 -p /usr/bin/python2.6
100664,virtualenv test2.7 -p /usr/bin/python2.7
100665,echo $PATH
100666,./test.py
100667,py.exe
100668,.py
100669,$ python myscript.py
100670,env
100671,#!/bin/env interpreter
100672,venv
100673,which python
100674,venv
100675,~/Envs/venv/bin/python
100676,#!/usr/bin/env python
100677,#!/bin/bash/python3
100678,#!/bin/bash/python
100679,#!/bin/bash/python3
100680,"print(""Hello World"")"
100681,#!/bin/bash/python
100682,"print ""Hello World"""
100683,./a.py
100684,./b.py
100685,Permission denied
100686,chmod +x a.py
100687,python2
100688,python3
100689,python
100690,python3
100691,python
100692,python2
100693,#!/bin/sh
100694,#
100695,# Choose the python we need. Explanation:
100696,"# a) '''\' translates to \ in shell, and starts a python multi-line string"
100697,"# b) """" strings are treated as string concat by python, shell ignores them"
100698,"# c) ""true"" command ignores its arguments"
100699,# c) exit before the ending ''' so the shell reads no further
100700,# d) reset set docstrings to ignore the multiline comment code
100701,#
100702,"""true"" '''\'"
100703,PREFERRED_PYTHON=/Library/Frameworks/Python.framework/Versions/2.7/bin/python
100704,ALTERNATIVE_PYTHON=/Library/Frameworks/Python.framework/Versions/3.6/bin/python3
100705,FALLBACK_PYTHON=python3
100706,
100707,if [ -x $PREFERRED_PYTHON ]; then
100708,    echo Using preferred python $ALTERNATIVE_PYTHON
100709,"    exec $PREFERRED_PYTHON ""$0"" ""$@"""
100710,elif [ -x $ALTERNATIVE_PYTHON ]; then
100711,    echo Using alternative python $ALTERNATIVE_PYTHON
100712,"    exec $ALTERNATIVE_PYTHON ""$0"" ""$@"""
100713,else
100714,    echo Using fallback python $FALLBACK_PYTHON
100715,"    exec python3 ""$0"" ""$@"""
100716,fi
100717,exit 127
100718,'''
100719,
100720,"__doc__ = """"""What this file does"""""""
100721,print(__doc__)
100722,import platform
100723,print(platform.python_version())
100724,./file.py
100725,#!/usr/bin/env python
100726,chmod +x file.py
100727,#! /usr/bin/env python
100728,"stats = {'a': 1, 'b': 3000, 'c': 0}"
100729,'b'
100730,"inverse = [(value, key) for key, value in stats.items()]"
100731,print(max(inverse)[1])
100732,max(stats)
100733,max(stats)
100734,'c'
100735,"max(stats, key=lambda key: stats[key])"
100736,'b'
100737,"max(stats, key=stats.get)"
100738,"stats[max(stats, key=stats.get)]"
100739,"max_value = max(stats.values());  {key for key, value in stats.items() if value == max_value}"
100740,operator.itemgetter
100741,import operator
100742,"stats = {'a': 1000, 'b': 3000, 'c': 100}"
100743,"max(stats.iteritems(), key=operator.itemgetter(1))[0]"
100744,stats.iteritems()
100745,key
100746,max()
100747,>>> import operator
100748,">>> stats = {'a': 1000, 'b': 3000, 'c': 100, 'd': 3000}"
100749,">>> max(stats.iteritems(), key=operator.itemgetter(1))[0]"
100750,'b' 
100751,">>> max(stats.items(), key=operator.itemgetter(1))[0]"
100752,'b'
100753,"max(stats.iterkeys(), key=(lambda key: stats[key]))"
100754,key=lambda x: x[1]
100755,"max(stats, key=lambda key: stats[key])"
100756,def keywithmaxval(d):
100757,"     """""" a) create a list of the dict's keys and values; "
100758,"         b) return the key with the max value""""""  "
100759,     v = list(d.values())
100760,     k = list(d.keys())
100761,     return k[v.index(max(v))]
100762,def f1():  
100763,     v = list(d1.values())
100764,     k = list(d1.keys())
100765,     return k[v.index(max(v))]
100766,    
100767,def f2():
100768,"    d3 = {v: k for k,v in d1.items()}"
100769,    return d3[max(d3)]
100770,    
100771,def f3():
100772,"    return list(filter(lambda t: t[1] == max(d1.values()), d1.items()))[0][0]    "
100773,    
100774,def f3b():
100775,    # same as f3 but remove the call to max from the lambda
100776,    m = max(d1.values())
100777,"    return list(filter(lambda t: t[1] == m, d1.items()))[0][0]        "
100778,    
100779,def f4():
100780,"    return [k for k, v in d1.items() if v == max(d1.values())][0]    "
100781,    
100782,def f4b():
100783,    # same as f4 but remove the max from the comprehension
100784,    m = max(d1.values())
100785,"    return [k for k,v in d1.items() if v == m][0]        "
100786,    
100787,def f5():
100788,"    return max(d1.items(), key=operator.itemgetter(1))[0]    "
100789,    
100790,def f6():
100791,"    return max(d1, key=d1.get)     "
100792,    
100793,def f7():
100794,"     """""" a) create a list of the dict's keys and values; "
100795,"         b) return the key with the max value""""""    "
100796,     v = list(d1.values())
100797,     return list(d1.keys())[v.index(max(v))]    
100798,     
100799,def f8():
100800,"     return max(d1, key=lambda k: d1[k])     "
100801,     
100802,"tl = [f1, f2, f3b, f4b, f5, f6, f7, f8, f4, f3]     "
100803,"cmpthese.cmpthese(tl, c=100) "
100804,"d1 = {1: 1, 2: 2, 3: 8, 4: 3, 5: 6, 6: 9, 7: 17, 8: 4, 9: 20, 10: 7, 11: 15, "
100805,"    12: 10, 13: 10, 14: 18, 15: 18, 16: 5, 17: 13, 18: 21, 19: 21, 20: 8, "
100806,"    21: 8, 22: 16, 23: 16, 24: 11, 25: 24, 26: 11, 27: 112, 28: 19, 29: 19, "
100807,"    30: 19, 3077: 36, 32: 6, 33: 27, 34: 14, 35: 14, 36: 22, 4102: 39, 38: 22, "
100808,"    39: 35, 40: 9, 41: 110, 42: 9, 43: 30, 44: 17, 45: 17, 46: 17, 47: 105, 48: 12, "
100809,"    49: 25, 50: 25, 51: 25, 52: 12, 53: 12, 54: 113, 1079: 50, 56: 20, 57: 33, "
100810,"    58: 20, 59: 33, 60: 20, 61: 20, 62: 108, 63: 108, 64: 7, 65: 28, 66: 28, 67: 28, "
100811,"    68: 15, 69: 15, 70: 15, 71: 103, 72: 23, 73: 116, 74: 23, 75: 15, 76: 23, 77: 23, "
100812,"    78: 36, 79: 36, 80: 10, 81: 23, 82: 111, 83: 111, 84: 10, 85: 10, 86: 31, 87: 31, "
100813,"    88: 18, 89: 31, 90: 18, 91: 93, 92: 18, 93: 18, 94: 106, 95: 106, 96: 13, 9232: 35, "
100814,"    98: 26, 99: 26, 100: 26, 101: 26, 103: 88, 104: 13, 106: 13, 107: 101, 1132: 63, "
100815,"    2158: 51, 112: 21, 113: 13, 116: 21, 118: 34, 119: 34, 7288: 45, 121: 96, 122: 21, "
100816,"    124: 109, 125: 109, 128: 8, 1154: 32, 131: 29, 134: 29, 136: 16, 137: 91, 140: 16, "
100817,"    142: 104, 143: 104, 146: 117, 148: 24, 149: 24, 152: 24, 154: 24, 155: 86, 160: 11, "
100818,"    161: 99, 1186: 76, 3238: 49, 167: 68, 170: 11, 172: 32, 175: 81, 178: 32, 179: 32, "
100819,"    182: 94, 184: 19, 31: 107, 188: 107, 190: 107, 196: 27, 197: 27, 202: 27, 206: 89, "
100820,"    208: 14, 214: 102, 215: 102, 220: 115, 37: 22, 224: 22, 226: 14, 232: 22, 233: 84, "
100821,"    238: 35, 242: 97, 244: 22, 250: 110, 251: 66, 1276: 58, 256: 9, 2308: 33, 262: 30, "
100822,"    263: 79, 268: 30, 269: 30, 274: 92, 1300: 27, 280: 17, 283: 61, 286: 105, 292: 118, "
100823,"    296: 25, 298: 25, 304: 25, 310: 87, 1336: 71, 319: 56, 322: 100, 323: 100, 325: 25, "
100824,"    55: 113, 334: 69, 340: 12, 1367: 40, 350: 82, 358: 33, 364: 95, 376: 108, "
100825,"    377: 64, 2429: 46, 394: 28, 395: 77, 404: 28, 412: 90, 1438: 53, 425: 59, 430: 103, "
100826,"    1456: 97, 433: 28, 445: 72, 448: 23, 466: 85, 479: 54, 484: 98, 485: 98, 488: 23, "
100827,"    6154: 37, 502: 67, 4616: 34, 526: 80, 538: 31, 566: 62, 3644: 44, 577: 31, 97: 119, "
100828,"    592: 26, 593: 75, 1619: 48, 638: 57, 646: 101, 650: 26, 110: 114, 668: 70, 2734: 41, "
100829,"    700: 83, 1732: 30, 719: 52, 728: 96, 754: 65, 1780: 74, 4858: 47, 130: 29, 790: 78, "
100830,"    1822: 43, 2051: 38, 808: 29, 850: 60, 866: 29, 890: 73, 911: 42, 958: 55, 970: 99, "
100831,"    976: 24, 166: 112}"
100832,    rate/sec       f4      f3    f3b     f8     f5     f2    f4b     f6     f7     f1
100833,f4       454       --   -2.5% -96.9% -97.5% -98.6% -98.6% -98.7% -98.7% -98.9% -99.0%
100834,f3       466     2.6%      -- -96.8% -97.4% -98.6% -98.6% -98.6% -98.7% -98.9% -99.0%
100835,"f3b   14,715  3138.9% 3057.4%     -- -18.6% -55.5% -56.0% -56.4% -58.3% -63.8% -68.4%"
100836,"f8    18,070  3877.3% 3777.3%  22.8%     -- -45.4% -45.9% -46.5% -48.8% -55.5% -61.2%"
100837,"f5    33,091  7183.7% 7000.5% 124.9%  83.1%     --  -1.0%  -2.0%  -6.3% -18.6% -29.0%"
100838,"f2    33,423  7256.8% 7071.8% 127.1%  85.0%   1.0%     --  -1.0%  -5.3% -17.7% -28.3%"
100839,"f4b   33,762  7331.4% 7144.6% 129.4%  86.8%   2.0%   1.0%     --  -4.4% -16.9% -27.5%"
100840,"f6    35,300  7669.8% 7474.4% 139.9%  95.4%   6.7%   5.6%   4.6%     -- -13.1% -24.2%"
100841,"f7    40,631  8843.2% 8618.3% 176.1% 124.9%  22.8%  21.6%  20.3%  15.1%     -- -12.8%"
100842,"f1    46,598 10156.7% 9898.8% 216.7% 157.9%  40.8%  39.4%  38.0%  32.0%  14.7%     --"
100843,    rate/sec       f3       f4     f8    f3b     f6     f5     f2    f4b     f7     f1
100844,f3       384       --    -2.6% -97.1% -97.2% -97.9% -97.9% -98.0% -98.2% -98.5% -99.2%
100845,f4       394     2.6%       -- -97.0% -97.2% -97.8% -97.9% -98.0% -98.1% -98.5% -99.1%
100846,"f8    13,079  3303.3%  3216.1%     --  -5.6% -28.6% -29.9% -32.8% -38.3% -49.7% -71.2%"
100847,"f3b   13,852  3504.5%  3412.1%   5.9%     -- -24.4% -25.8% -28.9% -34.6% -46.7% -69.5%"
100848,"f6    18,325  4668.4%  4546.2%  40.1%  32.3%     --  -1.8%  -5.9% -13.5% -29.5% -59.6%"
100849,"f5    18,664  4756.5%  4632.0%  42.7%  34.7%   1.8%     --  -4.1% -11.9% -28.2% -58.8%"
100850,"f2    19,470  4966.4%  4836.5%  48.9%  40.6%   6.2%   4.3%     --  -8.1% -25.1% -57.1%"
100851,"f4b   21,187  5413.0%  5271.7%  62.0%  52.9%  15.6%  13.5%   8.8%     -- -18.5% -53.3%"
100852,"f7    26,002  6665.8%  6492.4%  98.8%  87.7%  41.9%  39.3%  33.5%  22.7%     -- -42.7%"
100853,"f1    45,354 11701.5% 11399.0% 246.8% 227.4% 147.5% 143.0% 132.9% 114.1%  74.4%     -- "
100854,f1
100855,keywithmaxval
100856,f7
100857,f1
100858,f7
100859,f1
100860,">>> timeit.timeit(""f1()"",""from __main__ import f1, f7, d1"", number=10000) 0.26785888786807277 >>> timeit.timeit(""f7()"",""from __main__ import f1, f7, d1"", number=10000) 0.26770628307832567"
100861,"max(d, key = d.get) "
100862,# which is equivalent to 
100863,"max(d, key = lambda k : d.get(k))"
100864,"max(d.items(), key = lambda k : k[1])"
100865,d.items()
100866,iterkeys
100867,iteritems
100868,"max_key = max(stats, key=lambda k: stats[k])"
100869,key
100870,lambda <item>: return <a result of operation with item> 
100871,stats
100872,__closure__
100873,lambda
100874,"stats = {'a':1000, 'b':3000, 'c': 100}"
100875,"max(stats, key=stats.get)"
100876,"stats = {'a':1000, 'b':3000, 'c': 100}"
100877,"max(stats.iterkeys(), key=lambda k: stats[k])"
100878,key
100879,max()
100880,"max(stats, key=lambda k: stats[k])"
100881,"key, value = max(stats.iteritems(), key=lambda x:x[1])"
100882,"key, _ = max(stats.iteritems(), key=lambda x:x[1])"
100883,_
100884,ignored
100885,ignored
100886,_
100887,">>> stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}"
100888,">>> [key for m in [max(stats.values())] for key,val in stats.iteritems() if val == m]"
100889,"['b', 'd']"
100890,stats.items()
100891,stats.iteritems()
100892,max
100893,"[key for m in [max(stats.values())] for key,val in stats.iteritems() if val == m]"
100894,m = ...
100895,"max(stats, key=stats.get) if stats else None"
100896,stats
100897,"max(stats, key=stats.get)"
100898,stats
100899,"stats = {'a':1000, 'b':3000, 'c': 100}"
100900,">>> max(stats.items(), key = lambda x: x[0])"
100901,"('c', 100)"
100902,">>> max(stats.items(), key = lambda x: x[1])"
100903,"('b', 3000)"
100904,">>> max(stats.items(), key = lambda x: x[1])[0]"
100905,'b'
100906,items()
100907,max
100908,"(key, value)"
100909,>>> list(stats.items())
100910,"[('c', 100), ('b', 3000), ('a', 1000)]"
100911,lambda
100912,lambda x: x[1]
100913,x
100914,"(key, value)"
100915,iteritems()
100916,items()
100917,"d = {'A': 4,'B':10}"
100918,
100919,"min_v = min(zip(d.values(), d.keys()))"
100920,"# min_v is (4,'A')"
100921,
100922,"max_v = max(zip(d.values(), d.keys()))"
100923,"# max_v is (10,'B')"
100924,max
100925,def keys_with_top_values(my_dict):
100926,"    return [key  for (key, value) in my_dict.items() if value == max(my_dict.values())]"
100927,"max(stats.keys(), key=(lambda k: stats[k]))"
100928,"max(stats.iterkeys(), key=(lambda k: stats[k]))"
100929,mydict.keys()
100930,mydict.values()
100931,max()
100932,"stats = {'a':1000, 'b':3000, 'c': 100}"
100933,
100934,"x = sorted(stats, key=(lambda key:stats[key]), reverse=True)"
100935,"['b', 'a', 'c']"
100936,x[0]
100937,['b']
100938,x[:2]
100939,"['b', 'a']"
100940,max()
100941,"mydict = { 'a':302, 'e':53, 'g':302, 'h':100 }"
100942,max_value_keys = [key for key in mydict.keys() if mydict[key] == max(mydict.values())]
100943,print(max_value_keys) # prints a list of keys with max value
100944,maximum = mydict[max_value_keys[0]]
100945,collections.Counter
100946,>>> import collections
100947,">>> stats = {'a':1000, 'b':3000, 'c': 100}"
100948,>>> stats = collections.Counter(stats)
100949,>>> stats.most_common(1)
100950,"[('b', 3000)]"
100951,collections.Counter
100952,>>> stats = collections.Counter()
100953,>>> stats['a'] += 1
100954,:
100955,etc. 
100956,from heapq import nlargest
100957,
100958,"stats = {'a':1000, 'b':3000, 'c': 100}"
100959,
100960,"res1 = nlargest(1, stats, key=stats.__getitem__)  # ['b']"
100961,"res2 = nlargest(2, stats, key=stats.__getitem__)  # ['b', 'a']"
100962,
100963,res1_val = next(iter(res1))                       # 'b'
100964,dict.__getitem__
100965,dict[]
100966,dict.get
100967,KeyError
100968,"max((value, key) for key, value in stats.items())[1]"
100969,import time
100970,stats = {
100971,"   ""a"" : 1000,"
100972,"   ""b"" : 3000,"
100973,"   ""c"" : 90,"
100974,"   ""d"" : 74,"
100975,"   ""e"" : 72,"
100976, }
100977,
100978,start_time = time.time_ns()
100979,"max_key = max(stats, key = stats.get)"
100980,"print(""Max Key ["", max_key, ""]Time taken (ns)"", time.time_ns() - start_time)"
100981,
100982,start_time = time.time_ns()
100983,"max_key = max(stats, key=lambda key: stats[key])"
100984,"print(""Max Key with Lambda["", max_key, ""]Time taken (ns)"", time.time_ns() - start_time)"
100985,Max Key [ b ] Time taken (ns) 3100
100986,Max Key with Lambda [ b ] Time taken (ns) 1782
100987,"stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}"
100988,
100989,import random
100990,maxV = max(stats.values())
100991,# Choice is one of the keys with max value
100992,"choice = random.choice([key for key, value in stats.items() if value == maxV])"
100993,import pandas as pd
100994,"stats = {'a': 1000, 'b': 3000, 'c': 100}"
100995,series = pd.Series(stats)
100996,series.idxmax()
100997,
100998,>>> b
100999,Counter = 0
101000,for word in stats.keys():
101001,    if stats[word]> counter:
101002,        Counter = stats [word]
101003,print Counter
101004," max(zip(stats.keys(), stats.values()), key=lambda t : t[1])[0]"
101005,"zip(stats.keys(), stats.values())"
101006,stats.items()
101007,items
101008,zip
101009,"stats = {'a':1000, 'b':3000, 'c': 100}"
101010,max_key = None
101011,if bool(stats):
101012,"   max_key = max(stats, key=stats.get)"
101013,print(max_key)
101014,>>> b
101015,"sorted(dict_name, key=dict_name.__getitem__, reverse=True)[0]"
101016,import time
101017,import operator
101018,
101019,
101020,"d = {""a""+str(i): i for i in range(1000000)}"
101021,
101022,def t1(dct):
101023,"    mx = float(""-inf"")"
101024,    key = None
101025,"    for k,v in dct.items():"
101026,        if v > mx:
101027,            mx = v
101028,            key = k
101029,    return key
101030,
101031,def t2(dct):
101032,    v=list(dct.values())
101033,    k=list(dct.keys())
101034,    return k[v.index(max(v))]
101035,
101036,def t3(dct):
101037,"    return max(dct.items(),key=operator.itemgetter(1))[0]"
101038,
101039,start = time.time()
101040,for i in range(25):
101041,    m = t1(d)
101042,end = time.time()
101043,"print (""Iterating: ""+str(end-start))"
101044,
101045,start = time.time()
101046,for i in range(25):
101047,    m = t2(d)
101048,end = time.time()
101049,"print (""List creating: ""+str(end-start))"
101050,
101051,start = time.time()
101052,for i in range(25):
101053,    m = t3(d)
101054,end = time.time()
101055,"print (""Accepted answer: ""+str(end-start))"
101056,Iterating: 3.8201940059661865
101057,List creating: 6.928712844848633
101058,Accepted answer: 5.464320182800293
101059,"stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000, 'e':3000}"
101060,from collections import defaultdict
101061,from collections import OrderedDict
101062,
101063,groupedByValue = defaultdict(list)
101064,"for key, value in sorted(stats.items()):"
101065,    groupedByValue[value].append(key)
101066,
101067,"# {1000: ['a'], 3000: ['b', 'd', 'e'], 100: ['c']}"
101068,
101069,groupedByValue[max(groupedByValue)]
101070,"# ['b', 'd', 'e']"
101071,"stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000, 'e':3000}"
101072,"keys_to_search = [""a"", ""b"", ""c""]"
101073,
101074,"max([k for k in keys_to_search], key=lambda x: stats[x])```"
101075,"my_map = {'a': 1, 'b': 2}"
101076,"inv_map = {1: 'a', 2: 'b'}"
101077,"inv_map = {v: k for k, v in my_map.items()}"
101078,"inv_map = {v: k for k, v in my_map.iteritems()}"
101079,my_map.items()
101080,The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon
101081,Dict
101082,OrderedDict
101083,"dict((v, k) for k, v in my_map.items())"
101084,"dict((v, k) for k, v in my_map.iteritems())"
101085,iteritems()
101086,iteritems()
101087,items()
101088,dict
101089,my_map
101090,inv_map = {}
101091,"for k, v in my_map.items():"
101092,"    inv_map[v] = inv_map.get(v, []) + [k]"
101093,inv_map = {}
101094,"for k, v in my_map.iteritems():"
101095,"    inv_map[v] = inv_map.get(v, []) + [k]"
101096,"inv_map.get(v, [])"
101097,setdefault
101098,"inv_map.setdefault(v, set()).add(k)"
101099,my_map.items()
101100,my_map.iteritems()
101101,dict
101102,dict
101103,def inverse_mapping(f):
101104,"    return f.__class__(map(reversed, f.items()))"
101105,f.__class__
101106,"dict(map(reversed, f.items()))"
101107,items
101108,"inv_map = dict(zip(my_map.values(), my_map.keys()))"
101109,.keys()
101110,.values()
101111,"inv_map = dict((my_map[k], k) for k in my_map)"
101112,inv_map = {my_map[k] : k for k in my_map}
101113,"my_map = { 'a': 1, 'b':2 }"
101114,"dict(map(reversed, my_map.items()))"
101115,filter
101116,map
101117,dict
101118,collections.OrderedDict
101119,collections.defaultdict
101120,defaultdict
101121,"from collections import Counter, defaultdict"
101122,
101123,def invert_dict(d):
101124,    d_inv = defaultdict(list)
101125,"    for k, v in d.items():"
101126,        d_inv[v].append(k)
101127,    return d_inv
101128,
101129,text = 'aaa bbb ccc ddd aaa bbb ccc aaa' 
101130,"c = Counter(text.split()) # Counter({'aaa': 3, 'bbb': 2, 'ccc': 2, 'ddd': 1})"
101131,"dict(invert_dict(c)) # {1: ['ddd'], 2: ['bbb', 'ccc'], 3: ['aaa']}  "
101132,dict.setdefault()
101133,dict(d_inv)
101134,defaultdict
101135,yaml.safe_dump
101136,defaultdict
101137,dict
101138,class ReversibleDict(dict):
101139,
101140,    def reversed(self):
101141,"        """""""
101142,"        Return a reversed dict, with common values in the original dict"
101143,        grouped into a list in the returned dict.
101144,
101145,        Example:
101146,"        >>> d = ReversibleDict({'a': 3, 'c': 2, 'b': 2, 'e': 3, 'd': 1, 'f': 2})"
101147,        >>> d.reversed()
101148,"        {1: ['d'], 2: ['c', 'b', 'f'], 3: ['a', 'e']}"
101149,"        """""""
101150,
101151,        revdict = {}
101152,"        for k, v in self.iteritems():"
101153,"            revdict.setdefault(v, []).append(k)"
101154,        return revdict
101155,reversed
101156,set
101157,list
101158,"setdefault(v, []).append(k)"
101159,"setdefault(v, set()).add(k)"
101160,"revdict.setdefault(v, set()).add(k)"
101161,set
101162,1
101163,2
101164,d.keys() - inv_d[1] - inv_d[2]
101165,"{v:[i for i in d.keys() if d[i] == v ] for k,v in d.items()}"
101166,"some_dict = {""1"":{""a"",""b"",""c""},"
101167,"        ""2"":{""d"",""e"",""f""},"
101168,"        ""3"":{""g"",""h"",""i""}}"
101169,"some_dict = {vi: k  for k, v in some_dict.items() for vi in v}"
101170,"{'c': '1',"
101171," 'b': '1',"
101172," 'a': '1',"
101173," 'f': '2',"
101174," 'd': '2',"
101175," 'e': '2',"
101176," 'g': '3',"
101177," 'h': '3',"
101178, 'i': '3'}
101179,"dict = {'a': 'fire', 'b': 'ice', 'c': 'fire', 'd': 'water'}"
101180,"inverted_dict = {'fire': ['a', 'c'], 'ice': ['b'], 'water': ['d']}"
101181,for
101182,# Use this code to invert dictionaries that have non-unique values
101183,
101184,inverted_dict = dict()
101185,"for key, value in dict.items():"
101186,"    inverted_dict.setdefault(value, list()).append(key)"
101187,# Use this code to invert dictionaries that have unique values
101188,
101189,"inverted_dict = {value: key for key, value in dict.items()}"
101190,# Use this code to invert dictionaries that have lists of values
101191,
101192,dict = {value: key for key in inverted_dict for value in my_map[key]}
101193,dict
101194,my_map
101195,dictio()
101196,dict()
101197,from collections import defaultdict
101198,
101199,inv_map = defaultdict(list) 
101200,"for k, v in my_map.items(): "
101201,    inv_map[v].append(k)
101202,"my_map = {'c': 1, 'd': 5, 'a': 5, 'b': 10}"
101203,"{5: ['a', 'd'], 1: ['c'], 10: ['b']}"
101204,"invert = lambda mydict: {v:k for k, v in mydict.items()}"
101205,"invert = lambda mydict: dict( zip(mydict.values(), mydict.keys()) )"
101206,class SymDict:
101207,    def __init__(self):
101208,        self.aToB = {}
101209,        self.bToA = {}
101210,
101211,"    def assocAB(self, a, b):"
101212,"        # Stores and returns a tuple (a,b) of overwritten bindings"
101213,        currB = None
101214,        if a in self.aToB: currB = self.bToA[a]
101215,        currA = None
101216,        if b in self.bToA: currA = self.aToB[b]
101217,
101218,        self.aToB[a] = b
101219,        self.bToA[b] = a
101220,"        return (currA, currB)"
101221,
101222,"    def lookupA(self, a):"
101223,        if a in self.aToB:
101224,            return self.aToB[a]
101225,        return None
101226,
101227,"    def lookupB(self, b):"
101228,        if b in self.bToA:
101229,            return self.bToA[b]
101230,        return None
101231,dictresize
101232,inv_map = dict(
101233,"    (v, [k for (k, xx) in filter(lambda (key, value): value == v, my_map.items())]) "
101234,    for v in set(my_map.values())
101235,)
101236,items()
101237,-1
101238,inv_map = {v:[k for k in my_map if my_map[k] == v] for v in my_map.itervalues()}
101239,itervalues
101240,values
101241,d = {i: str(i) for i in range(10000)}
101242,
101243,"new_d = dict(zip(d.values(), d.keys()))"
101244,def dict_reverser(d):
101245,    seen = set()
101246,"    return {v: k for k, v in d.items() if v not in seen or seen.add(v)}"
101247,set.add
101248,None
101249,"my_map = {'a': 1, 'b': 2}"
101250,
101251,inv_map= {}
101252,for key in my_map.keys() :
101253,    val = my_map[key]
101254,    inv_map[val] = key
101255,"dict([(value, key) for key, value in d.items()])"
101256,def reverse_dict(dictionary):
101257,    reverse_dict = {}
101258,"    for key, value in dictionary.iteritems():"
101259,"        if not isinstance(value, (list, tuple)):"
101260,            value = [value]
101261,        for val in value:
101262,"            reverse_dict[val] = reverse_dict.get(val, [])"
101263,            reverse_dict[val].append(key)
101264,"    for key, value in reverse_dict.iteritems():"
101265,        if len(value) == 1:
101266,            reverse_dict[key] = value[0]
101267,    return reverse_dict
101268,def r_maping(dictionary):
101269,    List_z=[]
101270,    Map= {}
101271,"    for z, x in dictionary.iteritems(): #iterate through the keys and values"
101272,"        Map.setdefault(x,List_z).append(z) #Setdefault is the same as dict[key]=default.""The method returns the key value available in the dictionary and if given key is not available then it will return provided default value. Afterward, we will append into the default list our new values for the specific key."
101273,    return Map
101274,"from itertools import imap, groupby"
101275,
101276,def fst(s):
101277,    return s[0]
101278,
101279,def snd(s):
101280,    return s[1]
101281,
101282,def inverseDict(d):
101283,"    """""""
101284,    input d: a -> b
101285,    output : b -> set(a)
101286,"    """""""
101287,    return {
101288,"        v : set(imap(fst, kv_iter))"
101289,"        for (v, kv_iter) in groupby("
101290,"            sorted(d.iteritems(),"
101291,"                   key=snd),"
101292,            key=snd
101293,        )
101294,    }
101295,n
101296,O(n log n)
101297,O(n)
101298,dict
101299,inv_map={};
101300,for i in my_map:
101301,    inv_map[my_map[i]]=i    
101302,print inv_map
101303,def invertDictionary(d):
101304,    myDict = {}
101305,  for i in d:
101306,     value = d.get(i)
101307,"     myDict.setdefault(value,[]).append(i)   "
101308, return myDict
101309," print invertDictionary({'a':1, 'b':2, 'c':3 , 'd' : 1})"
101310,dict.items
101311,iteritems
101312,"d1 = dict(alice='apples', bob='bananas')"
101313,"d2 = dict(map(lambda key: (d1[key], key), d1.keys()))"
101314,print(d2)
101315,"{'apples': 'alice', 'bananas': 'bob'}"
101316,for
101317,list comprehension
101318,mymap['key1']
101319,"[('xyz', 1, 2),"
101320," ('abc', 5, 4)]"
101321,inv_map = {}
101322,"for k, v in my_map.items():"
101323,    for x in v:
101324,"        # with x[1:3] same as x[1], x[2]:"
101325,"        inv_map[x[0]] = inv_map.get(x[0], []) + [k, x[1:3]]"
101326,inv_map['abc']
101327,"[('key1', 1, 2),"
101328," ('key1', 5, 4)]"
101329,def dict_invert(d):
101330,    '''
101331,    d: dict
101332,    Returns an inverted dictionary 
101333,    '''
101334,    # Your code here
101335,    inv_d = {}
101336,"    for k, v in d.items():"
101337,        if v not in inv_d.keys():
101338,            inv_d[v] = [k]
101339,        else:
101340,            inv_d[v].append(k)
101341,        inv_d[v].sort()
101342,"        print(f""{inv_d[v]} are the values"")"
101343,        
101344,    return inv_d
101345,inv_map = {my_map[x] : x for x in my_map}
101346,dict.items
101347,iteritems
101348,setdefault
101349,def inverse(mapping):
101350,    '''
101351,"    A function to inverse mapping, collecting keys with simillar values"
101352,    in list. Careful to retain original type and to be fast.
101353,"    >> d = dict(a=1, b=2, c=1, d=3, e=2, f=1, g=5, h=2)"
101354,    >> inverse(d)
101355,"    {1: ['f', 'c', 'a'], 2: ['h', 'b', 'e'], 3: ['d'], 5: ['g']}"
101356,    '''
101357,    res = {}
101358,    setdef = res.setdefault
101359,"    for key, value in mapping.items():"
101360,"        setdef(value, []).append(key)"
101361,    return res if mapping.__class__==dict else mapping.__class__(res)
101362,mapping.items()
101363,mapping.iteritems()
101364,dict
101365,win32file.FindNextChangeNotification
101366,strace
101367,write
101368,win32file.FindNextChangeNotification
101369,easy_install
101370,os.stat(filename).st_mtime
101371,import os
101372,
101373,class Monkey(object):
101374,    def __init__(self):
101375,        self._cached_stamp = 0
101376,        self.filename = '/path/to/file'
101377,
101378,    def ook(self):
101379,        stamp = os.stat(self.filename).st_mtime
101380,        if stamp != self._cached_stamp:
101381,            self._cached_stamp = stamp
101382,"            # File has changed, so do something..."
101383,if self._cached_stamp is not None
101384,watch
101385,watch
101386,ook
101387,ook
101388,watch
101389,from PyQt4 import QtCore
101390,
101391,@QtCore.pyqtSlot(str)
101392,def directory_changed(path):
101393,    print('Directory Changed!!!')
101394,
101395,@QtCore.pyqtSlot(str)
101396,def file_changed(path):
101397,    print('File Changed!!!')
101398,
101399,"fs_watcher = QtCore.QFileSystemWatcher(['/path/to/files_1', '/path/to/files_2', '/path/to/files_3'])"
101400,
101401,"fs_watcher.connect(fs_watcher, QtCore.SIGNAL('directoryChanged(QString)'), directory_changed)"
101402,"fs_watcher.connect(fs_watcher, QtCore.SIGNAL('fileChanged(QString)'), file_changed)"
101403,PySide
101404,PyQt
101405,import time
101406,import fcntl
101407,import os
101408,import signal
101409,
101410,"FNAME = ""/HOME/TOTO/FILETOWATCH"""
101411,
101412,"def handler(signum, frame):"
101413,"    print ""File %s modified"" % (FNAME,)"
101414,
101415,"signal.signal(signal.SIGIO, handler)"
101416,"fd = os.open(FNAME,  os.O_RDONLY)"
101417,"fcntl.fcntl(fd, fcntl.F_SETSIG, 0)"
101418,"fcntl.fcntl(fd, fcntl.F_NOTIFY,"
101419,            fcntl.DN_MODIFY | fcntl.DN_CREATE | fcntl.DN_MULTISHOT)
101420,
101421,while True:
101422,    time.sleep(10000)
101423,import os
101424,
101425,import win32file
101426,import win32con
101427,
101428,"path_to_watch = ""."" # look at the current directory"
101429,"file_to_watch = ""test.txt"" # look for changes to a file called test.txt"
101430,
101431,def ProcessNewData( newData ):
101432,"    print ""Text added: %s""%newData"
101433,
101434,# Set up the bits we'll need for output
101435,ACTIONS = {
101436,"  1 : ""Created"","
101437,"  2 : ""Deleted"","
101438,"  3 : ""Updated"","
101439,"  4 : ""Renamed from something"","
101440,"  5 : ""Renamed to something"""
101441,}
101442,FILE_LIST_DIRECTORY = 0x0001
101443,hDir = win32file.CreateFile (
101444,"  path_to_watch,"
101445,"  FILE_LIST_DIRECTORY,"
101446,"  win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE,"
101447,"  None,"
101448,"  win32con.OPEN_EXISTING,"
101449,"  win32con.FILE_FLAG_BACKUP_SEMANTICS,"
101450,  None
101451,)
101452,
101453,# Open the file we're interested in
101454,"a = open(file_to_watch, ""r"")"
101455,
101456,# Throw away any exising log data
101457,a.read()
101458,
101459,# Wait for new data and call ProcessNewData for each new chunk that's written
101460,while 1:
101461,  # Wait for a change to occur
101462,  results = win32file.ReadDirectoryChangesW (
101463,"    hDir,"
101464,"    1024,"
101465,"    False,"
101466,"    win32con.FILE_NOTIFY_CHANGE_LAST_WRITE,"
101467,"    None,"
101468,    None
101469,  )
101470,
101471,"  # For each change, check to see if it's updating the file we're interested in"
101472,"  for action, file in results:"
101473,"    full_filename = os.path.join (path_to_watch, file)"
101474,"    #print file, ACTIONS.get (action, ""Unknown"")"
101475,    if file == file_to_watch:
101476,        newText = a.read()
101477,"        if newText != """":"
101478,            ProcessNewData( newText )
101479,import os
101480,import sys 
101481,import time
101482,
101483,class Watcher(object):
101484,    running = True
101485,    refresh_delay_secs = 1
101486,
101487,    # Constructor
101488,"    def __init__(self, watch_file, call_func_on_change=None, *args, **kwargs):"
101489,        self._cached_stamp = 0
101490,        self.filename = watch_file
101491,        self.call_func_on_change = call_func_on_change
101492,        self.args = args
101493,        self.kwargs = kwargs
101494,
101495,    # Look for changes
101496,    def look(self):
101497,        stamp = os.stat(self.filename).st_mtime
101498,        if stamp != self._cached_stamp:
101499,            self._cached_stamp = stamp
101500,"            # File has changed, so do something..."
101501,            print('File changed')
101502,            if self.call_func_on_change is not None:
101503,"                self.call_func_on_change(*self.args, **self.kwargs)"
101504,
101505,    # Keep watching in a loop        
101506,    def watch(self):
101507,        while self.running: 
101508,            try: 
101509,                # Look for changes
101510,                time.sleep(self.refresh_delay_secs) 
101511,                self.look() 
101512,            except KeyboardInterrupt: 
101513,                print('\nDone') 
101514,                break 
101515,            except FileNotFoundError:
101516,                # Action on file not found
101517,                pass
101518,            except: 
101519,                print('Unhandled error: %s' % sys.exc_info()[0])
101520,
101521,# Call this function each time a change happens
101522,def custom_action(text):
101523,    print(text)
101524,
101525,watch_file = 'my_file.txt'
101526,
101527,# watcher = Watcher(watch_file)  # simple
101528,"watcher = Watcher(watch_file, custom_action, text='yes, changed')  # also call custom action function"
101529,watcher.watch()  # start the watch going
101530,watch_file
101531,_cached_stamp
101532,call_func_on_change()
101533,look()
101534,_cached_stamp
101535,os.stat(self.filename).st_mtime. _cached_stamp
101536,_cached_stamp
101537,call_func_on_change()
101538,"self.call_func_on_change(self) def custom_action(): watcher = Watcher(watch_file, custom_action())"
101539,"watcher = Watcher(watch_file, custom_action)"
101540,import time
101541,
101542,while 1:
101543,    where = file.tell()
101544,    line = file.readline()
101545,    if not line:
101546,        time.sleep(1)
101547,        file.seek(where)
101548,    else:
101549,"        print line, # already has newline"
101550,#!/usr/bin/env python
101551,
101552,"import os, sys, time"
101553,
101554,def files_to_timestamp(path):
101555,"    files = [os.path.join(path, f) for f in os.listdir(path)]"
101556,"    return dict ([(f, os.path.getmtime(f)) for f in files])"
101557,
101558,"if __name__ == ""__main__"":"
101559,
101560,    path_to_watch = sys.argv[1]
101561,    print('Watching {}..'.format(path_to_watch))
101562,
101563,    before = files_to_timestamp(path_to_watch)
101564,
101565,    while 1:
101566,        time.sleep (2)
101567,        after = files_to_timestamp(path_to_watch)
101568,
101569,        added = [f for f in after.keys() if not f in before.keys()]
101570,        removed = [f for f in before.keys() if not f in after.keys()]
101571,        modified = []
101572,
101573,        for f in before.keys():
101574,            if not f in removed:
101575,                if os.path.getmtime(f) != before.get(f):
101576,                    modified.append(f)
101577,
101578,"        if added: print('Added: {}'.format(', '.join(added)))"
101579,"        if removed: print('Removed: {}'.format(', '.join(removed)))"
101580,"        if modified: print('Modified: {}'.format(', '.join(modified)))"
101581,
101582,        before = after
101583,listdir
101584,scandir
101585,stat()
101586,# Check file for new data.
101587,
101588,import time
101589,
101590,"f = open(r'c:\temp\test.txt', 'r')"
101591,
101592,while True:
101593,
101594,    line = f.readline()
101595,    if not line:
101596,        time.sleep(1)
101597,        print 'Nothing New'
101598,    else:
101599,"        print 'Call Function: ', line"
101600,f = open('file.log')
101601,line = f.readline()
101602,if line:
101603,    // Do what you want with the line
101604,readline
101605,watchmedo shell-command \
101606,"--patterns=""*.sql"" \"
101607,--recursive \
101608,--command='~/Desktop/load_files_into_mysql_database.sh' \
101609,.
101610,System.IO.FileSystemWatcher
101611,file_size_stored = os.stat('neuron.py').st_size
101612,
101613,  while True:
101614,    try:
101615,      file_size_current = os.stat('neuron.py').st_size
101616,      if file_size_stored != file_size_current:
101617,        restart_program()
101618,    except: 
101619,      pass
101620,def restart_program(): #restart application
101621,    python = sys.executable
101622,"    os.execl(python, python, * sys.argv)"
101623,.st_mtime
101624,.st_size
101625,ACTIONS = {
101626,"  1 : ""Created"","
101627,"  2 : ""Deleted"","
101628,"  3 : ""Updated"","
101629,"  4 : ""Renamed from something"","
101630,"  5 : ""Renamed to something"""
101631,}
101632,FILE_LIST_DIRECTORY = 0x0001
101633,
101634,class myThread (threading.Thread):
101635,"    def __init__(self, threadID, fileName, directory, origin):"
101636,        threading.Thread.__init__(self)
101637,        self.threadID = threadID
101638,        self.fileName = fileName
101639,        self.daemon = True
101640,        self.dir = directory
101641,        self.originalFile = origin
101642,    def run(self):
101643,"        startMonitor(self.fileName, self.dir, self.originalFile)"
101644,
101645,"def startMonitor(fileMonitoring,dirPath,originalFile):"
101646,    hDir = win32file.CreateFile (
101647,"        dirPath,"
101648,"        FILE_LIST_DIRECTORY,"
101649,"        win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE,"
101650,"        None,"
101651,"        win32con.OPEN_EXISTING,"
101652,"        win32con.FILE_FLAG_BACKUP_SEMANTICS,"
101653,        None
101654,    )
101655,    # Wait for new data and call ProcessNewData for each new chunk that's
101656,    # written
101657,    while 1:
101658,        # Wait for a change to occur
101659,        results = win32file.ReadDirectoryChangesW (
101660,"            hDir,"
101661,"            1024,"
101662,"            False,"
101663,"            win32con.FILE_NOTIFY_CHANGE_LAST_WRITE,"
101664,"            None,"
101665,            None
101666,        )
101667,"        # For each change, check to see if it's updating the file we're"
101668,        # interested in
101669,"        for action, file_M in results:"
101670,"            full_filename = os.path.join (dirPath, file_M)"
101671,"            #print file, ACTIONS.get (action, ""Unknown"")"
101672,            if len(full_filename) == len(fileMonitoring) and action == 3:
101673,                #copy to main file
101674,                ...
101675,src
101676,src/app.py
101677,"nodemon -w 'src/**' -e py,html --exec python src/app.py"
101678,"-e py,html"
101679,"from PyQt5.QtCore import QFileSystemWatcher, QSettings, QThread"
101680,from ui_main_window import Ui_MainWindow   # Qt Creator gen'd 
101681,
101682,"class MainWindow(QMainWindow, Ui_MainWindow):"
101683,"    def __init__(self, parent=None):"
101684,"        QMainWindow.__init__(self, parent)"
101685,        Ui_MainWindow.__init__(self)
101686,        self._fileWatcher = QFileSystemWatcher()
101687,        self._fileWatcher.fileChanged.connect(self.fileChanged)
101688,
101689,"    def fileChanged(self, filepath):"
101690,"        QThread.msleep(300)    # Reqd on some machines, give chance for write to complete"
101691,"        # ^^ About to test this, may need more sophisticated solution"
101692,        with open(filepath) as file:
101693,            lastLine = list(file)[-1]
101694,        destPath = self._filemap[filepath]['dest file']
101695,"        with open(destPath, 'a') as out_file:               # a= append"
101696,            out_file.writelines([lastLine])
101697,repyt ./app.py
101698,import os
101699,import sys
101700,import time
101701,
101702,class Watcher(object):
101703,    running = True
101704,    refresh_delay_secs = 1
101705,
101706,    # Constructor
101707,"    def __init__(self, watch_files, call_func_on_change=None, *args, **kwargs):"
101708,        self._cached_stamp = 0
101709,        self._cached_stamp_files = {}
101710,        self.filenames = watch_files
101711,        self.call_func_on_change = call_func_on_change
101712,        self.args = args
101713,        self.kwargs = kwargs
101714,
101715,    # Look for changes
101716,    def look(self):
101717,        for file in self.filenames:
101718,            stamp = os.stat(file).st_mtime
101719,            if not file in self._cached_stamp_files:
101720,                self._cached_stamp_files[file] = 0
101721,            if stamp != self._cached_stamp_files[file]:
101722,                self._cached_stamp_files[file] = stamp
101723,"                # File has changed, so do something..."
101724,"                file_to_read = open(file, 'r')"
101725,                value = file_to_read.read()
101726,"                print(""value from file"", value)"
101727,                file_to_read.seek(0)
101728,                if self.call_func_on_change is not None:
101729,"                    self.call_func_on_change(*self.args, **self.kwargs)"
101730,
101731,    # Keep watching in a loop
101732,    def watch(self):
101733,        while self.running:
101734,            try:
101735,                # Look for changes
101736,                time.sleep(self.refresh_delay_secs)
101737,                self.look()
101738,            except KeyboardInterrupt:
101739,                print('\nDone')
101740,                break
101741,            except FileNotFoundError:
101742,                # Action on file not found
101743,                pass
101744,            except Exception as e:
101745,                print(e)
101746,                print('Unhandled error: %s' % sys.exc_info()[0])
101747,
101748,# Call this function each time a change happens
101749,def custom_action(text):
101750,    print(text)
101751,    # pass
101752,
101753,"watch_files = ['/Users/mexekanez/my_file.txt', '/Users/mexekanez/my_file1.txt']"
101754,
101755,# watcher = Watcher(watch_file)  # simple
101756,
101757,
101758,
101759,"if __name__ == ""__main__"":"
101760,"    watcher = Watcher(watch_files, custom_action, text='yes, changed')  # also call custom action function"
101761,    watcher.watch()  # start the watch going
101762,from pygtail import Pygtail
101763,import sys
101764,
101765,while True:
101766,"    for line in Pygtail(""some.log""):"
101767,        sys.stdout.write(line)
101768,import inotify.adapters
101769,from datetime import datetime
101770,
101771,
101772,LOG_FILE='/var/log/mysql/server_audit.log'
101773,
101774,
101775,def main():
101776,    start_time = datetime.now()
101777,    while True:
101778,        i = inotify.adapters.Inotify()
101779,        i.add_watch(LOG_FILE)
101780,        for event in i.event_gen(yield_nones=False):
101781,            break
101782,        del i
101783,
101784,"        with open(LOG_FILE, 'r') as f:"
101785,            for line in f:
101786,"                entry = line.split(',')"
101787,"                entry_time = datetime.strptime(entry[0],"
101788,                                               '%Y%m%d %H:%M:%S')
101789,                if entry_time > start_time:
101790,                    start_time = entry_time
101791,                    print(entry)
101792,
101793,
101794,if __name__ == '__main__':
101795,    main()
101796,    while True:
101797,        # Capturing the two instances models.py after certain interval of time
101798,"        print(""Looking for changes in "" + app_name.capitalize() + "" models.py\nPress 'CTRL + C' to stop the program"")"
101799,"        with open(app_name.capitalize() + '/filename', 'r+') as app_models_file:"
101800,            filename_content = app_models_file.read()
101801,        time.sleep(5)
101802,"        with open(app_name.capitalize() + '/filename', 'r+') as app_models_file_1:"
101803,            filename_content_1 = app_models_file_1.read()
101804,        # Comparing models.py after certain interval of time
101805,        if filename_content == filename_content_1:
101806,            pass
101807,        else:
101808,"            print(""You made a change in "" + app_name.capitalize() + "" filename.\n"")"
101809,"            cmd = str(input(""Do something with the file?(y/n):""))"
101810,            if cmd == 'y':
101811,                # Do Something
101812,            elif cmd == 'n':
101813,                # pass or do something
101814,            else:
101815,"                print(""Invalid input"")"
101816,filecmp
101817,cmp()
101818,from filecmp import cmp
101819,cmp()
101820,cmp()
101821,import filecmp
101822,"filecmp.cmp(path_to_file_1, path_to_file_2, shallow=True)"
101823,@echo off
101824,:top
101825,"xcopy /m /y %1 %2 | find /v ""File(s) copied"""
101826,timeout /T 1 > nul
101827,goto :top
101828,    try:
101829,            f = open(filePath)
101830,    except IOError:
101831,"            print ""No such file: %s"" % filePath"
101832,"            raw_input(""Press Enter to close window"")"
101833,    try:
101834,            lines = f.readlines()
101835,            while True:
101836,                    line = f.readline()
101837,                    try:
101838,                            if not line:
101839,                                    time.sleep(1)
101840,                            else:
101841,                                    functionThatAnalisesTheLine(line)
101842,"                    except Exception, e:"
101843,"                            # handle the exception somehow (for example, log the trace) and raise the same exception again"
101844,"                            raw_input(""Press Enter to close window"")"
101845,                            raise e
101846,    finally:
101847,            f.close()
101848,functionThatAnalisesTheLine
101849,chardet
101850,import magic
101851,
101852,"blob = open('unknown-file', 'rb').read()"
101853,m = magic.open(magic.MAGIC_MIME_ENCODING)
101854,m.load()
101855,"encoding = m.buffer(blob)  # ""utf-8"" ""us-ascii"" etc"
101856,libmagic
101857,import magic
101858,
101859,"blob = open('unknown-file', 'rb').read()"
101860,m = magic.Magic(mime_encoding=True)
101861,encoding = m.from_buffer(blob)
101862,libmagic
101863,chardet
101864,python-magic
101865,file
101866,open()
101867,UnicodeDecodeError: 'utf-8' codec can't decode byte 0xfc in position 169799: invalid start byte
101868,:set fileencoding
101869,latin1
101870,errors='ignore'
101871,binary
101872,#!/bin/bash
101873,#
101874,tmpfile=$1
101875,echo '-- info about file file ........'
101876,file -i $tmpfile
101877,enca -g $tmpfile
101878,echo 'recoding ........'
101879,#iconv -f iso-8859-2 -t utf-8 back_test.xml > $tmpfile
101880,#enca -x utf-8 $tmpfile
101881,#enca -g $tmpfile
101882,recode CP1250..UTF-8 $tmpfile
101883,# PYTHON
101884,"encodings = ['utf-8', 'windows-1250', 'windows-1252'] # add more"
101885,for e in encodings:
101886,    try:
101887,"        fh = codecs.open('file.txt', 'r', encoding=e)"
101888,        fh.readlines()
101889,        fh.seek(0)
101890,    except UnicodeDecodeError:
101891,"        print('got unicode error with %s , trying different encoding' % e)"
101892,    else:
101893,        print('opening the file with encoding:  %s ' % e)
101894,        break
101895,io
101896,"io.open(filepath, 'r', encoding='utf-8')"
101897,codecs
101898,\n
101899,chardet
101900,n_lines
101901,chardet
101902,confidence
101903,chardet.predict()
101904,import chardet
101905,from pathlib import Path
101906,
101907,"def predict_encoding(file_path: Path, n_lines: int=20) -> str:"
101908,    '''Predict a file's encoding using chardet'''
101909,
101910,    # Open the file as binary data
101911,    with Path(file_path).open('rb') as f:
101912,        # Join binary lines for specified number of lines
101913,        rawdata = b''.join([f.readline() for _ in range(n_lines)])
101914,
101915,    return chardet.detect(rawdata)['encoding']
101916,"def predict_encoding(file_path, n=20):   ... skip ... and then   rawdata = b''.join([f.read() for _ in range(n)])"
101917,chardet
101918,from bs4 import UnicodeDammit
101919,"with open('automate_data/billboard.csv', 'rb') as file:"
101920,   content = file.read()
101921,
101922,suggestion = UnicodeDammit(content)
101923,suggestion.original_encoding
101924,#'iso-8859-1'
101925,# Function: OpenRead(file)
101926,
101927,# A text file can be encoded using:
101928,"#   (1) The default operating system code page, Or"
101929,#   (2) utf8 with a BOM header
101930,#
101931,"#  If a text file is encoded with utf8, and does not have a BOM header,"
101932,#  the user can manually add a BOM header to the text file
101933,"#  using a text editor such as notepad++, and rerun the python script,"
101934,#  otherwise the file is read as a codepage file with the 
101935,#  invalid codepage characters removed
101936,
101937,import sys
101938,if int(sys.version[0]) != 3:
101939,    print('Aborted: Python 3.x required')
101940,    sys.exit(1)
101941,
101942,def bomType(file):
101943,"    """""""
101944,    returns file encoding string for open() function
101945,
101946,    EXAMPLE:
101947,        bom = bomtype(file)
101948,"        open(file, encoding=bom, errors='ignore')"
101949,"    """""""
101950,
101951,"    f = open(file, 'rb')"
101952,    b = f.read(4)
101953,    f.close()
101954,
101955,    if (b[0:3] == b'\xef\xbb\xbf'):
101956,"        return ""utf8"""
101957,
101958,    # Python automatically detects endianess if utf-16 bom is present
101959,    # write endianess generally determined by endianess of CPU
101960,    if ((b[0:2] == b'\xfe\xff') or (b[0:2] == b'\xff\xfe')):
101961,"        return ""utf16"""
101962,
101963,    if ((b[0:5] == b'\xfe\xff\x00\x00') 
101964,              or (b[0:5] == b'\x00\x00\xff\xfe')):
101965,"        return ""utf32"""
101966,
101967,"    # If BOM is not provided, then assume its the codepage"
101968,    #     used by your operating system
101969,"    return ""cp1252"""
101970,    # For the United States its: cp1252
101971,
101972,
101973,def OpenRead(file):
101974,    bom = bomType(file)
101975,"    return open(file, 'r', encoding=bom, errors='ignore')"
101976,
101977,
101978,#######################
101979,# Testing it
101980,#######################
101981,"fout = open(""myfile1.txt"", ""w"", encoding=""cp1252"")"
101982,"fout.write(""* hi there (cp1252)"")"
101983,fout.close()
101984,
101985,"fout = open(""myfile2.txt"", ""w"", encoding=""utf8"")"
101986,"fout.write(""\u2022 hi there (utf8)"")"
101987,fout.close()
101988,
101989,# this case is still treated like codepage cp1252
101990,#   (User responsible for making sure that all utf8 files
101991,#   have a BOM header)
101992,"fout = open(""badboy.txt"", ""wb"")"
101993,"fout.write(b""hi there.  barf(\x81\x8D\x90\x9D)"")"
101994,fout.close()
101995,
101996,# Read Example file with Bom Detection
101997,"fin = OpenRead(""myfile1.txt"")"
101998,L = fin.readline()
101999,print(L)
102000,fin.close()
102001,
102002,# Read Example file with Bom Detection
102003,"fin = OpenRead(""myfile2.txt"")"
102004,L =fin.readline() 
102005,"print(L) #requires QtConsole to view, Cmd.exe is cp1252"
102006,fin.close()
102007,
102008,# Read CP1252 with a few undefined chars without barfing
102009,"fin = OpenRead(""badboy.txt"")"
102010,L =fin.readline() 
102011,print(L)
102012,fin.close()
102013,
102014,# Check that bad characters are still in badboy codepage file
102015,"fin = open(""badboy.txt"", ""rb"")"
102016,fin.read(20)
102017,fin.close()
102018,"all_codecs = ['ascii', 'big5', 'big5hkscs', 'cp037', 'cp273', 'cp424', 'cp437', "
102019,"'cp500', 'cp720', 'cp737', 'cp775', 'cp850', 'cp852', 'cp855', 'cp856', 'cp857', "
102020,"'cp858', 'cp860', 'cp861', 'cp862', 'cp863', 'cp864', 'cp865', 'cp866', 'cp869', "
102021,"'cp874', 'cp875', 'cp932', 'cp949', 'cp950', 'cp1006', 'cp1026', 'cp1125', "
102022,"'cp1140', 'cp1250', 'cp1251', 'cp1252', 'cp1253', 'cp1254', 'cp1255', 'cp1256', "
102023,"'cp1257', 'cp1258', 'euc_jp', 'euc_jis_2004', 'euc_jisx0213', 'euc_kr', "
102024,"'gb2312', 'gbk', 'gb18030', 'hz', 'iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2', "
102025,"'iso2022_jp_2004', 'iso2022_jp_3', 'iso2022_jp_ext', 'iso2022_kr', 'latin_1', "
102026,"'iso8859_2', 'iso8859_3', 'iso8859_4', 'iso8859_5', 'iso8859_6', 'iso8859_7', "
102027,"'iso8859_8', 'iso8859_9', 'iso8859_10', 'iso8859_11', 'iso8859_13', "
102028,"'iso8859_14', 'iso8859_15', 'iso8859_16', 'johab', 'koi8_r', 'koi8_t', 'koi8_u', "
102029,"'kz1048', 'mac_cyrillic', 'mac_greek', 'mac_iceland', 'mac_latin2', 'mac_roman', "
102030,"'mac_turkish', 'ptcp154', 'shift_jis', 'shift_jis_2004', 'shift_jisx0213', "
102031,"'utf_32', 'utf_32_be', 'utf_32_le', 'utf_16', 'utf_16_be', 'utf_16_le', 'utf_7', "
102032,"'utf_8', 'utf_8_sig']"
102033,
102034,def find_codec(text):
102035,    for i in all_codecs:
102036,        for j in all_codecs:
102037,            try:
102038,"                print(i, ""to"", j, text.encode(i).decode(j))"
102039,            except:
102040,                pass
102041,
102042,"find_codec(""The example string which includes ö, ü, or ÄŸ, Ã¶"")"
102043,file
102044,import subprocess
102045,"file_cmd = ['file', 'test.txt']"
102046,"p = subprocess.Popen(file_cmd, stdout=subprocess.PIPE)"
102047,cmd_output = p.stdout.readlines()
102048,# x will begin with the file type output as is observed using 'file' command
102049,"x = cmd_output[0].split("": "")[1]"
102050,return x.startswith('UTF-8')
102051,#!/usr/bin/python                                                                                                  
102052,
102053,import sys
102054,
102055,def isUTF8(data):
102056,    try:
102057,        decoded = data.decode('UTF-8')
102058,    except UnicodeDecodeError:
102059,        return False
102060,    else:
102061,        for ch in decoded:
102062,            if 0xD800 <= ord(ch) <= 0xDFFF:
102063,                return False
102064,        return True
102065,
102066,def get_bytes_from_file(filename):
102067,"    return open(filename, ""rb"").read()"
102068,
102069,filename = sys.argv[1]
102070,data = get_bytes_from_file(filename)
102071,result = isUTF8(data)
102072,print(result)
102073,
102074,
102075,PS /Users/js> ./isutf8.py hi.txt                                                                                     
102076,True
102077,file -i
102078,import subprocess
102079,
102080,"file = ""path/to/file/file.txt"""
102081,
102082,"encoding =  subprocess.Popen(""file -bi ""+file, shell=True, stdout=subprocess.PIPE).stdout"
102083,
102084,"encoding = re.sub(r""(\\n)[^a-z0-9\-]"", """", str(encoding.read()).split(""="")[1], flags=re.IGNORECASE)"
102085,    
102086,print(encoding)
102087,import magic
102088,
102089,
102090,def detect(
102091,"    file_path,"
102092,):
102093,    return magic.Magic(
102094,"        mime_encoding=True,"
102095,    ).from_file(file_path)
102096,import chardet
102097,
102098,"with open (filepath , ""rb"") as f:"
102099,    data= f.read()
102100,    encode=chardet.UniversalDetector()
102101,    encode.close()
102102,    print(encode.result)
102103,chardet3 fileName
102104,chardet3 donnee/dir/donnee.csv
102105,donnee/dir/donnee.csv: ISO-8859-1 with confidence 0.73
102106,">>> [b.to_bytes(1, 'big').decode(""latin-1"") for b in range(256)]"
102107,"['\x00', ..., 'ÿ']"
102108,chardet
102109,"def guess_encoding(data: bytes, fallback: str = ""iso8859_15"") -> str:"
102110,"    """""""
102111,    A basic encoding detector.
102112,"    """""""
102113,"    for bom, encoding in ["
102114,"        (codecs.BOM_UTF32_BE, ""utf_32_be""),"
102115,"        (codecs.BOM_UTF32_LE, ""utf_32_le""),"
102116,"        (codecs.BOM_UTF16_BE, ""utf_16_be""),"
102117,"        (codecs.BOM_UTF16_LE, ""utf_16_le""),"
102118,"        (codecs.BOM_UTF8, ""utf_8_sig""),"
102119,    ]:
102120,        if data.startswith(bom):
102121,            return encoding
102122,
102123,    if all(b < 128 for b in data):
102124,"        return ""ascii""  # you may want to use the fallback here if data is only a sample."
102125,
102126,"    decoder = codecs.getincrementaldecoder(""utf_8"")()"
102127,    try:
102128,"        decoder.decode(data, final=False)"
102129,    except UnicodeDecodeError:
102130,        return fallback
102131,    else:
102132,"        return ""utf_8""  # not certain if data is only a sample"
102133,errors
102134,decode
102135,'ignore'
102136,'replace'
102137,'backslashreplace'
102138,False == 0
102139,True == 1
102140,0 == False  # True
102141,1 == True   # True
102142,"['zero', 'one'][False]  # is 'zero'"
102143,bool
102144,int
102145,0
102146,1
102147,sum(bool_list)
102148,sum(1 for x bool_list if x)
102149,bool_list.count(True)
102150,True
102151,False
102152,True
102153,False
102154,1
102155,0
102156,False
102157,bool
102158,int
102159,    object
102160,       |
102161,     int
102162,       |
102163,     bool
102164,"['zero', 'one'][False]"
102165,__index__
102166,__index__
102167,int
102168,long
102169,a = True; True = 'i am an idiot'; a == True
102170,>>> int(False)
102171,0
102172,>>> int(True)
102173,1
102174,>>> bool(5)
102175,True
102176,>>> bool(-5)
102177,True
102178,>>> bool(0)
102179,False
102180,>>> False = 5
102181,>>> 0 == False
102182,False
102183,True==1
102184,0==False
102185,False
102186,5
102187,False
102188,bool
102189,"d = {... for k, v in zip(keys, values)}"
102190,collections.Counter
102191,blah bla
102192,"{key: value for (key, value) in iterable}"
102193,dict
102194,"pairs = [('a', 1), ('b', 2)]"
102195,"dict(pairs)                         #=> {'a': 1, 'b': 2}"
102196,"dict([(k, v+1) for k, v in pairs])  #=> {'a': 2, 'b': 3}"
102197,dict
102198,zip
102199,"keys = ['a', 'b']"
102200,"values = [1, 2]"
102201,"dict(zip(keys, values))  #=> {'a': 1, 'b': 2}"
102202,"2) ""zip'ped"" from two separate iterables of keys/vals"
102203,"dict(zip(list_of_keys, list_of_values))"
102204,"d = {k:v for k, v in iterable}"
102205,">>> ts = [(1, 2), (3, 4), (5, 6)]"
102206,>>> dict(ts)
102207,"{1: 2, 3: 4, 5: 6}"
102208,">>> gen = ((i, i+1) for i in range(1, 6, 2))"
102209,>>> gen
102210,<generator object <genexpr> at 0xb7201c5c>
102211,>>> dict(gen)
102212,"{1: 2, 3: 4, 5: 6}"
102213,"mydict = {(k,v) for (k,v) in blah blah blah}"
102214,"mydict = {k: v for k, v in iterable}"
102215,blah blah blah
102216,"blahs = [('blah0', 'blah'), ('blah1', 'blah'), ('blah2', 'blah'), ('blah3', 'blah')]"
102217,dict
102218,set
102219,:
102220,"mydict = {k: v for k, v in blahs}"
102221,>>> mydict
102222,"{'blah0': 'blah', 'blah1': 'blah', 'blah2': 'blah', 'blah3': 'blah'}"
102223,>>> mydict
102224,"{'blah0': 'blah', 'blah1': 'blah', 'blah3': 'blah', 'blah2': 'blah'}"
102225,">>> mydict = {k: v for k, v in blahs if not int(k[-1]) % 2}"
102226,>>> mydict
102227,"{'blah0': 'blah', 'blah2': 'blah'}"
102228,">>> list1, list2 = ['a', 'b', 'c'], [1,2,3]"
102229,">>> dict( zip( list1, list2))"
102230,"{'a': 1, 'c': 3, 'b': 2}"
102231,"d = {i: True for i in [1,2,3]}"
102232,"d = dict((i,True) for i in [1,2,3])"
102233,key_list
102234,value_list
102235,"d = dict((key, value) for (key, value) in zip(key_list, value_list))"
102236,"d = {(key, value) for (key, value) in zip(key_list, value_list)}"
102237,"nums = [4,2,2,1,3]"
102238,"{index:nums[index] for index in range(0,len(nums))}"
102239,>>> import string
102240,">>> dict1 = {value: (int(key) + 1) for key, value in "
102241,enumerate(list(string.ascii_lowercase))}
102242,>>> dict1
102243,"{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'g': 7, 'f': 6, 'i': 9, 'h': 8, "
102244,"'k': 11, 'j': 10, 'm': 13, 'l': 12, 'o': 15, 'n': 14, 'q': 17, 'p': 16, 's': "
102245,"19, 'r': 18, 'u': 21, 't': 20, 'w': 23, 'v': 22, 'y': 25, 'x': 24, 'z': 26}"
102246,>>> 
102247,"d = {k: v+1  for v, k in enumerate(string.ascii_lowercase)}"
102248,pd.DataFrame()
102249,#Multiple lists 
102250,"model=['A', 'B', 'C', 'D']"
102251,"launched=[1983,1984,1984,1984]"
102252,"discontinued=[1986, 1985, 1984, 1986]"
102253,
102254,#Dictionary with list comprehension
102255,"keys=['model','launched','discontinued']"
102256,"vals=[model, launched,discontinued]"
102257,"data = {key:vals[n] for n, key in enumerate(keys)}"
102258,
102259,#Convert dict to dataframe
102260,df=pd.DataFrame(data)
102261,display(df)
102262,enumerate
102263,n
102264,vals
102265,key
102266,"def get_dic_from_two_lists(keys, values):"
102267,    return { keys[i] : values[i] for i in range(len(keys)) }
102268,"country = ['India', 'Pakistan', 'China']"
102269,"capital = ['New Delhi', 'Islamabad', 'Beijing']"
102270,"print get_dic_from_two_lists(country, capital)"
102271,"{'Pakistan': 'Islamabad', 'China': 'Beijing', 'India': 'New Delhi'}"
102272,dict
102273,list
102274,"names = ['a', 'b', 'd', 'f', 'c']"
102275,"names_to_id = {v:k for k, v in enumerate(names)}"
102276,"# {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'f': 4}"
102277,set
102278,"names = ['a', 'b', 'd', 'f', 'd', 'c']"
102279,sorted_list = list(set(names))
102280,sorted_list.sort()
102281,"names_to_id = {v:k for k, v in enumerate(sorted_list)}"
102282,"# {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'f': 4}"
102283,
102284,"names = [1,2,5,5,6,2,1]"
102285,"names_to_id = {v:k for k, v in enumerate(set(names))}"
102286,"# {1: 0, 2: 1, 5: 2, 6: 3}"
102287,"{name:index for index, name in enumerate(names)}"
102288,">>> {k: v**3 for (k, v) in zip(string.ascii_lowercase, range(26))}"
102289,"{'i': 512, 'e': 64, 'o': 2744, 'h': 343, 'l': 1331, 's': 5832, 'b': 1, 'w': 10648, 'c': 8, 'x': 12167, 'y': 13824, 't': 6859, 'p': 3375, 'd': 27, 'j': 729, 'a': 0, 'z': 15625, 'f': 125, 'q': 4096, 'u': 8000, 'n': 2197, 'm': 1728, 'r': 4913, 'k': 1000, 'g': 216, 'v': 9261}"
102290,"mydict = {k:v for (k,v) in blah}"
102291,"parents = [father, mother]"
102292,            
102293,"parents = {parent:1 - P[""mutation""] if parent in two_genes else 0.5 if parent in one_gene else P[""mutation""] for parent in parents}"
102294,"reduce(lambda p, q: {**p, **{q[0]: q[1]}}, bla bla bla, {})"
102295,reduce
102296,functools
102297,# method 1
102298,">>> lst = [('a', 2), ('b', 4), ('c', 6)]"
102299,>>> dict(lst)
102300,"{'a': 2, 'b': 4, 'c': 6}"
102301,# method 2
102302,">>> lst = [('a', 2), ('b', 4), ('c', 6)]"
102303,">>> d = {k:v for k, v in lst}"
102304,>>> d
102305,"{'a': 2, 'b': 4, 'c': 6}"
102306,"Syntax: {key: value for (key, value) in data}"
102307,# create a list comprehension with country and code:
102308,"    Country_code = [('China', 86), ('USA', 1),"
102309,"            ('Ghana', 233), ('Uk', 44)]"
102310,
102311,# use iterable method to show results
102312,"{key: value for (key, value) in Country_code}"
102313,bisect
102314,7 in a
102315,set
102316,in
102317,in
102318,set
102319,bisect
102320,import random
102321,import bisect
102322,import matplotlib.pyplot as plt
102323,import math
102324,import time
102325,
102326,
102327,"def method_in(a, b, c):"
102328,    start_time = time.time()
102329,"    for i, x in enumerate(a):"
102330,        if x in b:
102331,            c[i] = 1
102332,    return time.time() - start_time
102333,
102334,
102335,"def method_set_in(a, b, c):"
102336,    start_time = time.time()
102337,    s = set(b)
102338,"    for i, x in enumerate(a):"
102339,        if x in s:
102340,            c[i] = 1
102341,    return time.time() - start_time
102342,
102343,
102344,"def method_bisect(a, b, c):"
102345,    start_time = time.time()
102346,    b.sort()
102347,"    for i, x in enumerate(a):"
102348,"        index = bisect.bisect_left(b, x)"
102349,        if index < len(a):
102350,            if x == b[index]:
102351,                c[i] = 1
102352,    return time.time() - start_time
102353,
102354,
102355,def profile():
102356,    time_method_in = []
102357,    time_method_set_in = []
102358,    time_method_bisect = []
102359,
102360,    # adjust range down if runtime is too long or up if there are too many zero entries in any of the time_method lists
102361,"    Nls = [x for x in range(10000, 30000, 1000)]"
102362,    for N in Nls:
102363,"        a = [x for x in range(0, N)]"
102364,        random.shuffle(a)
102365,"        b = [x for x in range(0, N)]"
102366,        random.shuffle(b)
102367,"        c = [0 for x in range(0, N)]"
102368,
102369,"        time_method_in.append(method_in(a, b, c))"
102370,"        time_method_set_in.append(method_set_in(a, b, c))"
102371,"        time_method_bisect.append(method_bisect(a, b, c))"
102372,
102373,"    plt.plot(Nls, time_method_in, marker='o', color='r', linestyle='-', label='in')"
102374,"    plt.plot(Nls, time_method_set_in, marker='o', color='b', linestyle='-', label='set')"
102375,"    plt.plot(Nls, time_method_bisect, marker='o', color='g', linestyle='-', label='bisect')"
102376,"    plt.xlabel('list size', fontsize=18)"
102377,"    plt.ylabel('log(time)', fontsize=18)"
102378,    plt.legend(loc='upper left')
102379,    plt.yscale('log')
102380,    plt.show()
102381,
102382,
102383,profile()
102384,import random / import bisect / import matplotlib.pyplot as plt
102385,profile()
102386,range()
102387,var in [integer list]
102388,range()
102389,x in list
102390,set
102391,s = set(a)
102392,if 7 in s:
102393,  # do stuff
102394,"def check_availability(element, collection: iter):"
102395,    return element in collection
102396,"check_availability('a', [1,2,3,4,'a','b','c'])"
102397,"o='--skip';  o in (""--skip-ias"");   # returns True !"
102398,in
102399,"(""hello"")"
102400,"(""hello"",)"
102401,"o in (""--skip-ias"",)"
102402,False
102403,import random
102404,import bisect
102405,import matplotlib.pyplot as plt
102406,import math
102407,import timeit
102408,import itertools
102409,
102410,"def wrapper(func, *args, **kwargs):"
102411,"    "" Use to produced 0 argument function for call it"""
102412,    # Reference https://www.pythoncentral.io/time-a-python-function/
102413,    def wrapped():
102414,"        return func(*args, **kwargs)"
102415,    return wrapped
102416,
102417,"def method_in(a,b,c):"
102418,"    for i,x in enumerate(a):"
102419,        if x in b:
102420,            c[i] = b.index(x)
102421,        else:
102422,            c[i] = -1
102423,    return c
102424,
102425,"def method_try(a,b,c):"
102426,"    for i, x in enumerate(a):"
102427,        try:
102428,            c[i] = b.index(x)
102429,        except ValueError:
102430,            c[i] = -1
102431,
102432,"def method_set_in(a,b,c):"
102433,    s = set(b)
102434,"    for i,x in enumerate(a):"
102435,        if x in s:
102436,            c[i] = b.index(x)
102437,        else:
102438,            c[i] = -1
102439,    return c
102440,
102441,"def method_bisect(a,b,c):"
102442,"    "" Finds indexes using bisection """
102443,
102444,    # Create a sorted b with its index
102445,"    bsorted = sorted([(x, i) for i, x in enumerate(b)], key = lambda t: t[0])"
102446,
102447,"    for i,x in enumerate(a):"
102448,"        index = bisect.bisect_left(bsorted,(x, ))"
102449,        c[i] = -1
102450,        if index < len(a):
102451,            if x == bsorted[index][0]:
102452,                c[i] = bsorted[index][1]  # index in the b array
102453,
102454,    return c
102455,
102456,"def method_reverse_lookup(a, b, c):"
102457,"    reverse_lookup = {x:i for i, x in enumerate(b)}"
102458,"    for i, x in enumerate(a):"
102459,"        c[i] = reverse_lookup.get(x, -1)"
102460,    return c
102461,
102462,def profile():
102463,"    Nls = [x for x in range(1000,20000,1000)]"
102464,    number_iterations = 10
102465,"    methods = [method_in, method_try, method_set_in, method_bisect, method_reverse_lookup]"
102466,    time_methods = [[] for _ in range(len(methods))]
102467,
102468,    for N in Nls:
102469,"        a = [x for x in range(0,N)]"
102470,        random.shuffle(a)
102471,"        b = [x for x in range(0,N)]"
102472,        random.shuffle(b)
102473,"        c = [0 for x in range(0,N)]"
102474,
102475,"        for i, func in enumerate(methods):"
102476,"            wrapped = wrapper(func, a, b, c)"
102477,"            time_methods[i].append(math.log(timeit.timeit(wrapped, number=number_iterations)))"
102478,
102479,"    markers = itertools.cycle(('o', '+', '.', '>', '2'))"
102480,"    colors = itertools.cycle(('r', 'b', 'g', 'y', 'c'))"
102481,"    labels = itertools.cycle(('in', 'try', 'set', 'bisect', 'reverse'))"
102482,
102483,    for i in range(len(time_methods)):
102484,"        plt.plot(Nls,time_methods[i],marker = next(markers),color=next(colors),linestyle='-',label=next(labels))"
102485,
102486,"    plt.xlabel('list size', fontsize=18)"
102487,"    plt.ylabel('log(time)', fontsize=18)"
102488,    plt.legend(loc = 'upper left')
102489,    plt.show()
102490,
102491,profile()
102492,"a = [4,2,3,1,5,6]"
102493,
102494,"index = dict((y,x) for x,y in enumerate(a))"
102495,try:
102496,   a_index = index[7]
102497,except KeyError:
102498,"   print ""Not found"""
102499,else:
102500,"   print ""found"""
102501,in
102502,==
102503,is
102504,in
102505,list
102506,for element in s:
102507,    if element is target:
102508,        # fast check for identity implies equality
102509,        return True
102510,    if element == target:
102511,        # slower check for actual equality
102512,        return True
102513,return False
102514,numpy.NAN
102515,>>> import numpy
102516,>>> numpy.NAN == numpy.NAN
102517,False
102518,>>> numpy.NAN is numpy.NAN
102519,True
102520,>>> numpy.NAN in [numpy.NAN]
102521,True
102522,any()
102523,">>> lst = [numpy.NAN, 1 , 2]"
102524,>>> any(element == numpy.NAN for element in lst)
102525,False
102526,>>> any(element is numpy.NAN for element in lst)
102527,True 
102528,in
102529,list
102530,any()
102531,any(element is target or element == target for element in lst)
102532,in
102533,list
102534,set
102535,7 in list_data
102536,7 in set_data
102537,in
102538,import perfplot
102539,import numpy as np
102540,
102541,
102542,def setup(n):
102543,    data = np.arange(n)
102544,    np.random.shuffle(data)
102545,"    return data, set(data)"
102546,
102547,
102548,def list_in(data):
102549,    return 7 in data[0]
102550,
102551,
102552,def create_set_from_list(data):
102553,    return set(data[0])
102554,
102555,
102556,def set_in(data):
102557,    return 7 in data[1]
102558,
102559,
102560,b = perfplot.bench(
102561,"    setup=setup,"
102562,"    kernels=[list_in, set_in, create_set_from_list],"
102563,"    n_range=[2 ** k for k in range(24)],"
102564,"    xlabel=""len(data)"","
102565,"    equality_check=None,"
102566,)
102567,"b.save(""out.png"")"
102568,b.show()
102569,set
102570,__contains__
102571,sequence.__contains__(value)
102572,">>> l = [1, 2, 3]"
102573,>>> l.__contains__(3)
102574,True
102575,>>> 
102576,__contains__
102577,in
102578,[i for i in list_from_which_to_search if i in list_to_search_in]
102579,list_to_search_in
102580,list_from_which_to_search
102581,a[(a['some_column']==some_number) & (a['some_other_column']==some_other_number)]
102582,a[(a['some_column']==some_number) and (a['some_other_column']==some_other_number)]
102583,"a = pd.DataFrame({'x':[1,1],'y':[10,20]})"
102584,
102585,In: a[(a['x']==1)&(a['y']==10)]
102586,Out:    x   y
102587,     0  1  10
102588,
102589,In: a[(a['x']==1) and (a['y']==10)]
102590,Out: ValueError: The truth value of an array with more than one element is ambiguous.     Use a.any() or a.all()
102591,and != &
102592,and
102593,&
102594,__and__
102595,&
102596,(a['x']==1) and (a['y']==10)
102597,(a['x']==1)
102598,(a['y']==10)
102599,empty()
102600,all()
102601,any()
102602,&
102603,(a['x']==1) & (a['y']==10)
102604,&
102605,==
102606,a['x']==1 & a['y']==10
102607,a['x'] == (1 & a['y']) == 10
102608,(a['x'] == (1 & a['y'])) and ((1 & a['y']) == 10)
102609,Series and Series
102610,and
102611,ValueError
102612,x and y
102613,bool(x)
102614,bool(y)
102615,x
102616,x
102617,y
102618,x and y
102619,x
102620,y
102621,x & y
102622,x.__and__(y)
102623,__and__
102624,==
102625,a['x']==1 & a['y']==10
102626,&
102627,|
102628,~
102629,(...)
102630,and
102631,or
102632,not
102633,exp1
102634,exp2
102635,exp1 and exp2              # Logical AND
102636,exp1 or exp2               # Logical OR
102637,not exp1                   # Logical NOT
102638,exp1 & exp2                # Element-wise logical AND
102639,exp1 | exp2                # Element-wise logical OR
102640,~exp1                      # Element-wise logical NOT
102641,ValueError
102642,(exp1) op (exp2)
102643,(df['col1'] == x) & (df['col2'] == y) 
102644,&
102645,|
102646,~
102647,np.random.seed(0)
102648,"df = pd.DataFrame(np.random.choice(10, (5, 3)), columns=list('ABC'))"
102649,df
102650,
102651,   A  B  C
102652,0  5  0  3
102653,1  3  7  9
102654,2  3  5  2
102655,3  4  7  6
102656,4  8  8  1
102657,df
102658,&
102659,|
102660,or
102661,&
102662,and
102663,~
102664,not
102665,df.A > 2 & df.B < 3
102666,df.A > (2 &
102667,  df.B) < 3
102668,(df.A > 2) & (df.B <
102669,  3)
102670,&
102671,df['A'] < 5
102672,
102673,0    False
102674,1     True
102675,2     True
102676,3     True
102677,4    False
102678,"Name: A, dtype: bool"
102679,
102680,df['B'] > 5
102681,
102682,0    False
102683,1     True
102684,2    False
102685,3     True
102686,4     True
102687,"Name: B, dtype: bool"
102688,(df['A'] < 5) & (df['B'] > 5)
102689,
102690,0    False
102691,1     True
102692,2    False
102693,3     True
102694,4    False
102695,dtype: bool
102696,df[(df['A'] < 5) & (df['B'] > 5)]
102697,
102698,   A  B  C
102699,1  3  7  9
102700,3  4  7  6
102701,<
102702,>
102703,df['A'] < 5 & df['B'] > 5
102704,df['A'] < (5 & df['B']) > 5
102705,df['A'] < something_you_dont_want > 5
102706,(df['A'] < something_you_dont_want) and (something_you_dont_want > 5)
102707,# Both operands are Series...
102708,something_else_you_dont_want1 and something_else_you_dont_want2
102709,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
102710,df['A'].lt(5)
102711,
102712,0     True
102713,1     True
102714,2     True
102715,3     True
102716,4    False
102717,"Name: A, dtype: bool"
102718,
102719,df['B'].gt(5)
102720,
102721,0    False
102722,1     True
102723,2    False
102724,3     True
102725,4     True
102726,"Name: B, dtype: bool"
102727,df['A'].lt(5) & df['B'].gt(5)
102728,
102729,0    False
102730,1     True
102731,2    False
102732,3     True
102733,4    False
102734,dtype: bool
102735,╒════╤════════════╤════════════╕
102736,│    │ Operator   │ Function   │
102737,╞════╪════════════╪════════════╡
102738,│  0 │ >          │ gt         │
102739,├────┼────────────┼────────────┤
102740,│  1 │ >=         │ ge         │
102741,├────┼────────────┼────────────┤
102742,│  2 │ <          │ lt         │
102743,├────┼────────────┼────────────┤
102744,│  3 │ <=         │ le         │
102745,├────┼────────────┼────────────┤
102746,│  4 │ ==         │ eq         │
102747,├────┼────────────┼────────────┤
102748,│  5 │ !=         │ ne         │
102749,╘════╧════════════╧════════════╛
102750,DataFrame.query
102751,eval
102752,df.query('A < 5 and B > 5')
102753,
102754,   A  B  C
102755,1  3  7  9
102756,3  4  7  6
102757,query
102758,eval
102759,operator.and_
102760,Series.__and__
102761,import operator 
102762,
102763,"operator.and_(df['A'] < 5, df['B'] > 5)"
102764,"# Same as,"
102765,# (df['A'] < 5).__and__(df['B'] > 5) 
102766,
102767,0    False
102768,1     True
102769,2    False
102770,3     True
102771,4    False
102772,dtype: bool
102773,
102774,"df[operator.and_(df['A'] < 5, df['B'] > 5)]"
102775,
102776,   A  B  C
102777,1  3  7  9
102778,3  4  7  6
102779,np.logical_and
102780,logical_and.reduce
102781,np.logical_and
102782,"np.logical_and(df['A'] < 5, df['B'] > 5)"
102783,
102784,0    False
102785,1     True
102786,2    False
102787,3     True
102788,4    False
102789,"Name: A, dtype: bool"
102790,
102791,"df[np.logical_and(df['A'] < 5, df['B'] > 5)]"
102792,
102793,   A  B  C
102794,1  3  7  9
102795,3  4  7  6
102796,np.logical_and
102797,reduce
102798,logical_and
102799,m1
102800,m2
102801,m3
102802,&
102803,m1 & m2 & m3
102804,"np.logical_and.reduce([m1, m2, m3])"
102805,import operator
102806,
102807,"cols = ['A', 'B']"
102808,"ops = [np.less, np.greater]"
102809,"values = [5, 5]"
102810,
102811,"m = np.logical_and.reduce([op(df[c], v) for op, c, v in zip(ops, cols, values)])"
102812,m 
102813,"# array([False,  True, False,  True, False])"
102814,
102815,df[m]
102816,   A  B  C
102817,1  3  7  9
102818,3  4  7  6
102819,df
102820,|
102821,df['A'] == 3
102822,
102823,0    False
102824,1     True
102825,2     True
102826,3    False
102827,4    False
102828,"Name: A, dtype: bool"
102829,
102830,df['B'] == 7
102831,
102832,0    False
102833,1     True
102834,2    False
102835,3     True
102836,4    False
102837,"Name: B, dtype: bool"
102838,(df['A'] == 3) | (df['B'] == 7)
102839,
102840,0    False
102841,1     True
102842,2     True
102843,3     True
102844,4    False
102845,dtype: bool
102846,
102847,df[(df['A'] == 3) | (df['B'] == 7)]
102848,
102849,   A  B  C
102850,1  3  7  9
102851,2  3  5  2
102852,3  4  7  6
102853,df[df['A'].eq(3) | df['B'].eq(7)]
102854,
102855,   A  B  C
102856,1  3  7  9
102857,2  3  5  2
102858,3  4  7  6
102859,operator.or_
102860,Series.__or__
102861,"operator.or_(df['A'] == 3, df['B'] == 7)"
102862,"# Same as,"
102863,# (df['A'] == 3).__or__(df['B'] == 7)
102864,
102865,0    False
102866,1     True
102867,2     True
102868,3     True
102869,4    False
102870,dtype: bool
102871,
102872,"df[operator.or_(df['A'] == 3, df['B'] == 7)]"
102873,
102874,   A  B  C
102875,1  3  7  9
102876,2  3  5  2
102877,3  4  7  6
102878,np.logical_or
102879,logical_or
102880,"np.logical_or(df['A'] == 3, df['B'] == 7)"
102881,
102882,0    False
102883,1     True
102884,2     True
102885,3     True
102886,4    False
102887,"Name: A, dtype: bool"
102888,
102889,"df[np.logical_or(df['A'] == 3, df['B'] == 7)]"
102890,
102891,   A  B  C
102892,1  3  7  9
102893,2  3  5  2
102894,3  4  7  6
102895,logical_or.reduce
102896,"np.logical_or.reduce([df['A'] == 3, df['B'] == 7])"
102897,"# array([False,  True,  True,  True, False])"
102898,
102899,"df[np.logical_or.reduce([df['A'] == 3, df['B'] == 7])]"
102900,
102901,   A  B  C
102902,1  3  7  9
102903,2  3  5  2
102904,3  4  7  6
102905,"mask = pd.Series([True, True, False])"
102906,"[False, False, True]"
102907,~
102908,~mask
102909,
102910,0    False
102911,1    False
102912,2     True
102913,dtype: bool
102914,~(df['A'] == 3)
102915,
102916,0     True
102917,1    False
102918,2    False
102919,3     True
102920,4     True
102921,"Name: A, dtype: bool"
102922,mask.__invert__()
102923,
102924,0    False
102925,1    False
102926,2     True
102927,dtype: bool
102928,operator.inv
102929,__invert__
102930,operator.inv(mask)
102931,
102932,0    False
102933,1    False
102934,2     True
102935,dtype: bool
102936,np.logical_not
102937,np.logical_not(mask)
102938,
102939,0    False
102940,1    False
102941,2     True
102942,dtype: bool
102943,np.logical_and
102944,np.bitwise_and
102945,logical_or
102946,bitwise_or
102947,logical_not
102948,invert
102949,|
102950,numpy.bitwise_or
102951,numpy.logical_or
102952,numpy.logical_or
102953,|
102954,and
102955,or
102956,not
102957,pandas.Series
102958,pandas.DataFrame
102959,numpy.array
102960,bool
102961,>>> import numpy as np
102962,>>> import pandas as pd
102963,">>> arr = np.array([1,2,3])"
102964,">>> s = pd.Series([1,2,3])"
102965,">>> df = pd.DataFrame([1,2,3])"
102966,>>> bool(arr)
102967,ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
102968,>>> bool(s)
102969,"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
102970,>>> bool(df)
102971,"ValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
102972,numpy.array
102973,pandas.Series
102974,pandas.DataFrame
102975,numpy.array
102976,and
102977,np.logical_and
102978,or
102979,np.logical_or
102980,not
102981,np.logical_not
102982,numpy.logical_xor
102983,df1
102984,df2
102985,"np.logical_and(df1, df2)"
102986,"np.logical_or(df1, df2)"
102987,np.logical_not(df1)
102988,"np.logical_xor(df1, df2)"
102989,np.bitwise_and
102990,&
102991,np.bitwise_or
102992,|
102993,np.invert
102994,np.bitwise_not
102995,~
102996,np.bitwise_xor
102997,^
102998,(df1 < 10) | (df2 > 10)  # instead of the wrong df1 < 10 | df2 > 10
102999,a < 10 and b > 10
103000,a
103001,b
103002,>>> import numpy as np
103003,">>> a1 = np.array([0, 0, 1, 1])"
103004,">>> a2 = np.array([0, 1, 0, 1])"
103005,
103006,">>> np.logical_and(a1, a2)"
103007,"array([False, False, False,  True])"
103008,">>> np.bitwise_and(a1, a2)"
103009,"array([0, 0, 0, 1], dtype=int32)"
103010,">>> a3 = np.array([1, 2, 3, 4])"
103011,
103012,">>> a3[np.logical_and(a1, a2)]"
103013,array([4])
103014,">>> a3[np.bitwise_and(a1, a2)]"
103015,"array([1, 1, 1, 2])"
103016,Logical operator | NumPy logical function | NumPy bitwise function | Bitwise operator
103017,-------------------------------------------------------------------------------------
103018,       and       |  np.logical_and        | np.bitwise_and         |        &
103019,-------------------------------------------------------------------------------------
103020,       or        |  np.logical_or         | np.bitwise_or          |        |
103021,-------------------------------------------------------------------------------------
103022,                 |  np.logical_xor        | np.bitwise_xor         |        ^
103023,-------------------------------------------------------------------------------------
103024,       not       |  np.logical_not        | np.invert              |        ~
103025,bool
103026,~False
103027,-1
103028,~True
103029,-2
103030,def fn(*args):
103031,    return len(args) and max(args)-min(args)
103032,10 and 7-2
103033,10 or 7 - 2
103034,and
103035,or
103036,None
103037,0
103038,args
103039,and
103040,or
103041,and
103042,or
103043,x or y
103044,x and y
103045,not x
103046,True
103047,False
103048,not
103049,len(args) and max(args) - min(args)
103050,args
103051,max(args) - min(args)
103052,0
103053,if-else
103054,exp1 and exp2
103055,r1 = exp1
103056,if r1:
103057,    r1 = exp2
103058,r1 = exp2 if exp1 else exp1
103059,exp1 or exp2
103060,r1 = exp1
103061,if not r1:
103062,    r1 = exp2
103063,r1 = exp1 if exp1 else exp2
103064,exp1
103065,exp2
103066,and
103067,or
103068,int
103069,str
103070,list
103071,dict
103072,tuple
103073,set
103074,NoneType
103075,None
103076,False
103077,0
103078,0.0
103079,0j
103080,Decimal(0)
103081,"Fraction(0, 1)"
103082,[]
103083,list
103084,{}
103085,dict
103086,()
103087,tuple
103088,''
103089,str
103090,b''
103091,bytes
103092,set()
103093,set
103094,range
103095,range(0)
103096,obj.__bool__()
103097,False
103098,obj.__len__()
103099,0
103100,if
103101,while
103102,bool
103103,True
103104,False
103105,and
103106,def foo(*args):
103107,    ...
103108,foo()
103109,and
103110,def foo(*args):
103111,     return len(args) and max(args) - min(args)
103112,"foo(1, 2, 3, 4, 5)"
103113,# 4
103114,
103115,foo()
103116,# 0
103117,and
103118,True
103119,foo
103120,len(args)
103121,0
103122,max(args) - min(args)
103123,len(args)
103124,0
103125,0
103126,def foo(*args):
103127,    if not len(args):
103128,        return 0
103129,    
103130,    return max(args) - min(args)
103131,def foo(*args):
103132,    return 0 if not args else max(args) - min(args)
103133,or
103134,or
103135,def foo(*args):
103136,    ...
103137,foo
103138,9000
103139,or
103140,foo
103141,def foo(*args):
103142,     return [x for x in args if x > 9000] or 'No number over 9000!'
103143,
103144,"foo(9004, 1, 2, 500)"
103145,# [9004]
103146,
103147,"foo(1, 2, 3, 4)"
103148,# 'No number over 9000!'
103149,foo
103150,9000
103151,[]
103152,def foo(*args):
103153,    r = [x for x in args if x > 9000]
103154,    if not r:
103155,        return 'No number over 9000!' 
103156,    
103157,    return r
103158,if ... else (if ... else (if ... else (if ... else ...)))
103159,... and ... and ... and ... and ...
103160,and
103161,or
103162,False
103163,True
103164,s
103165,s or 'foo'
103166,return bool(len(args) and max(args)-min(args))
103167,2 and 3 # Returns 3 because 2 is Truthy so it has to check 3 too
103168,0 and 3 # Returns 0 because 0 is Falsey and there's no need to check 3 at all
103169,or
103170,True
103171,False
103172,True
103173,False
103174,>>> 2 and 5
103175,5
103176,>>> 2 and 5 and 10
103177,10
103178,>>> '' and 5
103179,''
103180,>>> 2 and 0 and 5
103181,0
103182,return len(args) and max(args)-min(args)
103183,max(args)-min(args)
103184,len(args)
103185,0
103186,def fn(alist=None):
103187,    alist = alist or []
103188,    ....
103189,alist
103190,if
103191,"fn() == fn(3) == fn(4, 4)"
103192,fn
103193,0
103194,>>> fn()
103195,0
103196,>>> fn(3)
103197,0
103198,">>> fn(3, 3, 3)"
103199,0
103200,fn
103201,fn
103202,args
103203,delta(*numbers)
103204,calculate_range(*numbers)
103205,and
103206,>>> fn('1')
103207,Traceback (most recent call last):
103208,"  File ""<stdin>"", line 1, in <module>"
103209,"  File ""<stdin>"", line 2, in fn"
103210,TypeError: unsupported operand type(s) for -: 'str' and 'str'
103211,">>> fn(1, '2')"
103212,Traceback (most recent call last):
103213,"  File ""<stdin>"", line 1, in <module>"
103214,"  File ""<stdin>"", line 2, in fn"
103215,TypeError: '>' not supported between instances of 'str' and 'int'
103216,">>> fn('a', 'b')"
103217,Traceback (most recent call last):
103218,"  File ""<stdin>"", line 1, in <module>"
103219,"  File ""<stdin>"", line 2, in fn"
103220,TypeError: unsupported operand type(s) for -: 'str' and 'str'
103221,def delta(*numbers):
103222,    try:
103223,        return max(numbers) - min(numbers)
103224,    except TypeError:
103225,"        raise ValueError(""delta should only be called with numerical arguments"") from None"
103226,    except ValueError:
103227,"        raise ValueError(""delta should be called with at least one numerical argument"") from None"
103228,>>> delta()
103229,Traceback (most recent call last):
103230,"  File ""<stdin>"", line 1, in <module>"
103231,"  File ""<stdin>"", line 7, in delta"
103232,ValueError: delta should be called with at least one numerical argument
103233,>>> delta(3)
103234,0
103235,>>> delta('a')
103236,Traceback (most recent call last):
103237,"  File ""<stdin>"", line 1, in <module>"
103238,"  File ""<stdin>"", line 5, in delta"
103239,ValueError: delta should only be called with numerical arguments
103240,">>> delta('a', 'b')"
103241,Traceback (most recent call last):
103242,"  File ""<stdin>"", line 1, in <module>"
103243,"  File ""<stdin>"", line 5, in delta"
103244,ValueError: delta should only be called with numerical arguments
103245,">>> delta('a', 3)"
103246,Traceback (most recent call last):
103247,"  File ""<stdin>"", line 1, in <module>"
103248,"  File ""<stdin>"", line 5, in delta"
103249,ValueError: delta should only be called with numerical arguments
103250,">>> delta(3, 4.5)"
103251,1.5
103252,">>> delta(3, 5, 7, 2)"
103253,5
103254,delta
103255,-1
103256,None
103257,>>> def delta(*numbers):
103258,...     try:
103259,...         return max(numbers) - min(numbers)
103260,...     except TypeError:
103261,"...         raise ValueError(""delta should only be called with numerical arguments"") from None"
103262,...     except ValueError:
103263,...         return -1 # or None
103264,... 
103265,>>> 
103266,>>> delta()
103267,-1
103268,>>>example_list = []
103269,>>>print example_list or 'empty list'
103270,empty list
103271,Or
103272,or
103273,And
103274,and
103275,True
103276,0 and 10 
103277,False and True
103278,False
103279,A and B
103280,B
103281,A
103282,True
103283,A
103284,None
103285,list
103286,dict
103287,A
103288,A
103289,False
103290,None
103291,A or B
103292,A
103293,A
103294,True
103295,A
103296,None
103297,list
103298,dict
103299,B
103300,non-null
103301,if [102]: 
103302,"    print ""True"""
103303,else: 
103304,"    print ""False"""
103305,
103306,"if ""anything that is not empty or None"": "
103307,"    print ""True"""
103308,else: 
103309,"    print ""False"""
103310,
103311,"if {1, 2, 3}: "
103312,"    print ""True"""
103313,else: 
103314,"    print ""False"""
103315,if []: 
103316,"    print ""True"""
103317,else: 
103318,"    print ""False"""
103319,
103320,"if """": "
103321,"    print ""True"""
103322,else: 
103323,"    print ""False"""
103324,
103325,if set ([]): 
103326,"    print ""True"""
103327,else: 
103328,"    print ""False"""
103329,A
103330,True
103331,if first_val is False return first_val else second_value
103332,1 and 2 # here it will return 2 because 1 is not False
103333,0 and 2 # will return 0 because first value is 0 i.e False
103334,if first_val is False return second_val else first_value
103335,1 or 2 # here it will return 1 because 1 is not False
103336,0 or 2 # will return 2 because first value is 0 i.e False
103337,def check_image_on_screen(image):
103338,    try:
103339,        pyautogui.locateCenterOnScreen(image)
103340,        return True
103341,    except:
103342,        return False
103343,except
103344,except
103345,KeyboardInterrupt
103346,SystemExit
103347,except Exception
103348,except
103349,pyautogui.ImageNotFoundException
103350,try/finally
103351,try/except
103352,[][0]
103353,"{""ok"":None}['nope']"
103354,except Exception as ex:
103355,pip install pygame
103356,dev
103357,pip install pygame==2.0.0.dev6
103358,pip install pygame==
103359,1.9.6-python3.8
103360,pygame==1.9.6
103361,if 'key1' in dict.keys():
103362,"  print ""blah"""
103363,else:
103364,"  print ""boo"""
103365,dict.keys()
103366,if 'key1' in dict:
103367,x in dict.keys()
103368,for (Type k : dict.keySet())
103369,for k in dict.keys()
103370,for k in dict
103371,if k in dict.keys()
103372,if k in dict_:
103373,dict_.keys()
103374,in
103375,dict
103376,"d = {""key1"": 10, ""key2"": 23}"
103377,
103378,"if ""key1"" in d:"
103379,"    print(""this will execute"")"
103380,
103381,"if ""nonexistent key"" in d:"
103382,"    print(""this will not"")"
103383,dict.get()
103384,d = {}
103385,
103386,for i in range(10):
103387,"    d[i] = d.get(i, 0) + 1"
103388,dict.setdefault()
103389,d = {}
103390,
103391,for i in range(10):
103392,"    d[i] = d.setdefault(i, 0) + 1"
103393,defaultdict
103394,collections
103395,from collections import defaultdict
103396,
103397,d = defaultdict(int)
103398,
103399,for i in range(10):
103400,    d[i] += 1
103401,get
103402,in
103403,in
103404,0
103405,key in my_dict
103406,key in my_dict.keys()
103407,if 'key1' in my_dict:
103408,"    print(""blah"")"
103409,else:
103410,"    print(""boo"")"
103411,"d = {'a': 1, 'b': 2}"
103412,'a' in d # <== evaluates to True
103413,'c' in d # <== evaluates to False
103414,collections.defaultdict()
103415,has_key()
103416,key_name in dict_name
103417,if 'key1' in my_dict:
103418,    ...
103419,'key' in mydict
103420,mydict.get('key')
103421,mydefaultdict['key']
103422,in
103423,defaultdict
103424,get
103425,get
103426,setdefault
103427,>>> d = {'foo':'bar'}
103428,">>> q = d.setdefault('foo','baz') #Do not override the existing key"
103429,>>> print q #The value takes what was originally in the dictionary
103430,bar
103431,>>> print d
103432,{'foo': 'bar'}
103433,">>> r = d.setdefault('baz',18) #baz was never in the dictionary"
103434,>>> print r #Now r has the value supplied above
103435,18
103436,>>> print d #The dictionary's been updated
103437,"{'foo': 'bar', 'baz': 18}"
103438,setdefault
103439,"get('key', default)"
103440,values = {...}
103441,"myValue = values.get('Key', None)"
103442,get
103443,None
103444,"values.get('Key', None)"
103445,values.get('Key')
103446,"message = ""blah"" if 'key1' in my_dict else ""booh"""
103447,print(message)
103448,try:
103449,"   blah = dict[""mykey""]"
103450,   # key exists in dict
103451,except KeyError:
103452,   # key doesn't exist in dict
103453,"d={'clear':0, 'copy':1, 'fromkeys':2, 'get':3, 'items':4, 'keys':5, 'pop':6, 'popitem':7, 'setdefault':8, 'update':9, 'values':10}"
103454,Python Dictionary clear()        Removes all Items
103455,Python Dictionary copy()         Returns Shallow Copy of a Dictionary
103456,Python Dictionary fromkeys()     Creates dictionary from given sequence
103457,Python Dictionary get()          Returns Value of The Key
103458,"Python Dictionary items()        Returns view of dictionary (key, value) pair"
103459,Python Dictionary keys()         Returns View Object of All Keys
103460,Python Dictionary pop()          Removes and returns element having given key
103461,Python Dictionary popitem()      Returns & Removes Element From Dictionary
103462,Python Dictionary setdefault()   Inserts Key With a Value if Key is not Present
103463,Python Dictionary update()       Updates the Dictionary
103464,Python Dictionary values()       Returns view of all values in dictionary
103465,get()
103466,"d.get(""key"")"
103467,items()
103468,keys()
103469,get()
103470,d
103471,"d= {'clear':0, 'copy':1, 'fromkeys':2, 'get':3, 'items':4, 'keys':5, 'pop':6, 'popitem':7, 'setdefault':8, 'update':9, 'values':10}"
103472,None
103473,print(d.get('key')) #None
103474,print(d.get('clear')) #0
103475,print(d.get('copy')) #1
103476,key:None
103477,d= {'key':None}
103478,print(d.get('key')) #None
103479,print(d.get('key2')) #None
103480,get()
103481,None
103482,in
103483,print('key' in d) #True
103484,print('key2' in d) #False
103485,import dis
103486,"dis.dis(""'key' in d"")"
103487,#   1           0 LOAD_CONST               0 ('key')
103488,#               2 LOAD_NAME                0 (d)
103489,#               4 COMPARE_OP               6 (in)
103490,#               6 RETURN_VALUE
103491,
103492,"dis.dis(""d.get('key2')"")"
103493,#   1           0 LOAD_NAME                0 (d)
103494,#               2 LOAD_METHOD              1 (get)
103495,#               4 LOAD_CONST               0 ('key2')
103496,#               6 CALL_METHOD              1
103497,#               8 RETURN_VALUE
103498,in
103499,get()
103500,.get()
103501,default
103502,key:None
103503,"d.get(""key"", False)"
103504,.get()
103505,try
103506,except
103507,try:
103508,    my_dict_of_items[key_i_want_to_check]
103509,except KeyError:
103510,"    # Do the operation you wanted to do for ""key not present in dict""."
103511,else:
103512,"    # Do the operation you wanted to do with ""key present in dict."""
103513,has_key()
103514,if dict.has_key('xyz')==1:
103515,    # Update the value for the key
103516,else:
103517,    pass
103518,.has_key()
103519,in
103520,d = defaultdict(int)
103521,int()
103522,0
103523,defaultdict
103524,defaultdict(lambda: 0)
103525,defaultdict(int)
103526,0
103527,int()
103528,__contains__
103529,>>> temp = {}
103530,
103531,>>> help(temp.__contains__)
103532,
103533,Help on built-in function __contains__:
103534,
103535,"__contains__(key, /) method of builtins.dict instance"
103536,"    True if D has a key k, else False."
103537,__contains__
103538,in
103539,containment check
103540,__contains__
103541,foo = x['foo'] if x.__contains__('foo') else 'bar'
103542,in
103543,foo = x['foo'] if 'foo' in x else 'bar'
103544,"d = {'a': 1, 'b':2}"
103545,keys = 'abcd'
103546,
103547,for k in keys:
103548,    x = (k in d and 'blah') or 'boo'
103549,    print(x)
103550,>>> blah
103551,>>> blah
103552,>>> boo
103553,>>> boo
103554,0
103555,None
103556,False
103557,True
103558,>>> 'Some string' or 1/0
103559,'Some string'
103560,>>>
103561,'Some string'
103562,True
103563,or
103564,1/0
103565,>>> 1/0 or 'Some string'
103566,Traceback (most recent call last):
103567,"  File ""<stdin>"", line 1, in <module>"
103568,ZeroDivisionError: division by zero
103569,>>>
103570,(k in d and 'blah')
103571,if k in d:
103572,    'blah'
103573,else:
103574,    False
103575,or
103576,'boo'
103577,>>> False or 'boo'
103578,'boo'
103579,>>> 'blah' or 'boo'
103580,'blah'
103581,>>>
103582,for
103583,if
103584,"dic = {'first' : 12, 'second' : 123}"
103585,for each in dic:
103586,    if each == 'second':
103587,        print('the key exists and the corresponding value can be updated in the dictionary')
103588,it is exist
103589,not exist
103590,stdin
103591,stdin
103592,fileinput
103593,import fileinput
103594,
103595,for line in fileinput.input():
103596,    pass
103597,fileinput
103598,line
103599,line.rstrip()
103600,input()
103601,fileinput.input()
103602,input()
103603,fileinput.input()
103604,list(fileinput.input())
103605,sys.stdin
103606,read
103607,readlines
103608,import sys
103609,raw_input
103610,input
103611,import sys
103612,
103613,for line in sys.stdin:
103614,    print(line)
103615,line.rstrip()
103616,\r\n
103617,"print(line, end='')"
103618,input()
103619,raw_input()
103620,"name = raw_input(""Enter your name: "")   # Python 2.x"
103621,"name = input(""Enter your name: "")   # Python 3"
103622,import sys
103623,data = sys.stdin.readlines()
103624,"print ""Counted"", len(data), ""lines."""
103625,% cat countlines.py | python countlines.py 
103626,Counted 3 lines.
103627,C:\> type countlines.py | python countlines.py 
103628,Counted 3 lines.
103629,"print(sum(chunk.count('\n') for chunk in iter(partial(sys.stdin.read, 1 << 15), '')))"
103630,wc-l.py
103631,cat
103632,python countlines.py < countlines.py
103633,readlines()
103634,cat filespec | filters
103635,< filespec filters
103636,sys.stdin
103637,sys.stdin.read()
103638,input(prompt)
103639,rawinput(prompt)
103640,open(0).read()
103641,open
103642,stdin
103643,sys.stdin
103644,io.open
103645,open('/dev/stdin').read()
103646,open(0)
103647,fileinput.input()
103648,sys.argv[1:]
103649,''.join(fileinput.input())
103650,sys
103651,fileinput
103652,sys.stdin
103653,read
103654,sys.stdin
103655,"$ echo foo | python -c ""import sys; print(sys.stdin.read())"""
103656,foo
103657,sys.stdin
103658,>>> import sys
103659,>>> sys.stdin
103660,<_io.TextIOWrapper name='<stdin>' mode='r' encoding='UTF-8'>
103661,inputs.txt
103662,"python -c ""import sys; sys.stdout.write(sys.stdin.read())"" < inputs.txt"
103663,input
103664,raw_input
103665,sys.stdin
103666,"$ python -c ""print('foo\nbar\nbaz')"" > inputs.txt"
103667,"$ python -c ""import sys; sys.stdout.write(sys.stdin.read())"" < inputs.txt "
103668,foo
103669,bar
103670,baz
103671,sys.stdin.read
103672,"read(size=-1, /) method of _io.TextIOWrapper instance"
103673,    Read at most n characters from stream.
103674,    
103675,    Read from underlying buffer until we have n characters or we hit EOF.
103676,"    If n is negative or omitted, read until EOF."
103677,input
103678,raw_input
103679,input
103680,print
103681,EOFError
103682,input
103683,raw_input
103684,"$ python -c ""print('try:\n    while True:\n        print(input())\nexcept EOFError:\n    pass')"" > stdindemo.py "
103685,"$ python -c ""import sys; sys.stdout.write(sys.stdin.read())"" < stdindemo.py "
103686,try:
103687,    while True:
103688,        print(input())
103689,except EOFError:
103690,    pass
103691,input
103692,print
103693,input
103694,$ cat inputs.txt | python -m stdindemo
103695,foo
103696,bar
103697,baz
103698,$ python -m stdindemo < inputs.txt 
103699,foo
103700,bar
103701,baz
103702,$ python stdindemo.py < inputs.txt 
103703,foo
103704,bar
103705,baz
103706,input
103707,"input(prompt=None, /)"
103708,    Read a string from standard input.  The trailing newline is stripped.
103709,    
103710,"    The prompt string, if given, is printed to standard output without a"
103711,    trailing newline before reading input.
103712,    
103713,"    If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError."
103714,"    On *nix systems, readline is used if available."
103715,sys.stdin
103716,sys.stdin
103717,sys.stdout.write
103718,"$ python -c ""print('import sys\nfor line in sys.stdin:\n    sys.stdout.write(line)')"" > stdindemo2.py"
103719,"$ python -c ""import sys; sys.stdout.write(sys.stdin.read())"" < stdindemo2.py "
103720,import sys
103721,for line in sys.stdin:
103722,    sys.stdout.write(line)
103723,$ python -m stdindemo2 < inputs.txt
103724,foo
103725,bar
103726,baz
103727,"$ python -c ""import sys; sys.stdout.write(sys.stdin.read())"" < inputs.txt"
103728,foo
103729,bar
103730,baz
103731,stdin
103732,stdout
103733,open
103734,"$ python -c ""open(1,'w').write(open(0).read())"" < inputs.txt"
103735,baz
103736,bar
103737,foo
103738,io.open
103739,"$ python -c ""from io import open; open(1,'w').write(open(0).read())"" < inputs.txt "
103740,foo
103741,bar
103742,baz
103743,''.join(sys.stdin)
103744,str.join
103745,''.join(sys.stdin)
103746,sys.stdin.read()
103747,import fileinput
103748,
103749,for line in fileinput.input():
103750,    pass
103751,sys.stdin
103752,import sys
103753,
103754,for line in sys.stdin:
103755,    pass
103756,print(line)
103757,'\n'
103758,"print(line, end='')"
103759,from __future__ import print_function
103760,fileinput
103761,for line in sys.stdin:
103762,  print line
103763,tail -f error_log | myscript.py
103764,while 1:
103765,    try:
103766,        line = sys.stdin.readline()
103767,    except KeyboardInterrupt:
103768,        break
103769,
103770,    if not line:
103771,        break
103772,
103773,    print line
103774,for line in sys.stdin:
103775,print line
103776,print(line)
103777,for line in sys.stdin:
103778,"for line in iter(sys.stdin.readline, ''):"
103779,io.open()
103780,import sys
103781,line = sys.stdin.readline()
103782,while line:
103783,"    print line,"
103784,    line = sys.stdin.readline()
103785,sys.stdin
103786,import sys
103787,f = open(sys.argv[1]) if len(sys.argv) > 1 else sys.stdin    
103788,for line in f:
103789,#     Do your stuff
103790,$ python do-my-stuff.py infile.txt
103791,$ cat infile.txt | python do-my-stuff.py
103792,$ python do-my-stuff.py < infile.txt
103793,cat
103794,grep
103795,sed
103796,argparse
103797,#!/usr/bin/python
103798,
103799,import argparse
103800,import sys
103801,
103802,parser = argparse.ArgumentParser()
103803,
103804,"parser.add_argument('infile',"
103805,"                    default=sys.stdin,"
103806,"                    type=argparse.FileType('r'),"
103807,                    nargs='?')
103808,
103809,args = parser.parse_args()
103810,
103811,data = args.infile.read()
103812,stdin
103813,echo 'foo bar' | ./above-script.py
103814,echo
103815,./above-script.py <<< 'foo bar'
103816,echo 'foo bar' > my-file.data
103817,./above-script.py my-file.data
103818,stdin
103819,-
103820,echo 'foo bar' | ./above-script.py -
103821,add_argument('--in'
103822,--in -
103823,in
103824,in
103825,args.in.read()
103826,in
103827,infile
103828,EOF
103829,import sys
103830,input_str = sys.stdin.read()
103831,print input_str.split()
103832,"python -c ""import sys; set(map(sys.stdout.write,sys.stdin))"""
103833,set()
103834,readlines
103835,join
103836,print(sys.stdin.read())
103837,write
103838,None
103839,=len(set([None]))
103840,import sys
103841,
103842,print sys.stdin.read().upper()
103843,"$ echo ""Hello World"" | python myFile.py"
103844,"data = """""
103845,for line in sys.stdin:
103846,    data += line
103847,data = sys.stdin.read()
103848,sys.stdin
103849,sys.stdin
103850,\r\n
103851,\n
103852,sys.stdin.buffer
103853,import sys
103854,
103855,"PY3K = sys.version_info >= (3, 0)"
103856,
103857,if PY3K:
103858,    source = sys.stdin.buffer
103859,else:
103860,"    # Python 2 on Windows opens sys.stdin in text mode, and"
103861,    # binary data that read from it becomes corrupted on \r\n
103862,"    if sys.platform == ""win32"":"
103863,        # set sys.stdin to binary mode
103864,"        import os, msvcrt"
103865,"        msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)"
103866,    source = sys.stdin
103867,
103868,b = source.read()
103869,def get_from_stdin():
103870,
103871,  lb = 0
103872,  stdin = ''
103873,
103874,  for line in sys.stdin:
103875,"    if line == ""\n"":"
103876,        lb += 1
103877,        if lb == 2:
103878,            break
103879,    else:
103880,        lb = 0
103881,        stdin += line
103882,
103883,  return stdin
103884,# Filename e.g. cat.py
103885,import sys
103886,
103887,for line in sys.stdin:
103888,"    print(line, end="""")"
103889,chmod +x cat.py
103890,echo Hello | ./cat.py
103891,import sys
103892,
103893,for line in sys.stdin:
103894,    print(line)
103895,import sys
103896,import select
103897,
103898,"# select(files to read from, files to write to, magic, timeout)"
103899,# timeout=0.0 is essential b/c we want to know the asnwer right away
103900,"if select.select([sys.stdin], [], [], 0.0)[0]:"
103901,    help_file_fragment = sys.stdin.read()
103902,else:
103903,"    print(""No data passed to stdin"", file=sys.stderr)"
103904,    sys.exit(2)
103905,select
103906,cat
103907,while (line := input()):
103908,    print(line)
103909,EOFError
103910,input()
103911,EOFError: EOF when reading a line
103912,try ... except EOFError: pass
103913,-c
103914,stdin
103915,$
103916,"python3 -c ""import sys; print(len(sys.argv[1].split('\n')))"" ""$(cat ~/.goldendict/history)"""
103917,python -c
103918,"import sys, os"
103919,sep=os.linesep
103920,
103921,while sep == os.linesep:
103922,    data = sys.stdin.readline()               
103923,    sep = data[-len(os.linesep):]
103924,"    print '> ""%s""' % data.strip()"
103925,while :; do nc -l 12345 | python test.py ; done
103926,for line in sys.stdin:
103927,"with open(sys.argv[1], 'r') as f:"
103928,    for line in f:
103929,"python myscript.py ""0 1 2 3 4..."" # can be a multi-line string or filename - any std.in input will work"
103930,sys.stdin
103931,sys.stdin
103932,sys.stdin
103933,"os.read(0, x)"
103934,multiprocessing
103935,pool.map
103936,import multiprocessing
103937,
103938,"text = ""test"""
103939,
103940,"def harvester(text, case):"
103941,    X = case[0]
103942,    text + str(X)
103943,
103944,if __name__ == '__main__':
103945,    pool = multiprocessing.Pool(processes=6)
103946,    case = RAW_DATASET
103947,"    pool.map(harvester(text, case), case, 1)"
103948,    pool.close()
103949,    pool.join()
103950,partial
103951,lambda
103952,pickle
103953,"pool.map(harvester(text,case),case, 1)"
103954,"pool.apply_async(harvester(text,case),case, 1)"
103955,return
103956,harvester()
103957,pool.starmap()
103958,#!/usr/bin/env python3
103959,from functools import partial
103960,from itertools import repeat
103961,"from multiprocessing import Pool, freeze_support"
103962,
103963,"def func(a, b):"
103964,    return a + b
103965,
103966,def main():
103967,"    a_args = [1,2,3]"
103968,    second_arg = 1
103969,    with Pool() as pool:
103970,"        L = pool.starmap(func, [(1, 1), (2, 1), (3, 1)])"
103971,"        M = pool.starmap(func, zip(a_args, repeat(second_arg)))"
103972,"        N = pool.map(partial(func, b=second_arg), a_args)"
103973,        assert L == M == N
103974,
103975,"if __name__==""__main__"":"
103976,    freeze_support()
103977,    main()
103978,#!/usr/bin/env python2
103979,import itertools
103980,"from multiprocessing import Pool, freeze_support"
103981,
103982,"def func(a, b):"
103983,"    print a, b"
103984,
103985,def func_star(a_b):
103986,"    """"""Convert `f([1,2])` to `f(1,2)` call."""""""
103987,    return func(*a_b)
103988,
103989,def main():
103990,    pool = Pool()
103991,"    a_args = [1,2,3]"
103992,    second_arg = 1
103993,"    pool.map(func_star, itertools.izip(a_args, itertools.repeat(second_arg)))"
103994,
103995,"if __name__==""__main__"":"
103996,    freeze_support()
103997,    main()
103998,1 1
103999,2 1
104000,3 1
104001,itertools.izip()
104002,itertools.repeat()
104003,functools.partial()
104004,func_star()
104005,uptimebox
104006,func_star
104007,"def func_star((a, b))"
104008,"f((a,b))"
104009,func = lambda x: func(*x)
104010,func_star()
104011,starstarmap
104012,Pool.starmap
104013,import multiprocessing
104014,from itertools import product
104015,
104016,"def merge_names(a, b):"
104017,"    return '{} & {}'.format(a, b)"
104018,
104019,if __name__ == '__main__':
104020,"    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']"
104021,    with multiprocessing.Pool(processes=3) as pool:
104022,"        results = pool.starmap(merge_names, product(names, repeat=2))"
104023,    print(results)
104024,
104025,"# Output: ['Brown & Brown', 'Brown & Wilson', 'Brown & Bartlett', ..."
104026,with
104027,Pool
104028,import multiprocessing
104029,from itertools import product
104030,from contextlib import contextmanager
104031,
104032,"def merge_names(a, b):"
104033,"    return '{} & {}'.format(a, b)"
104034,
104035,def merge_names_unpack(args):
104036,    return merge_names(*args)
104037,
104038,@contextmanager
104039,"def poolcontext(*args, **kwargs):"
104040,"    pool = multiprocessing.Pool(*args, **kwargs)"
104041,    yield pool
104042,    pool.terminate()
104043,
104044,if __name__ == '__main__':
104045,"    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']"
104046,    with poolcontext(processes=3) as pool:
104047,"        results = pool.map(merge_names_unpack, product(names, repeat=2))"
104048,    print(results)
104049,
104050,"# Output: ['Brown & Brown', 'Brown & Wilson', 'Brown & Bartlett', ..."
104051,partial
104052,import multiprocessing
104053,from functools import partial
104054,from contextlib import contextmanager
104055,
104056,@contextmanager
104057,"def poolcontext(*args, **kwargs):"
104058,"    pool = multiprocessing.Pool(*args, **kwargs)"
104059,    yield pool
104060,    pool.terminate()
104061,
104062,"def merge_names(a, b):"
104063,"    return '{} & {}'.format(a, b)"
104064,
104065,if __name__ == '__main__':
104066,"    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']"
104067,    with poolcontext(processes=3) as pool:
104068,"        results = pool.map(partial(merge_names, b='Sons'), names)"
104069,    print(results)
104070,
104071,"# Output: ['Brown & Sons', 'Wilson & Sons', 'Bartlett & Sons', ..."
104072,=RAW_DATASET
104073,case
104074,pool.map
104075,text
104076,RAW_DATASET
104077,with .. as ..
104078,AttributeError: __exit__
104079,pool = Pool();
104080,pool.close()
104081,Pool
104082,Pool
104083,def multi_run_wrapper(args):
104084,   return add(*args)
104085,
104086,"def add(x,y):"
104087,    return x+y
104088,
104089,"if __name__ == ""__main__"":"
104090,    from multiprocessing import Pool
104091,    pool = Pool(4)
104092,"    results = pool.map(multi_run_wrapper,[(1,2),(2,3),(3,4)])"
104093,    print results
104094,"[3, 5, 7]"
104095,args
104096,add
104097,"def add(args): (x,y) = args"
104098,lambda
104099,multi_run_wrapper(..)
104100,lambda
104101,pool.map(..)
104102,add
104103,pool.close()
104104,pool.join()
104105,pool.starmap():
104106,from multiprocessing.dummy import Pool as ThreadPool 
104107,
104108,"def write(i, x):"
104109,"    print(i, ""---"", x)"
104110,
104111,"a = [""1"",""2"",""3""]"
104112,"b = [""4"",""5"",""6""] "
104113,
104114,pool = ThreadPool(2)
104115,"pool.starmap(write, zip(a,b)) "
104116,pool.close() 
104117,pool.join()
104118,1 --- 4
104119,2 --- 5
104120,3 --- 6
104121,"zip(a,b,c,d,e)"
104122,import itertools
104123,
104124,"zip(itertools.repeat(constant), a)"
104125,"results = pool.starmap(write, zip(a,b))"
104126,def f1(args):
104127,"    a, b, c = args[0] , args[1] , args[2]"
104128,    return a+b+c
104129,
104130,"if __name__ == ""__main__"":"
104131,    import multiprocessing
104132,    pool = multiprocessing.Pool(4) 
104133,
104134,"    result1 = pool.map(f1, [ [1,2,3] ])"
104135,    print(result1)
104136,parmap
104137,map
104138,starmap
104139,pip install parmap
104140,import parmap
104141,# If you want to do:
104142,"y = [myfunction(x, argument1, argument2) for x in mylist]"
104143,# In parallel:
104144,"y = parmap.map(myfunction, mylist, argument1, argument2)"
104145,
104146,# If you want to do:
104147,"z = [myfunction(x, y, argument1, argument2) for (x,y) in mylist]"
104148,# In parallel:
104149,"z = parmap.starmap(myfunction, mylist, argument1, argument2)"
104150,
104151,# If you want to do:
104152,"listx = [1, 2, 3, 4, 5, 6]"
104153,"listy = [2, 3, 4, 5, 6, 7]"
104154,param = 3.14
104155,param2 = 42
104156,listz = []
104157,"for (x, y) in zip(listx, listy):"
104158,"        listz.append(myfunction(x, y, param1, param2))"
104159,# In parallel:
104160,"listz = parmap.starmap(myfunction, zip(listx, listy), param1, param2)"
104161,import parmap
104162,
104163,"def harvester(case, text):"
104164,    X = case[0]
104165,    text+ str(X)
104166,
104167,"if __name__ == ""__main__"":"
104168,    case = RAW_DATASET  # assuming this is an iterable
104169,"    parmap.map(harvester, case, ""test"", chunksize=1)"
104170,multiprocessing
104171,starmap
104172,pathos
104173,__main__
104174,"  Python 2.7.5 (default, Sep 30 2013, 20:15:49)"
104175,  [GCC 4.2.1 (Apple Inc. build 5566)] on darwin
104176,"  Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
104177,"  >>> def func(a,b):"
104178,"  ...     print a,b"
104179,  ...
104180,  >>>
104181,  >>> from pathos.multiprocessing import ProcessingPool
104182,  >>> pool = ProcessingPool(nodes=4)
104183,"  >>> pool.map(func, [1,2,3], [1,1,1])"
104184,  1 1
104185,  2 1
104186,  3 1
104187,"  [None, None, None]"
104188,  >>>
104189,  >>> # also can pickle stuff like lambdas
104190,"  >>> result = pool.map(lambda x: x**2, range(10))"
104191,  >>> result
104192,"  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
104193,  >>>
104194,  >>> # also does asynchronous map
104195,"  >>> result = pool.amap(pow, [1,2,3], [4,5,6])"
104196,  >>> result.get()
104197,"  [1, 32, 729]"
104198,  >>>
104199,  >>> # or can return a map iterator
104200,"  >>> result = pool.imap(pow, [1,2,3], [4,5,6])"
104201,  >>> result
104202,  <processing.pool.IMapIterator object at 0x110c2ffd0>
104203,  >>> list(result)
104204,"  [1, 32, 729]"
104205,pathos
104206,starmap
104207,>>> def add(*x):
104208,...   return sum(x)
104209,...
104210,">>> x = [[1,2,3],[4,5,6]]"
104211,>>> import pathos
104212,>>> import numpy as np
104213,>>> # use ProcessPool's map and transposing the inputs
104214,>>> pp = pathos.pools.ProcessPool()
104215,">>> pp.map(add, *np.array(x).T)"
104216,"[6, 15]"
104217,>>> # use ProcessPool's map and a lambda to apply the star
104218,">>> pp.map(lambda x: add(*x), x)"
104219,"[6, 15]"
104220,">>> # use a _ProcessPool, which has starmap"
104221,>>> _pp = pathos.pools._ProcessPool()
104222,">>> _pp.starmap(add, x)"
104223,"[6, 15]"
104224,>>>
104225,from multiprocessing import Pool
104226,"def func((i, (a, b))):"
104227,"    print i, a, b"
104228,    return a + b
104229,pool = Pool(3)
104230,"pool.map(func, [(0,(1,2)), (1,(2,3)), (2,(3, 4))])"
104231,2 3 4
104232,
104233,1 2 3
104234,
104235,0 1 2
104236,
104237,out[]:
104238,
104239,"[3, 5, 7]"
104240,import os
104241,from multiprocessing import Pool
104242,
104243,def task(args):
104244,"    print ""PID ="", os.getpid(), "", arg1 ="", args[0], "", arg2 ="", args[1]"
104245,
104246,pool = Pool()
104247,
104248,"pool.map(task, ["
104249,"        [1,2],"
104250,"        [3,4],"
104251,"        [5,6],"
104252,"        [7,8]"
104253,    ])
104254,functools
104255,def unpack_args(func):
104256,    from functools import wraps
104257,    @wraps(func)
104258,    def wrapper(args):
104259,"        if isinstance(args, dict):"
104260,            return func(**args)
104261,        else:
104262,            return func(*args)
104263,    return wrapper
104264,
104265,@unpack_args
104266,"def func(x, y):"
104267,    return x + y
104268,"np, xlist, ylist = 2, range(10), range(10)"
104269,pool = Pool(np)
104270,"res = pool.map(func, zip(xlist, ylist))"
104271,pool.close()
104272,pool.join()
104273,Pool.starmap
104274,itertools.product
104275,zip
104276,starmap
104277,import itertools
104278,from multiprocessing import Pool
104279,
104280,def universal_worker(input_pair):
104281,"    function, args = input_pair"
104282,    return function(*args)
104283,
104284,"def pool_args(function, *args):"
104285,"    return zip(itertools.repeat(function), zip(*args))"
104286,function
104287,arg_0
104288,arg_1
104289,arg_2
104290,pool = Pool(n_core)
104291,"list_model = pool.map(universal_worker, pool_args(function, arg_0, arg_1, arg_2)"
104292,pool.close()
104293,pool.join()
104294,from multiprocessing import Pool
104295,
104296,"def f((a,b,c,d)):"
104297,"    print a,b,c,d"
104298,    return a + b + c +d
104299,
104300,if __name__ == '__main__':
104301,    p = Pool(10)
104302,"    data = [(i+0,i+1,i+2,i+3) for i in xrange(10)]"
104303,"    print(p.map(f, data))"
104304,    p.close()
104305,    p.join()
104306,0 1 2 3
104307,1 2 3 4
104308,2 3 4 5
104309,3 4 5 6
104310,4 5 6 7
104311,5 6 7 8
104312,7 8 9 10
104313,6 7 8 9
104314,8 9 10 11
104315,9 10 11 12
104316,"[6, 10, 14, 18, 22, 26, 30, 34, 38, 42]"
104317,import multiprocessing
104318,
104319,def main():
104320,
104321,    with multiprocessing.Pool(10) as pool:
104322,"        params = [ (2, 2), (3, 3), (4, 4) ]"
104323,"        pool.starmap(printSum, params)"
104324,    # end with
104325,
104326,# end function
104327,
104328,"def printSum(num1, num2):"
104329,    mySum = num1 + num2
104330,"    print('num1 = ' + str(num1) + ', num2 = ' + str(num2) + ', sum = ' + str(mySum))"
104331,# end function
104332,
104333,if __name__ == '__main__':
104334,    main()
104335,"num1 = 2, num2 = 2, sum = 4"
104336,"num1 = 3, num2 = 3, sum = 6"
104337,"num1 = 4, num2 = 4, sum = 8"
104338,starmap
104339,import multiprocessing as mp
104340,
104341,"def foo(q, h, w):"
104342,    q.put(h + ' ' + w)
104343,    print(h + ' ' + w)
104344,
104345,if __name__ == '__main__':
104346,    ctx = mp.get_context('spawn')
104347,    q = ctx.Queue()
104348,"    p = ctx.Process(target=foo, args=(q,'hello', 'world'))"
104349,    p.start()
104350,    print(q.get())
104351,    p.join()
104352,"pool.map(harvester(text, case), case, 1)"
104353,"pool.apply_async(harvester(text, case), case, 1)"
104354,"from multiprocessing import Process, Pool, Manager"
104355,
104356,"text = ""test"""
104357,"def harvester(text, case, q = None):"
104358, X = case[0]
104359, res = text+ str(X)
104360, if q:
104361,  q.put(res)
104362, return res
104363,
104364,
104365,"def block_until(q, results_queue, until_counter=0):"
104366, i = 0
104367, while i < until_counter:
104368,  results_queue.put(q.get())
104369,  i+=1
104370,
104371,if __name__ == '__main__':
104372, pool = multiprocessing.Pool(processes=6)
104373, case = RAW_DATASET
104374, m = Manager()
104375, q = m.Queue()
104376, results_queue = m.Queue() # when it completes results will reside in this queue
104377," blocking_process = Process(block_until, (q, results_queue, len(case)))"
104378, blocking_process.start()
104379, for c in case:
104380,  try:
104381,"   res = pool.apply_async(harvester, (text, case, q = None))"
104382,   res.get(timeout=0.1)
104383,  except:
104384,   pass
104385, blocking_process.join()
104386,c
104387,case
104388,"res = pool.apply_async(harvester, (text, case, q = None))"
104389,"# For python 2/3 compatibility, define pool context manager"
104390,# to support the 'with' statement in Python 2
104391,if sys.version_info[0] == 2:
104392,    from contextlib import contextmanager
104393,    @contextmanager
104394,"    def multiprocessing_context(*args, **kwargs):"
104395,"        pool = multiprocessing.Pool(*args, **kwargs)"
104396,        yield pool
104397,        pool.terminate()
104398,else:
104399,    multiprocessing_context = multiprocessing.Pool
104400,def _function_to_run_for_each(x):
104401,       return x.lower()
104402,with multiprocessing_context(processes=3) as pool:
104403,"    results = pool.map(_function_to_run_for_each, ['Bob', 'Sue', 'Tim'])    print(results)"
104404,"text = ""test"""
104405,
104406,def unpack(args):
104407,    return args[0](*args[1:])
104408,
104409,"def harvester(text, case):"
104410,    X = case[0]
104411,    text+ str(X)
104412,
104413,if __name__ == '__main__':
104414,    pool = multiprocessing.Pool(processes=6)
104415,    case = RAW_DATASET
104416,    # args is a list of tuples 
104417,    # with the function to execute as the first item in each tuple
104418,"    args = [(harvester, text, c) for c in case]"
104419,"    # doing it this way, we can pass any function"
104420,    # and we don't need to define a wrapper for each different function
104421,    # if we need to use more than one
104422,"    pool.map(unpack, args)"
104423,    pool.close()
104424,    pool.join()
104425,from multiprocessing import Pool
104426,
104427,# Wrapper of the function to map:
104428,class makefun:
104429,"    def __init__(self, var2):"
104430,        self.var2 = var2
104431,"    def fun(self, i):"
104432,        var2 = self.var2
104433,        return var1[i] + var2
104434,
104435,# Couple of variables for the example:
104436,"var1 = [1, 2, 3, 5, 6, 7, 8]"
104437,"var2 = [9, 10, 11, 12]"
104438,
104439,# Open the pool:
104440,pool = Pool(processes=2)
104441,
104442,# Wrapper loop
104443,for j in range(len(var2)):
104444,    # Obtain the function to map
104445,    pool_fun = makefun(var2[j]).fun
104446,
104447,    # Fork loop
104448,"    for i, value in enumerate(pool.imap(pool_fun, range(len(var1))), 0):"
104449,"        print(var1[i], '+' ,var2[j], '=', value)"
104450,
104451,# Close the pool
104452,pool.close()
104453,wrapper
104454,pool.map
104455,np.eye(3) = [ [1. 0. 0.]
104456,              [0. 1. 0.]
104457,              [0. 0. 1.]]
104458,import numpy as np
104459,from multiprocessing.dummy import Pool as ThreadPool
104460,from multiprocessing import cpu_count
104461,
104462,
104463,def extract_counts(label_array):
104464,    labels = np.unique(label_array)
104465,"    out = extract_counts_helper([label_array], labels)"
104466,    return out
104467,
104468,"def extract_counts_helper(args, labels):"
104469,"    n = max(1, cpu_count() - 1)"
104470,    pool = ThreadPool(n)
104471,    results = {}
104472,"    pool.map(wrapper(args, results), labels)"
104473,    pool.close()
104474,    pool.join()
104475,    return results
104476,
104477,"def wrapper(argsin, results):"
104478,    def inner_fun(label):
104479,        label_array = argsin[0]
104480,"        counts = get_label_counts(label_array, label)"
104481,        results[label] = counts
104482,    return inner_fun
104483,
104484,"def get_label_counts(label_array, label):"
104485,    return sum(label_array.flatten() == label)
104486,
104487,"if __name__ == ""__main__"":"
104488,"    img = np.ones([2,2])"
104489,    out = extract_counts(img)
104490,"    print('input array: \n', img)"
104491,"    print('label counts: ', out)"
104492,"    print(""========"")"
104493,           
104494,    img = np.eye(3)
104495,    out = extract_counts(img)
104496,"    print('input array: \n', img)"
104497,"    print('label counts: ', out)"
104498,"    print(""========"")"
104499,    
104500,"    img = np.random.randint(5, size=(3, 3))"
104501,    out = extract_counts(img)
104502,"    print('input array: \n', img)"
104503,"    print('label counts: ', out)"
104504,"    print(""========"")"
104505,input array: 
104506, [[1. 1.]
104507, [1. 1.]]
104508,label counts:  {1.0: 4}
104509,========
104510,input array: 
104511, [[1. 0. 0.]
104512, [0. 1. 0.]
104513, [0. 0. 1.]]
104514,"label counts:  {0.0: 6, 1.0: 3}"
104515,========
104516,input array: 
104517, [[4 4 0]
104518, [2 4 3]
104519, [2 3 1]]
104520,"label counts:  {0: 1, 1: 1, 2: 2, 3: 2, 4: 3}"
104521,========
104522,import time
104523,from multiprocessing import Pool
104524,
104525,
104526,def f1(args):
104527,"    vfirst, vsecond, vthird = args[0] , args[1] , args[2]"
104528,"    print(f'First Param: {vfirst}, Second value: {vsecond} and finally third value is: {vthird}')"
104529,    pass
104530,
104531,
104532,if __name__ == '__main__':
104533,    p = Pool()
104534,"    result = p.map(f1, [['Dog','Cat','Mouse']])"
104535,    p.close()
104536,    p.join()
104537,    print(result)
104538,"def mainImage(fragCoord: vec2, iResolution: vec3, iTime: float) -> vec3:"
104539,def mainImage(package_iter) -> vec3:
104540,    fragCoord = package_iter[0]
104541,    iResolution = package_iter[1]
104542,    iTime = package_iter[2]
104543,package_iter = []
104544,"iResolution = vec3(nx, ny, 1)"
104545,"for j in range((ny-1), -1, -1):"
104546,"    for i in range(0, nx, 1):"
104547,"        fragCoord: vec2 = vec2(i, j)"
104548,        time_elapsed_seconds = 10
104549,"        package_iter.append((fragCoord, iResolution, time_elapsed_seconds))"
104550,array_rgb_values = []
104551,
104552,with concurrent.futures.ProcessPoolExecutor() as executor:
104553,"    for val in executor.map(mainImage, package_iter):"
104554,        fragColor = val
104555,"        ir = clip(int(255* fragColor.r), 0, 255)"
104556,"        ig = clip(int(255* fragColor.g), 0, 255)"
104557,"        ib = clip(int(255* fragColor.b), 0, 255)"
104558,
104559,"        array_rgb_values.append((ir, ig, ib))"
104560,*
104561,**
104562,"def fun(a, b):"
104563,    return a + b
104564,
104565,pool = multiprocessing.Pool(processes=6)
104566,b = 233
104567,"pool.map(lambda x:fun(x, b), range(1000))"
104568,"array = [0, 10, 20, 40]"
104569,for (i = array.length() - 1; i >= 0; i--)
104570,reversed
104571,list
104572,">>> xs = [0, 10, 20, 40]"
104573,>>> list(reversed(xs))
104574,"[40, 20, 10, 0]"
104575,">>> xs = [0, 10, 20, 40]"
104576,>>> for x in reversed(xs):
104577,...     print(x)
104578,40
104579,20
104580,10
104581,0
104582,reverse
104583,reversed()
104584,">>> xs = [0, 10, 20, 40]"
104585,>>> xs[::-1]
104586,"[40, 20, 10, 0]"
104587,set
104588,L[::-1]
104589,"start, stop"
104590,slice
104591,L[4:0:-1]
104592,list.reverse
104593,">>> xs = [0, 10, 20, 40]"
104594,>>> xs.reverse()
104595,>>> xs
104596,"[40, 20, 10, 0]"
104597,>>> xs[::-1]
104598,"[40, 20, 10, 0]"
104599,L=L[::-1]
104600,b = l[-n:]  b.reverse()  l = b + l[:len(l) - n]
104601,object.reverse()
104602,reversed(object)
104603,object[::-1]
104604,from timeit import timeit
104605,from copy import copy
104606,
104607,def time_str_ms(t):
104608,    return '{0:8.2f} ms'.format(t * 1000)
104609,<list>.reverse()
104610,def rev_in_place(mylist):
104611,    mylist.reverse()
104612,    return mylist
104613,
104614,def rev_copy_reverse(mylist):
104615,    a = copy(mylist)
104616,    a.reverse()
104617,    return a
104618,obj[::-1]
104619,<object>[first_index:last_index:step]
104620,<list>[::-1]
104621,def rev_slice(mylist):
104622,    a = mylist[::-1]
104623,    return a
104624,reversed(obj)
104625,reversed(indexed_object)
104626,def reversed_iterator(mylist):
104627,    a = reversed(mylist)
104628,    return a
104629,
104630,def reversed_with_list(mylist):
104631,    a = list(reversed(mylist))
104632,    return a
104633,def rev_manual_pos_gen(mylist):
104634,    max_index = len(mylist) - 1
104635,    return [ mylist[max_index - index] for index in range(len(mylist)) ]
104636,
104637,def rev_manual_neg_gen(mylist):
104638,"    ## index is 0 to 9, but we need -1 to -10"
104639,    return [ mylist[-index-1] for index in range(len(mylist)) ]
104640,
104641,def rev_manual_index_loop(mylist):
104642,    a = []
104643,    reverse_index = len(mylist) - 1
104644,    for index in range(len(mylist)):
104645,        a.append(mylist[reverse_index - index])
104646,    return a
104647,    
104648,def rev_manual_loop(mylist):
104649,    a = []
104650,    reverse_index = len(mylist)
104651,"    for index, _ in enumerate(mylist):"
104652,        reverse_index -= 1
104653,        a.append(mylist[reverse_index])
104654,    return a
104655,obj.reverse()
104656,reversed(obj)
104657,loops_to_test = 100000
104658,number_of_items = 10
104659,list_to_reverse = list(range(number_of_items))
104660,if number_of_items < 15:
104661,"    print(""a: {}"".format(list_to_reverse))"
104662,"print('Loops: {:,}'.format(loops_to_test))"
104663,"# List of the functions we want to test with the timer, in print order"
104664,"fcns = [rev_in_place, reversed_iterator, rev_slice, rev_copy_reverse,"
104665,"        reversed_with_list, rev_manual_pos_gen, rev_manual_neg_gen,"
104666,"        rev_manual_index_loop, rev_manual_loop]"
104667,max_name_string = max([ len(fcn.__name__) for fcn in fcns ])
104668,for fcn in fcns:
104669,    a = copy(list_to_reverse) # copy to start fresh each loop
104670,    out_str = ' | out = {}'.format(fcn(a)) if number_of_items < 15 else ''
104671,    # Time in ms for the given # of loops on this fcn
104672,"    time_str = time_str_ms(timeit(lambda: fcn(a), number=loops_to_test))"
104673,    # Get the output string for this function
104674,    fcn_str = '{}(a):'.format(fcn.__name__)
104675,    # Add the correct string length to accommodate the maximum fcn name
104676,    format_str = '{{fx:{}s}} {{time}}{{rev}}'.format(max_name_string + 4)
104677,"    print(format_str.format(fx=fcn_str, time=time_str, rev=out_str))"
104678,list(reversed(obj))
104679,obj.reverse()
104680,reversed(<list>)
104681,"a: [0, 1]"
104682,"Loops: 100,000"
104683,"rev_in_place(a):             24.70 ms | out = [1, 0]"
104684,reversed_iterator(a):        30.48 ms | out = <list_reverseiterator object at 0x0000020242580408>
104685,"rev_slice(a):                31.65 ms | out = [1, 0]"
104686,"rev_copy_reverse(a):         63.42 ms | out = [1, 0]"
104687,"reversed_with_list(a):       48.65 ms | out = [1, 0]"
104688,"rev_manual_pos_gen(a):       98.94 ms | out = [1, 0]"
104689,"rev_manual_neg_gen(a):       88.11 ms | out = [1, 0]"
104690,"rev_manual_index_loop(a):    87.23 ms | out = [1, 0]"
104691,"rev_manual_loop(a):          79.24 ms | out = [1, 0]"
104692,"rev_in_place(a):             23.39 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104693,reversed_iterator(a):        30.23 ms | out = <list_reverseiterator object at 0x00000290A3CB0388>
104694,"rev_slice(a):                36.01 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104695,"rev_copy_reverse(a):         64.67 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104696,"reversed_with_list(a):       50.77 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104697,"rev_manual_pos_gen(a):      162.83 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104698,"rev_manual_neg_gen(a):      167.43 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104699,"rev_manual_index_loop(a):   152.04 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104700,"rev_manual_loop(a):         183.01 ms | out = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
104701,rev_in_place(a):             56.37 ms
104702,reversed_iterator(a):        30.47 ms
104703,rev_slice(a):               211.42 ms
104704,rev_copy_reverse(a):        295.74 ms
104705,reversed_with_list(a):      418.45 ms
104706,rev_manual_pos_gen(a):     8410.01 ms
104707,rev_manual_neg_gen(a):    11054.84 ms
104708,rev_manual_index_loop(a): 10543.11 ms
104709,rev_manual_loop(a):       15472.66 ms
104710,array.reverse()
104711,newArray = array[::-1] 
104712,def reverse_in_place(lst):      # Declare a function
104713,    size = len(lst)             # Get the length of the sequence
104714,    hiindex = size - 1
104715,    its = size/2                # Number of iterations required
104716,"    for i in xrange(0, its):    # i is the low index pointer"
104717,        temp = lst[hiindex]     # Perform a classic swap
104718,        lst[hiindex] = lst[i]
104719,        lst[i] = temp
104720,        hiindex -= 1            # Decrement the high index pointer
104721,"    print ""Done!"""
104722,
104723,# Now test it!!
104724,"array = [2, 5, 8, 9, 12, 19, 25, 27, 32, 60, 65, 1, 7, 24, 124, 654]"
104725,
104726,print array                    # Print the original sequence
104727,reverse_in_place(array)        # Call the function passing the list
104728,print array                    # Print reversed list
104729,
104730,
104731,**The result:**
104732,"[2, 5, 8, 9, 12, 19, 25, 27, 32, 60, 65, 1, 7, 24, 124, 654]"
104733,Done!
104734,"[654, 124, 24, 7, 1, 65, 60, 32, 27, 25, 19, 12, 9, 8, 5, 2]"
104735,"lst[hiindex], lst[i] = lst[i], lst[hiindex]"
104736,array[::-1]
104737,[::-1]
104738,first10 = []
104739,for i in range(10): first10.append(array[i])
104740,first10 = array[:10]
104741,l.reverse()
104742,l[::-1]
104743,list()
104744,reversed(l)
104745,l.reverse()
104746,def rev_list1(l):
104747,    return l[::-1]
104748,
104749,def rev_list2(l):
104750,    return list(reversed(l))
104751,
104752,def rev_list3(l):
104753,    l.reverse()
104754,    return l
104755,l = list(range(1000000))
104756,"timeit(lambda: rev_list1(l), number=1000)"
104757,# 6.48
104758,"timeit(lambda: rev_list2(l), number=1000)"
104759,# 7.13
104760,"timeit(lambda: rev_list3(l), number=1000)"
104761,# 0.44
104762,"timeit(lambda: rev_list1(l), number=1000)"
104763,# 6.76
104764,"timeit(lambda: rev_list2(l), number=1000)"
104765,# 9.18
104766,"timeit(lambda: rev_list3(l), number=1000)"
104767,# 0.46
104768,list.reverse
104769,list.reverse()
104770,reversed
104771,list
104772,list
104773,list
104774,reversed
104775,reversed
104776,list.reverse()
104777,list
104778,reversed
104779,list.reverse()
104780,for x in array[::-1]:
104781,    do stuff
104782,reversed
104783,list
104784,">>> list1 = [1,2,3]"
104785,>>> reversed_list = list(reversed(list1))
104786,>>> reversed_list
104787,">>> [3, 2, 1]"
104788,"array=[0,10,20,40]"
104789,for e in reversed(array):
104790,  print e
104791,">>> array = [1,2,3,4]"
104792,>>> for item in reversed(array):
104793,>>>     print item
104794,reversed
104795,def reverse(a):
104796,    midpoint = len(a)/2
104797,    for item in a[:midpoint]:
104798,        otherside = (len(a) - a.index(item)) - 1
104799,        temp = a[otherside]
104800,        a[otherside] = a[a.index(item)]
104801,        a[a.index(item)] = temp
104802,    return a
104803,import numpy as np
104804,"array = [0, 10, 20, 40]"
104805,list(np.flip(array))
104806,"[40, 20, 10, 0]"
104807,revArray = array[::-1]
104808,revArray = list(reversed(array))
104809,z = range(1000000)
104810,startTimeTic = time.time()
104811,y = z[::-1]
104812,"print(""Time: %s s"" % (time.time() - startTimeTic))"
104813,
104814,f = range(1000000)
104815,startTimeTic = time.time()
104816,g = list(reversed(f))
104817,"print(""Time: %s s"" % (time.time() - startTimeTic))"
104818,Time: 0.00489711761475 s
104819,Time: 0.00609302520752 s
104820,timeit
104821,range(1000000)
104822,range
104823,__reversed__
104824,list
104825,">>> array = [0, 10, 20, 40]"
104826,">>> [array[~i] for i, _ in enumerate(array)]"
104827,"[40, 20, 10, 0]"
104828,index[0] and index[last]
104829,def reverse(array):
104830,    n = array
104831,    first = 0
104832,    last = len(array) - 1
104833,    while first < last:
104834,      holder = n[first]
104835,      n[first] = n[last]
104836,      n[last] = holder
104837,      first += 1
104838,      last -= 1
104839,    return n
104840,
104841,"input -> [-1 ,1, 2, 3, 4, 5, 6]"
104842,"output -> [6, 5, 4, 3, 2, 1, -1]"
104843,"[array[n] for n in range(len(array)-1, -1, -1)]"
104844,"my_list.sort(), print(my_list)"
104845,"print(sorted(my_list, reverse=True))"
104846,
104847,or
104848,
104849,"my_list.sort(reverse=True), print(my_list)"
104850,print(list(reversed(my_list)))
104851,"array = [1, 2, 3, 4, 5, 6,7, 8]"
104852,inverse = [] #create container for inverse array
104853,"length = len(array)  #to iterate later, returns 8 "
104854,counter = length - 1  #because the 8th element is on position 7 (as python starts from 0)
104855,
104856,for i in range(length): 
104857,   inverse.append(array[counter])
104858,   counter -= 1
104859,print(inverse)
104860,reversed_array = array[-1::-1]
104861,reversed_array2 = array[::-1]
104862,reversed_array = array.reverse()
104863,array
104864,"""array"""
104865,array.reverse()
104866,array[:] = array[::-1]
104867,array[:] = array[::-1]
104868,for
104869,"for i in xrange(len(array) - 1, -1, -1):"
104870,"   print i, array[i]"
104871,def reverse(my_list):
104872,  L = len(my_list)
104873,  for i in range(L/2):
104874,"    my_list[i], my_list[L-i - 1] = my_list[L-i-1], my_list[i]"
104875,  return my_list
104876,//
104877,def reverse(text):
104878,    output = []
104879,"    for i in range(len(text)-1, -1, -1):"
104880,        output.append(text[i])
104881,    return output
104882,">>> l = [1,2,3,4,5,6]; nl=[]"
104883,>>> while l:
104884,        nl.append(l.pop())  
104885,>>> print nl
104886,"[6, 5, 4, 3, 2, 1]"
104887,"list_data = [1,2,3,4,5]"
104888,l = len(list_data)
104889,i=l+1
104890,rev_data = []
104891,while l>0:
104892,  j=i-l
104893,  l-=1
104894,  rev_data.append(list_data[-j])
104895,"print ""After Rev:- %s"" %rev_data "
104896,">>> l = [1, 2, 3, 4, 5]"
104897,">>> print(reduce(lambda acc, x: [x] + acc, l, []))"
104898,"[5, 4, 3, 2, 1]"
104899,l[::-1]
104900,">>> l = [1,2,3,4,5,6,7]    "
104901,>>> for i in range(len(l)//2):
104902,"...     l[i], l[-1-i] = l[-1-i], l[i]"
104903,...
104904,>>> l
104905,"[7, 6, 5, 4, 3, 2, 1]"
104906,__reverse__
104907,">>> l = [1,2,3,4,5]"
104908,>>> for i in l.__reversed__():
104909,...   print i
104910,... 
104911,5
104912,4
104913,3
104914,2
104915,1
104916,>>>
104917,"for i in input()[::-1]: print(i,end='')"
104918,def reverse(seq):
104919,"    for x in range(len(seq), -1, -1): #Iterate through a sequence starting from -1 and increasing by -1."
104920,        yield seq[x] #Yield a value to the generator
104921,"for x in reverse([1, 2, 3]):"
104922,    print(x)
104923,"l = list(reverse([1, 2, 3]))"
104924,"data = {'sender':   'Alice',"
104925,"    'receiver': 'Bob',"
104926,    'message':  'We did it!'}
104927,data_json = simplejson.dumps(data)
104928,payload = {'json_payload': data_json}
104929,"r = requests.post(""http://localhost:8080"", data=payload)"
104930,class Root(object):
104931,
104932,"    def __init__(self, content):"
104933,        self.content = content
104934,        print self.content  # this works
104935,
104936,    exposed = True
104937,
104938,    def GET(self):
104939,        cherrypy.response.headers['Content-Type'] = 'application/json'
104940,        return simplejson.dumps(self.content)
104941,
104942,    def POST(self):
104943,        self.content = simplejson.loads(cherrypy.request.body.read())
104944,__init__
104945,content
104946,__init__
104947,# this works
104948,requests
104949,json=
104950,data=
104951,>>> import requests
104952,">>> r = requests.post('http://httpbin.org/post', json={""key"": ""value""})"
104953,>>> r.status_code
104954,200
104955,>>> r.json()
104956,"{'args': {},"
104957," 'data': '{""key"": ""value""}',"
104958," 'files': {},"
104959," 'form': {},"
104960," 'headers': {'Accept': '*/*',"
104961,"             'Accept-Encoding': 'gzip, deflate',"
104962,"             'Connection': 'close',"
104963,"             'Content-Length': '16',"
104964,"             'Content-Type': 'application/json',"
104965,"             'Host': 'httpbin.org',"
104966,"             'User-Agent': 'python-requests/2.4.3 CPython/3.4.0',"
104967,"             'X-Request-Id': 'xx-xx-xx'},"
104968," 'json': {'key': 'value'},"
104969," 'origin': 'x.x.x.x',"
104970, 'url': 'http://httpbin.org/post'}
104971,json.dumps(your_json)
104972,str
104973,bytes
104974,data=json.dumps(...)
104975,Content-type: application/json
104976,json=...
104977,import requests
104978,
104979,"url = ""http://localhost:8080"""
104980,"data = {'sender': 'Alice', 'receiver': 'Bob', 'message': 'We did it!'}"
104981,"headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}"
104982,"r = requests.post(url, data=json.dumps(data), headers=headers)"
104983,application/json
104984,GET
104985,POST
104986,500
104987,r
104988,<Response [200]>
104989,json.dumps
104990,data
104991,requests
104992,"requests.post('http://httpbin.org/post', json={'test': 'cheers'})"
104993,data
104994,json
104995,files
104996,Content-Type
104997,Content-Type
104998,application/x-www-form-urlencoded
104999,data=
105000,"requests.post(url, data=json_obj)"
105001,Content-Type
105002,application/json
105003,json=
105004,data=
105005,Content-Type
105006,"requests.post(url, json=json_obj)"
105007,"requests.post(url, data=jsonstr, headers={""Content-Type"":""application/json""})"
105008,Content-Type
105009,multipart/form-data
105010,files=
105011,"requests.post(url, files=xxxx)"
105012,curlify
105013,print(curlify.to_curl(project.request))
105014,Content-Type
105015,data=json_obj
105016,json
105017,"url = ""http://xxx.xxxx.xx"""
105018,data = {
105019,"    ""cardno"": ""6248889874650987"","
105020,"    ""systemIdentify"": ""s08"","
105021,"    ""sourceChannel"": 12"
105022,}
105023,"resp = requests.post(url, json=data)"
105024,"headers = {""charset"": ""utf-8"", ""Content-Type"": ""application/json""}"
105025,url = 'http://localhost:PORT_NUM/FILE.php'
105026,
105027,"r = requests.post(url, json=YOUR_JSON_DATA, headers=headers)"
105028,print(r.text)
105029,import requests
105030,"data = {'sender':   'Alice',"
105031,"    'receiver': 'Bob',"
105032,    'message':  'We did it!'}
105033,"r = requests.post(""http://localhost:8080"", json={'json_payload': data})"
105034,class Root(object):
105035,
105036,"    def __init__(self, content):"
105037,        self.content = content
105038,        print self.content  # this works
105039,
105040,    exposed = True
105041,
105042,    def GET(self):
105043,        cherrypy.response.headers['Content-Type'] = 'application/json'
105044,        return simplejson.dumps(self.content)
105045,
105046,    @cherrypy.tools.json_in()
105047,    @cherrypy.tools.json_out()
105048,    def POST(self):
105049,        self.content = cherrypy.request.json
105050,"        return {'status': 'success', 'message': 'updated'}"
105051,json
105052,content-type
105053,POST
105054,requests
105055,json
105056,import requests
105057,"r = requests.post('http://httpbin.org/post', json=[1, 2, {""a"": 3}])"
105058,"from flask import Flask, request"
105059,"from flask_restful import Resource, Api"
105060,
105061,
105062,req = request.json
105063,if not req :
105064,    req = request.form
105065,req['value']
105066,def POST_request():
105067,"    with open(""FILE PATH"", ""r"") as data:"
105068,        JSON_Body = data.read()
105069,"    response = requests.post(url=""URL"", data=JSON_Body)"
105070,    assert response.status_code == 200
105071,home.html
105072,jinja2.exceptions.TemplateNotFound: home.html
105073,"from flask import Flask, render_template"
105074,
105075,app = Flask(__name__)
105076,
105077,@app.route('/')
105078,def home():
105079,    return render_template('home.html')
105080,/myproject
105081,    app.py
105082,    home.html
105083,app.py
105084,templates
105085,home.html
105086,templates/
105087,home.html
105088,myproject/
105089,    app.py
105090,    templates/
105091,        home.html
105092,myproject/
105093,    mypackage/
105094,        __init__.py
105095,        templates/
105096,            home.html
105097,templates
105098,"app = Flask(__name__, template_folder='template')  # still relative to module"
105099,EXPLAIN_TEMPLATE_LOADING
105100,True
105101,app.logger
105102,INFO
105103,foo/bar.html
105104,base.html
105105,"[2019-06-15 16:03:39,197] INFO in debughelpers: Locating template ""foo/bar.html"":"
105106,"    1: trying loader of application ""flaskpackagename"""
105107,       class: jinja2.loaders.FileSystemLoader
105108,       encoding: 'utf-8'
105109,       followlinks: False
105110,       searchpath:
105111,         - /.../project/flaskpackagename/templates
105112,       -> found ('/.../project/flaskpackagename/templates/foo/bar.html')
105113,"[2019-06-15 16:03:39,203] INFO in debughelpers: Locating template ""base.html"":"
105114,"    1: trying loader of application ""flaskpackagename"""
105115,       class: jinja2.loaders.FileSystemLoader
105116,       encoding: 'utf-8'
105117,       followlinks: False
105118,       searchpath:
105119,         - /.../project/flaskpackagename/templates
105120,       -> found ('/.../project/flaskpackagename/templates/base.html')
105121,./Templates/index.html
105122,TemplateNotFound
105123,git mv Templates/index.html templates/index.html
105124,Templates
105125,templates
105126,template
105127,hello.py
105128,"from flask import Flask,render_template"
105129,
105130,"app=Flask(__name__,template_folder='template')"
105131,
105132,
105133,"@app.route(""/"")"
105134,def home():
105135,    return render_template('home.html')
105136,
105137,"@app.route(""/about/"")"
105138,def about():
105139,    return render_template('about.html')
105140,
105141,"if __name__==""__main__"":"
105142,    app.run(debug=True)
105143,project/
105144,    hello.py        
105145,    template/
105146,         home.html
105147,         about.html    
105148,    static/
105149,           js/
105150,             main.js
105151,           css/
105152,               main.css
105153,home.html
105154,about.html
105155,templates
105156,"    app = Flask(__name__, template_folder='../templates')"
105157,"    app = Flask(__name__, template_folder='../templates', static_folder='../static')"
105158,../
105159,../../
105160,project/
105161,    app/
105162,        hello.py
105163,        static/
105164,            main.css
105165,    templates/
105166,        home.html
105167,    venv/
105168,app = Flask(__name__)
105169,__init__.py
105170,app/
105171,<python root>/lib/site-packages/your-package/templates
105172,jinja
105173,flask_simple_ui
105174,ninja
105175,...python/lib/site-packages/flask_simple_ui
105176,os.getcwd()
105177,setup.py
105178,form.html
105179,setup.py
105180,templates
105181,render_template
105182,index.html
105183,auth/login.html
105184,app.debug = True
105185,.html
105186,project/
105187,    hello.py
105188,    static/
105189,        image.jpg
105190,        style.css
105191,    templates/
105192,        homepage.html
105193,    virtual/
105194,        filename.json
105195,root_path
105196,"root_path = Path(sys.executable).parent if getattr(sys, 'frozen', False) else Path(__file__).parent"
105197,"app = Flask(__name__.split('.')[0], root_path=root_path)"
105198,Jinja2
105199,ENV = jinja2.Environment(loader=jinja2.FileSystemLoader(str(root_path / 'templates')))
105200,template = ENV.get_template(your_template_name)
105201,home.html
105202,.j2
105203,.html
105204,templates
105205,app = Flask(__name__)
105206,__name__
105207,projects/
105208,    yourproject/
105209,        app/
105210,            templates/
105211,"import pygame, sys"
105212,from pygame.locals import *
105213,pygame.init()
105214,
105215,"DISPLAY=pygame.display.set_mode((800,800))"
105216,"pygame.display.set_caption(""thing"")"
105217,"pygame.draw.rect(DISPLAY, (200,200,200), pygame.Rect(0,400,800,400))"
105218,
105219,while True:
105220,    for event in pygame.event.get():
105221,        if event.type == QUIT:
105222,            pygame.quit()
105223,            sys.exit()
105224,pygame.display.update()
105225,pygame.display.flip()
105226,Surface
105227,pygame.display.update()
105228,pygame.display.flip()
105229,pygame.display.flip()
105230,pygame.display.flip()
105231,pygame.display.update()
105232,pygame.display.update()
105233,pygame.display.flip()
105234,pygame.event.pump()
105235,pygame.event.get()
105236,pygame.display.update()
105237,pygame.display.flip()
105238,pygame.time.Clock.tick
105239,import pygame
105240,from pygame.locals import *
105241,pygame.init()
105242,
105243,"DISPLAY = pygame.display.set_mode((800,800))"
105244,"pygame.display.set_caption(""thing"")"
105245,clock = pygame.time.Clock()
105246,
105247,run = True
105248,while run:
105249,    # handle events
105250,    for event in pygame.event.get():
105251,        if event.type == QUIT:
105252,            run = False
105253,
105254,    # clear display
105255,    DISPLAY.fill(0)
105256,
105257,    # draw scene
105258,"    pygame.draw.rect(DISPLAY, (200,200,200), pygame.Rect(0,400,800,400))"
105259,
105260,    # update display
105261,    pygame.display.flip()
105262,
105263,    # limit frames per second
105264,    clock.tick(60)
105265,
105266,pygame.quit()
105267,exit()
105268,pygame.event.pump()
105269,"import pygame, sys"
105270,from pygame.locals import *
105271,pygame.init()
105272,
105273,"DISPLAY=pygame.display.set_mode((800,800))"
105274,"pygame.display.set_caption(""thing"")"
105275,"pygame.draw.rect(DISPLAY, (200,200,200), pygame.Rect(0,400,800,400))"
105276,pygame.display.flip() #Refreshing screen
105277,
105278,while True:
105279,    for event in pygame.event.get():
105280,        if event.type == QUIT:
105281,            pygame.quit()
105282,            sys.exit()
105283,import requests
105284,
105285,def DownloadFile(url)
105286,    local_filename = url.split('/')[-1]
105287,    r = requests.get(url)
105288,"    f = open(local_filename, 'wb')"
105289,    for chunk in r.iter_content(chunk_size=512 * 1024): 
105290,        if chunk: # filter out keep-alive new chunks
105291,            f.write(chunk)
105292,    f.close()
105293,    return 
105294,def download_file(url):
105295,    local_filename = url.split('/')[-1]
105296,    # NOTE the stream=True parameter below
105297,"    with requests.get(url, stream=True) as r:"
105298,        r.raise_for_status()
105299,"        with open(local_filename, 'wb') as f:"
105300,            for chunk in r.iter_content(chunk_size=8192): 
105301,                # If you have chunk encoded response uncomment if
105302,                # and set chunk_size parameter to None.
105303,                #if chunk: 
105304,                f.write(chunk)
105305,    return local_filename
105306,iter_content
105307,chunk_size
105308,chunk_size
105309,f.flush()
105310,f.flush()
105311,open()
105312,if chunk: # filter out keep-alive new chunks
105313,iter_content()
105314,None
105315,Response.raw
105316,shutil.copyfileobj()
105317,import requests
105318,import shutil
105319,
105320,def download_file(url):
105321,    local_filename = url.split('/')[-1]
105322,"    with requests.get(url, stream=True) as r:"
105323,"        with open(local_filename, 'wb') as f:"
105324,"            shutil.copyfileobj(r.raw, f)"
105325,
105326,    return local_filename
105327,Response.raw
105328,gzip
105329,deflate
105330,.raw
105331,read
105332,"response.raw.read = functools.partial(response.raw.read, decode_content=True)"
105333,"shutil.copyfileobj(r.raw, f, length=16*1024*1024)"
105334,urllib
105335,from urllib.request import urlretrieve
105336,
105337,url = 'http://mirror.pnl.gov/releases/16.04.2/ubuntu-16.04.2-desktop-amd64.iso'
105338,dst = 'ubuntu-16.04.2-desktop-amd64.iso'
105339,"urlretrieve(url, dst)"
105340,from urllib.request import urlopen
105341,from shutil import copyfileobj
105342,from tempfile import NamedTemporaryFile
105343,
105344,url = 'http://mirror.pnl.gov/releases/16.04.2/ubuntu-16.04.2-desktop-amd64.iso'
105345,"with urlopen(url) as fsrc, NamedTemporaryFile(delete=False) as fdst:"
105346,"    copyfileobj(fsrc, fdst)"
105347,"watch 'ps -p 18647 -o pid,ppid,pmem,rsz,vsz,comm,args; ls -al *.iso'"
105348,from urllib import urlretrieve
105349,with
105350,def DownloadFile(url):
105351,    local_filename = url.split('/')[-1]
105352,    r = requests.get(url)
105353,"    with open(local_filename, 'wb') as f:"
105354,        for chunk in r.iter_content(chunk_size=1024): 
105355,            if chunk: # filter out keep-alive new chunks
105356,                f.write(chunk)
105357,    return 
105358,f.flush()
105359,os.fsync()
105360,"    with open(local_filename, 'wb') as f:"
105361,        for chunk in r.iter_content(chunk_size=1024): 
105362,            if chunk: # filter out keep-alive new chunks
105363,                f.write(chunk)
105364,                f.flush()
105365,                os.fsync(f.fileno())
105366,f.flush(); os.fsync()
105367,os.fsync(f.fileno())
105368,def DownloadFile(url)
105369,wget
105370,import wget
105371,wget.download(url)
105372,"def download(url: str, file_path='', attempts=2):"
105373,"    """"""Downloads a URL content into a file (with large file support by streaming)"
105374,
105375,    :param url: URL to download
105376,    :param file_path: Local file name to contain the data downloaded
105377,    :param attempts: Number of attempts
105378,    :return: New file path. Empty string if the download failed
105379,"    """""""
105380,    if not file_path:
105381,        file_path = os.path.realpath(os.path.basename(url))
105382,    logger.info(f'Downloading {url} content to {file_path}')
105383,    url_sections = urlparse(url)
105384,    if not url_sections.scheme:
105385,        logger.debug('The given url is missing a scheme. Adding http scheme')
105386,        url = f'http://{url}'
105387,        logger.debug(f'New url: {url}')
105388,"    for attempt in range(1, attempts+1):"
105389,        try:
105390,            if attempt > 1:
105391,                time.sleep(10)  # 10 seconds wait time between downloads
105392,"            with requests.get(url, stream=True) as response:"
105393,                response.raise_for_status()
105394,"                with open(file_path, 'wb') as out_file:"
105395,                    for chunk in response.iter_content(chunk_size=1024*1024):  # 1MB chunks
105396,                        out_file.write(chunk)
105397,                logger.info('Download finished successfully')
105398,                return file_path
105399,        except Exception as ex:
105400,            logger.error(f'Attempt #{attempt} failed with error: {ex}')
105401,    return ''
105402,requests
105403,socket
105404,def stream_(host):
105405,    import socket
105406,    import ssl
105407,"    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:"
105408,        context = ssl.create_default_context(Purpose.CLIENT_AUTH)
105409,"        with context.wrap_socket(sock, server_hostname=host) as wrapped_socket:"
105410,"            wrapped_socket.connect((socket.gethostbyname(host), 443))"
105411,            wrapped_socket.send(
105412,"                ""GET / HTTP/1.1\r\nHost:thiscatdoesnotexist.com\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n\r\n"".encode())"
105413,
105414,"            resp = b"""""
105415,"            while resp[-4:-1] != b""\r\n\r"":"
105416,                resp += wrapped_socket.recv(1)
105417,            else:
105418,                resp = resp.decode()
105419,"                content_length = int("""".join([tag.split("" "")[1] for tag in resp.split(""\r\n"") if ""content-length"" in tag.lower()]))"
105420,"                image = b"""""
105421,                while content_length > 0:
105422,                    data = wrapped_socket.recv(2048)
105423,                    if not data:
105424,"                        print(""EOF"")"
105425,                        break
105426,                    image += data
105427,                    content_length -= len(data)
105428,"                with open(""image.jpeg"", ""wb"") as file:"
105429,                    file.write(image)
105430,asyncio
105431,aiohttp
105432,aiofiles
105433,Python 3.7
105434,SRC_URL
105435,DEST_FILE
105436,import aiofiles
105437,import aiohttp
105438,import asyncio
105439,
105440,"async def async_http_download(src_url, dest_file, chunk_size=65536):"
105441,"    async with aiofiles.open(dest_file, 'wb') as fd:"
105442,        async with aiohttp.ClientSession() as session:
105443,            async with session.get(src_url) as resp:
105444,                async for chunk in resp.content.iter_chunked(chunk_size):
105445,                    await fd.write(chunk)
105446,
105447,"SRC_URL = ""/path/to/url"""
105448,"DEST_FILE = ""/path/to/file/on/local/machine"""
105449,
105450,"asyncio.run(async_http_download(SRC_URL, DEST_FILE))"
105451,with
105452,with
105453,try..finally
105454,with
105455,with
105456,with
105457,open
105458,with
105459,with
105460,with
105461,with
105462,with open(filename) as fp:
105463,with lock:
105464,lock
105465,threading.Lock
105466,contextmanager
105467,contextlib
105468,from contextlib import contextmanager
105469,import os
105470,
105471,@contextmanager
105472,def working_directory(path):
105473,    current_dir = os.getcwd()
105474,    os.chdir(path)
105475,    try:
105476,        yield
105477,    finally:
105478,        os.chdir(current_dir)
105479,
105480,"with working_directory(""data/stuff""):"
105481,    # do something within data/stuff
105482,# here I am back again in the original working directory
105483,sys.stdin
105484,sys.stdout
105485,sys.stderr
105486,from contextlib import contextmanager
105487,import sys
105488,
105489,@contextmanager
105490,def redirected(**kwds):
105491,"    stream_names = [""stdin"", ""stdout"", ""stderr""]"
105492,    old_streams = {}
105493,    try:
105494,        for sname in stream_names:
105495,"            stream = kwds.get(sname, None)"
105496,"            if stream is not None and stream != getattr(sys, sname):"
105497,"                old_streams[sname] = getattr(sys, sname)"
105498,"                setattr(sys, sname, stream)"
105499,        yield
105500,    finally:
105501,"        for sname, stream in old_streams.iteritems():"
105502,"            setattr(sys, sname, stream)"
105503,
105504,"with redirected(stdout=open(""/tmp/log.txt"", ""w"")):"
105505,     # these print statements will go to /tmp/log.txt
105506,"     print ""Test entry 1"""
105507,"     print ""Test entry 2"""
105508,# back to the normal stdout
105509,"print ""Back to normal stdout again"""
105510,from tempfile import mkdtemp
105511,from shutil import rmtree
105512,
105513,@contextmanager
105514,"def temporary_dir(*args, **kwds):"
105515,"    name = mkdtemp(*args, **kwds)"
105516,    try:
105517,        yield name
105518,    finally:
105519,        shutil.rmtree(name)
105520,
105521,with temporary_dir() as dirname:
105522,    # do whatever you want
105523,with
105524,"with open('myScript.py', 'r') as f: pass"
105525,f
105526,f
105527,open
105528,f = open('myScript.py').read()
105529,<_io.TextIOWrapper name='myScript.py' mode='r' encoding='cp1252'>
105530,with
105531,read
105532,with
105533,open
105534,with
105535,with
105536,with
105537,try...except...finally
105538,"with open(""foo.txt"") as foo_file:"
105539,    data = foo_file.read()
105540,from contextlib import nested
105541,"with nested(A(), B(), C()) as (X, Y, Z):"
105542,   do_something()
105543,"with open('data') as input_file, open('result', 'w') as output_file:"
105544,   for line in input_file:
105545,     output_file.write(parse(line))
105546,lock = threading.Lock()
105547,with lock:
105548,    # Critical section of code
105549,try..catch..finally
105550,with
105551,with
105552,Resource Acquisition Is Initialization
105553,with
105554,with
105555,with
105556,Decimal
105557,with
105558,from decimal import localcontext
105559,
105560,with localcontext() as ctx:
105561,    ctx.prec = 42   # Perform a high precision calculation
105562,    s = calculate_something()
105563,s = +s  # Round the final result back to the default precision
105564,with
105565,with
105566,for row in lines:
105567,"    with open(""outfile"",""a"") as f:"
105568,        f.write(row)
105569,"with open(""outfile"",""a"") as f:"
105570,    for row in lines:
105571,        f.write(row)
105572,row
105573,from __future__ import with_statement
105574,open()
105575,connection
105576,connection
105577,with-statement
105578,with-block
105579,with-block
105580,with-statements
105581,conn = psycopg2.connect(DSN)
105582,
105583,with conn:
105584,    with conn.cursor() as curs:
105585,        curs.execute(SQL1)
105586,
105587,with conn:
105588,    with conn.cursor() as curs:
105589,        curs.execute(SQL2)
105590,
105591,conn.close()
105592,cursor
105593,psycopg2
105594,cursor
105595,with-block
105596,"with open(“file name”, “mode”) as file_var:"
105597,    processing statements
105598,close()
105599,file_var.close()
105600,"with open(""foo.txt"") as file:"
105601,    data = file.read()
105602,open
105603,file
105604,__enter__
105605,__exit__
105606,file
105607,with
105608,__enter__
105609,__exit__
105610,with
105611,__enter__
105612,__exit__
105613,__exit__
105614,import sys
105615,
105616,def Factorial(n): # Return factorial
105617,    result = 1
105618,"    for i in range (1,n):"
105619,        result = result * i
105620,"    print ""factorial is "",result"
105621,    return result
105622,View > Indentation > Intent Using Spaces
105623,View > Indentation > Tab Width: 4
105624,Indent Using Spaces
105625,import sys
105626,
105627,def Factorial(n): # return factorial
105628,    result = 1
105629,"    for i in range (1,n):"
105630,        result = result * i
105631,"    print ""factorial is "",result"
105632,    return result
105633,
105634,print Factorial(10)
105635,python -m tabnanny yourfile.py
105636,result = result * i
105637,Packages > Whitespace > Convert Spaces to Tabs
105638,python -m tabnanny yourFile.py
105639,>python
105640,">>> help(""yourFile.py"")"
105641,Ctrl + Shift + p
105642,indent using spaces
105643,Enter
105644,class junk: 
105645,"     """"""docstring is indented too much"""""" "
105646,    def fun(): return   
105647,IndentationError: unindent does not match any outer indentation level
105648,class a:
105649,    def blah:
105650,"      print(""Hello world"")"
105651,    def blah1:
105652,"      print(""Hello world"")"
105653,spyder
105654,if
105655,if
105656,elif
105657,else
105658,def your_choice(answer):
105659,    if answer>5:
105660,"        print(""You're overaged"")"
105661,    elif answer<=5 and answer>1: 
105662,"            print(""Welcome to the toddler's club!"")"
105663,    else:
105664,"            print(""No worries mate!"")"
105665,#!/usr/bin/python -tt
105666,Packages ->whitspace -> remove trailing whitespaces
105667,def foo(bar):
105668,    # Some awesome temporary comment.
105669,    # But there is actually nothing in the function!
105670,    # D'Oh!
105671,"  File ""foobar.py"", line 69"
105672,
105673,                                ^
105674,IndentationError: expected an indented block
105675,^
105676,def foo(bar):
105677,    '' Some awesome comment. This comment could be just one space.''
105678,def foo(bar):
105679,    0
105680,import sys
105681,
105682,def Factorial(n): # Return factorial
105683,  result = 0
105684,"  for i in range (1,n):"
105685,     result = result * i
105686,
105687,"  print ""factorial is "",result"
105688,  return result
105689,1. def convert_distance(miles):
105690,2.   km = miles * 1.6
105691,3.   return km
105692,Reformat code
105693,if
105694,else:
105695,"""""""comment comment "
105696,comment
105697,""""""""
105698,if a==1:
105699,    print('test')
105700, else:
105701,    print('test2')
105702,"  File ""<ipython-input-127-52bbac35ad7d>"", line 3"
105703,    else:
105704,         ^
105705,IndentationError: unindent does not match any outer indentation level
105706,download
105707,pip download -r requirements.txt
105708,pip install --download -r requirements.txt
105709,pip install --no-index --find-links /path/to/download/dir/ -r requirements.txt
105710,--find-links file:/path/to/some/dir/
105711,requirements.txt
105712,Flask==0.12
105713,requests>=2.7.0
105714,scikit-learn==0.19.1
105715,numpy==1.14.3
105716,pandas==0.22.0
105717,pip freeze > requirements.txt
105718,requirements.txt
105719,mkdir wheelhouse && pip download -r requirements.txt -d wheelhouse
105720,wheelhouse
105721,wheelhouse
105722,wheelhouse.tar.gz
105723,tar -zcf wheelhouse.tar.gz wheelhouse
105724,wheelhouse.tar.gz
105725,tar -zxf wheelhouse.tar.gz
105726,pip install -r wheelhouse/requirements.txt --no-index --find-links wheelhouse
105727,pip install
105728,pip download ...
105729,*-macosx*.whl
105730,~/src/myapp
105731,~/src/myapp/setup.py
105732,install_requires
105733,/pypi
105734,  install_requires=[
105735,"    'boto',"
105736,"    'Flask',"
105737,"    'Werkzeug',"
105738,    # and so on
105739,/pypi
105740,setup.py develop ...
105741,easy_install ...
105742,easy_install
105743,--allow-hosts=None
105744,--no-index
105745,   $ mkdir packages
105746,   $ cd packages
105747,tensorflow
105748,$ pip download tensorflow
105749,packages
105750,  $ cd packages
105751,  $ pip install 'tensorflow-xyz.whl' --no-index --find-links '.'
105752,tensorflow-xyz.whl
105753,pip install virtualenv --user
105754,pip install virtualenv-15.1.0-py2.py3-none-any.whl --user
105755,--user
105756,sudo pip…
105757,cd
105758,python -m virtualenv myenv
105759,cd myenv
105760,source bin/activate
105761,pip install Flask
105762,requirements.txt
105763,pip freeze > requirements.txt
105764,myenv2
105765,python -m virtualenv myenv2
105766,cd myenv2
105767,source bin/activate
105768,cd -
105769,ls
105770,requirements.txt
105771,tranferred_packages
105772,tranferred_packages
105773,pip download -r requirements.txt
105774,python -m virtualenv myenv2
105775,cd myenv2
105776,source bin/activate
105777,cd -
105778,cd offline
105779,"pip install --no-index --find-links=""./tranferred_packages"" -r requirements.txt"
105780,pip list
105781,virtualenv -p python3 envname
105782,mkdir -p /path/to/packages/
105783,python3 -m pip wheel --no-cache-dir -r requirements.txt -w /path/to/packages
105784,pip download -r requirements.txt -d /path/to/packages
105785,
105786,Eg:- ls /root/wheelhouse/  # **/root/wheelhouse** is my **/path/to/packages/**
105787,total 4524
105788,-rw-r--r--. 1 root root   16667 May 23  2017 incremental-17.5.0-py2.py3-none-any.whl
105789,-rw-r--r--. 1 root root   34713 Sep  1 10:21 attrs-18.2.0-py2.py3-none-any.whl
105790,-rw-r--r--. 1 root root 3088398 Oct 15 14:41 Twisted-18.9.0.tar.bz2
105791,-rw-r--r--. 1 root root  133356 Jan 28 15:58 chardet-3.0.4-py2.py3-none-any.whl
105792,-rw-r--r--. 1 root root  154154 Jan 28 15:58 certifi-2018.11.29-py2.py3-none-any.whl
105793,-rw-r--r--. 1 root root   57987 Jan 28 15:58 requests-2.21.0-py2.py3-none-any.whl
105794,-rw-r--r--. 1 root root   58594 Jan 28 15:58 idna-2.8-py2.py3-none-any.whl
105795,-rw-r--r--. 1 root root  118086 Jan 28 15:59 urllib3-1.24.1-py2.py3-none-any.whl
105796,-rw-r--r--. 1 root root   47229 Jan 28 15:59 tqdm-4.30.0-py2.py3-none-any.whl
105797,-rw-r--r--. 1 root root    7922 Jan 28 16:13 constantly-15.1.0-py2.py3-none-any.whl
105798,-rw-r--r--. 1 root root  164706 Jan 28 16:14 zope.interface-4.6.0-cp27-cp27mu-manylinux1_x86_64.whl
105799,-rw-r--r--. 1 root root  573841 Jan 28 16:14 setuptools-40.7.0-py2.py3-none-any.whl
105800,-rw-r--r--. 1 root root   37638 Jan 28 16:15 Automat-0.7.0-py2.py3-none-any.whl
105801,-rw-r--r--. 1 root root   37905 Jan 28 16:15 hyperlink-18.0.0-py2.py3-none-any.whl
105802,-rw-r--r--. 1 root root   52311 Jan 28 16:15 PyHamcrest-1.9.0-py2.py3-none-any.whl
105803, -rw-r--r--. 1 root root   10586 Jan 28 16:15 six-1.12.0-py2.py3-none-any.whl
105804,cd /path/to/packages/
105805,tar -cvzf packages.tar.gz .  # not the . (dot) at the end
105806,cd /path/to/packages/
105807,tar -xvzf packages.tar.gz
105808,mkdir -p $HOME/.config/pip/
105809,vi $HOME/.config/pip/pip.conf
105810,[global]
105811,timeout = 10
105812,find-links = file:///path/to/package/
105813,no-cache-dir = true
105814,no-index = true
105815,virtualenv
105816,"virtualenv -p python2 venv # use python3, if you are on python3"
105817,source ./venv/bin/activate
105818,pip install <package>
105819,pip install --no-index --find-links /path/to/download/dir/ -r requirements.txt
105820,python setup.py install
105821,wheel
105822,$ tempdir=$(mktemp -d /tmp/wheelhouse-XXXXX)
105823,$ pip wheel -r requirements.txt --wheel-dir=$tempdir
105824,$ cwd=`pwd`
105825,"$ (cd ""$tempdir""; tar -cjvf ""$cwd/bundled.tar.bz2"" *)"
105826,$ tempdir=$(mktemp -d /tmp/wheelhouse-XXXXX)
105827,$ (cd $tempdir; tar -xvf /path/to/bundled.tar.bz2)
105828,$ pip install --force-reinstall --ignore-installed --upgrade --no-index --no-deps $tempdir/*
105829,wheel
105830,docker==4.4.0
105831,#!/usr/bin/env bash
105832,
105833,# This script follows the steps described in this link:
105834,# https://stackoverflow.com/a/51646354/8808983
105835,
105836,"LIBRARIES_DIR=""python3.6-wheelhouse"""
105837,
105838,if [ -d ${LIBRARIES_DIR} ]; then
105839,    rm -rf ${LIBRARIES_DIR}/*
105840,else
105841,    mkdir ${LIBRARIES_DIR}
105842,fi
105843,
105844,pip download -r requirements.txt -d ${LIBRARIES_DIR}
105845,
105846,"files_to_add=(""requirements.txt"" ""install-python-libraries-offline.sh"")"
105847,
105848,"for file in ""${files_to_add[@]}""; do"
105849,"    echo ""Adding file ${file}"""
105850,"    cp ""$file"" ${LIBRARIES_DIR}"
105851,done
105852,
105853,tar -cf ${LIBRARIES_DIR}.tar ${LIBRARIES_DIR}
105854,#!/usr/bin/env bash
105855,
105856,# This script follows the steps described in this link:
105857,# https://stackoverflow.com/a/51646354/8808983
105858,
105859,"# This file should run during the installation process from inside the libraries directory, after it was untared:"
105860,# pythonX-wheelhouse.tar -> untar -> pythonX-wheelhouse
105861,# |
105862,# |--requirements.txt
105863,# |--install-python-libraries-offline.sh
105864,
105865,
105866,pip3 install -r requirements.txt --no-index --find-links .
105867,python3 -m pip install --upgrade pip
105868,pip download -r requ.txt
105869,pip install dlb-0.5.0-py3-none-any.whl
105870,"pip download openpyxl -d""C:\repo"""
105871,print
105872,">>> print ""Hello, World!"""
105873,"  File ""<stdin>"", line 1"
105874,"    print ""Hello, World!"""
105875,                        ^
105876,SyntaxError: Missing parentheses in call to 'print'
105877,print
105878,"print ""Hello, World!"""
105879,"print(""Hello, World!"")"
105880,">>> print(""Hello, World!"")"
105881,"Hello, World!"
105882,">>> print ""Hello, World!"""
105883,"  File ""<stdin>"", line 1"
105884,"    print ""Hello, World!"""
105885,                        ^
105886,SyntaxError: invalid syntax
105887,print
105888,>>> import sys
105889,">>> print >> sys.stderr, 1, 2, 3,; print >> sys.stderr, 4, 5, 6"
105890,1 2 3 4 5 6
105891,>>> import sys
105892,">>> print(1, 2, 3, file=sys.stderr, end="" ""); print(4, 5, 6, file=sys.stderr)"
105893,1 2 3 4 5 6
105894,">>> print ""Hello!"""
105895,"  File ""<stdin>"", line 1"
105896,"    print ""Hello!"""
105897,                 ^
105898,"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""Hello!"")?"
105899,TypeError
105900,>>> print >> sys.stderr
105901,Traceback (most recent call last):
105902,"  File ""<stdin>"", line 1, in <module>"
105903,"TypeError: unsupported operand type(s) for >>: 'builtin_function_or_method' and '_io.TextIOWrapper'. Did you mean ""print(<message>, file=<output_stream>)""?"
105904,<message>
105905,<output_stream>
105906,"print(""Hello, World!"")"
105907,antigravity
105908,"print ""Hello, World!"" "
105909,"print(""Hello, World!"")"
105910,print
105911,print
105912,">>> items = ['foo', 'bar', 'baz']"
105913,">>> print(*items, sep='+')"
105914,foo+bar+baz
105915,from __future__ import print_function   # If code has to work in Python 2 and 3!
105916,"print(""python"")"
105917,"for number in range(0, 10):"
105918,"    print(number, end=', ')"
105919,"print(""STRING"")"
105920,Python2.7
105921,Python3
105922,"print(""string"")"
105923,"print(f""string"")"
105924,python2.7
105925,"print('Hello, World!')"
105926,"print ""text"""
105927,"print(""text"")"
105928,"from trp import BoundingBox, Document"
105929,"File ""C:\Users\Kshitij Agarwal\AppData\Roaming\Python\Python39\site-packages\trp\__init__.py"", line 31"
105930,print ip
105931,      ^ 
105932,SyntaxError: Missing parentheses in call to 'print'. Did you mean print(ip)?
105933,print something
105934,print(something)
105935,pip install 2to3
105936,2to3 . -w
105937,"for current, next in zip(the_list, the_list[1:]):"
105938,    # Do something
105939,next
105940,import itertools
105941,def pairwise(iterable):
105942,"    ""s -> (s0, s1), (s1, s2), (s2, s3), ..."""
105943,"    a, b = itertools.tee(iterable)"
105944,"    next(b, None)"
105945,"    return zip(a, b)   "
105946,itertools.izip
105947,zip
105948,import itertools
105949,def pairwise(iterable):
105950,"    ""s -> (s0, s1), (s1, s2), (s2, s3), ..."""
105951,"    a, b = itertools.tee(iterable)"
105952,"    next(b, None)"
105953,"    return itertools.izip(a, b)"
105954,a
105955,b
105956,tee()
105957,b
105958,"next(b, None)"
105959,a
105960,b
105961,a
105962,b
105963,tee()
105964,tee()
105965,tee()
105966,n
105967,def threes(iterator):
105968,"    ""s -> (s0, s1, s2), (s1, s2, s3), (s2, s3, 4), ..."""
105969,"    a, b, c = itertools.tee(iterator, 3)"
105970,"    next(b, None)"
105971,"    next(c, None)"
105972,"    next(c, None)"
105973,"    return zip(a, b, c)"
105974,"zip(ł, ł[1:])"
105975,funcy
105976,funcy.pairwise
105977,pairwise
105978,itertools
105979,pairwise
105980,windowed
105981,consume
105982,threes
105983,next
105984,tee
105985,"teed_iters = itertools.tee(iterator, n)"
105986,"for i, it in enumerate(teed_iters): consume(it, i)"
105987,return zip(*teed_iters)
105988,def pairwise(iterable):
105989,    it = iter(iterable)
105990,"    a = next(it, None)"
105991,
105992,    for b in it:
105993,"        yield (a, b)"
105994,        a = b
105995,itertools.pairwise
105996,pairwise
105997,from itertools import pairwise
105998,
105999,"list(pairwise([1, 2, 3, 4, 5]))"
106000,"# [(1, 2), (2, 3), (3, 4), (4, 5)]"
106001,"pairwise([1, 2, 3, 4, 5])"
106002,list
106003,"for (index, thing) in enumerate(the_list):"
106004,    if index < len(the_list):
106005,"        current, next_ = thing, the_list[index + 1]"
106006,        #do something
106007,if
106008,"for (index, thing) in enumerate(the_list[:-1]): current, next_ = thing, the_list[index + 1]"
106009,the_list[1:]
106010,zip()
106011,"from itertools import izip, islice"
106012,"for current_item, next_item in izip(the_list, islice(the_list, 1, None)):"
106013,"    print(current_item, next_item)"
106014,the_list[1:]
106015,[1:]
106016,1:
106017,__slice__
106018,l_copy = l[:]
106019,l_copy = list(l)
106020,__slice__
106021,the_list[1:]
106022,"the_list[slice(1, None)]"
106023,"list.__getitem__(the_list, slice(1, None))"
106024,the_list[1:]
106025,zip()
106026,tuple
106027,[1:]
106028,#!/usr/bin/python
106029,"the_list = [1, 2, 3, 4]"
106030,for i in xrange(len(the_list) - 1):
106031,"    current_item, next_item = the_list[i], the_list[i + 1]"
106032,"    print(current_item, next_item)"
106033,"(1, 2)"
106034,"(2, 3)"
106035,"(3, 4)"
106036,i
106037,from itertools import islice
106038,
106039,"def n_wise(iterable, n):"
106040,"    return zip(*(islice(iterable, i, None) for i in range(n)))"
106041,"from itertools import izip, islice"
106042,
106043,"def n_wise(iterable, n):"
106044,"    return izip(*(islice(iterable, i, None) for i in xrange(n)))"
106045,n=2
106046,">>> for a, b in n_wise('Hello!', 2):"
106047,">>>     print(a, b)"
106048,H e
106049,e l
106050,l l
106051,l o
106052,o !
106053,
106054,">>> for a, b, c, d in n_wise('Hello World!', 4):"
106055,">>>     print(a, b, c, d)"
106056,H e l l
106057,e l l o
106058,l l o
106059,l o   W
106060,o   W o
106061,  W o r
106062,W o r l
106063,o r l d
106064,r l d !
106065,from more_itertools import pairwise
106066,"for current, next in pairwise(your_iterable):"
106067,"  print(f'Current = {current}, next = {nxt}')"
106068,pip install more-itertools
106069,from more_itertools import pairwise
106070,"fib= [1,1,2,3,5,8,13]"
106071,"for current, nxt in pairwise(fib):"
106072,    ratio=current/nxt
106073,"    print(f'Curent = {current}, next = {nxt}, ratio = {ratio} ')"
106074,more_itertools
106075,itertools.pairwise()
106076,def pairwise(iterable):
106077,  a = next(iterable)
106078,"  yield from ((a, a := b) for b in iterable)"
106079,def neighbors( list ):
106080,  i = 0
106081,  while i + 1 < len( list ):
106082,"    yield ( list[ i ], list[ i + 1 ] )"
106083,    i += 1
106084,
106085,"for ( x, y ) in neighbors( list ):"
106086,"  print( x, y )"
106087,"the_list = [1, 2, 3, 4]"
106088,"pairs = [[the_list[i], the_list[i + 1]] for i in range(len(the_list) - 1)]"
106089,"for [current_item, next_item] in pairs:"
106090,"    print(current_item, next_item)"
106091,"(1, 2)"
106092,"(2, 3)"
106093,"(3, 4)"
106094,code = '0016364ee0942aa7cc04a8189ef3'
106095,# Getting the current and next item
106096,print  [code[idx]+code[idx+1] for idx in range(len(code)-1)]
106097,# Getting the pair
106098,print  [code[idx*2]+code[idx*2+1] for idx in range(len(code)/2)]
106099,import matplotlib.pyplot as plt
106100,import csv
106101,import os
106102,from dateutil import parser
106103,
106104,"def plot(outputDir,plotsDir,FS):"
106105,    allfiles = os.listdir(outputDir)
106106,    flist = []
106107,    for f in allfiles:
106108,        if 'csv' in f.lower(): flist.append(f)
106109,    for f in flist:
106110,"        with open(outputDir + '/' + f, 'rt') as ff:"
106111,"            data = list(csv.reader(ff,delimiter=FS))"
106112,        values = [i[2] for i in data[1::]]
106113,        values = ['NaN' if v is '' else v for v in values]
106114,        time = [parser.parse(i[1]) for i in data[1::]]
106115,        plt.xlabel('Time_[UTC]')
106116,"        plt.plot(time, values)"
106117,        plt.xticks(rotation=40)
106118,        if os.path.isdir(plotsDir) != 1:
106119,"            os.mkdir(plotsDir, 777)"
106120,"        plt.savefig('{}/{}_Data.png'.format(plotsDir, f[:-4]), bbox_inches='tight', dpi=160)"
106121,        plt.clf()
106122,
106123,
106124,outputdir = 'C:/Users/matthijsk/Documents/Test'
106125,plotsdir = outputdir + '/plots'
106126,"fs = ','"
106127,"plot(outputdir, plotsdir, fs)"
106128,"stationNo,dtg(UTC),TT_[°C],source_TT,quality_TT"
106129,"10381,2017-01-01 00:00:00,3.0,ob,na"
106130,"10381,2017-01-01 01:00:00,3.0,ob,na"
106131,"10381,2017-01-01 02:00:00,2.4,ob,na"
106132,"10381,2017-01-01 03:00:00,2.5,ob,na"
106133,"10381,2017-01-01 04:00:00,2.5,ob,na"
106134,"10381,2017-01-01 05:00:00,2.3,ob,na"
106135,"10381,2017-01-01 06:00:00,1.9,ob,na"
106136,"10381,2017-01-01 07:00:00,1.0,ob,na"
106137,"10381,2017-01-01 08:00:00,0.1,ob,na"
106138,"10381,2017-01-01 09:00:00,0.9,ob,na"
106139,values = [float(value) if value.isnumeric() else None for value in values]
106140,"plt.plot([""apple"", ""banana"", ""cherry""], [2,1,3])"
106141,values = [None if v is '' else float(v) for v in values]
106142,np.array(values).astype(float)
106143,numpy.loadtxt
106144,pandas.read_csv
106145,string.find()
106146,string.rfind()
106147,string.find_all()
106148,"string = ""test test test test"""
106149,
106150,print string.find('test') # 0
106151,print string.rfind('test') # 15
106152,
106153,#this is the goal
106154,"print string.find_all('test') # [0,5,10,15]"
106155,'ttt'.find_all('tt')
106156,'ttt'.rfind_all('tt')
106157,import re
106158,"[m.start() for m in re.finditer('test', 'test test test test')]"
106159,"#[0, 5, 10, 15]"
106160,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]"
106161,"#[0, 1]"
106162,search = 'tt'
106163,"[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]"
106164,#[1]
106165,re.finditer
106166,[]
106167,()
106168,"[m.start() for m in re.finditer(re.escape(search_str), input_str)]"
106169,>>> help(str.find)
106170,Help on method_descriptor:
106171,
106172,find(...)
106173,"    S.find(sub [,start [,end]]) -> int"
106174,"def find_all(a_str, sub):"
106175,    start = 0
106176,    while True:
106177,"        start = a_str.find(sub, start)"
106178,        if start == -1: return
106179,        yield start
106180,        start += len(sub) # use start += 1 to find overlapping matches
106181,
106182,"list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]"
106183,start += len(sub)
106184,start += 1
106185,re.findall
106186,len(sub) or 1
106187,len(sub)
106188,re.finditer
106189,import re
106190,"sentence = input(""Give me a sentence "")"
106191,"word = input(""What word would you like to find "")"
106192,"for match in re.finditer(word, sentence):"
106193,"    print (match.start(), match.end())"
106194,"word = ""this"""
106195,"sentence = ""this is a sentence this this"""
106196,"(0, 4)"
106197,"(19, 23)"
106198,"(24, 28)"
106199,">>> string = ""test test test test"""
106200,">>> [i for i in range(len(string)) if string.startswith('test', i)]"
106201,"[0, 5, 10, 15]"
106202,str.find
106203,"def findall(p, s):"
106204,    '''Yields all the positions of
106205,    the pattern p in the string s.'''
106206,    i = s.find(p)
106207,    while i != -1:
106208,        yield i
106209,"        i = s.find(p, i+1)"
106210,x = 'banananassantana'
106211,"[(i, x[i:i+2]) for i in findall('na', x)]"
106212,"[(2, 'na'), (4, 'na'), (6, 'na'), (14, 'na')]"
106213,re.finditer
106214,310 ns ± 5.35 ns per loop
106215,str.find
106216,799 ns ± 5.72 ns per loop
106217,re.finditer
106218,str.replace
106219,re.sub
106220,overlapping=True
106221,i+1
106222,i + (1 if overlapping else len(p))
106223,re.finditer()
106224,>>> import re
106225,">>> aString = 'this is a string where the substring ""is"" is repeated several times'"
106226,">>> print [(a.start(), a.end()) for a in list(re.finditer('is', aString))]"
106227,"[(2, 4), (5, 7), (38, 40), (42, 44)]"
106228,"In [1]: aString=""ababa"""
106229,
106230,"In [2]: print [(a.start(), a.end()) for a in list(re.finditer('aba', aString))]"
106231,"Output: [(0, 3)]"
106232,"def locations_of_substring(string, substring):"
106233,"    """"""Return a list of locations of a substring."""""""
106234,
106235,    substring_length = len(substring)    
106236,"    def recurse(locations_found, start):"
106237,"        location = string.find(substring, start)"
106238,        if location != -1:
106239,"            return recurse(locations_found + [location], location+substring_length)"
106240,        else:
106241,            return locations_found
106242,
106243,"    return recurse([], 0)"
106244,
106245,"print(locations_of_substring('this is a test for finding this and this', 'this'))"
106246,"# prints [0, 27, 36]"
106247,RecursionError
106248,"string = ""dooobiedoobiedoobie"""
106249,match = 'o'
106250,"reduce(lambda count, char: count + 1 if char == match else count, string, 0)"
106251,# produces 7
106252,"string = ""test test test test"""
106253,"match = ""test"""
106254,len(string.split(match)) - 1
106255,# produces 4
106256,"def find_all(a_string, sub):"
106257,    result = []
106258,    k = 0
106259,    while k < len(a_string):
106260,"        k = a_string.find(sub, k)"
106261,        if k == -1:
106262,            return result
106263,        else:
106264,            result.append(k)
106265,            k += 1 #change to k += len(sub) to not search overlapping results
106266,    return result
106267,import re
106268,
106269,text = 'This is sample text to test if this pythonic '\
106270,       'program can serve as an indexing platform for '\
106271,       'finding words in a paragraph. It can give '\
106272,       'values as to where the word is located with the '\
106273,       'different examples as stated'
106274,
106275,#  find all occurances of the word 'as' in the above text
106276,
106277,"find_the_word = re.finditer('as', text)"
106278,
106279,for match in find_the_word:
106280,"    print('start {}, end {}, search string \'{}\''."
106281,"          format(match.start(), match.end(), match.group()))"
106282,"numberString = ""onetwothreefourfivesixseveneightninefiveten"""
106283,"testString = ""five"""
106284,
106285,marker = 0
106286,while marker < len(numberString):
106287,    try:
106288,"        print(numberString.index(""five"",marker))"
106289,"        marker = numberString.index(""five"", marker) + 1"
106290,    except ValueError:
106291,"        print(""String not found"")"
106292,        marker = len(numberString)
106293,">>> string = ""test test test test"""
106294,">>> for index,value in enumerate(string):"
106295,"    if string[index:index+(len(""test""))] == ""test"":"
106296,        print index
106297,
106298,0
106299,5
106300,10
106301,15
106302,from flashtext import KeywordProcessor
106303,"words = ['test', 'exam', 'quiz']"
106304,txt = 'this is a test'
106305,kwp = KeywordProcessor()
106306,kwp.add_keywords_from_list(words)
106307,"result = kwp.extract_keywords(txt, span_info=True)"
106308,"def findAll(string,word):"
106309,    all_positions=[]
106310,    next_pos=-1
106311,    while True:
106312,"        next_pos=string.find(word,next_pos+1)"
106313,        if(next_pos<0):
106314,            break
106315,        all_positions.append(next_pos)
106316,    return all_positions
106317,"result=findAll('this word is a big word man how many words are there?','word')"
106318,"def find_all(string,substring):"
106319,"    """""""
106320,    Function: Returning all the index of substring in a string
106321,    Arguments: String and the search string
106322,    Return:Returning a list
106323,"    """""""
106324,    length = len(substring)
106325,    c=0
106326,    indexes = []
106327,    while c < len(string):
106328,        if string[c:c+length] == substring:
106329,            indexes.append(c)
106330,        c=c+1
106331,    return indexes
106332,class newstr(str):
106333,"def find_all(string,substring):"
106334,"    """""""
106335,    Function: Returning all the index of substring in a string
106336,    Arguments: String and the search string
106337,    Return:Returning a list
106338,"    """""""
106339,    length = len(substring)
106340,    c=0
106341,    indexes = []
106342,    while c < len(string):
106343,        if string[c:c+length] == substring:
106344,            indexes.append(c)
106345,        c=c+1
106346,    return indexes
106347,src = input() # we will find substring in this string
106348,sub = input() # substring
106349,
106350,res = []
106351,pos = src.find(sub)
106352,while pos != -1:
106353,    res.append(pos)
106354,"    pos = src.find(sub, pos + 1)"
106355,import re
106356,"str1 = ""This dress looks good; you have good taste in clothes."""
106357,"substr = ""good"""
106358,"result = [_.start() for _ in re.finditer(substr, str1)]"
106359,"# result = [17, 32]"
106360,"mystring = 'Hello World, this should work!'"
106361,"find_all = lambda c,s: [x for x in range(c.find(s), len(c)) if c[x] == s]"
106362,
106363,# s represents the search string
106364,# c represents the character string
106365,
106366,"find_all(mystring,'o')    # will return all positions of 'o'"
106367,
106368,"[4, 7, 20, 26] "
106369,>>> 
106370,lambda
106371,import re
106372,a = input()
106373,b = input()
106374,if b not in a:
106375,"    print((-1,-1))"
106376,else:
106377,    #create two list as
106378,"    start_indc = [m.start() for m in re.finditer('(?=' + b + ')', a)]"
106379,    for i in range(len(start_indc)):
106380,"        print((start_indc[i], start_indc[i]+len(b)-1))"
106381,aaadaa
106382,aa
106383,"(0, 1)"
106384,"(1, 2)"
106385,"(4, 5)"
106386,import numpy as np
106387,
106388,"S= ""test test test test"""
106389,S2 = 'test'
106390,inds = np.cumsum([len(k)+len(S2) for k in S.split(S2)[:-1]])- len(S2)
106391,print(inds)
106392,"find_all = lambda _str,_w : [ i for i in range(len(_str)) if _str.startswith(_w,i) ]"
106393,
106394,"string = ""test test test test"""
106395,"print( find_all(string, 'test') ) # >>> [0, 5, 10, 15]"
106396,"string = ""test test test test"""
106397,"phrase = ""test"""
106398,start = -1
106399,"result = [(start := string.find(phrase, start + 1)) for _ in range(string.count(phrase))]"
106400,"[0, 5, 10, 15]"
106401,#!/usr/bin/env python
106402,# coding:utf-8
106403,'''黄哥Python'''
106404,
106405,
106406,"def get_substring_indices(text, s):"
106407,"    result = [i for i in range(len(text)) if text.startswith(s, i)]"
106408,    return result
106409,
106410,
106411,if __name__ == '__main__':
106412,"    text = ""How much wood would a wood chuck chuck if a wood chuck could chuck wood?"""
106413,    s = 'wood'
106414,"    print get_substring_indices(text, s)"
106415,"def find_index(string, let):"
106416,"    enumerated = [place  for place, letter in enumerate(string) if letter == let]"
106417,    return enumerated
106418,"find_index(""hey doode find d"", ""d"") "
106419,"[4, 7, 13, 15]"
106420,"print(find_index('test test test test', 'test'))"
106421,# Extract all non-substrings
106422,"s = ""an-example-string"""
106423,s_no_dash = s.split('-')
106424,# >>> s_no_dash
106425,"# ['an', 'example', 'string']"
106426,
106427,# Or extract and join them into a sentence
106428,s_no_dash2 = ' '.join(s.split('-'))
106429,# >>> s_no_dash2
106430,# 'an example string'
106431,"def count_substring(string, sub_string):"
106432,    c=0
106433,"    for i in range(0,len(string)-2):"
106434,        if string[i:i+len(sub_string)] == sub_string:
106435,            c+=1
106436,    return c
106437,
106438,if __name__ == '__main__':
106439,    string = input().strip()
106440,    sub_string = input().strip()
106441,    
106442,"    count = count_substring(string, sub_string)"
106443,    print(count)
106444,"for i in range(0,len(string)+1-len(sub_string)):"
106445,hw = 'Hello oh World!'
106446,list_hw = list(hw)
106447,o_in_hw = []
106448,
106449,while True:
106450,    o = hw.find('o')
106451,    if o != -1:
106452,        o_in_hw.append(o)
106453,        list_hw[o] = ' '
106454,        hw = ''.join(list_hw)
106455,    else:
106456,        print(o_in_hw)
106457,        break
106458,def count(string):
106459,   result = {}
106460,   if(string):
106461,     for i in string:
106462,       result[i] = string.count(i)
106463,     return result
106464,   return {}
106465,from collections import Counter
106466,
106467,   def count(string):
106468,      return Counter(string)
106469,x=input('enter the string')
106470,y=input('enter the substring')
106471,"z,r=x.find(y),x.rfind(y)"
106472,while z!=r:
106473,"        print(z,r,end=' ')"
106474,        z=z+len(y)
106475,        r=r-len(y)
106476,"        z,r=x.find(y,z,r),x.rfind(y,z,r)"
106477,count
106478,s=input()
106479,n=len(s)
106480,l=[]
106481,f=input()
106482,print(s[0])
106483,"for i in range(0,n):"
106484,"    for j in range(1,n+1):"
106485,        l.append(s[i:j])
106486,if f in l:
106487,    print(l.count(f))
106488,"s=""test test test test"""
106489,"f=""test"""
106490,4
106491,"[0,5,10,15]"
106492,">>> d = datetime.date(2011,01,01)"
106493,>>> datetime.datetime.utcfromtimestamp(time.mktime(d.timetuple()))
106494,"datetime.datetime(2010, 12, 31, 23, 0)"
106495,"from pytz import utc, timezone"
106496,from datetime import datetime
106497,from time import mktime
106498,"input_date = datetime(year=2011, month=1, day=15)"
106499,mktime(utc.localize(input_date).utctimetuple())
106500,mktime(timezone('US/Eastern').localize(input_date).utctimetuple())
106501,datetime.date
106502,"d = date(2011, 1, 1)"
106503,">>> from datetime import datetime, date"
106504,>>> import calendar
106505,>>> timestamp1 = calendar.timegm(d.timetuple())
106506,>>> datetime.utcfromtimestamp(timestamp1)
106507,"datetime.datetime(2011, 1, 1, 0, 0)"
106508,d
106509,>>> import time
106510,>>> timestamp2 = time.mktime(d.timetuple()) # DO NOT USE IT WITH UTC DATE
106511,>>> datetime.fromtimestamp(timestamp2)
106512,"datetime.datetime(2011, 1, 1, 0, 0)"
106513,timestamp1
106514,timestamp2
106515,mktime()
106516,d
106517,d
106518,mktime()
106519,pytz
106520,tzlocal.get_localzone()
106521,utcfromtimestamp()
106522,mktime()
106523,"""right"""
106524,datetime.date
106525,calendar.timegm()
106526,DAY = 24*60*60 # POSIX day in seconds (exact value)
106527,"timestamp = (utc_date.toordinal() - date(1970, 1, 1).toordinal()) * DAY"
106528,"timestamp = (utc_date - date(1970, 1, 1)).days * DAY"
106529,datetime.datetime
106530,datetime.date
106531,float
106532,datetime.timestamp()
106533,from datetime import timezone
106534,
106535,timestamp = dt.replace(tzinfo=timezone.utc).timestamp()
106536,timezone.utc
106537,.timestamp()
106538,datetime.utcfromtimestamp()
106539,"timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)"
106540,"timestamp = (dt - datetime(1970,1,1, tzinfo=timezone.utc)) / timedelta(seconds=1)"
106541,"timestamp = (dt - datetime(1970, 1, 1)).total_seconds()"
106542,timedelta.total_seconds()
106543,(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6
106544,from __future__ import division
106545,"from datetime import datetime, timedelta"
106546,
106547,"def totimestamp(dt, epoch=datetime(1970,1,1)):"
106548,    td = dt - epoch
106549,    # return td.total_seconds()
106550,    return (td.microseconds + (td.seconds + td.days * 86400) * 10**6) / 10**6 
106551,
106552,now = datetime.utcnow()
106553,print now
106554,print totimestamp(now)
106555,2012-01-08 15:34:10.022403
106556,1326036850.02
106557,datetime
106558,assert dt.tzinfo is not None and dt.utcoffset() is not None
106559,timestamp = dt.timestamp() # Python 3.3+
106560,"from datetime import datetime, timedelta, timezone"
106561,
106562,"epoch = datetime(1970, 1, 1, tzinfo=timezone.utc)"
106563,timestamp = (dt - epoch) / timedelta(seconds=1)
106564,integer_timestamp = (dt - epoch) // timedelta(seconds=1)
106565,# utc time = local time              - utc offset
106566,utc_naive  = dt.replace(tzinfo=None) - dt.utcoffset()
106567,"timestamp = (utc_naive - datetime(1970, 1, 1)).total_seconds()"
106568,timestamp = (dt - datetime.fromtimestamp(0)).total_seconds()
106569,"datetime(1970, 1, 1)"
106570,fromtimestamp()
106571,dt
106572,utcfromtimestamp()
106573,totimestamp()
106574,>>> import datetime
106575,">>> d = datetime.date(2011, 1, 1)"
106576,">>> d.strftime(""%s"")  # <-- THIS IS THE CODE YOU WANT"
106577,'1293832800'
106578,man strftime
106579,timetuple()
106580,"dtt = d.timetuple() # time.struct_time(tm_year=2011, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=1, tm_isdst=-1)"
106581,time.mktime
106582,ts = time.mktime(dtt) # 1293868800.0
106583,"d = datetime.date(1970,1,1)"
106584,"dtt = d.timetuple() # time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=-1)"
106585,ts = time.mktime(dtt) # 28800.0
106586,28800.0
106587,import time
106588,import datetime
106589,from pytz import timezone
106590,import calendar
106591,import pytz
106592,
106593,
106594,"def utc_time2datetime(utc_time, tz=None):"
106595,    # convert utc time to utc datetime
106596,    utc_datetime = datetime.datetime.fromtimestamp(utc_time)
106597,
106598,    # add time zone to utc datetime
106599,    if tz is None:
106600,        tz_datetime = utc_datetime.astimezone(timezone('utc'))
106601,    else:
106602,        tz_datetime = utc_datetime.astimezone(tz)
106603,
106604,    return tz_datetime
106605,
106606,
106607,def datetime2utc_time(datetime):
106608,    # add utc time zone if no time zone is set
106609,    if datetime.tzinfo is None:
106610,        datetime = datetime.replace(tzinfo=timezone('utc'))
106611,
106612,    # convert to utc time zone from whatever time zone the datetime is set to
106613,    utc_datetime = datetime.astimezone(timezone('utc')).replace(tzinfo=None)
106614,
106615,    # create a time tuple from datetime
106616,    utc_timetuple = utc_datetime.timetuple()
106617,
106618,    # create a time element from the tuple an add microseconds
106619,    utc_time = calendar.timegm(utc_timetuple) + datetime.microsecond / 1E6
106620,
106621,    return utc_time
106622,datetime
106623,datetime2utc_time(datetime)
106624,datetime
106625,">>> d = datetime.date(2011,01,01)"
106626,>>> datetime.datetime.utcfromtimestamp(calendar.timegm(d.timetuple()))
106627,"datetime.datetime(2011, 1, 1, 0, 0)"
106628,d
106629,[+HHMM or -HHMM]
106630,1970-01-01 06:00:00 +0500
106631,1970-01-01 01:00:00 +0000
106632,UNIX timestamp:3600
106633,$ python3
106634,>>> from datetime import datetime
106635,>>> from calendar import timegm
106636,>>> tm = '1970-01-01 06:00:00 +0500'
106637,>>> fmt = '%Y-%m-%d %H:%M:%S %z'
106638,">>> timegm(datetime.strptime(tm, fmt).utctimetuple())"
106639,3600
106640,UNIX timestamp
106641,$ python3
106642,">>> from datetime import datetime, timezone, timedelta"
106643,>>> from calendar import timegm
106644,">>> dt = datetime(1970, 1, 1, 6, 0)"
106645,>>> tz = timezone(timedelta(hours=5))
106646,>>> timegm(dt.replace(tzinfo=tz).utctimetuple())
106647,3600
106648,1970-01-01 06:00:00 +0500
106649,3600
106650,timezone
106651,python2
106652,06:00:00
106653,+0500
106654,01:00:00
106655,>>> import arrow
106656,">>> arrow.get(2010, 12, 31).timestamp"
106657,1293753600
106658,>>> time.gmtime(1293753600)
106659,"time.struct_time(tm_year=2010, tm_mon=12, tm_mday=31, "
106660,"    tm_hour=0, tm_min=0, tm_sec=0, "
106661,"    tm_wday=4, tm_yday=365, tm_isdst=0)"
106662,arrow
106663,dateutil
106664,dateutil
106665,">>> SimpleDate(date(2011,1,1), tz='utc').timestamp"
106666,1293840000.0
106667,date
106668,">>> SimpleDate(2011,1,1, tz='utc').timestamp"
106669,1293840000.0
106670,">>> SimpleDate(date(2011,1,1), tz='America/New_York').timestamp"
106671,1293858000.0
106672,">>> SimpleDate(1293858000, tz='utc').date"
106673,"datetime.date(2011, 1, 1)"
106674,"SimpleDate(date(2011,1,1), tz='America/New_York')"
106675,NoTimezone
106676,pytz.timezone('America/New_York')
106677,simple-date==0.4.8
106678,pytz==2014.7
106679,pip install simple-date
106680,datetime
106681,d
106682,"d.strftime(""%Y-%m-%dT%H:%M:%S.%fZ"")"
106683,"d = datetime.strptime(""2008-09-03T20:56:35.450686Z"", ""%Y-%m-%dT%H:%M:%S.%fZ"")"
106684,"from datetime import timezone, datetime, timedelta "
106685,import datetime
106686,
106687,
106688,def utc_converter(dt):
106689,    dt = datetime.datetime.now(timezone.utc)
106690,    utc_time = dt.replace(tzinfo=timezone.utc)
106691,    utc_timestamp = utc_time.timestamp()
106692,    return utc_timestamp
106693,
106694,
106695,
106696,# create start and end timestamps
106697,_now = datetime.datetime.now()
106698,str_start = str(utc_converter(_now))
106699,_end = _now + timedelta(seconds=10)
106700,str_end = str(utc_converter(_end))
106701,from datetime import datetime
106702,import time
106703,timestamp = \
106704,"    (datetime.utcnow() - datetime(1970,1,1)).total_seconds()"
106705,timestamp = time.time()
106706,utcoffset = (datetime.now() - datetime.utcnow()).total_seconds()
106707,timestamp = \
106708,"    (now - datetime(1970,1,1)).total_seconds() - utcoffset"
106709,l  = range(100)                         
106710,for i in l:                         
106711,"    print i,                         "
106712,"    print l.pop(0),                  "
106713,    print l.pop(0)
106714,while
106715,i = 0
106716,while i < len(some_list):
106717,"    print i,                         "
106718,"    print some_list.pop(0),                  "
106719,    print some_list.pop(0)
106720,pop
106721,0
106722,"for i, x in enumerate(container):"
106723,next
106724,mylist[::3]
106725,mylist = [i for i in range(100)]
106726,for i in mylist[::3]:
106727,    print(i)
106728,list(range(100))
106729,for i in range(100)[::3]:
106730,"range(0, 100, 3)"
106731,"xrange(0, 100, 3)"
106732,while array:
106733,    value = array.pop(0)
106734,    # do some calculation here
106735,"for i in xrange(0, 100, 3):"
106736,    print i
106737,xrange
106738,l  = range(100)  
106739,index = 0                       
106740,for i in l:                         
106741,"    print i,              "
106742,    try:
106743,"        print l.pop(index+1),                  "
106744,        print l.pop(index+1)
106745,    except IndexError:
106746,        pass
106747,    index += 1
106748,l  = range(100)  
106749,for i in l[:]:  
106750,"    print i,  "
106751,"    print l.pop(0),  "
106752,    print l.pop(0)
106753,"Monkey patching is a technique to add, modify, or suppress the default behavior of a piece of code at runtime without changing its original source code."
106754,get_data
106755,get_data
106756,get_data
106757,get_data
106758,get_data
106759,get_data
106760,pointing to the original get_data function
106761,get_data
106762,get_data
106763,get_data
106764,from SomeOtherProduct.SomeModule import SomeClass
106765,
106766,def speak(self):
106767,"    return ""ook ook eee eee eee!"""
106768,
106769,SomeClass.speak = speak
106770,import pandas as pd
106771,def just_foo_cols(self):
106772,"    """"""Get a list of column names containing the string 'foo'"
106773,
106774,"    """""""
106775,    return [x for x in self.columns if 'foo' in x]
106776,
106777,pd.DataFrame.just_foo_cols = just_foo_cols # monkey-patch the DataFrame class
106778,"df = pd.DataFrame([list(range(4))], columns=[""A"",""foo"",""foozball"",""bar""])"
106779,df.just_foo_cols()
106780,del pd.DataFrame.just_foo_cols # you can also remove the new method
106781,import pandas as pd
106782,def just_foo_cols(self):
106783,"    """"""Get a list of column names containing the string 'foo'"
106784,
106785,"    """""""
106786,    return [x for x in self.columns if 'foo' in x]
106787,pd.DataFrame.just_foo_cols = just_foo_cols # monkey-patch the DataFrame class
106788,"df = pd.DataFrame([list(range(4))], columns=[""A"",""foo"",""foozball"",""bar""])"
106789,df.just_foo_cols()
106790,del pd.DataFrame.just_foo_cols # you can also remove the new method
106791,import datasource
106792,
106793,def get_data(self):
106794,    '''monkey patch datasource.Structure with this to simulate error'''
106795,    raise datasource.DataRetrievalError
106796,
106797,datasource.Structure.get_data = get_data
106798,Structure
106799,def setUp(self):
106800,    # retain a pointer to the actual real method:
106801,    self.real_get_data = datasource.Structure.get_data
106802,    # monkey patch it:
106803,    datasource.Structure.get_data = get_data
106804,
106805,def tearDown(self):
106806,    # give the real method back to the Structure object:
106807,    datasource.Structure.get_data = self.real_get_data
106808,mock
106809,mock
106810,patch
106811,mock
106812,import csv
106813,
106814,"with open('thefile.csv', 'rb') as f:"
106815,  data = list(csv.reader(f))
106816,  import collections
106817,  counter = collections.defaultdict(int)
106818,
106819,  for row in data:
106820,        counter[row[10]] += 1
106821,
106822,
106823,"with open('/pythonwork/thefile_subset11.csv', 'w') as outfile:"
106824,    writer = csv.writer(outfile)
106825,    for row in data:
106826,        if counter[row[10]] >= 504:
106827,           writer.writerow(row)
106828,thefile.csv
106829,thefile_subset1
106830,lineterminator='\n'
106831,csv.writer
106832,csv.writer
106833,\r\n
106834,"'w', newline=''"
106835,\r\r\n
106836,\n
106837,\r\n
106838,#!python3
106839,"with open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:"
106840,    writer = csv.writer(outfile)
106841,outfile
106842,'wb'
106843,'w'
106844,UnicodeReader
106845,UnicodeWriter
106846,#!python2
106847,"with open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:"
106848,    writer = csv.writer(outfile)
106849,io.open
106850,newlines
106851,io.open
106852,unicodecsv
106853,newline=''
106854,csv
106855,pathlib.Path
106856,open
106857,\r\r\n
106858,newline=''
106859,StringIO
106860,lineterminator
106861,flavor
106862,csv
106863,csv.writer()
106864,BytesIO
106865,\r\n
106866,"with open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:"
106867,\r\n
106868,\n
106869,\r\n
106870,\r\r\n
106871,lineterminator
106872,>>> import csv
106873,">>> spamWriter = csv.writer(open('eggs.csv', 'w'), lineterminator='\n')"
106874,>>> spamWriter.writerow(['Spam'] * 5 + ['Baked Beans'])
106875,">>> spamWriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])"
106876,csv.writer
106877,csv.reader
106878,newline=''
106879,newline=''
106880,"open('outputFile.csv', 'a',newline='')"
106881,newline=''
106882,open
106883,def writePhoneSpecsToCSV():
106884,"    rowData=[""field1"", ""field2""]"
106885,"    with open('outputFile.csv', 'a',newline='') as csv_file:"
106886,        writer = csv.writer(csv_file)
106887,        writer.writerow(rowData)
106888,PySerial
106889,'\r\n'
106890,newline=''
106891,"with open('op.csv', 'a',newline=' ') as csv_file:"
106892,
106893,ValueError: illegal newline value: ''
106894,"writer = csv.writer(csv_file, delimiter=' ',lineterminator='\r')"
106895,"with open('my_file.csv', 'a',newline='') as csvfile:"
106896,' '
106897,''
106898,"with open(destPath+'\\'+csvXML, 'a+') as csvFile:"
106899,"    writer = csv.writer(csvFile, delimiter=';', lineterminator='\r')"
106900,    writer.writerows(xmlList)
106901,io.TextIOWrapper
106902,from io import TextIOWrapper
106903,
106904,...
106905,
106906,"with open(filename, 'wb') as csvfile, TextIOWrapper(csvfile, encoding='utf-8', newline='') as wrapper:"
106907,    csvwriter = csv.writer(wrapper)
106908,    for data_row in data:
106909,        csvwriter.writerow(data_row)
106910,if
106911,"if sys.version_info < (3,):"
106912,    # Python 2 way of handling CSVs
106913,else:
106914,    # The above logic
106915,"def write_csv(writer, var1, var2, var3, var4):"
106916,"    """""""
106917,    write four variables into a csv file
106918,"    """""""
106919,"    writer.writerow([var1, var2, var3, var4])      "
106920,        
106921,"numbers=set([1,2,3,4,5,6,7,2,4,6,8,10,12,14,16])"
106922,"rules = list(permutations(numbers, 4))"
106923,#print(rules)
106924,selection=[]
106925,"with open(""count.csv"", 'w',newline='') as csvfile:"
106926,    writer = csv.writer(csvfile)
106927,
106928,    for rule in rules:
106929,"        number1,number2,number3,number4=rule"
106930,        if ((number1+number2+number3+number4)%5==0):
106931,            #print(rule)
106932,            selection.append(rule)
106933,"            write_csv(writer,number1,number2,number3,number4)"
106934,"with codecs.open( csv_file,  mode='w', encoding='utf-8') as out_csv:"
106935,     csv_out_file = csv.DictWriter(out_csv)
106936,f = open(file)
106937,for line in f:
106938,    if line.contains('foo'):
106939,"        newline = line.replace('foo', 'bar')"
106940,        # how to write this newline back to the file
106941,import fileinput
106942,
106943,"for line in fileinput.input(""test.txt"", inplace=True):"
106944,"    print('{} {}'.format(fileinput.filelineno(), line), end='') # for Python 3"
106945,"    # print ""%d: %s"" % (fileinput.filelineno(), line), # for Python 2"
106946,print
106947,fileinput
106948,sys.args[1:]
106949,with
106950,fileinput
106951,from tempfile import mkstemp
106952,"from shutil import move, copymode"
106953,"from os import fdopen, remove"
106954,
106955,"def replace(file_path, pattern, subst):"
106956,    #Create temp file
106957,"    fh, abs_path = mkstemp()"
106958,"    with fdopen(fh,'w') as new_file:"
106959,        with open(file_path) as old_file:
106960,            for line in old_file:
106961,"                new_file.write(line.replace(pattern, subst))"
106962,    #Copy the file permissions from the old file to the new file
106963,"    copymode(file_path, abs_path)"
106964,    #Remove original file
106965,    remove(file_path)
106966,    #Move new file
106967,"    move(abs_path, file_path)"
106968,file
106969,mkstemp()
106970,"(fh, abs_path) = fh, abs_path"
106971,import fileinput
106972,import sys
106973,
106974,"def replaceAll(file,searchExp,replaceExp):"
106975,"    for line in fileinput.input(file, inplace=1):"
106976,        if searchExp in line:
106977,"            line = line.replace(searchExp,replaceExp)"
106978,        sys.stdout.write(line)
106979,"replaceAll(""/fooBar.txt"",""Hello\sWorld!$"",""Goodbye\sWorld."")"
106980,searchExp in line
106981,line.replace
106982,"if searchExp in line: line = line.replace(searchExp, replaceExpr)"
106983,"line = line.replace(searchExp, replaceExpr)"
106984,sys.stdout.write(line)
106985,import fileinput
106986,
106987,"# Does a list of files, and"
106988,# redirects STDOUT to the file in question
106989,"for line in fileinput.input(files, inplace = 1): "
106990,"      print line.replace(""foo"", ""bar""),"
106991,files
106992,import re
106993,
106994,"def replace(file, pattern, subst):"
106995,    # Read contents from file as a single string
106996,"    file_handle = open(file, 'r')"
106997,    file_string = file_handle.read()
106998,    file_handle.close()
106999,
107000,    # Use RE package to allow for replacement (also allowing for (multiline) REGEX)
107001,"    file_string = (re.sub(pattern, subst, file_string))"
107002,
107003,    # Write contents to file.
107004,    # Using mode 'w' truncates the file.
107005,"    file_handle = open(file, 'w')"
107006,    file_handle.write(file_string)
107007,    file_handle.close()
107008,rb
107009,wb
107010,"fin = open(""a.txt"")"
107011,"fout = open(""b.txt"", ""wt"")"
107012,for line in fin:
107013,"    fout.write( line.replace('foo', 'bar') )"
107014,fin.close()
107015,fout.close()
107016,import re
107017,"def replace( filePath, text, subs, flags=0 ):"
107018,"    with open( filePath, ""r+"" ) as file:"
107019,        fileContents = file.read()
107020,"        textPattern = re.compile( re.escape( text ), flags )"
107021,"        fileContents = textPattern.sub( subs, fileContents )"
107022,        file.seek( 0 )
107023,        file.truncate()
107024,        file.write( fileContents )
107025,from tempfile import mkstemp
107026,from shutil import move
107027,from os import remove
107028,
107029,"def replace(source_file_path, pattern, substring):"
107030,"    fh, target_file_path = mkstemp()"
107031,"    with open(target_file_path, 'w') as target_file:"
107032,"        with open(source_file_path, 'r') as source_file:"
107033,            for line in source_file:
107034,"                target_file.write(line.replace(pattern, substring))"
107035,    remove(source_file_path)
107036,"    move(target_file_path, source_file_path)"
107037,fileinput
107038,import fileinput
107039,
107040,"def replace_in_file(file_path, search_text, new_text):"
107041,"    with fileinput.input(file_path, inplace=True) as file:"
107042,        for line in file:
107043,"            new_line = line.replace(search_text, new_text)"
107044,"            print(new_line, end='')"
107045,fileinput
107046,file_path
107047,with
107048,print
107049,inplace=True
107050,STDOUT
107051,end=''
107052,print
107053,file_path = '/path/to/my/file'
107054,"replace_in_file(file_path, 'old-text', 'new-text')"
107055,\xe8
107056,import codecs 
107057,
107058,from tempfile import mkstemp
107059,from shutil import move
107060,from os import remove
107061,
107062,
107063,"def replace(source_file_path, pattern, substring):"
107064,"    fh, target_file_path = mkstemp()"
107065,
107066,"    with codecs.open(target_file_path, 'w', 'utf-8') as target_file:"
107067,"        with codecs.open(source_file_path, 'r', 'utf-8') as source_file:"
107068,            for line in source_file:
107069,"                target_file.write(line.replace(pattern, substring))"
107070,    remove(source_file_path)
107071,"    move(target_file_path, source_file_path)"
107072,import re 
107073,
107074,"fin = open(""in.txt"", 'r') # in file"
107075,"fout = open(""out.txt"", 'w') # out file"
107076,for line in fin:
107077,"    p = re.compile('[-][0-9]*[.][0-9]*[,]|[-][0-9]*[,]') # pattern"
107078,"    newline = p.sub('',line) # replace matching strings with empty string"
107079,    print newline
107080,    fout.write(newline)
107081,fin.close()
107082,fout.close()
107083,"def replace(file, pattern, subst):"
107084,    #Create temp file
107085,"    fh, abs_path = mkstemp()"
107086,"    print fh, abs_path"
107087,"    new_file = open(abs_path,'w')"
107088,    old_file = open(file)
107089,    for line in old_file:
107090,"        new_file.write(line.replace(pattern, subst))"
107091,    #close temp file
107092,    new_file.close()
107093,    close(fh)
107094,    old_file.close()
107095,    #Remove original file
107096,    remove(file)
107097,    #Move new file
107098,"    move(abs_path, file)"
107099,pandas
107100,drop_duplicates
107101,take_last=True
107102,take_last=False
107103,    A   B   C
107104,0   foo 0   A
107105,1   foo 1   A
107106,2   foo 1   B
107107,3   bar 1   A
107108,A
107109,C
107110,import pandas as pd
107111,"df = pd.DataFrame({""A"":[""foo"", ""foo"", ""foo"", ""bar""], ""B"":[0,1,1,1], ""C"":[""A"",""A"",""B"",""A""]})"
107112,"df.drop_duplicates(subset=['A', 'C'], keep=False)"
107113,"df.reindex(df.iloc[:,[0,2]].drop_duplicates(keep=False).index)"
107114,"df.drop_duplicates(subset=[df.columns[0:2]], keep = False)"
107115,subset
107116,A
107117,keep=False
107118,keep
107119,first
107120,last
107121,drop_duplicates
107122,keep
107123,keep
107124,df.drop_duplicates(keep=False)
107125,"df.drop_duplicates(keep=False, inplace=False)"
107126,"df.drop_duplicates(keep=False, inplace=True)"
107127,DISTINCT *
107128,groupby
107129,filter
107130,import pandas as pd
107131,"df = pd.DataFrame({""A"":[""foo"", ""foo"", ""foo"", ""bar""], ""B"":[0,1,1,1], ""C"":[""A"",""A"",""B"",""A""]})"
107132,"df.groupby([""A"", ""C""]).filter(lambda df:df.shape[0] == 1)"
107133,"df = pd.DataFrame({""A"":[""foo"", ""foo"", ""foo"", ""bar"",""foo""], ""B"":[0,1,1,1,1], ""C"":[""A"",""A"",""B"",""A"",""A""]})"
107134,
107135,">>>df.drop_duplicates( ""A"" , keep='first')"
107136,>>>df.drop_duplicates( keep='first')
107137,>>>df.drop_duplicates( keep='last')
107138,In [335]:
107139,
107140,df['AC']=df.A+df.C
107141,In [336]:
107142,
107143,"print df.drop_duplicates('C', take_last=True) #this dataset is a special case, in general, one may need to first drop_duplicates by 'c' and then by 'a'."
107144,     A  B  C    AC
107145,2  foo  1  B  fooB
107146,3  bar  1  A  barA
107147,
107148,[2 rows x 4 columns]
107149,In [337]:
107150,
107151,print df.drop_duplicates('AC')
107152,     A  B  C    AC
107153,0  foo  0  A  fooA
107154,2  foo  1  B  fooB
107155,3  bar  1  A  barA
107156,
107157,[3 rows x 4 columns]
107158,In [352]:
107159,"DG=df.groupby(['A', 'C'])   "
107160,"print pd.concat([DG.get_group(item) for item, value in DG.groups.items() if len(value)==1])"
107161,     A  B  C
107162,2  foo  1  B
107163,3  bar  1  A
107164,
107165,[2 rows x 3 columns]
107166,"df.drop_duplicates(['A','C'])"
107167,df1
107168,df2
107169,df1
107170,df2
107171,df1
107172,df2
107173,df1
107174,     Name   Age 
107175,0     Tom    34
107176,1     Sara   18
107177,2     Eva    44
107178,3     Jack   27
107179,4     Laura  30
107180,
107181,df2
107182,     Name      Sex 
107183,0     Tom       M
107184,1     Paul      M
107185,2     Eva       F
107186,3     Jack      M
107187,4     Michelle  F
107188,df1
107189,NaN
107190,df2
107191,"df1 = pd.merge(df1, df2, on = 'Name', how = 'outer')"
107192,df2
107193,df1
107194,     Name   Age     Sex
107195,0     Tom    34      M
107196,1     Sara   18     NaN
107197,2     Eva    44      F
107198,3     Jack   27      M
107199,4     Laura  30     NaN
107200,Sample
107201,"df1 = pd.DataFrame({'Name': ['Tom', 'Sara', 'Eva', 'Jack', 'Laura'], "
107202,"                    'Age': [34, 18, 44, 27, 30]})"
107203,
107204,#print (df1)
107205,df3 = df1.copy()
107206,
107207,"df2 = pd.DataFrame({'Name': ['Tom', 'Paul', 'Eva', 'Jack', 'Michelle'], "
107208,"                    'Sex': ['M', 'M', 'F', 'M', 'F']})"
107209,#print (df2)
107210,map
107211,Series
107212,set_index
107213,df1['Sex'] = df1['Name'].map(df2.set_index('Name')['Sex'])
107214,print (df1)
107215,    Name  Age  Sex
107216,0    Tom   34    M
107217,1   Sara   18  NaN
107218,2    Eva   44    F
107219,3   Jack   27    M
107220,4  Laura   30  NaN
107221,merge
107222,"df = df3.merge(df2[['Name','Sex']], on='Name', how='left')"
107223,print (df)
107224,    Name  Age  Sex
107225,0    Tom   34    M
107226,1   Sara   18  NaN
107227,2    Eva   44    F
107228,3   Jack   27    M
107229,4  Laura   30  NaN
107230,Year
107231,Code
107232,merge
107233,"df1 = pd.DataFrame({'Name': ['Tom', 'Sara', 'Eva', 'Jack', 'Laura'], "
107234,"                    'Year':[2000,2003,2003,2004,2007],"
107235,"                    'Code':[1,2,3,4,4],"
107236,"                    'Age': [34, 18, 44, 27, 30]})"
107237,
107238,print (df1)
107239,    Name  Year  Code  Age
107240,0    Tom  2000     1   34
107241,1   Sara  2003     2   18
107242,2    Eva  2003     3   44
107243,3   Jack  2004     4   27
107244,4  Laura  2007     4   30
107245,
107246,"df2 = pd.DataFrame({'Name': ['Tom', 'Paul', 'Eva', 'Jack', 'Michelle'], "
107247,"                    'Sex': ['M', 'M', 'F', 'M', 'F'],"
107248,"                    'Year':[2001,2003,2003,2004,2007],"
107249,"                    'Code':[1,2,3,5,3],"
107250,"                    'Val':[21,34,23,44,67]})"
107251,print (df2)
107252,       Name Sex  Year  Code  Val
107253,0       Tom   M  2001     1   21
107254,1      Paul   M  2003     2   34
107255,2       Eva   F  2003     3   23
107256,3      Jack   M  2004     5   44
107257,4  Michelle   F  2007     3   67
107258,#merge by all columns
107259,"df = df1.merge(df2, on=['Year','Code'], how='left')"
107260,print (df)
107261,  Name_x  Year  Code  Age Name_y  Sex   Val
107262,0    Tom  2000     1   34    NaN  NaN   NaN
107263,1   Sara  2003     2   18   Paul    M  34.0
107264,2    Eva  2003     3   44    Eva    F  23.0
107265,3   Jack  2004     4   27    NaN  NaN   NaN
107266,4  Laura  2007     4   30    NaN  NaN   NaN
107267,
107268,"#specified columns - columns for join (Year, Code) need always + appended columns (Val)"
107269,"df = df1.merge(df2[['Year','Code', 'Val']], on=['Year','Code'], how='left')"
107270,print (df)
107271,    Name  Year  Code  Age   Val
107272,0    Tom  2000     1   34   NaN
107273,1   Sara  2003     2   18  34.0
107274,2    Eva  2003     3   44  23.0
107275,3   Jack  2004     4   27   NaN
107276,4  Laura  2007     4   30   NaN
107277,map
107278,Name
107279,"df1 = pd.DataFrame({'Name': ['Tom', 'Sara', 'Eva', 'Jack', 'Laura'], "
107280,"                    'Age': [34, 18, 44, 27, 30]})"
107281,
107282,print (df1)
107283,    Name  Age
107284,0    Tom   34
107285,1   Sara   18
107286,2    Eva   44
107287,3   Jack   27
107288,4  Laura   30
107289,
107290,"df3, df4 = df1.copy(), df1.copy()"
107291,
107292,"df2 = pd.DataFrame({'Name': ['Tom', 'Tom', 'Eva', 'Jack', 'Michelle'], "
107293,"                    'Val': [1,2,3,4,5]})"
107294,print (df2)
107295,       Name  Val
107296,0       Tom    1 <-duplicated name Tom
107297,1       Tom    2 <-duplicated name Tom
107298,2       Eva    3
107299,3      Jack    4
107300,4  Michelle    5
107301,
107302,s = df2.set_index('Name')['Val']
107303,df1['New'] = df1['Name'].map(s)
107304,print (df1)
107305,DataFrame.drop_duplicates
107306,dict
107307,#default keep first value
107308,s = df2.drop_duplicates('Name').set_index('Name')['Val']
107309,print (s)
107310,Name
107311,Tom         1
107312,Eva         3
107313,Jack        4
107314,Michelle    5
107315,"Name: Val, dtype: int64"
107316,
107317,df1['New'] = df1['Name'].map(s)
107318,print (df1)
107319,    Name  Age  New
107320,0    Tom   34  1.0
107321,1   Sara   18  NaN
107322,2    Eva   44  3.0
107323,3   Jack   27  4.0
107324,4  Laura   30  NaN
107325,#add parameter for keep last value 
107326,"s = df2.drop_duplicates('Name', keep='last').set_index('Name')['Val']"
107327,print (s)
107328,Name
107329,Tom         2
107330,Eva         3
107331,Jack        4
107332,Michelle    5
107333,"Name: Val, dtype: int64"
107334,
107335,df3['New'] = df3['Name'].map(s)
107336,print (df3)
107337,    Name  Age  New
107338,0    Tom   34  2.0
107339,1   Sara   18  NaN
107340,2    Eva   44  3.0
107341,3   Jack   27  4.0
107342,4  Laura   30  NaN
107343,#map by dictionary
107344,"d = dict(zip(df2['Name'], df2['Val']))"
107345,print (d)
107346,"{'Tom': 2, 'Eva': 3, 'Jack': 4, 'Michelle': 5}"
107347,
107348,df4['New'] = df4['Name'].map(d)
107349,print (df4)
107350,    Name  Age  New
107351,0    Tom   34  2.0
107352,1   Sara   18  NaN
107353,2    Eva   44  3.0
107354,3   Jack   27  4.0
107355,4  Laura   30  NaN
107356,df1['Sex'] = df1['Name'].map(df2.set_index('Name')['Sex'])
107357,print (df1['Sex'].unique())
107358,print (df2['Sex'].unique())
107359,df1['sex']
107360,join
107361,"df1.set_index(""Name"").join(df2.set_index(""Name""), how=""left"")"
107362,"set_index(""Name"")"
107363,"df1 = pd.DataFrame({'Name': ['Tom', 'Sara', 'Eva', 'Jack', 'Laura'],"
107364,"                    'Age': [34, 18, 44, 27, 30]})"
107365,
107366,
107367,"df2 = pd.DataFrame({'Name': ['Tom', 'Paul', 'Eva', 'Paul', 'Jack', 'Michelle', 'Tom'],"
107368,"                    'Something': ['M', 'M', 'F', 'M', 'A', 'F', 'B']})"
107369,
107370,
107371,"df1_dict = pd.Series(df1.Age.values, index=df1.Name).to_dict()"
107372,
107373,df2['Age'] = df2['Name'].map(df1_dict)
107374,
107375,print(df2)
107376,      Name Something   Age
107377,0       Tom         M  34.0
107378,1      Paul         M   NaN
107379,2       Eva         F  44.0
107380,3      Paul         M   NaN
107381,4      Jack         A  27.0
107382,5  Michelle         F   NaN
107383,6       Tom         B  34.0
107384,DataFrame.reindex
107385,Name
107386,df2
107387,df2
107388,Name
107389,reindex
107390,df2['Sex'].reindex(df1['Name'])
107391,set_index
107392,df2.set_index('Name')['Sex'].reindex(df1['Name'])
107393,df1['Sex'] = df2.set_index('Name')['Sex'].reindex(df1['Name']).array
107394,
107395,#     Name  Age  Sex
107396,# 0    Tom   34    M
107397,# 1   Sara   18  NaN
107398,# 2    Eva   44    F
107399,# 3   Jack   27    M
107400,# 4  Laura   30  NaN
107401,reindex
107402,fill_value
107403,method
107404,ffill
107405,bfill
107406,nearest
107407,Sex
107408,"df2.set_index('Name')['Sex'].reindex(df1['Name'], fill_value='PNS')"
107409,
107410,#     Name  Age  Sex
107411,# 0    Tom   34    M
107412,# 1   Sara   18  PNS
107413,# 2    Eva   44    F
107414,# 3   Jack   27    M
107415,# 4  Laura   30  PNS
107416,fill_value
107417,fillna
107418,df2
107419,drop_duplicates
107420,df2.drop_duplicates('Name').set_index('Name')['Sex'].reindex(df1['Name'])
107421,
107422,"wait = WebDriverWait(browser, 20).wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id=""accountStandalone""]/div/div/div[2]/div/div/div[1]/button')))"
107423,wait.click()
107424,"<div class=""confirmation-title nsg-font-family--platform nsg-text--black edf-title-font-size--xlarge js-confirmationTitle"">NU ÄR DU MEDLEM, Hello.</div>"
107425,"<button type=""button"" class=""nsg-button nsg-bg--black register-next-step-cta js-nextStepCta"">FORTSÄTT</button>"
107426,"WebDriverWait(browser, 20).until(EC.element_to_be_clickable((By.XPATH, '//*[@id=""accountStandalone""]/div/div/div[2]/div/div/div[1]/button'))).click()"
107427,"WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ""div.confirmation-title.nsg-font-family--platform.nsg-text--black.edf-title-font-size--xlarge.js-confirmationTitle"")))"
107428,"WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.XPATH, ""//div[@class='confirmation-title nsg-font-family--platform nsg-text--black edf-title-font-size--xlarge js-confirmationTitle' and contains(.,'NU ÄR DU MEDLEM, Hello.')]"")))"
107429,"WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ""button.nsg-button.nsg-bg--black.register-next-step-cta.js-nextStepCta"")))"
107430,"WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, ""//button[@class='nsg-button nsg-bg--black register-next-step-cta js-nextStepCta' and contains(.,'FORTSÄTT')]"")))"
107431,collections.Counter
107432,dict
107433,collections.OrderedDict
107434,None
107435,dict
107436,OrderedDict
107437,OrderedDict
107438,dict
107439,dict
107440,fromkeys()
107441,keys()
107442,">>> keywords = ['foo', 'bar', 'bar', 'foo', 'baz', 'foo']"
107443,
107444,>>> list(dict.fromkeys(keywords))
107445,"['foo', 'bar', 'baz']"
107446,dict.fromkeys()
107447,OrderedDict
107448,"keys = (1,2,3,1,2,1)"
107449,list(OrderedDict.fromkeys(keys).keys())
107450,"[1, 2, 3]"
107451,dict
107452,set
107453,"OrderedSet([1, 2, 3])"
107454,.union
107455,__or__
107456,@staticmethod
107457,def union(*sets):
107458,    union = OrderedSet()
107459,    union.union(*sets)
107460,    return union
107461,
107462,"def union(self, *sets):"
107463,    for set in sets:
107464,        self |= set
107465,update
107466,union
107467,intersection
107468,union
107469,OrderedSet.union
107470,None
107471,collections.OrderedDict
107472,collections.OrderedDict
107473,collections.MutableSet
107474,import collections
107475,
107476,"class OrderedSet(collections.OrderedDict, collections.MutableSet):"
107477,
107478,"    def update(self, *args, **kwargs):"
107479,        if kwargs:
107480,"            raise TypeError(""update() takes no keyword arguments"")"
107481,
107482,        for s in args:
107483,            for e in s:
107484,                 self.add(e)
107485,
107486,"    def add(self, elem):"
107487,        self[elem] = None
107488,
107489,"    def discard(self, elem):"
107490,"        self.pop(elem, None)"
107491,
107492,"    def __le__(self, other):"
107493,        return all(e in other for e in self)
107494,
107495,"    def __lt__(self, other):"
107496,        return self <= other and self != other
107497,
107498,"    def __ge__(self, other):"
107499,        return all(e in self for e in other)
107500,
107501,"    def __gt__(self, other):"
107502,        return self >= other and self != other
107503,
107504,    def __repr__(self):
107505,"        return 'OrderedSet([%s])' % (', '.join(map(repr, self.keys())))"
107506,
107507,    def __str__(self):
107508,"        return '{%s}' % (', '.join(map(repr, self.keys())))"
107509,    
107510,    difference = property(lambda self: self.__sub__)
107511,    difference_update = property(lambda self: self.__isub__)
107512,    intersection = property(lambda self: self.__and__)
107513,    intersection_update = property(lambda self: self.__iand__)
107514,    issubset = property(lambda self: self.__le__)
107515,    issuperset = property(lambda self: self.__ge__)
107516,    symmetric_difference = property(lambda self: self.__xor__)
107517,    symmetric_difference_update = property(lambda self: self.__ixor__)
107518,    union = property(lambda self: self.__or__)
107519,OrderedSet
107520,OrderedDict
107521,abc.Set
107522,__len__
107523,__iter__
107524,__contains__
107525,"OrderedSet([1,2,3])"
107526,dict
107527,collections.abc.MutableSet
107528,my_set[5]
107529,remove(item)
107530,add(item)
107531,__contains__(item)
107532,item in my_set
107533,set.union
107534,collections.abc.Set
107535,OrderedSet
107536,remove
107537,SortedSet
107538,IndexedSet
107539,pip install boltons
107540,setutils.py
107541,IndexedSet
107542,>>> from boltons.setutils import IndexedSet
107543,>>> x = IndexedSet(list(range(4)) + list(range(8)))
107544,>>> x
107545,"IndexedSet([0, 1, 2, 3, 4, 5, 6, 7])"
107546,>>> x - set(range(2))
107547,"IndexedSet([2, 3, 4, 5, 6, 7])"
107548,>>> x[-1]
107549,7
107550,>>> fcr = IndexedSet('freecreditreport.com')
107551,>>> ''.join(fcr[:fcr.index('.')])
107552,'frecditpo'
107553,IndexedSet
107554,pip install sortedcontainers
107555,pip install
107556,from sortedcontainers import SortedSet
107557,help(SortedSet)
107558,SortedSet
107559,set
107560,frozenset
107561,SortedSet
107562,OrderedDict
107563,abc.collections.MutableSet
107564,typing.MutableSet
107565,import itertools
107566,import typing
107567,
107568,"T = typing.TypeVar(""T"")"
107569,
107570,class OrderedSet(typing.MutableSet[T]):
107571,"    """"""A set that preserves insertion order by internally using a dict."""""""
107572,
107573,"    def __init__(self, iterable: typing.Iterator[T]):"
107574,        self._d = dict.fromkeys(iterable)
107575,
107576,"    def add(self, x: T) -> None:"
107577,        self._d[x] = None
107578,
107579,"    def discard(self, x: T) -> None:"
107580,"        self._d.pop(x, None)"
107581,
107582,"    def __contains__(self, x: object) -> bool:"
107583,        return self._d.__contains__(x)
107584,
107585,    def __len__(self) -> int:
107586,        return self._d.__len__()
107587,
107588,    def __iter__(self) -> typing.Iterator[T]:
107589,        return self._d.__iter__()
107590,
107591,    def __str__(self):
107592,"        return f""{{{', '.join(str(i) for i in self)}}}"""
107593,
107594,    def __repr__(self):
107595,"        return f""<OrderedSet {self}>"""
107596,"x = OrderedSet([1, 2, -1, ""bar""])"
107597,x.add(0)
107598,"assert list(x) == [1, 2, -1, ""bar"", 0]"
107599,pip install
107600,discard
107601,KeyError
107602,__repr__
107603,Index
107604,"indA = pd.Index([1, 3, 5, 7, 9])"
107605,"indB = pd.Index([2, 3, 5, 7, 11])"
107606,
107607,indA & indB  # intersection
107608,indA | indB  # union
107609,indA - indB  # difference
107610,indA ^ indB  # symmetric difference
107611,indA.difference(indB)
107612,pd.Index
107613,set
107614,setlist
107615,collections-extended
107616,Sequence
107617,Set
107618,>>> from collections_extended import setlist
107619,>>> sl = setlist('abracadabra')
107620,>>> sl
107621,"setlist(('a', 'b', 'r', 'c', 'd'))"
107622,>>> sl[3]
107623,'c'
107624,>>> sl[-1]
107625,'d'
107626,>>> 'r' in sl  # testing for inclusion is fast
107627,True
107628,>>> sl.index('d')  # so is finding the index of an element
107629,4
107630,">>> sl.insert(1, 'd')  # inserting an element already in raises a ValueError"
107631,ValueError
107632,>>> sl.index('d')
107633,4
107634,OrderedSet
107635,DataStructure = {
107636,    'Collections': {
107637,        'Map': [
107638,"            ('dict', 'OrderDict', 'defaultdict'),"
107639,"            ('chainmap', 'types.MappingProxyType')"
107640,"        ],"
107641,"        'Set': [('set', 'frozenset'), {'multiset': 'collection.Counter'}]"
107642,"    },"
107643,    'Sequence': {
107644,"        'Basic': ['list', 'tuple', 'iterator']"
107645,"    },"
107646,    'Algorithm': {
107647,"        'Priority': ['heapq', 'queue.PriorityQueue'],"
107648,"        'Queue': ['queue.Queue', 'multiprocessing.Queue'],"
107649,"        'Stack': ['collection.deque', 'queue.LifeQueue']"
107650,"        },"
107651,"    'text_sequence': ['str', 'byte', 'bytearray']"
107652,}
107653,OrderedDict
107654,OrderedDict.keys()
107655,abc.collections.Set
107656,import random
107657,"from collections import OrderedDict, abc"
107658,
107659,"a = list(range(0, 100))"
107660,random.shuffle(a)
107661,
107662,# True
107663,"a == list(OrderedDict((i, 0) for i in a).keys())"
107664,
107665,# True
107666,"isinstance(OrderedDict().keys(), abc.Set)   "
107667,pip install ordered-set
107668,from ordered_set import OrderedSet
107669,">>> s = set([0, 1, 2, 99, 4, 40, 3, 20, 24, 100, 60])"
107670,>>> sorted(s)
107671,"[0, 1, 2, 3, 4, 20, 24, 40, 60, 99, 100]"
107672,if(not new_element in my_list):
107673,    my_list.append(new_element)
107674,-1
107675,0
107676,1
107677,"user_input = input(""Enter something:"")"
107678,
107679,if type(user_input) == int:
107680,"    print(""Is a number"")"
107681,else:
107682,"    print(""Not a number"")"
107683,input
107684,input
107685,if type(eval(user_input)) == int:
107686,try:
107687,    val = int(userInput)
107688,except ValueError:
107689,"    print(""That's not an int!"")"
107690,val = int(str(userInput))
107691,int(True) == 1
107692,int(False) == 0
107693,isdigit()
107694,if userinput.isdigit():
107695,    #do stuff
107696,isdecimal
107697,isdigit
107698,isdigit
107699,isnumeric()
107700,>>>a = '123'
107701,>>>a.isnumeric()
107702,True
107703,>>>a = '-1'
107704,>>>a.isnumeric()
107705,False
107706,isnumeric()
107707,"""123456"".isnumeric()"
107708,AttributeError: 'str' object has no attribute 'isnumeric'
107709,"U""12345"".numeric()"
107710,True
107711,a = '\U0001f10a'
107712,a.isnumeric()
107713,int(a)
107714,'3.3'.isnumeric()
107715,False
107716,userInput = 0
107717,while True:
107718,  try:
107719,"     userInput = int(input(""Enter something: ""))       "
107720,  except ValueError:
107721,"     print(""Not an integer!"")"
107722,     continue
107723,  else:
107724,"     print(""Yes an integer!"")"
107725,     break 
107726,import re
107727,"num_format = re.compile(""^[\-]?[1-9][0-9]*\.?[0-9]+$"")"
107728,"isnumber = re.match(num_format,givennumber)"
107729,if isnumber:
107730,"    print ""given string is number"""
107731,user_input = ''
107732,while user_input is not int:
107733,    try:
107734,        user_input = int(input('Enter a number: '))
107735,        break
107736,    except ValueError:
107737,        print('Please enter a valid number: ')
107738,
107739,print('You entered {}'.format(user_input))
107740,a = ''
107741,while a.isdigit() == False:
107742,    a = input('Enter a number: ')
107743,
107744,print('You entered {}'.format(a))
107745,def checkIntValue():
107746,    '''Works fine for check if an **input** is
107747,   a positive Integer AND in a specific range'''
107748,    maxValue = 20
107749,    while True:
107750,        try:
107751,            intTarget = int(input('Your number ?'))
107752,        except ValueError:
107753,            continue
107754,        else:
107755,            if intTarget < 1 or intTarget > maxValue:
107756,                continue
107757,            else:
107758,                return (intTarget)
107759,import re
107760,num_format = re.compile(r'^\-?[1-9][0-9]*\.?[0-9]*')
107761,num_format = re.compile(r'^\-?[1-9]+\.?[0-9]*')
107762,a=123
107763,bool_a = a.isnumeric()
107764,def isanumber(a):
107765,
107766,    try:
107767,        float(repr(a))
107768,        bool_a = True
107769,    except:
107770,        bool_a = False
107771,
107772,    return bool_a
107773,
107774,
107775,a = 1 # integer
107776,isanumber(a)
107777,>>> True
107778,
107779,a = -2.5982347892 # general float
107780,isanumber(a)
107781,>>> True
107782,
107783,a = '1' # actually a string
107784,isanumber(a)
107785,>>> False
107786,float
107787,bool
107788,it_is = unicode(user_input).isnumeric()
107789,it_is = str(user_input).isnumeric()
107790,try:
107791,    int(user_input)
107792,    it_is = True
107793,except ValueError:
107794,    it_is = False
107795, 
107796,try:
107797,    float(user_input)
107798,    it_is = True
107799,except ValueError:
107800,    it_is = False
107801,def is_number(s):
107802,    while s.isdigit() == False:
107803,"        s = raw_input(""Enter only numbers: "")"
107804,    return int(s)
107805,
107806,
107807,# Your program starts here    
107808,"user_input = is_number(raw_input(""Enter a number: ""))"
107809,import fractions
107810,
107811,def isnumber(s):
107812,   try:
107813,     float(s)
107814,     return True
107815,   except ValueError:
107816,     try: 
107817,       Fraction(s)
107818,       return True
107819,     except ValueError: 
107820,       return False
107821,"    user_input = input(""Enter something:"")"
107822,    if user_input.isdigit():
107823,"        print(""Is a number"")"
107824,    else:
107825,"        print(""Not a number"")"
107826,"numList = [499, -486, 0.1255468, -0.21554, 'a', ""this"", ""long string here"", ""455 street area"", 0, """"]"
107827,
107828,for item in numList:
107829,
107830,    try:
107831,"        print (item / 2) #You can divide by any number really, except zero"
107832,    except:
107833,"        print ""Not A Number: "" + item"
107834,249
107835,-243
107836,0.0627734
107837,-0.10777
107838,Not A Number: a
107839,Not A Number: this
107840,Not A Number: long string here
107841,Not A Number: 455 street area
107842,0
107843,Not A Number: 
107844,"a=(raw_input(""Amount:""))"
107845,
107846,try:
107847,    int(a)
107848,except ValueError:
107849,    try:
107850,        float(a)
107851,    except ValueError:
107852,"        print ""This is not a number"""
107853,        a=0
107854,
107855,
107856,if a==0:
107857,    a=0
107858,else:
107859,    print a
107860,    #Do stuff
107861,0
107862,def validate(userInput):
107863,
107864,    try:
107865,        val = int(userInput)
107866,        if val > 0 and val < 101:
107867,            valid = True
107868,        else:
107869,            valid = False
107870,
107871,    except Exception:
107872,        valid = False
107873,
107874,    return valid
107875,NaN
107876,'abc'
107877,def isnumber(x):
107878,    import numpy
107879,    try:
107880,        return type(numpy.float(x)) == float
107881,    except ValueError:
107882,        return False
107883,"valid = [str(i) for i in range(-10,11)] #  [""-10"",""-9....""10""] "
107884,"p = input(""Enter a number: "")"
107885,
107886,while p not in valid:
107887,"    p = input(""Not valid. Try to enter a number again: "")"
107888,p = int(p)
107889,while True:
107890,    b1=input('Type a number:')
107891,    try:
107892,        a1=int(b1)
107893,    except ValueError:
107894,"        print ('""%(a1)s"" is not a number. Try again.' %{'a1':b1})       "
107895,    else:
107896,"        print ('You typed ""{}"".'.format(a1))"
107897,        break
107898,>>> %Run 1.1.py
107899,Type a number:d
107900,"""d"" is not a number. Try again."
107901,Type a number:
107902,>>> %Run 1.1.py
107903,Type a number:4
107904,You typed 4.
107905,>>> 
107906,player_number = 0
107907,while player_number != 1 and player_number !=2:
107908,"    player_number = raw_input(""Are you Player 1 or 2? "")"
107909,    try:
107910,        player_number = int(player_number)
107911,    except ValueError:
107912,"        print ""Please enter '1' or '2'..."""
107913,"player_number = int(raw_input(""Are you Player 1 or 2? "") "
107914,ValueError
107915,  def length(s):
107916,    return len(s)
107917,
107918,"   s = input(""Enter the String: "")"
107919,    try:
107920,        if (type(int(s)))==int :
107921,"            print(""You input an integer"")"
107922,
107923,    except ValueError:      
107924,"        print(""it is a string with length "" + str(length(s)))   "
107925,print(user_input.isnumeric())
107926,False
107927,try:
107928,    user_input = int(user_input)
107929,except ValueError:
107930,    process_non_numeric_user_input()  # user_input is not a numeric string!
107931,else:
107932,    process_user_input()
107933,try..except
107934,import re
107935,
107936,"if re.match('[-+]?\d+$', the_str):"
107937,  # is integer
107938,>>> import re
107939,">>> def test(s): return bool(re.match('[-+]?\d+$', s))"
107940,
107941,>>> test('0')
107942,True
107943,>>> test('1')
107944,True
107945,>>> test('-1')
107946,True
107947,
107948,>>> test('-0')
107949,True
107950,>>> test('+0')
107951,True
107952,>>> test('+1')
107953,True
107954,
107955,
107956,>>> test('-1-1')
107957,False
107958,>>> test('+1+1')
107959,False
107960,>>> from timeit import timeit
107961,">>> print(timeit('text=""1234""; z=text[0]; (z.isdigit() or z == ""-"" or z == ""."") and all(character.isdigit() or character == ""."" for character in text[1:])'))"
107962,0.5673831000458449
107963,">>> print(timeit('text=""-4089175.25""; z=text[0]; (z.isdigit() or z == ""-"" or z == ""."") and all(character.isdigit() or character == ""."" for character in text[1:])'))"
107964,1.0832774000009522
107965,">>> print(timeit('text=""-97271851234.28975232364""; z=text[0]; (z.isdigit() or z == ""-"" or z == ""."") and all(character.isdigit() or character == ""."" for character in text[1:])'))"
107966,1.9836419000057504
107967,>>> def exception_try(string):
107968,...   try:
107969,...     return type(float(string)) == int
107970,...   except:
107971,...     return false
107972,
107973,">>> print(timeit('text=""1234""; exception_try(text)', ""from __main__ import exception_try""))"
107974,0.22721579996868968
107975,">>> print(timeit('text=""-4089175.25""; exception_try(text)', ""from __main__ import exception_try""))"
107976,0.2409859000472352
107977,">>> print(timeit('text=""-97271851234.28975232364""; exception_try(text)', ""from __main__ import exception_try""))"
107978,0.45190039998851717
107979,>>> print(timeit('import re'))
107980,0.08660140004940331
107981,">>> print(timeit('text=""1234""; import re; num_format = re.compile(""^[\-]?[1-9][0-9]*\.?[0-9]+$""); re.match(num_format,text)'))"
107982,1.3882658999646083
107983,">>> print(timeit('text=""-4089175.25""; import re; num_format = re.compile(""^[\-]?[1-9][0-9]*\.?[0-9]+$""); re.match(num_format,text)'))"
107984,1.4007637000177056
107985,">>> print(timeit('text=""-97271851234.28975232364""; import re; num_format = re.compile(""^[\-]?[1-9][0-9]*\.?[0-9]+$""); re.match(num_format,text)'))"
107986,1.4191589000402018
107987,">>> print(timeit('text=""1234""; text.isdecimal()'))"
107988,0.04747540003154427
107989,"a= input(""Choose the option\n"")"
107990,
107991,if(int(a)):
107992,    print (a);
107993,else:
107994,"    print(""Try Again"")"
107995,SyntaxError: 'return' outside function
107996,a is int
107997,True
107998,"user_input = input(""Enter something: "")"
107999,
108000,if type(user_input) == int:
108001,"    print(user_input, ""Is a number"")"
108002,else:
108003,"    print(""Not a number"")"
108004,  
108005,try:
108006,    val = int(user_input)
108007,except ValueError:
108008,"    print(""That's not an int!"")"
108009,Decimal
108010,import decimal
108011,"isinstance(x, decimal.Decimal)"
108012,def isanumber(inp):
108013,    try:
108014,        val = int(inp)
108015,        return True
108016,    except ValueError:
108017,        try:
108018,            val = float(inp)
108019,            return True
108020,        except ValueError:
108021,            return False
108022,a=10
108023,
108024,"isinstance(a,int)  #True"
108025,
108026,b='abc'
108027,
108028,"isinstance(b,int)  #False"
108029,def f(x):
108030,  y0 = x + 1
108031,  y1 = x * 3
108032,  y2 = y0 ** y3
108033,"  return (y0, y1, y2)"
108034,dict
108035,def g(x):
108036,  y0 = x + 1
108037,  y1 = x * 3
108038,  y2 = y0 ** y3
108039,"  return {'y0': y0, 'y1': y1 ,'y2': y2}"
108040,result['y0']
108041,class ReturnValue:
108042,"  def __init__(self, y0, y1, y2):"
108043,     self.y0 = y0
108044,     self.y1 = y1
108045,     self.y2 = y2
108046,
108047,def g(x):
108048,  y0 = x + 1
108049,  y1 = x * 3
108050,  y2 = y0 ** y3
108051,"  return ReturnValue(y0, y1, y2)"
108052,"{ y0, y1, y2 }"
108053,__dict__
108054,ReturnValue
108055,__slots__
108056,class ReturnValue(object):
108057,"  __slots__ = [""y0"", ""y1"", ""y2""]"
108058,"  def __init__(self, y0, y1, y2):"
108059,     self.y0 = y0
108060,     self.y1 = y1
108061,     self.y2 = y2
108062,__slots__
108063,__dict__
108064,@dataclass
108065,class Returnvalue:
108066,    y0: int
108067,    y1: float
108068,    y3: int
108069,
108070,def total_cost(x):
108071,    y0 = x + 1
108072,    y1 = x * 3
108073,    y2 = y0 ** y3
108074,"    return ReturnValue(y0, y1, y2)"
108075,def h(x):
108076,  result = [x + 1]
108077,  result.append(x * 3)
108078,  result.append(y0 ** y3)
108079,  return result
108080,y3
108081,NameError: global name 'y3' is not defined
108082,3
108083,y3
108084,>>> import collections
108085,">>> Point = collections.namedtuple('Point', ['x', 'y'])"
108086,">>> p = Point(1, y=2)"
108087,">>> p.x, p.y"
108088,1 2
108089,">>> p[0], p[1]"
108090,1 2
108091,typing
108092,NamedTuple
108093,typing.NamedTuple
108094,class Employee(NamedTuple):  # inherit from typing.NamedTuple
108095,    name: str
108096,    id: int = 3  # default value
108097,
108098,employee = Employee('Guido')
108099,assert employee.id == 3
108100,namedtuple
108101,namedtuple
108102,namedtuple
108103,pickle
108104,multiprocessing
108105,namedtuple
108106,_source
108107,_source
108108,ReturnValue
108109,"""y0"""
108110,"""y1"""
108111,"""y2"""
108112,ReturnValue
108113,.y0
108114,.y1
108115,.y2
108116,def get_image_data(filename):
108117,    [snip]
108118,"    return size, (format, version, compression), (width,height)"
108119,
108120,"size, type, dimensions = get_image_data(x)"
108121,re.match()
108122,open(file)
108123,def f():
108124,"    return True, False"
108125,"x, y = f()"
108126,print(x)
108127,print(y)
108128,True
108129,False
108130,type(f())
108131,<class 'tuple'>
108132,tuple
108133,tuple
108134,"x, y = y, x"
108135,"x, y = 0, 1"
108136,tuple
108137,tuple
108138,tuple
108139,=
108140,def g(x):
108141,  y0 = x + 1
108142,  y1 = x * 3
108143,  y2 = y0 ** y3
108144,"  return {'y0':y0, 'y1':y1 ,'y2':y2 }"
108145,result = g(x); other_function(result)
108146,>>> def f(x):
108147,        y0 = x + 1
108148,        yield y0
108149,        yield x * 3
108150,        yield y0 ** 4
108151,
108152,
108153,">>> a, b, c = f(5)"
108154,>>> a
108155,6
108156,>>> b
108157,15
108158,>>> c
108159,1296
108160,yield
108161,def f(x): …; yield b; yield a; yield r
108162,"(g for g in [b, a, r])"
108163,def g(x):
108164,  y0 = x + 1
108165,  y1 = x * 3
108166,  y2 = y0 ** y3
108167,"  return {'y0':y0, 'y1':y1 ,'y2':y2 }"
108168,>>> def func():
108169,"...    return [1,2,3]"
108170,...
108171,">>> a,b,c = func()"
108172,>>> a
108173,1
108174,>>> b
108175,2
108176,>>> c
108177,3
108178,class Some3SpaceThing(object):
108179,"  def __init__(self,x):"
108180,    self.g(x)
108181,"  def g(self,x):"
108182,    self.y0 = x + 1
108183,    self.y1 = x * 3
108184,    self.y2 = y0 ** y3
108185,
108186,r = Some3SpaceThing( x )
108187,r.y0
108188,r.y1
108189,r.y2
108190,struct
108191,class
108192,struct
108193,dict
108194,tuple
108195,struct
108196,tuple
108197,class
108198,dict
108199,tuple
108200,dict
108201,tuple
108202,"for score,id,name in scoreAllTheThings():"
108203,    if score > goodScoreThreshold:
108204,"        print ""%6.3f #%6d %s""%(score,id,name)"
108205,for entry in scoreAllTheThings():
108206,    if entry.score > goodScoreThreshold:
108207,"        print ""%6.3f #%6d %s""%(entry.score,entry.id,entry.name)"
108208,dict
108209,for entry in scoreAllTheThings():
108210,    if entry['score'] > goodScoreThreshold:
108211,"        print ""%6.3f #%6d %s""%(entry['score'],entry['id'],entry['name'])"
108212,dict
108213,form = {
108214,"    'level': 0,"
108215,"    'points': 0,"
108216,    'game': {
108217,        'name': ''
108218,    }
108219,}
108220,
108221,
108222,def test(form):
108223,    form['game']['name'] = 'My game!'
108224,    form['level'] = 2
108225,
108226,    return form
108227,
108228,>>> print(test(form))
108229,"{u'game': {u'name': u'My game!'}, u'points': 0, u'level': 2}"
108230,test
108231,dict.update
108232,form
108233,form
108234,form
108235,__all__
108236,__init__.py
108237,__all__
108238,from <module> import *
108239,foo.py
108240,bar
108241,baz
108242,"__all__ = ['bar', 'baz']"
108243,
108244,waz = 5
108245,bar = 10
108246,def baz(): return 'baz'
108247,from foo import *
108248,
108249,print(bar)
108250,print(baz)
108251,
108252,"# The following will trigger an exception, as ""waz"" is not exported by the module"
108253,print(waz)
108254,__all__
108255,import *
108256,__all__
108257,from <module> import *
108258,__all__
108259,from <module> import <member>
108260,print(baz())
108261,__all__
108262,__name__
108263,import *
108264,__all__
108265,__all__
108266,import *
108267,tk
108268,__all__
108269,tk
108270,from tk import *
108271,__all__
108272,import *
108273,__all__
108274,__all__
108275,__init__.py
108276,__all__
108277,__all__
108278,import *
108279,__all__
108280,module.py
108281,"__all__ = ['foo', 'Bar']"
108282,import *
108283,__all__
108284,from module import *               # imports foo and Bar
108285,__all__
108286,__init__.py
108287,__init__.py
108288,__init__.py
108289,__all__
108290,__init__.py
108291,__all__
108292,__init__.py
108293,package
108294,├── __init__.py
108295,├── module_1.py
108296,└── module_2.py
108297,from pathlib import Path
108298,
108299,package = Path('package')
108300,package.mkdir()
108301,
108302,"(package / '__init__.py').write_text("""""""
108303,from .module_1 import *
108304,from .module_2 import *
108305,""""""")"
108306,
108307,package_module_1 = package / 'module_1.py'
108308,"package_module_1.write_text("""""""
108309,__all__ = ['foo']
108310,imp_detail1 = imp_detail2 = imp_detail3 = None
108311,def foo(): pass
108312,""""""")"
108313,
108314,package_module_2 = package / 'module_2.py'
108315,"package_module_2.write_text("""""""
108316,__all__ = ['Bar']
108317,imp_detail1 = imp_detail2 = imp_detail3 = None
108318,class Bar: pass
108319,""""""")"
108320,import package
108321,package.foo()
108322,package.Bar()
108323,package
108324,__all__
108325,__init__.py
108326,package
108327,├── __init__.py
108328,├── module_1
108329,│   ├── foo_implementation.py
108330,│   └── __init__.py
108331,└── module_2
108332,    ├── Bar_implementation.py
108333,    └── __init__.py
108334,subpackage_1 = package / 'module_1'
108335,subpackage_1.mkdir()
108336,subpackage_2 = package / 'module_2'
108337,subpackage_2.mkdir()
108338,package_module_1.rename(subpackage_1 / 'foo_implementation.py')
108339,package_module_2.rename(subpackage_2 / 'Bar_implementation.py')
108340,__init__.py
108341,__all__
108342,"(subpackage_1 / '__init__.py').write_text("""""""
108343,from .foo_implementation import *
108344,__all__ = ['foo']
108345,""""""")"
108346,"(subpackage_2 / '__init__.py').write_text("""""""
108347,from .Bar_implementation import *
108348,__all__ = ['Bar']
108349,""""""")"
108350,>>> import package
108351,>>> package.foo()
108352,>>> package.Bar()
108353,<package.module_2.Bar_implementation.Bar object at 0x7f0c2349d210>
108354,__init__.py
108355,from .Bar_implementation import *
108356,from .Baz_implementation import *
108357,"__all__ = ['Bar', 'Baz']"
108358,Baz
108359,__init__.py
108360,from .module_1 import *       # also constrained by __all__'s
108361,from .module_2 import *       # in the __init__.py's
108362,"__all__ = ['foo', 'Bar']     # further constraining the names advertised"
108363,Baz
108364,import package
108365,package.Baz()
108366,Baz
108367,from .module_1 import *
108368,from .module_2 import *
108369,"__all__ = ['foo', 'Bar', 'Baz']"
108370,_
108371,__all__
108372,_
108373,import *
108374,import *
108375,_us_non_public
108376,us.py
108377,$ cat us.py
108378,"USALLCAPS = ""all caps"""
108379,"us_snake_case = ""snake_case"""
108380,"_us_non_public = ""shouldn't import"""
108381,$ python
108382,"Python 3.10.0 (default, Oct  4 2021, 17:55:55) [GCC 10.3.0] on linux"
108383,"Type ""help"", ""copyright"", ""credits"" or ""license"" for more information."
108384,>>> from us import *
108385,>>> dir()
108386,"['USALLCAPS', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'us_snake_case']"
108387,ctypes/__init__.py
108388,"import os as _os, sys as _sys"
108389,_
108390,_
108391,__all__
108392,__all__
108393,__all__
108394,_
108395,__all__
108396,export
108397,__all__
108398,__all__
108399,import sys
108400,
108401,def export(fn):
108402,    mod = sys.modules[fn.__module__]
108403,"    if hasattr(mod, '__all__'):"
108404,        mod.__all__.append(fn.__name__)
108405,    else:
108406,        mod.__all__ = [fn.__name__]
108407,    return fn
108408,__all__
108409,$ cat > main.py
108410,from lib import export
108411,__all__ = [] # optional - we create a list if __all__ is not there.
108412,
108413,@export
108414,def foo(): pass
108415,
108416,@export
108417,def bar():
108418,    'bar'
108419,
108420,def main():
108421,    print('main')
108422,
108423,if __name__ == '__main__':
108424,    main()
108425,$ cat > run.py
108426,import main
108427,main.main()
108428,
108429,$ python run.py
108430,main
108431,import *
108432,$ cat > run.py
108433,from main import *
108434,foo()
108435,bar()
108436,"main() # expected to error here, not exported"
108437,
108438,$ python run.py
108439,Traceback (most recent call last):
108440,"  File ""run.py"", line 4, in <module>"
108441,"    main() # expected to error here, not exported"
108442,NameError: name 'main' is not defined
108443,@export
108444,__init__.py
108445,__all__
108446,__all__
108447,__all__
108448,module_1
108449,module_2
108450,del module_1
108451,__init__.py
108452,__all__
108453,__init__.py
108454,__all__
108455,from xxx import *
108456,import
108457,__all__
108458,__all__
108459,from package import *
108460,__all__
108461,__init__.py
108462,from package import *
108463,__all__
108464,from package import *
108465,__init__.py
108466,all
108467,__all__
108468,"a = ""A"""
108469,"b = ""B"""
108470,"c = ""C"""
108471,"__all__ = ['a', 'b']"
108472,
108473,"a = ""A"""
108474,"b = ""B"""
108475,"c = ""C"""
108476,__all__
108477,__all__
108478,*
108479,from <module> import *
108480,from <package> import *
108481,.py
108482,__init__.py
108483,""""""" cheese.py - an example module """""""
108484,
108485,"__all__ = ['swiss', 'cheddar']"
108486,
108487,swiss = 4.99
108488,cheddar = 3.99
108489,gouda = 10.99
108490,__all__
108491,swiss
108492,cheddar
108493,gouda
108494,>>> from cheese import *
108495,">>> swiss, cheddar"
108496,"(4.99, 3.99)"
108497,>>> gouda
108498,Traceback (most recent call last):
108499,"  File ""<stdin>"", line 1, in <module>"
108500,NameError: name 'gouda' is not defined
108501,__all__
108502,*
108503,__all__
108504,>>> import cheese
108505,">>> cheese.swiss, cheese.cheddar, cheese.gouda"
108506,"(4.99, 3.99, 10.99)"
108507,">>> from cheese import swiss, cheddar, gouda"
108508,">>> swiss, cheddar, gouda"
108509,"(4.99, 3.99, 10.99)"
108510,>>> import cheese as ch
108511,">>> ch.swiss, ch.cheddar, ch.gouda"
108512,"(4.99, 3.99, 10.99)"
108513,__init__.py
108514,__all__
108515,__all__
108516,*
108517,__init__.py
108518,__all__ = [
108519,"    'MySQLConnection', 'Connect', 'custom_error_exception',"
108520,
108521,    # Some useful constants
108522,"    'FieldType', 'FieldFlag', 'ClientFlag', 'CharacterSet', 'RefreshOption',"
108523,"    'HAVE_CEXT',"
108524,
108525,    # Error handling
108526,"    'Error', 'Warning',"
108527,
108528,    ...etc...
108529,
108530,    ]
108531,__all__
108532,__init__.py
108533,__all__
108534,from sound.effects import *
108535,sound.effects
108536,sound.effects
108537,__init__.py
108538,__init__.py
108539,from <package> import *
108540,__all__
108541,__init__.py
108542,__init__.py
108543,__all__
108544,from <module> import *
108545,foo
108546,├── bar.py
108547,└── __init__.py
108548,foo/__init__.py
108549,__all__
108550,from foo import *
108551,foo/__init__.py
108552,__all__ = []
108553,from foo import *
108554,"__all__ = [ <name1>, ... ]"
108555,from foo import *
108556,_
108557,__all__
108558,__all__
108559,__all__
108560,__all__
108561,__all__
108562,__all__
108563,__all__
108564,__all__
108565,__all__
108566,__all__
108567,os.path
108568,__init__
108569,__all__
108570,__init__.py
108571,__all__
108572,from package import *
108573,__all__
108574,from foo import *
108575,*
108576,from
108577,from foo import *
108578,*
108579,foo
108580,foo
108581,__all__
108582,from
108583,foo
108584,__init__.py
108585,__all__
108586,from foo import *
108587,__all__
108588,from foo import *
108589,__init__.py
108590,__all__
108591,import
108592,__all__
108593,"__all__ = ('some_name',)"
108594,from M import *
108595,__all__
108596,sys.getsizeof
108597,sys
108598,"sys.getsizeof(object[, default])"
108599,default
108600,TypeError
108601,getsizeof
108602,__sizeof__
108603,getsizeof()
108604,>>> import sys
108605,>>> x = 2
108606,>>> sys.getsizeof(x)
108607,24
108608,>>> sys.getsizeof(sys.getsizeof)
108609,32
108610,>>> sys.getsizeof('this')
108611,38
108612,>>> sys.getsizeof('this also')
108613,48
108614,sys.getsizeof
108615,__sizeof__
108616,dict
108617,dict
108618,getsizeof
108619,sys.getsizeof
108620,sys.getsizeof
108621,Empty
108622,Bytes  type        scaling notes
108623,28     int         +4 bytes about every 30 powers of 2
108624,37     bytes       +1 byte per additional byte
108625,49     str         +1-4 per additional character (depending on max width)
108626,48     tuple       +8 per additional item
108627,64     list        +8 for each additional
108628,"224    set         5th increases to 736; 21nd, 2272; 85th, 8416; 341, 32992"
108629,"240    dict        6th increases to 368; 22nd, 1184; 43rd, 2280; 86th, 4704; 171st, 9320"
108630,136    func def    does not include default args and other attrs
108631,1056   class def   no slots 
108632,"56     class inst  has a __dict__ attr, same scaling as dict above"
108633,888    class def   with slots
108634,16     __slots__   seems to store in mutable tuple-like structure
108635,"                   first slot grows to 48, and so on."
108636,__dict__
108637,property
108638,__dict__
108639,sys.getsizeof()
108640,getsizeof()
108641,__sizeof__
108642,"    /* This over-allocates proportional to the list size, making room"
108643,"     * for additional growth.  The over-allocation is mild, but is"
108644,     * enough to give linear-time amortized behavior over a long
108645,     * sequence of appends() in the presence of a poorly-performing
108646,     * system realloc().
108647,"     * The growth pattern is:  0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ..."
108648,     * Note: new_allocated won't overflow because the largest possible value
108649,     *       is PY_SSIZE_T_MAX * (9 / 8) + 6 which always fits in a size_t.
108650,     */
108651,    new_allocated = (size_t)newsize + (newsize >> 3) + (newsize < 9 ? 3 : 6);
108652,guppy.hpy
108653,sys.getsizeof
108654,Bytes  type        empty + scaling notes
108655,24     int         NA
108656,28     long        NA
108657,37     str         + 1 byte per additional character
108658,52     unicode     + 4 bytes per additional character
108659,56     tuple       + 8 bytes per additional item
108660,"72     list        + 32 for first, 8 for each additional"
108661,"232    set         sixth item increases to 744; 22nd, 2280; 86th, 8424"
108662,"280    dict        sixth item increases to 1048; 22nd, 3352; 86th, 12568 *"
108663,120    func def    does not include default args and other attrs
108664,"64     class inst  has a __dict__ attr, same scaling as dict above"
108665,"16     __slots__   class with slots has no dict, seems to store in "
108666,                    mutable tuple-like structure.
108667,904    class def   has a proxy __dict__ structure for class attrs
108668,"104    old class   makes sense, less stuff, has real dict though."
108669,obj.__dict__
108670,obj.__slots__
108671,gc.get_referents
108672,import sys
108673,"from types import ModuleType, FunctionType"
108674,from gc import get_referents
108675,
108676,# Custom objects know their class.
108677,"# Function objects seem to know way too much, including modules."
108678,# Exclude modules as well.
108679,"BLACKLIST = type, ModuleType, FunctionType"
108680,
108681,
108682,def getsize(obj):
108683,"    """"""sum size of object & members."""""""
108684,"    if isinstance(obj, BLACKLIST):"
108685,        raise TypeError('getsize() does not take argument of type: '+ str(type(obj)))
108686,    seen_ids = set()
108687,    size = 0
108688,    objects = [obj]
108689,    while objects:
108690,        need_referents = []
108691,        for obj in objects:
108692,"            if not isinstance(obj, BLACKLIST) and id(obj) not in seen_ids:"
108693,                seen_ids.add(id(obj))
108694,                size += sys.getsizeof(obj)
108695,                need_referents.append(obj)
108696,        objects = get_referents(*need_referents)
108697,    return size
108698,gc.get_referents
108699,id(key)
108700,gc
108701,import sys
108702,from numbers import Number
108703,from collections import deque
108704,"from collections.abc import Set, Mapping"
108705,
108706,
108707,"ZERO_DEPTH_BASES = (str, bytes, Number, range, bytearray)"
108708,
108709,
108710,def getsize(obj_0):
108711,"    """"""Recursively iterate to sum size of object & members."""""""
108712,    _seen_ids = set()
108713,    def inner(obj):
108714,        obj_id = id(obj)
108715,        if obj_id in _seen_ids:
108716,            return 0
108717,        _seen_ids.add(obj_id)
108718,        size = sys.getsizeof(obj)
108719,"        if isinstance(obj, ZERO_DEPTH_BASES):"
108720,            pass # bypass remaining control flow and return
108721,"        elif isinstance(obj, (tuple, list, Set, deque)):"
108722,            size += sum(inner(i) for i in obj)
108723,"        elif isinstance(obj, Mapping) or hasattr(obj, 'items'):"
108724,"            size += sum(inner(k) + inner(v) for k, v in getattr(obj, 'items')())"
108725,        # Check for custom object instances - may subclass above too
108726,"        if hasattr(obj, '__dict__'):"
108727,            size += inner(vars(obj))
108728,"        if hasattr(obj, '__slots__'): # can have __slots__ with __dict__"
108729,"            size += sum(inner(getattr(obj, s)) for s in obj.__slots__ if hasattr(obj, s))"
108730,        return size
108731,    return inner(obj_0)
108732,">>> getsize(['a', tuple('bcd'), Foo()])"
108733,344
108734,>>> getsize(Foo())
108735,16
108736,>>> getsize(tuple('bcd'))
108737,194
108738,">>> getsize(['a', tuple('bcd'), Foo(), {'foo': 'bar', 'baz': 'bar'}])"
108739,752
108740,">>> getsize({'foo': 'bar', 'baz': 'bar'})"
108741,400
108742,>>> getsize({})
108743,280
108744,>>> getsize({'foo':'bar'})
108745,360
108746,>>> getsize('foo')
108747,40
108748,>>> class Bar():
108749,...     def baz():
108750,...         pass
108751,>>> getsize(Bar())
108752,352
108753,>>> getsize(Bar().__dict__)
108754,280
108755,>>> sys.getsizeof(Bar())
108756,72
108757,>>> getsize(Bar.__dict__)
108758,872
108759,>>> sys.getsizeof(Bar.__dict__)
108760,280
108761,__sizeof__
108762,sys.getsizeof
108763,asizeof
108764,from pympler import asizeof
108765,asizeof.asizeof(my_object)
108766,sys.getsizeof
108767,>>> asizeof.asizeof(tuple('bcd'))
108768,200
108769,">>> asizeof.asizeof({'foo': 'bar', 'baz': 'bar'})"
108770,400
108771,>>> asizeof.asizeof({})
108772,280
108773,>>> asizeof.asizeof({'foo':'bar'})
108774,360
108775,>>> asizeof.asizeof('foo')
108776,40
108777,>>> asizeof.asizeof(Bar())
108778,352
108779,>>> asizeof.asizeof(Bar().__dict__)
108780,280
108781,>>> A = rand(10)
108782,>>> B = rand(10000)
108783,>>> asizeof.asizeof(A)
108784,176
108785,>>> asizeof.asizeof(B)
108786,80096
108787,code=True
108788,muppy
108789,Class Tracker
108790,pympler
108791,getsizeof
108792,from pylab import *
108793,from sys import getsizeof
108794,A = rand(10)
108795,B = rand(10000)
108796,In [64]: getsizeof(A)
108797,Out[64]: 40
108798,
108799,In [65]: getsizeof(B)
108800,Out[65]: 40
108801,In [66]: A.nbytes
108802,Out[66]: 80
108803,
108804,In [67]: B.nbytes
108805,Out[67]: 80000
108806,getsizeof()
108807,"sys.getsizeof([1,2,4]) == sys.getsizeof([1,123**456,4]) == 48"
108808,sys.getsizeof(123**456) = 436
108809,getsizeof()
108810,import pickle
108811,
108812,## let o be the object whose size you want to measure
108813,size_estimate = len(pickle.dumps(o))
108814,"import numpy as np; a = np.arange(100000000); b = a[2:4]; del a; len(pickle.dumps(b)) # 150, but the array is 100MB or more depending on the dtype"
108815,TypeError: cannot pickle '_thread.lock' object
108816,dill
108817,cloudpickle
108818,import sys
108819,def sizeof(obj):
108820,    size = sys.getsizeof(obj)
108821,"    if isinstance(obj, dict): return size + sum(map(sizeof, obj.keys())) + sum(map(sizeof, obj.values()))"
108822,"    if isinstance(obj, (list, tuple, set, frozenset)): return size + sum(map(sizeof, obj))"
108823,    return size
108824,"import numpy as np; a = np.arange(100000000); b = a[2:4]; del a; len(pickle.dumps(b)) # 150, but the array is 100MB or more depending on the dtype"
108825,sys.getsizeof
108826,tuple ()  48 -> 40       
108827,list  []  64 ->56
108828,set()    224 -> 216
108829,dict  {} 240 -> 232
108830,methane
108831,gc_prev
108832,gc_next
108833,gc_refcnt
108834,gc_refcnt
108835,gc_prev
108836,gc_prev
108837,gc_refcnt
108838,Py_ssize_t
108839,PyGC_Head
108840,int
108841,int
108842,    import sys
108843,
108844,"    def get_size(obj, seen=None):"
108845,"        """"""Recursively finds size of objects"""""""
108846,        size = sys.getsizeof(obj)
108847,        if seen is None:
108848,            seen = set()
108849,        obj_id = id(obj)
108850,        if obj_id in seen:
108851,            return 0
108852,        # Important mark as seen *before* entering recursion to gracefully handle
108853,        # self-referential objects
108854,        seen.add(obj_id)
108855,"        if isinstance(obj, dict):"
108856,"            size += sum([get_size(v, seen) for v in obj.values()])"
108857,"            size += sum([get_size(k, seen) for k in obj.keys()])"
108858,"        elif hasattr(obj, '__dict__'):"
108859,"            size += get_size(obj.__dict__, seen)"
108860,"        elif hasattr(obj, '__iter__') and not isinstance(obj, (str, bytes, bytearray)):"
108861,"            size += sum([get_size(i, seen) for i in obj])"
108862,        return size
108863,for i in dir():
108864,"    print (i, sys.getsizeof(eval(i)) )"
108865,import sys
108866,import gc
108867,
108868,def actualsize(input_obj):
108869,    memory_size = 0
108870,    ids = set()
108871,    objects = [input_obj]
108872,    while objects:
108873,        new = []
108874,        for obj in objects:
108875,            if id(obj) not in ids:
108876,                ids.add(id(obj))
108877,                memory_size += sys.getsizeof(obj)
108878,                new.append(obj)
108879,        objects = gc.get_referents(*new)
108880,    return memory_size
108881,
108882,"actualsize([1, 2, [3, 4, 5, 1]])"
108883,actualsize()
108884,"from collections import namedtuple; nt = namedtuple(""nt"", [""a"", ""b""]); print(f""{actualsize(nt(3, 'Hello')):,}"") # 19,264,817"
108885,"actualsize(namedtuple(""a"", ""a b c"")(1, 2, 3))"
108886,actualsize(Path())
108887,import pygame as pg
108888,import os
108889,import psutil
108890,import time
108891,
108892,
108893,process = psutil.Process(os.getpid())
108894,pg.init()    
108895,"vocab = ['hello', 'me', 'you', 'she', 'he', 'they', 'we',"
108896,"         'should', 'why?', 'necessarily', 'do', 'that']"
108897,
108898,"font = pg.font.SysFont(""monospace"", 100, True)"
108899,
108900,dct = {}
108901,
108902,newMem = process.memory_info().rss  # don't mind this line
108903,Str = f'store ' + f'Nothing \tsurface use about '.expandtabs(15) + \
108904,      f'0\t bytes'.expandtabs(9)  # don't mind this assignment too
108905,
108906,usedMem = process.memory_info().rss
108907,
108908,for word in vocab:
108909,"    dct[word] = font.render(word, True, pg.Color(""#000000""))"
108910,
108911,    time.sleep(0.1)  # wait a moment
108912,
108913,    # get total used memory of this script:
108914,    newMem = process.memory_info().rss
108915,    Str = f'store ' + f'{word}\tsurface use about '.expandtabs(15) + \
108916,          f'{newMem - usedMem}\t bytes'.expandtabs(9)
108917,
108918,    print(Str)
108919,    usedMem = newMem
108920,store hello          surface use about 225280    bytes
108921,store me             surface use about 61440     bytes
108922,store you            surface use about 94208     bytes
108923,store she            surface use about 81920     bytes
108924,store he             surface use about 53248     bytes
108925,store they           surface use about 114688    bytes
108926,store we             surface use about 57344     bytes
108927,store should         surface use about 172032    bytes
108928,store why?           surface use about 110592    bytes
108929,store necessarily    surface use about 311296    bytes
108930,store do             surface use about 57344     bytes
108931,store that           surface use about 110592    bytes
108932,import pickle
108933,
108934,data = ...
108935,len(pickle.dumps(data))
108936,import sys
108937,"str1 = ""one"""
108938,int_element=5
108939,"print(""Memory size of '""+str1+""' = ""+str(sys.getsizeof(str1))+ "" bytes"")"
108940,"print(""Memory size of '""+ str(int_element)+""' = ""+str(sys.getsizeof(int_element))+ "" bytes"")"
108941,Exception in thread Thread-3:
108942,Traceback (most recent call last):
108943,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 810, in        __bootstrap_inner"
108944,self.run()
108945,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 763, in  run"
108946,"self.__target(*self.__args, **self.__kwargs)"
108947,"File ""/Users/Matthew/Desktop/Skypebot 2.0/bot.py"", line 271, in process"
108948,info = urllib2.urlopen(req).read()
108949,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 154, in urlopen"
108950,"return opener.open(url, data, timeout)"
108951,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 431, in open"
108952,"response = self._open(req, data)"
108953,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 449, in _open"
108954,"'_open', req)"
108955,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 409, in _call_chain"
108956,result = func(*args)
108957,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 1240, in https_open"
108958,context=self._context)
108959,"File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 1197, in do_open"
108960,raise URLError(err)
108961,URLError: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:581)>
108962,"if input.startswith(""!web""):"
108963,"    input = input.replace(""!web "", """")      "
108964,"    url = ""https://domainsearch.p.mashape.com/index.php?name="" + input"
108965,"    req = urllib2.Request(url, headers={ 'X-Mashape-Key': 'XXXXXXXXXXXXXXXXXXXX' })"
108966,    info = urllib2.urlopen(req).read()
108967,"    Message.Chat.SendMessage ("""" + info)"
108968,certifi
108969,/Applications/Python\ 3.6/ReadMe.rtf
108970,build-installer.py
108971,/Applications/Python\ 3.10/Install\ Certificates.command
108972,install_certificates.command
108973,certifi
108974,certifi
108975,/Applications/Python\ 3.7/Install\ Certificates.command
108976,terminal
108977,out-of-the-box-thinking
108978,import ssl
108979,"input = input.replace(""!web "", """")      "
108980,"url = ""https://domainsearch.p.mashape.com/index.php?name="" + input"
108981,"req = urllib2.Request(url, headers={ 'X-Mashape-Key': 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' })"
108982,gcontext = ssl.SSLContext()  # Only for gangstars
108983,"info = urllib2.urlopen(req, context=gcontext).read()"
108984,"Message.Chat.SendMessage ("""" + info)"
108985,[SSL: CERTIFICATE_VERIFY_FAILED]
108986,import ssl
108987,
108988,# This restores the same behavior as before.
108989,context = ssl._create_unverified_context()
108990,"urllib.urlopen(""https://no-valid-cert"", context=context)"
108991,import ssl
108992,
108993,ssl._create_default_https_context = ssl._create_unverified_context
108994,setup.py upload
108995,certifi 
108996,context 
108997,pip install certifi
108998,/Applications/Python\ 3.6/Install\ Certificates.command
108999,sudo /Applications/Python\ 3.6/Install\ Certificates.command
109000,?\lib\site-packages\certifi\cacert.pem
109001,cacert.pem
109002,from requests.utils import DEFAULT_CA_BUNDLE_PATH; print(DEFAULT_CA_BUNDLE_PATH)
109003,cacert.pem
109004,lib\site-packages\certifi\cacert.pem
109005,urllib2
109006,requests
109007,/usr/local/lib/python2.7/dist-packages/certifi-2015.09.06.2-py2.7.egg/certifi/cacert.pem
109008,urllib.request.urlopen
109009,urllib2
109010,urllib2
109011,pip install certifi
109012,certifi
109013,import urllib.request as urlrq
109014,
109015,resp = urlrq.urlopen('https://example.com/bar/baz.html')
109016,import urllib.request as urlrq
109017,import certifi
109018,
109019,"resp = urlrq.urlopen('https://example.com/bar/baz.html', cafile=certifi.where())"
109020,urllib2.urlopen
109021,cafile
109022,"urllib2.urlopen([...], certifi.where())"
109023,cafile
109024,urlopen
109025,context
109026,import urllib.request as urlrq
109027,import certifi
109028,import ssl
109029,
109030,"resp = urlrq.urlopen('https://example.com/bar/baz.html', context=ssl.create_default_context(cafile=certifi.where()))"
109031,load_verify_locations
109032,SSLContext
109033,None
109034,context=ssl.create_default_context(cafile=certifi.where())
109035,ssl
109036,ssl
109037,https://.../baz.html
109038,urlopen()
109039,certifi
109040,context
109041,"> cd ""/Applications/Python 3.6/"""
109042,"> sudo ""./Install Certificates.command"""
109043,PYTHONHTTPSVERIFY=0 
109044,$ sudo update-ca-certificates --fresh
109045,$ export SSL_CERT_DIR=/etc/ssl/certs
109046,import requests
109047,requests.packages.urllib3.disable_warnings()
109048,
109049,import ssl
109050,
109051,try:
109052,    _create_unverified_https_context = ssl._create_unverified_context
109053,except AttributeError:
109054,    # Legacy Python that doesn't verify HTTPS certificates by default
109055,    pass
109056,else:
109057,    # Handle target environment that doesn't support HTTPS verification
109058,    ssl._create_default_https_context = _create_unverified_https_context
109059,cafile
109060,"urllib2.urlopen(req, cafile=""verisign.pem"")"
109061,$ cd $HOME
109062,$ wget --quiet https://curl.haxx.se/ca/cacert.pem
109063,$ export SSL_CERT_FILE=$HOME/cacert.pem
109064,import ssl
109065,ssl.get_default_verify_paths()
109066,"Out[35]: DefaultVerifyPaths(cafile='/miniconda3/ssl/cert.pem', capath=None,"
109067," openssl_cafile_env='SSL_CERT_FILE', openssl_cafile='/miniconda3/ssl/cert.pem',"
109068," openssl_capath_env='SSL_CERT_DIR', openssl_capath='/miniconda3/ssl/certs')"
109069,conda config --set ssl_verify <pathToYourFile>.crt
109070,~/.condarc
109071,ssl_verify: <pathToYourFile>.crt
109072,/miniconda3/ssl/cert.pem
109073,sklearn.datasets
109074,Applications/Python\ 3.X
109075,from requests.utils import DEFAULT_CA_BUNDLE_PATH
109076,DEFAULT_CA_BUNDLE_PATH
109077,port install curl-ca-bundle
109078,pip install certifi   # for your virtualenv
109079,mkdir -p /Library/Frameworks/Python.framework/Versions/3.6/etc/openssl
109080,cp -a <your virtualenv>/site-package/certifi/cacert.pem \
109081,  /Library/Frameworks/Python.framework/Versions/3.6/etc/openssl/cert.pem
109082,port install openssl
109083,import ssl
109084,
109085,try:
109086,   _create_unverified_https_context = ssl._create_unverified_context
109087,except AttributeError:
109088,    # Legacy Python that doesn't verify HTTPS certificates by default
109089,    pass
109090,else:
109091,    # Handle target environment that doesn't support HTTPS verification
109092,    ssl._create_default_https_context = _create_unverified_https_context
109093,ca-certificates
109094,ca-certificates
109095,wget
109096,wget https://cacerts.digicert.com/DigiCertSHA2SecureServerCA.crt
109097,
109098,mv DigiCertSHA2SecureServerCA.crt DigiCertSHA2SecureServerCA.der
109099,
109100,openssl x509 -inform DER -outform PEM -in DigiCertSHA2SecureServerCA.der -out DigicertSHA2SecureServerCA.pem.crt
109101,
109102,sudo mkdir /usr/share/ca-certificates/extra
109103,
109104,sudo cp DigicertSHA2SecureServerCA.pem.crt /usr/share/ca-certificates/extra/
109105,
109106,sudo dpkg-reconfigure ca-certificates
109107,wget
109108,urllib
109109,certifi
109110,requests
109111,/Applications/Python 3.6/Install Certificates.command
109112,Applications
109113,Certificates.command
109114,/etc/pki/ca-trust/source/anchors/
109115,update-ca-trust force-enable
109116,update-ca-trust extract
109117,urlopen error [SSL: CERTIFICATE_VERIFY_FAILED]
109118,Certificate verification and OpenSSL [CHANGED for Python 2.7.9]
109119,/Applications/Python 2.7/ReadMe.rtf
109120,SSL_CERT_DIR
109121,ca-bundle
109122,/etc/ssl/certs/ca-bundle.crt
109123,SSL_CERT_DIR
109124,/etc/ssl/certs
109125,ca-certificates
109126,export SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt
109127,import ssl
109128,
109129,"def new_ssl_context_decorator(*args, **kwargs):"
109130,    kwargs['cafile'] = '/etc/ssl/certs/ca-certificates.crt'
109131,"    return ssl.create_default_context(*args, **kwargs)"
109132,
109133,ssl._create_default_https_context = ssl._create_unverified_context
109134,"def new_ssl_context_decorator(*args, **kwargs):"
109135,    import certifi
109136,    kwargs['cafile'] = certifi.where()
109137,"    return ssl.create_default_context(*args, **kwargs)"
109138,PyOpenSSL
109139,pip
109140,pip install PyOpenSSL
109141,pip install certifi
109142,requests
109143,urllib3
109144,"ERROR: requests 2.21.0 has requirement urllib3<1.25,>=1.21.1, but you'll have urllib3 1.25 which is incompatible."
109145,pip install 'urllib3<1.25' --force-reinstall
109146,>>> import ssl
109147,>>> ssl.get_default_verify_paths()
109148,"DefaultVerifyPaths(cafile='/usr/local/anaconda3/ssl/cert.pem', capath=None, openssl_cafile_env='SSL_CERT_FILE', openssl_cafile='/usr/local/anaconda3/ssl/cert.pem', openssl_capath_env='SSL_CERT_DIR', openssl_capath='/usr/local/anaconda3/ssl/certs')"
109149,"DefaultVerifyPaths(cafile='', capath=None, openssl_cafile_env='SSL_CERT_FILE', openssl_cafile='/usr/local/anaconda3/envs/py27/ssl/cert.pem', openssl_capath_env='SSL_CERT_DIR', openssl_capath='/usr/local/anaconda3/envs/py27/ssl/certs')"
109150,cd /usr/local/anaconda3/envs/py27/
109151,mkdir ssl
109152,cd ssl
109153,ln -s ../../../ssl/cert.pem
109154,"import ssl,urllib2"
109155,"data = urllib2.build_opener(urllib2.HTTPSHandler(context=ssl.create_default_context(cafile='/path/to/ca-cert-chain.pem')), urllib2.ProxyHandler({})).open('https://your-site.com/somefile').read()"
109156,print(data)
109157,urllib2.ProxyHandler({})
109158,data = urllib2.build_opener(urllib2.HTTPSHandler(context=ssl.create_default_context(cafile='/path/to/ca-cert-chain.pem'))).open('https://your-site.com/somefile').read()
109159,pd.get_dummies(df[col])
109160,chunks = (len(df) / 10000) + 1
109161,"df_list = np.array_split(df, chunks)"
109162,pd.get_dummies(df)
109163,df[col]
109164,df
109165,df_list
109166,"for i, df_chunk in enumerate(df_list):"
109167,"    print ""chunk"", i"
109168,"    [x, y] = preprocess_data(df_chunk)"
109169,"    super_x = pd.concat([super_x, x], axis=0)"
109170,"    super_y = pd.concat([super_y, y], axis=0)"
109171,    print datetime.datetime.utcnow()
109172,preprocess_data(df_chunk)
109173,pd.concat()
109174,chunks 6
109175,chunk 0
109176,2016-04-08 00:22:17.728849
109177,chunk 1
109178,2016-04-08 00:22:42.387693 
109179,chunk 2
109180,2016-04-08 00:23:43.124381
109181,chunk 3
109182,2016-04-08 00:25:30.249369
109183,chunk 4
109184,2016-04-08 00:28:11.922305
109185,chunk 5
109186,2016-04-08 00:32:00.357365
109187,DataFrame.append
109188,pd.concat
109189,pd.concat
109190,for-loop
109191,x
109192,"super_x = pd.concat([super_x, x], axis=0)"
109193,
109194,| iteration | size of old super_x | size of x | copying required |
109195,|         0 |                   0 |         1 |                1 |
109196,|         1 |                   1 |         1 |                2 |
109197,|         2 |                   2 |         1 |                3 |
109198,|       ... |                     |           |                  |
109199,|       N-1 |                 N-1 |         1 |                N |
109200,1 + 2 + 3 + ... + N = N(N+1)/2
109201,O(N**2)
109202,super_x = []
109203,"for i, df_chunk in enumerate(df_list):"
109204,"    [x, y] = preprocess_data(df_chunk)"
109205,    super_x.append(x)
109206,"super_x = pd.concat(super_x, axis=0)"
109207,O(1)
109208,pd.concat
109209,pd.concat
109210,super_x
109211,N
109212,super_x
109213,O(N)
109214,df_x = []
109215,df_y = []
109216,"for i, df_chunk in enumerate(df_list):"
109217,"    print ""chunk"", i"
109218,"    [x, y] = preprocess_data(df_chunk)"
109219,    df_x.append(x)
109220,    df_y.append(y)
109221,
109222,"super_x = pd.concat(df_x, axis=0)"
109223,del df_x  # Free-up memory.
109224,"super_y = pd.concat(df_y, axis=0)"
109225,del df_y  # Free-up memory.
109226,del
109227,"df_x = pd.concat(df_x, axis=0)"
109228,ptdraft/
109229,  nib.py
109230,  simulations/
109231,    life/
109232,      life.py
109233,__init__.py
109234,nib
109235,life
109236,ptdraft
109237,__init__.py
109238,sys.path
109239,PYTHONPATH
109240,from ... import nib
109241,ValueError: Attempted relative import in non-package
109242,__init__.py
109243,__init__.py
109244,from .. import mymodule
109245,import os
109246,import sys
109247,import inspect
109248,
109249,currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
109250,parentdir = os.path.dirname(currentdir)
109251,"sys.path.insert(0, parentdir) "
109252,
109253,import mymodule
109254,__file__
109255,os.path.abspath(__file__)
109256,"sys.path.insert(1, os.path.join(sys.path[0], '..'))"
109257,parentdir
109258,sys.path
109259,parentdir
109260,sys.path
109261,parentdir
109262,"sys.path.insert(1, os.path.realpath(os.path.pardir))"
109263,sys.path
109264,packaged_stuff
109265,setup.py
109266,pip install -e <myproject_folder>
109267,from packaged_stuff.modulename import function_name
109268,.
109269,└── ptdraft
109270,    ├── __init__.py
109271,    ├── nib.py
109272,    └── simulations
109273,        ├── __init__.py
109274,        └── life
109275,            ├── __init__.py
109276,            └── life.py
109277,.
109278,C:\tmp\test_imports
109279,setup.py
109280,setup.py
109281,"    from setuptools import setup, find_packages"
109282,
109283,"    setup(name='myproject', version='1.0', packages=find_packages())"
109284,setup.py
109285,python -m venv venv
109286,. venv/bin/activate
109287,./venv/Scripts/activate
109288,deactivate
109289,PS C:\tmp\test_imports> python -m venv venv
109290,PS C:\tmp\test_imports> .\venv\Scripts\activate
109291,(venv) PS C:\tmp\test_imports>
109292,myproject
109293,pip
109294,-e
109295,pip install -e .
109296,pip freeze
109297,(venv) PS C:\tmp\test_imports> pip install -e .
109298,Obtaining file:///C:/tmp/test_imports
109299,Installing collected packages: myproject
109300,  Running setup.py develop for myproject
109301,Successfully installed myproject
109302,(venv) PS C:\tmp\test_imports> pip freeze
109303,myproject==1.0
109304,mainfolder
109305,mainfolder
109306,ptdraft
109307,def function_from_nib():
109308,    print('I am the return value from function_from_nib!')
109309,from ptdraft.nib import function_from_nib
109310,
109311,if __name__ == '__main__':
109312,    function_from_nib()
109313,(venv) PS C:\tmp\test_imports> python .\ptdraft\simulations\life\life.py
109314,I am the return value from function_from_nib!
109315,sys.path
109316,sys.path
109317,ptdraft
109318,import nib
109319,ptdraft
109320,import sys
109321,"sys.path.append(""..\<parent_folder>"")"
109322,import sys
109323,"sys.path.insert(0,'..')"
109324,"sys.path.insert(0,'../..')"
109325,"sys.path.insert(0,'../sibling_dir')"
109326,import sys 
109327,sys.path.append('..')
109328,'..'
109329,import sys
109330,# Add the ptdraft folder path to the sys.path list
109331,sys.path.append('/path/to/ptdraft/')
109332,
109333,# Now you can import your module
109334,from ptdraft import nib
109335,# Or just
109336,import ptdraft
109337,/path/to/ptdraft
109338,os
109339,sys
109340,inspect
109341,from inspect import getsourcefile
109342,"import os.path as path, sys"
109343,current_dir = path.dirname(path.abspath(getsourcefile(lambda:0)))
109344,"sys.path.insert(0, current_dir[:current_dir.rfind(path.sep)])"
109345,"import my_module  # Replace ""my_module"" here with the module name."
109346,sys.path.pop(0)
109347,"import os.path as path, sys, inspect"
109348,inspect.
109349,getsourcefile
109350,from inspect import getsourcefile
109351,import os.path
109352,import sys
109353,
109354,current_path = os.path.abspath(getsourcefile(lambda:0))
109355,current_dir = os.path.dirname(current_path)
109356,parent_dir = current_dir[:current_dir.rfind(os.path.sep)]
109357,
109358,"sys.path.insert(0, parent_dir)"
109359,
109360,"import my_module  # Replace ""my_module"" here with the module name."
109361,from inspect import getsourcefile  
109362,from os.path import abspath  
109363,abspath(getsourcefile(lambda:0))
109364,sys.path
109365,sys.path.pop(0)
109366,sys.path
109367,__file__
109368,py2exe
109369,__file__
109370,execute()
109371,__file__
109372,NameError: global name '__file__' is not defined
109373,sys.path.pop(0)
109374,app/config
109375,app/tools
109376,app/submodule/config
109377,submodule
109378,app/
109379,tools
109380,app/
109381,config
109382,app/config
109383,app/submodule/config
109384,tools
109385,config
109386,sys.path.pop(0); import config
109387,submodule
109388,app/submodule/config
109389,app/config
109390,sys.path
109391,sys.path
109392,sys.modules
109393,importlib.reload()
109394,"os.path.realpath(getsourcefile(lambda:0) + ""/../.."")"
109395,os.path.sep
109396,getsourcefile
109397,/
109398,realpath
109399,import sys
109400,from pathlib import Path
109401,sys.path.append(str(Path('.').absolute().parent))
109402,"import os.path, sys"
109403,"sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))"
109404,"import os, sys\n sys.path.insert(0,os.path.pardir)"
109405,os.path.pardir
109406,sys.path.insert()
109407,__file__
109408,%cd ..
109409,import nib
109410,__init__.py
109411,%cd -
109412,env.py
109413,app.db
109414,.
109415,└── my_application
109416,    └── alembic
109417,        └── env.py
109418,    └── app
109419,        ├── __init__.py
109420,        └── db
109421,import os
109422,import sys
109423,currentdir = os.path.dirname(os.path.realpath(__file__))
109424,parentdir = os.path.dirname(currentdir)
109425,sys.path.append(parentdir)
109426,sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
109427,sys.path
109428,PYTHONPATH
109429,from ...module_name import *
109430,from ..module_name import *
109431,from ...module_name.another_module import *
109432,sys.path.append
109433,ValueError: attempted relative import beyond top-level package
109434,from ... import name
109435,a1/.../a9
109436,__init__.py
109437,from . import next_dir
109438,from ....... import b
109439,a1/a2/a3/b
109440,import sys
109441,sys.path.append('../')
109442,sys.path.append(os.path.dirname(os.getcwd()))
109443,"sys.path.insert(1, os.path.dirname(os.getcwd()))"
109444,cd ptdraft
109445,python -m simulations.life.life
109446,sys.path
109447,PYTHONPATH
109448,-m
109449,"import os, sys"
109450,"sys.path.insert(0, os.getcwd()) "
109451,python child_module1/child_script.py
109452,"import os,sys"
109453,parentdir = os.path.dirname(__file__)
109454,"sys.path.insert(0,parentdir)"
109455,import nib
109456,sys.path.append('..')
109457,sys.path.append('..')
109458,"sys.path.append(git.Repo('.', search_parent_directories=True).working_tree_dir)"
109459,import os
109460,import sys
109461,import git
109462,def get_main_git_root(path):
109463,"    main_repo_root_dir = git.Repo(path, search_parent_directories=True).working_tree_dir"
109464,    return main_repo_root_dir
109465,main_repo_root_dir = get_main_git_root('.')
109466,sys.path.append(main_repo_root_dir)
109467,import ptdraft.nib
109468,import nib
109469,/myproject
109470,  project_using_ptdraft/
109471,    main.py
109472,  ptdraft/
109473,    __init__.py
109474,    nib.py
109475,    simulations/
109476,      __init__.py
109477,      life/
109478,        __init__.py
109479,        life.py
109480,ptdraft
109481,__init__.py
109482,life.py
109483,import ptdraft.nib
109484,life.py
109485,python life.py
109486,cd /myproject
109487,python -m ptdraft.simulations.life.life
109488,ptdraft
109489,ptdraft
109490,project_using_ptdraft/main.py
109491,import sys
109492,"sys.path.append(""/myproject"")  # folder that contains ptdraft"
109493,import ptdraft
109494,import ptdraft.simulations
109495,python main.py
109496,__init__.py
109497,site-packages
109498,.
109499,└── service
109500,    └── misc
109501,        └── categories.csv
109502,    └── test
109503,        └── app_test.py
109504,    app.py
109505,    pipeline.py
109506,app.py
109507,pipeline.py
109508,"import os,sys,inspect"
109509,currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
109510,parentdir = os.path.dirname(currentdir)
109511,"sys.path.insert(0,parentdir)"
109512,
109513,os.chdir('../')
109514,from app import app
109515,os.chdir('./test')
109516,import simulations.life.life as life
109517,def func1():
109518,   pass
109519,data1 = {}
109520,"life.share(func1, data1)"
109521,func1 = data1 = None
109522,
109523,def share(*args):
109524,"   global func1, data1"
109525,"   func1, data1 = args"
109526,# Just add parent path
109527,add_parent_path(1)
109528,
109529,# Append to syspath and delete when the exist of with statement.
109530,with add_parent_path(1):
109531,   # Import modules in the parent path
109532,   pass
109533,from ptdraft import nib
109534,life.py
109535,import os
109536,import shutil
109537,
109538,"shutil.copy('../nib.py', '.')"
109539,import nib
109540,os.remove('nib.py')
109541,
109542,# now you can use it just fine:
109543,nib.foo()
109544,sys.path
109545,import os
109546,os.chdir('..')
109547,for each_line in fileinput.input(input_file):
109548,    do_something(each_line)
109549,
109550,    for each_line_again in fileinput.input(input_file):
109551,        do_something(each_line_again)
109552,device active
109553,with open(...) as f:
109554,    for line in f:
109555,        # Do something with 'line'
109556,with
109557,for line in f
109558,f
109559,for line in f:
109560,__iter__
109561,with
109562,yield
109563,with
109564,with
109565,with
109566,with
109567,for
109568,f
109569,"with open(""x.txt"") as f:"
109570,    for line in f:
109571,        do something with data
109572,yield
109573,"def readInChunks(fileObj, chunkSize=2048):"
109574,"    """""""
109575,    Lazy function to read a file piece by piece.
109576,    Default chunk size: 2kB.
109577,
109578,"    """""""
109579,    while True:
109580,        data = fileObj.read(chunkSize)
109581,        if not data:
109582,            break
109583,        yield data
109584,
109585,f = open('bigFile')
109586,for chunk in readInChunks(f):
109587,    do_something(chunk)
109588,f.close()
109589,"for line in open('myfile','r').readlines():"
109590,    do_something(line)
109591,readlines()
109592,read()
109593,fileinput
109594,import fileinput
109595,
109596,for line in fileinput.input(['myfile']):
109597,    do_something(line)
109598,fileinput.input()
109599,file
109600,for line in open(...).readlines(): <do stuff>
109601,readlines
109602,fileinput
109603,"with open(file_path, 'rU') as f:"
109604,    for line_terminated in f:
109605,        line = line_terminated.rstrip('\n')
109606,        ...
109607,'\n'
109608,'\r'
109609,'\n'
109610,'\r\n'
109611,"open(file_path, mode='rU')"
109612,"open(file_path, mode='rU')"
109613,"open(file_path, newline=None)"
109614,newline
109615,None
109616,mode
109617,'r'
109618,U
109619,\r\n
109620,\n
109621,"with open(file_path, 'rb') as f:"
109622,    with line_native_terminated in f:
109623,        ...
109624,in
109625,"open(file_path, 'rU')"
109626,f = open(input_file)
109627,for line in f:
109628,    do_stuff(line)
109629,f.close()
109630,with open(input_file) as f:
109631,f.close()
109632,HP-Z820:/mnt/fastssd/fast_file_reader$ ls -l /mnt/fastssd/nzv/HIGGS.csv
109633,-rw-rw-r-- 1 8035497980 Jan 24 16:00 /mnt/fastssd/nzv/HIGGS.csv
109634,
109635,HP-Z820:/mnt/fastssd$ ls -l all_bin.csv
109636,-rw-rw-r-- 1 40412077758 Feb  2 09:00 all_bin.csv
109637,
109638,"ga@ga-HP-Z820:/mnt/fastssd$ time python fastread.py --fileName=""all_bin.csv"" --numProcesses=32 --balanceFactor=2"
109639,2367496
109640,
109641,real    0m8.920s
109642,user    1m30.056s
109643,sys 2m38.744s
109644,
109645,In [1]: 40412077758. / 8.92
109646,Out[1]: 4530501990.807175
109647,HP-Z820:/mnt/fastssd$ time wc -l all_bin.csv
109648,2367496 all_bin.csv
109649,
109650,real    0m8.807s
109651,user    0m1.168s
109652,sys 0m7.636s
109653,
109654,
109655,"HP-Z820:/mnt/fastssd/fast_file_reader$ time python fastread.py --fileName=""HIGGS.csv"" --numProcesses=16 --balanceFactor=2"
109656,11000000
109657,
109658,real    0m2.257s
109659,user    0m12.088s
109660,sys 0m20.512s
109661,
109662,HP-Z820:/mnt/fastssd/fast_file_reader$ time wc -l HIGGS.csv
109663,11000000 HIGGS.csv
109664,
109665,real    0m1.820s
109666,user    0m0.364s
109667,sys 0m1.456s
109668,"HP-Z820:/mnt/fastssd/fast_file_reader$ time python fastread.py --fileName=""HIGGS.csv"" --numProcesses=16 --balanceFactor=2"
109669,11000000
109670,
109671,real    0m2.256s
109672,user    0m10.696s
109673,sys 0m19.952s
109674,
109675,"HP-Z820:/mnt/fastssd/fast_file_reader$ time python fastread.py --fileName=""HIGGS.csv"" --numProcesses=1 --balanceFactor=1"
109676,11000000
109677,
109678,real    0m17.380s
109679,user    0m11.124s
109680,sys 0m6.272s
109681,"HP-Z820:/mnt/fastssd/fast_file_reader$ time python fastread.py --fileName=""HIGGS.csv"" --numProcesses=1 --balanceFactor=2"
109682,11000000
109683,
109684,real    1m37.077s
109685,user    0m12.432s
109686,sys 1m24.700s
109687,fileBytes = stat(fileName).st_size  # Read quickly from OS how many bytes are in a text file
109688,"startByte, endByte = PartitionDataToWorkers(workers=numProcesses, items=fileBytes, balanceFactor=balanceFactor)"
109689,p = Pool(numProcesses)
109690,"partialSum = p.starmap(ReadFileSegment, zip(startByte, endByte, repeat(fileName))) # startByte is already a list. fileName is made into a same-length list of duplicates values."
109691,globalSum = sum(partialSum)
109692,print(globalSum)
109693,
109694,
109695,"def ReadFileSegment(startByte, endByte, fileName, searchChar='\n'):  # counts number of searchChar appearing in the byte range"
109696,"    with open(fileName, 'r') as f:"
109697,"        f.seek(startByte-1)  # seek is initially at byte 0 and then moves forward the specified amount, so seek(5) points at the 6th byte."
109698,        bytes = f.read(endByte - startByte + 1)
109699,"        cnt = len(re.findall(searchChar, bytes)) # findall with implicit compiling runs just as fast here as re.compile once + re.finditer many times."
109700,    return cnt
109701,"with f_outer as open(input_file, 'r'):"
109702,    for line_outer in f_outer:
109703,"        with f_inner as open(input_file, 'r'):"
109704,            for line_inner in f_inner:
109705,"                compute_distance(line_outer, line_inner)"
109706,sys.argv[1:]
109707,sys.stdin
109708,"fileinput.FileInput([files[, inplace[, backup[, mode[, openhook]]]]])"
109709,files
109710,"for each_line in fileinput.input([input_file, input_file]):"
109711,  do_something(each_line)
109712,#Using a text file for the example
109713,"with open(""yourFile.txt"",""r"") as f:"
109714,    text = f.readlines()
109715,for line in text:
109716,    print line
109717,for line in text:
109718,    if len(line) > 10:
109719,        print line
109720,file.seek()
109721,file.seek()
109722,"ENCODING = ""utf8"""
109723,CURRENT_FILE_DIR = os.path.dirname(os.path.abspath(__file__))
109724,
109725,# This file is used to store the last cursor position
109726,"cursor_position = os.path.join(CURRENT_FILE_DIR, ""access_cursor_position.log"")"
109727,
109728,# Log file with new lines
109729,"log_file_to_cut = os.path.join(CURRENT_FILE_DIR, ""access.log"")"
109730,"cut_file = os.path.join(CURRENT_FILE_DIR, ""cut_access"", ""cut.log"")"
109731,
109732,# Set in from_line 
109733,from_position = 0
109734,try:
109735,"    with open(cursor_position, ""r"", encoding=ENCODING) as f:"
109736,        from_position = int(f.read())
109737,except Exception as e:
109738,    pass
109739,
109740,# We read log_file_to_cut to put new lines in cut_file
109741,"with open(log_file_to_cut, ""r"", encoding=ENCODING) as f:"
109742,"    with open(cut_file, ""w"", encoding=ENCODING) as fw:"
109743,        # We set cursor to the last position used (during last run of script)
109744,        f.seek(from_position)
109745,        for line in f:
109746,"            fw.write(""%s"" % (line))"
109747,
109748,    # We save the last position of cursor for next usage
109749,"    with open(cursor_position, ""w"", encoding=ENCODING) as fw:"
109750,        fw.write(str(f.tell()))
109751,import numpy as np
109752,import math
109753,
109754,lines_total = n    
109755,"similarity = np.zeros(n,n)"
109756,lines_per_chunk = m
109757,n_chunks = math.ceil(float(n)/m)
109758,for i in xrange(n_chunks):
109759,    for j in xrange(n_chunks):
109760,        chunk_i = (function of your choice to read lines i*lines_per_chunk to (i+1)*lines_per_chunk)
109761,        chunk_j = (function of your choice to read lines j*lines_per_chunk to (j+1)*lines_per_chunk)
109762,"        similarity[i*lines_per_chunk:(i+1)*lines_per_chunk,"
109763,"                   j*lines_per_chunk:(j+1)*lines_per_chunk] = fast_operation(chunk_i, chunk_j) "
109764,"with open(file_name, ""rU"") as read_file:"
109765,"    for i, row in enumerate(read_file, 1):"
109766,        #do something
109767,        #i in line of that line
109768,        #row containts all data of that line
